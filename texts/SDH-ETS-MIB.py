#
# PySNMP MIB module SDH-ETS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/SDH-ETS-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:43:46 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
SagemBoolean, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "Severity")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, IpAddress, Counter64, Unsigned32, iso, Bits, Counter32, ModuleIdentity, NotificationType, ObjectIdentity, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Counter64", "Unsigned32", "iso", "Bits", "Counter32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sdhEts = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 110))
if mibBuilder.loadTexts: sdhEts.setLastUpdated('0205220000Z')
if mibBuilder.loadTexts: sdhEts.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
if mibBuilder.loadTexts: sdhEts.setContactInfo('    ')
if mibBuilder.loadTexts: sdhEts.setDescription('The MIB module defines SDH transmition part of an equipment \n\tThis MIB use the logical model defined in ETSI ETS 300 304.\n\tETS 300 304 (February 1997) defines the SDH information \n\tmodel for the Network Element. \n\tThis MIB refers to SHELF-MIB \n\tfor the definition of the Board that supports the interface.\n\tThis MIB is refered by XCON-MIB that uses\n\tthe definition of termination point to create cross connection.\n\tThis MIB also define configuration of the different SDH blocs \n\tsuch as alarm monitoring and severity and give the current status of \n\tthe termination point. \n\t')
spiTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 10))
rsTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 20))
rsCTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 25))
msTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 30))
msCTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 35))
msa = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 60))
au4CTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 70))
vc4TTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 100))
tu3CTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 120))
vc3TTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 130))
tu12CTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 140))
vc12TTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 150))
nspiCTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 160))
nspiTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 170))
channel = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 180))
bandwidth = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 110, 190))
class SpiTTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("los", 1), ("tf", 2), ("losTf", 3))

class Loopback(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("equipment", 2), ("lineEquipement", 3))

class STMLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 4, 16, 64))
    namedValues = NamedValues(("stm1", 1), ("stm4", 4), ("stm16", 16), ("stm64", 64))

class SpiTTPType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("electrical", 0), ("optical", 1))

spiTTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPNumber.setStatus('current')
if mibBuilder.loadTexts: spiTTPNumber.setDescription('Number of synchronous physical interface in equipment \n\t = number of element in spiTTPTable ')
spiTTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2), )
if mibBuilder.loadTexts: spiTTPTable.setStatus('current')
if mibBuilder.loadTexts: spiTTPTable.setDescription('List of synchronous physical interface in equipment.')
spiTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "spiTTPIndex"))
if mibBuilder.loadTexts: spiTTPEntry.setStatus('current')
if mibBuilder.loadTexts: spiTTPEntry.setDescription('A particular synchronous physical interface of the equipment.')
spiTTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPIndex.setStatus('current')
if mibBuilder.loadTexts: spiTTPIndex.setDescription('A unique value which identify a particular\n\tsynchronous physical interface.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware.\n\tExemple:\n\tFor ADR155c equipement index are 1,64,127,190 for STM1 interfaces.\n\tFor ADR2500c equipement index are:\n\t 1,1009,2017,3025,4033,5041,6049,7057 for 8 STM16 or 8 STM4,\n\t 1,253,505,757        1009,1261,1513,1765 |\n\t 2017,2269,2521,2773  3025,3277,3529,3781 | --> for 8 (4*STM1) \n\t 4033,4285,4537,4789  5041,5293,5545,5797 |\n\t 6049,6301,6553,6805  7057,7309,7561,7813 |\t')
spiTTPStmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 2), STMLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPStmLevel.setStatus('current')
if mibBuilder.loadTexts: spiTTPStmLevel.setDescription('The STM-n level of the interface.')
spiTTPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 3), SpiTTPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPType.setStatus('current')
if mibBuilder.loadTexts: spiTTPType.setDescription('The kind of the interface: electrical or optical')
spiTTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiTTPName.setStatus('current')
if mibBuilder.loadTexts: spiTTPName.setDescription('A text string which identifies the particular entry among the\n\tsynchronous physical interface entries. ')
spiTTPBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPBoardIndex.setStatus('current')
if mibBuilder.loadTexts: spiTTPBoardIndex.setDescription('Index of the Board that supports the physical acces \n\tof this interface. This index refers to another MIB that defines\n\tthe board')
spiTTPBoardAcces = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPBoardAcces.setStatus('current')
if mibBuilder.loadTexts: spiTTPBoardAcces.setDescription('Friendly Index of the physical acces on the Board that supports \n\tthe interface')
spiTTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiTTPMonitor.setStatus('current')
if mibBuilder.loadTexts: spiTTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this synchronous physical interface.')
spiTTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 8), SpiTTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPFailure.setStatus('current')
if mibBuilder.loadTexts: spiTTPFailure.setDescription('Active failures on synchronous physical interface')
spiTTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 9), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spiTTPSeverity.setStatus('current')
if mibBuilder.loadTexts: spiTTPSeverity.setDescription('Severity associed with active failure for synchronous physical interface.')
spiTTPLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 10), Loopback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiTTPLoopback.setStatus('current')
if mibBuilder.loadTexts: spiTTPLoopback.setDescription("This field gives the active loopback status on the\n\tsynchronous physical interface.\n\tWhen its value is `line' the data flow recieved from the port side\n\tis sent back to the line.\n\tWhen its value is `equipment' the data flow recieved form equipment\n\tside is send back.\n\tThe field can be set to a particular loopback value, even if there\n\tno garantee that the loopback is really done. The real loopback status \n\tof the interface must be checked in the response.\n\tThe loopback can be cleared by the equipment when it cannot remain \n\tfor any reason.")
spiTTPLos = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiTTPLos.setStatus('current')
if mibBuilder.loadTexts: spiTTPLos.setDescription('Severity associed with Loss Of Signal failure\n\tfor synchronous physical interface.')
spiTTPTf = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 10, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiTTPTf.setStatus('current')
if mibBuilder.loadTexts: spiTTPTf.setDescription('Severity associed with Tranmit Fail failure\n\tfor synchronous physical interface.')
class RsTTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("lof", 1))

class EOWMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("codirectional", 0), ("contradirectional", 1))

rsTTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2), )
if mibBuilder.loadTexts: rsTTPTable.setStatus('current')
if mibBuilder.loadTexts: rsTTPTable.setDescription('List of regenerator section terminaison in equipment.')
rsTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "rsTTPIndex"))
if mibBuilder.loadTexts: rsTTPEntry.setStatus('current')
if mibBuilder.loadTexts: rsTTPEntry.setDescription('A particular regenerator section terminaison of the equipment.')
rsTTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPIndex.setStatus('current')
if mibBuilder.loadTexts: rsTTPIndex.setDescription('A unique value which identify a particular\n\tsynchronous physical interface.\n\tThe value of this index is always the same as spiTTPIndex.\n\t')
rsTTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTTPMonitor.setStatus('current')
if mibBuilder.loadTexts: rsTTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this regenerator section terminaison.')
rsTTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTTPName.setStatus('current')
if mibBuilder.loadTexts: rsTTPName.setDescription('A text string which identifies the particular entry among the\n\tregenerator section terminaison entries. ')
rsTTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 4), RsTTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPFailure.setStatus('current')
if mibBuilder.loadTexts: rsTTPFailure.setDescription('Active failures on regenerator section terminaison')
rsTTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 5), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPSeverity.setStatus('current')
if mibBuilder.loadTexts: rsTTPSeverity.setDescription('Severity associed active Failure for regenerator section terminaison.')
rsTTPEOWMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 8), EOWMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPEOWMode.setStatus('current')
if mibBuilder.loadTexts: rsTTPEOWMode.setDescription('Mode used for EOW: Codir or contradir Master')
rsTTPE1SrcPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPE1SrcPointer.setStatus('current')
if mibBuilder.loadTexts: rsTTPE1SrcPointer.setDescription('A reference to the object which sends the data flow to\n\tE1 RSOH byte (index in X21 table)\n\tUsualy E1 carries X21 EOW (engineering order wire) data\n\tand thus the pointer s value reference a mib X21 port entry.\n\tZero indicates not used')
rsTTPF1SrcPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPF1SrcPointer.setStatus('current')
if mibBuilder.loadTexts: rsTTPF1SrcPointer.setDescription('A reference to the object which sends the data flow to\n    F1 RSOH byte.Zero indicates not used')
rsTTPSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTTPSesThreshold.setStatus('current')
if mibBuilder.loadTexts: rsTTPSesThreshold.setDescription('The number of errors above which the second is declared\n\tseverely errored for this interface/function.\n\tThis value apply for near and far interface/function\n\t')
rsTTPEOWByteLine = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTTPEOWByteLine.setStatus('current')
if mibBuilder.loadTexts: rsTTPEOWByteLine.setDescription('The line determines the SOH byte selected for Engineering\n   Order Wire: SOH starts with 3 lines of RSOH (1,2,3) and \n   finish with 5 lines of MSOH (5,6,7,8,9)\n   \t\t\tE1 is on line 2 column 4.\n   Zero indicates EOW not used, value different from 2 means EOW \n   not on E1')
rsTTPEOWByteColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTTPEOWByteColumn.setStatus('current')
if mibBuilder.loadTexts: rsTTPEOWByteColumn.setDescription('The column determines the SOH byte selected for Engineering \n   Order Wire: SOH is composed of Col [1,9]\n    \t\t E1 is on line 2 column 4.\n   Zero indicates EOW not used, value different from 4 means EOW \n   not on E1')
rsTTPLof = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 20, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsTTPLof.setStatus('current')
if mibBuilder.loadTexts: rsTTPLof.setDescription('Severity associed with Loss Of Frame failure\n\tfor regenerator section terminaison.')
class ProtectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("msp", 1), ("msSPRing", 2))

class MsTTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 12, 8))
    namedValues = NamedValues(("none", 0), ("ais", 1), ("eber", 2), ("sd", 4), ("sdRdi", 12), ("rdi", 8))

msTTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2), )
if mibBuilder.loadTexts: msTTPTable.setStatus('current')
if mibBuilder.loadTexts: msTTPTable.setDescription('List of multiplex section terminaison in equipment.')
msTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "msTTPIndex"))
if mibBuilder.loadTexts: msTTPEntry.setStatus('current')
if mibBuilder.loadTexts: msTTPEntry.setDescription('A particular multiplex section terminaison of the equipment.')
msTTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPIndex.setStatus('current')
if mibBuilder.loadTexts: msTTPIndex.setDescription('A unique value which identify a particular\n\tsynchronous physical interface.\n\tThe value of this index is always the same as spiTTPIndex')
msTTPProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 2), ProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPProtectionType.setStatus('current')
if mibBuilder.loadTexts: msTTPProtectionType.setDescription("The value of this field indicates the kind of wanted multiplex section protection.\n    The default value is NONE.\n    if value is changed in msp(1) or msSPRing(2) then (if it's possible) an entry is created\n    respectivelly in mspTable or msSPRingTable. But these tables have to be completed to obtain \n    a configured protection. \n    If value is changed in None(0)then the associated entry in mspTable or msSPRingTable is deleted\n    (if it's possible).")
msTTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPMonitor.setStatus('current')
if mibBuilder.loadTexts: msTTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this multiplex section terminaison.')
msTTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPName.setStatus('current')
if mibBuilder.loadTexts: msTTPName.setDescription('A text string which identifies the particular entry among the\n\tmultiplex section terminaison entries. ')
msTTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 5), MsTTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPFailure.setStatus('current')
if mibBuilder.loadTexts: msTTPFailure.setDescription('Active failures on multiplex section terminaison')
msTTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 6), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPSeverity.setStatus('current')
if mibBuilder.loadTexts: msTTPSeverity.setDescription('Severity associed with active failures on multiplex section terminaison.')
msTTPEOWMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 7), EOWMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPEOWMode.setStatus('current')
if mibBuilder.loadTexts: msTTPEOWMode.setDescription('Mode used for EOW: Codir or contradir Master')
msTTPE2SrcPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPE2SrcPointer.setStatus('current')
if mibBuilder.loadTexts: msTTPE2SrcPointer.setDescription('A reference to the object which sends the data flow to\n\tE2 MSOH byte.\n\tUsualy E2 carries X21 EOW (engineering order wire) data.\n\tThe reference is an index in X21 table.Zero indicates not used')
msTTPEOWByteLine = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPEOWByteLine.setStatus('current')
if mibBuilder.loadTexts: msTTPEOWByteLine.setDescription('The line determines the SOH byte selected for Engineering\n   Order Wire: SOH starts with 3 lines of RSOH (1,2,3) and \n   finish with 5 lines of MSOH (5,6,7,8,9)\n               E2 is on line 9 column 7.\n   Zero indicates not used, value different from 9 means EOW \n   not on E2')
msTTPEOWByteColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPEOWByteColumn.setStatus('current')
if mibBuilder.loadTexts: msTTPEOWByteColumn.setDescription('The column determines the SOH byte selected for Engineering \n   Order Wire: SOH is composed of Col [1,9]\n               E2 is on line 9 column 7.\n   Zero indicates EOW not used, value different from 7 means EOW \n   not on E2')
msTTPMonEber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 11), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPMonEber.setStatus('current')
if mibBuilder.loadTexts: msTTPMonEber.setDescription('If the value of this field is true, the eber is monitored and is used as \n\tMSP and SETS criterium.\n\tIf this defect is detected, an ais signal is send downstream and\n\trdi upstream.')
msTTPSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPSdThreshold.setStatus('current')
if mibBuilder.loadTexts: msTTPSdThreshold.setDescription('A Signal Degrade failure is declared if the error block rate is\n\tgreater than 1E(-mstSdThreshold).\n\tThe Signal Degrade failure desapeared when the error block rate is\n\tless than 1E(1 - mstSdThreshold).')
msTTPSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msTTPSesThreshold.setStatus('current')
if mibBuilder.loadTexts: msTTPSesThreshold.setDescription('The number of errors above which the second is declared\n\tseverely errored for this interface/function.\n\tThis value apply for near and far interface/function')
msTTPEber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPEber.setStatus('current')
if mibBuilder.loadTexts: msTTPEber.setDescription('Severity associed with Excecive Bit Error Rate failure\n\tfor multiplex section terminaison.')
msTTPSd = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPSd.setStatus('current')
if mibBuilder.loadTexts: msTTPSd.setDescription('Severity associed with Signal Degrade failure\n\tfor multiplex section terminaison.')
msTTPRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 30, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msTTPRdi.setStatus('current')
if mibBuilder.loadTexts: msTTPRdi.setDescription('Severity associed with Remote Defect Indication failure\n\tfor multiplex section terminaison.')
class MsaSrcType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("msa", 1), ("vc4", 2))

class MsaSinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("msa", 0), ("mst", 1))

msaTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2), )
if mibBuilder.loadTexts: msaTable.setStatus('current')
if mibBuilder.loadTexts: msaTable.setDescription('List of multiplex section adaptation in equipment.')
msaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "msaIndex"))
if mibBuilder.loadTexts: msaEntry.setStatus('current')
if mibBuilder.loadTexts: msaEntry.setDescription('A particular multiplex section adaptation of the equipment.')
msaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaIndex.setStatus('current')
if mibBuilder.loadTexts: msaIndex.setDescription('Index of a particular entry among the\n\tmultiplex section adaptation entries. ')
msaSTMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 2), STMLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSTMLevel.setStatus('current')
if mibBuilder.loadTexts: msaSTMLevel.setDescription('The STM-n level of the multiplex section adaptation.')
msaSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 3), MsaSinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSinkType.setStatus('current')
if mibBuilder.loadTexts: msaSinkType.setDescription(' Type of msa sinkPointer: msa or mst')
msaSinkPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSinkPointer.setStatus('current')
if mibBuilder.loadTexts: msaSinkPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on synchronous port interface side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe MST it is hard wired with.')
msaName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msaName.setStatus('current')
if mibBuilder.loadTexts: msaName.setDescription('A text string which identifies the particular entry among the\n\tmultiplex section adaptation entries. ')
msaSrc1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 6), MsaSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc1Type.setStatus('current')
if mibBuilder.loadTexts: msaSrc1Type.setDescription('Type of msa srcPointer: msa or vc4')
msaSrc2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 7), MsaSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc2Type.setStatus('current')
if mibBuilder.loadTexts: msaSrc2Type.setDescription('Type of msa srcPointer: msa or vc4')
msaSrc3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 8), MsaSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc3Type.setStatus('current')
if mibBuilder.loadTexts: msaSrc3Type.setDescription('Type of msa srcPointer: msa or vc4')
msaSrc4Type = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 9), MsaSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc4Type.setStatus('current')
if mibBuilder.loadTexts: msaSrc4Type.setDescription('Type of msa srcPointer: msa or vc4')
msaSrc1Pointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc1Pointer.setStatus('current')
if mibBuilder.loadTexts: msaSrc1Pointer.setDescription('Table index of the object which sends the data flow to this\n\tfunction on equipment side.\n\tFor STM16: 4 pseudo STM4 (group of 4STM1) identified by their \n\t\t\t\tindex in msaTable. Theses indexes must be differents to thoses\n\t\t\t\t used by the MST Table.\n\tFor STM4:  4 VC4 identified by their index in vc4Table \n    For STM1:  1 VC4 identified by its index in vc4Table \n\t')
msaSrc2Pointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc2Pointer.setStatus('current')
if mibBuilder.loadTexts: msaSrc2Pointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on equipment side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe VC4 function it is hard wired with.')
msaSrc3Pointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc3Pointer.setStatus('current')
if mibBuilder.loadTexts: msaSrc3Pointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on equipment side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe VC4 function it is hard wired with.')
msaSrc4Pointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 60, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msaSrc4Pointer.setStatus('current')
if mibBuilder.loadTexts: msaSrc4Pointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on equipment side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe VC4 function it is hard wired with.')
class CTPStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("free", 0), ("used", 1))

class Au4CTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("ais", 1), ("lop", 2), ("lom", 3))

class Au4CTPCnxType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16, 20))
    namedValues = NamedValues(("none", 0), ("au", 1), ("au4c", 4), ("au16c", 16), ("tu", 20))

au4CTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 70, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPNumber.setStatus('current')
if mibBuilder.loadTexts: au4CTPNumber.setDescription('Number of administrative unit order 4 in equipment.')
au4CTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2), )
if mibBuilder.loadTexts: au4CTPTable.setStatus('current')
if mibBuilder.loadTexts: au4CTPTable.setDescription("List of administrative unit order 4 in equipment which are availables for new connection or \n\t used in connection. In that case, an indication on the connection type is set \n\t into the au4CTPCnxType Variable.\n\t All au4 CTP, which are made up of lower connection level (tu3 or tu12), are set to 'used' value with \n\t 'tu' type connection indication .")
au4CTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "au4CTPIndex"))
if mibBuilder.loadTexts: au4CTPEntry.setStatus('current')
if mibBuilder.loadTexts: au4CTPEntry.setDescription('A particular administrative unit order 4 of the equipment.')
au4CTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPIndex.setStatus('current')
if mibBuilder.loadTexts: au4CTPIndex.setDescription('A unique value which identify a particular\n\tadministrative unit order 4.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
au4CTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 2), CTPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPStatus.setStatus('current')
if mibBuilder.loadTexts: au4CTPStatus.setDescription("au4 connection point Status: free or used.\n\tThe 'free' value is used when there is no connection with this output CTP")
au4CTPCnxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 3), Au4CTPCnxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPCnxType.setStatus('current')
if mibBuilder.loadTexts: au4CTPCnxType.setDescription("au4 connection Type: none, au4, au4-4c,au4-16c,tu.\n\tThe 'none' value is used when there is no connection with this output CTP")
au4CTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: au4CTPName.setStatus('current')
if mibBuilder.loadTexts: au4CTPName.setDescription('A text string which identifies the particular entry among the\n\tadministrative unit order 4 entries. ')
au4CTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: au4CTPMonitor.setStatus('current')
if mibBuilder.loadTexts: au4CTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this administrative unit order 4.')
au4CTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 7), Au4CTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPFailure.setStatus('current')
if mibBuilder.loadTexts: au4CTPFailure.setDescription('Active failures on administrative unit order 4')
au4CTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: au4CTPSeverity.setStatus('current')
if mibBuilder.loadTexts: au4CTPSeverity.setDescription('A reference to failure severity for administrative unit order 4.')
au4CTPAis = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: au4CTPAis.setStatus('current')
if mibBuilder.loadTexts: au4CTPAis.setDescription('Severity associed with Alarme Indication Signal failure\n\tfor administrative unit order 4.')
au4CTPLop = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: au4CTPLop.setStatus('current')
if mibBuilder.loadTexts: au4CTPLop.setDescription('Severity associed with Loss Of Pointer failure\n\tfor administrative unit order 4.')
au4CTPLom = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 70, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: au4CTPLom.setStatus('current')
if mibBuilder.loadTexts: au4CTPLom.setDescription('Severity associed with Loss Of MultiFrame failure\n\tfor administrative unit order 4.')
class Vc4TTPSinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mst", 1), ("nspi", 2))

class Vc4TTPTraceMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 16))
    namedValues = NamedValues(("size1", 1), ("size16", 16))

class Vc4TTPSignalLabel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("unequiped", 0), ("unspecified", 1), ("tug", 2), ("all1", 255))

class Vc4TTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19))
    namedValues = NamedValues(("none", 0), ("rdi", 1), ("sd", 2), ("sdRdi", 3), ("uneq", 4), ("uneqSd", 6), ("plm", 8), ("plmRdi", 9), ("plmSd", 10), ("plmRdiSd", 11), ("tim", 16), ("timRdi", 17), ("timSd", 18), ("timRdiSd", 19))

vc4TTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 100, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPNumber.setStatus('current')
if mibBuilder.loadTexts: vc4TTPNumber.setDescription('Number of virtual container order 4 in equipment.')
vc4TTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2), )
if mibBuilder.loadTexts: vc4TTPTable.setStatus('current')
if mibBuilder.loadTexts: vc4TTPTable.setDescription('List of virtual container order 4 in equipment.The number of records depends on the kinds of\n\t configured boards')
vc4TTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "vc4TTPIndex"))
if mibBuilder.loadTexts: vc4TTPEntry.setStatus('current')
if mibBuilder.loadTexts: vc4TTPEntry.setDescription('A particular virtual container order 4 of the equipment.')
vc4TTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPIndex.setStatus('current')
if mibBuilder.loadTexts: vc4TTPIndex.setDescription('A unique value which identify a particular\n\tvirtual container order 4.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
vc4TTPSinkPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPSinkPointer.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSinkPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on synchronous or unsynchronous port interface side.\n\tThis pointer corresponds to an index in the msTTPTable or nspiTTPTable.')
vc4TTPSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 3), Vc4TTPSinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPSinkType.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSinkType.setDescription('A reference to the kind of the sink Pointer')
vc4TTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPName.setStatus('current')
if mibBuilder.loadTexts: vc4TTPName.setDescription('A text string which identifies the particular entry among the\n\tvirtual container order 4 entries. ')
vc4TTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPMonitor.setStatus('current')
if mibBuilder.loadTexts: vc4TTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this virtual container order 4.')
vc4TTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 7), Vc4TTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPFailure.setStatus('current')
if mibBuilder.loadTexts: vc4TTPFailure.setDescription('Active failures on virtual container order 4')
vc4TTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPSeverity.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSeverity.setDescription('A reference to failure severity for virtual container order 4.')
vc4TTPTraceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 9), Vc4TTPTraceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPTraceMode.setStatus('current')
if mibBuilder.loadTexts: vc4TTPTraceMode.setDescription('Configuration of the pathTrace length (1 byte or 16 bytes).')
vc4TTPPathTraceExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPPathTraceExpected.setStatus('current')
if mibBuilder.loadTexts: vc4TTPPathTraceExpected.setDescription("The path trace is a user string that always follows the vc4.\n\tIf the value the received path trace does not match this one, a\n\ttim (Trail Identifier Mismatch) failure is issued.\n\tThe value `?              ' match all possible received path trace.")
vc4TTPPathTraceSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPPathTraceSent.setStatus('current')
if mibBuilder.loadTexts: vc4TTPPathTraceSent.setDescription("The path trace is a user string that always follows the vc4.\n\tThe value of this field is sent in j1 byte as path trace for this vc4.\n\tThe default value is `all 0'.")
vc4TTPPathTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPPathTraceReceived.setStatus('current')
if mibBuilder.loadTexts: vc4TTPPathTraceReceived.setDescription('The path trace is a user string that always follows the vc4.\n\tThe value is the actual path trace received in j1 byte')
vc4TTPLabelExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 14), Vc4TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPLabelExpected.setStatus('current')
if mibBuilder.loadTexts: vc4TTPLabelExpected.setDescription('The signal label indicates the multiplexing structure of the vc4.\n\tIf the signal label received for this vc4 is not null and does\n\tnot match this field, a Signal Label Mismatch failure is detected.\n\tIf the received label is null a virtual container UNEQuiped\n\tfailure is detected.')
vc4TTPLabelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 15), Vc4TTPSignalLabel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPLabelSent.setStatus('current')
if mibBuilder.loadTexts: vc4TTPLabelSent.setDescription('The signal label indicates the multiplexing structure of the vc4.\n\tThe value of this field in sent as signal label for the vc4.')
vc4TTPLabelReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 16), Vc4TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPLabelReceived.setStatus('current')
if mibBuilder.loadTexts: vc4TTPLabelReceived.setDescription('The signal label indicates the multiplexing structure of the vc4.\n\tThe value of this field is the actual received signal label\n\tfor this vc4')
vc4TTPSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPSdThreshold.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSdThreshold.setDescription('A Signal Degrade failure is declared if the error block rate is\n\tgreater than 1E(-SdThreshold).\n\tThe Signal Degrade failure desapeared when the error block rate is\n\tless than 1E(1 - SdThreshold).')
vc4TTPSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc4TTPSesThreshold.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSesThreshold.setDescription('The number of errors above which the second is declared\n\tseverely errored for this interface/function.\n\tThis value apply for near and far interface/function')
vc4TTPBidirectionnal = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 19), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPBidirectionnal.setStatus('current')
if mibBuilder.loadTexts: vc4TTPBidirectionnal.setDescription('If set to false the equipment does not send Remote Defect Indication.')
vc4TTPRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPRdi.setStatus('current')
if mibBuilder.loadTexts: vc4TTPRdi.setDescription('Severity associed with Remote Defect Indication failure\n\tfor virtual container order 4.')
vc4TTPSd = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPSd.setStatus('current')
if mibBuilder.loadTexts: vc4TTPSd.setDescription('Severity associed with Signal Degrade failure\n\tfor virtual container order 4.')
vc4TTPUneq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPUneq.setStatus('current')
if mibBuilder.loadTexts: vc4TTPUneq.setDescription('Severity associed with virtual container UNEQuiped failure\n\tfor virtual container order 4.')
vc4TTPPlm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 23), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPPlm.setStatus('current')
if mibBuilder.loadTexts: vc4TTPPlm.setDescription('Severity associed with Path Label Mismatch failure\n\tfor virtual container order 4.')
vc4TTPTimDis = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 24), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPTimDis.setStatus('current')
if mibBuilder.loadTexts: vc4TTPTimDis.setDescription('If set to true the equipment does not manage the Tim Failure.')
vc4TTPTim = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 100, 2, 1, 25), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc4TTPTim.setStatus('current')
if mibBuilder.loadTexts: vc4TTPTim.setDescription('Severity associed with Trail Identifier Mismatch failure\n\tfor virtual container order 4.')
class Tu3CTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("ais", 1), ("lop", 2))

tu3CTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 120, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu3CTPNumber.setStatus('current')
if mibBuilder.loadTexts: tu3CTPNumber.setDescription('Number of tributary unit in equipment.')
tu3CTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2), )
if mibBuilder.loadTexts: tu3CTPTable.setStatus('current')
if mibBuilder.loadTexts: tu3CTPTable.setDescription('List of tributary units order 3 in equipment which are availables for new connection or used in\n \tthe same connection level. In that case, an indication on the connection point status is set into the \n \ttu3CTPStatus Variable.\n\t All tu3 CTP, which are involved in different connection level (tu12 or au4), disappear from\n\t this List.')
tu3CTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "tu3CTPIndex"))
if mibBuilder.loadTexts: tu3CTPEntry.setStatus('current')
if mibBuilder.loadTexts: tu3CTPEntry.setDescription('A particular tributary unit of the equipment.')
tu3CTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu3CTPIndex.setStatus('current')
if mibBuilder.loadTexts: tu3CTPIndex.setDescription('Index that identifies the particular entry among the\n\ttributary unit entries. ')
tu3CTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 2), CTPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu3CTPStatus.setStatus('current')
if mibBuilder.loadTexts: tu3CTPStatus.setDescription("tu3 connection point Status: free or used.\n\tThe 'free' value is used when there is no connection with this output CTP")
tu3CTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu3CTPName.setStatus('current')
if mibBuilder.loadTexts: tu3CTPName.setDescription('A text string which identifies the particular entry among the\n\ttributary unit entries. ')
tu3CTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu3CTPMonitor.setStatus('current')
if mibBuilder.loadTexts: tu3CTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this tributary unit.')
tu3CTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 7), Tu3CTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu3CTPFailure.setStatus('current')
if mibBuilder.loadTexts: tu3CTPFailure.setDescription('Active failures on tributary unit')
tu3CTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu3CTPSeverity.setStatus('current')
if mibBuilder.loadTexts: tu3CTPSeverity.setDescription('A reference to failure severity for tributary unit.')
tu3CTPAis = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu3CTPAis.setStatus('current')
if mibBuilder.loadTexts: tu3CTPAis.setDescription('Severity associed with Alarme Indication Signal failure\n\tfor tributary unit.')
tu3CTPLop = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 120, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu3CTPLop.setStatus('current')
if mibBuilder.loadTexts: tu3CTPLop.setDescription('Severity associed with Loss Of Pointer failure\n\tfor tributary unit.')
class Tu12CTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("ais", 1), ("lop", 2))

tu12CTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 140, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu12CTPNumber.setStatus('current')
if mibBuilder.loadTexts: tu12CTPNumber.setDescription('Number of tributary unit in equipment.')
tu12CTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2), )
if mibBuilder.loadTexts: tu12CTPTable.setStatus('current')
if mibBuilder.loadTexts: tu12CTPTable.setDescription('List of tributary unit order 12 in equipment which are availables for new connection or \n\t used in the same connection level. In that case, an indication on the connection point Status\n\t is set into the tu12CTPStatus Variable.\n\t All tu12 CTP, which are involved in a different connection level (tu3 or au4), disappear from\n\t this List.')
tu12CTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "tu12CTPIndex"))
if mibBuilder.loadTexts: tu12CTPEntry.setStatus('current')
if mibBuilder.loadTexts: tu12CTPEntry.setDescription('A particular tributary unit of the equipment.')
tu12CTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu12CTPIndex.setStatus('current')
if mibBuilder.loadTexts: tu12CTPIndex.setDescription('A unique value which identify a particular tu12.')
tu12CTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 2), CTPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu12CTPStatus.setStatus('current')
if mibBuilder.loadTexts: tu12CTPStatus.setDescription("tu12 connection point Status: free or used.\n\tThe 'free' value is used when there is no connection with this output CTP")
tu12CTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu12CTPName.setStatus('current')
if mibBuilder.loadTexts: tu12CTPName.setDescription('A text string which identifies the particular entry among the\n\ttributary unit entries. ')
tu12CTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu12CTPMonitor.setStatus('current')
if mibBuilder.loadTexts: tu12CTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this tributary unit.')
tu12CTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 7), Tu12CTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu12CTPFailure.setStatus('current')
if mibBuilder.loadTexts: tu12CTPFailure.setDescription('Active failures on tributary unit')
tu12CTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tu12CTPSeverity.setStatus('current')
if mibBuilder.loadTexts: tu12CTPSeverity.setDescription('A reference to failure severity for tributary unit.')
tu12CTPAis = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu12CTPAis.setStatus('current')
if mibBuilder.loadTexts: tu12CTPAis.setDescription('Severity associed with Alarme Indication Signal failure\n\tfor tributary unit.')
tu12CTPLop = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 140, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tu12CTPLop.setStatus('current')
if mibBuilder.loadTexts: tu12CTPLop.setDescription('Severity associed with Loss Of Pointer failure\n\tfor tributary unit.')
class Vc3TTPSinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vc4", 1), ("nspi", 2))

class Vc3TTPSignalLabel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 7))
    namedValues = NamedValues(("unequiped", 0), ("unspecified", 1), ("mapping3445", 4), ("all1", 7))

class VcLoFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 16, 17, 18, 19))
    namedValues = NamedValues(("none", 0), ("rdi", 1), ("sd", 2), ("sdRdi", 3), ("uneq", 4), ("uneqSd", 6), ("plm", 8), ("plmRdi", 9), ("plmSd", 10), ("plmRdiSd", 11), ("tim", 16), ("timRdi", 17), ("timSd", 18), ("timRdiSd", 19))

vc3TTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 130, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPNumber.setStatus('current')
if mibBuilder.loadTexts: vc3TTPNumber.setDescription('Number of virtual container order 3 in equipment.')
vc3TTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2), )
if mibBuilder.loadTexts: vc3TTPTable.setStatus('current')
if mibBuilder.loadTexts: vc3TTPTable.setDescription('List of virtual container order 3 in equipment.The number of records depends on the kinds of\n\t configured boards')
vc3TTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "vc3TTPIndex"))
if mibBuilder.loadTexts: vc3TTPEntry.setStatus('current')
if mibBuilder.loadTexts: vc3TTPEntry.setDescription('A particular virtual container order 3 of the equipment.')
vc3TTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPIndex.setStatus('current')
if mibBuilder.loadTexts: vc3TTPIndex.setDescription('A unique value which identify a particular\n\tvirtual container order 3.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
vc3TTPSinkPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPSinkPointer.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSinkPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on non-sdh physical port side.')
vc3TTPSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 3), Vc3TTPSinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPSinkType.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSinkType.setDescription('A reference to the kind of the sink Pointer')
vc3TTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPName.setStatus('current')
if mibBuilder.loadTexts: vc3TTPName.setDescription('A text string which identifies the particular entry among the\n\tvirtual container order 3 entries. ')
vc3TTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPMonitor.setStatus('current')
if mibBuilder.loadTexts: vc3TTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this virtual container order 3.')
vc3TTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 7), VcLoFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPFailure.setStatus('current')
if mibBuilder.loadTexts: vc3TTPFailure.setDescription('Active failures on virtual container order 3')
vc3TTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPSeverity.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSeverity.setDescription('A reference to failure severity for virtual container order 3.')
vc3TTPPathTraceExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPPathTraceExpected.setStatus('current')
if mibBuilder.loadTexts: vc3TTPPathTraceExpected.setDescription("The path trace is a user string that always follows the vc3.\n\tIf the value the received path trace does not match this one, a\n\ttim (Trail Identifier Mismatch) failure is issued.\n\tThe value `?              ' match all possible received path trace.")
vc3TTPPathTraceSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPPathTraceSent.setStatus('current')
if mibBuilder.loadTexts: vc3TTPPathTraceSent.setDescription("The path trace is a user string that always follows the vc3.\n\tThe value of this field is sent in j1 byte as path trace for this vc3.\n\tThe default value is `all 0'.")
vc3TTPPathTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPPathTraceReceived.setStatus('current')
if mibBuilder.loadTexts: vc3TTPPathTraceReceived.setDescription('The path trace is a user string that always follows the vc3.\n\tThe value is the actual path trace received in j1 byte')
vc3TTPLabelExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 12), Vc3TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPLabelExpected.setStatus('current')
if mibBuilder.loadTexts: vc3TTPLabelExpected.setDescription("The signal label indicates the multiplexing structure of the vc3.\n\tUsualy the value of this field cannot be modified as most equipment\n\tuse the asynchronous bit multiplexing.\n\tFor historical reasons the receipt of label `unspecified ' does not\n\tproduce a Signal Label Mismatch failure.")
vc3TTPLabelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 13), Vc3TTPSignalLabel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPLabelSent.setStatus('current')
if mibBuilder.loadTexts: vc3TTPLabelSent.setDescription("The signal label indicates the multiplexing structure of the vc3.\n\tThe value of this field is sent as signal label for the vc3.\n\tThe unspecified value is used for compatibilty with old sdh\n\tequipments.\n\tThe `unequiped' value actives low order unequiped generator (lug).\n\tIn this case all 1 signal is inserted down and up stream.")
vc3TTPLabelReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 14), Vc3TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPLabelReceived.setStatus('current')
if mibBuilder.loadTexts: vc3TTPLabelReceived.setDescription('The signal label indicates the multiplexing structure of the vc3.\n\tThe value of this field is the actual received signal label\n\tfor this vc3')
vc3TTPSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPSdThreshold.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSdThreshold.setDescription('A Signal Degrade failure is declared if the error block rate is\n\tgreater than 1E(-SdThreshold).\n\tThe Signal Degrade failure desapeared when the error block rate is\n\tless than 1E(1 - SdThreshold).')
vc3TTPSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc3TTPSesThreshold.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSesThreshold.setDescription('The number of errors above which the second is declared\n\tseverely errored for this interface/function.\n\tThis value apply for near and far interface/function')
vc3TTPBidirectionnal = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 17), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPBidirectionnal.setStatus('current')
if mibBuilder.loadTexts: vc3TTPBidirectionnal.setDescription('If set to false the equipment does not send Remote Defect Indication.')
vc3TTPRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPRdi.setStatus('current')
if mibBuilder.loadTexts: vc3TTPRdi.setDescription('Severity associed with Remote Defect Indication failure\n\tfor virtual container order 3.')
vc3TTPSd = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPSd.setStatus('current')
if mibBuilder.loadTexts: vc3TTPSd.setDescription('Severity associed with Signal Degrade failure\n\tfor virtual container order 3.')
vc3TTPUneq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPUneq.setStatus('current')
if mibBuilder.loadTexts: vc3TTPUneq.setDescription('Severity associed with virtual container UNEQuiped failure\n\tfor virtual container order 3.')
vc3TTPPlm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 23), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPPlm.setStatus('current')
if mibBuilder.loadTexts: vc3TTPPlm.setDescription('Severity associed with Path Label Mismatch failure\n\tfor virtual container order 3.')
vc3TTPTim = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 130, 2, 1, 24), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc3TTPTim.setStatus('current')
if mibBuilder.loadTexts: vc3TTPTim.setDescription('Severity associed with Trail Identifier Mismatch failure\n\tfor virtual container order 3.')
class Vc12TTPSinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vc4", 1), ("nspi", 2))

class Vc12TTPSignalLabel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 7))
    namedValues = NamedValues(("unequiped", 0), ("unspecified", 1), ("asyncBit", 2), ("all1", 7))

vc12TTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 150, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPNumber.setStatus('current')
if mibBuilder.loadTexts: vc12TTPNumber.setDescription('Number of virtual container order 12 in equipment.')
vc12TTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2), )
if mibBuilder.loadTexts: vc12TTPTable.setStatus('current')
if mibBuilder.loadTexts: vc12TTPTable.setDescription('List of virtual container order 12 in equipment.The number of records depends on the kinds of\n\t configured boards')
vc12TTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "vc12TTPIndex"))
if mibBuilder.loadTexts: vc12TTPEntry.setStatus('current')
if mibBuilder.loadTexts: vc12TTPEntry.setDescription('A particular virtual container order 12 of the equipment.')
vc12TTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPIndex.setStatus('current')
if mibBuilder.loadTexts: vc12TTPIndex.setDescription('A unique value which identify a particular\n\tvirtual container order 12.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
vc12TTPSinkPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPSinkPointer.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSinkPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on non-sdh physical port side.')
vc12TTPSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 3), Vc12TTPSinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPSinkType.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSinkType.setDescription('A reference to the kind of the sink Pointer')
vc12TTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPName.setStatus('current')
if mibBuilder.loadTexts: vc12TTPName.setDescription('A text string which identifies the particular entry among the\n\tvirtual container order 12 entries. ')
vc12TTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPMonitor.setStatus('current')
if mibBuilder.loadTexts: vc12TTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this virtual container order 12.')
vc12TTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 7), VcLoFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPFailure.setStatus('current')
if mibBuilder.loadTexts: vc12TTPFailure.setDescription('Active failures on virtual container order 12')
vc12TTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPSeverity.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSeverity.setDescription('A reference to failure severity for virtual container order 12.')
vc12TTPPathTraceExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPPathTraceExpected.setStatus('current')
if mibBuilder.loadTexts: vc12TTPPathTraceExpected.setDescription("The path trace is a user string that always follows the vc12.\n\tIf the value the received path trace does not match this one, a\n\ttim (Trail Identifier Mismatch) failure is issued.\n\tThe value `?              ' match all possible received path trace.")
vc12TTPPathTraceSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPPathTraceSent.setStatus('current')
if mibBuilder.loadTexts: vc12TTPPathTraceSent.setDescription("The path trace is a user string that always follows the vc12.\n\tThe value of this field is sent in j2 byte as path trace for this vc12.\n\tThe default value is `all 0'.")
vc12TTPPathTraceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPPathTraceReceived.setStatus('current')
if mibBuilder.loadTexts: vc12TTPPathTraceReceived.setDescription('The path trace is a user string that always follows the vc12.\n\tThe value is the actual path trace received in j2 byte')
vc12TTPLabelExpected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 12), Vc12TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPLabelExpected.setStatus('current')
if mibBuilder.loadTexts: vc12TTPLabelExpected.setDescription("The signal label indicates the multiplexing structure of the vc12.\n\tUsualy the value of this field cannot be modified as most equipment\n\tuse the asynchronous bit multiplexing.\n\tFor historical reasons the receipt of label `unspecified ' does not\n\tproduce a Signal Label Mismatch failure.")
vc12TTPLabelSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 13), Vc12TTPSignalLabel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPLabelSent.setStatus('current')
if mibBuilder.loadTexts: vc12TTPLabelSent.setDescription("The signal label indicates the multiplexing structure of the vc12.\n\tThe value of this field is sent as signal label for the vc12.\n\tThe unspecified value is used for compatibilty with old sdh\n\tequipments.\n\tThe `unequiped' value actives low order unequiped generator (lug).\n\tIn this case all 1 signal is inserted down and up stream.")
vc12TTPLabelReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 14), Vc12TTPSignalLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPLabelReceived.setStatus('current')
if mibBuilder.loadTexts: vc12TTPLabelReceived.setDescription('The signal label indicates the multiplexing structure of the vc12.\n\tThe value of this field is the actual received signal label\n\tfor this vc12')
vc12TTPSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPSdThreshold.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSdThreshold.setDescription('A Signal Degrade failure is declared if the error block rate is\n\tgreater than 1E(-SdThreshold).\n\tThe Signal Degrade failure desapeared when the error block rate is\n\tless than 1E(1 - SdThreshold).')
vc12TTPSesThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vc12TTPSesThreshold.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSesThreshold.setDescription('The number of errors above which the second is declared\n\tseverely errored for this interface/function.\n\tThis value apply for near and far interface/function')
vc12TTPBidirectionnal = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 17), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPBidirectionnal.setStatus('current')
if mibBuilder.loadTexts: vc12TTPBidirectionnal.setDescription('If set to false the equipment does not send Remote Defect Indication.')
vc12TTPRdi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPRdi.setStatus('current')
if mibBuilder.loadTexts: vc12TTPRdi.setDescription('Severity associed with Remote Defect Indication failure\n\tfor virtual container order 12.')
vc12TTPSd = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPSd.setStatus('current')
if mibBuilder.loadTexts: vc12TTPSd.setDescription('Severity associed with Signal Degrade failure\n\tfor virtual container order 12.')
vc12TTPUneq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPUneq.setStatus('current')
if mibBuilder.loadTexts: vc12TTPUneq.setDescription('Severity associed with virtual container UNEQuiped failure\n\tfor virtual container order 12.')
vc12TTPPlm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 23), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPPlm.setStatus('current')
if mibBuilder.loadTexts: vc12TTPPlm.setDescription('Severity associed with Path Label Mismatch failure\n\tfor virtual container order 12.')
vc12TTPTim = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 150, 2, 1, 24), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vc12TTPTim.setStatus('current')
if mibBuilder.loadTexts: vc12TTPTim.setDescription('Severity associed with Trail Identifier Mismatch failure\n\tfor virtual container order 12.')
class NspiSrcType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("vc12", 1), ("vc3", 2), ("vc4", 3), ("channel", 4))

nspiCTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 160, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiCTPNumber.setStatus('current')
if mibBuilder.loadTexts: nspiCTPNumber.setDescription('A unique value which identify a particular non-sdh physical port.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
nspiCTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2), )
if mibBuilder.loadTexts: nspiCTPTable.setStatus('current')
if mibBuilder.loadTexts: nspiCTPTable.setDescription('List of non-sdh physical port in equipment.')
nspiCTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "nspiCTPIndex"))
if mibBuilder.loadTexts: nspiCTPEntry.setStatus('current')
if mibBuilder.loadTexts: nspiCTPEntry.setDescription('A particular non-sdh physical port of the equipment.')
nspiCTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiCTPIndex.setStatus('current')
if mibBuilder.loadTexts: nspiCTPIndex.setDescription('A unique value which identify a particular\n\tnon-sdh physical port.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
nspiCTPTTPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2, 1, 2), NspiSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiCTPTTPType.setStatus('current')
if mibBuilder.loadTexts: nspiCTPTTPType.setDescription('The type of VC which is associated to the nspi interface.')
nspiCTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2, 1, 3), CTPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiCTPStatus.setStatus('current')
if mibBuilder.loadTexts: nspiCTPStatus.setDescription("nspi connection point Status: free or used.\n\tThe 'free' value is used when there is no connection with this output CTP")
nspiCTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 160, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiCTPName.setStatus('current')
if mibBuilder.loadTexts: nspiCTPName.setDescription('A text string which identifies the particular entry among the\n\tnon-sdh physical port entries. ')
class NspiTTPFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("los", 1), ("ais", 2))

class NspiTTPType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 10, 20, 30))
    namedValues = NamedValues(("g703R75ohm", 1), ("g703R120ohm", 2), ("x21", 10), ("ethernet", 20), ("atm", 30))

class NspiTTPLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 10, 34, 45, 100, 140, 1000))
    namedValues = NamedValues(("rate2Mb", 2), ("rate10Mb", 10), ("rate34Mb", 34), ("rate45Mb", 45), ("rate100Mb", 100), ("rate140Mb", 140), ("rate1Gb", 1000))

nspiTTPNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 170, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPNumber.setStatus('current')
if mibBuilder.loadTexts: nspiTTPNumber.setDescription('A unique value which identify a particular non-sdh physical port.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
nspiTTPTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2), )
if mibBuilder.loadTexts: nspiTTPTable.setStatus('current')
if mibBuilder.loadTexts: nspiTTPTable.setDescription('List of non-sdh physical port in equipment.')
nspiTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "nspiTTPIndex"))
if mibBuilder.loadTexts: nspiTTPEntry.setStatus('current')
if mibBuilder.loadTexts: nspiTTPEntry.setDescription('A particular non-sdh physical port of the equipment.')
nspiTTPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPIndex.setStatus('current')
if mibBuilder.loadTexts: nspiTTPIndex.setDescription('A unique value which identify a particular\n\tnon-sdh physical port.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
nspiTTPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 2), NspiTTPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPType.setStatus('current')
if mibBuilder.loadTexts: nspiTTPType.setDescription('The type of media for the nspi interface.')
nspiTTPLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 3), NspiTTPLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPLevel.setStatus('current')
if mibBuilder.loadTexts: nspiTTPLevel.setDescription('The rate level of the nspi interface.')
nspiTTPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiTTPName.setStatus('current')
if mibBuilder.loadTexts: nspiTTPName.setDescription('A text string which identifies the particular entry among the\n\tnon-sdh physical port entries. ')
nspiTTPBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPBoardIndex.setStatus('current')
if mibBuilder.loadTexts: nspiTTPBoardIndex.setDescription('Index of the Board that supports the physical acces \n\tof this interface')
nspiTTPBoardAcces = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPBoardAcces.setStatus('current')
if mibBuilder.loadTexts: nspiTTPBoardAcces.setDescription('Friendly Index of the physical acces on the Board that supports \n\tthe interface')
nspiTTPSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 7), NspiSrcType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPSrcType.setStatus('current')
if mibBuilder.loadTexts: nspiTTPSrcType.setDescription('A reference to the type of object which sends the data flow to this\n\tinterface. Usually the value is vc12, vc3 or vc4 types.')
nspiTTPSrcPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPSrcPointer.setStatus('current')
if mibBuilder.loadTexts: nspiTTPSrcPointer.setDescription('A reference to the object which sends the data flow to this\n\tinterface. Usually the value is the Index of a vc12, vc3 or vc4.')
nspiTTPMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 9), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiTTPMonitor.setStatus('current')
if mibBuilder.loadTexts: nspiTTPMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this non-sdh physical port.')
nspiTTPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 10), NspiTTPFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPFailure.setStatus('current')
if mibBuilder.loadTexts: nspiTTPFailure.setDescription('Active failures on non-sdh physical port')
nspiTTPSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 11), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nspiTTPSeverity.setStatus('current')
if mibBuilder.loadTexts: nspiTTPSeverity.setDescription('A reference to failure severity for non-sdh physical port.')
nspiTTPLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 14), Loopback()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiTTPLoopback.setStatus('current')
if mibBuilder.loadTexts: nspiTTPLoopback.setDescription("This field gives the active loopback status on the\n\tnon-sdh physical port.\n\tWhen its value is `line' the data flow recieved from the port side\n\tis sent back to the line.\n\tWhen its value is `equipment' the data flow recieved form equipment\n\tside is send back.\n\tThe field can be set to a particular loopback value, even if there\n\tno garantee that the loopback is really done. The real loopback status \n\tof the interface must be checked in the response.\n\tThe loopback can be cleared by the equipment when it cannot remain \n\tfor any reason.")
nspiTTPLos = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiTTPLos.setStatus('current')
if mibBuilder.loadTexts: nspiTTPLos.setDescription('Severity associed with Loss Of Signal failure\n\tfor non-sdh physical port.')
nspiTTPAis = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 170, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nspiTTPAis.setStatus('current')
if mibBuilder.loadTexts: nspiTTPAis.setDescription('Severity associed with Alarme Indication Signal failure\n\tfor non-sdh physical port.')
class ChannelEncaps(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("atm", 1), ("pos", 2), ("gfp", 3))

class ChannelConcat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("virtual", 1), ("contiguous", 2))

class ChannelFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("loa", 1), ("lom", 2), ("sqm", 3))

channelNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 180, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelNumber.setStatus('current')
if mibBuilder.loadTexts: channelNumber.setDescription('Number of SDH Channels in equipment.')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2), )
if mibBuilder.loadTexts: channelTable.setStatus('current')
if mibBuilder.loadTexts: channelTable.setDescription('List of SDH Channels in equipment.')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "channelIndex"))
if mibBuilder.loadTexts: channelEntry.setStatus('current')
if mibBuilder.loadTexts: channelEntry.setDescription('A particular SDH Channel of the equipment.')
channelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelIndex.setStatus('current')
if mibBuilder.loadTexts: channelIndex.setDescription('A unique value which identify a particular\n\tSDH Channel.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
channelEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 2), ChannelEncaps()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelEncaps.setStatus('current')
if mibBuilder.loadTexts: channelEncaps.setDescription('The type of encapsulation used to map Data stream into Sdh containers')
channelNbVc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelNbVc4.setStatus('current')
if mibBuilder.loadTexts: channelNbVc4.setDescription('Number of VC4 into the channel. ')
channelNbVc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelNbVc3.setStatus('current')
if mibBuilder.loadTexts: channelNbVc3.setDescription('Number of VC3 into the channel. ')
channelNbVc12 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelNbVc12.setStatus('current')
if mibBuilder.loadTexts: channelNbVc12.setDescription('Number of VC12 into the channel. ')
channelConcat = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 8), ChannelConcat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelConcat.setStatus('current')
if mibBuilder.loadTexts: channelConcat.setDescription('The type of Concatenation used within the channel')
channelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: channelAdminStatus.setDescription('The desired state of the channel.  The\n     testing(3) state indicates that no operational\n     packets can be passed.')
channelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelOperStatus.setStatus('current')
if mibBuilder.loadTexts: channelOperStatus.setDescription('The current operational state of the channel.\n     The testing(3) state indicates that no operational\n     packets can be passed.')
channelFirstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelFirstIndex.setStatus('current')
if mibBuilder.loadTexts: channelFirstIndex.setDescription('Index of the first Vc in the Channel when it is configured.\n\tOtherwise this field is set to 0. ')
channelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelDelay.setStatus('current')
if mibBuilder.loadTexts: channelDelay.setDescription('This field give the maximum delay (in millisecondes) for receiving virtual concatenated frames.\n\tThis field is set to 0 when channelConcat is different to virtual(1) ')
channelMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 13), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelMonitor.setStatus('current')
if mibBuilder.loadTexts: channelMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this channel.')
channelFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 14), ChannelFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelFailure.setStatus('current')
if mibBuilder.loadTexts: channelFailure.setDescription('Active failures on channel')
channelSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 15), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelSeverity.setStatus('current')
if mibBuilder.loadTexts: channelSeverity.setDescription('A reference to failure severity for non-sdh physical port.')
channelLoa = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 16), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelLoa.setStatus('current')
if mibBuilder.loadTexts: channelLoa.setDescription('Severity associated with Loss Of Alignment failure\n\tfor channel.')
channelLom = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 17), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelLom.setStatus('current')
if mibBuilder.loadTexts: channelLom.setDescription('Severity associated with Loss Of Multiframe failure\n\tfor channel.')
channelSqm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 180, 2, 1, 18), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSqm.setStatus('current')
if mibBuilder.loadTexts: channelSqm.setDescription('Severity associated with Sequence Mismatch failure\n\tfor channel.')
bandwidthNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 110, 190, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthNumber.setStatus('current')
if mibBuilder.loadTexts: bandwidthNumber.setDescription('Number of bandwidth units which are available in the equipement.\n\tThe number of units depends on their type (Vc4, Vc3, Vc12), on the number \n\tof Data card and on the bandwidth size which has been configured for this card.\n\tFor a Data card which is mapped on a STM16, there are 16 Vc4 entries (or 3*16 Vc3 entries \n\tor 63*16 Vc12 entries) in the BandwidthTable. ')
bandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2), )
if mibBuilder.loadTexts: bandwidthTable.setStatus('current')
if mibBuilder.loadTexts: bandwidthTable.setDescription('List of Bandwidth units in equipment. It represent the bandwidth occupation of each non-sdh card')
bandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1), ).setIndexNames((0, "SDH-ETS-MIB", "bandwidthIndex"))
if mibBuilder.loadTexts: bandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: bandwidthEntry.setDescription('A particular unit part of a non-sdh card bandwidth.')
bandwidthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthIndex.setStatus('current')
if mibBuilder.loadTexts: bandwidthIndex.setDescription('A unique value which identify a particular unit of a non-sdh card bandwidth.\n\t The value of index is a Vc Index which change when bandwidthSrcType value is modified. ')
bandwidthBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthBoardIndex.setStatus('current')
if mibBuilder.loadTexts: bandwidthBoardIndex.setDescription('Index of the Board that supports the bandwidth unit.')
bandwidthSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 3), NspiSrcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthSrcType.setStatus('current')
if mibBuilder.loadTexts: bandwidthSrcType.setDescription('Define the decomposition level of the bandwidth.')
bandwidthSrcPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthSrcPointer.setStatus('current')
if mibBuilder.loadTexts: bandwidthSrcPointer.setDescription('this field is set to bandwidthIndex when the unit is used by a channel and set to 0 otherwise.\n\tIt defines the TTP and CTP index associated to the channel. ')
bandwidthSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 5), NspiSrcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthSinkType.setStatus('current')
if mibBuilder.loadTexts: bandwidthSinkType.setDescription('A reference to the kind of the sink Pointer. Usually the value is Channel.')
bandwidthSinkPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthSinkPointer.setStatus('current')
if mibBuilder.loadTexts: bandwidthSinkPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on unsynchronous port interface side.\n\tThis pointer corresponds to an index in the channelTable. ')
bandwidthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bandwidthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: bandwidthAdminStatus.setDescription('The desired state of the Vc.  The\n     testing(3) state indicates that no operational\n     packets can be passed.')
bandwidthOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthOperStatus.setStatus('current')
if mibBuilder.loadTexts: bandwidthOperStatus.setDescription('The current operational state of the Vc.\n     The testing(3) state indicates that no operational\n     packets can be passed.')
bandwidthPrevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthPrevIndex.setStatus('current')
if mibBuilder.loadTexts: bandwidthPrevIndex.setDescription('A reference to the previous VC into the channel. This field is set to 0 if the VC is not\n\tassociated to a channel or if it is the first Vc of the channel. ')
bandwidthNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 110, 190, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthNextIndex.setStatus('current')
if mibBuilder.loadTexts: bandwidthNextIndex.setDescription('A reference to the next VC into the channel. This field is set to 0 if the VC is not\n\tassociated to a channel or if it is the last Vc of the channel.  ')
mibBuilder.exportSymbols("SDH-ETS-MIB", msaSrc1Pointer=msaSrc1Pointer, tu3CTPEntry=tu3CTPEntry, vc3TTPIndex=vc3TTPIndex, au4CTPLom=au4CTPLom, nspiCTPTable=nspiCTPTable, vc3TTPSinkPointer=vc3TTPSinkPointer, msTTPFailure=msTTPFailure, Tu3CTPFailure=Tu3CTPFailure, au4CTPAis=au4CTPAis, vc12TTPSeverity=vc12TTPSeverity, vc4TTPSesThreshold=vc4TTPSesThreshold, spiTTPBoardAcces=spiTTPBoardAcces, vc4TTPSinkPointer=vc4TTPSinkPointer, tu12CTPName=tu12CTPName, bandwidthSinkPointer=bandwidthSinkPointer, nspiTTPSrcType=nspiTTPSrcType, channelConcat=channelConcat, tu3CTPMonitor=tu3CTPMonitor, tu12CTPFailure=tu12CTPFailure, vc3TTPUneq=vc3TTPUneq, vc12TTPSdThreshold=vc12TTPSdThreshold, vc3TTPBidirectionnal=vc3TTPBidirectionnal, MsaSrcType=MsaSrcType, tu12CTPNumber=tu12CTPNumber, spiTTPEntry=spiTTPEntry, rsTTPE1SrcPointer=rsTTPE1SrcPointer, vc4TTPTable=vc4TTPTable, vc4TTPUneq=vc4TTPUneq, rsTTPTable=rsTTPTable, au4CTPStatus=au4CTPStatus, vc12TTP=vc12TTP, vc4TTPTraceMode=vc4TTPTraceMode, spiTTPLos=spiTTPLos, tu3CTPLop=tu3CTPLop, vc3TTPSinkType=vc3TTPSinkType, vc3TTPLabelReceived=vc3TTPLabelReceived, vc12TTPTable=vc12TTPTable, vc12TTPPathTraceSent=vc12TTPPathTraceSent, tu3CTPFailure=tu3CTPFailure, nspiTTPEntry=nspiTTPEntry, RsTTPFailure=RsTTPFailure, msTTPSeverity=msTTPSeverity, vc4TTPSdThreshold=vc4TTPSdThreshold, msaEntry=msaEntry, vc4TTPSinkType=vc4TTPSinkType, nspiCTPTTPType=nspiCTPTTPType, nspiTTPTable=nspiTTPTable, NspiTTPLevel=NspiTTPLevel, spiTTPSeverity=spiTTPSeverity, rsTTPName=rsTTPName, vc3TTPPathTraceSent=vc3TTPPathTraceSent, nspiCTP=nspiCTP, nspiTTPLoopback=nspiTTPLoopback, channel=channel, ChannelConcat=ChannelConcat, bandwidthAdminStatus=bandwidthAdminStatus, bandwidthSrcPointer=bandwidthSrcPointer, tu12CTPIndex=tu12CTPIndex, vc3TTPLabelSent=vc3TTPLabelSent, nspiTTPAis=nspiTTPAis, msTTPSesThreshold=msTTPSesThreshold, nspiTTPType=nspiTTPType, spiTTPFailure=spiTTPFailure, vc12TTPSesThreshold=vc12TTPSesThreshold, nspiTTPName=nspiTTPName, rsTTPMonitor=rsTTPMonitor, channelIndex=channelIndex, vc4TTPPathTraceExpected=vc4TTPPathTraceExpected, tu12CTPMonitor=tu12CTPMonitor, vc12TTPTim=vc12TTPTim, vc4TTPFailure=vc4TTPFailure, msTTPProtectionType=msTTPProtectionType, nspiTTPSeverity=nspiTTPSeverity, channelNbVc12=channelNbVc12, nspiCTPNumber=nspiCTPNumber, msaSinkType=msaSinkType, msaSrc4Pointer=msaSrc4Pointer, channelEncaps=channelEncaps, msaSrc1Type=msaSrc1Type, msaIndex=msaIndex, vc12TTPIndex=vc12TTPIndex, msaSrc4Type=msaSrc4Type, vc4TTPLabelReceived=vc4TTPLabelReceived, vc3TTPSeverity=vc3TTPSeverity, spiTTPStmLevel=spiTTPStmLevel, channelTable=channelTable, Vc12TTPSignalLabel=Vc12TTPSignalLabel, bandwidthNextIndex=bandwidthNextIndex, rsTTPSesThreshold=rsTTPSesThreshold, spiTTPNumber=spiTTPNumber, sdhEts=sdhEts, vc3TTPEntry=vc3TTPEntry, Vc12TTPSinkType=Vc12TTPSinkType, au4CTPIndex=au4CTPIndex, msCTP=msCTP, rsTTPEntry=rsTTPEntry, vc3TTPRdi=vc3TTPRdi, EOWMode=EOWMode, vc12TTPEntry=vc12TTPEntry, rsTTPEOWMode=rsTTPEOWMode, au4CTPName=au4CTPName, msTTPMonEber=msTTPMonEber, channelLom=channelLom, vc12TTPLabelReceived=vc12TTPLabelReceived, vc4TTPBidirectionnal=vc4TTPBidirectionnal, Vc4TTPSinkType=Vc4TTPSinkType, vc12TTPSinkPointer=vc12TTPSinkPointer, nspiCTPIndex=nspiCTPIndex, vc3TTPTable=vc3TTPTable, nspiTTPSrcPointer=nspiTTPSrcPointer, bandwidthNumber=bandwidthNumber, nspiTTPBoardIndex=nspiTTPBoardIndex, msTTPIndex=msTTPIndex, au4CTPSeverity=au4CTPSeverity, tu12CTPAis=tu12CTPAis, vc12TTPBidirectionnal=vc12TTPBidirectionnal, spiTTPTable=spiTTPTable, vc12TTPPathTraceReceived=vc12TTPPathTraceReceived, vc4TTPLabelSent=vc4TTPLabelSent, vc3TTPSd=vc3TTPSd, nspiTTPNumber=nspiTTPNumber, vc4TTPTimDis=vc4TTPTimDis, vc3TTPMonitor=vc3TTPMonitor, spiTTPTf=spiTTPTf, Vc4TTPFailure=Vc4TTPFailure, Tu12CTPFailure=Tu12CTPFailure, msTTPSdThreshold=msTTPSdThreshold, tu3CTPIndex=tu3CTPIndex, nspiCTPStatus=nspiCTPStatus, spiTTPLoopback=spiTTPLoopback, vc12TTPPlm=vc12TTPPlm, vc12TTPSd=vc12TTPSd, rsTTPF1SrcPointer=rsTTPF1SrcPointer, msaSrc3Pointer=msaSrc3Pointer, msTTPMonitor=msTTPMonitor, msTTPEntry=msTTPEntry, vc4TTPNumber=vc4TTPNumber, NspiTTPFailure=NspiTTPFailure, vc12TTPPathTraceExpected=vc12TTPPathTraceExpected, bandwidthTable=bandwidthTable, msTTP=msTTP, au4CTP=au4CTP, vc4TTPRdi=vc4TTPRdi, msTTPEber=msTTPEber, rsTTPLof=rsTTPLof, msTTPTable=msTTPTable, au4CTPMonitor=au4CTPMonitor, msTTPE2SrcPointer=msTTPE2SrcPointer, nspiTTP=nspiTTP, spiTTPType=spiTTPType, msaTable=msaTable, vc3TTPTim=vc3TTPTim, nspiTTPIndex=nspiTTPIndex, msaSTMLevel=msaSTMLevel, au4CTPCnxType=au4CTPCnxType, channelEntry=channelEntry, msTTPSd=msTTPSd, channelOperStatus=channelOperStatus, ProtectionType=ProtectionType, vc3TTPPlm=vc3TTPPlm, vc12TTPUneq=vc12TTPUneq, nspiTTPMonitor=nspiTTPMonitor, bandwidthSrcType=bandwidthSrcType, channelFirstIndex=channelFirstIndex, bandwidthPrevIndex=bandwidthPrevIndex, tu12CTPStatus=tu12CTPStatus, vc4TTPMonitor=vc4TTPMonitor, Vc3TTPSignalLabel=Vc3TTPSignalLabel, nspiTTPLevel=nspiTTPLevel, vc4TTPSeverity=vc4TTPSeverity, vc4TTP=vc4TTP, channelDelay=channelDelay, msa=msa, tu3CTPNumber=tu3CTPNumber, vc12TTPLabelSent=vc12TTPLabelSent, tu12CTPSeverity=tu12CTPSeverity, channelSqm=channelSqm, vc12TTPRdi=vc12TTPRdi, msTTPRdi=msTTPRdi, spiTTPIndex=spiTTPIndex, nspiTTPBoardAcces=nspiTTPBoardAcces, au4CTPFailure=au4CTPFailure, NspiTTPType=NspiTTPType, spiTTP=spiTTP, Vc3TTPSinkType=Vc3TTPSinkType, msTTPName=msTTPName, au4CTPTable=au4CTPTable, vc12TTPLabelExpected=vc12TTPLabelExpected, spiTTPBoardIndex=spiTTPBoardIndex, rsCTP=rsCTP, vc4TTPPathTraceReceived=vc4TTPPathTraceReceived, vc3TTPSesThreshold=vc3TTPSesThreshold, channelSeverity=channelSeverity, CTPStatus=CTPStatus, tu3CTPName=tu3CTPName, vc3TTPName=vc3TTPName, vc12TTPFailure=vc12TTPFailure, ChannelFailure=ChannelFailure, Loopback=Loopback, bandwidthOperStatus=bandwidthOperStatus, spiTTPMonitor=spiTTPMonitor, channelLoa=channelLoa, rsTTPSeverity=rsTTPSeverity, SpiTTPType=SpiTTPType, MsaSinkType=MsaSinkType, tu3CTPStatus=tu3CTPStatus, Au4CTPCnxType=Au4CTPCnxType, vc4TTPTim=vc4TTPTim, tu3CTPAis=tu3CTPAis, vc12TTPSinkType=vc12TTPSinkType, rsTTPFailure=rsTTPFailure, vc12TTPName=vc12TTPName, channelFailure=channelFailure, tu3CTPTable=tu3CTPTable, vc3TTPLabelExpected=vc3TTPLabelExpected, vc3TTP=vc3TTP, nspiTTPFailure=nspiTTPFailure, spiTTPName=spiTTPName, au4CTPLop=au4CTPLop, vc3TTPFailure=vc3TTPFailure, nspiTTPLos=nspiTTPLos, tu12CTPTable=tu12CTPTable, bandwidthIndex=bandwidthIndex, tu3CTP=tu3CTP, au4CTPEntry=au4CTPEntry, msTTPEOWByteColumn=msTTPEOWByteColumn, channelAdminStatus=channelAdminStatus, bandwidthSinkType=bandwidthSinkType, msaSrc3Type=msaSrc3Type, nspiCTPName=nspiCTPName, rsTTPEOWByteLine=rsTTPEOWByteLine, bandwidthBoardIndex=bandwidthBoardIndex, vc4TTPEntry=vc4TTPEntry, vc12TTPNumber=vc12TTPNumber, channelMonitor=channelMonitor, msTTPEOWMode=msTTPEOWMode, channelNumber=channelNumber, SpiTTPFailure=SpiTTPFailure, vc12TTPMonitor=vc12TTPMonitor, ChannelEncaps=ChannelEncaps, vc3TTPPathTraceExpected=vc3TTPPathTraceExpected, channelNbVc3=channelNbVc3, nspiCTPEntry=nspiCTPEntry, NspiSrcType=NspiSrcType, Au4CTPFailure=Au4CTPFailure, vc4TTPPlm=vc4TTPPlm, vc4TTPPathTraceSent=vc4TTPPathTraceSent, PYSNMP_MODULE_ID=sdhEts, au4CTPNumber=au4CTPNumber, tu12CTP=tu12CTP, vc3TTPNumber=vc3TTPNumber, msaSrc2Pointer=msaSrc2Pointer, bandwidthEntry=bandwidthEntry, tu3CTPSeverity=tu3CTPSeverity)
mibBuilder.exportSymbols("SDH-ETS-MIB", vc4TTPSd=vc4TTPSd, msaSrc2Type=msaSrc2Type, rsTTP=rsTTP, vc4TTPIndex=vc4TTPIndex, STMLevel=STMLevel, vc4TTPName=vc4TTPName, channelNbVc4=channelNbVc4, Vc4TTPTraceMode=Vc4TTPTraceMode, rsTTPEOWByteColumn=rsTTPEOWByteColumn, msTTPEOWByteLine=msTTPEOWByteLine, rsTTPIndex=rsTTPIndex, VcLoFailure=VcLoFailure, bandwidth=bandwidth, vc3TTPPathTraceReceived=vc3TTPPathTraceReceived, Vc4TTPSignalLabel=Vc4TTPSignalLabel, tu12CTPEntry=tu12CTPEntry, vc4TTPLabelExpected=vc4TTPLabelExpected, msaSinkPointer=msaSinkPointer, MsTTPFailure=MsTTPFailure, tu12CTPLop=tu12CTPLop, msaName=msaName, vc3TTPSdThreshold=vc3TTPSdThreshold)
