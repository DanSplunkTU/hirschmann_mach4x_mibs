#
# PySNMP MIB module SESSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/SESSION-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:33:14 2021
# On host fv-az77-605 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SagemBoolean, = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, NotificationType, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
session = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 201))
if mibBuilder.loadTexts: session.setLastUpdated('0206110000Z')
if mibBuilder.loadTexts: session.setOrganization('SAGEM/DR Tolbiac Centre')
if mibBuilder.loadTexts: session.setContactInfo('')
if mibBuilder.loadTexts: session.setDescription('\n\tModification:\n\t\t\tDate: 20 12 1999\n\t\t\tDescription: modification of comments\n\n\t\t\tName: sessionTrap\n\t\t\tDescription: sessionTrap and sessionReason are \n\t\t\t\tno more used in SESSION-MIB. They have been \n\t\t\t\treplaced by a logTrap (see LOG-MIB)\n\tNew Object:\n\t\t\tDate: 19 11 1999 \n\t\t\tName: tInactivity\n\t\t\tDescription: \n\t\t\tName: sessionType\n\t\t\tDescription: Add of tpiEmulated\n\n\tCreation: \n\t\t\tDescription:\n\t\t\tThis MIB module gives information about a way to \n\t\t\thandle access conflicts between several \n\t\t\tapplications (SNMP, HTTP, CLI, vt100) \n\t\t\tthat could try to modify the equipment \n\t\t\tconfiguration at the same time\n\t')
tLock = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tLock.setStatus('current')
if mibBuilder.loadTexts: tLock.setDescription('\t\n\tNumber of minutes for which a write session is active on \n\tthe equipment.\n\tWhen the value of this variable is 0, the equipment is not \n\tlocked.\t\n\tWhen a SNMP manager (iONOSANMSupervisor and Operator) start \n\ta write session, tLock can be set to a value by the manager \n\t(up to 30 minutes, so it has time to configure the equipment).\t\n\tEach time an action is done under the equipment tLock is set \n\tagain to its value.\n\ttLock is a decremental counter; when the value of tLock return \n\tto 0, the write session is ended and the equipment is unlocked.\n\tThe SNMP manager can choose to unlock the equipment by setting \n\tthe value of tLock to 0 before it reach this value itself.\n\t')
sessionIp = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionIp.setStatus('current')
if mibBuilder.loadTexts: sessionIp.setDescription('IP address of the application that holds the session')
sessionType = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("snmp", 1), ("http", 2), ("telnet", 3), ("vt100", 4), ("tpiEmulated", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessionType.setStatus('current')
if mibBuilder.loadTexts: sessionType.setDescription('Type of the application protocol that holds the session')
tLockDefault = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tLockDefault.setStatus('current')
if mibBuilder.loadTexts: tLockDefault.setDescription('\n\ttLockDefault is used to define initial value of tLock.\n\ttLockDefault can be changed only by iONOSANMSupervisor or \n      by dIRECTACCESSsupervisor.\n\tThe normal value is 10 minutes')
tInactivity = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tInactivity.setStatus('current')
if mibBuilder.loadTexts: tInactivity.setDescription('\n\tThe normal configuration is tInactivity > tLock; \n\ttInactivityDefault is about 30 min.\n\tThe session with a manager is closed by the equipment if there\n\tis no activity during tInactivity min.\n\tIt is not used with SNMP.\n\tThis is used to protect the acces to the manager when the \n\toperator is not there during a long time.\n\t')
savePending = MibScalar((1, 3, 6, 1, 4, 1, 1038, 201, 20), SagemBoolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: savePending.setStatus('current')
if mibBuilder.loadTexts: savePending.setDescription('\n\t  Return TRUE if the write session is unlocked for more than 30 seconds\n\t  ')
mibBuilder.exportSymbols("SESSION-MIB", savePending=savePending, session=session, tInactivity=tInactivity, tLock=tLock, sessionType=sessionType, tLockDefault=tLockDefault, PYSNMP_MODULE_ID=session, sessionIp=sessionIp)
