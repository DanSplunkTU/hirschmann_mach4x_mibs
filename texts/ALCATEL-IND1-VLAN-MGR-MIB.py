#
# PySNMP MIB module ALCATEL-IND1-VLAN-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-VLAN-MGR-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:56:00 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1VlanMgt, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1VlanMgt")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, iso, Integer32, ModuleIdentity, Counter64, NotificationType, Unsigned32, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "iso", "Integer32", "ModuleIdentity", "Counter64", "NotificationType", "Unsigned32", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1VLANMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1))
alcatelIND1VLANMgrMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Vlan Manager for the distribution of vlan configuration information,\n                 including the association between vlans and ports.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1VLANMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBObjects.setDescription('Branch For VLAN Manager\n            Subsystem Managed Objects.')
alcatelIND1VLANMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBConformance.setDescription('Branch For VLAN Manager\n            Subsystem Conformance Information.')
alcatelIND1VLANMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBGroups.setDescription('Branch For VLAN Manager\n            Subsystem Units Of Conformance.')
alcatelIND1VLANMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliances.setDescription('Branch For VLAN Manager\n            Subsystem Compliance Statements.')
vlanMgrVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1))
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('A list of Virtual LAN instances in this device.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vlanNumber"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('A VLAN entry.')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
if mibBuilder.loadTexts: vlanNumber.setDescription('The VLAN number identifying this instance. Valid\n             range from 1 to 4094.')
vlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanDescription.setStatus('current')
if mibBuilder.loadTexts: vlanDescription.setDescription('Textual description of the VLAN instance.')
vlanAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanAdmStatus.setStatus('current')
if mibBuilder.loadTexts: vlanAdmStatus.setDescription('The administrative status which can be set by\n             configuration. Disable(1) will disable ALL vports\n             that are connected to this VLAN, enable(2) will enable\n             ALL ports on this VLAN, delete(3) will detach and\n             delete the ports/routers AND remove the VLAN.')
vlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanOperStatus.setStatus('current')
if mibBuilder.loadTexts: vlanOperStatus.setDescription('Provide operating status of a particular VLAN environment.')
vlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStatus.setStatus('current')
if mibBuilder.loadTexts: vlanStatus.setDescription('Row status to control creation/deletion of vlans.')
vlanRouterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4router", 1), ("ipv6router", 2), ("both", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanRouterStatus.setStatus('current')
if mibBuilder.loadTexts: vlanRouterStatus.setDescription('Indicates if any IP routers are configured on this vlan.')
vlanSrcLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSrcLearningStatus.setStatus('current')
if mibBuilder.loadTexts: vlanSrcLearningStatus.setDescription('Indicates whether the mac learning is enabled or disabled\n             on this vlan.')
vlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("invalid", 0), ("service", 1), ("multicastEnt", 2), ("multicastService", 3), ("dynamic", 4), ("standard", 5), ("ipc", 6), ("vipVlan", 7), ("erpVlan", 8), ("mtpVlan", 9), ("unpDynamic", 10), ("dynamicRemote", 11), ("bvlan", 12), ("controlBvlan", 13), ("evbVlan", 14), ("vcmipc", 15), ("fcoeVlan", 16), ("openflowVlan", 17), ("routerVlan", 18), ("primaryVlan", 19), ("isolatedVlan", 20), ("communityVlan", 21), ("allVlan", 22), ("invalidVlan", 23))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('The type of the vlan')
vlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 10222)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMtu.setStatus('current')
if mibBuilder.loadTexts: vlanMtu.setDescription('Maximum transmission unit i.e. the maximum size of packet that this\n             vlan can handle. It ranges from 512 to 1500 (for OS6XXX) and 10222\n             (for OS7XXX and OS8XXX) with e2 encapsulation.With snap encapsulation\n             it ranges from 512 to 1492')
vlanAfdCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanAfdCfg.setStatus('current')
if mibBuilder.loadTexts: vlanAfdCfg.setDescription('Specifies whether config was generated by AFD or user, 1 specifies user config and \n              2 specifies afd config')
vlanMgrVpa = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2))
vpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: vpaTable.setStatus('current')
if mibBuilder.loadTexts: vpaTable.setDescription('A list of Virtual LAN instances in this device.')
vpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaVlanNumber"), (0, "ALCATEL-IND1-VLAN-MGR-MIB", "vpaIfIndex"))
if mibBuilder.loadTexts: vpaEntry.setStatus('current')
if mibBuilder.loadTexts: vpaEntry.setDescription('A VLAN-Port Association (VPA) entry.')
vpaVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: vpaVlanNumber.setStatus('current')
if mibBuilder.loadTexts: vpaVlanNumber.setDescription('The VLAN number component of this instance. Valid\n             range from 1 to 4094.')
vpaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1001, 4294967295)))
if mibBuilder.loadTexts: vpaIfIndex.setStatus('current')
if mibBuilder.loadTexts: vpaIfIndex.setDescription('The ifIndex component of this instance.')
vpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("invalid", 0), ("cfgDefault", 1), ("qTagged", 2), ("dynamic", 3), ("vstkDoubleTag", 4), ("vstkTranslate", 5), ("forbidden", 6), ("mirrored", 7), ("bvpa", 8), ("unpUntagged", 9), ("unpTagged", 10), ("evbTagged", 11))).clone('cfgDefault')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpaType.setStatus('current')
if mibBuilder.loadTexts: vpaType.setDescription('The type of this vpa.  Two are statically configured:\n             configured default VPA and qTagged VPA.\n             The other two are dynamically created according to rules/policies:\n             dynamic default and mobile.  The dynamic default VPA is the\n             same as a mobile VPA except that it also the default VPA for the port.')
vpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("forwarding", 0), ("blocking", 1), ("inactive", 2), ("invalid", 3), ("dhlBlocking", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpaState.setStatus('current')
if mibBuilder.loadTexts: vpaState.setDescription('The state of this vpa:\n                1. inactive   - link down\n                2. blocking   - link up, forwarding down\n                3. forwarding - link up, forwarding up, sources learned normally\n                4. filtering  - link up, forwarding up, sources filtered\n                5. DHL Blocking - link up, forwarding down for a DHL port.')
vpaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vpaStatus.setStatus('current')
if mibBuilder.loadTexts: vpaStatus.setDescription('This is used to create or delete staticPrimary VPAs (default vlans\n             on a port ).  Creation replaces the existing staticPrimary VPA\n             while deletion replaces the existing VPA so that the vlan number\n             is 1 for the given port.  Of course the corresponding vlan and\n             port must exist.')
vlanMgrVlanSet = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3))
vlanSetVlanCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVlanCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetVlanCount.setDescription('Count of existing VLANs on switch.')
vlanSetDynamicVlanCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetDynamicVlanCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetDynamicVlanCount.setDescription('Count of number of dynamic vlans in the system')
vlanSetIpRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetIpRouterCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetIpRouterCount.setDescription('Count of VLANs on switch with IP router port configured.')
vlanSetVstkVlanCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSetVstkVlanCount.setStatus('current')
if mibBuilder.loadTexts: vlanSetVstkVlanCount.setDescription('Count of Vlan Stacking vlans in the system')
alcatelIND1VLANMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVpaGroup"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMgrVlanSetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1VLANMgrMIBCompliance = alcatelIND1VLANMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VLANMgrMIBCompliance.setDescription('Compliance statement for\n             VLAN Manager.')
vlanMgrVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanDescription"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAdmStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanOperStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanRouterStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSrcLearningStatus"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanType"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanMtu"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanAfdCfg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanGroup = vlanMgrVlanGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVlanGroup.setDescription('Collection of objects for management of Vlan Manager VLANs.')
vlanMgrVpaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vpaType"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaState"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vpaStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVpaGroup = vlanMgrVpaGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVpaGroup.setDescription('Collection of objects for management of Vlan Manager VPAs.')
vlanMgrVlanSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVlanCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetDynamicVlanCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetIpRouterCount"), ("ALCATEL-IND1-VLAN-MGR-MIB", "vlanSetVstkVlanCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanMgrVlanSetGroup = vlanMgrVlanSetGroup.setStatus('current')
if mibBuilder.loadTexts: vlanMgrVlanSetGroup.setDescription('Collection of objects for Vlan Manager global properties.')
mibBuilder.exportSymbols("ALCATEL-IND1-VLAN-MGR-MIB", vlanMgrVlanSetGroup=vlanMgrVlanSetGroup, vpaTable=vpaTable, vpaStatus=vpaStatus, alcatelIND1VLANMgrMIBGroups=alcatelIND1VLANMgrMIBGroups, vlanTable=vlanTable, vpaEntry=vpaEntry, vpaVlanNumber=vpaVlanNumber, vlanMgrVpa=vlanMgrVpa, vlanStatus=vlanStatus, alcatelIND1VLANMgrMIBConformance=alcatelIND1VLANMgrMIBConformance, vpaType=vpaType, vlanMgrVlan=vlanMgrVlan, vlanEntry=vlanEntry, vlanSetDynamicVlanCount=vlanSetDynamicVlanCount, alcatelIND1VLANMgrMIBCompliances=alcatelIND1VLANMgrMIBCompliances, alcatelIND1VLANMgrMIBCompliance=alcatelIND1VLANMgrMIBCompliance, vlanMgrVpaGroup=vlanMgrVpaGroup, vlanOperStatus=vlanOperStatus, vlanMgrVlanSet=vlanMgrVlanSet, vpaState=vpaState, vlanDescription=vlanDescription, vlanMtu=vlanMtu, vlanSetIpRouterCount=vlanSetIpRouterCount, alcatelIND1VLANMgrMIBObjects=alcatelIND1VLANMgrMIBObjects, vlanSetVstkVlanCount=vlanSetVstkVlanCount, alcatelIND1VLANMgrMIB=alcatelIND1VLANMgrMIB, vlanNumber=vlanNumber, vlanAdmStatus=vlanAdmStatus, vlanSrcLearningStatus=vlanSrcLearningStatus, PYSNMP_MODULE_ID=alcatelIND1VLANMgrMIB, vlanAfdCfg=vlanAfdCfg, vlanMgrVlanGroup=vlanMgrVlanGroup, vlanRouterStatus=vlanRouterStatus, vlanSetVlanCount=vlanSetVlanCount, vpaIfIndex=vpaIfIndex, vlanType=vlanType)
