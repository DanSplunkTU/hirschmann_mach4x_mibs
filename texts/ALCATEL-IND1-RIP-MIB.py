#
# PySNMP MIB module ALCATEL-IND1-RIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-RIP-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:56:00 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
routingIND1Rip, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Rip")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, TimeTicks, Gauge32, MibIdentifier, iso, ModuleIdentity, Integer32, Counter64, NotificationType, Unsigned32, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "TimeTicks", "Gauge32", "MibIdentifier", "iso", "ModuleIdentity", "Integer32", "Counter64", "NotificationType", "Unsigned32", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1RIPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1))
alcatelIND1RIPMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1RIPMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setLastUpdated('201010260000Z')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setContactInfo(' Please consult with Customer Service to ensure the most appropriate\n                  version of this document is used with the products in question:\n\n                            Alcatel-Lucent, Enterprise Solutions Division\n                           (Formerly Alcatel Internetworking, Incorporated)\n                                   26801 West Agoura Road\n                                Agoura Hills, CA  91301-5122\n                                  United States Of America\n\n                Telephone:               North America  +1 800 995 2696\n                                         Latin America  +1 877 919 9526\n                                         Europe         +31 23 556 0100\n                                         Asia           +65 394 7933\n                                         All Other      +1 818 878 4507\n\n                Electronic Mail:         support@ind.alcatel.com\n                World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1RIPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n                 Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                     For the Birds Of Prey Product Line\n                     Configuration Of Global RIP Configuration Parameters.\n\n                 The right to make changes in specification and other information\n                 contained in this document without prior notice is reserved.\n\n                 No liability shall be assumed for any incidental, indirect, special, or\n                 consequential damages whatsoever arising from or related to this\n                 document or the information contained herein.\n\n                 Vendors, end-users, and other interested parties are granted\n                 non-exclusive license to use this specification in connection with\n                 management of the products for which it is intended to be used.\n\n                             Copyright (C) 1995-2007 Alcatel-Lucent\n                                 ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1RIPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1))
if mibBuilder.loadTexts: alcatelIND1RIPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBObjects.setDescription('Branch for Routing Information Protocol (RIP)\n             Subsystem Managed Objects.')
alcatelIND1RIPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2))
if mibBuilder.loadTexts: alcatelIND1RIPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBConformance.setDescription('Branch for Routing Information Protocol (RIP)\n             Subsystem Conformance Information.')
alcatelIND1RIPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1RIPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBGroups.setDescription('Branch for Routing Information Protocol (RIP)\n             Subsystem Units Of Conformance.')
alcatelIND1RIPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliances.setDescription('Branch for Routing Information Protocol (RIP)\n             Subsystem Compliance Statements.')
class AlaAuthenticationEncryptKey(TextualConvention, OctetString):
    description = 'The authentication encryption key that is used to decypher\n                        RIP simple passwords.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

alaProtocolRip = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1))
alaRipProtoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipProtoStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipProtoStatus.setDescription('Global administration status of RIP.')
alaRipHostRouteSupport = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipHostRouteSupport.setStatus('current')
if mibBuilder.loadTexts: alaRipHostRouteSupport.setDescription('Enable or disable support for host routes.')
alaRipRedistRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipRedistRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipRedistRouteTag.setDescription('A 32-bit value tagged to each RIP internal route while\n        it is redistributed in to other routing protocol domains. The\n        lower 16-bits typically indicate the autonomous system number.')
alaRipForceHolddownTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipForceHolddownTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipForceHolddownTimer.setDescription('Interval in seconds during which routing information regarding\n        better paths is suppressed. A route enters into a forced holddown\n        state when an update packet is received that indicates the route is\n        unreachable and when this timer value is nonzero. After this timer\n        has expired, if the value is less that 120 - the route enters a\n        holddown state for the rest of the period until 120. During this time\n        advertisements for better paths are accepted if any.')
alaRipRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipRouteNumber.setStatus('current')
if mibBuilder.loadTexts: alaRipRouteNumber.setDescription('The number of network routes in RIP routing table.')
alaRipUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: alaRipUpdateInterval.setDescription('Interval (in seconds) that RIP routing updates will\n            be sent out.  The value must be less than or equal to\n            one-third the value of the invalid timer.')
alaRipInvalidTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 360)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipInvalidTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipInvalidTimer.setDescription('Time in seconds that a route will remain active\n            in RIB before being moved to the invalid state.\n            The value must be at least three times the\n            update interval.')
alaRipHolddownTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipHolddownTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipHolddownTimer.setDescription('Time to keep a route in the holddown state.')
alaRipGarbageTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipGarbageTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipGarbageTimer.setDescription('Time to keep a route before garbage collection.')
alaRip2IfConfAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11), )
if mibBuilder.loadTexts: alaRip2IfConfAugTable.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfAugTable.setDescription('Expansion for rip2ifconftable')
alaRip2IfConfAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1), )
rip2IfConfEntry.registerAugmentions(("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfAugEntry"))
alaRip2IfConfAugEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: alaRip2IfConfAugEntry.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfAugEntry.setDescription('An entry of alaRip2IfConfAugTable')
alaRip2IfConfEncryptKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 1), AlaAuthenticationEncryptKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfEncryptKey.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfEncryptKey.setDescription('The authentication encryption key that is used to decypher\n                        RIP passwords.')
alaRip2IfIpConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfIpConfStatus.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfIpConfStatus.setDescription('The status of the associated IP interface')
alaRip2IfRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfRecvPkts.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfRecvPkts.setDescription('Number of packets received on this interface')
alaRip2IfConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRip2IfConfName.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfName.setDescription('The user defined name used to identify the IP interface')
alaRip2IfConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadcast", 1), ("point2point", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfType.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfType.setDescription('The type of the rip interface')
alaRip2IfConfPtoPPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfPtoPPeer.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfPtoPPeer.setDescription('The address of the peer for a point-to-point rip interface')
alaRip2IfConfIngressFilterRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfIngressFilterRouteMapName.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfIngressFilterRouteMapName.setDescription("The name of a Route Map to be applied when filtering\n             RIP routing updates received on this RIP interface. RIP\n             routes that are explicitly denied by a Route Map are\n             filtered. An empty string indicates that no filtering\n             action is performed (this is the default). If the Route\n             Map is specified and a RIP route doesn't match any Route\n             Map route or if there is a match that is permitted, the\n             RIP route is not filtered.\n             Route Map manipulators (SET commands configured for\n             a Route Map) are not applied when filtering is performed.\n             (cf. alaRouteMapNameTable.AlaRouteMapNameEntry.alaRouteMapName)")
alaRip2IfConfEgressFilterRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 11, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRip2IfConfEgressFilterRouteMapName.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfEgressFilterRouteMapName.setDescription("The name of a Route Map to be applied when filtering\n             RIP routing updates sent out this RIP interface. RIP\n             routes that are explicitly denied by a Route Map are\n             filtered. An empty string indicates that no filtering\n             action is performed (this is the default). If the Route\n             Map is specified and a RIP route doesn't match any Route\n             Map route or if there is a match that is permitted, the\n             RIP route is not filtered.\n             Route Map manipulators (SET commands configured for\n             a Route Map) are not applied when filtering is performed.\n             (cf. alaRouteMapNameTable.AlaRouteMapNameEntry.alaRouteMapName)")
alaRipEcmpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12), )
if mibBuilder.loadTexts: alaRipEcmpRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteTable.setDescription('ECMP-enabled RIP routing table which contains the network routes.')
alaRipEcmpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteDest"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteMask"), (0, "ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteNextHop"))
if mibBuilder.loadTexts: alaRipEcmpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteEntry.setDescription('ECMP-enabled RIP routing table which contains the network routes.')
alaRipEcmpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteDest.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteDest.setDescription('The destination IP address of this route.')
alaRipEcmpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteMask.setDescription('The network mask for this route.')
alaRipEcmpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: alaRipEcmpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteNextHop.setDescription('The address of the next hop to reach this route.')
alaRipEcmpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("redistribute", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteType.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteType.setDescription('The type of route.')
alaRipEcmpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteAge.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteAge.setDescription('The number of seconds since this route  was last\n            updated or otherwise determined to be correct.')
alaRipEcmpRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteTag.setDescription('The associated route tag.')
alaRipEcmpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteMetric.setDescription('The routing  metric  for  this  route.')
alaRipEcmpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 8), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteStatus.setDescription('The row status variable, used according to\n            row installation and removal conventions.')
alaRipEcmpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("garbage", 2), ("holddown", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipEcmpRouteState.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteState.setDescription('The associated state for this route.')
alcatelIND1RIPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipMiscellaneousGroup"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RIPMIBCompliance = alcatelIND1RIPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliance.setDescription('Compliance statement for\n             Routing Information Protocol (RIP) Subsystem.')
alaRipMiscellaneousGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipForceHolddownTimer"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipMiscellaneousGroup = alaRipMiscellaneousGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipMiscellaneousGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alaRip2IfConfAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfEncryptKey"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfIpConfStatus"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfRecvPkts"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfName"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfType"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfPtoPPeer"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfIngressFilterRouteMapName"), ("ALCATEL-IND1-RIP-MIB", "alaRip2IfConfEgressFilterRouteMapName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRip2IfConfAugGroup = alaRip2IfConfAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaRip2IfConfAugGroup.setDescription('Collection of RIP2 Interface objects.')
alaProtocolRipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipProtoStatus"), ("ALCATEL-IND1-RIP-MIB", "alaRipHostRouteSupport"), ("ALCATEL-IND1-RIP-MIB", "alaRipRedistRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipForceHolddownTimer"), ("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"), ("ALCATEL-IND1-RIP-MIB", "alaRipUpdateInterval"), ("ALCATEL-IND1-RIP-MIB", "alaRipInvalidTimer"), ("ALCATEL-IND1-RIP-MIB", "alaRipHolddownTimer"), ("ALCATEL-IND1-RIP-MIB", "alaRipGarbageTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaProtocolRipGroup = alaProtocolRipGroup.setStatus('current')
if mibBuilder.loadTexts: alaProtocolRipGroup.setDescription('Collection of RIP Protocol objects.')
alaRipEcmpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-RIP-MIB", "alaRipRouteNumber"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteType"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteAge"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteTag"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteMetric"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteStatus"), ("ALCATEL-IND1-RIP-MIB", "alaRipEcmpRouteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipEcmpRouteGroup = alaRipEcmpRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipEcmpRouteGroup.setDescription('Collection of objects for management of Network Route configuration.')
alcatelIND1RIPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3))
alcatelIND1RIPTrapsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3, 0))
ripRouteMaxLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 3, 0, 1))
if mibBuilder.loadTexts: ripRouteMaxLimitReached.setStatus('current')
if mibBuilder.loadTexts: ripRouteMaxLimitReached.setDescription(' This notification is generated as RIP database reached supported\n             Maximum entries. RIP will discard any new updates.')
alcatelIND1RIPTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 3, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-RIP-MIB", "ripRouteMaxLimitReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RIPTrapsGroup = alcatelIND1RIPTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPTrapsGroup.setDescription('Collection of RIP Trap Objects.')
mibBuilder.exportSymbols("ALCATEL-IND1-RIP-MIB", alaRipEcmpRouteTable=alaRipEcmpRouteTable, alaRipInvalidTimer=alaRipInvalidTimer, alaRipEcmpRouteTag=alaRipEcmpRouteTag, alaRipGarbageTimer=alaRipGarbageTimer, alaRipProtoStatus=alaRipProtoStatus, alaRipEcmpRouteMetric=alaRipEcmpRouteMetric, alaRipHolddownTimer=alaRipHolddownTimer, alaRip2IfConfEgressFilterRouteMapName=alaRip2IfConfEgressFilterRouteMapName, alaRipForceHolddownTimer=alaRipForceHolddownTimer, alaProtocolRip=alaProtocolRip, alaRipHostRouteSupport=alaRipHostRouteSupport, alaRip2IfIpConfStatus=alaRip2IfIpConfStatus, alaRip2IfConfType=alaRip2IfConfType, alaRipEcmpRouteMask=alaRipEcmpRouteMask, alcatelIND1RIPMIBCompliances=alcatelIND1RIPMIBCompliances, alaRip2IfRecvPkts=alaRip2IfRecvPkts, alcatelIND1RIPMIBCompliance=alcatelIND1RIPMIBCompliance, alaRipRouteNumber=alaRipRouteNumber, alaRip2IfConfAugGroup=alaRip2IfConfAugGroup, alaRip2IfConfAugEntry=alaRip2IfConfAugEntry, alaRipEcmpRouteNextHop=alaRipEcmpRouteNextHop, ripRouteMaxLimitReached=ripRouteMaxLimitReached, alcatelIND1RIPTrapsGroup=alcatelIND1RIPTrapsGroup, PYSNMP_MODULE_ID=alcatelIND1RIPMIB, alcatelIND1RIPTraps=alcatelIND1RIPTraps, alaRip2IfConfIngressFilterRouteMapName=alaRip2IfConfIngressFilterRouteMapName, alcatelIND1RIPMIBGroups=alcatelIND1RIPMIBGroups, alaRipEcmpRouteState=alaRipEcmpRouteState, alaProtocolRipGroup=alaProtocolRipGroup, AlaAuthenticationEncryptKey=AlaAuthenticationEncryptKey, alaRip2IfConfEncryptKey=alaRip2IfConfEncryptKey, alaRipEcmpRouteAge=alaRipEcmpRouteAge, alcatelIND1RIPMIBObjects=alcatelIND1RIPMIBObjects, alaRip2IfConfAugTable=alaRip2IfConfAugTable, alcatelIND1RIPTrapsRoot=alcatelIND1RIPTrapsRoot, alaRipEcmpRouteStatus=alaRipEcmpRouteStatus, alcatelIND1RIPMIBConformance=alcatelIND1RIPMIBConformance, alaRip2IfConfName=alaRip2IfConfName, alaRip2IfConfPtoPPeer=alaRip2IfConfPtoPPeer, alaRipEcmpRouteEntry=alaRipEcmpRouteEntry, alaRipUpdateInterval=alaRipUpdateInterval, alaRipEcmpRouteDest=alaRipEcmpRouteDest, alaRipMiscellaneousGroup=alaRipMiscellaneousGroup, alaRipEcmpRouteGroup=alaRipEcmpRouteGroup, alaRipEcmpRouteType=alaRipEcmpRouteType, alcatelIND1RIPMIB=alcatelIND1RIPMIB, alaRipRedistRouteTag=alaRipRedistRouteTag)
