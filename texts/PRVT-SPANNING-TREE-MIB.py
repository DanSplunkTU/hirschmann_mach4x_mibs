#
# PySNMP MIB module PRVT-SPANNING-TREE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SPANNING-TREE-MIB
# Produced by pysmi-1.1.3 at Tue Nov 30 03:11:02 2021
# On host fv-az42-83 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, Counter64, Gauge32, Integer32, NotificationType, Counter32, ObjectIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Counter64", "Gauge32", "Integer32", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "TimeTicks")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
prvtSpanningTreeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 107))
prvtSpanningTreeMIB.setRevisions(('2010-04-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSpanningTreeMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setLastUpdated('201004060000Z')
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSpanningTreeMIB.setDescription('The private MIB module for management of the spanning tree and fast ring protocols.')
class PrvtStInstIdTC(TextualConvention, Unsigned32):
    description = 'A spanning tree instance identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 15)

class PrvtStInstIdExceptZeroTC(TextualConvention, Unsigned32):
    description = 'A non-zero spanning tree instance identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 15)

class PrvtStPortIdTC(TextualConvention, Unsigned32):
    description = 'The port identifier.'
    status = 'current'
    displayHint = 'x'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PrvtStBridgeIdTC(TextualConvention, OctetString):
    description = 'The bridge identifier, as used in the Spanning Tree\n         Protocol, to uniquely identify a bridge.'
    status = 'current'
    displayHint = '2d.1x:1x:1x:1x:1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PrvtStLearnModeTC(TextualConvention, Integer32):
    description = 'Learn mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("standard", 1), ("temporary-disabled", 2))

class PrvtStLinkTypeTC(TextualConvention, Integer32):
    description = 'Link types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("auto", 1), ("pointToPoint", 2), ("shared", 3))

class PrvtStPortRoleTC(TextualConvention, Integer32):
    description = 'Possible port roles.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6))

class PrvtStPortStateTC(TextualConvention, Integer32):
    description = 'Possible port states.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("forward", 1), ("block", 2), ("learn", 3))

class PrvtStPortPriorityTC(TextualConvention, Unsigned32):
    description = 'Possible values for port priority.\n         Valid values are multiples of 16.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), )
class PrvtStBridgePriorityTC(TextualConvention, Unsigned32):
    description = 'Possible values for bridge priority.\n         Valid values are multiples of 4096.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4096, 4096), ValueRangeConstraint(8192, 8192), ValueRangeConstraint(12288, 12288), ValueRangeConstraint(16384, 16384), ValueRangeConstraint(20480, 20480), ValueRangeConstraint(24576, 24576), ValueRangeConstraint(28672, 28672), ValueRangeConstraint(32768, 32768), ValueRangeConstraint(36864, 36864), ValueRangeConstraint(40960, 40960), ValueRangeConstraint(45056, 45056), ValueRangeConstraint(49152, 49152), ValueRangeConstraint(53248, 53248), ValueRangeConstraint(57344, 57344), ValueRangeConstraint(61440, 61440), )
prvtStNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0))
prvtStObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1))
prvtStCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1))
prvtStProviderBridgeAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot1d", 0), ("dot1ad", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStProviderBridgeAddress.setReference('IEEE 802.1ad')
if mibBuilder.loadTexts: prvtStProviderBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: prvtStProviderBridgeAddress.setDescription('Chose wich standard - 802.1d or 802.1ad will be used for BPDUs')
prvtStMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMaxAge.setReference('IEEE 802.1s clause 13.23.4')
if mibBuilder.loadTexts: prvtStMaxAge.setStatus('current')
if mibBuilder.loadTexts: prvtStMaxAge.setDescription('The maximum age, in seconds, of Spanning Tree Protocol\n         information learned from the network on any port\n         before it is discarded.\n         Note that the following relationships are enforced:\n         prvtStMaxAge >= 2 x (prvtStHelloTime + 1)\n         2 x (prvtStForwardDelay - 1) >= prvtStMaxAge')
prvtStHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStHelloTime.setReference('IEEE 802.1s clause 13.22')
if mibBuilder.loadTexts: prvtStHelloTime.setStatus('current')
if mibBuilder.loadTexts: prvtStHelloTime.setDescription('The amount of time, in seconds, between the transmission of\n         Configuration bridge PDUs by this node on any port\n         when it is the root of the spanning tree or trying\n         to become so.\n         Note that the following relationship is enforced:\n         prvtStMaxAge >= 2 x (prvtStHelloTime + 1)')
prvtStForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStForwardDelay.setReference('IEEE 802.1s clause 13.23')
if mibBuilder.loadTexts: prvtStForwardDelay.setStatus('current')
if mibBuilder.loadTexts: prvtStForwardDelay.setDescription('The amount of time in seconds to delay before entering forwarding state.\n         Note that the following relationship is enforced:\n         2 x (prvtStForwardDelay - 1) >= prvtStMaxAge')
prvtStPriority = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 5), PrvtStBridgePriorityTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStPriority.setReference('IEEE 802.1s clause 13.23')
if mibBuilder.loadTexts: prvtStPriority.setStatus('current')
if mibBuilder.loadTexts: prvtStPriority.setDescription('The bridge priority.\n         Valid values are multiples of 4096.')
prvtStTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: prvtStTimeSinceTopologyChange.setDescription('The time, in seconds, since last topology change.')
prvtStTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStTopChanges.setStatus('current')
if mibBuilder.loadTexts: prvtStTopChanges.setDescription('The total number of topology changes detected.')
prvtStPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8), )
if mibBuilder.loadTexts: prvtStPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtStPortTable.setDescription('A table containing port specific configuration information for the spanning-tree protocols.')
prvtStPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStPortIfName"))
if mibBuilder.loadTexts: prvtStPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStPortEntry.setDescription('An entry in prvtStPortTable.')
prvtStPortIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortIfName.setStatus('current')
if mibBuilder.loadTexts: prvtStPortIfName.setDescription('RowStatus for prvtStPortTable')
prvtStPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStPortRowStatus.setDescription('RowStatus for prvtStPortTable')
prvtStPortBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortBpduTx.setStatus('current')
if mibBuilder.loadTexts: prvtStPortBpduTx.setDescription('Enable transmission of BPDUs on this port.')
prvtStPortBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortBpduRx.setStatus('current')
if mibBuilder.loadTexts: prvtStPortBpduRx.setDescription('Configures how BPDUs received by the port should be processed.')
prvtStPortDetectBpduLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortDetectBpduLoss.setStatus('current')
if mibBuilder.loadTexts: prvtStPortDetectBpduLoss.setDescription('Enable detection of BPDU loss.')
prvtStPortCiscoCompliant = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortCiscoCompliant.setStatus('current')
if mibBuilder.loadTexts: prvtStPortCiscoCompliant.setDescription('Configure this port to be Cisco compliant.')
prvtStPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortEdge.setStatus('current')
if mibBuilder.loadTexts: prvtStPortEdge.setDescription('Set port as an edge-port.\n         Note that ring ports can not be set as edge ports.')
prvtStPortEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStPortEdgeStatus.setDescription('Whether this port is currently operating as an edge port.')
prvtStPortEdgeFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortEdgeFlush.setStatus('current')
if mibBuilder.loadTexts: prvtStPortEdgeFlush.setDescription('Flush edge port when blocking.')
prvtStPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 10), PrvtStLinkTypeTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortLinkType.setReference('IEEE Std 802.1s Clause')
if mibBuilder.loadTexts: prvtStPortLinkType.setStatus('current')
if mibBuilder.loadTexts: prvtStPortLinkType.setDescription('Configure the link type for this port.')
prvtStPortLinkTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 11), PrvtStLinkTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortLinkTypeStatus.setReference('IEEE Std 802.1s Clause')
if mibBuilder.loadTexts: prvtStPortLinkTypeStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStPortLinkTypeStatus.setDescription('The current link type status for this port.')
prvtStPortRestrictedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRestrictedRoot.setStatus('current')
if mibBuilder.loadTexts: prvtStPortRestrictedRoot.setDescription('Enable root restriction on this port.\n         Note that ring ports can not have restricted root enabled.')
prvtStPortRestrictedTcn = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortRestrictedTcn.setStatus('current')
if mibBuilder.loadTexts: prvtStPortRestrictedTcn.setDescription('Enable topology change notification (TCN) restriction on this port.\n         Note that ring ports can not have restricted TCN enabled.')
prvtStPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortPathCost.setReference('IEEE Std 802.1s')
if mibBuilder.loadTexts: prvtStPortPathCost.setStatus('current')
if mibBuilder.loadTexts: prvtStPortPathCost.setDescription('Configure the path cost for this port.')
prvtStPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 15), PrvtStPortPriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortPriority.setReference('IEEE Std 802.1s')
if mibBuilder.loadTexts: prvtStPortPriority.setStatus('current')
if mibBuilder.loadTexts: prvtStPortPriority.setDescription('Set port priority.\n         Valid values are multiples of 16.')
prvtStPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStPortAdminStatus.setDescription('Enable or disable spanning-tree on this port.\n         Note that ring ports can not be set to disabled.')
prvtStPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 17), PrvtStPortStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortState.setStatus('current')
if mibBuilder.loadTexts: prvtStPortState.setDescription('The current state of this port.')
prvtStPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 18), PrvtStPortRoleTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortRole.setStatus('current')
if mibBuilder.loadTexts: prvtStPortRole.setDescription('The current role for this port.')
prvtStPortDesPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesPCost.setStatus('current')
if mibBuilder.loadTexts: prvtStPortDesPCost.setDescription('The designated path cost for this port.')
prvtStPortDesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesBridgeID.setStatus('current')
if mibBuilder.loadTexts: prvtStPortDesBridgeID.setDescription('The designated bridge ID for this port.')
prvtStPortDesPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 8, 1, 21), PrvtStPortIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStPortDesPortID.setStatus('current')
if mibBuilder.loadTexts: prvtStPortDesPortID.setDescription('The designated port ID for this port.')
prvtStTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStTxHoldCount.setReference('IEEE 802.1s clause 13.23')
if mibBuilder.loadTexts: prvtStTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: prvtStTxHoldCount.setDescription('TxHoldCount is the value used by the Port Transmit state machine to limit the maximum transmission rate.')
prvtStLearnMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 1, 10), PrvtStLearnModeTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStLearnMode.setReference('IEEE 802.1ad')
if mibBuilder.loadTexts: prvtStLearnMode.setStatus('current')
if mibBuilder.loadTexts: prvtStLearnMode.setDescription('Specify learning of new MACs on non-edge ports')
prvtStStp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 2))
prvtStStpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStStpProtocolDisabled.setStatus('current')
if mibBuilder.loadTexts: prvtStStpProtocolDisabled.setDescription('Enable STP protocol.\n         Note that only one flavour of xSTP can be running at a time (i.e. only one of\n         prvtStStpProtocolDisabled, prvtStRstpProtocolDisabled, prvtStMstpProtocolDisabled,\n         prvtStFRingProtocolDisabled can be true at a time.')
prvtStRstp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 3))
prvtStRstpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStRstpProtocolDisabled.setStatus('current')
if mibBuilder.loadTexts: prvtStRstpProtocolDisabled.setDescription('Enable RSTP protocol.\n         Note that only one flavour of xSTP can be running at a time (i.e. only one of\n         prvtStStpProtocolDisabled, prvtStRstpProtocolDisabled, prvtStMstpProtocolDisabled,\n         prvtStFRingProtocolDisabled can be true at a time.')
prvtStMstp = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4))
prvtStMstpProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpProtocolDisabled.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpProtocolDisabled.setDescription('Enable MSTP protocol.\n         Note that only one flavour of xSTP can be running at a time (i.e. only one of\n         prvtStStpProtocolDisabled, prvtStRstpProtocolDisabled, prvtStMstpProtocolEnable,\n         prvtStFRingProtocolDisabled can be true at a time.')
prvtStMstpRegionName = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpRegionName.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: prvtStMstpRegionName.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpRegionName.setDescription('The configuration name of the MST region to which this bridge belongs.')
prvtStMstpRegionRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpRegionRevision.setReference('IEEE 802.1s clause 13.7')
if mibBuilder.loadTexts: prvtStMstpRegionRevision.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpRegionRevision.setDescription('MST region revision.')
prvtStMstpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStMstpMaxHops.setReference('IEEE 802.1s clause 13.22')
if mibBuilder.loadTexts: prvtStMstpMaxHops.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpMaxHops.setDescription('Maximum number of hops for the MST region.')
prvtStMstpMigrationDelay = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpMigrationDelay.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpMigrationDelay.setDescription('The Migration Delay timer in seconds.')
prvtStMstpInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8), )
if mibBuilder.loadTexts: prvtStMstpInstTable.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstTable.setDescription('This table contains MST instance information.')
prvtStMstpInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpInstId"))
if mibBuilder.loadTexts: prvtStMstpInstEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstEntry.setDescription('An entry in prvtStMstpInstTable.')
prvtStMstpInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 1), PrvtStInstIdExceptZeroTC())
if mibBuilder.loadTexts: prvtStMstpInstId.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstId.setDescription('An MST instance identifier.')
prvtStMstpInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstRowStatus.setDescription('RowStatus entry for prvtStMstpInstTable.')
prvtStMstpInstPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 3), PrvtStBridgePriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpInstPriority.setReference('IEEE 802.1s clause 13.23')
if mibBuilder.loadTexts: prvtStMstpInstPriority.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstPriority.setDescription('The bridge priority for this MST instance.\n         Valid values are multiples of 4096.')
prvtStMstpInstTimeSinceTopChng = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstTimeSinceTopChng.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstTimeSinceTopChng.setDescription('The time in seconds since the last time a topology change was detected for this MST instance.')
prvtStMstpInstTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstTopChanges.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstTopChanges.setDescription('The total number of topology changes detected for this MST instance.')
prvtStMstpInstStatTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9), )
if mibBuilder.loadTexts: prvtStMstpInstStatTable.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstStatTable.setDescription('This table contains additional MST instance status information.')
prvtStMstpInstStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpInstId"))
if mibBuilder.loadTexts: prvtStMstpInstStatEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstStatEntry.setDescription('An entry in prvtStMstpInstStatTable.')
prvtStMstpInstStatRRootID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstStatRRootID.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstStatRRootID.setDescription('The regional root ID for this MST instance.')
prvtStMstpInstStatRemHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMstpInstStatRemHopCount.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstStatRemHopCount.setDescription('The remaining hop count for this MST instance.')
prvtStMstpVlanPerInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10), )
if mibBuilder.loadTexts: prvtStMstpVlanPerInstTable.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpVlanPerInstTable.setDescription('Defines the mapping of VLANs to Spanning Tree instances.')
prvtStMstpVlanPerInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStMstpVlanPerInstVlanId"))
if mibBuilder.loadTexts: prvtStMstpVlanPerInstEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpVlanPerInstEntry.setDescription('An entry in prvtStMstpVlanPerInstTable.')
prvtStMstpVlanPerInstVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: prvtStMstpVlanPerInstVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpVlanPerInstVlanId.setDescription('VLAN identifier')
prvtStMstpVlanPerInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpVlanPerInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpVlanPerInstRowStatus.setDescription('RowStatus for prvtStMstpVlanPerInstTable.')
prvtStMstpVlanPerInstMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 10, 1, 3), PrvtStInstIdTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMstpVlanPerInstMstId.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpVlanPerInstMstId.setDescription('The MST instance to which this VLAN belongs.')
prvtStMstpInstPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12), )
if mibBuilder.loadTexts: prvtStMstpInstPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstPortTable.setDescription('A table containing configuration information regarding\n         a specific port for a given MST instance.')
prvtStMstpInstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStPortIfName"), (0, "PRVT-SPANNING-TREE-MIB", "prvtStMInstPortInstId"))
if mibBuilder.loadTexts: prvtStMstpInstPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStMstpInstPortEntry.setDescription('An entry in prvtStMstpInstPortTable.')
prvtStMInstPortInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 2), PrvtStInstIdExceptZeroTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortInstId.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortInstId.setDescription('Instance ID')
prvtStMInstPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortRowStatus.setDescription('RowStatus for prvtStMstpInstPortTable')
prvtStMInstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortPathCost.setReference('IEEE Std 802.1s')
if mibBuilder.loadTexts: prvtStMInstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortPathCost.setDescription('The path cost for this MST instance port.')
prvtStMInstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 5), PrvtStPortPriorityTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortPriority.setReference('IEEE Std 802.1s')
if mibBuilder.loadTexts: prvtStMInstPortPriority.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortPriority.setDescription('The port priority for this MST instance port.\n         Valid values are multiples of 16.')
prvtStMInstPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStMInstPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortAdminStatus.setDescription('Enable or disable spanning-tree for this MST instance port.')
prvtStMInstPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 7), PrvtStPortStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortState.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortState.setDescription('The current state of this MST instance port.')
prvtStMInstPortFwdTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortFwdTrans.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortFwdTrans.setDescription('The number of transitions from Learning state to Forwarding state\n         that have been made for this MST instance port.')
prvtStMInstPortStatRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 9), PrvtStPortRoleTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortStatRole.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortStatRole.setDescription('The current role for this MST instance port.')
prvtStMInstPortDesPCost = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesPCost.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortDesPCost.setDescription('The designated port path cost.')
prvtStMInstPortDesBridgeID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesBridgeID.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortDesBridgeID.setDescription('The designated bridge ID.')
prvtStMInstPortDesPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 4, 12, 1, 12), PrvtStPortIdTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtStMInstPortDesPortID.setStatus('current')
if mibBuilder.loadTexts: prvtStMInstPortDesPortID.setDescription('The designated port ID.')
prvtStFRing = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5))
prvtStFRingProtocolDisabled = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStFRingProtocolDisabled.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingProtocolDisabled.setDescription('Enable fast ring protocol.\n         Note that only one flavour of xSTP can be running at a time (i.e. only one of\n         prvtStStpProtocolDisabled, prvtStRstpProtocolDisabled, prvtStMstpProtocolEnable,\n         prvtStFRingProtocolDisabled can be true at a time.\n         Setting prvtStFRingProtocolDisabled to true will fail if prvtStFRingInstTable is empty.')
prvtStFRingPrefLink = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtStFRingPrefLink.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingPrefLink.setDescription('Specify preferred fast ring port')
prvtStFRingInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3), )
if mibBuilder.loadTexts: prvtStFRingInstTable.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingInstTable.setDescription('Each row in the table defines an instance of a fast ring.\n         Currently only one instance is supported.  An attempt to create more than one instance\n         will fail.\n         While prvtStFRingProtocolDisabled is true (i.e. fast-ring protocol is enabled), there must\n         exist at least one row in this table.  An attempt to delete the only existing row in this\n         table will fail while prvtStFRingProtocolDisabled is true.')
prvtStFRingInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-SPANNING-TREE-MIB", "prvtStFRingInstPort1"), (0, "PRVT-SPANNING-TREE-MIB", "prvtStFRingInstPort2"))
if mibBuilder.loadTexts: prvtStFRingInstEntry.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingInstEntry.setDescription('An entry in prvtStFRingInstTable.')
prvtStFRingInstPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtStFRingInstPort1.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingInstPort1.setDescription('The first ring port belonging to the fast ring.\n         prvtStFRingInstPort1 must exist in prvtStPortTable.\n         prvtStFRingInstPort1 must not equal prvtStFRingInstPort2.')
prvtStFRingInstPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 2), OctetString())
if mibBuilder.loadTexts: prvtStFRingInstPort2.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingInstPort2.setDescription('The second ring port belonging to the fast ring.\n         prvtStFRingInstPort2 must exist in prvtStPortTable.\n         prvtStFRingInstPort1 must not equal prvtStFRingInstPort2.')
prvtStFRingInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtStFRingInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtStFRingInstRowStatus.setDescription('RowStatus entry for prvtStFRingInstTable.')
stTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 1))
if mibBuilder.loadTexts: stTopologyChange.setStatus('current')
if mibBuilder.loadTexts: stTopologyChange.setDescription('A topologyChange trap is sent by a bridge when any of\n         its configured ports transitions from the Learning state\n         to the Forwarding state, or from the Forwarding state to\n         the Blocking state. The trap is not sent if a newRoot\n         trap is sent for the same transition. Implementation of\n         this trap is optional.')
stNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 2))
if mibBuilder.loadTexts: stNewRoot.setStatus('current')
if mibBuilder.loadTexts: stNewRoot.setDescription('The newRoot trap indicates that the sending agent has\n         become the new root of the Spanning Tree; the trap is\n         sent by a bridge soon after its election as the new\n         root, e.g., upon expiration of the Topology Change Timer,\n         immediately subsequent to its election. Implementation\n         of this trap is optional.')
mstTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 3)).setObjects(("PRVT-SPANNING-TREE-MIB", "prvtStMInstPortStatRole"), ("PRVT-SPANNING-TREE-MIB", "prvtStTimeSinceTopologyChange"))
if mibBuilder.loadTexts: mstTopologyChange.setStatus('current')
if mibBuilder.loadTexts: mstTopologyChange.setDescription('A topologyChange trap is sent by a bridge when any of\n         its configured ports transitions from the Learning state\n         to the Forwarding state, or from the Forwarding state to\n         the Blocking state. The trap is not sent if a newRoot\n         trap is sent for the same transition. Implementation of\n         this trap is optional.')
mstNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 107, 0, 4)).setObjects(("PRVT-SPANNING-TREE-MIB", "prvtStMInstPortStatRole"))
if mibBuilder.loadTexts: mstNewRoot.setStatus('current')
if mibBuilder.loadTexts: mstNewRoot.setDescription('The newRoot trap indicates that the sending agent has\n         become the new root of the MSTP; the trap is\n         sent by a bridge soon after its election as the new\n         root, e.g., upon expiration of the Topology Change Timer,\n         immediately subsequent to its election. Implementation\n         of this trap is optional.')
mibBuilder.exportSymbols("PRVT-SPANNING-TREE-MIB", prvtStStp=prvtStStp, prvtStPortEntry=prvtStPortEntry, prvtStPortLinkTypeStatus=prvtStPortLinkTypeStatus, prvtStMstpProtocolDisabled=prvtStMstpProtocolDisabled, PrvtStInstIdExceptZeroTC=PrvtStInstIdExceptZeroTC, prvtStPriority=prvtStPriority, PYSNMP_MODULE_ID=prvtSpanningTreeMIB, PrvtStLinkTypeTC=PrvtStLinkTypeTC, prvtStPortRowStatus=prvtStPortRowStatus, PrvtStLearnModeTC=PrvtStLearnModeTC, mstNewRoot=mstNewRoot, prvtStPortDesBridgeID=prvtStPortDesBridgeID, PrvtStPortStateTC=PrvtStPortStateTC, prvtStFRingProtocolDisabled=prvtStFRingProtocolDisabled, prvtStFRingInstPort1=prvtStFRingInstPort1, prvtStRstp=prvtStRstp, prvtStMInstPortDesPortID=prvtStMInstPortDesPortID, prvtStMInstPortDesBridgeID=prvtStMInstPortDesBridgeID, prvtStMstpVlanPerInstMstId=prvtStMstpVlanPerInstMstId, prvtStPortTable=prvtStPortTable, prvtStForwardDelay=prvtStForwardDelay, prvtStMstpVlanPerInstEntry=prvtStMstpVlanPerInstEntry, prvtStProviderBridgeAddress=prvtStProviderBridgeAddress, prvtStPortBpduRx=prvtStPortBpduRx, prvtStPortRestrictedTcn=prvtStPortRestrictedTcn, prvtStMstpVlanPerInstRowStatus=prvtStMstpVlanPerInstRowStatus, stTopologyChange=stTopologyChange, prvtStFRingInstRowStatus=prvtStFRingInstRowStatus, prvtStTxHoldCount=prvtStTxHoldCount, prvtStMstpRegionName=prvtStMstpRegionName, prvtStMstpInstStatEntry=prvtStMstpInstStatEntry, prvtStMstpInstTopChanges=prvtStMstpInstTopChanges, prvtStMstpInstEntry=prvtStMstpInstEntry, prvtStFRingInstEntry=prvtStFRingInstEntry, PrvtStBridgeIdTC=PrvtStBridgeIdTC, prvtStMstpInstRowStatus=prvtStMstpInstRowStatus, prvtStPortBpduTx=prvtStPortBpduTx, prvtStNotifications=prvtStNotifications, prvtStMInstPortState=prvtStMInstPortState, prvtStMInstPortPriority=prvtStMInstPortPriority, prvtStMstpInstStatTable=prvtStMstpInstStatTable, prvtStPortCiscoCompliant=prvtStPortCiscoCompliant, prvtStTopChanges=prvtStTopChanges, prvtStMstpInstId=prvtStMstpInstId, prvtStMstpVlanPerInstVlanId=prvtStMstpVlanPerInstVlanId, PrvtStPortIdTC=PrvtStPortIdTC, prvtStTimeSinceTopologyChange=prvtStTimeSinceTopologyChange, prvtStMInstPortRowStatus=prvtStMInstPortRowStatus, prvtStMstpInstTimeSinceTopChng=prvtStMstpInstTimeSinceTopChng, prvtStFRingPrefLink=prvtStFRingPrefLink, prvtStPortRestrictedRoot=prvtStPortRestrictedRoot, prvtStMInstPortDesPCost=prvtStMInstPortDesPCost, mstTopologyChange=mstTopologyChange, PrvtStBridgePriorityTC=PrvtStBridgePriorityTC, prvtStPortAdminStatus=prvtStPortAdminStatus, prvtStPortEdge=prvtStPortEdge, prvtStMstpMigrationDelay=prvtStMstpMigrationDelay, PrvtStPortRoleTC=PrvtStPortRoleTC, prvtStPortPathCost=prvtStPortPathCost, stNewRoot=stNewRoot, prvtStMstpInstStatRRootID=prvtStMstpInstStatRRootID, prvtStFRing=prvtStFRing, prvtStMstpInstPortEntry=prvtStMstpInstPortEntry, prvtStMInstPortStatRole=prvtStMInstPortStatRole, prvtStMInstPortAdminStatus=prvtStMInstPortAdminStatus, prvtStMaxAge=prvtStMaxAge, prvtStMstpRegionRevision=prvtStMstpRegionRevision, prvtStPortDesPortID=prvtStPortDesPortID, prvtStStpProtocolDisabled=prvtStStpProtocolDisabled, prvtStMInstPortPathCost=prvtStMInstPortPathCost, prvtStPortDetectBpduLoss=prvtStPortDetectBpduLoss, prvtStMstp=prvtStMstp, PrvtStInstIdTC=PrvtStInstIdTC, prvtStPortDesPCost=prvtStPortDesPCost, prvtStLearnMode=prvtStLearnMode, prvtStPortEdgeStatus=prvtStPortEdgeStatus, prvtStMstpInstPortTable=prvtStMstpInstPortTable, prvtStMInstPortInstId=prvtStMInstPortInstId, prvtStPortLinkType=prvtStPortLinkType, prvtStRstpProtocolDisabled=prvtStRstpProtocolDisabled, prvtStMstpInstPriority=prvtStMstpInstPriority, prvtStMstpInstStatRemHopCount=prvtStMstpInstStatRemHopCount, prvtStPortEdgeFlush=prvtStPortEdgeFlush, prvtStPortState=prvtStPortState, prvtStMstpMaxHops=prvtStMstpMaxHops, prvtStPortPriority=prvtStPortPriority, prvtStPortRole=prvtStPortRole, prvtStFRingInstTable=prvtStFRingInstTable, prvtStMInstPortFwdTrans=prvtStMInstPortFwdTrans, prvtStHelloTime=prvtStHelloTime, prvtStMstpInstTable=prvtStMstpInstTable, PrvtStPortPriorityTC=PrvtStPortPriorityTC, prvtStMstpVlanPerInstTable=prvtStMstpVlanPerInstTable, prvtStFRingInstPort2=prvtStFRingInstPort2, prvtStObjects=prvtStObjects, prvtStCommon=prvtStCommon, prvtStPortIfName=prvtStPortIfName, prvtSpanningTreeMIB=prvtSpanningTreeMIB)
