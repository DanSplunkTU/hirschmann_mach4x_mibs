#
# PySNMP MIB module ALCATEL-IND1-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-IP-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Ip, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Ip")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ipCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipCidrRouteEntry")
ipNetToMediaEntry, ipNetToMediaNetAddress, ipNetToMediaIfIndex = mibBuilder.importSymbols("IP-MIB", "ipNetToMediaEntry", "ipNetToMediaNetAddress", "ipNetToMediaIfIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, IpAddress, NotificationType, ObjectIdentity, TimeTicks, Counter32, Counter64, ModuleIdentity, Integer32, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "TimeTicks", "Counter32", "Counter64", "ModuleIdentity", "Integer32", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
PhysAddress, DisplayString, MacAddress, TimeStamp, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "MacAddress", "TimeStamp", "TextualConvention", "RowStatus")
alcatelIND1IPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1))
alcatelIND1IPMIB.setRevisions(('2016-02-25 00:00', '2015-09-09 00:00', '2014-10-17 00:00', '2012-03-23 00:00', '2011-03-07 00:00', '2011-01-25 00:00', '2010-05-13 00:00', '2009-05-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPMIB.setRevisionsDescriptions(('Mark as obsolete the old chassis/slot/port values', 'The alaIpPortServiceTable is deprecated.', 'added alaIpServiceSourceIpTable', 'added ipNetToMediaChassisId, alaDoSChassisId', 'Increased size of alaIpInterfaceName and alaIpItfConfigName to 32', 'Changed alaDoSStatus to read-write.', 'Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPMIB.setLastUpdated('201602250000Z')
if mibBuilder.loadTexts: alcatelIND1IPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Propietary IP MIB definitions\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n         or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2006 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 0))
if mibBuilder.loadTexts: alcatelIND1IPMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1IPMIBNotifications.setDescription('Branch For IP MIB Subsystem Notifications.')
alcatelIND1IPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1))
class AlaIpServiceSourceIpAppIndex(TextualConvention, Integer32):
    description = 'The application index for the service source IP table entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("all", 1), ("dns", 2), ("ftp", 3), ("ldap", 4), ("ntp", 5), ("radius", 6), ("sflow", 7), ("snmp", 8), ("ssh", 9), ("swlog", 10), ("tacacs", 11), ("telnet", 12), ("tftp", 13))

alaIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 1))
alaIpClearArpCache = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpClearArpCache.setStatus('current')
if mibBuilder.loadTexts: alaIpClearArpCache.setDescription('Clear dynamic ARP entries from ARP cache.')
alaIpDirectedBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpDirectedBroadcast.setStatus('current')
if mibBuilder.loadTexts: alaIpDirectedBroadcast.setDescription('The indication of whether this router is forwarding IP\n             directed broadcasts')
alaIpClearArpFilter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpClearArpFilter.setStatus('current')
if mibBuilder.loadTexts: alaIpClearArpFilter.setDescription('Clear ARP filters entries.')
alaIpDistributedArp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpDistributedArp.setStatus('current')
if mibBuilder.loadTexts: alaIpDistributedArp.setDescription('Enables/Disables the distributed ARP feature.  The\n            feature creates designated NIs for ip interfaces.\n            This allows more hardware ARP entries on a switch/VC.')
alaIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2), )
if mibBuilder.loadTexts: alaIpNetToMediaTable.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaTable.setDescription('A table of ARP flags, expansion to ipNetToMediaTable.')
alaIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1), ).setIndexNames((0, "IP-MIB", "ipNetToMediaIfIndex"), (0, "IP-MIB", "ipNetToMediaNetAddress"))
if mibBuilder.loadTexts: alaIpNetToMediaEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaEntry.setDescription('An entry in alaIpToMediaTable.')
alaIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpNetToMediaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
alaIpNetToMediaProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpNetToMediaProxy.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaProxy.setDescription('Proxy ARP flag')
alaIpNetToMediaVrrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaVrrp.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaVrrp.setDescription('VRRP ARP flag')
alaIpNetToMediaAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaAuth.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaAuth.setDescription('Authentication VLAN ARP flags')
alaIpNetToMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpNetToMediaName.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaName.setDescription('Name of the entry.')
alaIpNetToMediaStaticIntfRt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaStaticIntfRt.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaStaticIntfRt.setDescription('Static-Interface-Route ARP flag')
alaDoSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3))
alaDoSTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaDoSTable.setStatus('current')
if mibBuilder.loadTexts: alaDoSTable.setDescription('Table of DoS (denial of service) attacks detected')
alaDoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaDoSType"))
if mibBuilder.loadTexts: alaDoSEntry.setStatus('current')
if mibBuilder.loadTexts: alaDoSEntry.setDescription('An entry in the alaDoStable')
alaDoSType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("portscan", 0), ("tcpsyn", 1), ("pingofdeath", 2), ("smurf", 3), ("pepsi", 4), ("land", 5), ("teardropBonkBoink", 6), ("loopbacksrcip", 7), ("invalidip", 8), ("mcastmismatch", 9), ("ucastipmcastmac", 10), ("pingattack", 11), ("arpattack", 12), ("arppoison", 13), ("antispoof", 14)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSType.setStatus('current')
if mibBuilder.loadTexts: alaDoSType.setDescription('index field for the alaDoSTable.  Note: tcpsyn, smurf, pepsi and\n\t\tteardropBonkBoink are deprecated.')
alaDoSDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSDetected.setStatus('current')
if mibBuilder.loadTexts: alaDoSDetected.setDescription('Number of attacks detected')
alaDoSIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSIp.setStatus('current')
if mibBuilder.loadTexts: alaDoSIp.setDescription('Source IP address from recent suspect packet.')
alaDoSMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSMac.setStatus('current')
if mibBuilder.loadTexts: alaDoSMac.setDescription('Source MAC address from recent suspect packet.')
alaDoSSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSSlot.setStatus('obsolete')
if mibBuilder.loadTexts: alaDoSSlot.setDescription('Slot on which recent suspect packet was received.\n                 This object is deprecated in favor of alaDoSPortIfindex.')
alaDoSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSPort.setStatus('obsolete')
if mibBuilder.loadTexts: alaDoSPort.setDescription('Port on which recent suspect packet was received.\n                 This object is deprecated in favor of alaDoSPortIfindex.')
alaDoSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSStatus.setStatus('current')
if mibBuilder.loadTexts: alaDoSStatus.setDescription('enable/disable DoS attack Detection')
alaDoSChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSChassisId.setStatus('obsolete')
if mibBuilder.loadTexts: alaDoSChassisId.setDescription('Chassis on which recent suspect packet was received.\n                 This object is deprecated in favor of alaDoSPortIfindex.')
alaDoSPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 1, 1, 9), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDoSPortIfindex.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortIfindex.setDescription('Ifindex of port on which suspect packet was received.')
alaDoSPortScanClosePortPenalty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 2), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPortScanClosePortPenalty.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanClosePortPenalty.setDescription('Penalty points added to the total port scan penalty value\n         when a TCP/UDP packet destinated to a closed port is\n         received.')
alaDoSPortScanTcpOpenPortPenalty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPortScanTcpOpenPortPenalty.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanTcpOpenPortPenalty.setDescription('Penalty points added to the total port scan penalty value\n         when a TCP SYN/FIN packet destinated to a open TCP port is\n         received. No difference between legal TCP packet\n         and port scan packet.')
alaDoSPortScanUdpOpenPortPenalty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPortScanUdpOpenPortPenalty.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanUdpOpenPortPenalty.setDescription('Penalty points added to the total port scan penalty value\n         when a UDP packet destinated to a open UDP port is\n         received. No difference between legal UDP packet\n         and port scan packet.')
alaDoSPortScanTotalPenalty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSPortScanTotalPenalty.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanTotalPenalty.setDescription('Total port scan penalty value accumulated at present time')
alaDoSPortScanThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 6), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPortScanThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanThreshold.setDescription('Threshold port scan penalty value. If the total port scan penalty value\n         exceeds this value, a port scan attack is recorded')
alaDoSPortScanDecay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 7), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPortScanDecay.setStatus('current')
if mibBuilder.loadTexts: alaDoSPortScanDecay.setDescription('Decay speed for the total port scan penalty value. The penalty value\n         is reduced by a factor of the decay value every minute')
alaDoSTrapCntl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSTrapCntl.setStatus('current')
if mibBuilder.loadTexts: alaDoSTrapCntl.setDescription("Indicates whether the switch will generate\n         SNMP traps for alaDoSTraps. 'Enabled'\n         results in SNMP traps; 'disabled', no traps are sent.")
alaDoSARPRate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSARPRate.setStatus('current')
if mibBuilder.loadTexts: alaDoSARPRate.setDescription('Rate of ARP Requests, which if exceeded, an ARP Flood\n       attack is detected.')
alaDoSPingRate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSPingRate.setStatus('current')
if mibBuilder.loadTexts: alaDoSPingRate.setDescription('Rate of ICMP Requests, which if exceeded, a Ping Overload\n       attack is detected.')
alaDoSArpPoisonTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 11), )
if mibBuilder.loadTexts: alaDoSArpPoisonTable.setStatus('current')
if mibBuilder.loadTexts: alaDoSArpPoisonTable.setDescription('A list of IP addresses for which periodic ARP Requests are to be generated,\n         and from which if an ARP Packet is received, an ARP Poison Attack is detected.')
alaDoSArpPoisonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaDoSArpPoisonIpAddr"))
if mibBuilder.loadTexts: alaDoSArpPoisonEntry.setStatus('current')
if mibBuilder.loadTexts: alaDoSArpPoisonEntry.setDescription(' An entry in the alaDoSArpPoisonTable.')
alaDoSArpPoisonIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 11, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaDoSArpPoisonIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDoSArpPoisonIpAddr.setDescription('The IP address from which an ARP packet is considered an ARP Poison attack.')
alaDoSArpPoisonDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSArpPoisonDetected.setStatus('current')
if mibBuilder.loadTexts: alaDoSArpPoisonDetected.setDescription('Number of ARP Poison attacks detected.')
alaDoSArpPoisonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDoSArpPoisonRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDoSArpPoisonRowStatus.setDescription('enable/disable ARP Poisoning for this IP')
alaDoSAntiSpoofGlobalCountReset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDoSAntiSpoofGlobalCountReset.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofGlobalCountReset.setDescription('Reset Anti-spoof counter value for each IP/VRRP Interface.')
alaDoSAntiSpoofTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13), )
if mibBuilder.loadTexts: alaDoSAntiSpoofTable.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofTable.setDescription('A list of IP addresses for which Anti Spoofing needs to be configured ')
alaDoSAntiSpoofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofIPAddressType"), (0, "ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofIPAddress"))
if mibBuilder.loadTexts: alaDoSAntiSpoofEntry.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofEntry.setDescription(' An entry in the alaDoSAntiSpoofTable.')
alaDoSAntiSpoofIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: alaDoSAntiSpoofIPAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofIPAddressType.setDescription('The IP address type of the IP address for which spoofing needs to be configured.')
alaDoSAntiSpoofIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDoSAntiSpoofIPAddress.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofIPAddress.setDescription('The IP address for which spoofing needs to be configured.')
alaDoSAntiSpoofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDoSAntiSpoofStatus.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofStatus.setDescription('Enable or disable IP Anti Spoofing for each IP/VRRP Interface.')
alaDoSAntiSpoofMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSAntiSpoofMacAddress.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofMacAddress.setDescription(' MAC address of the attacked IP Address.')
alaDoSAntiSpoofIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSAntiSpoofIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofIfIndex.setDescription('IfIndex of the Interface on which the suspect packet was received.')
alaDoSAntiSpoofVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSAntiSpoofVlan.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofVlan.setDescription('The VLAN to which the interface is bound; 0 if unbound.')
alaDoSAntiSpoofCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDoSAntiSpoofCount.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofCount.setDescription('Total number of attacks eachIP/VRRP Interface address')
alaDoSAntiSpoofCountReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDoSAntiSpoofCountReset.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofCountReset.setDescription('To reset the counter values for each IP/VRRP Interface.')
alaDoSAntiSpoofRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 3, 13, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDoSAntiSpoofRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDoSAntiSpoofRowStatus.setDescription(' The row status of this table entry.')
ipNetToMediaAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4), )
if mibBuilder.loadTexts: ipNetToMediaAugTable.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaAugTable.setDescription(' slot/port expansion to ipNetToMediaTable.')
ipNetToMediaAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1), )
ipNetToMediaEntry.registerAugmentions(("ALCATEL-IND1-IP-MIB", "ipNetToMediaAugEntry"))
ipNetToMediaAugEntry.setIndexNames(*ipNetToMediaEntry.getIndexNames())
if mibBuilder.loadTexts: ipNetToMediaAugEntry.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaAugEntry.setDescription('An entry in ipNetToMediaAugTable.')
ipNetToMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaSlot.setStatus('obsolete')
if mibBuilder.loadTexts: ipNetToMediaSlot.setDescription('Slot associated with address translation. An address translation\n         not associated with a slot/port pair will have ipNetToMediaSlot\n         equal to zero and ipNetToMediaPort equal to zero. An address\n         associated with an Ethernet Management Port (EMP) will have\n         ipNetToMediaSlot equal to zero and ipNetToMediaPort equal to -1.\n         An address associated with a link agg port will have ipNetToMediaSlot\n         equal to zero and ipNetToMediaPort equal to the link agg id.\n         This object is deprecated in favor of ipNetToMediaPortIfindex to\n         specify the port the address translation was learned on.')
ipNetToMediaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaPort.setStatus('obsolete')
if mibBuilder.loadTexts: ipNetToMediaPort.setDescription('Port associated with address translation. An address translation\n         not associated with a slot/port pair will have ipNetToMediaSlot\n         equal to zero and ipNetToMediaPort equal to zero. An address\n         associated with an Ethernet Management Port(EMP) will have\n         ipNetToMediaSlot equal to zero and ipNetToMediaPort equal to -1.\n         An address associated with a link agg port will have ipNetToMediaSlot\n         equal to zero and ipNetToMediaPort equal to the link agg id.\n         This object is deprecated in favor of ipNetToMediaPortIfindex to\n         specify the port the address translation was learned on.')
ipNetToMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaName.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaName.setDescription('Name of the entry.')
ipNetToMediaChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaChassisId.setStatus('obsolete')
if mibBuilder.loadTexts: ipNetToMediaChassisId.setDescription('Chassis Id associated with address translation.\n         This object is deprecated in favor of ipNetToMediaPortIfindex to\n         specify the port the address translation was learned on.')
ipNetToMediaPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNetToMediaPortIfindex.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaPortIfindex.setDescription('Ifindex of the port for this address translation. \n    This object carries different values for address translations on \n    physical ports and virtual ports (SAPs and SDPs)\n    This field should be set to one of the following\n      1. ifIndex of the physical port for translations on Vlan domain (physical port)\n      2. ifIndex of the SAP for the translations on service (VPLS, SPBM & VxLAN) domain SAPs or\n      3. SDP_ID of a SDP for translations on service domain SDPs')
ipNetToMediaSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("sap", 1), ("sBind", 2))).clone('default')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToMediaSubType.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaSubType.setDescription('This object is used for network to media entries learnt on the\n      virtual ports (SAPs & SDPs), the virtual port could be created by\n      SPB-M,VPLS or VxLAN services. this is invalid for the entries\n      learnt on the physical ports and always set to 0 on physical ports')
ipNetToMediaSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNetToMediaSubId.setStatus('current')
if mibBuilder.loadTexts: ipNetToMediaSubId.setDescription('This object is used for the entries learnt on the virtual ports (SAPs & SDPs).\n     This is invalid for the entries lernt on the physical ports and the value\n     will always be set to 0 on physical ports (virtual ports are created by SPB-M,VPLS or \n     VxLAN services). This field should be the EncapId for SAP, and service id for SBIND.\n      \n     If this entry is learnt on a SAP, this object holds  vlan id (1 .. 4096)\n     this entry is leant in SDP, this object holds service id (1 .. 32767)')
alaDoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 0, 1)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSType"), ("ALCATEL-IND1-IP-MIB", "alaDoSDetected"), ("ALCATEL-IND1-IP-MIB", "alaDoSIp"), ("ALCATEL-IND1-IP-MIB", "alaDoSMac"), ("ALCATEL-IND1-IP-MIB", "alaDoSSlot"), ("ALCATEL-IND1-IP-MIB", "alaDoSPort"), ("ALCATEL-IND1-IP-MIB", "alaDoSChassisId"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortIfindex"))
if mibBuilder.loadTexts: alaDoSTrap.setStatus('current')
if mibBuilder.loadTexts: alaDoSTrap.setDescription('The DoS trap indicates that the sending agent\n         has received DoS attack')
trafficEventTrapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 5))
pktDrop = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 0, 2)).setObjects(("ALCATEL-IND1-IP-MIB", "pktDropType"), ("ALCATEL-IND1-IP-MIB", "pktDropIfIndex"), ("ALCATEL-IND1-IP-MIB", "pktDropCount"), ("ALCATEL-IND1-IP-MIB", "pktDropFrag"))
if mibBuilder.loadTexts: pktDrop.setStatus('current')
if mibBuilder.loadTexts: pktDrop.setDescription('The pktDrop trap indicates that the sending agent\n         has dropped certain packets (to blocked IP ports,\n         from spoofed addresses, etc).')
pktDropType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("spoofedIp", 0), ("toBlockedPort", 1), ("rulematchTriggeredPortDisable", 2), ("spoofTriggeredUserPortDisable", 3), ("bpduTriggeredUserPortDisable", 4), ("bgpTriggeredUserPortDisable", 5), ("ospfTriggeredUserPortDisable", 6), ("ripTriggeredUserPortDisable", 7), ("vrrpTriggeredUserPortDisable", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pktDropType.setStatus('current')
if mibBuilder.loadTexts: pktDropType.setDescription('Reason index for why this packet was dropped')
pktDropIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 5, 2), InterfaceIndexOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pktDropIfIndex.setStatus('current')
if mibBuilder.loadTexts: pktDropIfIndex.setDescription('Interface index (if_index) of ingress port of this dropped pkt')
pktDropCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 5, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pktDropCount.setStatus('current')
if mibBuilder.loadTexts: pktDropCount.setDescription('The # of pkt drops (within a configured time interval)\nof this pktDropType that triggered this particular trap instance')
pktDropFrag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pktDropFrag.setStatus('current')
if mibBuilder.loadTexts: pktDropFrag.setDescription('<= 512 bytes of the dropped pkt (dsmac[12], tag[4], etype[2], payload[..512] (0 if DropCount only)')
ipCidrRouteAugTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 6), )
if mibBuilder.loadTexts: ipCidrRouteAugTable.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteAugTable.setDescription('NI/EMP flag expansion to ipCidrRouteTable.')
ipCidrRouteAugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 6, 1), )
ipCidrRouteEntry.registerAugmentions(("ALCATEL-IND1-IP-MIB", "ipCidrRouteAugEntry"))
ipCidrRouteAugEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: ipCidrRouteAugEntry.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteAugEntry.setDescription('An entry in ipCidrRouteAugTable.')
ipCidrRouteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("niroute", 1), ("emproute", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCidrRouteScope.setStatus('current')
if mibBuilder.loadTexts: ipCidrRouteScope.setDescription('Indicate the route is NI route or EMP route')
alaIcmpCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7), )
if mibBuilder.loadTexts: alaIcmpCtrlTable.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlTable.setDescription('Table to control ICMP message generation from the switch.')
alaIcmpCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIcmpCtrlType"), (0, "ALCATEL-IND1-IP-MIB", "alaIcmpCtrlCode"))
if mibBuilder.loadTexts: alaIcmpCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlEntry.setDescription('An entry in the alaIcmpCtrlTable')
alaIcmpCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIcmpCtrlType.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlType.setDescription('ICMP message type')
alaIcmpCtrlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIcmpCtrlCode.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlCode.setDescription('ICMP message code')
alaIcmpCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIcmpCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlStatus.setDescription('enable/disable ICMP message generation')
alaIcmpCtrlPktGap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIcmpCtrlPktGap.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlPktGap.setDescription('Minimum packet gap in microseconds between the two successive\n         ICMP messages with the same type and code')
alaIpRouteSumTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 9), )
if mibBuilder.loadTexts: alaIpRouteSumTable.setStatus('current')
if mibBuilder.loadTexts: alaIpRouteSumTable.setDescription('IP route summary table')
alaIpRouteSumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpRouteProtocol"))
if mibBuilder.loadTexts: alaIpRouteSumEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpRouteSumEntry.setDescription('An entry in the alaIpRouteSumTable')
alaIpRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("total", 1), ("local", 2), ("netmgmt", 3), ("rip", 4), ("isis", 5), ("ospf", 6), ("bgp", 7), ("other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpRouteProtocol.setStatus('current')
if mibBuilder.loadTexts: alaIpRouteProtocol.setDescription('IP route protocol')
alaIpRouteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpRouteCount.setStatus('current')
if mibBuilder.loadTexts: alaIpRouteCount.setDescription('IP route count')
alaIcmpCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 10))
alaIcmpAllMsgStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIcmpAllMsgStatus.setStatus('current')
if mibBuilder.loadTexts: alaIcmpAllMsgStatus.setDescription('Enable/disable all ICMP messages on the switch. On set operation,\n         only enabled(1)/disabled(2) is allowed. Other(3) will be returned\n         in get operation, if not all ICMP messages are enabled and not all\n         ICMP messages are disabled.')
alaIpArpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11), )
if mibBuilder.loadTexts: alaIpArpFilterTable.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterTable.setDescription('A list of IP addresses for ARP to ignore.')
alaIpArpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpArpFilterIpAddr"), (0, "ALCATEL-IND1-IP-MIB", "alaIpArpFilterIpMask"), (0, "ALCATEL-IND1-IP-MIB", "alaIpArpFilterVlan"), (0, "ALCATEL-IND1-IP-MIB", "alaIpArpFilterType"))
if mibBuilder.loadTexts: alaIpArpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterEntry.setDescription('An entry in alaIpArpFilterTable.')
alaIpArpFilterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpArpFilterIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterIpAddr.setDescription('The IP address to block ARP responses.')
alaIpArpFilterIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIpArpFilterIpMask.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterIpMask.setDescription('The IP address mask to block ARP responses.')
alaIpArpFilterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaIpArpFilterVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterVlan.setDescription('Vlan for filter. 0 disablesP')
alaIpArpFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("target", 1), ("sender", 2))).clone('target'))
if mibBuilder.loadTexts: alaIpArpFilterType.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterType.setDescription('This indicates which parameter of the ARP packet to filter on.')
alaIpArpFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("block", 2))).clone('allow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpArpFilterMode.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterMode.setDescription('allow/block ARP for this filter entry')
alaIpArpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpArpFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterRowStatus.setDescription('enable/disable ARP block for this IP')
alaIpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 12), )
if mibBuilder.loadTexts: alaIpServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceTable.setDescription('Table to enable/disable IP services on switch')
alaIpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpServiceType"))
if mibBuilder.loadTexts: alaIpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceEntry.setDescription('An entry in alaIpServiceTable')
alaIpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ftp", 1), ("ssh", 2), ("telnet", 3), ("http", 4), ("ntp", 5), ("snmp", 6), ("https", 7), ("radius", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpServiceType.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceType.setDescription('IP service type')
alaIpServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpServicePort.setStatus('current')
if mibBuilder.loadTexts: alaIpServicePort.setDescription("IP service port. To modify the default port, use corresponding MIB attribute below:\n         - ftp : alaIpFtpPort from alaIpFtpConfig in ALCATEL-IND1-IP-MIB.mib\n         - ssh : alaIpSshPort from alaIpSshConfig in ALCATEL-IND1-IP-MIB.mib\n         - telnet : alaIpTelnetPort from alaIpTelnetConfig in ALCATEL-IND1-IP-MIB.mib\n         - http : alaIND1WebMgtHttpPort from alcatelIND1WebMgtMIBObjects in ALCATEL-IND1-WEBMGT-MIB.mib\n         - ntp : can't be modified\n         - snmp : can't be modified\n         - https : alaIND1WebMgtHttpsPort from alcatelIND1WebMgtMIBObjects in ALCATEL-IND1-WEBMGT-MIB.mib\n         - radius : can't be modified")
alaIpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("other", 3))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceStatus.setDescription('When read, returns enabled if service and port are enabled, and returns disabled otherwise.\n         When written, enables/disables service and port \n         (although snmp is never fully shut down; if disabled in some VRF, it will run in the default VRF).\n         Note that that http, https, and ntp here are read-only; use alternatives described below to enable/disable service.\n         If you want to block packet and shut down service, use corresponding MIB attribute below:\n         - ftp : alaIpFtpAdminStatus from alaIpFtpConfig in ALCATEL-IND1-IP-MIB.mib\n         - ssh : alaIpSshAdminStatus from alaIpSshConfig in ALCATEL-IND1-IP-MIB.mib\n         - telnet : alaIpTelnetAdminStatus from alaIpTelnetConfig in ALCATEL-IND1-IP-MIB.mib\n         - http enable : alaIND1WebMgtAdminStatus from alcatelIND1WebMgtMIBObjects in ALCATEL-IND1-WEBMGT-MIB.mib\n         - http disable : alaIND1WebMgtServerStatus from alcatelIND1WebMgtMIBObjects in ALCATEL-IND1-WEBMGT-MIB.mib\n         - ntp : alaIpNtpVrfName (in this mib), and alaNtpEnable and alaNtpBroadcastEnable from alaNtpConfig in ALCATEL-IND1-NTP-MIB.mib\n         - snmp : [no alternative -- use this MIB object]\n         - https : same as http\n         - radius: [no alternative -- use this MIB object]')
alaIpPortServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 13), )
if mibBuilder.loadTexts: alaIpPortServiceTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpPortServiceTable.setDescription('Table to enable/disable IP services by port on switch.\n         This table has been deprecated in favor of the\n         alaIpServiceTable.')
alaIpPortServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpPortServicePort"))
if mibBuilder.loadTexts: alaIpPortServiceEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpPortServiceEntry.setDescription('An entry in alaIpPortServiceTable')
alaIpPortServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpPortServicePort.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpPortServicePort.setDescription('IP service port')
alaIpPortServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpPortServiceStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaIpPortServiceStatus.setDescription('enable/disable IP service')
alaIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14), )
if mibBuilder.loadTexts: alaIpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTable.setDescription('A list of IP interfaces in this switch.')
alaIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaIpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceEntry.setDescription('An IP interface entry.')
alaIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceName.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceName.setDescription('IP interface name.')
alaIpInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceAddress.setDescription('IP address for this interface.')
alaIpInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceMask.setDescription('IP mask for this IP interface.')
alaIpInterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceAdminState.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceAdminState.setDescription('Administrative state of the IP interface, independent of the\n                 state of the underlying device.')
alaIpInterfaceDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unbound", 0), ("vlan", 1), ("emp", 2), ("loopback", 3), ("greTunnel", 4), ("ipipTunnel", 5), ("service", 6))).clone('unbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDeviceType.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDeviceType.setDescription('The type of device to which the IP interface is bound.')
alaIpInterfaceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceVlanID.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceVlanID.setDescription('The VLAN to which the interface is bound; 0 if unbound.')
alaIpInterfaceIpForward = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceIpForward.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceIpForward.setDescription('IP interface forwarding status(disabled = ip host only).')
alaIpInterfaceEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet2", 1), ("snap", 2), ("service", 3))).clone('ethernet2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceEncap.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceEncap.setDescription('IP router port encapsulation.')
alaIpInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceMtu.setDescription("IP interface's maximum transmission unit (MTU).")
alaIpInterfaceLocalProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceLocalProxyArp.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceLocalProxyArp.setDescription('Local Proxy ARP status on this interface.')
alaIpInterfacePrimCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfacePrimCfg.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfacePrimCfg.setDescription('Primary interface configuration status for\n                 this interface.  If set to true, this interface\n                 will be used as the default interface for the\n                 VLAN on which it resides when possible.')
alaIpInterfaceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceOperState.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceOperState.setDescription('Operational state of the IP interface.')
alaIpInterfaceOperReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("interfaceUp", 0), ("adminDown", 1), ("unbound", 2), ("deviceDown", 3), ("noSuchDevice", 4), ("noRouterMac", 5), ("tunnelSrcInvalid", 6), ("tunnelDstUnreachable", 7), ("noVipAddress", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceOperReason.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceOperReason.setDescription('The reason the operational state is down.')
alaIpInterfaceRouterMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceRouterMac.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceRouterMac.setDescription('The router MAC for this IP interface.')
alaIpInterfaceBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceBcastAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceBcastAddr.setDescription('Broadcast address for this IP interface.')
alaIpInterfacePrimAct = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfacePrimAct.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfacePrimAct.setDescription('Actual primary interface status for this interface.')
alaIpInterfaceRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceRemoteAddr.setDescription('Peer address for this IP interface.')
alaIpInterfaceTunnelSrcAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 18), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceTunnelSrcAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTunnelSrcAddressType.setDescription('The address type of the tunnel source network address.\n                 Only type InetAddressIPv4 (1) is supported.')
alaIpInterfaceTunnelSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 19), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceTunnelSrc.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTunnelSrc.setDescription('Source network address for tunnel.')
alaIpInterfaceTunnelDstAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 20), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceTunnelDstAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTunnelDstAddressType.setDescription('The address type of the tunnel destination network address.\n                 Only type InetAddressIPv4 (1) is supported.')
alaIpInterfaceTunnelDst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 21), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceTunnelDst.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTunnelDst.setDescription('Destination network address for tunnel.')
alaIpInterfaceVipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 22), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceVipAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceVipAddress.setDescription('Virtual IP address for this interface when part of a\n                 multi-chass configuration.\n                 This object is deprecated and can no longer be set.')
alaIpInterfaceDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discovery", 1), ("active", 2), ("timeout", 3))).clone('discovery')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDhcpStatus.setDescription('DHCP status of the DHCP Client IP interface')
alaIpInterfaceDhcpIpRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDhcpIpRelease.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDhcpIpRelease.setDescription('To do an IP address release if dynamically assigned address')
alaIpInterfaceDhcpIpRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDhcpIpRenew.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDhcpIpRenew.setDescription('To do an IP address renew if dynamically assigned address')
alaIpInterfaceDhcpOption60String = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDhcpOption60String.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDhcpOption60String.setDescription('The value of option-60 filed that should be inserted in\n               DHCP discover/request packet if configured.')
alaIpInterfaceChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceChassisId.setStatus('obsolete')
if mibBuilder.loadTexts: alaIpInterfaceChassisId.setDescription('ChassisId associated with the physical port bound \n                directly with the IP Interface. An Ip interface not bound\n                directly with a physical port will have alaIpInterfaceChassisId\n                equal to zero.\n                This object is deprecated in favor of\n                ipAlaIpInterfacePortIfindex.')
alaIpInterfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceSlot.setStatus('obsolete')
if mibBuilder.loadTexts: alaIpInterfaceSlot.setDescription('Slot associated with the physical port bound directly \n                with the IP Interface. An Ip interface not bound directly \n                with a physical port will have alaIpInterfaceSlot equal to zero.\n                This object is deprecated in favor of\n                ipAlaIpInterfacePortIfindex.')
alaIpInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfacePort.setStatus('obsolete')
if mibBuilder.loadTexts: alaIpInterfacePort.setDescription('Port associated with the physical port bound directly with the \n                IP Interface. An Ip interface not bound directly with a physical \n                port will have alaIpInterfacePort equal to zero.\n                This object is deprecated in favor of\n                ipAlaIpInterfacePortIfindex.')
alaIpInterfaceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unbound", 0), ("untagged", 1), ("tagged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceTag.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceTag.setDescription('If a physical-port or linkagg is directly bound to the IP Interface, then\n                alaIpInterfaceTag indicates whether it is tagged or untagged. 1 for untagged,\n                and 2 for tagged. If neither a linkagg nor a physical port is bound directly,\n                alaIpInterfaceTag will be equal to 0')
alaIpInterfaceArpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceArpCount.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceArpCount.setDescription('The number of ARPs associated with an interface.')
alaIpInterfaceArpNiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceArpNiChassis.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceArpNiChassis.setDescription('The distributed ARP designated NI chassis ID.')
alaIpInterfaceArpNiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceArpNiSlot.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceArpNiSlot.setDescription('The distributed ARP designated NI slot.')
alaIpInterfaceArpNiDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpInterfaceArpNiDevice.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceArpNiDevice.setDescription('The distributed ARP designated NI device.')
alaIpInterfacePortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 35), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfacePortIfindex.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfacePortIfindex.setDescription('Specifies the physical port bound directly with the IP\n                Interface.  An IP interface not bound directly with a physical\n                port will have alaIpInterfacePortIfindex equal to zero.  Note\n                this object replaces alaIpInterfaceChassisId, alaIpInterfaceSlot\n                and alaIpInterfacePort.')
alaIpInterfaceDhcpVsiAcceptFilterString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceDhcpVsiAcceptFilterString.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceDhcpVsiAcceptFilterString.setDescription('The string value to prefer an OV-Server.\n               On the basis of this value DHCP-Ack will be accepted.')
alaIpInterfaceServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 14, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpInterfaceServiceID.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceServiceID.setDescription('The service to which the L3 VPN interface is bound; 0 if unbound.')
alaIpItfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 15), )
if mibBuilder.loadTexts: alaIpItfConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaIpItfConfigTable.setDescription('Table used to configure a new IP interface with an IP address.')
alaIpItfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpItfConfigName"))
if mibBuilder.loadTexts: alaIpItfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpItfConfigEntry.setDescription('An IP interface entry.')
alaIpItfConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpItfConfigName.setStatus('current')
if mibBuilder.loadTexts: alaIpItfConfigName.setDescription('The name for this interface.')
alaIpItfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 15, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpItfConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpItfConfigIfIndex.setDescription('The ifIndex for this interface.  It is only a valid\n                 ifIndex value when the value for alaIpInterfaceRowStatus\n                 is active.')
alaIpItfConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpItfConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpItfConfigRowStatus.setDescription('This object is used to create a new IP interface or\n                 delete an existing interface.  It should be set\n                 to createAndGo to create an entry, or destroy to delete\n                 an existing entry.\n                 A valid ifIndex value for an IP interface is allocated\n                 when a row is created in this table.  The successful\n                 allocation of the ifIndex value is noted by the state\n                 of the new row becoming active.')
alaIpFtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 16))
alaIpFtpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpFtpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpFtpAdminStatus.setDescription('Indicates whether the FTP service is enabled on the switch.')
alaIpFtpPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(21, 21), ValueRangeConstraint(1024, 65535), )).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpFtpPort.setStatus('current')
if mibBuilder.loadTexts: alaIpFtpPort.setDescription("The user configurable TCP port for switch's\n                 ftp access. Default is 21.")
alaIpSshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17))
alaIpSshAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpSshAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpSshAdminStatus.setDescription('Indicates whether the SSH service is enabled on the switch.')
alaIpSshPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(22, 22), ValueRangeConstraint(1024, 65535), )).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpSshPort.setStatus('current')
if mibBuilder.loadTexts: alaIpSshPort.setDescription("The user configurable TCP port for switch's\n                 ssh access. Default is 22.")
alaIpSshPubKeyEnforceAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpSshPubKeyEnforceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpSshPubKeyEnforceAdminStatus.setDescription('Indicates whether the Public Key Authentication is enforced\n\t\t  on the switch.')
alaIpSshStrongCiphersAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpSshStrongCiphersAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpSshStrongCiphersAdminStatus.setDescription('Indicates whether the ssh Strong-Ciphers are enforced\n        on the switch.')
alaIpSshStrongHmacsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpSshStrongHmacsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpSshStrongHmacsAdminStatus.setDescription('Indicates whether the ssh Strong-Hmacs are enforced\n        on the switch.')
alaIpTelnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 18))
alaIpTelnetAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpTelnetAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpTelnetAdminStatus.setDescription('Indicates whether the TELNET service is enabled on the switch.')
alaIpTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(23, 23), ValueRangeConstraint(1024, 65535), )).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpTelnetPort.setStatus('current')
if mibBuilder.loadTexts: alaIpTelnetPort.setDescription("The user configurable TCP port for switch's\n                 telnet access. Default is 23.")
alaIpDhcpHostIdentifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19))
alaIpDhcpServerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpServerAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpServerAddressType.setDescription('DHCP Server IP address Type. Currently ipv4(1) is supported.')
alaIpDhcpServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpServerAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpServerAddress.setDescription('DHCP Server IP address.')
alaIpDhcpRouterAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpRouterAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpRouterAddressType.setDescription('DHCP Router IP address Type. Currently ipv4(1) is supported.')
alaIpDhcpRouterAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpRouterAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpRouterAddress.setDescription('DHCP Router IP address.')
alaIpDhcpHostName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpHostName.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpHostName.setDescription('DHCP Server assigned host name.')
alaIpDhcpClientLeaseObtained = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpClientLeaseObtained.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpClientLeaseObtained.setDescription('DHCP IP address lease obtained time. If no DHCP client exists\n             this object contains a zero value')
alaIpDhcpClientLeaseExpires = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 19, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpDhcpClientLeaseExpires.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpClientLeaseExpires.setDescription('DHCP IP address lease expiry time.If no DHCP client exists\n             this object contains a zero value')
alaIpNtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 20))
alaIpNtpVrfName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 20, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpNtpVrfName.setStatus('current')
if mibBuilder.loadTexts: alaIpNtpVrfName.setDescription('Name of the VRF used by the NTP daemon.')
alaIpNetToMediaDpaTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24), )
if mibBuilder.loadTexts: alaIpNetToMediaDpaTable.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaTable.setDescription('A table of dynamic proxy ARPs for the router IPs')
alaIpNetToMediaDpaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpaVlan"))
if mibBuilder.loadTexts: alaIpNetToMediaDpaEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaEntry.setDescription('An entry in alaIpToMediaDpaTable.')
alaIpNetToMediaDpaVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaIpNetToMediaDpaVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaVlan.setDescription('Vlan to which the router IP belongs to.')
alaIpNetToMediaDpaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaDpaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaPhysAddress.setDescription("The media-dependent `physical' address of the head end router.")
alaIpNetToMediaDpaIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaDpaIpType.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaIpType.setDescription('Router IP address type(IPV4) of the VLAN.')
alaIpNetToMediaDpaIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaDpaIp.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaIp.setDescription('Router IP address of the VLAN')
alaIpNetToMediaDpaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 24, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpNetToMediaDpaIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpaIfIndex.setDescription('The IfIndex subindex identifying this instance.It is the\n            the interface where the RouterIp was learnt')
alcatelIND1IPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2))
alcatelIND1IPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 1))
alcatelIND1IPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2))
alaIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpConfigGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaGroup"), ("ALCATEL-IND1-IP-MIB", "alaDoSGroup"), ("ALCATEL-IND1-IP-MIB", "alaPortScanGroup"), ("ALCATEL-IND1-IP-MIB", "alaArpPingGroup"), ("ALCATEL-IND1-IP-MIB", "alaArpPoisonGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaAugGroup"), ("ALCATEL-IND1-IP-MIB", "alaPktDropGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpCidrAugGroup"), ("ALCATEL-IND1-IP-MIB", "alaIcmpCtrlGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpRouteSumGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpArpFilterGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpServiceTypeGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpPortServiceTypeGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpItfGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpNotificationGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpHostIdentifierGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpServiceSourceIpGroup"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpGroup"), ("ALCATEL-IND1-IP-MIB", "alaAntiSpoofGlobalGroup"), ("ALCATEL-IND1-IP-MIB", "alaAntiSpoofGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpCompliance = alaIpCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIpCompliance.setDescription('The compliance statement for switches with Alcatel IP stack and\n            implementing ALCATEL-IND1-IP-MIB.')
alaIpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpClearArpCache"), ("ALCATEL-IND1-IP-MIB", "alaIpDirectedBroadcast"), ("ALCATEL-IND1-IP-MIB", "alaIpClearArpFilter"), ("ALCATEL-IND1-IP-MIB", "alaIpDistributedArp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpConfigGroup = alaIpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpConfigGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel IP stack.')
alaIpNetToMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaPhysAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaProxy"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaVrrp"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaAuth"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaName"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaStaticIntfRt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpNetToMediaGroup = alaIpNetToMediaGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel IP Net to Media stack.')
alaDoSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSType"), ("ALCATEL-IND1-IP-MIB", "alaDoSDetected"), ("ALCATEL-IND1-IP-MIB", "alaDoSIp"), ("ALCATEL-IND1-IP-MIB", "alaDoSMac"), ("ALCATEL-IND1-IP-MIB", "alaDoSSlot"), ("ALCATEL-IND1-IP-MIB", "alaDoSPort"), ("ALCATEL-IND1-IP-MIB", "alaDoSStatus"), ("ALCATEL-IND1-IP-MIB", "alaDoSChassisId"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortIfindex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDoSGroup = alaDoSGroup.setStatus('current')
if mibBuilder.loadTexts: alaDoSGroup.setDescription('A collection of objects to support Notification for DoS attack.')
alaPortScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSPortScanClosePortPenalty"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortScanTcpOpenPortPenalty"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortScanUdpOpenPortPenalty"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortScanTotalPenalty"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortScanThreshold"), ("ALCATEL-IND1-IP-MIB", "alaDoSPortScanDecay"), ("ALCATEL-IND1-IP-MIB", "alaDoSTrapCntl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPortScanGroup = alaPortScanGroup.setStatus('current')
if mibBuilder.loadTexts: alaPortScanGroup.setDescription('A collection of objects to support Notification for Port Scan DoS attack.')
alaArpPingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSARPRate"), ("ALCATEL-IND1-IP-MIB", "alaDoSPingRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaArpPingGroup = alaArpPingGroup.setStatus('current')
if mibBuilder.loadTexts: alaArpPingGroup.setDescription('A collection of objects to support Notification for Arp or Ping DoS attack.')
alaArpPoisonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSArpPoisonDetected"), ("ALCATEL-IND1-IP-MIB", "alaDoSArpPoisonRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaArpPoisonGroup = alaArpPoisonGroup.setStatus('current')
if mibBuilder.loadTexts: alaArpPoisonGroup.setDescription('A collection of objects to support DoS Arp Poison Table.')
alaIpNetToMediaAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-IP-MIB", "ipNetToMediaSlot"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaPort"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaName"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaChassisId"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaPortIfindex"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaSubId"), ("ALCATEL-IND1-IP-MIB", "ipNetToMediaSubType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpNetToMediaAugGroup = alaIpNetToMediaAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaAugGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel IP Net to Media Augmented stack.')
alaPktDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-IP-MIB", "pktDropType"), ("ALCATEL-IND1-IP-MIB", "pktDropIfIndex"), ("ALCATEL-IND1-IP-MIB", "pktDropCount"), ("ALCATEL-IND1-IP-MIB", "pktDropFrag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPktDropGroup = alaPktDropGroup.setStatus('current')
if mibBuilder.loadTexts: alaPktDropGroup.setDescription('A collection of objects to support Packet Drop Notification objects.')
alaIpCidrAugGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-IP-MIB", "ipCidrRouteScope"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpCidrAugGroup = alaIpCidrAugGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpCidrAugGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel IP Cidr Augmented stack.')
alaIcmpCtrlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 10)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIcmpCtrlType"), ("ALCATEL-IND1-IP-MIB", "alaIcmpCtrlCode"), ("ALCATEL-IND1-IP-MIB", "alaIcmpCtrlStatus"), ("ALCATEL-IND1-IP-MIB", "alaIcmpCtrlPktGap"), ("ALCATEL-IND1-IP-MIB", "alaIcmpAllMsgStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIcmpCtrlGroup = alaIcmpCtrlGroup.setStatus('current')
if mibBuilder.loadTexts: alaIcmpCtrlGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Icmp Ctrl stack.')
alaIpRouteSumGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 11)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpRouteProtocol"), ("ALCATEL-IND1-IP-MIB", "alaIpRouteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpRouteSumGroup = alaIpRouteSumGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpRouteSumGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Ip Route Sum stack.')
alaIpArpFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 12)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpArpFilterMode"), ("ALCATEL-IND1-IP-MIB", "alaIpArpFilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpArpFilterGroup = alaIpArpFilterGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpArpFilterGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Ip Arp Filter stack.')
alaIpServiceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 13)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpServiceType"), ("ALCATEL-IND1-IP-MIB", "alaIpServicePort"), ("ALCATEL-IND1-IP-MIB", "alaIpServiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpServiceTypeGroup = alaIpServiceTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceTypeGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Ip Service Type  stack.')
alaIpPortServiceTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 14)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpPortServicePort"), ("ALCATEL-IND1-IP-MIB", "alaIpPortServiceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpPortServiceTypeGroup = alaIpPortServiceTypeGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpPortServiceTypeGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Ip Port Service Type  stack.')
alaIpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 15)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpInterfaceName"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceMask"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceAdminState"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDeviceType"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceVlanID"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceIpForward"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceEncap"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceMtu"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceLocalProxyArp"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfacePrimCfg"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceOperState"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceOperReason"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceRouterMac"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceBcastAddr"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfacePrimAct"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceRemoteAddr"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceTunnelSrcAddressType"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceTunnelSrc"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceTunnelDstAddressType"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceTunnelDst"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceVipAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDhcpStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDhcpIpRelease"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDhcpIpRenew"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDhcpOption60String"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceChassisId"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceSlot"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfacePort"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceTag"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceArpCount"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceArpNiChassis"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceArpNiSlot"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceArpNiDevice"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfacePortIfindex"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceDhcpVsiAcceptFilterString"), ("ALCATEL-IND1-IP-MIB", "alaIpInterfaceServiceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpInterfaceGroup = alaIpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpInterfaceGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel IP Interface stack.')
alaIpItfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 16)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpItfConfigName"), ("ALCATEL-IND1-IP-MIB", "alaIpItfConfigIfIndex"), ("ALCATEL-IND1-IP-MIB", "alaIpItfConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpItfGroup = alaIpItfGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpItfGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Ip Itf stack.')
alaIpFtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 17)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpFtpAdminStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpFtpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpFtpGroup = alaIpFtpGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpFtpGroup.setDescription('A collection of objects to support management of ftp configuration.')
alaIpSshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 18)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpSshAdminStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpSshPort"), ("ALCATEL-IND1-IP-MIB", "alaIpSshPubKeyEnforceAdminStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpSshStrongCiphersAdminStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpSshStrongHmacsAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpSshGroup = alaIpSshGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpSshGroup.setDescription('A collection of objects to support management of ssh configuration.')
alaIpTelnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 19)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpTelnetAdminStatus"), ("ALCATEL-IND1-IP-MIB", "alaIpTelnetPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpTelnetGroup = alaIpTelnetGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpTelnetGroup.setDescription('A collection of objects to support management of telnet configuration.')
alaIpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 20)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSTrap"), ("ALCATEL-IND1-IP-MIB", "pktDrop"), ("ALCATEL-IND1-IP-MIB", "alaDistArpItfChange"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpNotificationGroup = alaIpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpNotificationGroup.setDescription('Collection of notifications for IP MIB.')
alaIpDhcpHostIdentifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 21)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpDhcpServerAddressType"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpServerAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpRouterAddressType"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpRouterAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpHostName"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpClientLeaseObtained"), ("ALCATEL-IND1-IP-MIB", "alaIpDhcpClientLeaseExpires"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpDhcpHostIdentifierGroup = alaIpDhcpHostIdentifierGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpDhcpHostIdentifierGroup.setDescription('A collection of objects to support display of\n            DHCP Client details.')
alaIpNtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 22)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpNtpVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpNtpGroup = alaIpNtpGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpNtpGroup.setDescription('A collection of objects to support management of ntp configuration.')
alaIpNetToMediaDpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 26)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpaPhysAddress"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpaIpType"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpaIp"), ("ALCATEL-IND1-IP-MIB", "alaIpNetToMediaDpaIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpNetToMediaDpGroup = alaIpNetToMediaDpGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpNetToMediaDpGroup.setDescription('A collection of objects to support display of\n              ARPs learnt for dynamic router IPs.')
alaAntiSpoofGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 27)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofGlobalCountReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAntiSpoofGlobalGroup = alaAntiSpoofGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaAntiSpoofGlobalGroup.setDescription('A collection of objects to support management of anti-spoof global level.')
alaAntiSpoofGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 28)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofStatus"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofMacAddress"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofIfIndex"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofVlan"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofCount"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofCountReset"), ("ALCATEL-IND1-IP-MIB", "alaDoSAntiSpoofRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAntiSpoofGroup = alaAntiSpoofGroup.setStatus('current')
if mibBuilder.loadTexts: alaAntiSpoofGroup.setDescription('A collection of objects to support management of anti-spoof')
alaDistArpNiTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21), )
if mibBuilder.loadTexts: alaDistArpNiTable.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiTable.setDescription('A table of distributed ARP slots.')
alaDistArpNiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiChassis"), (0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiSlot"), (0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiDevice"))
if mibBuilder.loadTexts: alaDistArpNiEntry.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiEntry.setDescription('An entry in alaDistArpNiTable.')
alaDistArpNiChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpNiChassis.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiChassis.setDescription('Chassis number of the NI.')
alaDistArpNiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpNiSlot.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiSlot.setDescription('Slot number of the NI.')
alaDistArpNiDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpNiDevice.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiDevice.setDescription('Device number of the NI.')
alaDistArpNiCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpNiCount.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiCount.setDescription('Count of the active hardware ARPs in hardware on the NI.')
alaDistArpNiMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpNiMaxCount.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiMaxCount.setDescription('Count of the maximum number of hardware ARPs on the NI.')
alaDistArpNiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 23)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDistArpNiChassis"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiSlot"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiDevice"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiMaxCount"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDistArpNiGroup = alaDistArpNiGroup.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiGroup.setDescription('A collection of objects to support management of Distributed ARP NIs')
alaIpServiceSourceIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 24)).setObjects(("ALCATEL-IND1-IP-MIB", "alaIpServiceSourceIpName"), ("ALCATEL-IND1-IP-MIB", "alaIpServiceSourceIpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpServiceSourceIpGroup = alaIpServiceSourceIpGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpGroup.setDescription('A collection of objects to support management of configuration\n            parameters of Alcatel Source Ip addresses')
alaIpServiceSourceIpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 22), )
if mibBuilder.loadTexts: alaIpServiceSourceIpTable.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpTable.setDescription('A table of service source IP interfaces for various applications')
alaIpServiceSourceIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaIpServiceSourceIpAppIndex"))
if mibBuilder.loadTexts: alaIpServiceSourceIpEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpEntry.setDescription('An entry in alaIpServiceSourceIpTable.')
alaIpServiceSourceIpAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 22, 1, 1), AlaIpServiceSourceIpAppIndex())
if mibBuilder.loadTexts: alaIpServiceSourceIpAppIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpAppIndex.setDescription('Service Source IP index for a specified application.\n         When setting values for the all(1) row, additional\n         application rows are affected as follows:\n         create - Set alaIpServiceSourceIpRowStatus to createAndGo(4).\n                  Creates a matching row for each application\n                  which does not have an instance.\n         modify - Set alaIpServiceSourceIpName for active row.\n                  Modifies all application rows for which\n                  alaIpServiceSourceIpName matches the all(1)\n                  row being modified, creates a row for each\n                  application which does not have an instance.\n         delete - Set alaIpServiceSourceIpRowStatus to destroy(6).\n                  Deletes the all(1) row and any other application\n                  rows for which alaIpServiceSourceIpName matches\n                  the all(1) row.')
alaIpServiceSourceIpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 22, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpServiceSourceIpName.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpName.setDescription('Service Source IP interface name for the specified application')
alaIpServiceSourceIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpServiceSourceIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpServiceSourceIpRowStatus.setDescription('Row Status for the specified entry')
alaDistArpItfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 23), )
if mibBuilder.loadTexts: alaDistArpItfTable.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfTable.setDescription('A table of distributed ARP slots.')
alaDistArpItfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiChassis"), (0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiSlot"), (0, "ALCATEL-IND1-IP-MIB", "alaDistArpNiDevice"), (0, "ALCATEL-IND1-IP-MIB", "alaDistArpItfIfIndex"))
if mibBuilder.loadTexts: alaDistArpItfEntry.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfEntry.setDescription('An entry in alaDistArpItfTable.')
alaDistArpItfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 23, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpItfIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfIfIndex.setDescription('IP ifindex of the interface for the ARP stats')
alaDistArpItfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 1, 23, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDistArpItfCount.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfCount.setDescription('Count of the active hardware ARPs on the NI for the interface.')
alaDistArpItfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 2, 2, 25)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDistArpItfIfIndex"), ("ALCATEL-IND1-IP-MIB", "alaDistArpItfCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDistArpItfGroup = alaDistArpItfGroup.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfGroup.setDescription('A collection of objects to support management of Distributed ARP Interfacess')
alaDistArpItfChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 0, 3)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDistArpItfIfIndex"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiChassis"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiSlot"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiDevice"))
if mibBuilder.loadTexts: alaDistArpItfChange.setStatus('current')
if mibBuilder.loadTexts: alaDistArpItfChange.setDescription('The interface has been reasigned to a new designated NI.')
alaDistArpNiThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 23, 1, 0, 4)).setObjects(("ALCATEL-IND1-IP-MIB", "alaDistArpNiChassis"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiSlot"), ("ALCATEL-IND1-IP-MIB", "alaDistArpNiDevice"))
if mibBuilder.loadTexts: alaDistArpNiThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDistArpNiThreshold.setDescription('The number of ARPs in hardware has reached the \n         reassignment threshold.')
mibBuilder.exportSymbols("ALCATEL-IND1-IP-MIB", alaIpNetToMediaProxy=alaIpNetToMediaProxy, alaIpInterfacePortIfindex=alaIpInterfacePortIfindex, alaDoSGroup=alaDoSGroup, ipNetToMediaName=ipNetToMediaName, alaIpNetToMediaDpGroup=alaIpNetToMediaDpGroup, alaAntiSpoofGroup=alaAntiSpoofGroup, alaIpNetToMediaStaticIntfRt=alaIpNetToMediaStaticIntfRt, alaDistArpNiTable=alaDistArpNiTable, pktDropFrag=pktDropFrag, alaDoSArpPoisonEntry=alaDoSArpPoisonEntry, alaIpInterfaceEntry=alaIpInterfaceEntry, alaDoSMac=alaDoSMac, alaIpNetToMediaDpaIp=alaIpNetToMediaDpaIp, ipNetToMediaPortIfindex=ipNetToMediaPortIfindex, alaIpSshStrongHmacsAdminStatus=alaIpSshStrongHmacsAdminStatus, alaArpPoisonGroup=alaArpPoisonGroup, alaIpInterfaceLocalProxyArp=alaIpInterfaceLocalProxyArp, alaDoSAntiSpoofCountReset=alaDoSAntiSpoofCountReset, ipCidrRouteScope=ipCidrRouteScope, PYSNMP_MODULE_ID=alcatelIND1IPMIB, alcatelIND1IPMIBObjects=alcatelIND1IPMIBObjects, ipNetToMediaSubType=ipNetToMediaSubType, alaIpInterfaceSlot=alaIpInterfaceSlot, alaIpServiceType=alaIpServiceType, trafficEventTrapObjs=trafficEventTrapObjs, alaDoSAntiSpoofVlan=alaDoSAntiSpoofVlan, alaIpRouteSumGroup=alaIpRouteSumGroup, alaIpInterfacePrimCfg=alaIpInterfacePrimCfg, alaIpInterfaceBcastAddr=alaIpInterfaceBcastAddr, alaIpConfig=alaIpConfig, alaIpClearArpFilter=alaIpClearArpFilter, ipNetToMediaSubId=ipNetToMediaSubId, alaIpServiceSourceIpTable=alaIpServiceSourceIpTable, ipNetToMediaChassisId=ipNetToMediaChassisId, alaIpInterfaceChassisId=alaIpInterfaceChassisId, alaIpDirectedBroadcast=alaIpDirectedBroadcast, alaIpItfGroup=alaIpItfGroup, alaDistArpItfCount=alaDistArpItfCount, alaIpRouteSumEntry=alaIpRouteSumEntry, alaIpRouteCount=alaIpRouteCount, alaIpItfConfigTable=alaIpItfConfigTable, alaIcmpCtrlPktGap=alaIcmpCtrlPktGap, alaIpNetToMediaDpaIpType=alaIpNetToMediaDpaIpType, alaDoSPortScanDecay=alaDoSPortScanDecay, alaIpServiceSourceIpGroup=alaIpServiceSourceIpGroup, alaDoSTrap=alaDoSTrap, alaIpInterfaceTunnelSrcAddressType=alaIpInterfaceTunnelSrcAddressType, alaDistArpItfChange=alaDistArpItfChange, alaIpDhcpHostName=alaIpDhcpHostName, alaPortScanGroup=alaPortScanGroup, alaDoSAntiSpoofStatus=alaDoSAntiSpoofStatus, alaIpNtpVrfName=alaIpNtpVrfName, alaDistArpItfGroup=alaDistArpItfGroup, alaIpNetToMediaDpaPhysAddress=alaIpNetToMediaDpaPhysAddress, alaIpDhcpClientLeaseExpires=alaIpDhcpClientLeaseExpires, ipNetToMediaPort=ipNetToMediaPort, alaDoSTrapCntl=alaDoSTrapCntl, alaDoSStatus=alaDoSStatus, alaIpPortServicePort=alaIpPortServicePort, pktDrop=pktDrop, alaIpArpFilterVlan=alaIpArpFilterVlan, alaIpFtpPort=alaIpFtpPort, alaIcmpCtrlTable=alaIcmpCtrlTable, alaIpInterfaceAdminState=alaIpInterfaceAdminState, alaIpNetToMediaAuth=alaIpNetToMediaAuth, alaIpNetToMediaName=alaIpNetToMediaName, alaIpInterfaceTunnelSrc=alaIpInterfaceTunnelSrc, pktDropIfIndex=pktDropIfIndex, alaDoSArpPoisonTable=alaDoSArpPoisonTable, alaDoSAntiSpoofEntry=alaDoSAntiSpoofEntry, alaDoSAntiSpoofIPAddress=alaDoSAntiSpoofIPAddress, alaDoSAntiSpoofIfIndex=alaDoSAntiSpoofIfIndex, alaIpInterfaceMask=alaIpInterfaceMask, alaDoSAntiSpoofMacAddress=alaDoSAntiSpoofMacAddress, alaIpInterfaceVipAddress=alaIpInterfaceVipAddress, alaIpServiceSourceIpAppIndex=alaIpServiceSourceIpAppIndex, alaDoSArpPoisonRowStatus=alaDoSArpPoisonRowStatus, alaDoSType=alaDoSType, alaIpInterfaceServiceID=alaIpInterfaceServiceID, alaIpInterfacePort=alaIpInterfacePort, alaIpArpFilterGroup=alaIpArpFilterGroup, alaDoSEntry=alaDoSEntry, alaDistArpNiDevice=alaDistArpNiDevice, ipCidrRouteAugEntry=ipCidrRouteAugEntry, alaIpInterfacePrimAct=alaIpInterfacePrimAct, alaIpInterfaceDhcpIpRelease=alaIpInterfaceDhcpIpRelease, alaIpNtpGroup=alaIpNtpGroup, ipCidrRouteAugTable=ipCidrRouteAugTable, alaIpSshAdminStatus=alaIpSshAdminStatus, alaIpInterfaceDhcpOption60String=alaIpInterfaceDhcpOption60String, alaIpTelnetGroup=alaIpTelnetGroup, alaDoSTable=alaDoSTable, alaIpSshConfig=alaIpSshConfig, alaIpInterfaceDhcpVsiAcceptFilterString=alaIpInterfaceDhcpVsiAcceptFilterString, alcatelIND1IPMIBNotifications=alcatelIND1IPMIBNotifications, alaIpArpFilterTable=alaIpArpFilterTable, alaDoSAntiSpoofRowStatus=alaDoSAntiSpoofRowStatus, alaIpArpFilterRowStatus=alaIpArpFilterRowStatus, alaIpItfConfigEntry=alaIpItfConfigEntry, alaDistArpNiSlot=alaDistArpNiSlot, alaIpSshStrongCiphersAdminStatus=alaIpSshStrongCiphersAdminStatus, alaAntiSpoofGlobalGroup=alaAntiSpoofGlobalGroup, alaDoSDetected=alaDoSDetected, alaDistArpNiThreshold=alaDistArpNiThreshold, alaIpInterfaceTunnelDst=alaIpInterfaceTunnelDst, alaIpSshPort=alaIpSshPort, alaDoSPortScanClosePortPenalty=alaDoSPortScanClosePortPenalty, alaIpInterfaceEncap=alaIpInterfaceEncap, alaIpDhcpHostIdentifierObjects=alaIpDhcpHostIdentifierObjects, alaDoSPortIfindex=alaDoSPortIfindex, alaIpDhcpRouterAddressType=alaIpDhcpRouterAddressType, alaIpInterfaceVlanID=alaIpInterfaceVlanID, alaIpPortServiceTypeGroup=alaIpPortServiceTypeGroup, alaIpInterfaceRouterMac=alaIpInterfaceRouterMac, alaIpNetToMediaEntry=alaIpNetToMediaEntry, alaDoSAntiSpoofIPAddressType=alaDoSAntiSpoofIPAddressType, alaIpServiceTypeGroup=alaIpServiceTypeGroup, alaIpInterfaceTag=alaIpInterfaceTag, alaIpNetToMediaAugGroup=alaIpNetToMediaAugGroup, alaIpItfConfigRowStatus=alaIpItfConfigRowStatus, alaIpNotificationGroup=alaIpNotificationGroup, alaIpNetToMediaTable=alaIpNetToMediaTable, alaIpArpFilterType=alaIpArpFilterType, alaIpInterfaceArpNiDevice=alaIpInterfaceArpNiDevice, alaDistArpNiChassis=alaDistArpNiChassis, alaIpServiceStatus=alaIpServiceStatus, alaDoSAntiSpoofGlobalCountReset=alaDoSAntiSpoofGlobalCountReset, alaDoSPortScanTotalPenalty=alaDoSPortScanTotalPenalty, alaIpArpFilterIpMask=alaIpArpFilterIpMask, alaIpInterfaceArpCount=alaIpInterfaceArpCount, alaDistArpNiEntry=alaDistArpNiEntry, alaDistArpItfEntry=alaDistArpItfEntry, alaDoSPortScanUdpOpenPortPenalty=alaDoSPortScanUdpOpenPortPenalty, pktDropType=pktDropType, alaDoSIp=alaDoSIp, ipNetToMediaAugTable=ipNetToMediaAugTable, alaDistArpNiMaxCount=alaDistArpNiMaxCount, alaIpFtpGroup=alaIpFtpGroup, alaIpInterfaceDeviceType=alaIpInterfaceDeviceType, alaIpInterfaceDhcpStatus=alaIpInterfaceDhcpStatus, alaDoSARPRate=alaDoSARPRate, alaIpTelnetAdminStatus=alaIpTelnetAdminStatus, alaDoSArpPoisonIpAddr=alaDoSArpPoisonIpAddr, alaIpInterfaceArpNiSlot=alaIpInterfaceArpNiSlot, alaIpCompliance=alaIpCompliance, alaIpArpFilterEntry=alaIpArpFilterEntry, alaIpServicePort=alaIpServicePort, alcatelIND1IPMIBConformance=alcatelIND1IPMIBConformance, alaIpInterfaceOperReason=alaIpInterfaceOperReason, alaIpInterfaceDhcpIpRenew=alaIpInterfaceDhcpIpRenew, alaIpNetToMediaDpaIfIndex=alaIpNetToMediaDpaIfIndex, alaIpSshGroup=alaIpSshGroup, alaIpFtpAdminStatus=alaIpFtpAdminStatus, AlaIpServiceSourceIpAppIndex=AlaIpServiceSourceIpAppIndex, alaIpInterfaceMtu=alaIpInterfaceMtu, alaDoSChassisId=alaDoSChassisId, alaIpSshPubKeyEnforceAdminStatus=alaIpSshPubKeyEnforceAdminStatus, alaIpServiceSourceIpEntry=alaIpServiceSourceIpEntry, alaIpPortServiceEntry=alaIpPortServiceEntry, alaIpInterfaceGroup=alaIpInterfaceGroup, alaIpNetToMediaGroup=alaIpNetToMediaGroup, ipNetToMediaAugEntry=ipNetToMediaAugEntry, alaIpPortServiceStatus=alaIpPortServiceStatus, alaIcmpCtrlGroup=alaIcmpCtrlGroup, alaIpInterfaceName=alaIpInterfaceName, alaIpInterfaceArpNiChassis=alaIpInterfaceArpNiChassis, alaDoSArpPoisonDetected=alaDoSArpPoisonDetected, alaDoSAntiSpoofCount=alaDoSAntiSpoofCount, alaIpTelnetConfig=alaIpTelnetConfig, alaIpNetToMediaDpaTable=alaIpNetToMediaDpaTable, alaIpDhcpRouterAddress=alaIpDhcpRouterAddress, alaIpNetToMediaDpaEntry=alaIpNetToMediaDpaEntry, alaIpInterfaceIpForward=alaIpInterfaceIpForward, alaIpItfConfigIfIndex=alaIpItfConfigIfIndex, alaDistArpItfIfIndex=alaDistArpItfIfIndex, alaIpClearArpCache=alaIpClearArpCache, alaIpTelnetPort=alaIpTelnetPort, pktDropCount=pktDropCount, alaDoSConfig=alaDoSConfig, alaDoSPingRate=alaDoSPingRate, alaIcmpCtrlStatus=alaIcmpCtrlStatus, alaIpInterfaceTunnelDstAddressType=alaIpInterfaceTunnelDstAddressType, alaIpServiceTable=alaIpServiceTable, alaDoSPort=alaDoSPort, alaIpRouteSumTable=alaIpRouteSumTable, alaIcmpCtrlCode=alaIcmpCtrlCode, alaIpArpFilterIpAddr=alaIpArpFilterIpAddr, alaIpInterfaceTable=alaIpInterfaceTable, alaDistArpItfTable=alaDistArpItfTable, ipNetToMediaSlot=ipNetToMediaSlot, alaIpInterfaceOperState=alaIpInterfaceOperState, alaIpNetToMediaPhysAddress=alaIpNetToMediaPhysAddress, alcatelIND1IPMIBCompliances=alcatelIND1IPMIBCompliances, alaPktDropGroup=alaPktDropGroup, alaIpCidrAugGroup=alaIpCidrAugGroup, alaIpServiceSourceIpName=alaIpServiceSourceIpName, alaIcmpCtrlEntry=alaIcmpCtrlEntry, alaIcmpCtrl=alaIcmpCtrl, alaIpServiceSourceIpRowStatus=alaIpServiceSourceIpRowStatus, alcatelIND1IPMIBGroups=alcatelIND1IPMIBGroups, alaDistArpNiCount=alaDistArpNiCount, alaIpDhcpServerAddress=alaIpDhcpServerAddress, alaIpNetToMediaVrrp=alaIpNetToMediaVrrp, alaDoSPortScanThreshold=alaDoSPortScanThreshold, alaIpNetToMediaDpaVlan=alaIpNetToMediaDpaVlan, alaIcmpCtrlType=alaIcmpCtrlType, alaIpConfigGroup=alaIpConfigGroup, alaDoSAntiSpoofTable=alaDoSAntiSpoofTable, alaIpPortServiceTable=alaIpPortServiceTable, alaIpItfConfigName=alaIpItfConfigName, alaIpDhcpHostIdentifierGroup=alaIpDhcpHostIdentifierGroup, alaIcmpAllMsgStatus=alaIcmpAllMsgStatus, alaDoSSlot=alaDoSSlot, alaIpArpFilterMode=alaIpArpFilterMode, alaDistArpNiGroup=alaDistArpNiGroup, alaIpRouteProtocol=alaIpRouteProtocol, alaArpPingGroup=alaArpPingGroup, alaDoSPortScanTcpOpenPortPenalty=alaDoSPortScanTcpOpenPortPenalty, alaIpDhcpServerAddressType=alaIpDhcpServerAddressType, alcatelIND1IPMIB=alcatelIND1IPMIB, alaIpNtpConfig=alaIpNtpConfig, alaIpInterfaceRemoteAddr=alaIpInterfaceRemoteAddr, alaIpFtpConfig=alaIpFtpConfig, alaIpServiceEntry=alaIpServiceEntry, alaIpDistributedArp=alaIpDistributedArp, alaIpInterfaceAddress=alaIpInterfaceAddress, alaIpDhcpClientLeaseObtained=alaIpDhcpClientLeaseObtained)
