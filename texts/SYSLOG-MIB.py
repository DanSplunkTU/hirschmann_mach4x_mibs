#
# PySNMP MIB module SYSLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/SYSLOG-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 17:04:00 2022
# On host fv-az36-128 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, mib_2, Gauge32, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, MibIdentifier, Counter64, NotificationType, Bits, TimeTicks, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "mib-2", "Gauge32", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "MibIdentifier", "Counter64", "NotificationType", "Bits", "TimeTicks", "ObjectIdentity", "Integer32")
TimeStamp, TextualConvention, StorageType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "StorageType", "DisplayString", "RowStatus")
SyslogSeverity, SyslogFacility = mibBuilder.importSymbols("SYSLOG-TC-MIB", "SyslogSeverity", "SyslogFacility")
syslogMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 200))
syslogMIB.setRevisions(('2007-03-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: syslogMIB.setRevisionsDescriptions(('The initial version, published as RFC XXXX.',))
if mibBuilder.loadTexts: syslogMIB.setLastUpdated('200703040000Z')
if mibBuilder.loadTexts: syslogMIB.setOrganization('IETF Syslog Working Group')
if mibBuilder.loadTexts: syslogMIB.setContactInfo('                      Glenn Mansfield Keeni\n                      Postal: Cyber Solutions Inc.\n                              6-6-3, Minami Yoshinari\n                              Aoba-ku, Sendai, Japan 989-3204.\n                         Tel: +81-22-303-4012\n                         Fax: +81-22-303-4015\n                      E-mail: glenn@cysols.com\n\n        Support Group E-mail: syslog@ietf.org\n        ')
if mibBuilder.loadTexts: syslogMIB.setDescription("The MIB module for monitoring syslog applications.\n\n            A syslog application sends and/or receives syslog messages.\n            The reader is referred to [RFCPROT] for a description of\n            the various roles of a syslog application viz. ''sender'',\n            ''receiver'' and ''relay''. The discussion in this\n            document in general applies to a generic syslog application.\n            For special cases the specific role of the syslog\n            application will be mentioned.\n\n\n            Copyright (C) The IETF Trust (2008). This version of\n            this MIB module is part of RFC XXXX; see the RFC itself for\n            full legal notices.\n           ")
class SyslogRoles(TextualConvention, Bits):
    reference = 'The Syslog Protocol [RFCPROT] sec. 3.\n           '
    description = 'This textual convention enumerates the roles of a\n            syslog application. Note that a syslog application can\n            have multiple roles.\n           '
    status = 'current'
    namedValues = NamedValues(("sender", 0), ("receiver", 1), ("relay", 2))

class SyslogEncapsulation(TextualConvention, Integer32):
    reference = 'Transmission of syslog messages over UDP [RFCUDPX],\n            TLS Transport Mapping for Syslog [RFCTLSX],\n            Reliable Delivery for syslog [RFC3195].\n           '
    description = 'This textual convention enumerates the encapsulations\n            of the syslog message that is used between syslog\n            application endpoints.\n           '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("none", 2), ("tls", 3), ("beep", 4))

syslogNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 0))
syslogObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 1))
syslogConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 3))
syslogControlTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 1), )
if mibBuilder.loadTexts: syslogControlTable.setStatus('current')
if mibBuilder.loadTexts: syslogControlTable.setDescription('A table containing the configuration parameters\n            pertaining to the syslog applications serviced by an\n            SNMP agent.\n           ')
syslogControlEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 1, 1), ).setIndexNames((0, "SYSLOG-MIB", "syslogControlIndex"))
if mibBuilder.loadTexts: syslogControlEntry.setStatus('current')
if mibBuilder.loadTexts: syslogControlEntry.setDescription('The configuration parameters pertaining to a syslog\n            application.\n           ')
syslogControlIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: syslogControlIndex.setStatus('current')
if mibBuilder.loadTexts: syslogControlIndex.setDescription('The Index that uniquely identifies the syslog\n            application in the syslogControlTable.\n            The value of the index for a syslog application may\n            not be the same across system reboots. Users and\n            applications will need to determine the index of a\n            syslog application after system reboots.\n           ')
syslogControlDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlDescr.setStatus('current')
if mibBuilder.loadTexts: syslogControlDescr.setDescription('A user definable description of the syslog application.\n            This description could be used by syslog management\n            applications e.g. in reports or in user interfaces.\n           ')
syslogControlRoles = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 3), SyslogRoles()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlRoles.setStatus('current')
if mibBuilder.loadTexts: syslogControlRoles.setDescription('The roles of the syslog application.\n           ')
syslogControlBindAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlBindAddrType.setStatus('current')
if mibBuilder.loadTexts: syslogControlBindAddrType.setDescription("The type of Internet address which follows\n            in syslogControlBindAddr.\n            If this syslog application is not a syslog receiver,\n            the value of this object will be 'unknown' (0).\n           ")
syslogControlBindAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlBindAddr.setStatus('current')
if mibBuilder.loadTexts: syslogControlBindAddr.setDescription("The specific address the syslog receiver will bind to.\n            The format of the address is specified by the\n            corresponding syslogControlBindAddrType object.\n            If the address is specified in the DNS domain name format\n            [syslogControlBindAddrType = 'dns'], the\n            corresponding IPv4 or IPv6 address obtained at the time\n            of the binding operation by the syslog application, will be\n\n            used.\n            If this syslog application is not a syslog receiver, the\n            value of this object will be a zero-length string.\n           ")
syslogControlBindPort = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlBindPort.setStatus('current')
if mibBuilder.loadTexts: syslogControlBindPort.setDescription('The port number that this syslog receiver will bind to.\n\n            If this syslog application is not a syslog receiver the\n            value of this object will be zero.\n           ')
syslogControlEncapsulation = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 7), SyslogEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlEncapsulation.setStatus('current')
if mibBuilder.loadTexts: syslogControlEncapsulation.setDescription("The encapsulation that will be used for syslog messages\n            by the syslog receiver.\n\n            If this syslog application is not a syslog receiver the\n            value of this object will be ''other''.\n           ")
syslogControlMaxMessageSize = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlMaxMessageSize.setReference('The Syslog Protocol [RFCPROT] sec. 6.1.\n\n           ')
if mibBuilder.loadTexts: syslogControlMaxMessageSize.setStatus('current')
if mibBuilder.loadTexts: syslogControlMaxMessageSize.setDescription('The maximum size of the syslog messages in bytes\n            for this syslog application.\n\n            A syslog receiver may reject or truncate messages larger\n            than the specified maximum syslog message size.\n           ')
syslogControlConfFileName = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 9), SnmpAdminString().clone('/etc/syslog.conf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlConfFileName.setStatus('current')
if mibBuilder.loadTexts: syslogControlConfFileName.setDescription("The fullpath name of the configuration file where the\n          syslog application's message selection and corresponding\n          action rules will be read from.\n          If the syslog application does not support the specification\n          of a configuration file, the value of this object will\n          be a zero-length string.\n         ")
syslogControlStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlStorageType.setStatus('current')
if mibBuilder.loadTexts: syslogControlStorageType.setDescription("This object defines whether the parameters defined in\n            this row are kept in volatile storage and lost upon\n            reboot or are backed up by non-volatile or permanent\n            storage.\n            Conceptual rows having the value 'permanent' need not\n            allow write-access to any columnar objects in the row.\n           ")
syslogControlRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogControlRowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogControlRowStatus.setDescription("This object is used to create, modify and delete rows in\n            the syslogControlTable.\n            The value of syslogControlDescr can be changed\n            when this object is in state ''active'' or in\n            ''notInService''.\n            The other objects in a row can be modified only when the\n            value of this object in the corresponding conceptual row\n            is not ''active''. Thus to modify one or more of the\n            objects in this conceptual row,\n              a. change the row status to ''notInService'',\n              b. change the values of the row\n              c. change the row status to ''active''\n            The syslogControlRowStatus may be changed to\n            ''active'' if all the managed objects in the conceptual\n            row with MAX-ACCESS read-create except\n            syslogControlBindPort and\n            syslogControlEncapsulation have been assigned valid\n            values.\n           ")
syslogOperationsTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 2), )
if mibBuilder.loadTexts: syslogOperationsTable.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsTable.setDescription('A table containing operations information about\n            the syslog applications serviced by an SNMP agent.\n            This table complements the (configuration) information\n            in syslogControlTable .\n           ')
syslogOperationsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 2, 1), )
syslogControlEntry.registerAugmentions(("SYSLOG-MIB", "syslogOperationsEntry"))
syslogOperationsEntry.setIndexNames(*syslogControlEntry.getIndexNames())
if mibBuilder.loadTexts: syslogOperationsEntry.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsEntry.setDescription('The operations information pertaining to a syslog\n            application.\n           ')
syslogOperationsMsgsReceived = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsReceived.setDescription('The number of messages received by the syslog\n            receiver. This includes messages that were discarded.\n            If this syslog application is not a syslog receiver the\n            value of this object will be zero.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ')
syslogOperationsMsgsTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsTransmitted.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsTransmitted.setDescription('The number of messages transmitted by the syslog\n            sender. This does not include the messages that could\n            not be queued for transmission by the syslog sender.\n            If this syslog application is not a syslog sender the\n            value of this object will be zero.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ')
syslogOperationsMsgsRelayed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsRelayed.setReference('The Syslog Protocol [RFCPROT] sec. 3.\n           ')
if mibBuilder.loadTexts: syslogOperationsMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsRelayed.setDescription('The number of messages relayed by the syslog\n            relay to other syslog applications.\n            If this syslog application is not a syslog relay the value\n            of this object will be zero.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ')
syslogOperationsMsgsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsDropped.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsDropped.setDescription('The number of messages that could not be queued\n            for transmission by the syslog sender.\n            If this syslog application is not a syslog sender the\n            value of this object will be zero.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ')
syslogOperationsMsgsMalFormed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsMalFormed.setReference('The Syslog Protocol [RFCPROT] sec. 6.3.\n           ')
if mibBuilder.loadTexts: syslogOperationsMsgsMalFormed.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsMalFormed.setDescription('The number of messages received by the syslog\n            receiver which had malformed header.\n            If this syslog application is not a syslog receiver,\n            then this object will have a zero value.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ')
syslogOperationsMsgsDiscarded = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsMsgsDiscarded.setReference('The Syslog Protocol [RFCPROT] sec. 6.1.\n           ')
if mibBuilder.loadTexts: syslogOperationsMsgsDiscarded.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsMsgsDiscarded.setDescription("The number of messages that were discarded by the\n            syslog receiver. This will include messages that\n            were discarded because the message size was greater\n            than the system's maximum message size.\n            If this syslog application is not a syslog receiver this\n            object will have a zero value.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogOperationsCounterDiscontinuityTime.\n           ")
syslogOperationsLastMsgRecdTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsLastMsgRecdTime.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsLastMsgRecdTime.setDescription('The value of sysUpTime when the last message was\n            received by the syslog receiver.\n            If this syslog application is not a syslog receiver or,\n            if no messages have been received by this syslog\n            application, since the last re-initialization of the\n            local SNMP management subsystem, then this object\n            will have a zero value.\n           ')
syslogOperationsLastMsgTransmittedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsLastMsgTransmittedTime.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsLastMsgTransmittedTime.setDescription('The value of sysUpTime when the last message\n            was transmitted by the syslog sender.\n            If this syslog application is not a syslog sender or,\n            if no messages have been transmitted by this syslog\n            application, since the last re-initialization of the local\n            management subsystem, then this object will have a\n            zero value.\n           ')
syslogOperationsStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsStartTime.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsStartTime.setDescription('The value of sysUpTime when this syslog application was\n            started.\n           ')
syslogOperationsLastError = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsLastError.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsLastError.setDescription('A description of the last error related to sending,\n            receiving or processing a syslog message that was\n            encountered by this syslog application.\n            If no error has been encountered by this syslog\n            application then the value of this object will be a\n            zero-length string.\n            If no error has been encountered by this syslog\n            application since the last re-initialization of the\n            local management subsystem then the value of this\n            object will be a zero-length string.\n           ')
syslogOperationsLastErrorTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsLastErrorTime.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsLastErrorTime.setDescription('The value of sysUpTime when the last error was\n            encountered.\n            If no error has been encountered by this syslog\n            application since the last re-initialization of the\n            local management subsystem, then this object will\n            have a zero value.\n           ')
syslogOperationsRunIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsRunIndex.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsRunIndex.setDescription('If the Host resource MIB is instantiated on the\n            host then this entry will have the value of the\n            hrSWRunIndex of the corresponding entry in the\n            hrSWRunTable.\n            Note that the hrSWRunIndex is not persistent\n            across system reboots or software restarts. The\n            value of syslogOperationsRunIndex SHOULD\n            reference the latest value of the hrSWRunIndex\n            of the corresponding entry in the hrSWRunTable.\n\n            The special value of zero indicates that the Host\n            resource MIB is not instantiated.\n           ')
syslogOperationsCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\n             at which any one or more of this syslog application's\n             counters, viz., counters with OID prefix\n             'syslogOperationsMsgsReceived' or\n             'syslogOperationsMsgsTransmitted' or\n             'syslogOperationsMsgsRelayed' or\n             'syslogOperationsMsgsDropped' or\n             'syslogOperationsMsgsMalFormed' or\n             'syslogOperationsMsgsDiscarded' suffered a\n             discontinuity.\n             If no such discontinuities have occurred since the\n             last re-initialization of the local management\n             subsystem, then this object will have a zero value.\n            ")
syslogOperationsStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("started", 2), ("suspended", 3), ("stopped", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogOperationsStatus.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsStatus.setDescription('The status of the syslog application.\n           ')
syslogPriorityTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 3), )
if mibBuilder.loadTexts: syslogPriorityTable.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityTable.setDescription('A table containing the relay configuration\n            parameters pertaining to the syslog applications\n            serviced by an SNMP agent.\n           ')
syslogPriorityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 3, 1), ).setIndexNames((0, "SYSLOG-MIB", "syslogControlIndex"), (0, "SYSLOG-MIB", "syslogPriorityFacility"), (0, "SYSLOG-MIB", "syslogPrioritySeverity"))
if mibBuilder.loadTexts: syslogPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityEntry.setDescription('The relay configuration parameters pertaining to\n            a syslog application.\n           ')
syslogPriorityFacility = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 1), SyslogFacility())
if mibBuilder.loadTexts: syslogPriorityFacility.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityFacility.setDescription('The facility value of this entry.\n           ')
syslogPrioritySeverity = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 2), SyslogSeverity())
if mibBuilder.loadTexts: syslogPrioritySeverity.setStatus('current')
if mibBuilder.loadTexts: syslogPrioritySeverity.setDescription('The severity value of this entry.\n           ')
syslogPriorityDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogPriorityDescr.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityDescr.setDescription('A textual description of this priority entry.\n           ')
syslogPriorityDestinationIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogPriorityDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityDestinationIndex.setDescription('On systems where the priority value in a syslog message\n            indicates the destination to which a syslog message\n            should be relayed, the value of this object will identify\n            the row in syslogRelayTable that contains\n            information about the relay destination to which\n            messages which have the priority value represented by\n            syslogPriorityFacility and syslogPrioritySeverity values\n            of this row will be relayed.\n            A value of 0 will indicate that there is no corresponding\n            row in the syslogRelayTable table.\n           ')
syslogPriorityStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogPriorityStorageType.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityStorageType.setDescription("This object defines whether the parameters defined in\n            this row are kept in volatile storage and lost upon\n            reboot or are backed up by non-volatile or permanent\n            storage.\n            Conceptual rows having the value 'permanent' need not\n            allow write-access to any columnar objects in the row.\n           ")
syslogPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogPriorityRowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityRowStatus.setDescription("This object is used to create, modify and delete rows\n            in the syslogPriorityTable.\n            The value of syslogPriorityDescr can be changed\n            when this object is in state ''active'' or in\n            ''notInService''.\n            The other objects in a row can be modified only when the\n            value of this object in the corresponding conceptual row\n            is not ''active''. Thus to modify one or more of the\n            objects in this conceptual row,\n              a. change the row status to ''notInService'',\n              b. change the values of the row\n              c. change the row status to ''active''\n            The syslogPriorityRowStatus may be changed to\n            ''active'' if all the managed objects in the conceptual\n            row with MAX-ACCESS read-create have been assigned valid\n            values.\n           ")
syslogRelayTable = MibTable((1, 3, 6, 1, 2, 1, 200, 1, 4), )
if mibBuilder.loadTexts: syslogRelayTable.setStatus('current')
if mibBuilder.loadTexts: syslogRelayTable.setDescription('A table containing information for the relay\n            destinations.\n           ')
syslogRelayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 200, 1, 4, 1), ).setIndexNames((0, "SYSLOG-MIB", "syslogRelayIndex"))
if mibBuilder.loadTexts: syslogRelayEntry.setStatus('current')
if mibBuilder.loadTexts: syslogRelayEntry.setDescription('The information pertaining to a syslog message\n            relay destination.\n           ')
syslogRelayIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: syslogRelayIndex.setStatus('current')
if mibBuilder.loadTexts: syslogRelayIndex.setDescription('The Index that uniquely identifies the syslog\n            relay in the syslogRelayTable.\n            The value of the index for a syslog relay may\n            not be the same across system reboots. Users and\n            applications will need to determine the index of a\n            syslog relay after system reboots.\n           ')
syslogRelayDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayDescr.setStatus('current')
if mibBuilder.loadTexts: syslogRelayDescr.setDescription('A user definable description of the syslog relay.\n            This description could be used by syslog management\n            applications e.g. in reports or in user interfaces.\n           ')
syslogRelayAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayAddrType.setStatus('current')
if mibBuilder.loadTexts: syslogRelayAddrType.setDescription('The type of Internet address which follows\n            in syslogRelayAddr.\n           ')
syslogRelayAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayAddr.setStatus('current')
if mibBuilder.loadTexts: syslogRelayAddr.setDescription("The address of the syslog relay .\n            The format of the address is specified by the\n            corresponding syslogRelayAddrType object.\n            If the address is specified in the DNS domain name format\n            [syslogRelayAddrType = 'dns'], the\n            corresponding IPv4 or IPv6 address obtained at the time\n            of the relay operation by the syslog application, will be\n            used.\n           ")
syslogRelayPort = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayPort.setStatus('current')
if mibBuilder.loadTexts: syslogRelayPort.setDescription('The port number of the syslog relay.\n           ')
syslogRelayEncapsulation = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 6), SyslogEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayEncapsulation.setStatus('current')
if mibBuilder.loadTexts: syslogRelayEncapsulation.setDescription('The encapsulation that will be used for syslog messages\n            sent by the syslog sender to the relay destination.\n           ')
syslogRelayMsgsRelayed = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogRelayMsgsRelayed.setReference('The Syslog Protocol [RFCPROT] sec. 3.\n           ')
if mibBuilder.loadTexts: syslogRelayMsgsRelayed.setStatus('current')
if mibBuilder.loadTexts: syslogRelayMsgsRelayed.setDescription('The number of messages relayed by the syslog\n            relay to this relay destination.\n            Discontinuities in the value of this counter can\n            occur at re-initialization of the management system,\n            and at other times as indicated by the value of\n            syslogRelayCounterDiscontinuityTime.\n           ')
syslogRelayCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogRelayCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: syslogRelayCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion\n             at which counters with OID prefix\n             'syslogRelayMsgsRelayed' suffered a\n             discontinuity.\n             If no such discontinuities have occurred since the\n             last re-initialization of the local management\n             subsystem, then this object will have a zero value.\n            ")
syslogRelayStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayStorageType.setStatus('current')
if mibBuilder.loadTexts: syslogRelayStorageType.setDescription("This object defines whether the parameters defined in\n            this row are kept in volatile storage and lost upon\n            reboot or are backed up by non-volatile or permanent\n            storage.\n            Conceptual rows having the value 'permanent' need not\n            allow write-access to any columnar objects in the row.\n           ")
syslogRelayRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 200, 1, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: syslogRelayRowStatus.setStatus('current')
if mibBuilder.loadTexts: syslogRelayRowStatus.setDescription("This object is used to create, modify and delete rows\n               in the syslogRelayTable.\n               The value of syslogRelayDescr can be changed\n               when this object is in state ''active'' or in\n               ''notInService''.\n               The other objects in a row can be modified only when the\n               value of this object in the corresponding conceptual row\n               is not ''active''. Thus to modify one or more of the\n               objects in this conceptual row,\n                 a. change the row status to ''notInService'',\n                 b. change the values of the row\n                 c. change the row status to ''active''\n               The syslogRelayRowStatus may be changed to\n               ''active'' if all the managed objects in the conceptual\n               row with MAX-ACCESS read-create have been assigned valid\n               values.\n              ")
syslogStatusChanged = NotificationType((1, 3, 6, 1, 2, 1, 200, 0, 1)).setObjects(("SYSLOG-MIB", "syslogControlDescr"), ("SYSLOG-MIB", "syslogControlRoles"), ("SYSLOG-MIB", "syslogControlBindAddrType"), ("SYSLOG-MIB", "syslogControlBindAddr"), ("SYSLOG-MIB", "syslogControlBindPort"), ("SYSLOG-MIB", "syslogControlEncapsulation"), ("SYSLOG-MIB", "syslogControlConfFileName"), ("SYSLOG-MIB", "syslogOperationsStatus"))
if mibBuilder.loadTexts: syslogStatusChanged.setStatus('current')
if mibBuilder.loadTexts: syslogStatusChanged.setDescription("This notification is sent when a syslog application\n                changes state. For example when the syslog application\n                starts [syslogOperationsStatus is ''started'' ]\n                or the syslog application stops [syslogOperationsStatus\n                is ''suspended'' or ''stopped''].\n                The value of syslogOperationsStatus will be the\n                new status of the syslog application after the change.\n                The syslog application corresponding to the notification\n                will be identified by the syslogOperationsIndex\n                instance identifier of the objects in the notification.\n               ")
syslogGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 3, 1))
syslogCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 200, 3, 2))
syslogOperationsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 3, 1, 1)).setObjects(("SYSLOG-MIB", "syslogOperationsMsgsReceived"), ("SYSLOG-MIB", "syslogOperationsMsgsTransmitted"), ("SYSLOG-MIB", "syslogOperationsMsgsRelayed"), ("SYSLOG-MIB", "syslogOperationsMsgsDropped"), ("SYSLOG-MIB", "syslogOperationsMsgsMalFormed"), ("SYSLOG-MIB", "syslogOperationsMsgsDiscarded"), ("SYSLOG-MIB", "syslogOperationsLastMsgRecdTime"), ("SYSLOG-MIB", "syslogOperationsLastMsgTransmittedTime"), ("SYSLOG-MIB", "syslogOperationsStartTime"), ("SYSLOG-MIB", "syslogOperationsLastError"), ("SYSLOG-MIB", "syslogOperationsLastErrorTime"), ("SYSLOG-MIB", "syslogOperationsRunIndex"), ("SYSLOG-MIB", "syslogOperationsCounterDiscontinuityTime"), ("SYSLOG-MIB", "syslogOperationsStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogOperationsGroup = syslogOperationsGroup.setStatus('current')
if mibBuilder.loadTexts: syslogOperationsGroup.setDescription('A collection of objects providing message related\n            statistics.')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 3, 1, 2)).setObjects(("SYSLOG-MIB", "syslogControlDescr"), ("SYSLOG-MIB", "syslogControlRoles"), ("SYSLOG-MIB", "syslogControlBindAddrType"), ("SYSLOG-MIB", "syslogControlBindAddr"), ("SYSLOG-MIB", "syslogControlEncapsulation"), ("SYSLOG-MIB", "syslogControlBindPort"), ("SYSLOG-MIB", "syslogControlMaxMessageSize"), ("SYSLOG-MIB", "syslogControlConfFileName"), ("SYSLOG-MIB", "syslogControlStorageType"), ("SYSLOG-MIB", "syslogControlRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
if mibBuilder.loadTexts: syslogControlGroup.setDescription('A collection of objects representing the run time parameters\n            for the syslog applications.\n           ')
syslogPriorityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 3, 1, 3)).setObjects(("SYSLOG-MIB", "syslogPriorityDescr"), ("SYSLOG-MIB", "syslogPriorityDestinationIndex"), ("SYSLOG-MIB", "syslogPriorityStorageType"), ("SYSLOG-MIB", "syslogPriorityRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogPriorityGroup = syslogPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: syslogPriorityGroup.setDescription('A collection of objects representing the priority\n            groupings of syslog messages.\n           ')
syslogRelayGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 200, 3, 1, 4)).setObjects(("SYSLOG-MIB", "syslogRelayDescr"), ("SYSLOG-MIB", "syslogRelayAddrType"), ("SYSLOG-MIB", "syslogRelayAddr"), ("SYSLOG-MIB", "syslogRelayPort"), ("SYSLOG-MIB", "syslogRelayEncapsulation"), ("SYSLOG-MIB", "syslogRelayMsgsRelayed"), ("SYSLOG-MIB", "syslogRelayCounterDiscontinuityTime"), ("SYSLOG-MIB", "syslogRelayStorageType"), ("SYSLOG-MIB", "syslogRelayRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogRelayGroup = syslogRelayGroup.setStatus('current')
if mibBuilder.loadTexts: syslogRelayGroup.setDescription('A collection of objects representing the relay\n            destinations for syslog messages.\n           ')
syslogNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 200, 3, 1, 5)).setObjects(("SYSLOG-MIB", "syslogStatusChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogNotificationGroup = syslogNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: syslogNotificationGroup.setDescription('A collection of notifications about the operational\n            state of a syslog application.\n           ')
syslogFullCompliance1 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 1)).setObjects(("SYSLOG-MIB", "syslogNotificationGroup"), ("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"), ("SYSLOG-MIB", "syslogPriorityGroup"), ("SYSLOG-MIB", "syslogRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogFullCompliance1 = syslogFullCompliance1.setStatus('current')
if mibBuilder.loadTexts: syslogFullCompliance1.setDescription('The compliance statement for SNMP entities which\n            implement the SYSLOG-MIB with support for writable\n            objects and notifications. Such an implementation can\n            be both monitored and configured via SNMP. It can\n            also send notifications about change in the\n            operational status of the syslog application.\n           ')
syslogFullCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 2)).setObjects(("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"), ("SYSLOG-MIB", "syslogPriorityGroup"), ("SYSLOG-MIB", "syslogRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogFullCompliance2 = syslogFullCompliance2.setStatus('current')
if mibBuilder.loadTexts: syslogFullCompliance2.setDescription('The compliance statement for SNMP entities which\n            implement the SYSLOG-MIB with support for writable\n            objects. Such an implementation can\n            be both monitored and configured via SNMP.\n           ')
syslogFullCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 3)).setObjects(("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogFullCompliance3 = syslogFullCompliance3.setStatus('current')
if mibBuilder.loadTexts: syslogFullCompliance3.setDescription('The compliance statement for SNMP entities which\n            implement the SYSLOG-MIB with support for writable\n            objects but without support for the objects in\n            syslogPriorityGroup and syslogRelayGroup. Such an\n            implementation can be both monitored and configured\n            via SNMP.\n           ')
syslogReadOnlyCompliance1 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 4)).setObjects(("SYSLOG-MIB", "syslogNotificationGroup"), ("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"), ("SYSLOG-MIB", "syslogPriorityGroup"), ("SYSLOG-MIB", "syslogRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogReadOnlyCompliance1 = syslogReadOnlyCompliance1.setStatus('current')
if mibBuilder.loadTexts: syslogReadOnlyCompliance1.setDescription('The compliance statement for SNMP entities which\n            implement the syslog MIB without support\n            for read-write (i.e. in read-only mode). It can\n            also send notifications about change in the\n            operational status of the syslog application.\n           ')
syslogReadOnlyCompliance2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 5)).setObjects(("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"), ("SYSLOG-MIB", "syslogPriorityGroup"), ("SYSLOG-MIB", "syslogRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogReadOnlyCompliance2 = syslogReadOnlyCompliance2.setStatus('current')
if mibBuilder.loadTexts: syslogReadOnlyCompliance2.setDescription('The compliance statement for SNMP entities which\n            implement the syslog MIB without support\n            for read-write (i.e. in read-only mode).\n           ')
syslogReadOnlyCompliance3 = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 6)).setObjects(("SYSLOG-MIB", "syslogOperationsGroup"), ("SYSLOG-MIB", "syslogControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogReadOnlyCompliance3 = syslogReadOnlyCompliance3.setStatus('current')
if mibBuilder.loadTexts: syslogReadOnlyCompliance3.setDescription('The compliance statement for SNMP entities which\n            implement the syslog MIB without support\n            for read-write (i.e. in read-only mode) and without\n            support for the objects in syslogRelayGroup and\n            syslogPriorityGroup.\n           ')
syslogNotificationCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 200, 3, 2, 7)).setObjects(("SYSLOG-MIB", "syslogNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogNotificationCompliance = syslogNotificationCompliance.setStatus('current')
if mibBuilder.loadTexts: syslogNotificationCompliance.setDescription('The compliance statement for SNMP entities\n            which implement the SYSLOG-MIB and support\n            only notifications about change in the\n            operational status of a syslog application.\n           ')
mibBuilder.exportSymbols("SYSLOG-MIB", SyslogEncapsulation=SyslogEncapsulation, syslogRelayPort=syslogRelayPort, syslogFullCompliance2=syslogFullCompliance2, syslogReadOnlyCompliance2=syslogReadOnlyCompliance2, syslogRelayDescr=syslogRelayDescr, syslogObjects=syslogObjects, syslogPriorityDestinationIndex=syslogPriorityDestinationIndex, syslogNotificationGroup=syslogNotificationGroup, syslogOperationsMsgsMalFormed=syslogOperationsMsgsMalFormed, syslogFullCompliance3=syslogFullCompliance3, syslogControlBindPort=syslogControlBindPort, syslogReadOnlyCompliance3=syslogReadOnlyCompliance3, syslogOperationsMsgsDiscarded=syslogOperationsMsgsDiscarded, syslogOperationsEntry=syslogOperationsEntry, syslogOperationsStartTime=syslogOperationsStartTime, syslogPrioritySeverity=syslogPrioritySeverity, syslogRelayTable=syslogRelayTable, syslogFullCompliance1=syslogFullCompliance1, syslogOperationsCounterDiscontinuityTime=syslogOperationsCounterDiscontinuityTime, syslogPriorityTable=syslogPriorityTable, syslogControlConfFileName=syslogControlConfFileName, syslogOperationsLastMsgRecdTime=syslogOperationsLastMsgRecdTime, syslogOperationsLastErrorTime=syslogOperationsLastErrorTime, syslogPriorityRowStatus=syslogPriorityRowStatus, syslogRelayEncapsulation=syslogRelayEncapsulation, syslogControlMaxMessageSize=syslogControlMaxMessageSize, syslogPriorityDescr=syslogPriorityDescr, syslogOperationsMsgsReceived=syslogOperationsMsgsReceived, syslogPriorityFacility=syslogPriorityFacility, syslogControlIndex=syslogControlIndex, syslogControlStorageType=syslogControlStorageType, syslogOperationsLastError=syslogOperationsLastError, syslogRelayAddrType=syslogRelayAddrType, syslogControlRowStatus=syslogControlRowStatus, syslogReadOnlyCompliance1=syslogReadOnlyCompliance1, syslogPriorityStorageType=syslogPriorityStorageType, syslogStatusChanged=syslogStatusChanged, syslogControlRoles=syslogControlRoles, syslogOperationsMsgsRelayed=syslogOperationsMsgsRelayed, syslogRelayRowStatus=syslogRelayRowStatus, syslogRelayCounterDiscontinuityTime=syslogRelayCounterDiscontinuityTime, syslogNotificationCompliance=syslogNotificationCompliance, syslogOperationsGroup=syslogOperationsGroup, syslogCompliances=syslogCompliances, syslogRelayMsgsRelayed=syslogRelayMsgsRelayed, syslogRelayEntry=syslogRelayEntry, syslogGroups=syslogGroups, syslogControlDescr=syslogControlDescr, syslogRelayIndex=syslogRelayIndex, syslogControlBindAddr=syslogControlBindAddr, syslogOperationsRunIndex=syslogOperationsRunIndex, SyslogRoles=SyslogRoles, syslogControlEntry=syslogControlEntry, syslogControlTable=syslogControlTable, syslogNotifications=syslogNotifications, syslogOperationsTable=syslogOperationsTable, syslogRelayStorageType=syslogRelayStorageType, PYSNMP_MODULE_ID=syslogMIB, syslogControlEncapsulation=syslogControlEncapsulation, syslogPriorityEntry=syslogPriorityEntry, syslogOperationsStatus=syslogOperationsStatus, syslogPriorityGroup=syslogPriorityGroup, syslogControlBindAddrType=syslogControlBindAddrType, syslogOperationsLastMsgTransmittedTime=syslogOperationsLastMsgTransmittedTime, syslogRelayAddr=syslogRelayAddr, syslogControlGroup=syslogControlGroup, syslogConformance=syslogConformance, syslogRelayGroup=syslogRelayGroup, syslogOperationsMsgsTransmitted=syslogOperationsMsgsTransmitted, syslogMIB=syslogMIB, syslogOperationsMsgsDropped=syslogOperationsMsgsDropped)
