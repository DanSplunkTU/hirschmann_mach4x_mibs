#
# PySNMP MIB module PRVT-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-CFM-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:02:15 2022
# On host fv-az74-435 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
dot1agCfmMepIdentifier, dot1agCfmMaCompEntry, dot1agCfmLtrEntry, dot1agCfmMepDbRMepIdentifier, dot1agCfmMdIndex, dot1agCfmMaIndex, Dot1agCfmMDLevelOrNone, dot1agCfmMepEntry, Dot1afCfmIndexIntegerNextFree = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier", "dot1agCfmMaCompEntry", "dot1agCfmLtrEntry", "dot1agCfmMepDbRMepIdentifier", "dot1agCfmMdIndex", "dot1agCfmMaIndex", "Dot1agCfmMDLevelOrNone", "dot1agCfmMepEntry", "Dot1afCfmIndexIntegerNextFree")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, iso, Gauge32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, NotificationType, Bits, Counter64, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "iso", "Gauge32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "NotificationType", "Bits", "Counter64", "Integer32", "ModuleIdentity")
MacAddress, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
prvtCfmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 131))
prvtCfmMib.setRevisions(('2012-09-12 00:00', '2011-04-18 00:00', '2011-01-18 00:00', '2010-07-08 00:00', '2010-04-08 00:00', '2010-03-17 00:00', '2009-06-20 00:00', '2008-08-19 00:00', '2008-06-24 00:00', '2008-01-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtCfmMib.setRevisionsDescriptions(('Added prvtCfmMepManageCCMTLV', 'Added prvtCfmMepSuportedRemoteMepsNo', 'Added AIS/LCK traps', 'Added prvtCfmMaAisLckVlan table', 'Changed description for prvtCfmMepAisCondition', 'Add posibility to enable/disable 1wJitter, 2wJitter, FrameLoss and Latency\non a CFM profile.', 'Fixed some minor description issues, removed prvtCfmProfileFrameLossBucketSize', 'Added prvtCfmMepTransmitLbmSuccessRate, prvtCfmMepTransmitLbmMinTime,\nprvtCfmMepTransmitLbmAvgTime, prvtCfmMepTransmitLbmMaxTime,\nprvtCfmLbrBadMsdu.', 'Added prvtCfmStatus', 'Initial',))
if mibBuilder.loadTexts: prvtCfmMib.setLastUpdated('201101180000Z')
if mibBuilder.loadTexts: prvtCfmMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtCfmMib.setContactInfo(' BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtCfmMib.setDescription('Prvt extension of Connectivity Fault Management module for managing IEEE 802.1ag')
prvtCfmMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0))
prvtCfmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1))
prvtCfmMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 2))
prvtCfmUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: prvtCfmUpdateInterval.setDescription('Time between monitoring parameters update (in seconds).\nA value of 0 suspends the monitoring task and a\nvalue different from 0 resumes it. Default is 20 seconds.')
prvtCfmStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCfmStatus.setDescription('Enable/disable cfm.')
prvtCfmProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3))
prvtCfmProfileTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 1), Dot1afCfmIndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProfileTableNextIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileTableNextIndex.setDescription('This object contains an unused value for prvtCfmProfileIndex in\nthe prvtCfmProfileTable, or a zero to indicate that none exist.')
prvtCfmProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2), )
if mibBuilder.loadTexts: prvtCfmProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileTable.setDescription('Table contains loopback results from all remote MEPs in the MA.')
prvtCfmProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-CFM-MIB", "prvtCfmProfileIndex"))
if mibBuilder.loadTexts: prvtCfmProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileEntry.setDescription('a')
prvtCfmProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtCfmProfileIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileIndex.setDescription('Table index.')
prvtCfmProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileName.setDescription('Profile name.')
prvtCfmProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfilePriority.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfilePriority.setDescription('802.1p class-of-service setting.')
prvtCfmProfileRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileRate.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileRate.setDescription('Number of Request packets to send each time.')
prvtCfmProfileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1462))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileSize.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileSize.setDescription('Size of data TLV included in probe packets (in octets).')
prvtCfmProfileBucketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileBucketSize.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileBucketSize.setDescription('Number of the results to save for results calculation.')
prvtCfmProfile1wJitterError = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(350)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfile1wJitterError.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfile1wJitterError.setDescription('Specifies one-way jitter error values to monitor in milliseconds.')
prvtCfmProfile1wJitterWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfile1wJitterWarning.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfile1wJitterWarning.setDescription('Specifies one-way jitter warning values to monitor in milliseconds.')
prvtCfmProfileJitterError = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(700)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileJitterError.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileJitterError.setDescription('Specifies round-trip jitter error values to monitor in milliseconds.')
prvtCfmProfileJitterErrorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileJitterErrorPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileJitterErrorPeriod.setDescription('Specifies the duration jitter occurs in seconds.')
prvtCfmProfileJitterWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileJitterWarning.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileJitterWarning.setDescription('Specifies round-trip jitter warning values\nto monitor in milliseconds. If set value is greater than the\njitter-error it means that the warning is disabled.')
prvtCfmProfileJitterWarningPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileJitterWarningPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileJitterWarningPeriod.setDescription('Specifies the duration jitter occurs in seconds.')
prvtCfmProfileFrameLossError = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileFrameLossError.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileFrameLossError.setDescription('Specifies round-trip frame-loss error\nvalues to monitor. The default is\nframe-loss of 10% is reported.')
prvtCfmProfileFrameLossWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileFrameLossWarning.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileFrameLossWarning.setDescription('Specifies round-trip frame-loss warning\nvalues to monitor. The default is frame-loss\nof 8% is reported. If set value is greater\nthan the frame-loss-error it means\nthat the warning is disable.')
prvtCfmProfileLatencyError = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileLatencyError.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileLatencyError.setDescription('Specifies round-trip latency error values to monitor in milliseconds.')
prvtCfmProfileLatencyErrorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileLatencyErrorPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileLatencyErrorPeriod.setDescription('Specifies the duration latency increase occurs in seconds.')
prvtCfmProfileLatencyWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(1600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileLatencyWarning.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileLatencyWarning.setDescription('Specifies round-trip latency error values to\nmonitor in milliseconds. If set value is greater than the\nlatency-error it means that the warning is disabled.')
prvtCfmProfileLatencyWarningPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileLatencyWarningPeriod.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileLatencyWarningPeriod.setDescription('Specifies the duration latency increase occurs in seconds.')
prvtCfmProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfmProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileRowStatus.setDescription('The status of the row.\nThe writable columns in a row can not be changed if the row\nis active. All columns must have a valid value before a row\ncan be activated.\n')
prvtCfmProfile1wJitterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfile1wJitterEnable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfile1wJitterEnable.setDescription('A boolean showing if one way jitter calculation is enabled.')
prvtCfmProfileJitterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileJitterEnable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileJitterEnable.setDescription('A boolean showing if two way jitter calculation is enabled.')
prvtCfmProfileFrameLossEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileFrameLossEnable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileFrameLossEnable.setDescription('A boolean showing if frame loss calculation is enabled.')
prvtCfmProfileLatencyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 3, 2, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProfileLatencyEnable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProfileLatencyEnable.setDescription('A boolean showing if latency calculation is enabled.')
prvtCfmProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4))
prvtCfmProcessTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 1), Dot1afCfmIndexIntegerNextFree()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessTableNextIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessTableNextIndex.setDescription('This object contains an unused value for prvtCfmProcessIndex in\nthe prvtCfmProcessTable, or a zero to indicate that none exists.')
prvtCfmProcessTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2), )
if mibBuilder.loadTexts: prvtCfmProcessTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessTable.setDescription("Private extension of dot1agCfmMaNetTable.\nControls the two-way monitoring process\nfor MEP's in the MA.")
prvtCfmProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "PRVT-CFM-MIB", "prvtCfmProcessIndex"))
if mibBuilder.loadTexts: prvtCfmProcessEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessEntry.setDescription('a')
prvtCfmProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtCfmProcessIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessIndex.setDescription('Table index.')
prvtCfmProcessProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 2), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProcessProfileIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessProfileIndex.setDescription('Index of the monitoring profile to be used.')
prvtCfmProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfmProcessName.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessName.setDescription('The name of the process. Should be unique per domain/MA')
prvtCfmProcessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProcessStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessStatus.setDescription("Enable/disable two-way monitoring process for MEP's in the MA.")
prvtCfmProcessRepeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 420)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProcessRepeatInterval.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessRepeatInterval.setDescription('Repeating frequency of the monitoring process.')
prvtCfmProcessPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cfm", 1), ("y1731", 2))).clone('cfm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmProcessPacketType.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessPacketType.setDescription('Use CFM Loopback or Y.1731 LMMs and DMMs packets.')
prvtCfmProcessUnreturnedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessUnreturnedPkts.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessUnreturnedPkts.setDescription("Number of requests for which a reply hasn't been\nreceived. These packets will be counted as lost\nwhen they enter timeout.")
prvtCfmProcessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 4, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfmProcessRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessRowStatus.setDescription('The status of the row.\nThe writable columns in a row can not be changed if the row\nis active. All columns must have a valid value before a row\ncan be activated.')
prvtCfmProcessResult = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5))
prvtCfmProcessResultTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1), )
if mibBuilder.loadTexts: prvtCfmProcessResultTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultTable.setDescription('Table contains process results.')
prvtCfmProcessResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "PRVT-CFM-MIB", "prvtCfmProcessIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: prvtCfmProcessResultEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultEntry.setDescription('a')
prvtCfmProcessResultOneWayJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessResultOneWayJitter.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultOneWayJitter.setDescription('One way jitter calculated for a specific remote MEP in milliseconds')
prvtCfmProcessResultTwoWayJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessResultTwoWayJitter.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultTwoWayJitter.setDescription('Two way jitter calculated for a specific remote MEP in milliseconds')
prvtCfmProcessResultLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessResultLatency.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultLatency.setDescription('Two way latency calculated for a specific remote MEP\nin milliseconds')
prvtCfmProcessResultFrameloss = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 5, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmProcessResultFrameloss.setStatus('current')
if mibBuilder.loadTexts: prvtCfmProcessResultFrameloss.setDescription('Two way frameloss calculated for a specific remote MEP\nin units of hundredths of percent.\nNote: When prvtCfmProcessResultFrameloss has value of 10000, all the values of\nprvtCfmProcessResultOneWayJitter, prvtCfmProcessResultTwoWayJitter and\nprvtCfmProcessResultLatency are irrelevant.')
prvtCfmMa = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6))
prvtCfmMaTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1), )
if mibBuilder.loadTexts: prvtCfmMaTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaTable.setDescription('Table includes extra variables needed for Y.1731\nsupport and service awareness')
prvtCfmMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1), )
dot1agCfmMaCompEntry.registerAugmentions(("PRVT-CFM-MIB", "prvtCfmMaEntry"))
prvtCfmMaEntry.setIndexNames(*dot1agCfmMaCompEntry.getIndexNames())
if mibBuilder.loadTexts: prvtCfmMaEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaEntry.setDescription('a')
prvtCfmMaCompAisLckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompAisLckEnabled.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompAisLckEnabled.setDescription('Turn the AIS & LCK features on/off.')
prvtCfmMaCompAisLckLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 2), Dot1agCfmMDLevelOrNone().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompAisLckLevel.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompAisLckLevel.setDescription("The MD level at which AIS & LCK frames will be sent.\n\tIt should be greater then that of the current domain.\n\tThe default value is '-1' representing 'not-configured'.")
prvtCfmMaCompAisLckInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interval1s", 1), ("interval1min", 2))).clone('interval1s')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompAisLckInterval.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompAisLckInterval.setDescription('The time interval at which AIS and LCK frames will be sent')
prvtCfmMaCompAisLckPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompAisLckPriority.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompAisLckPriority.setDescription("COS parameter for the outgoing AIS & LCK frames.\n The default value is '6'")
prvtCfmMaCompServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompServiceId.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompServiceId.setDescription('The primary service ID attached to this MA')
prvtCfmMaCompNumberOfServices = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 6), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMaCompNumberOfServices.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompNumberOfServices.setDescription('The number of services attached to this MA')
prvtCfmMaCompClearConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 6, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaCompClearConnectivity.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaCompClearConnectivity.setDescription('Number of MEP or 0 for all')
prvtCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7))
prvtCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1), )
if mibBuilder.loadTexts: prvtCfmMepTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTable.setDescription('a')
prvtCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("PRVT-CFM-MIB", "prvtCfmMepEntry"))
prvtCfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: prvtCfmMepEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepEntry.setDescription('a')
prvtCfmMepAlarmSupressed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepAlarmSupressed.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepAlarmSupressed.setDescription('A boolean showing if an AIS or LCK packet\nwas received from a lower level')
prvtCfmMepAisCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepAisCondition.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepAisCondition.setDescription('A boolean showing if there is AIS condition. The value of the object is true (an AIS condition), when\nthere is a  detection of signal-fail condition at a Server layer or reception of AIS at a server (sub-) layer MEP [AIS condition/Rec.\nITU-T Y.1731].\nThe AIS condition will exit when following criteria is met: During an interval equal to 3.5 times the AIS transmission\nperiod indicated in the AIS frames received earlier, the MEP does not receive AIS frames or, when ETH-CC is used,\nupon clearing of LOC defect at MEP /Appendix I/Rec. ITU-T Y.1731.\nIf prvtCfmMaCompAisLckLevel is configured the MEP should send AIS packets.')
prvtCfmMepLckCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepLckCondition.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepLckCondition.setDescription('A boolean showing if the MEP should lock the service\ntowards the client and send LCK packets')
prvtCfmMepAisLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nolifetime", 0), ("lifetime35s", 1), ("lifetime35min", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepAisLifetime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepAisLifetime.setDescription('The lifetime of the last received AIS packet.\n\tDuring an interval equal to 3.5 times the AIS transmission period indicated\n\tin the AIS frames received earlier, the MEP does not receive AIS frames.\n\tThe value is valid (non-zero) if AIS packets are being received.')
prvtCfmMepLckLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nolifetime", 0), ("lifetime35s", 1), ("lifetime35min", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepLckLifetime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepLckLifetime.setDescription('The lifetime of the last received LCK packet.\n\tDuring an interval equal to 3.5 times the LCK transmission period indicated\n\tin the LCK frames received earlier, the MEP does not receive LCK frames.\n\tThe value is valid (non-zero) if AIS packets are being received.')
prvtCfmMepTransmitMcastLbm = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepTransmitMcastLbm.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitMcastLbm.setDescription('A boolean to control sending Y.1731 multicast loopback.')
prvtCfmMepTransmitLbmInfinite = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmInfinite.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmInfinite.setDescription('A boolean to control sending LBMs continuously until the\noperation is explicitly stopped by setting this back to false')
prvtCfmMepTransmitLbmDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmDelay.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmDelay.setDescription('An amount of time to wait between sent LBMs (in seconds).')
prvtCfmMepTransmitLbmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmTimeout.setDescription('An amount of time to wait after the last sent LBM if no\nLBR is received (in seconds).')
prvtCfmMepTransmitLtmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepTransmitLtmTimeout.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLtmTimeout.setDescription('An amount of time to wait after the last sent LTM if no\nLTR is received (in seconds).')
prvtCfmMepTransmitLbmSentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmSentPkts.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmSentPkts.setDescription('Number of successfully sent packets in the current LBM\nsession.')
prvtCfmMepTransmitLbmSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmSuccessRate.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmSuccessRate.setDescription('Success rate of the current LBM session (in percentage*100).')
prvtCfmMepTransmitLbmMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmMinTime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmMinTime.setDescription('Minimum LBR response time (in msec).')
prvtCfmMepTransmitLbmAvgTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmAvgTime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmAvgTime.setDescription('Average LBR response time (in msec).')
prvtCfmMepTransmitLbmMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmMaxTime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepTransmitLbmMaxTime.setDescription('Maximum LBR response time (in msec).')
prvtCfmMepSuportedRemoteMepsNo = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 16, 24, 32))).clone(namedValues=NamedValues(("remoteMeps8", 8), ("remoteMeps16", 16), ("remoteMeps24", 24), ("remoteMeps32", 32))).clone('remoteMeps8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepSuportedRemoteMepsNo.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepSuportedRemoteMepsNo.setDescription('The number of suported remote meps (for TMarc3x0 and TMarc280 devices)')
prvtCfmMepExcludeCCMTLV = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMepExcludeCCMTLV.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMepExcludeCCMTLV.setDescription('Bitmask that specifies what TLVs should be  excluded(for TMarc3x0 and TMarc280 devices):\n\t   On set opertaion:\n\t   BIT4 =  MSB Include/Exclude bit - if it is 1 the tlv is excluded from the specific CCM packet,if it is 0 the tlv will be included in the specific CCM packet\n\t   BIT3 =      If set 1 the OrgSpecific TLV will be  excluded or included \n\t   BIT2 =      If set 1 the InterfaceStatus TLV will be excluded or included\n\t   BIT1 = \t   If set 1 the PortStatus TLV will be excluded or included\n\t   BIT0 =  LSB If set 1 the Sender ID TLV will be excluded or included \n\t   Examples: \n\t    If Interface Status and Port Status will be excluded the bitmask will look like this:\n\t   16 in hexadecimal BIT4 BIT3 BIT2 BIT1 BIT0 \n\t\t\t\t\t\t  1     0    1     1   0\n\t\tIf Interface Status and Port Status will be included the bitmask will look like this:\n\t    06 in hexadecimal BIT4 BIT3 BIT2 BIT1 BIT0 \n\t\t\t\t\t\t  0     0    1     1   0\n\t\tOn get operation it shows the bits corresponding to the  excluded tlvs\n\t\tIf Interface Status and Port Status are excluded:\n\t\t 06 in hexadecimal - 0    1     1   0 \n\t    ')
prvtCfmLbrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2), )
if mibBuilder.loadTexts: prvtCfmLbrTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrTable.setDescription('Table contains loopback results following the last loopback operation.')
prvtCfmLbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "PRVT-CFM-MIB", "prvtCfmLbrSeqNumber"), (0, "PRVT-CFM-MIB", "prvtCfmLbrReceiveOrder"))
if mibBuilder.loadTexts: prvtCfmLbrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrEntry.setDescription('a')
prvtCfmLbrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: prvtCfmLbrSeqNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrSeqNumber.setDescription('Transaction identifier/Sequence number of the received LBR.')
prvtCfmLbrReceiveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: prvtCfmLbrReceiveOrder.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrReceiveOrder.setDescription('An index to distinguish among multiple LBRs with the same LBR\nTransaction Identifier field value. This situation can appear\nin the case of multicast loopback.\n')
prvtCfmLbrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmLbrTime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrTime.setDescription('Remote MEPs response time in milliseconds.')
prvtCfmLbrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmLbrMacAddress.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrMacAddress.setDescription('Remote MEPs mac address. For unicast loopback\nthis is the same as dot1agCfmMepTransmitLbmDestMacAddress,\nbut for multicast loopback there will be different entries.')
prvtCfmLbrBadMsdu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmLbrBadMsdu.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLbrBadMsdu.setDescription('Result of the Data TLV verification.')
prvtCfmLtrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 3), )
if mibBuilder.loadTexts: prvtCfmLtrTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLtrTable.setDescription('This table adds the possibility to measure the response\ntime to a linktrace request.')
prvtCfmLtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 3, 1), )
dot1agCfmLtrEntry.registerAugmentions(("PRVT-CFM-MIB", "prvtCfmLtrEntry"))
prvtCfmLtrEntry.setIndexNames(*dot1agCfmLtrEntry.getIndexNames())
if mibBuilder.loadTexts: prvtCfmLtrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLtrEntry.setDescription('a')
prvtCfmLtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 7, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCfmLtrTime.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLtrTime.setDescription('Remote MPs response time in milliseconds.')
prvtCfmMaAisLckVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 8))
prvtCfmMaAisLckVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 8, 1), )
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanTable.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanTable.setDescription('Table includes extra variables needed for AIS/LCK configurable vlans')
prvtCfmMaAisLckVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 8, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "PRVT-CFM-MIB", "prvtCfmMaAisLckVlanId"))
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanEntry.setDescription('Table includes extra variables needed for AIS/LCK configurable vlans')
prvtCfmMaAisLckVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 8, 1, 1, 1), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanId.setDescription('Vlan ID (towards customer level) that the generated AIS/LCK packets should use.')
prvtCfmMaAisLckVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCfmMaAisLckVlanRowStatus.setDescription('The status of the row.')
prvtCfm1wJitterThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 1)).setObjects(("PRVT-CFM-MIB", "prvtCfmProcessResultOneWayJitter"), ("PRVT-CFM-MIB", "prvtCfmProfile1wJitterWarning"), ("PRVT-CFM-MIB", "prvtCfmProfile1wJitterError"))
if mibBuilder.loadTexts: prvtCfm1wJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtCfm1wJitterThreshold.setDescription('This trap should be sent whenever the one way jitter\non a CFM test will surpass one of the 2 defined thresholds.')
prvtCfmJitterThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 2)).setObjects(("PRVT-CFM-MIB", "prvtCfmProcessResultTwoWayJitter"), ("PRVT-CFM-MIB", "prvtCfmProfileJitterWarning"), ("PRVT-CFM-MIB", "prvtCfmProfileJitterWarningPeriod"), ("PRVT-CFM-MIB", "prvtCfmProfileJitterError"), ("PRVT-CFM-MIB", "prvtCfmProfileJitterErrorPeriod"))
if mibBuilder.loadTexts: prvtCfmJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtCfmJitterThreshold.setDescription('This trap should be sent whenever the two way jitter\non a CFM test will surpass one of the 2 defined thresholds.')
prvtCfmFrameLossThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 3)).setObjects(("PRVT-CFM-MIB", "prvtCfmProcessResultFrameloss"), ("PRVT-CFM-MIB", "prvtCfmProfileFrameLossWarning"), ("PRVT-CFM-MIB", "prvtCfmProfileFrameLossError"))
if mibBuilder.loadTexts: prvtCfmFrameLossThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtCfmFrameLossThreshold.setDescription('This trap should be sent whenever the frame loss\non a CFM test will surpass one of the 2 defined \nthresholds.')
prvtCfmLatencyThreshold = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 4)).setObjects(("PRVT-CFM-MIB", "prvtCfmProcessResultLatency"), ("PRVT-CFM-MIB", "prvtCfmProfileLatencyWarning"), ("PRVT-CFM-MIB", "prvtCfmProfileLatencyWarningPeriod"), ("PRVT-CFM-MIB", "prvtCfmProfileLatencyError"), ("PRVT-CFM-MIB", "prvtCfmProfileLatencyErrorPeriod"))
if mibBuilder.loadTexts: prvtCfmLatencyThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLatencyThreshold.setDescription('This trap should be sent whenever the latency\non a CFM test will surpass one of the 2 defined \nthresholds.')
prvtCfmAisReceived = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 5)).setObjects(("PRVT-CFM-MIB", "prvtCfmMepAisLifetime"))
if mibBuilder.loadTexts: prvtCfmAisReceived.setStatus('current')
if mibBuilder.loadTexts: prvtCfmAisReceived.setDescription('This trap is issued whenever an AIS condition with specified lifetime on a MEP is met.')
prvtCfmLckReceived = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 131, 0, 6)).setObjects(("PRVT-CFM-MIB", "prvtCfmMepLckLifetime"))
if mibBuilder.loadTexts: prvtCfmLckReceived.setStatus('current')
if mibBuilder.loadTexts: prvtCfmLckReceived.setDescription('This trap is issued whenever an LCK condition with specified lifetime on a MEP is met.')
mibBuilder.exportSymbols("PRVT-CFM-MIB", prvtCfmProfileLatencyEnable=prvtCfmProfileLatencyEnable, prvtCfmLbrBadMsdu=prvtCfmLbrBadMsdu, prvtCfmMepLckCondition=prvtCfmMepLckCondition, prvtCfmProfileJitterErrorPeriod=prvtCfmProfileJitterErrorPeriod, prvtCfmMaCompAisLckEnabled=prvtCfmMaCompAisLckEnabled, prvtCfmJitterThreshold=prvtCfmJitterThreshold, prvtCfmMepTransmitLbmTimeout=prvtCfmMepTransmitLbmTimeout, prvtCfmProfileTable=prvtCfmProfileTable, prvtCfmMepTransmitLtmTimeout=prvtCfmMepTransmitLtmTimeout, prvtCfmLtrTable=prvtCfmLtrTable, prvtCfm1wJitterThreshold=prvtCfm1wJitterThreshold, prvtCfmMaAisLckVlanTable=prvtCfmMaAisLckVlanTable, prvtCfmProcessPacketType=prvtCfmProcessPacketType, prvtCfmMepLckLifetime=prvtCfmMepLckLifetime, prvtCfmProcessEntry=prvtCfmProcessEntry, prvtCfmMibConformance=prvtCfmMibConformance, prvtCfmLbrSeqNumber=prvtCfmLbrSeqNumber, prvtCfmMaCompClearConnectivity=prvtCfmMaCompClearConnectivity, prvtCfmMepAisLifetime=prvtCfmMepAisLifetime, prvtCfmMepTransmitLbmSentPkts=prvtCfmMepTransmitLbmSentPkts, prvtCfmProfile=prvtCfmProfile, prvtCfmProfilePriority=prvtCfmProfilePriority, prvtCfmProcessResultEntry=prvtCfmProcessResultEntry, prvtCfmMepTransmitLbmSuccessRate=prvtCfmMepTransmitLbmSuccessRate, prvtCfmStatus=prvtCfmStatus, prvtCfmProcessResultTwoWayJitter=prvtCfmProcessResultTwoWayJitter, prvtCfmProcessTable=prvtCfmProcessTable, prvtCfmUpdateInterval=prvtCfmUpdateInterval, prvtCfmMepExcludeCCMTLV=prvtCfmMepExcludeCCMTLV, prvtCfmMaAisLckVlanId=prvtCfmMaAisLckVlanId, prvtCfmProfileFrameLossError=prvtCfmProfileFrameLossError, prvtCfmProcessResultLatency=prvtCfmProcessResultLatency, prvtCfmLbrTable=prvtCfmLbrTable, prvtCfmLtrEntry=prvtCfmLtrEntry, prvtCfmMepSuportedRemoteMepsNo=prvtCfmMepSuportedRemoteMepsNo, prvtCfmProfileFrameLossEnable=prvtCfmProfileFrameLossEnable, prvtCfmProfileLatencyWarning=prvtCfmProfileLatencyWarning, prvtCfmMa=prvtCfmMa, prvtCfmProcessTableNextIndex=prvtCfmProcessTableNextIndex, prvtCfmMepAlarmSupressed=prvtCfmMepAlarmSupressed, prvtCfmProfileIndex=prvtCfmProfileIndex, prvtCfmMepEntry=prvtCfmMepEntry, prvtCfmProfileLatencyWarningPeriod=prvtCfmProfileLatencyWarningPeriod, prvtCfmMepTransmitLbmInfinite=prvtCfmMepTransmitLbmInfinite, prvtCfmLbrMacAddress=prvtCfmLbrMacAddress, prvtCfmMaAisLckVlanRowStatus=prvtCfmMaAisLckVlanRowStatus, prvtCfmProfile1wJitterEnable=prvtCfmProfile1wJitterEnable, prvtCfmLbrEntry=prvtCfmLbrEntry, prvtCfmProfileJitterWarning=prvtCfmProfileJitterWarning, prvtCfmProcessUnreturnedPkts=prvtCfmProcessUnreturnedPkts, prvtCfmProfileRate=prvtCfmProfileRate, prvtCfmLatencyThreshold=prvtCfmLatencyThreshold, prvtCfmFrameLossThreshold=prvtCfmFrameLossThreshold, prvtCfmProfileTableNextIndex=prvtCfmProfileTableNextIndex, prvtCfmProcessResultOneWayJitter=prvtCfmProcessResultOneWayJitter, prvtCfmLckReceived=prvtCfmLckReceived, prvtCfmProfile1wJitterError=prvtCfmProfile1wJitterError, prvtCfmLbrTime=prvtCfmLbrTime, prvtCfmMaCompNumberOfServices=prvtCfmMaCompNumberOfServices, prvtCfmLtrTime=prvtCfmLtrTime, prvtCfmMaTable=prvtCfmMaTable, prvtCfmMaCompServiceId=prvtCfmMaCompServiceId, prvtCfmProfile1wJitterWarning=prvtCfmProfile1wJitterWarning, prvtCfmMaCompAisLckPriority=prvtCfmMaCompAisLckPriority, prvtCfmProcessResult=prvtCfmProcessResult, prvtCfmProcessIndex=prvtCfmProcessIndex, prvtCfmProcessName=prvtCfmProcessName, prvtCfmProfileName=prvtCfmProfileName, prvtCfmMibNotifications=prvtCfmMibNotifications, prvtCfmProcessRepeatInterval=prvtCfmProcessRepeatInterval, prvtCfmMaEntry=prvtCfmMaEntry, prvtCfmProfileEntry=prvtCfmProfileEntry, prvtCfmProcessRowStatus=prvtCfmProcessRowStatus, prvtCfmProfileSize=prvtCfmProfileSize, prvtCfmProfileLatencyErrorPeriod=prvtCfmProfileLatencyErrorPeriod, prvtCfmMep=prvtCfmMep, prvtCfmMepTransmitLbmMinTime=prvtCfmMepTransmitLbmMinTime, prvtCfmMepTransmitMcastLbm=prvtCfmMepTransmitMcastLbm, prvtCfmMib=prvtCfmMib, prvtCfmProfileJitterError=prvtCfmProfileJitterError, prvtCfmProcessResultFrameloss=prvtCfmProcessResultFrameloss, prvtCfmProfileRowStatus=prvtCfmProfileRowStatus, prvtCfmProfileBucketSize=prvtCfmProfileBucketSize, prvtCfmProfileJitterWarningPeriod=prvtCfmProfileJitterWarningPeriod, prvtCfmProfileFrameLossWarning=prvtCfmProfileFrameLossWarning, prvtCfmMepTransmitLbmMaxTime=prvtCfmMepTransmitLbmMaxTime, prvtCfmMaAisLckVlan=prvtCfmMaAisLckVlan, prvtCfmProcessProfileIndex=prvtCfmProcessProfileIndex, prvtCfmProcessStatus=prvtCfmProcessStatus, prvtCfmProcessResultTable=prvtCfmProcessResultTable, prvtCfmMaCompAisLckInterval=prvtCfmMaCompAisLckInterval, prvtCfmMepTransmitLbmDelay=prvtCfmMepTransmitLbmDelay, prvtCfmLbrReceiveOrder=prvtCfmLbrReceiveOrder, prvtCfmMaAisLckVlanEntry=prvtCfmMaAisLckVlanEntry, prvtCfmProcess=prvtCfmProcess, prvtCfmProfileJitterEnable=prvtCfmProfileJitterEnable, prvtCfmMepAisCondition=prvtCfmMepAisCondition, prvtCfmMaCompAisLckLevel=prvtCfmMaCompAisLckLevel, prvtCfmMepTransmitLbmAvgTime=prvtCfmMepTransmitLbmAvgTime, PYSNMP_MODULE_ID=prvtCfmMib, prvtCfmMepTable=prvtCfmMepTable, prvtCfmAisReceived=prvtCfmAisReceived, prvtCfmProfileLatencyError=prvtCfmProfileLatencyError, prvtCfmMibObjects=prvtCfmMibObjects)
