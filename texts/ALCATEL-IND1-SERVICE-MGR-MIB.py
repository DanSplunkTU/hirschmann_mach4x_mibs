#
# PySNMP MIB module ALCATEL-IND1-SERVICE-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-SERVICE-MGR-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:36 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1serviceMgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1serviceMgr")
AlaEServiceUNIProfileProtocolTreatment, = mibBuilder.importSymbols("ALCATEL-IND1-E-SERVICE-MIB", "AlaEServiceUNIProfileProtocolTreatment")
sapPortId, sapEncapValue = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId", "sapEncapValue")
sdpBindId, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId")
ServObjDesc, svcId, SdpId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "ServObjDesc", "svcId", "SdpId")
TmnxVRtrID, ServiceAdminStatus, TmnxServId, TmnxEncapVal, ServiceOperStatus, TmnxVcIdOrNone, TmnxCustId, TmnxPortID, SdpBindId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxVRtrID", "ServiceAdminStatus", "TmnxServId", "TmnxEncapVal", "ServiceOperStatus", "TmnxVcIdOrNone", "TmnxCustId", "TmnxPortID", "SdpBindId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
MplsLdpIdentifier, = mibBuilder.importSymbols("MPLS-LDP-MIB", "MplsLdpIdentifier")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, IpAddress, iso, ModuleIdentity, MibIdentifier, Counter64, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "IpAddress", "iso", "ModuleIdentity", "MibIdentifier", "Counter64", "NotificationType", "Bits")
MacAddress, DisplayString, TruthValue, TimeStamp, DateAndTime, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TimeStamp", "DateAndTime", "RowStatus", "TextualConvention")
alcatelIND1ServiceMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1))
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIB.setLastUpdated('201208090000Z')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                version of this document is used with the products in question:\n     \n                                   Alcatel-Lucent, Enterprise Solutions Division\n                                (Formerly Alcatel Internetworking, Incorporated)\n                                         26801 West Agoura Road\n                                       Agoura Hills, CA  91301-5122\n                                        United States Of America\n    \n                Telephone:      North America   +1 800 995 2696\n                                        Latin America   +1 877 919 9526\n                                Europe      +31 23 556 0100\n                                Asia        +65 394 7933\n                                All Other   +1 818 878 4507\n    \n                Electronic Mail:    support@ind.alcatel.com\n                World Wide Web:     http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIB.setDescription('The parameters for configuration of the service manager feature.\n\n                The right to make changes in specification and other information\n                contained in this document without prior notice is reserved.\n\n                No liability shall be assumed for any incidental, indirect, special, or\n                consequential damages whatsoever arising from or related to this\n                document or the information contained herein.\n\n                Vendors, end-users, and other interested parties are granted\n                non-exclusive license to use this specification in connection with\n                management of the products for which it is intended to be used.\n\n                               Copyright (C) 1995-2006 Alcatel-Lucent\n                                     ALL RIGHTS RESERVED WORLDWIDE')
class AluLocation(TextualConvention, Integer32):
    description = "The data type AluLocation represents the\n         type of the local 'interface':\n         - 'sap(1)': sap interface\n         - 'sdp(2)': mesh-sdp or spoke-sdp interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("sdp", 2))

class AluServiceId(TextualConvention, Unsigned32):
    description = 'A 16-bit number used to identify a Service. This ID\n                     must be unique within the Service Domain.\n                     The value 0 is used as the null ID.\n                     The value from 1 to 32767 is for static range.\n                     The value from 32768 to 65534 is for dynamic range.\n                     The value 65535 is for all configured IDs.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32767), ValueRangeConstraint(32768, 65534), ValueRangeConstraint(65535, 65535), )
class AluSdpId(TextualConvention, Unsigned32):
    description = 'A 16-bit number used to identify a Service\n                     Distribution Point. This ID must be unique only\n                     within the node where it is defined.\n                     The value 0 is used as the null ID.\n                     The value from 1 to 32767 is for static range.\n                     The value from 32768 to 65534 is for dynamic range.\n                     The value 65535 is for all configured IDs.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32767), ValueRangeConstraint(32768, 65534), ValueRangeConstraint(65535, 65535), )
class AluServiceType(TextualConvention, Integer32):
    description = 'This textual convention is used to specify the\n                     type of a given service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("unknown", 0), ("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("ipipe", 9), ("cpipe", 10), ("spb", 11), ("vxlan", 12), ("local", 13), ("rfpoverspb", 14))

class AluAllocationType(TextualConvention, Integer32):
    description = 'Resource Allocation Type: Static (Manual) or Dynamic (Automatic).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

class AluSdpDynamicType(TextualConvention, Integer32):
    description = 'SDP Type: Unicast or Multicast'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("static", 1), ("dynamicUnicast", 2), ("dynamicMcastRemote", 3), ("dynamicMcastLocal", 4))

class AluSdpOriginType(TextualConvention, Integer32):
    description = 'SDP Creation Origin'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("static", 1), ("pbbDynamicUnicast", 2), ("pbbDynamicMcastRemote", 3), ("pbbDynamicMcastLocal", 4), ("vxlanUnicast", 5), ("vxlanMcast", 6), ("vxlanDynamicUnicast", 7), ("vxlanDynamicMcast", 8))

class AluDateAndTime(TextualConvention, OctetString):
    description = 'ASCII string used to display date and time in\n                     MM/DD/YYYY HH:MM:SS format'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 21)

alcatelIND1ServiceMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1))
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBObjects.setDescription('Branch For Service Manager Managed Objects.')
alcatelIND1ServiceMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2))
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBConformance.setDescription('Branch For Service Manager Conformance Information.')
alcatelIND1ServiceMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBGroups.setDescription('Branch For Service Manager Units Of Conformance.')
alcatelIND1ServiceMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBCompliances.setDescription('Branch For Service Manager Compliance Statements.')
alaServiceMgrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0))
alaServiceMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1))
alaServiceMgrPortProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaServiceMgrPortProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileTable.setDescription('A table that contains service profiles containing performance and control attributes.\n        An entry in this table is created when a new service profile is defined.')
alaServiceMgrPortProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileID"))
if mibBuilder.loadTexts: alaServiceMgrPortProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileEntry.setDescription('A Service Manager Port Profile entry.')
alaServiceMgrPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaServiceMgrPortProfileID.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileID.setDescription('A label given to uniquely identify this port profile. Must be at least one character long.')
alaServiceMgrPortProfileStpBpduTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 2), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileStpBpduTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileStpBpduTreatment.setDescription('This object describes the behavior of the bridge in regards to the spanning tree\n        protocol BPDU received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently Peer is not supported for Spanning Tree')
alaServiceMgrPortProfile8021xTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 3), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfile8021xTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfile8021xTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1x PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.')
alaServiceMgrPortProfile8021ABTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 4), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfile8021ABTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfile8021ABTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1AB PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.')
alaServiceMgrPortProfile8023adTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 5), AlaEServiceUNIProfileProtocolTreatment().clone('peer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfile8023adTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfile8023adTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1ad PDU\n        (LACP) frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol. Currently Peer is only configurable for LACP frames.')
alaServiceMgrPortProfileGvrpTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 6), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileGvrpTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileGvrpTreatment.setDescription('This object describes the behavior of the bridge in regards to the GVRP PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for GVRP')
alaServiceMgrPortProfileAmapTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 7), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileAmapTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileAmapTreatment.setDescription('This object describes the behavior of the bridge in regards to the Alcatel\n        propietary AMAP PDU frames received on the Access Port. Tunnel (1) enables the PDU to\n        be tunneled across the provider network.  Discard (2) causes the PDU of the\n        protocol to be discarded and not enter the provider network. Peer (3) means\n        that on this port the bridge is to participate in the protocol.')
alaServiceMgrPortProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileRowStatus.setDescription('The status of this table entry.')
alaServiceMgrPortProfileMvrpTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 9), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileMvrpTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileMvrpTreatment.setDescription('This object describes the behavior of the bridge in regards to the MVRP PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for MVRP')
alaServiceMgrPortProfileCiscoPduTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 10), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoPduTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoPduTreatment.setDescription('This object describes the behavior of the bridge in regards to the Cisco PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for Cisco PDU')
alaServiceMgrPortProfileCiscoVlanTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 11), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoVlanTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoVlanTreatment.setDescription('This object describes the behavior of the bridge in regards to the Cisco Vlan PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for Cisco Vlan PDU')
alaServiceMgrPortProfileCiscoUplinkTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 1, 1, 12), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoUplinkTreatment.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileCiscoUplinkTreatment.setDescription('This object describes the behavior of the bridge in regards to the Cisco Uplink PDU\n        frames received on the Access Port. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for Cisco Uplink PDU')
alaServiceMgrPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaServiceMgrPortTable.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortTable.setDescription('The port table has an entry for each port.')
alaServiceMgrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortID"))
if mibBuilder.loadTexts: alaServiceMgrPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortEntry.setDescription('A Service Manager Port entry.')
alaServiceMgrPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaServiceMgrPortID.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortID.setDescription('IfIndex uniquely identify this port table.')
alaServiceMgrPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("access", 1), ("network", 2))).clone('network')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortMode.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortMode.setDescription("The alaServiceMgrPortMode variable indicates if the interface on this port\n         is configured as a service access port or a network access port.\n         Once the port's operation mode has been configured for 'access' mode,\n         multiple services may be configured on the port.\n         An access port can be created manually by Service Manager, UNP or EVB.")
alaServiceMgrPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("mplsEncap", 3), ("bcpNullEncap", 4), ("bcpDot1qEncap", 5), ("ipcpEncap", 6), ("frEncap", 7), ("pppAutoEncap", 8), ("atmEncap", 9), ("qinqEncap", 10), ("wanMirrorEncap", 11), ("ciscoHDLCEncap", 12), ("cemEncap", 13))).clone('nullEncap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortEncapType.setStatus('deprecated')
if mibBuilder.loadTexts: alaServiceMgrPortEncapType.setDescription('Currently not required -- SAP configuration specifies the types of\n                 frame (untagged, tagged or qinq) that can ingress/egress this port.')
alaServiceMgrPortPortProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortPortProfileID.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortPortProfileID.setDescription('This Layer2 Profile associated with this port.')
alaServiceMgrPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortRowStatus.setDescription('The status of this table entry.')
alaServiceMgrPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaServiceMgrPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortLinkStatus.setDescription('Link Status up/down which will affect all the SAPs configured\n                     on this port.')
alaServiceMgrPortSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 7), AluAllocationType().clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaServiceMgrPortSapType.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortSapType.setDescription('Resource Allocation Type: Static (Manual) or Dynamic (Automatic).')
alaServiceMgrPortSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaServiceMgrPortSapCount.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortSapCount.setDescription('The total number of SAPs configured on this port.')
alaServiceMgrPortVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 9), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortVlanXlation.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n                     on this port.')
alaServiceMgrPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 2, 1, 10), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaServiceMgrPortDescription.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortDescription.setDescription('Generic information about this port.')
alaSapExtraInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaSapExtraInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaSapExtraInfoTable.setDescription('A table that contains SAP information.')
alaSapExtraInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaSapExtraInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaSapExtraInfoEntry.setDescription('Information about a specific SAP.')
alaSapInfoTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSapInfoTrusted.setStatus('obsolete')
if mibBuilder.loadTexts: alaSapInfoTrusted.setDescription('Indicates whether the SAP is trusted.')
alaSapInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSapInfoPriority.setStatus('obsolete')
if mibBuilder.loadTexts: alaSapInfoPriority.setDescription('Priority for this SAP.')
alaSvcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaSvcBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: alaSvcBaseInfoTable.setDescription('A table that contains basic service information.')
alaSvcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"))
if mibBuilder.loadTexts: alaSvcBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: alaSvcBaseInfoEntry.setDescription('Basic information about a specific service.')
alaSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 1), AluServiceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSvcId.setStatus('current')
if mibBuilder.loadTexts: alaSvcId.setDescription('The value of the object alaSvcId specifies the\n                     Service identifier. This value should be unique within the\n                     service domain.')
alaSvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSvcRowStatus.setDescription("This value of the object alaSvcRowStatus specifies the\n                     status of this row.\n                     To delete an entry from this table, the corresponding\n                     service must be administratively down, have no SAP's\n                     defined on it, and have no SDP bindings.")
alaSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 3), AluServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcType.setStatus('current')
if mibBuilder.loadTexts: alaSvcType.setDescription("The value of the object alaSvcType specifies the service\n                     type: e.g. vpls, spb, etc. The value of this object\n                     must be specified when the row is created and cannot be\n                     changed while the row status is 'active'.")
alaSvcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcDescription.setStatus('current')
if mibBuilder.loadTexts: alaSvcDescription.setDescription('The value of the object alaSvcDescription specifiers an\n                     optional, generic information about this service.')
alaSvcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9194))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcMtu.setStatus('current')
if mibBuilder.loadTexts: alaSvcMtu.setDescription('The value of the object alaSvcMtu specifies the largest frame\n                       size (in octets) that this service can handle.\n                       The default value of this object depends on the service\n                       type:\n                       1514 octets for epipe, p3pipe and tls, 1508 for apipe\n                       and fpipe, and 1500 octets for vprn, ipipe and ies, 1514\n                       octets for cpipe.')
alaSvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSvcAdminStatus.setDescription('The value of the object alaSvcAdminStatus specifies the\n                     desired state of this service.')
alaSvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 7), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaSvcOperStatus.setDescription("The value of the object alaSvcOperStatus indicates the\n                     operating state of this service. The requirements for a\n                     service to be operationally up depend on the service type:\n                     tls services are 'up' when the service is\n                     administratively up and either at least two SAP's or\n                     spoke SDP Bind's, or one SAP or spoke SDP Bind and\n                     at least one mesh SDP Bind are operationally up.")
alaSvcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcNumSaps.setStatus('current')
if mibBuilder.loadTexts: alaSvcNumSaps.setDescription('The value of the object alaSvcNumSaps indicates the number of\n                     SAPs defined on this service.')
alaSvcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcNumSdps.setStatus('current')
if mibBuilder.loadTexts: alaSvcNumSdps.setDescription('The value of the object alaSvcNumSdps indicates the number of\n                     SDPs bound to this service.')
alaSvcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 10), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: alaSvcLastMgmtChange.setDescription('The value of of the object alaSvcLastMgmtChange indicates\n                       the value of sysUpTime at the time of the most recent\n                       management-initiated change to this service.')
alaSvcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 11), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: alaSvcLastStatusChange.setDescription('The value of the object alaSvcLastStatusChange indicates the\n                     value of sysUpTime at the time of the most recent\n                     operating status change to his service.')
alaSvcDefMeshVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcDefMeshVcId.setStatus('current')
if mibBuilder.loadTexts: alaSvcDefMeshVcId.setDescription('The value of the object alaSvcDefMeshVcId specifies, only in\n                       services that accept mesh SDP bindings, the VC ID portion\n                       of the sdpBindId index of each mesh SDP binding defined in\n                       the service. The default value of this object is equal to\n                       the service ID.')
alaSvcVFI = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcVFI.setStatus('current')
if mibBuilder.loadTexts: alaSvcVFI.setDescription('The Virtual Forwarding Instance (VFI) allocated for a service on\n                     a LER or BEB switch. This service instance defines the forwarding\n                     plane for the data packets among virtual port members associated\n                     with the VFI. The VFI has one-to-one mapping relationship with\n                     the ServiceId for this service instance.')
alaSvcMcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcMcIndex.setStatus('current')
if mibBuilder.loadTexts: alaSvcMcIndex.setDescription('The Multicast Index associated with a VFI which is used to setup\n                     the multicast replication logic for this service instance on the\n                     LER or BEB switch. The McIndex has one-to-one mapping relationship\n                     with the ServiceId for this service instance.')
alaSvcAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 15), AluAllocationType().clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcAllocationType.setStatus('current')
if mibBuilder.loadTexts: alaSvcAllocationType.setDescription('Resource Allocation Type: Static (Manual) or Dynamic (Automatic).')
alaSvcStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 16), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcStatsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSvcStatsAdminStatus.setDescription('To enable or disable ingress and egress statistics counters for packets\n                     flowing through the SAP or Sdp Bind objects for this service instance.')
alaSvcRemoteFlushStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 17), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcRemoteFlushStatus.setStatus('current')
if mibBuilder.loadTexts: alaSvcRemoteFlushStatus.setDescription('To enable or disable flushing C-Vlan MACs learned at the remote nodes.')
alaSvcIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcIsid.setStatus('current')
if mibBuilder.loadTexts: alaSvcIsid.setDescription('The i-domain Service Indentifier (I-SID) which identifies the service\n                     instance in a PBB network on a BEB switch. For a customer packet flowing\n                     toward the b-domain, the I-SID is derived from the VFI and inserted into\n                     the packet. For a packet arrived from the b-domain, the I-SID is used\n                     to identify the VFI for the i-domain processing.')
alaSvcBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcBVlan.setStatus('current')
if mibBuilder.loadTexts: alaSvcBVlan.setDescription('The Backbone Vlan Id (BVlan) which defines the b-domain for the PBB traffic.')
alaSvcMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2), ("hybrid", 3))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcMulticastMode.setStatus('current')
if mibBuilder.loadTexts: alaSvcMulticastMode.setDescription('To configure the multicast replication mode for each service:\n                     Head-end(1) where a non-unicast packet entering the SAP port\n                     is replicated once for each receiver in the b-domain using its\n                     unicast BMAC.\n                     Tandem(2) where a non-unicast packet entering the SAP port is\n                     replicated once at each node using the multicast group address.\n                     Hybrid(3) combination of Head-end and Tandem replication.')
alaSvcIngressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcIngressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSvcIngressPacketCount.setDescription('The total ingress packet count flowing through this service.')
alaSvcIngressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcIngressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSvcIngressByteCount.setDescription('The total ingress byte count flowing through this service.')
alaSvcEgressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcEgressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSvcEgressPacketCount.setDescription('The total egress packet count flowing through this service.')
alaSvcEgressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcEgressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSvcEgressByteCount.setDescription('The total egress byte count flowing through this service.')
alaSvcClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("done", 0), ("clear", 1))).clone('done')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcClearCounters.setStatus('current')
if mibBuilder.loadTexts: alaSvcClearCounters.setDescription('When set to clear (1), all ingress/egress stats counters of this service will be\n                     reset to 0. This object will be set to done (0) when all counters are cleared.')
alaSvcSapVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 26), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcSapVlanXlation.setStatus('current')
if mibBuilder.loadTexts: alaSvcSapVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n                     in this service if the corresponding access ports for the SAPs also\n                     has the vlan translation enabled.')
alaSvcVnid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 16777215), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcVnid.setStatus('current')
if mibBuilder.loadTexts: alaSvcVnid.setDescription('The virtual network identifier (VNID). A 24-bit value used to designate the\n                     individual VXLAN overlay network on which the communicating VMs are situated.\n                     VMs in different VXLAN overlay networks cannot communicate with each other.\n                     Value 0 and 0xfffffff are currently reserved.\n                     Value -1 indicates all VNIDs currently configured.')
alaSvcRemoveIngressTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 28), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcRemoveIngressTag.setStatus('current')
if mibBuilder.loadTexts: alaSvcRemoveIngressTag.setDescription('To enable/disable the removal of the tag from the ingress pkts matching all SAPs\n                     configured in this service')
alaSvcL3VpnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 29), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcL3VpnIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaSvcL3VpnIfIndex.setDescription('The interface index of the L3-VPN IP interface associated with this service.\n                     Value 0 indicates no L3-VPN interface is associated with this service.')
alaSvcL3VpnIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 30), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcL3VpnIfName.setStatus('current')
if mibBuilder.loadTexts: alaSvcL3VpnIfName.setDescription('The interface name of the L3-VPN IP interface associated with this service')
alaSvcL3VpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcL3VpnVrfName.setStatus('current')
if mibBuilder.loadTexts: alaSvcL3VpnVrfName.setDescription('The current VRF instance name for the L3-VPN interface associated with this service.\n                     The default VRF is assumed if not specifed.')
alaSvcL3VpnMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1280, 9198), )).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSvcL3VpnMtu.setStatus('current')
if mibBuilder.loadTexts: alaSvcL3VpnMtu.setDescription('The maximum packet size of a IP control packet that can be handled by the CPU\n                     for this service.\n                     Value 0 indicates the default mtu.')
alaSapBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5), )
if mibBuilder.loadTexts: alaSapBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: alaSapBaseInfoTable.setDescription('A table that contains basic SAP information.')
alaSapBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPortId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEncapValue"))
if mibBuilder.loadTexts: alaSapBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: alaSapBaseInfoEntry.setDescription('Information about a specific SAP.')
alaSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSapPortId.setStatus('current')
if mibBuilder.loadTexts: alaSapPortId.setDescription('The ID of the access port where this SAP\n                     is defined.')
alaSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 2), TmnxEncapVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaSapEncapValue.setDescription('The value of the label used to identify this\n                     SAP on the access port specified by sapPortId.')
alaSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSapRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'.")
alaSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 4), AluServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapType.setStatus('current')
if mibBuilder.loadTexts: alaSapType.setDescription('This object indicates the type of service where\n                     this SAP is defined.')
alaSapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapDescription.setStatus('current')
if mibBuilder.loadTexts: alaSapDescription.setDescription('Generic information about this SAP.')
alaSapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 6), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSapAdminStatus.setDescription('The desired state of this SAP.')
alaSapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("portMtuTooSmall", 5), ("svcAdminDown", 6), ("iesIfAdminDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaSapOperStatus.setDescription('The value of the object sapOperStatus indicates the\n                     operating state of this SAP.')
alaSapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 8), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: alaSapLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this SAP.')
alaSapLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 9), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: alaSapLastStatusChange.setDescription('The value of sysUpTime at the time of the\n                     most recent operating status change to this\n                     SAP.')
alaSapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 10), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("iesIfAdminDown", 2), ("portOperDown", 3), ("portMtuTooSmall", 4), ("l2OperDown", 5), ("ingressQosMismatch", 6), ("egressQosMismatch", 7), ("relearnLimitExceeded", 8), ("recProtSrcMac", 9), ("subIfAdminDown", 10), ("sapIpipeNoCeIpAddr", 11), ("sapTodResourceUnavail", 12), ("sapTodMssResourceUnavail", 13), ("sapParamMismatch", 14), ("sapCemNoEcidOrMacAddr", 15), ("sapStandbyForMcRing", 16), ("sapSvcMtuTooSmall", 17), ("ingressNamedPoolMismatch", 18), ("egressNamedPoolMismatch", 19), ("ipMirrorNoMacAddr", 20), ("sapEpipeNoRingNode", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapOperFlags.setStatus('current')
if mibBuilder.loadTexts: alaSapOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SAP.')
alaSapTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapTrusted.setStatus('current')
if mibBuilder.loadTexts: alaSapTrusted.setDescription('Indicates whether the SAP is trusted.')
alaSapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapPriority.setStatus('current')
if mibBuilder.loadTexts: alaSapPriority.setDescription('Priority of this SAP.')
alaSapSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 13), AluServiceId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapSvcId.setStatus('current')
if mibBuilder.loadTexts: alaSapSvcId.setDescription('The Service Id where this SAP is attached to.')
alaSapSvcVFI = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapSvcVFI.setStatus('current')
if mibBuilder.loadTexts: alaSapSvcVFI.setDescription('The Service Virtual Forwarding Instance which defines the\n                     broadcast domain among SAPs and Sdp-Binds of this instance.')
alaSapVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapVirtualPort.setStatus('current')
if mibBuilder.loadTexts: alaSapVirtualPort.setDescription('The logical representation of a SAP associated with a service\n                     instance where customer packets ingress and egress.')
alaSapAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 16), AluAllocationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapAllocationType.setStatus('current')
if mibBuilder.loadTexts: alaSapAllocationType.setDescription('Resource Allocation Type: Static (Manual CLI) or Dynamic (through\n                     requests from UNP or EVB).')
alaSapStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 17), ServiceAdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapStatsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSapStatsAdminStatus.setDescription('To enable/disable the ingress/egress stats counters on this SAP.')
alaSapIngressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapIngressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSapIngressPacketCount.setDescription('The total ingress packet count flowing through this SAP.')
alaSapIngressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapIngressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSapIngressByteCount.setDescription('The total ingress byte count flowing through this SAP.')
alaSapEgressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapEgressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSapEgressPacketCount.setDescription('The total egress packet count flowing through this SAP.')
alaSapEgressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSapEgressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSapEgressByteCount.setDescription('The total egress byte count flowing through this SAP.')
alaSapClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("done", 0), ("clear", 1))).clone('done')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSapClearCounters.setStatus('current')
if mibBuilder.loadTexts: alaSapClearCounters.setDescription('When set to clear (1), all ingress/egress stats counters of this sap will be\n                     reset to 0. This object will be set to done (0) when all counters are cleared.')
alaSdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6), )
if mibBuilder.loadTexts: alaSdpInfoTable.setStatus('current')
if mibBuilder.loadTexts: alaSdpInfoTable.setDescription('A table that contains SDP information.')
alaSdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpId"))
if mibBuilder.loadTexts: alaSdpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: alaSdpInfoEntry.setDescription('Information about a specific SDP.')
alaSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 1), AluSdpId())
if mibBuilder.loadTexts: alaSdpId.setStatus('current')
if mibBuilder.loadTexts: alaSdpId.setDescription('SDP identifier.')
alaSdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'. To delete an entry\n                     from this table, the corresponding SDP must be\n                     administratively down, not bound to any service,\n                     and not in use as a mirror destination.")
alaSdpSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 3), AluServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpSvcType.setStatus('current')
if mibBuilder.loadTexts: alaSdpSvcType.setDescription('This object indicates the type of service where\n                     this SDP is defined.')
alaSdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2), ("pbb", 3), ("vxlan", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpDelivery.setStatus('current')
if mibBuilder.loadTexts: alaSdpDelivery.setDescription("This object specifies the type of delivery used\n                     by this SDP: e.g. GRE or MPLS. The value of this\n                     object must be specified when the row is created\n                     and cannot be changed while the row status is\n                     'active'.")
alaSdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpFarEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaSdpFarEndIpAddress.setDescription("This object specifies the IP address of the\n                     remote end of the MPLS or VxLAN tunnel defined\n                     by this SDP. For SPB, this object is not used. \n                     For VxLAN, the value of this object must\n                     be set for the row to become 'active', and\n                     can only be changed while the admin status\n                     of the SDP is 'down'. The value can be a unicast\n                     IP address of a single far-end node, or a multicast\n                     group address for multiple member nodes.")
alaSdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpDescription.setStatus('current')
if mibBuilder.loadTexts: alaSdpDescription.setDescription('Generic information about this SDP.')
alaSdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2))).clone('tldp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpLabelSignaling.setStatus('current')
if mibBuilder.loadTexts: alaSdpLabelSignaling.setDescription("This object specifies the signaling protocol\n                     used to obtain the ingress and egress labels\n                     used in frames transmitted and received on\n                     this SDP. When the value of this object is\n                     'none' then the labels are manually assigned\n                     at the time the SDP is bound to a service. The\n                     value of this object can only be changed while\n                     the admin status of the SDP is 'down'.")
alaSdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpAdminStatus.setDescription('The desired state of this SDP.')
alaSdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("up", 1), ("notAlive", 2), ("notReady", 3), ("invalidEgressInterface", 4), ("transportTunnelDown", 5), ("down", 6), ("created", 7), ("destroyed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpOperStatus.setDescription("The operating state of this SDP. The value\n                     'notAlive' is valid only when keep-alive is\n                     enabled, and it means that the keep-alive\n                     operating status is not alive. The value\n                     'notReady' is valid only when this SDP uses a\n                     label signaling protocol (e.g. TLDP) and it means\n                     that the signaling session with the far-end peer\n                     has not been established. The value\n                     'invalidEgressInterface' indicates that the\n                     IOM's have detected that the egress interface\n                     towards the far-end device is not a network\n                     port.")
alaSdpAdminPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 9194), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpAdminPathMtu.setStatus('current')
if mibBuilder.loadTexts: alaSdpAdminPathMtu.setDescription('This object specifies the desired largest service\n                     frame size (in octets) that can be transmitted\n                     through this SDP to the far-end ESR, without\n                     requiring the packet to be fragmented. The default\n                     value of zero indicates that the path MTU should\n                     be computed dynamically from the corresponding\n                     MTU of the tunnel.')
alaSdpOperPathMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpOperPathMtu.setStatus('current')
if mibBuilder.loadTexts: alaSdpOperPathMtu.setDescription('This object specifies the actual largest service\n                     frame size (in octets) that can be transmitted\n                     through this SDP to the far-end ESR, without\n                     requiring the packet to be fragmented. In order\n                     to be able to bind this SDP to a given service,\n                     the value of this object must be equal to or\n                     larger than the MTU of the service, as defined\n                     by its svcMtu.')
alaSdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 12), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: alaSdpLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this SDP.')
alaSdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpLdpEnabled.setStatus('current')
if mibBuilder.loadTexts: alaSdpLdpEnabled.setDescription("When the value of this object is 'true'\n                     the transport LSP's are signalled by LDP,\n                     as opposed to being provisioned static or\n                     RSVP-signalled LSP's. This object applies\n                     only to MPLS SDP's.")
alaSdpVlanVcEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpVlanVcEtype.setStatus('current')
if mibBuilder.loadTexts: alaSdpVlanVcEtype.setDescription('This object specifies the Ethertype used in\n                     frames sent out this SDP, when the VC type\n                     is vlan.')
alaSdpAdvertisedVllMtuOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpAdvertisedVllMtuOverride.setStatus('current')
if mibBuilder.loadTexts: alaSdpAdvertisedVllMtuOverride.setDescription("When the value of this object is 'true'\n                     the advertised MTU of a VLL spoke SDP bind\n                     includes the 14-byte L2 header, so that it is\n                     backward compatible with pre-2.0 software.")
alaSdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 16), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("keepaliveFailure", 3), ("invalidEgressInterface", 4), ("noSystemIpAddress", 5), ("transportTunnelUnstable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpOperFlags.setStatus('current')
if mibBuilder.loadTexts: alaSdpOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SDP.')
alaSdpLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 17), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: alaSdpLastStatusChange.setDescription('The value of sysUpTime at the time of the\n                     most recent operating status change to this\n                     SDP.')
alaSdpNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpNetworkPort.setStatus('current')
if mibBuilder.loadTexts: alaSdpNetworkPort.setDescription('The ifIndex of the network port where isis discovered the\n                     neighbor node information (BVlan and BMac).')
alaSdpBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBVlan.setStatus('current')
if mibBuilder.loadTexts: alaSdpBVlan.setDescription('The Backbone Vlan Id (BVlan) where isis has discovered the\n                     neighbor node information (BVlan and BMac).')
alaSdpSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpSystemId.setStatus('current')
if mibBuilder.loadTexts: alaSdpSystemId.setDescription('The Backbone MAC (B-MAC) where isis has discovered the\n                     neighbor node information (BVlan and BMac).')
alaSdpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpSystemName.setStatus('current')
if mibBuilder.loadTexts: alaSdpSystemName.setDescription('The neighbor host name associated with the SDP object.')
alaSdpSpSourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpSpSourceId.setStatus('current')
if mibBuilder.loadTexts: alaSdpSpSourceId.setDescription('The neighbor Shortest Path Source Id (the LSB 20-bit of SystemId.')
alaSdpAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 23), AluAllocationType().clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpAllocationType.setStatus('current')
if mibBuilder.loadTexts: alaSdpAllocationType.setDescription('Allocation Type: Static (Manual) or Dynamic (Automatic).')
alaSdpDynamicType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 24), AluSdpDynamicType().clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpDynamicType.setStatus('current')
if mibBuilder.loadTexts: alaSdpDynamicType.setDescription('SDP type allocated for Unicast or Multicast Path according\n                     to the tunnel type.')
alaSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindCount.setDescription('The number of Bind-SDPs bound to this SDP.')
alaSdpIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpIsid.setStatus('current')
if mibBuilder.loadTexts: alaSdpIsid.setDescription('The i-domain Service Indentifier (I-SID) for the Group Mac\n                     assigned to this Multicast SDP.')
alaSdpMcastPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpMcastPortList.setStatus('current')
if mibBuilder.loadTexts: alaSdpMcastPortList.setDescription('List of egress ports for this Multicast SDP.')
alaSdpCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 28), AluSdpOriginType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpCreationOrigin.setStatus('current')
if mibBuilder.loadTexts: alaSdpCreationOrigin.setDescription('SDP creation origin staticly or dynamically for the tunnel types\n                     (MPLS, PBB, VxLAN...)')
alaSdpAdminTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 6, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone('@')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpAdminTTL.setStatus('current')
if mibBuilder.loadTexts: alaSdpAdminTTL.setDescription('The number of hops an IP packet travels through the VxLAN tunnel\n                     before being discarded. This value is inserted into the TTL field\n                     of the IP header in the VXLAN encapsulated header originating from\n                     this node.')
alaSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindTable.setDescription('A table that contains SDP binding information.')
alaSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"))
if mibBuilder.loadTexts: alaSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindEntry.setDescription('Information about a specific SDP binding.')
alaSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 1), SdpBindId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaSdpBindId.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindId.setDescription('SDP Binding identifier.')
alaSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindRowStatus.setDescription("This object indicates the status of this row. The\n                     only values supported during a set operation are\n                     'createAndGo' and 'destroy'.")
alaSdpBindSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 3), AluServiceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindSvcType.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindSvcType.setDescription('This object indicates the type of service where\n                     this Sdp Bind is defined.')
alaSdpBindAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2048, 18431), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindAdminIngressLabel.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindAdminIngressLabel.setDescription('The static MPLS VC label used by the far-end device\n                     to send packets to this device in this service via\n                     this SDP. The value of alaSdpBindAdminIngressLabel is\n                     1 when it is used by a mirror service. All mirror SDPs\n                     use this label to avoid the unnecessary use of\n                     additional labels.')
alaSdpBindAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindAdminEgressLabel.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindAdminEgressLabel.setDescription('The static MPLS VC label used by this device to send\n                     packets to the far-end device in this service via\n                     this SDP.')
alaSdpBindOperIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindOperIngressLabel.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindOperIngressLabel.setDescription("The MPLS label used by the far-end device to send\n                     packets to this device in this service via this SDP.\n                     This label is either alaSdpBindAdminIngressLabel, if\n                     not null, or the one obtained via the SDP's signaling\n                     protocol.")
alaSdpBindOperEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1048575), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindOperEgressLabel.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindOperEgressLabel.setDescription("The MPLS label used by this device to send packets\n                     to the far-end device in this service via this SDP.\n                     This label is either alaSdpBindAdminEgressLabel, if\n                     not null, or the one obtained via the SDP's signaling\n                     protocol.")
alaSdpBindAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 8), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindAdminStatus.setDescription('The desired state of this Service-SDP binding.')
alaSdpBindOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("up", 1), ("noEgressLabel", 2), ("noIngressLabel", 3), ("noLabels", 4), ("down", 5), ("svcMtuMismatch", 6), ("sdpPathMtuTooSmall", 7), ("sdpNotReady", 8), ("sdpDown", 9), ("sapDown", 10), ("created", 11), ("destroyed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindOperStatus.setDescription("The value of alaSdpBindOperStatus indicates the operating status of\n         this Service-SDP binding.\n            'up'               The Service-SDP binding is operational.\n\n            'noEgressLabel'    The ingress label is available but the\n                               egress one is missing.\n\n            'noIngressLabel'   The egress label is available but the\n                               ingress one is not.\n\n            'noLabels'         Both the ingress and the egress labels\n                               are missing.\n\n            'down'             The binding is administratively down.\n\n            'svcMtuMismatch'   Both labels are available, but a service\n                               MTU mismatch was detected between the local\n                               and the far-end devices.\n\n            'sdpPathMtuTooSmall' The operating path MTU of the corresponding\n                                 SDP is smaller than the service MTU.\n\n            'sdpNotReady'      The SDP's signaling session is down.\n\n            'sdpDown'          The SDP is not operationally up.\n\n            'sapDown'          The SAP associated with the service is down.")
alaSdpBindLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 10), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this Service-SDP binding.')
alaSdpBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spoke", 1), ("mesh", 2))).clone('mesh')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindType.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindType.setDescription("This object indicates whether this Service SDP\n                     binding is a spoke or a mesh.  The value of this\n                     object must be specified when the row is created\n                     and cannot be changed while the row status is\n                     'active'.")
alaSdpBindOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 12), Bits().clone(namedValues=NamedValues(("sdpBindAdminDown", 0), ("svcAdminDown", 1), ("sapOperDown", 2), ("sdpOperDown", 3), ("sdpPathMtuTooSmall", 4), ("noIngressVcLabel", 5), ("noEgressVcLabel", 6), ("svcMtuMismatch", 7), ("vcTypeMismatch", 8), ("relearnLimitExceeded", 9), ("iesIfAdminDown", 10), ("releasedIngressVcLabel", 11), ("labelsExhausted", 12), ("svcParamMismatch", 13), ("insufficientBandwidth", 14), ("pwPeerFaultStatusBits", 15), ("meshSdpDown", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindOperFlags.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindOperFlags.setDescription('This object specifies all the conditions that\n                     affect the operating status of this SDP Bind.')
alaSdpBindLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 13), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindLastStatusChange.setDescription('The value of the object alaSdpBindLastStatusChange specifies\n                     the value of sysUpTime at the time of the most recent\n                     operating status change to this SDP Bind.')
alaSdpBindControlWordBit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindControlWordBit.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindControlWordBit.setDescription("alaSdpBindControlWordBit specifies whether the use of the\n                     'ControlWord' is preferred or not. The value of \n                     alaSdpBindControlWordBit is exchanged with LDP peer during\n                     pseudowire negotiation time. The default value is\n                     determined by alaSdpBindVcType. alaSdpBindVcType of atmSdu and \n                     frDlci must have default value of 'true'. Other values of \n                     alaSdpBindVcType must have default value of 'false'.")
alaSdpBindOperControlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindOperControlWord.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindOperControlWord.setDescription("alaSdpBindOperControlWord indicates whether the 'ControlWord'\n                     is used or not. The value of alaSdpBindOperControlWord is \n                     negotiated with the LDP peer.  When both the local and the\n                     peer prefer the use of the 'ControlWord', alaSdpBindOperControlWord\n                     has the value of 'true'.")
alaSdpBindNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindNetworkPort.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindNetworkPort.setDescription('The ifIndex of the network port associated with a service instance\n                     where mpls labeled or b-domain packets ingress and egress.')
alaSdpBindVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindVirtualPort.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindVirtualPort.setDescription('The logical representation of a network port associated with a service\n                     instance where mpls labeled or b-domain packets ingress and egress.')
alaSdpBindIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindIsid.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindIsid.setDescription('The i-domain Service Indentifier (I-SID) for the Group Mac\n                     assigned to this Multicast SDP Bind.')
alaSdpBindBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindBVlan.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindBVlan.setDescription('The Backbone VlanId (BVlan) associated with the Sdp Bind object.')
alaSdpBindSystemId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 20), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindSystemId.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindSystemId.setDescription('The neighbor Backbone MAC (B-MAC) associated with the Sdp Bind object.')
alaSdpBindSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindSystemName.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindSystemName.setDescription('The neighbor host name associated with the Sdp Bind object for SPB or\n                     the interface name to reach the far-end node for VxLAN.')
alaSdpBindAllocationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 22), AluAllocationType().clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindAllocationType.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindAllocationType.setDescription('Allocation Type: Static (Manual) or Dynamic (Automatic).')
alaSdpBindIngressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindIngressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindIngressPacketCount.setDescription('The total ingress packet count flowing through this SDP Bind.')
alaSdpBindIngressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindIngressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindIngressByteCount.setDescription('The total ingress byte count flowing through this SDP Bind.')
alaSdpBindEgressPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindEgressPacketCount.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindEgressPacketCount.setDescription('The total egress packet count flowing through this SDP Bind.')
alaSdpBindEgressByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindEgressByteCount.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindEgressByteCount.setDescription('The total egress byte count flowing through this SDP Bind.')
alaSdpBindCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 27), AluSdpOriginType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindCreationOrigin.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindCreationOrigin.setDescription('SDP creation origin staticly or dynamically for the tunnel types\n                     (MPLS, PBB, VxLAN...)')
alaSdpBindFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindFarEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindFarEndIpAddress.setDescription('This object specifies the Unicast IP address or the Multicast Group Address\n                     of the the SDP')
alaSdpBindVnid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindVnid.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindVnid.setDescription('The virtual network identifier (VNID). A 24-bit value used to designate the\n                     individual VXLAN overlay network on which the communicating VMs are situated.\n                     VMs in different VXLAN overlay networks cannot communicate with each other.\n                     Value 0 and 0xfffffff are currently reserved -- Propietary')
alaSdpBindDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 30), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaSdpBindDescription.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindDescription.setDescription('Generic information about this SDP Bind.')
alaSdpBindStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 7, 1, 31), ServiceAdminStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSdpBindStatsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindStatsAdminStatus.setDescription('To enable/disable the ingress/egress stats counters on this Bind SDP.')
alaSvcMgrSysTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8))
alaSvcMgrSysId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcMgrSysId.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSysId.setDescription('SystemId (System Mac) assigned for this node by\n                     chassis supervison after boot-up')
alaSvcMgrSysName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcMgrSysName.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSysName.setDescription('SystemName assigned for this node by\n                     chassis supervison after boot-up')
alaSvcMgrSysLastMgmtChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 3), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcMgrSysLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSysLastMgmtChange.setDescription('The value of sysUpTime at the time of the most recent\n                       management-initiated change to this system configuration')
alaSvcMgrSysLastStatusChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 4), AluDateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaSvcMgrSysLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSysLastStatusChange.setDescription('The value of sysUpTime at the time of the most recent\n                     operating status change to the system configuration')
alaSvcMgrSvcTrapAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrSvcTrapAdminState.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSvcTrapAdminState.setDescription('Admin state for trap generation upon a service status change')
alaSvcMgrSapTrapAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrSapTrapAdminState.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSapTrapAdminState.setDescription('Admin state for trap generation upon a SAP status change')
alaSvcMgrSdpTrapAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrSdpTrapAdminState.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSdpTrapAdminState.setDescription('Admin state for trap generation upon a SDP status change')
alaSvcMgrSdpBindTrapAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrSdpBindTrapAdminState.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSdpBindTrapAdminState.setDescription('Admin state for trap generation upon a Service Bind status change')
alaSvcMgrMaxTrapPerMinute = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65534), ValueRangeConstraint(65535, 65535), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrMaxTrapPerMinute.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrMaxTrapPerMinute.setDescription('Set maximum trap rate per minute.\n                     The value 65535 is for unlimited trap rate.')
alaSvcMgrStatsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrStatsAdminState.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrStatsAdminState.setDescription('The global admin state for Service, SAP, and Sdp Bind statistics.\n                     When enabled, each Service/SAP/Bind object can reserve a set of packet/byte counters\n                     for ingress and egress flows. When disabled, all stats resources are released.')
alaSvcMgrVxlanDestUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 11), Integer32().clone(4789)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrVxlanDestUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrVxlanDestUdpPort.setDescription('The VXLAN well-known destination UDP Port in the outer UDP header.\n                     IANA has assigned the value 4789 for the VXLAN UDP port')
alaSvcMgrVxlanVrfName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 1, 8, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaSvcMgrVxlanVrfName.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrVxlanVrfName.setDescription('The current VRF instance name associated with VxLAN L3 traffic. The default VRF\n                     is assumed if not specifed')
alaServiceMgrIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2))
alaIgmpServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaIgmpServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceTable.setDescription('The Service table contains the information on which IPv4 multicast\n         switching and routing is configured.')
alaIgmpServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: alaIgmpServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceEntry.setDescription('An entry corresponds to a service on which IPv4 multicast switching\n         and routing is configured.')
alaIgmpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceStatus.setDescription('Administratively enable IPv4 multicast switching and routing\n         on the Service.')
alaIgmpServiceQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceQuerying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceQuerying.setDescription('Administratively enable IGMP Querying on the Service.')
alaIgmpServiceSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSpoofing.setDescription('Administratively enable IGMP Spoofing on the Service.')
alaIgmpServiceZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceZapping.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceZapping.setDescription('Administratively enable IGMP Zapping on the Service.')
alaIgmpServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceVersion.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceVersion.setDescription('Set the default IGMP protocol Version running on the Service.')
alaIgmpServiceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceRobustness.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceRobustness.setDescription('Set the IGMP Robustness variable used on the Service.')
alaIgmpServiceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceQueryInterval.setDescription('Set the IGMP Query Interval used on the Service.')
alaIgmpServiceQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 8), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceQueryResponseInterval.setDescription('Set the IGMP Query Response Interval on the Service.')
alaIgmpServiceLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 9), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceLastMemberQueryInterval.setDescription('Set the IGMP Last Member Query Interval on the Service.')
alaIgmpServiceRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceRouterTimeout.setDescription('Set the IGMP Router Timeout on the Service.')
alaIgmpServiceSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceTimeout.setDescription('Set the IGMP Source Timeout on the Service.')
alaIgmpServiceProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceProxying.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceProxying.setDescription('Administratively enable IGMP Proxying on the Service.')
alaIgmpServiceUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceUnsolicitedReportInterval.setDescription('Set the IGMP Unsolicited Report Interval on the Service.')
alaIgmpServiceQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceQuerierForwarding.setDescription('Administratively enable IGMP Querier Forwarding on the Service.')
alaIgmpServiceMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceMaxGroupLimit.setDescription('The maximum number of IGMP Group memberships that can be learnt on the Service.')
alaIgmpServiceMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceMaxGroupExceedAction.setDescription('The action to be taken when the IGMP group membership limit is exceeded on the Service.')
alaIgmpMemberServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alaIgmpMemberServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapTable.setDescription('The table listing the IGMP group membership information for SAPs.')
alaIgmpMemberServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapSourceAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapSourceAddress"))
if mibBuilder.loadTexts: alaIgmpMemberServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapEntry.setDescription('An entry corresponding to an IGMP group membership request.')
alaIgmpMemberServiceSapGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpMemberServiceSapGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapGroupAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpMemberServiceSapGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpMemberServiceSapGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapGroupAddress.setDescription("The group membership request's IPv4 group address.")
alaIgmpMemberServiceSapSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpMemberServiceSapSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapSourceAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpMemberServiceSapSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpMemberServiceSapSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapSourceAddress.setDescription("The group membership request's IPv4 source address.")
alaIgmpMemberServiceSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSapMode.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapMode.setDescription("The group membership request's IGMP source filter mode.")
alaIgmpMemberServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapCount.setDescription("The group membership request's counter.")
alaIgmpMemberServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapTimeout.setDescription("The group membership request's timeout.")
alaIgmpMemberServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindTable.setDescription('The table listing the IGMP group membership information for SDP bindings.')
alaIgmpMemberServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindSourceAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindSourceAddress"))
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindEntry.setDescription('An entry corresponding to an IGMP group membership request.')
alaIgmpMemberServiceSdpBindGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindGroupAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpMemberServiceSdpBindGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindGroupAddress.setDescription("The group membership request's IPv4 group address.")
alaIgmpMemberServiceSdpBindSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindSourceAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpMemberServiceSdpBindSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindSourceAddress.setDescription("The group membership request's IPv4 source address.")
alaIgmpMemberServiceSdpBindMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindMode.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindMode.setDescription("The group membership request's IGMP source filter mode.")
alaIgmpMemberServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindCount.setDescription("The group membership request's counter.")
alaIgmpMemberServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindTimeout.setDescription("The group membership request's timeout.")
alaIgmpStaticMemberServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 4), )
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapTable.setDescription('The table listing the service sap static IGMP group membership information.')
alaIgmpStaticMemberServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSapGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSapGroupAddress"))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapEntry.setDescription('An entry corresponding to a ervice sap static IGMP group membership request.')
alaIgmpStaticMemberServiceSapGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 4, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapGroupAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpStaticMemberServiceSapGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapGroupAddress.setDescription("The service sap static group membership request's IPv4 group address.")
alaIgmpStaticMemberServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpStaticMemberServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 5), )
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindTable.setDescription('The table listing the service sdp binding static IGMP group membership information.')
alaIgmpStaticMemberServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSdpBindGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSdpBindGroupAddress"))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindEntry.setDescription('An entry corresponding to a service sdp binding static IGMP group membership request.')
alaIgmpStaticMemberServiceSdpBindGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 5, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindGroupAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpStaticMemberServiceSdpBindGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindGroupAddress.setDescription("The service sdp binding static group membership request's IPv4 group address.")
alaIgmpStaticMemberServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpNeighborServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6), )
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapTable.setDescription('The table listing the service sap neighboring IP multicast routers.')
alaIgmpNeighborServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSapHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSapHostAddress"))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapEntry.setDescription('An entry corresponding to an IP multicast router.')
alaIgmpNeighborServiceSapHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapHostAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpNeighborServiceSapHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapHostAddress.setDescription("The IP multicast router's IPv4 host address.")
alaIgmpNeighborServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapCount.setDescription("The IP multicast router's counter.")
alaIgmpNeighborServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapTimeout.setDescription("The IP multicast router's timeout.")
alaIgmpNeighborServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7), )
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindTable.setDescription('The table listing the service SdpBind neighboring IP multicast routers.')
alaIgmpNeighborServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSdpBindHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSdpBindHostAddress"))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindEntry.setDescription('An entry corresponding to an IP multicast router.')
alaIgmpNeighborServiceSdpBindHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindHostAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpNeighborServiceSdpBindHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindHostAddress.setDescription("The IP multicast router's IPv4 host address.")
alaIgmpNeighborServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindCount.setDescription("The IP multicast router's counter.")
alaIgmpNeighborServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindTimeout.setDescription("The IP multicast router's timeout.")
alaIgmpStaticNeighborServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 8), )
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapTable.setDescription('The table listing the service sap static IP multicast routers.')
alaIgmpStaticNeighborServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapEntry.setDescription('An entry corresponding to a service sap static IP multicast router.')
alaIgmpStaticNeighborServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpStaticNeighborServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 9), )
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindTable.setDescription('The table listing the service SdpBind static IP multicast routers.')
alaIgmpStaticNeighborServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindEntry.setDescription('An entry corresponding to a service SdpBind static IP multicast router.')
alaIgmpStaticNeighborServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpQuerierServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10), )
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapTable.setDescription('The table listing the service sap neighboring IGMP queriers.')
alaIgmpQuerierServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSapHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSapHostAddress"))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapEntry.setDescription('An entry corresponding to an IGMP querier.')
alaIgmpQuerierServiceSapHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapHostAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpQuerierServiceSapHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapHostAddress.setDescription("The IGMP querier's IPv4 host address.")
alaIgmpQuerierServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapCount.setDescription("The IGMP querier's counter.")
alaIgmpQuerierServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapTimeout.setDescription("The IGMP querier's timeout.")
alaIgmpQuerierServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11), )
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindTable.setDescription('The table listing the service SdpBind neighboring IGMP queriers.')
alaIgmpQuerierServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSdpBindHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSdpBindHostAddress"))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindEntry.setDescription('An entry corresponding to an IGMP querier.')
alaIgmpQuerierServiceSdpBindHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindHostAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpQuerierServiceSdpBindHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindHostAddress.setDescription("The IGMP querier's IPv4 host address.")
alaIgmpQuerierServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindCount.setDescription("The IGMP querier's counter.")
alaIgmpQuerierServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 11, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindTimeout.setDescription("The IGMP querier's timeout.")
alaIgmpStaticQuerierServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 12), )
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapTable.setDescription('The table listing the service sap static IGMP queriers.')
alaIgmpStaticQuerierServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapEntry.setDescription('An entry corresponding to a static IGMP querier.')
alaIgmpStaticQuerierServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpStaticQuerierServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 13), )
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindTable.setDescription('The table listing the service SdpBind static IGMP queriers.')
alaIgmpStaticQuerierServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindEntry.setDescription('An entry corresponding to a static IGMP querier.')
alaIgmpStaticQuerierServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaIgmpServiceSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14), )
if mibBuilder.loadTexts: alaIgmpServiceSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceTable.setDescription('The table listing the Service IP multicast source information.')
alaIgmpServiceSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceDestAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceOrigAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceOrigAddress"))
if mibBuilder.loadTexts: alaIgmpServiceSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceEntry.setDescription('An entry corresponding to an IP multicast source flow.')
alaIgmpServiceSourceGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpServiceSourceGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceGroupAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpServiceSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpServiceSourceGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceGroupAddress.setDescription("The IP multicast source flow's IPv4 group address.")
alaIgmpServiceSourceHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpServiceSourceHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceHostAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpServiceSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpServiceSourceHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceHostAddress.setDescription("The IP multicast source flow's IPv4 host address.")
alaIgmpServiceSourceDestAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 5), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpServiceSourceDestAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceDestAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpServiceSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpServiceSourceDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceDestAddress.setDescription("The IP multicast source flow's IPv4 tunnel destination address.")
alaIgmpServiceSourceOrigAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 7), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaIgmpServiceSourceOrigAddressType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceOrigAddressType.setDescription('The IP address type. This release only supports IPv4.')
alaIgmpServiceSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaIgmpServiceSourceOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceOrigAddress.setDescription("The IP multicast source flow's IPv4 tunnel source address.")
alaIgmpServiceSourceLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 9), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourceLocale.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceLocale.setDescription("The value of the object alaIgmpServiceSourceLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaIgmpServiceSourcePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 10), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourcePortId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourcePortId.setDescription("The value of the object alaIgmpServiceSourcePortId indicates,\n         together with the object alaIgmpServiceSourceEncapValue, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsIgmpSnpgMRouterLocale is 'sap(1)'.")
alaIgmpServiceSourceEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 11), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourceEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceEncapValue.setDescription("The value of the object alaIgmpServiceSourceEncapValue indicates,\n         together with the objectalaIgmpServiceSourcePortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSourceLocale is 'sap(1)'.")
alaIgmpServiceSourceSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 12), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourceSdpId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceSdpId.setDescription("The value of the object alaIgmpServiceSourceSdpId indicates,\n         together with the object alaIgmpServiceSourceVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSourceLocale is 'sdp(2)'.")
alaIgmpServiceSourceVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 13), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourceVcId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceVcId.setDescription("The value of the object alaIgmpServiceSourceVcId indicates,\n         together with the object alaIgmpServiceSourceSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSourceLocale is 'sdp(2)'.")
alaIgmpServiceSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSourceType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceType.setDescription("The IP multicast source flow's encapsulation type.")
alaIgmpServiceSapForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15), )
if mibBuilder.loadTexts: alaIgmpServiceSapForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardTable.setDescription('The table listing the IP multicast forward information.')
alaIgmpServiceSapForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardOrigAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardNextSapPortId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardNextSapEncapValue"))
if mibBuilder.loadTexts: alaIgmpServiceSapForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaIgmpServiceSapForwardLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 1), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardLocale.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardLocale.setDescription("The value of the object alaIgmpServiceSapForwardLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaIgmpServiceSapForwardPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardPortId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardPortId.setDescription("The value of the object alaIgmpServiceSapForwardPortId indicates,\n         together with the object alaIgmpServiceSapForwardEncapValue, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsIgmpSnpgMRouterLocale is 'sap(1)'.")
alaIgmpServiceSapForwardEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 3), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardEncapValue.setDescription("The value of the object alaIgmpServiceSapForwardEncapValue indicates,\n         together with the objectalaIgmpServiceSapForwardPortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSapForwardLocale is 'sap(1)'.")
alaIgmpServiceSapForwardSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 4), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardSdpId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardSdpId.setDescription("The value of the object alaIgmpServiceSapForwardSdpId indicates,\n         together with the object alaIgmpServiceSapForwardVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSapForwardLocale is 'sdp(2)'.")
alaIgmpServiceSapForwardVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 5), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardVcId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardVcId.setDescription("The value of the object alaIgmpServiceSapForwardVcId indicates,\n         together with the object alaIgmpServiceSapForwardSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSapForwardLocale is 'sdp(2)'.")
alaIgmpServiceSapForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 6), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv4 group address.")
alaIgmpServiceSapForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 7), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv4 host address.")
alaIgmpServiceSapForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 8), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel destination address.")
alaIgmpServiceSapForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 9), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel source address.")
alaIgmpServiceSapForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaIgmpServiceSapForwardNextSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 11), TmnxPortID())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextSapPortId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextSapPortId.setDescription("The IP multicast forwarded flow's next SAP. The ID of the access port where this SAP\n                     is defined.")
alaIgmpServiceSapForwardNextSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 12), TmnxEncapVal())
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextSapEncapValue.setDescription("The IP multicast forwarded flow's next SAP. The value of the label used to identify this\n                     SAP on the access port specified by sapPortId.")
alaIgmpServiceSapForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaIgmpServiceSdpBindForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16), )
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardTable.setDescription('The table listing the IP multicast forward information.')
alaIgmpServiceSdpBindForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardOrigAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardNextSdpBindId"))
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaIgmpServiceSdpBindForwardLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 1), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardLocale.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardLocale.setDescription("The value of the object alaIgmpServiceSdpBindForwardLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaIgmpServiceSdpBindForwardPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardPortId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardPortId.setDescription("The value of the object alaIgmpServiceSdpBindForwardPortId indicates,\n         together with the object alaIgmpServiceSdpBindForwardEncapValue, the SdpBind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsIgmpSnpgMRouterLocale is 'sap(1)'.")
alaIgmpServiceSdpBindForwardEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 3), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardEncapValue.setDescription("The value of the object alaIgmpServiceSdpBindForwardEncapValue indicates,\n         together with the object alaIgmpServiceSdpBindForwardPortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSdpBindForwardLocale is 'sap(1)'.")
alaIgmpServiceSdpBindForwardSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 4), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardSdpId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardSdpId.setDescription("The value of the object alaIgmpServiceSdpBindForwardSdpId indicates,\n         together with the object alaIgmpServiceSdpBindForwardVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSdpBindForwardLocale is 'sdp(2)'.")
alaIgmpServiceSdpBindForwardVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 5), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardVcId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardVcId.setDescription("The value of the object alaIgmpServiceSdpBindForwardVcId indicates,\n         together with the object alaIgmpServiceSdpBindForwardSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaIgmpServiceSdpBindForwardLocale is 'sdp(2)'.")
alaIgmpServiceSdpBindForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 6), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv4 group address.")
alaIgmpServiceSdpBindForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 7), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv4 host address.")
alaIgmpServiceSdpBindForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 8), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel destination address.")
alaIgmpServiceSdpBindForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 9), MacAddress())
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv4 tunnel source address.")
alaIgmpServiceSdpBindForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaIgmpServiceSdpBindForwardNextSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 11), SdpBindId())
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardNextSdpBindId.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardNextSdpBindId.setDescription("The IP multicast forwarded flow's next sdpBind.")
alaIgmpServiceSdpBindForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaIgmpServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 17), )
if mibBuilder.loadTexts: alaIgmpServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapTable.setDescription('The table listing the IP multicast port information.')
alaIgmpServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaIgmpServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapEntry.setDescription('An entry corresponding to IP multicast Service SAP information.')
alaIgmpServiceSapMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 17, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSapMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapMaxGroupLimit.setDescription('The maximum number of IGMP Group memberships that can be learnt\n         on the sap.')
alaIgmpServiceSapMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSapMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapMaxGroupExceedAction.setDescription('The action to be taken when IGMP group membership limit is\n         exceeded for the sap.')
alaIgmpServiceSapCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 17, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSapCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapCurrentGroupCount.setDescription('The current IP multicast group memberships on a sap.\n         instance.')
alaIgmpServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 18), )
if mibBuilder.loadTexts: alaIgmpServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindTable.setDescription('The table listing the IP multicast port information.')
alaIgmpServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaIgmpServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindEntry.setDescription('An entry corresponding to IP multicast Service SdpBind information.')
alaIgmpServiceSdpBindMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 18, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindMaxGroupLimit.setDescription('The maximum number of IGMP Group memberships that can be learnt\n         on the SdpBind.')
alaIgmpServiceSdpBindMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindMaxGroupExceedAction.setDescription('The action to be taken when IGMP group membership limit is\n         exceeded for the SdpBind.')
alaIgmpServiceSdpBindCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 2, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIgmpServiceSdpBindCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindCurrentGroupCount.setDescription('The current IP multicast group memberships on a SdpBind.\n         instance.')
alaServiceMgrMld = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3))
alaMldServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaMldServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceTable.setDescription('The Service table contains the information on which IPv6 multicast\n         switching and routing is configured.')
alaMldServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: alaMldServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceEntry.setDescription('An entry corresponds to a service on which IPv6 multicast switching\n         and routing is configured.')
alaMldServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceStatus.setDescription('Administratively enable IPv6 multicast switching and routing\n         on the Service.')
alaMldServiceQuerying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceQuerying.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceQuerying.setDescription('Administratively enable MLD Querying on the Service.')
alaMldServiceSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSpoofing.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSpoofing.setDescription('Administratively enable MLD Spoofing on the Service.')
alaMldServiceZapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceZapping.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceZapping.setDescription('Administratively enable MLD Zapping on the Service.')
alaMldServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceVersion.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceVersion.setDescription('Set the default MLD protocol Version running on the Service.')
alaMldServiceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceRobustness.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceRobustness.setDescription('Set the MLD Robustness variable used on the Service.')
alaMldServiceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceQueryInterval.setDescription('Set the MLD Query Interval used on the Service.')
alaMldServiceQueryResponseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 8), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceQueryResponseInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceQueryResponseInterval.setDescription('Set the MLD Query Response Interval on the Service.')
alaMldServiceLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 9), Unsigned32()).setUnits('tenths of seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceLastMemberQueryInterval.setDescription('Set the MLD Last Member Query Interval on the Service.')
alaMldServiceRouterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 10), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceRouterTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceRouterTimeout.setDescription('Set the MLD Router Timeout on the Service.')
alaMldServiceSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceTimeout.setDescription('Set the MLD Source Timeout on the Service.')
alaMldServiceProxying = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceProxying.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceProxying.setDescription('Administratively enable MLD Proxying on the Service.')
alaMldServiceUnsolicitedReportInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceUnsolicitedReportInterval.setDescription('Set the MLD Unsolicited Report Interval on the Service.')
alaMldServiceQuerierForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceQuerierForwarding.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceQuerierForwarding.setDescription('Administratively enable MLD Querier Forwarding on the Service.')
alaMldServiceMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceMaxGroupLimit.setDescription('The maximum number of MLD Group memberships that can be learnt on the Service.')
alaMldServiceMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceMaxGroupExceedAction.setDescription('The action to be taken when the MLD group membership limit is exceeded on the Service.')
alaMldMemberServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2), )
if mibBuilder.loadTexts: alaMldMemberServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapTable.setDescription('The table listing the MLD group membership information for SAPs.')
alaMldMemberServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapSourceAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapSourceAddress"))
if mibBuilder.loadTexts: alaMldMemberServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapEntry.setDescription('An entry corresponding to an MLD group membership request.')
alaMldMemberServiceSapGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldMemberServiceSapGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapGroupAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldMemberServiceSapGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldMemberServiceSapGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapGroupAddress.setDescription("The group membership request's IPv6 group address.")
alaMldMemberServiceSapSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldMemberServiceSapSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapSourceAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldMemberServiceSapSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldMemberServiceSapSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapSourceAddress.setDescription("The group membership request's IPv6 source address.")
alaMldMemberServiceSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSapMode.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapMode.setDescription("The group membership request's MLD source filter mode.")
alaMldMemberServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapCount.setDescription("The group membership request's counter.")
alaMldMemberServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapTimeout.setDescription("The group membership request's timeout.")
alaMldMemberServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3), )
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindTable.setDescription('The table listing the MLD group membership information for SDP bindings.')
alaMldMemberServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindSourceAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindSourceAddress"))
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindEntry.setDescription('An entry corresponding to an MLD group membership request.')
alaMldMemberServiceSdpBindGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindGroupAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldMemberServiceSdpBindGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindGroupAddress.setDescription("The group membership request's IPv6 group address.")
alaMldMemberServiceSdpBindSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindSourceAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldMemberServiceSdpBindSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindSourceAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindSourceAddress.setDescription("The group membership request's IPv6 source address.")
alaMldMemberServiceSdpBindMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindMode.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindMode.setDescription("The group membership request's MLD source filter mode.")
alaMldMemberServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindCount.setDescription("The group membership request's counter.")
alaMldMemberServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindTimeout.setDescription("The group membership request's timeout.")
alaMldStaticMemberServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 4), )
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapTable.setDescription('The table listing the service sap static MLD group membership information.')
alaMldStaticMemberServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSapGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSapGroupAddress"))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapEntry.setDescription('An entry corresponding to a ervice sap static MLD group membership request.')
alaMldStaticMemberServiceSapGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 4, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapGroupAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldStaticMemberServiceSapGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapGroupAddress.setDescription("The service sap static group membership request's IPv6 group address.")
alaMldStaticMemberServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldStaticMemberServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 5), )
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindTable.setDescription('The table listing the service sdp binding static MLD group membership information.')
alaMldStaticMemberServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSdpBindGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSdpBindGroupAddress"))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindEntry.setDescription('An entry corresponding to a service sdp binding static MLD group membership request.')
alaMldStaticMemberServiceSdpBindGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 5, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindGroupAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldStaticMemberServiceSdpBindGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindGroupAddress.setDescription("The service sdp binding static group membership request's IPv6 group address.")
alaMldStaticMemberServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldNeighborServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6), )
if mibBuilder.loadTexts: alaMldNeighborServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapTable.setDescription('The table listing the service sap neighboring IP multicast routers.')
alaMldNeighborServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSapHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSapHostAddress"))
if mibBuilder.loadTexts: alaMldNeighborServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapEntry.setDescription('An entry corresponding to an IP multicast router.')
alaMldNeighborServiceSapHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldNeighborServiceSapHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapHostAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldNeighborServiceSapHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldNeighborServiceSapHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapHostAddress.setDescription("The IP multicast router's IPv6 host address.")
alaMldNeighborServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapCount.setDescription("The IP multicast router's counter.")
alaMldNeighborServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapTimeout.setDescription("The IP multicast router's timeout.")
alaMldNeighborServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7), )
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindTable.setDescription('The table listing the service SdpBind neighboring IP multicast routers.')
alaMldNeighborServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSdpBindHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSdpBindHostAddress"))
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindEntry.setDescription('An entry corresponding to an IP multicast router.')
alaMldNeighborServiceSdpBindHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindHostAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldNeighborServiceSdpBindHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindHostAddress.setDescription("The IP multicast router's IPv6 host address.")
alaMldNeighborServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindCount.setDescription("The IP multicast router's counter.")
alaMldNeighborServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 7, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindTimeout.setDescription("The IP multicast router's timeout.")
alaMldStaticNeighborServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 8), )
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapTable.setDescription('The table listing the service sap static IP multicast routers.')
alaMldStaticNeighborServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapEntry.setDescription('An entry corresponding to a service sap static IP multicast router.')
alaMldStaticNeighborServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 8, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldStaticNeighborServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 9), )
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindTable.setDescription('The table listing the service SdpBind static IP multicast routers.')
alaMldStaticNeighborServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindEntry.setDescription('An entry corresponding to a service SdpBind static IP multicast router.')
alaMldStaticNeighborServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 9, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldQuerierServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10), )
if mibBuilder.loadTexts: alaMldQuerierServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapTable.setDescription('The table listing the service sap neighboring MLD queriers.')
alaMldQuerierServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSapHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSapHostAddress"))
if mibBuilder.loadTexts: alaMldQuerierServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapEntry.setDescription('An entry corresponding to an MLD querier.')
alaMldQuerierServiceSapHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldQuerierServiceSapHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapHostAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldQuerierServiceSapHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldQuerierServiceSapHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapHostAddress.setDescription("The MLD querier's IPv6 host address.")
alaMldQuerierServiceSapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierServiceSapCount.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapCount.setDescription("The MLD querier's counter.")
alaMldQuerierServiceSapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierServiceSapTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapTimeout.setDescription("The MLD querier's timeout.")
alaMldQuerierServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11), )
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindTable.setDescription('The table listing the service SdpBind neighboring MLD queriers.')
alaMldQuerierServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSdpBindHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSdpBindHostAddress"))
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindEntry.setDescription('An entry corresponding to an MLD querier.')
alaMldQuerierServiceSdpBindHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindHostAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldQuerierServiceSdpBindHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindHostAddress.setDescription("The MLD querier's IPv6 host address.")
alaMldQuerierServiceSdpBindCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindCount.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindCount.setDescription("The MLD querier's counter.")
alaMldQuerierServiceSdpBindTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 11, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindTimeout.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindTimeout.setDescription("The MLD querier's timeout.")
alaMldStaticQuerierServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 12), )
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapTable.setDescription('The table listing the service sap static MLD queriers.')
alaMldStaticQuerierServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapEntry.setDescription('An entry corresponding to a static MLD querier.')
alaMldStaticQuerierServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldStaticQuerierServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 13), )
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindTable.setDescription('The table listing the service SdpBind static MLD queriers.')
alaMldStaticQuerierServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindEntry.setDescription('An entry corresponding to a static MLD querier.')
alaMldStaticQuerierServiceSdpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindRowStatus.setDescription('Used in accordance with installation and removal conventions\n         for conceptual rows.')
alaMldServiceSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14), )
if mibBuilder.loadTexts: alaMldServiceSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceTable.setDescription('The table listing the Service IP multicast source information.')
alaMldServiceSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceGroupAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceHostAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceDestAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceOrigAddressType"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceOrigAddress"))
if mibBuilder.loadTexts: alaMldServiceSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceEntry.setDescription('An entry corresponding to an IP multicast source flow.')
alaMldServiceSourceGroupAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 1), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldServiceSourceGroupAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceGroupAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldServiceSourceGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldServiceSourceGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceGroupAddress.setDescription("The IP multicast source flow's IPv6 group address.")
alaMldServiceSourceHostAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 3), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldServiceSourceHostAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceHostAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldServiceSourceHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldServiceSourceHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceHostAddress.setDescription("The IP multicast source flow's IPv6 host address.")
alaMldServiceSourceDestAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 5), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldServiceSourceDestAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceDestAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldServiceSourceDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldServiceSourceDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceDestAddress.setDescription("The IP multicast source flow's IPv6 tunnel destination address.")
alaMldServiceSourceOrigAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 7), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(2, 2)))
if mibBuilder.loadTexts: alaMldServiceSourceOrigAddressType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceOrigAddressType.setDescription('The IP address type. This release only supports IPv6.')
alaMldServiceSourceOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaMldServiceSourceOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceOrigAddress.setDescription("The IP multicast source flow's IPv6 tunnel source address.")
alaMldServiceSourceLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 9), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourceLocale.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceLocale.setDescription("The value of the object alaMldServiceSourceLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaMldServiceSourcePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 10), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourcePortId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourcePortId.setDescription("The value of the object alaMldServiceSourcePortId indicates,\n         together with the object alaMldServiceSourceEncapValue, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsMldSnpgMRouterLocale is 'sap(1)'.")
alaMldServiceSourceEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 11), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourceEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceEncapValue.setDescription("The value of the object alaMldServiceSourceEncapValue indicates,\n         together with the objectalaMldServiceSourcePortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSourceLocale is 'sap(1)'.")
alaMldServiceSourceSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 12), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourceSdpId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceSdpId.setDescription("The value of the object alaMldServiceSourceSdpId indicates,\n         together with the object alaMldServiceSourceVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSourceLocale is 'sdp(2)'.")
alaMldServiceSourceVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 13), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourceVcId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceVcId.setDescription("The value of the object alaMldServiceSourceVcId indicates,\n         together with the object alaMldServiceSourceSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSourceLocale is 'sdp(2)'.")
alaMldServiceSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSourceType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceType.setDescription("The IP multicast source flow's encapsulation type.")
alaMldServiceSapForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15), )
if mibBuilder.loadTexts: alaMldServiceSapForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardTable.setDescription('The table listing the IP multicast forward information.')
alaMldServiceSapForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardOrigAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardNextSapPortId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardNextSapEncapValue"))
if mibBuilder.loadTexts: alaMldServiceSapForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaMldServiceSapForwardLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 1), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardLocale.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardLocale.setDescription("The value of the object alaMldServiceSapForwardLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaMldServiceSapForwardPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardPortId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardPortId.setDescription("The value of the object alaMldServiceSapForwardPortId indicates,\n         together with the object alaMldServiceSapForwardEncapValue, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsMldSnpgMRouterLocale is 'sap(1)'.")
alaMldServiceSapForwardEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 3), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardEncapValue.setDescription("The value of the object alaMldServiceSapForwardEncapValue indicates,\n         together with the objectalaMldServiceSapForwardPortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSapForwardLocale is 'sap(1)'.")
alaMldServiceSapForwardSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 4), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardSdpId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardSdpId.setDescription("The value of the object alaMldServiceSapForwardSdpId indicates,\n         together with the object alaMldServiceSapForwardVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSapForwardLocale is 'sdp(2)'.")
alaMldServiceSapForwardVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 5), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardVcId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardVcId.setDescription("The value of the object alaMldServiceSapForwardVcId indicates,\n         together with the object alaMldServiceSapForwardSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSapForwardLocale is 'sdp(2)'.")
alaMldServiceSapForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 6), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSapForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv6 group address.")
alaMldServiceSapForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 7), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSapForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv6 host address.")
alaMldServiceSapForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 8), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSapForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel destination address.")
alaMldServiceSapForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 9), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSapForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel source address.")
alaMldServiceSapForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaMldServiceSapForwardNextSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 11), TmnxPortID())
if mibBuilder.loadTexts: alaMldServiceSapForwardNextSapPortId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardNextSapPortId.setDescription("The IP multicast forwarded flow's next SAP. The ID of the access port where this SAP\n                     is defined.")
alaMldServiceSapForwardNextSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 12), TmnxEncapVal())
if mibBuilder.loadTexts: alaMldServiceSapForwardNextSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardNextSapEncapValue.setDescription("The IP multicast forwarded flow's next SAP. The value of the label used to identify this\n                     SAP on the access port specified by sapPortId.")
alaMldServiceSapForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaMldServiceSdpBindForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16), )
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardTable.setDescription('The table listing the IP multicast forward information.')
alaMldServiceSdpBindForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardGroupAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardHostAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardDestAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardOrigAddress"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardNextSdpBindId"))
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardEntry.setDescription('An entry corresponding to an IP multicast forwarded flow.')
alaMldServiceSdpBindForwardLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 1), AluLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardLocale.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardLocale.setDescription("The value of the object alaMldServiceSdpBindForwardLocale indicates\n         where this multicast router was detected.\n\n         A multicast router found on a local SAP has the value 'sap(1)'.\n         A multicast router detected on an SDP has the value 'sdp(2)'.")
alaMldServiceSdpBindForwardPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardPortId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardPortId.setDescription("The value of the object alaMldServiceSdpBindForwardPortId indicates,\n         together with the object alaMldServiceSdpBindForwardEncapValue, the SdpBind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         tlsMldSnpgMRouterLocale is 'sap(1)'.")
alaMldServiceSdpBindForwardEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 3), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardEncapValue.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardEncapValue.setDescription("The value of the object alaMldServiceSdpBindForwardEncapValue indicates,\n         together with the object alaMldServiceSdpBindForwardPortId, the SAP\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSdpBindForwardLocale is 'sap(1)'.")
alaMldServiceSdpBindForwardSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 4), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardSdpId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardSdpId.setDescription("The value of the object alaMldServiceSdpBindForwardSdpId indicates,\n         together with the object alaMldServiceSdpBindForwardVcId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSdpBindForwardLocale is 'sdp(2)'.")
alaMldServiceSdpBindForwardVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 5), TmnxVcIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardVcId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardVcId.setDescription("The value of the object alaMldServiceSdpBindForwardVcId indicates,\n         together with the object alaMldServiceSdpBindForwardSdpId, the SDP Bind\n         on which this multicast router is detected.\n\n         The value of this object is only meaningful when the value of\n         alaMldServiceSdpBindForwardLocale is 'sdp(2)'.")
alaMldServiceSdpBindForwardGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 6), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardGroupAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardGroupAddress.setDescription("The IP multicast forwarded flow's IPv6 group address.")
alaMldServiceSdpBindForwardHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 7), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardHostAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardHostAddress.setDescription("The IP multicast forwarded flow's IPv6 host address.")
alaMldServiceSdpBindForwardDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 8), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardDestAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardDestAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel destination address.")
alaMldServiceSdpBindForwardOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 9), MacAddress())
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardOrigAddress.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardOrigAddress.setDescription("The IP multicast forwarded flow's IPv6 tunnel source address.")
alaMldServiceSdpBindForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardType.setDescription("The IP multicast forwarded flow's encapsulation type.")
alaMldServiceSdpBindForwardNextSdpBindId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 11), SdpBindId())
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardNextSdpBindId.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardNextSdpBindId.setDescription("The IP multicast forwarded flow's next sdpBind.")
alaMldServiceSdpBindForwardNextType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 16, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mcast", 1), ("pim", 2), ("ipip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardNextType.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardNextType.setDescription("The IP multicast forwarded flow's next encapsulation type.")
alaMldServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 17), )
if mibBuilder.loadTexts: alaMldServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapTable.setDescription('The table listing the IP multicast port information.')
alaMldServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), (0, "ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: alaMldServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapEntry.setDescription('An entry corresponding to IP multicast Service SAP information.')
alaMldServiceSapMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 17, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSapMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapMaxGroupLimit.setDescription('The maximum number of MLD Group memberships that can be learnt\n         on the sap.')
alaMldServiceSapMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSapMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapMaxGroupExceedAction.setDescription('The action to be taken when MLD group membership limit is\n         exceeded for the sap.')
alaMldServiceSapCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 17, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSapCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapCurrentGroupCount.setDescription('The current IP multicast group memberships on a sap.\n         instance.')
alaMldServiceSdpBindTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 18), )
if mibBuilder.loadTexts: alaMldServiceSdpBindTable.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindTable.setDescription('The table listing the IP multicast port information.')
alaMldServiceSdpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SDP-MIB", "sdpBindId"))
if mibBuilder.loadTexts: alaMldServiceSdpBindEntry.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindEntry.setDescription('An entry corresponding to IP multicast Service SdpBind information.')
alaMldServiceSdpBindMaxGroupLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 18, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSdpBindMaxGroupLimit.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindMaxGroupLimit.setDescription('The maximum number of MLD Group memberships that can be learnt\n         on the SdpBind.')
alaMldServiceSdpBindMaxGroupExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("drop", 1), ("replace", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaMldServiceSdpBindMaxGroupExceedAction.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindMaxGroupExceedAction.setDescription('The action to be taken when MLD group membership limit is\n         exceeded for the SdpBind.')
alaMldServiceSdpBindCurrentGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 3, 18, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMldServiceSdpBindCurrentGroupCount.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindCurrentGroupCount.setDescription('The current IP multicast group memberships on a SdpBind.\n         instance.')
alaExtraLdp = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4))
alaVRtrExtendedLdpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaVRtrExtendedLdpGeneralTable.setStatus('current')
if mibBuilder.loadTexts: alaVRtrExtendedLdpGeneralTable.setDescription('alaVRtrExtendedLdpGeneralTable  is an extension to vRtrLdpGeneralTable\n         and it has an entry for each virtual router\n         in the system capable of supporting an instance of the\n         Label Distribution Protocol (LDP).')
alaVRtrExtendedLdpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpGenvRtrID"))
if mibBuilder.loadTexts: alaVRtrExtendedLdpGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: alaVRtrExtendedLdpGeneralEntry.setDescription("Each row entry represents an instance of the Label Distribution\n         Protocol (LDP) for a virtual router in the system.\n\n         An entry in this table is created by the agent when vRtrLdpStatus\n         in the vRtrConfTable is set to 'create'.\n         The entry is destroyed when vRtrLdpStatus is set to 'delete' but\n         only if vRtrLdpGenAdminState has a value of 'outOfService'.")
alaVRtrLdpGenGracefulRestartSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRtrLdpGenGracefulRestartSupport.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpGenGracefulRestartSupport.setDescription("The value of alaVRtrLdpGenGracefulRestartSupport specifies whether\n         restarting the LSR gracefully during a control plane restart is\n         allowed. When this object has a value of 'true',\n         graceful restart procedures are  enabled.  When its value is 'false',\n         graceful restart procedures are disabled.")
alaVRtrLdpGenGRReconnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 300)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRtrLdpGenGRReconnectTime.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpGenGRReconnectTime.setDescription('The value of alaVRtrLdpGenGRReconnectTime\n         specifies the value of FT Reconnect timer.\n         The FT Reconnect timeout is the time that the sender of the TLV would like the receiver\n         of that TLV to wait after the receiver detects the failure of LDP communication with the sender.\n         This object has meaning only when alaVRtrLdpGenGracefulRestartSupport is true.')
alaVRtrLdpGenGRFwdStateHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 1800)).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRtrLdpGenGRFwdStateHoldTime.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpGenGRFwdStateHoldTime.setDescription('The value of vRtrLdpGenGRFwdStateHoldTime specifies the MPLS\n           forwarding state hold timer. If the forwarding state has been\n           preserved during a control plane restart, then the LSR starts this\n           timer and marks all forwarding entries as stale. At the expiration of\n           the timer all the entries that are still marked as stale are deleted.\n           The value of Recovery Time advertised to the neighbors in the FT\n           session TLV is set to the current value of the timer at the point in\n           which the Initialization message carrying the FT session TLV is sent')
alaVRtrLdpGenvRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 1, 1, 4), TmnxVRtrID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaVRtrLdpGenvRtrID.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpGenvRtrID.setDescription('The  unique value which identifies this virtual router in the Tmnx\n         system.  The  vRtrID  value  for  each  virtual router must remain\n         constant  at least   from  one  re-initialization  of  the  system\n         management  processor  (CPM)  to the next. There will always be at\n         least  one  router  entry defined by the agent with vRtrID=1 which\n         represents the transport router.')
alaVRtrLdpExtendedSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2), )
if mibBuilder.loadTexts: alaVRtrLdpExtendedSessionTable.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpExtendedSessionTable.setDescription('alaVRtrLdpExtendedSessionTable is an extension to vRtrLdpSessionTable.\n          This isa read-only table which parallels the\n          mplsLdpSessionTable in the MPLS-LDP-MIB. The purpose of this\n          table is to keep information about a single session between\n          an LDP entity and an LDP Peer')
alaVRtrLdpExtendedSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpSessvRtrID"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpPeerLdpId"))
if mibBuilder.loadTexts: alaVRtrLdpExtendedSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpExtendedSessionEntry.setDescription('A row in this table represents information about a single\n         session between an LDP entity and an LDP Peer.')
alaVRtrLdpPeerLdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1, 1), MplsLdpIdentifier())
if mibBuilder.loadTexts: alaVRtrLdpPeerLdpId.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpPeerLdpId.setDescription('The value of alaVRtrLdpSessLocalLdpId specifies the local LDP\n         identifier for this LDP session.')
alaVRtrLdpSessRestartInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVRtrLdpSessRestartInProgress.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpSessRestartInProgress.setDescription('The value of alaVRtrLdpSessRestartInProgress  indicates whether\n         graceful restart is in progress for this session')
alaVRtrLdpSessFtReconTimeAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVRtrLdpSessFtReconTimeAdvertised.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpSessFtReconTimeAdvertised.setDescription("The value of alaVRtrLdpSessFtReconTimeAdvertised  indicates the session's\n        Fault Tolerant(FT) Reconnect Timeout advertised to the peer")
alaVRtrLdpSessFtRecoveryTimeAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVRtrLdpSessFtRecoveryTimeAdvertised.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpSessFtRecoveryTimeAdvertised.setDescription("The value of alaVRtrLdpSessFtRecoveryTimeAdvertised  indicates the session's\n        Fault Tolerant(FT) recovery timeout that was advertised to the peer.")
alaVRtrLdpSessvRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 4, 2, 1, 5), TmnxVRtrID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaVRtrLdpSessvRtrID.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpSessvRtrID.setDescription('The  unique value which identifies this virtual router in the Tmnx\n         system.  The  vRtrID  value  for  each  virtual router must remain\n         constant  at least   from  one  re-initialization  of  the  system\n         management  processor  (CPM)  to the next. There will always be at\n         least  one  router  entry defined by the agent with vRtrID=1 which\n         represents the transport router.')
alaRfpSpb = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5))
alaRfpSpbLocalEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointTable.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointTable.setDescription('This table has the information about the local end points for the \n\t point to point service.')
alaRfpSpbLocalEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointRfp"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPoint"))
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointEntry.setDescription('Local End Point Entry.')
alaRfpSpbLocalEndPointRfp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)))
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointRfp.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointRfp.setDescription('This is the id for the RFP domain.')
alaRfpSpbLocalEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: alaRfpSpbLocalEndPoint.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPoint.setDescription('This is the local end point number for Virtual UP MEP used in Ethernet OAM.')
alaRfpSpbLocalEndPointCcmInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneSecond", 1), ("oneMinute", 2), ("tenSeconds", 3), ("tenMinutes", 4), ("hundredMilliSeconds", 5))).clone('oneSecond')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointCcmInterval.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointCcmInterval.setDescription('This is the Continuity Check Messages Interval.')
alaRfpSpbLocalEndPointAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointAdminStatus.setDescription('The admin status of this local end point\n\t\tenable:  This will trigger generation of CCM messages.\n\t\tdisable: This will stop generation of CCM messages.\n\t\t')
alaRfpSpbLocalEndPointLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointLevel.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointLevel.setDescription('This is the level at which the maintenance domain will be created.')
alaRfpSpbLocalEndPointCBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointCBVlan.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointCBVlan.setDescription('This is the primary VLAN used in the maintenance association for OAM domain.')
alaRfpSpbLocalEndPointMaintDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointMaintDomain.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointMaintDomain.setDescription('This is the name used for OAM maintenance domain in a string format.')
alaRfpSpbLocalEndPointMaintAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointMaintAssociation.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointMaintAssociation.setDescription('This is the name used for OAM maintenance association in a string format.')
alaRfpSpbLocalEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbLocalEndPointRowStatus.setDescription('The status of this table entry.')
alaRfpSpbRemoteEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2), )
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointTable.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointTable.setDescription('This table has the information about the remote end points for the \n\t point to point service.')
alaRfpSpbRemoteEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointRfp"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPoint"), (0, "ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointServiceID"))
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointEntry.setDescription('Remote End Point Entry.')
alaRfpSpbRemoteEndPointRfp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)))
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointRfp.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointRfp.setDescription('This is the id for the RFP domain.')
alaRfpSpbRemoteEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPoint.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPoint.setDescription('These are the remote end point numbers allowed by the maintenance domain/level.')
alaRfpSpbRemoteEndPointServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)))
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointServiceID.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointServiceID.setDescription('This is the service id learnt from remote end point.')
alaRfpSpbRemoteEndPointStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointStatus.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointStatus.setDescription('This is the remote BEB (Back Bone Edge Bridge) status.')
alaRfpSpbRemoteEndPointSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointSystemName.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointSystemName.setDescription('This is the system name of remote BEB.')
alaRfpSpbRemoteEndPointISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointISID.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointISID.setDescription('This is the ISID value associated with service id from remote end point.')
alaRfpSpbRemoteEndPointBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointBVlan.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointBVlan.setDescription('This is the BVLAN value associated with a service Id from remote end point.')
alaRfpSpbRemoteEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 5, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRfpSpbRemoteEndPointRowStatus.setDescription('Remote End Point Entry Status.')
smgrServiceError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 1)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcIsid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMulticastMode"))
if mibBuilder.loadTexts: smgrServiceError.setStatus('current')
if mibBuilder.loadTexts: smgrServiceError.setDescription('A major trap to indicate a failure to create/delete a service successfully.')
smgrServiceHwError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 2)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcVFI"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMcIndex"))
if mibBuilder.loadTexts: smgrServiceHwError.setStatus('current')
if mibBuilder.loadTexts: smgrServiceHwError.setDescription('A critical trap to indicate a failure to allocate/de-allocate a hardware resource for a service,\n     or to program the hardware tables for a service successfully.')
smgrSapError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 3)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEncapValue"))
if mibBuilder.loadTexts: smgrSapError.setStatus('current')
if mibBuilder.loadTexts: smgrSapError.setDescription('A major trap to indicate a failure to create/delete a Service Access Point successfully.')
smgrSapHwError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 4)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcVFI"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapVirtualPort"))
if mibBuilder.loadTexts: smgrSapHwError.setStatus('current')
if mibBuilder.loadTexts: smgrSapHwError.setDescription('A critical trap to indicate a failure to allocate/de-allocate a hardware resource for a SAP,\n     or to program the hardware tables for a SAP successfully.')
smgrSdpError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 5)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemId"))
if mibBuilder.loadTexts: smgrSdpError.setStatus('current')
if mibBuilder.loadTexts: smgrSdpError.setDescription('A major trap to indicate a failure to create/delete a Service Distribution Point successfully.')
smgrSdpHwError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 6)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemId"))
if mibBuilder.loadTexts: smgrSdpHwError.setStatus('current')
if mibBuilder.loadTexts: smgrSdpHwError.setDescription('A critical trap to indicate a failure to allocate/de-allocate a hardware resource for a SDP,\n     or to program the hardware tables for a SDP successfully.')
smgrSdpBindError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 7)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemId"))
if mibBuilder.loadTexts: smgrSdpBindError.setStatus('current')
if mibBuilder.loadTexts: smgrSdpBindError.setDescription('A major trap to indicate a failure to create/delete a SDP Bind successfully.')
smgrSdpBindHwError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 8)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindVirtualPort"))
if mibBuilder.loadTexts: smgrSdpBindHwError.setStatus('current')
if mibBuilder.loadTexts: smgrSdpBindHwError.setDescription('A critical trap to indicate a failure to allocate/de-allocate a hardware resource for a SDP Bind,\n     or to program the hardware tables for a SDP Bind successfully.')
smgrGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 9)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"))
if mibBuilder.loadTexts: smgrGeneralError.setStatus('current')
if mibBuilder.loadTexts: smgrGeneralError.setDescription('A major trap to indicate a general system failure detected during normal system operation.')
smgrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 10)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcNumSaps"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcNumSdps"))
if mibBuilder.loadTexts: smgrStatusChange.setStatus('deprecated')
if mibBuilder.loadTexts: smgrStatusChange.setDescription('A trap to indicate a status change for a group of selected services.')
smgrServiceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 11)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcIsid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMulticastMode"))
if mibBuilder.loadTexts: smgrServiceStatusChange.setStatus('current')
if mibBuilder.loadTexts: smgrServiceStatusChange.setDescription("A change in service operating status. A service is operationally up when it's admin-up and there's at least\n     one active SAP or one active bind that is operationally up.")
smgrSapStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 12)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapOperStatus"))
if mibBuilder.loadTexts: smgrSapStatusChange.setStatus('current')
if mibBuilder.loadTexts: smgrSapStatusChange.setDescription("A change in SAP operating status. A SAP is operationally up when it's admin-up and the link status of the\n     physical or logical port of the SAP is operationally up.")
smgrSdpStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 13)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpDynamicType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpIsid"))
if mibBuilder.loadTexts: smgrSdpStatusChange.setStatus('current')
if mibBuilder.loadTexts: smgrSdpStatusChange.setDescription('A change in SDP operating status. For SPB, the SDP is dynamically created or destroyed as calculated by\n     ISIS protocol when a unicast/multicast path to reach a neighbor node is determined.')
smgrSdpBindStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 14)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindIsid"))
if mibBuilder.loadTexts: smgrSdpBindStatusChange.setStatus('current')
if mibBuilder.loadTexts: smgrSdpBindStatusChange.setDescription('A change in SDP Bind operating status. For SPB, the SDP Bind is dynamically created or destroyed as detected\n     by ISIS when the same isid is configured in the neighbor node.')
smgrVxlanSdpBindStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 1, 0, 15)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindFarEndIpAddress"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindVnid"))
if mibBuilder.loadTexts: smgrVxlanSdpBindStatusChange.setStatus('current')
if mibBuilder.loadTexts: smgrVxlanSdpBindStatusChange.setDescription('A change in SDP Bind operating status. A SDP Bind is dynamically created as a VTEP is discovered, or\n     destroyed when the reachability to the VTEP is gone.')
alcatelIND1ServiceMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapExtraInfoGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticNeighborServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticNeighborServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticQuerierServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticQuerierServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticNeighborServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticNeighborServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticQuerierServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticQuerierServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrExtendedLdpGeneralGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpExtendedSessionGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcBaseInfoEntryGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapBaseInfoEntryGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpInfoTableGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindTableGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSysTableGroup"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrEndPointGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1ServiceMgrMIBCompliance = alcatelIND1ServiceMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1ServiceMgrMIBCompliance.setDescription('Compliance statement for service manager.')
alaServiceMgrPortProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileStpBpduTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfile8021xTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfile8021ABTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfile8023adTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileGvrpTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileAmapTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileMvrpTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileCiscoPduTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileCiscoVlanTreatment"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortProfileCiscoUplinkTreatment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaServiceMgrPortProfileGroup = alaServiceMgrPortProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortProfileGroup.setDescription('Collection of objects for management of Service Manager Port Profiles.')
alaServiceMgrPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortEncapType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortPortProfileID"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortLinkStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortSapType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortVlanXlation"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaServiceMgrPortDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaServiceMgrPortGroup = alaServiceMgrPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaServiceMgrPortGroup.setDescription('Collection of objects for management of Service Manager Access Port.')
alaSapExtraInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapInfoTrusted"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapInfoPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSapExtraInfoGroup = alaSapExtraInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alaSapExtraInfoGroup.setDescription('Collection of objects for management of Sap extra info.')
alaIgmpServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceQuerying"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSpoofing"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceZapping"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceVersion"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceRobustness"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceQueryInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceQueryResponseInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceLastMemberQueryInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceRouterTimeout"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceTimeout"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceProxying"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceUnsolicitedReportInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceQuerierForwarding"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceGroup = alaIgmpServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceGroup.setDescription('Collection of objects for management of service igmp object.')
alaIgmpMemberServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpMemberServiceSapGroup = alaIgmpMemberServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSapGroup.setDescription('Collection of objects for management of service igmp member sap object.')
alaIgmpMemberServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpMemberServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpMemberServiceSdpBindGroup = alaIgmpMemberServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpMemberServiceSdpBindGroup.setDescription('Collection of objects for management of service igmp member sdp binding object.')
alaIgmpStaticMemberServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticMemberServiceSapGroup = alaIgmpStaticMemberServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSapGroup.setDescription('Collection of objects for management of service igmp static member sap object.')
alaIgmpStaticMemberServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticMemberServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticMemberServiceSdpBindGroup = alaIgmpStaticMemberServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticMemberServiceSdpBindGroup.setDescription('Collection of objects for management of service igmp static member sdp binding object.')
alaIgmpNeighborServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpNeighborServiceSapGroup = alaIgmpNeighborServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSapGroup.setDescription('Collection of objects for management of service igmp sap neighbor object.')
alaIgmpNeighborServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpNeighborServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpNeighborServiceSdpBindGroup = alaIgmpNeighborServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpNeighborServiceSdpBindGroup.setDescription('Collection of objects for management of service igmp SdpBind neighbor object.')
alaIgmpStaticNeighborServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticNeighborServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticNeighborServiceSapGroup = alaIgmpStaticNeighborServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSapGroup.setDescription('Collection of objects for management of service igmp sap static neighbor object.')
alaIgmpStaticNeighborServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticNeighborServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticNeighborServiceSdpBindGroup = alaIgmpStaticNeighborServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticNeighborServiceSdpBindGroup.setDescription('Collection of objects for management of service igmp SdpBind static neighbor object.')
alaIgmpQuerierServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpQuerierServiceSapGroup = alaIgmpQuerierServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSapGroup.setDescription('Collection of objects for management of service sap igmp querier object.')
alaIgmpQuerierServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpQuerierServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpQuerierServiceSdpBindGroup = alaIgmpQuerierServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpQuerierServiceSdpBindGroup.setDescription('Collection of objects for management of service SdpBind igmp querier object.')
alaIgmpStaticQuerierServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticQuerierServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticQuerierServiceSapGroup = alaIgmpStaticQuerierServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSapGroup.setDescription('Collection of objects for management of service sap igmp static querier object.')
alaIgmpStaticQuerierServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpStaticQuerierServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpStaticQuerierServiceSdpBindGroup = alaIgmpStaticQuerierServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpStaticQuerierServiceSdpBindGroup.setDescription('Collection of objects for management of service SdpBind igmp static querier object.')
alaIgmpServiceSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourcePortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceSourceGroup = alaIgmpServiceSourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSourceGroup.setDescription('Collection of objects for management of igmp service source object.')
alaIgmpServiceSapForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceSapForwardGroup = alaIgmpServiceSapForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapForwardGroup.setDescription('Collection of objects for management of igmp service sap forward object.')
alaIgmpServiceSdpBindForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceSdpBindForwardGroup = alaIgmpServiceSdpBindForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindForwardGroup.setDescription('Collection of objects for management of igmp service SdpBind forward object.')
alaIgmpServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapMaxGroupExceedAction"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSapCurrentGroupCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceSapGroup = alaIgmpServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSapGroup.setDescription('Collection of objects for management of igmp service sap object.')
alaIgmpServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 21)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindMaxGroupExceedAction"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaIgmpServiceSdpBindCurrentGroupCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIgmpServiceSdpBindGroup = alaIgmpServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaIgmpServiceSdpBindGroup.setDescription('Collection of objects for management of igmp service SdpBind object.')
alaMldServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 22)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceQuerying"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSpoofing"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceZapping"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceVersion"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceRobustness"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceQueryInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceQueryResponseInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceLastMemberQueryInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceRouterTimeout"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceTimeout"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceProxying"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceUnsolicitedReportInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceQuerierForwarding"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceMaxGroupExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceGroup = alaMldServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceGroup.setDescription('Collection of objects for management of service MLD object.')
alaMldMemberServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 23)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldMemberServiceSapGroup = alaMldMemberServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSapGroup.setDescription('Collection of objects for management of service MLD member sap object.')
alaMldMemberServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 24)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldMemberServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldMemberServiceSdpBindGroup = alaMldMemberServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldMemberServiceSdpBindGroup.setDescription('Collection of objects for management of service MLD member sdp binding object.')
alaMldStaticMemberServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 25)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticMemberServiceSapGroup = alaMldStaticMemberServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSapGroup.setDescription('Collection of objects for management of service MLD static member sap object.')
alaMldStaticMemberServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 26)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticMemberServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticMemberServiceSdpBindGroup = alaMldStaticMemberServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticMemberServiceSdpBindGroup.setDescription('Collection of objects for management of service MLD static member sdp binding object.')
alaMldNeighborServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 27)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldNeighborServiceSapGroup = alaMldNeighborServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSapGroup.setDescription('Collection of objects for management of service MLD sap neighbor object.')
alaMldNeighborServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 28)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldNeighborServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldNeighborServiceSdpBindGroup = alaMldNeighborServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldNeighborServiceSdpBindGroup.setDescription('Collection of objects for management of service MLD SdpBind neighbor object.')
alaMldStaticNeighborServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 29)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticNeighborServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticNeighborServiceSapGroup = alaMldStaticNeighborServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSapGroup.setDescription('Collection of objects for management of service MLD sap static neighbor object.')
alaMldStaticNeighborServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 30)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticNeighborServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticNeighborServiceSdpBindGroup = alaMldStaticNeighborServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticNeighborServiceSdpBindGroup.setDescription('Collection of objects for management of service MLD SdpBind static neighbor object.')
alaMldQuerierServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 31)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSapCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSapTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldQuerierServiceSapGroup = alaMldQuerierServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSapGroup.setDescription('Collection of objects for management of service sap MLD querier object.')
alaMldQuerierServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 32)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldQuerierServiceSdpBindTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldQuerierServiceSdpBindGroup = alaMldQuerierServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldQuerierServiceSdpBindGroup.setDescription('Collection of objects for management of service SdpBind MLD querier object.')
alaMldStaticQuerierServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 33)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticQuerierServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticQuerierServiceSapGroup = alaMldStaticQuerierServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSapGroup.setDescription('Collection of objects for management of service sap MLD static querier object.')
alaMldStaticQuerierServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 34)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldStaticQuerierServiceSdpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldStaticQuerierServiceSdpBindGroup = alaMldStaticQuerierServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldStaticQuerierServiceSdpBindGroup.setDescription('Collection of objects for management of service SdpBind MLD static querier object.')
alaMldServiceSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 35)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourcePortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSourceType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceSourceGroup = alaMldServiceSourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSourceGroup.setDescription('Collection of objects for management of MLD service source object.')
alaMldServiceSapForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 36)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceSapForwardGroup = alaMldServiceSapForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapForwardGroup.setDescription('Collection of objects for management of MLD service sap forward object.')
alaMldServiceSdpBindForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 37)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardLocale"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardSdpId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindForwardNextType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceSdpBindForwardGroup = alaMldServiceSdpBindForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindForwardGroup.setDescription('Collection of objects for management of MLD service SdpBind forward object.')
alaMldServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 38)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapMaxGroupExceedAction"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSapCurrentGroupCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceSapGroup = alaMldServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSapGroup.setDescription('Collection of objects for management of MLD service sap object.')
alaMldServiceSdpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 39)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindMaxGroupLimit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindMaxGroupExceedAction"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaMldServiceSdpBindCurrentGroupCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMldServiceSdpBindGroup = alaMldServiceSdpBindGroup.setStatus('current')
if mibBuilder.loadTexts: alaMldServiceSdpBindGroup.setDescription('Collection of objects for management of MLD service SdpBind object.')
alaVRtrExtendedLdpGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 40)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpGenGracefulRestartSupport"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpGenGRReconnectTime"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpGenGRFwdStateHoldTime"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpGenvRtrID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVRtrExtendedLdpGeneralGroup = alaVRtrExtendedLdpGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: alaVRtrExtendedLdpGeneralGroup.setDescription('Collection of objects for management of MLD service SdpBind object.')
alaVRtrLdpExtendedSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 41)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpSessRestartInProgress"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpSessFtReconTimeAdvertised"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpSessFtRecoveryTimeAdvertised"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaVRtrLdpSessvRtrID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVRtrLdpExtendedSessionGroup = alaVRtrLdpExtendedSessionGroup.setStatus('current')
if mibBuilder.loadTexts: alaVRtrLdpExtendedSessionGroup.setDescription('Collection of objects for management of MLD service SdpBind object.')
alaSvcBaseInfoEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 42)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcDescription"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMtu"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcNumSaps"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcNumSdps"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcLastMgmtChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcLastStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcDefMeshVcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcVFI"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMcIndex"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcAllocationType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcStatsAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcRemoteFlushStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcIsid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMulticastMode"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcIngressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcIngressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcEgressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcEgressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcClearCounters"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcSapVlanXlation"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcVnid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcRemoveIngressTag"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcL3VpnIfIndex"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcL3VpnIfName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcL3VpnVrfName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcL3VpnMtu"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSvcBaseInfoEntryGroup = alaSvcBaseInfoEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaSvcBaseInfoEntryGroup.setDescription('Collection of Service Manager management objects.')
alaSapBaseInfoEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 43)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPortId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEncapValue"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapDescription"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapLastMgmtChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapLastStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapOperFlags"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapTrusted"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapPriority"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapSvcId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapSvcVFI"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapVirtualPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapAllocationType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapStatsAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapIngressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapIngressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEgressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapEgressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSapClearCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSapBaseInfoEntryGroup = alaSapBaseInfoEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaSapBaseInfoEntryGroup.setDescription('Collection of SAP management objects.')
alaSdpInfoTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 44)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpDelivery"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpFarEndIpAddress"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpDescription"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpLabelSignaling"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpAdminPathMtu"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpOperPathMtu"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpLastMgmtChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpLdpEnabled"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpVlanVcEtype"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpAdvertisedVllMtuOverride"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpOperFlags"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpLastStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSystemName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpSpSourceId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpAllocationType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpDynamicType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpIsid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpMcastPortList"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpCreationOrigin"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpAdminTTL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSdpInfoTableGroup = alaSdpInfoTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaSdpInfoTableGroup.setDescription('Collection of SDP management objects.')
alaSdpBindTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 45)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSvcType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindAdminIngressLabel"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindAdminEgressLabel"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperIngressLabel"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperEgressLabel"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindLastMgmtChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperFlags"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindLastStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindControlWordBit"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindOperControlWord"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindNetworkPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindVirtualPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindIsid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindSystemName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindAllocationType"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindIngressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindIngressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindEgressPacketCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindEgressByteCount"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindCreationOrigin"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindFarEndIpAddress"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindVnid"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindDescription"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSdpBindStatsAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSdpBindTableGroup = alaSdpBindTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaSdpBindTableGroup.setDescription('Collection of SDP-Bind management objects.')
alaSmgrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 46)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrGeneralError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSapError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpBindError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrServiceError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrServiceStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSapStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpBindStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrVxlanSdpBindStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSmgrNotificationGroup = alaSmgrNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaSmgrNotificationGroup.setDescription(' Collection of Service Mgr errors.')
alaSmgrHwNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 47)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSapHwError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpBindHwError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrSdpHwError"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "smgrServiceHwError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSmgrHwNotificationGroup = alaSmgrHwNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaSmgrHwNotificationGroup.setDescription(' Collection of Service Mgr Hw errors.')
alaSvcMgrSysTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 48)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSysId"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSysName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSdpTrapAdminState"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSvcTrapAdminState"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSapTrapAdminState"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSdpBindTrapAdminState"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrMaxTrapPerMinute"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSysLastMgmtChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrSysLastStatusChange"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrStatsAdminState"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrVxlanDestUdpPort"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaSvcMgrVxlanVrfName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSvcMgrSysTableGroup = alaSvcMgrSysTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrSysTableGroup.setDescription('Collection of Service Mgr System management objects.')
alaSvcMgrEndPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 51, 1, 2, 1, 49)).setObjects(("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointCcmInterval"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointAdminStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointLevel"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointCBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointMaintDomain"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointMaintAssociation"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbLocalEndPointRowStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointStatus"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointSystemName"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointISID"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointBVlan"), ("ALCATEL-IND1-SERVICE-MGR-MIB", "alaRfpSpbRemoteEndPointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaSvcMgrEndPointGroup = alaSvcMgrEndPointGroup.setStatus('current')
if mibBuilder.loadTexts: alaSvcMgrEndPointGroup.setDescription('Collection of Service Mgr System management objects.')
mibBuilder.exportSymbols("ALCATEL-IND1-SERVICE-MGR-MIB", alaMldQuerierServiceSapGroup=alaMldQuerierServiceSapGroup, alaSdpMcastPortList=alaSdpMcastPortList, alaMldMemberServiceSdpBindEntry=alaMldMemberServiceSdpBindEntry, alaIgmpServiceMaxGroupExceedAction=alaIgmpServiceMaxGroupExceedAction, alaServiceMgrPortProfile8023adTreatment=alaServiceMgrPortProfile8023adTreatment, alaSvcIngressPacketCount=alaSvcIngressPacketCount, alaIgmpNeighborServiceSdpBindTimeout=alaIgmpNeighborServiceSdpBindTimeout, alaSmgrHwNotificationGroup=alaSmgrHwNotificationGroup, alaIgmpNeighborServiceSapCount=alaIgmpNeighborServiceSapCount, alaIgmpServiceSourceGroupAddressType=alaIgmpServiceSourceGroupAddressType, alaServiceMgrPortProfileCiscoVlanTreatment=alaServiceMgrPortProfileCiscoVlanTreatment, alaMldServiceSourceSdpId=alaMldServiceSourceSdpId, alaMldServiceSdpBindForwardPortId=alaMldServiceSdpBindForwardPortId, alaMldStaticMemberServiceSapGroup=alaMldStaticMemberServiceSapGroup, alaIgmpServiceSapForwardPortId=alaIgmpServiceSapForwardPortId, alaMldServiceSapForwardTable=alaMldServiceSapForwardTable, alaServiceMgrPortProfileCiscoPduTreatment=alaServiceMgrPortProfileCiscoPduTreatment, alaIgmpServiceQuerierForwarding=alaIgmpServiceQuerierForwarding, alaSvcRemoveIngressTag=alaSvcRemoveIngressTag, alaMldStaticMemberServiceSapEntry=alaMldStaticMemberServiceSapEntry, alaRfpSpbLocalEndPointEntry=alaRfpSpbLocalEndPointEntry, alaMldQuerierServiceSapTable=alaMldQuerierServiceSapTable, alaVRtrExtendedLdpGeneralGroup=alaVRtrExtendedLdpGeneralGroup, alaSapInfoTrusted=alaSapInfoTrusted, alaSdpBindNetworkPort=alaSdpBindNetworkPort, alaMldServiceSapCurrentGroupCount=alaMldServiceSapCurrentGroupCount, alaMldMemberServiceSapSourceAddressType=alaMldMemberServiceSapSourceAddressType, alaVRtrLdpExtendedSessionTable=alaVRtrLdpExtendedSessionTable, alaRfpSpbLocalEndPointLevel=alaRfpSpbLocalEndPointLevel, alaIgmpStaticMemberServiceSapEntry=alaIgmpStaticMemberServiceSapEntry, alaRfpSpbLocalEndPointCcmInterval=alaRfpSpbLocalEndPointCcmInterval, alaIgmpServiceSapForwardHostAddress=alaIgmpServiceSapForwardHostAddress, alaSvcLastMgmtChange=alaSvcLastMgmtChange, alaIgmpMemberServiceSdpBindGroup=alaIgmpMemberServiceSdpBindGroup, alaIgmpStaticMemberServiceSdpBindRowStatus=alaIgmpStaticMemberServiceSdpBindRowStatus, alaMldServiceSapForwardLocale=alaMldServiceSapForwardLocale, alaMldServiceSapForwardNextSapEncapValue=alaMldServiceSapForwardNextSapEncapValue, alaIgmpServiceSourceOrigAddress=alaIgmpServiceSourceOrigAddress, alaMldServiceSourceTimeout=alaMldServiceSourceTimeout, alaServiceMgrPortLinkStatus=alaServiceMgrPortLinkStatus, alaSapEncapValue=alaSapEncapValue, alaIgmpServiceVersion=alaIgmpServiceVersion, alaMldQuerierServiceSdpBindTable=alaMldQuerierServiceSdpBindTable, alaMldServiceSourceTable=alaMldServiceSourceTable, alaSapEgressPacketCount=alaSapEgressPacketCount, alaSdpBindStatsAdminStatus=alaSdpBindStatsAdminStatus, alaMldServiceSourceEntry=alaMldServiceSourceEntry, alaIgmpServiceSourceOrigAddressType=alaIgmpServiceSourceOrigAddressType, alaSvcBaseInfoTable=alaSvcBaseInfoTable, alaSapVirtualPort=alaSapVirtualPort, alaIgmpServiceSdpBindForwardDestAddress=alaIgmpServiceSdpBindForwardDestAddress, alaSdpBindSvcType=alaSdpBindSvcType, alaIgmpServiceSapForwardGroup=alaIgmpServiceSapForwardGroup, alaMldServiceSdpBindForwardOrigAddress=alaMldServiceSdpBindForwardOrigAddress, alaMldServiceRouterTimeout=alaMldServiceRouterTimeout, alaSapAllocationType=alaSapAllocationType, alaMldServiceSdpBindEntry=alaMldServiceSdpBindEntry, alaIgmpStaticMemberServiceSapGroup=alaIgmpStaticMemberServiceSapGroup, alaMldQuerierServiceSapEntry=alaMldQuerierServiceSapEntry, alaSvcBaseInfoEntry=alaSvcBaseInfoEntry, alaIgmpQuerierServiceSdpBindHostAddress=alaIgmpQuerierServiceSdpBindHostAddress, alaSapLastStatusChange=alaSapLastStatusChange, alaSvcEgressPacketCount=alaSvcEgressPacketCount, alaSdpAdminPathMtu=alaSdpAdminPathMtu, alaVRtrLdpGenGRReconnectTime=alaVRtrLdpGenGRReconnectTime, alaMldMemberServiceSdpBindTimeout=alaMldMemberServiceSdpBindTimeout, alaIgmpServiceSapForwardTable=alaIgmpServiceSapForwardTable, alaSdpBindAdminEgressLabel=alaSdpBindAdminEgressLabel, smgrStatusChange=smgrStatusChange, smgrSdpBindHwError=smgrSdpBindHwError, alaSdpBindIngressByteCount=alaSdpBindIngressByteCount, alaMldMemberServiceSapGroupAddress=alaMldMemberServiceSapGroupAddress, alaSvcBVlan=alaSvcBVlan, alaSdpBindControlWordBit=alaSdpBindControlWordBit, alaServiceMgrMld=alaServiceMgrMld, alaServiceMgrPortProfileAmapTreatment=alaServiceMgrPortProfileAmapTreatment, alaIgmpServiceSdpBindForwardNextType=alaIgmpServiceSdpBindForwardNextType, smgrSapError=smgrSapError, alaMldServiceMaxGroupExceedAction=alaMldServiceMaxGroupExceedAction, alaIgmpServiceSapGroup=alaIgmpServiceSapGroup, alaMldStaticQuerierServiceSapGroup=alaMldStaticQuerierServiceSapGroup, alaIgmpServiceSapCurrentGroupCount=alaIgmpServiceSapCurrentGroupCount, alaSvcDefMeshVcId=alaSvcDefMeshVcId, alaMldNeighborServiceSapEntry=alaMldNeighborServiceSapEntry, smgrSdpHwError=smgrSdpHwError, alaRfpSpbRemoteEndPointTable=alaRfpSpbRemoteEndPointTable, alaIgmpNeighborServiceSdpBindHostAddressType=alaIgmpNeighborServiceSdpBindHostAddressType, alaRfpSpbLocalEndPointMaintDomain=alaRfpSpbLocalEndPointMaintDomain, alaServiceMgrPortEntry=alaServiceMgrPortEntry, alaIgmpMemberServiceSdpBindCount=alaIgmpMemberServiceSdpBindCount, alaIgmpServiceSapForwardVcId=alaIgmpServiceSapForwardVcId, alaSvcL3VpnIfIndex=alaSvcL3VpnIfIndex, alaIgmpServiceSpoofing=alaIgmpServiceSpoofing, alaMldMemberServiceSdpBindTable=alaMldMemberServiceSdpBindTable, alaMldNeighborServiceSdpBindTimeout=alaMldNeighborServiceSdpBindTimeout, alaMldServiceSapForwardGroupAddress=alaMldServiceSapForwardGroupAddress, alaMldStaticNeighborServiceSapRowStatus=alaMldStaticNeighborServiceSapRowStatus, alaVRtrLdpGenGracefulRestartSupport=alaVRtrLdpGenGracefulRestartSupport, alaIgmpServiceSourceSdpId=alaIgmpServiceSourceSdpId, alaMldServiceQuerierForwarding=alaMldServiceQuerierForwarding, alaSdpBindOperControlWord=alaSdpBindOperControlWord, alaVRtrExtendedLdpGeneralTable=alaVRtrExtendedLdpGeneralTable, alaIgmpServiceSapForwardEncapValue=alaIgmpServiceSapForwardEncapValue, alaRfpSpb=alaRfpSpb, alaMldServiceSapForwardGroup=alaMldServiceSapForwardGroup, alaSvcL3VpnIfName=alaSvcL3VpnIfName, alaMldServiceSdpBindCurrentGroupCount=alaMldServiceSdpBindCurrentGroupCount, alaSapAdminStatus=alaSapAdminStatus, alaSvcClearCounters=alaSvcClearCounters, alaIgmpServiceSourceVcId=alaIgmpServiceSourceVcId, alaMldStaticMemberServiceSdpBindRowStatus=alaMldStaticMemberServiceSdpBindRowStatus, alaMldServiceSourceGroup=alaMldServiceSourceGroup, alaSdpDescription=alaSdpDescription, alaMldStaticMemberServiceSapGroupAddressType=alaMldStaticMemberServiceSapGroupAddressType, alaServiceMgrNotifications=alaServiceMgrNotifications, alaMldStaticMemberServiceSdpBindTable=alaMldStaticMemberServiceSdpBindTable, alcatelIND1ServiceMgrMIBGroups=alcatelIND1ServiceMgrMIBGroups, alaIgmpServiceSourceGroup=alaIgmpServiceSourceGroup, alaMldQuerierServiceSdpBindGroup=alaMldQuerierServiceSdpBindGroup, alaSdpNetworkPort=alaSdpNetworkPort, alaServiceMgrPortProfileGvrpTreatment=alaServiceMgrPortProfileGvrpTreatment, alaSdpBindSystemName=alaSdpBindSystemName, alaSvcMgrStatsAdminState=alaSvcMgrStatsAdminState, alaSvcIsid=alaSvcIsid, alaMldServiceSdpBindForwardLocale=alaMldServiceSdpBindForwardLocale, alaIgmpMemberServiceSdpBindTable=alaIgmpMemberServiceSdpBindTable, alaMldMemberServiceSapGroupAddressType=alaMldMemberServiceSapGroupAddressType, alaMldServiceSdpBindForwardGroupAddress=alaMldServiceSdpBindForwardGroupAddress, alaRfpSpbLocalEndPointRfp=alaRfpSpbLocalEndPointRfp, alaIgmpStaticMemberServiceSdpBindGroupAddress=alaIgmpStaticMemberServiceSdpBindGroupAddress, alaIgmpNeighborServiceSdpBindTable=alaIgmpNeighborServiceSdpBindTable, alaIgmpMemberServiceSapTimeout=alaIgmpMemberServiceSapTimeout, alaRfpSpbRemoteEndPointServiceID=alaRfpSpbRemoteEndPointServiceID, alaSdpBindEntry=alaSdpBindEntry, alaMldServiceSourceHostAddress=alaMldServiceSourceHostAddress, alcatelIND1ServiceMgrMIBObjects=alcatelIND1ServiceMgrMIBObjects, alaSapExtraInfoEntry=alaSapExtraInfoEntry, alaIgmpStaticNeighborServiceSdpBindGroup=alaIgmpStaticNeighborServiceSdpBindGroup, alaRfpSpbRemoteEndPointRfp=alaRfpSpbRemoteEndPointRfp, smgrSdpBindStatusChange=smgrSdpBindStatusChange, alaIgmpServiceSapForwardNextSapPortId=alaIgmpServiceSapForwardNextSapPortId, alaMldServiceSdpBindMaxGroupExceedAction=alaMldServiceSdpBindMaxGroupExceedAction, alaMldNeighborServiceSapTimeout=alaMldNeighborServiceSapTimeout, alaMldServiceSapGroup=alaMldServiceSapGroup, alaIgmpServiceGroup=alaIgmpServiceGroup, alaIgmpMemberServiceSdpBindSourceAddress=alaIgmpMemberServiceSdpBindSourceAddress, alaMldStaticNeighborServiceSdpBindTable=alaMldStaticNeighborServiceSdpBindTable, alaSvcMgrSysLastStatusChange=alaSvcMgrSysLastStatusChange, alaMldMemberServiceSapMode=alaMldMemberServiceSapMode, alaSapPortId=alaSapPortId, alaIgmpMemberServiceSapGroupAddress=alaIgmpMemberServiceSapGroupAddress, alaSdpFarEndIpAddress=alaSdpFarEndIpAddress, alaIgmpServiceSdpBindForwardPortId=alaIgmpServiceSdpBindForwardPortId, alaSdpBindIsid=alaSdpBindIsid, alaServiceMgrPortVlanXlation=alaServiceMgrPortVlanXlation, alaSapPriority=alaSapPriority, alaRfpSpbRemoteEndPointISID=alaRfpSpbRemoteEndPointISID, alaSvcMgrVxlanDestUdpPort=alaSvcMgrVxlanDestUdpPort, alaIgmpServiceSapForwardEntry=alaIgmpServiceSapForwardEntry, alaMldServiceZapping=alaMldServiceZapping, alaIgmpStaticNeighborServiceSapRowStatus=alaIgmpStaticNeighborServiceSapRowStatus, alaMldServiceSdpBindForwardVcId=alaMldServiceSdpBindForwardVcId, alaIgmpServiceStatus=alaIgmpServiceStatus, alaSvcAdminStatus=alaSvcAdminStatus, alaMldServiceMaxGroupLimit=alaMldServiceMaxGroupLimit, AluAllocationType=AluAllocationType, alaMldStaticMemberServiceSdpBindGroupAddressType=alaMldStaticMemberServiceSdpBindGroupAddressType, AluSdpId=AluSdpId, alaMldStaticNeighborServiceSapEntry=alaMldStaticNeighborServiceSapEntry, alaSvcMgrSapTrapAdminState=alaSvcMgrSapTrapAdminState, alaSdpBindCreationOrigin=alaSdpBindCreationOrigin, alaIgmpStaticMemberServiceSdpBindTable=alaIgmpStaticMemberServiceSdpBindTable, smgrSapHwError=smgrSapHwError, alaMldServiceSourceDestAddressType=alaMldServiceSourceDestAddressType, alaIgmpMemberServiceSapGroupAddressType=alaIgmpMemberServiceSapGroupAddressType, alaMldServiceSapTable=alaMldServiceSapTable, alaIgmpQuerierServiceSdpBindHostAddressType=alaIgmpQuerierServiceSdpBindHostAddressType, alaSdpId=alaSdpId, alaSdpOperStatus=alaSdpOperStatus, alaIgmpStaticNeighborServiceSdpBindEntry=alaIgmpStaticNeighborServiceSdpBindEntry, alaServiceMgrPortProfileStpBpduTreatment=alaServiceMgrPortProfileStpBpduTreatment, alaSapEgressByteCount=alaSapEgressByteCount, alaIgmpServiceSourcePortId=alaIgmpServiceSourcePortId, alaIgmpMemberServiceSapSourceAddressType=alaIgmpMemberServiceSapSourceAddressType, alaSvcType=alaSvcType, alaMldQuerierServiceSdpBindHostAddress=alaMldQuerierServiceSdpBindHostAddress, alaIgmpServiceSourceHostAddressType=alaIgmpServiceSourceHostAddressType, alaSdpInfoTable=alaSdpInfoTable, alaIgmpServiceSourceEncapValue=alaIgmpServiceSourceEncapValue, alaMldServiceVersion=alaMldServiceVersion, alaMldNeighborServiceSdpBindCount=alaMldNeighborServiceSdpBindCount, alaMldMemberServiceSapSourceAddress=alaMldMemberServiceSapSourceAddress, alaVRtrLdpSessRestartInProgress=alaVRtrLdpSessRestartInProgress, alaIgmpServiceSourceEntry=alaIgmpServiceSourceEntry, alaSvcId=alaSvcId, alaServiceMgrPortEncapType=alaServiceMgrPortEncapType, alaIgmpServiceSapMaxGroupLimit=alaIgmpServiceSapMaxGroupLimit, alaSdpBindFarEndIpAddress=alaSdpBindFarEndIpAddress, alaSdpSystemId=alaSdpSystemId, alaMldNeighborServiceSdpBindEntry=alaMldNeighborServiceSdpBindEntry, alaIgmpServiceQuerying=alaIgmpServiceQuerying, alaIgmpServiceSdpBindForwardOrigAddress=alaIgmpServiceSdpBindForwardOrigAddress, alaSvcMgrSvcTrapAdminState=alaSvcMgrSvcTrapAdminState, alaSapExtraInfoGroup=alaSapExtraInfoGroup, alaMldServiceSourceGroupAddress=alaMldServiceSourceGroupAddress, alaSvcVnid=alaSvcVnid, alaSapInfoPriority=alaSapInfoPriority, alaSvcMgrMaxTrapPerMinute=alaSvcMgrMaxTrapPerMinute, alaMldServiceSourceType=alaMldServiceSourceType, alaMldQuerierServiceSapTimeout=alaMldQuerierServiceSapTimeout, alaServiceMgrPortPortProfileID=alaServiceMgrPortPortProfileID, PYSNMP_MODULE_ID=alcatelIND1ServiceMgrMIB, alaMldServiceSourceHostAddressType=alaMldServiceSourceHostAddressType, alaSdpInfoEntry=alaSdpInfoEntry, alaMldServiceSourceOrigAddressType=alaMldServiceSourceOrigAddressType, AluLocation=AluLocation, alaMldStaticMemberServiceSapTable=alaMldStaticMemberServiceSapTable, alcatelIND1ServiceMgrMIBCompliance=alcatelIND1ServiceMgrMIBCompliance, alaIgmpStaticQuerierServiceSapRowStatus=alaIgmpStaticQuerierServiceSapRowStatus, alaSdpBindBVlan=alaSdpBindBVlan, alaMldServiceQueryInterval=alaMldServiceQueryInterval, alaVRtrLdpExtendedSessionGroup=alaVRtrLdpExtendedSessionGroup, alaSdpLabelSignaling=alaSdpLabelSignaling, alaMldNeighborServiceSapTable=alaMldNeighborServiceSapTable, alaMldStaticQuerierServiceSdpBindEntry=alaMldStaticQuerierServiceSdpBindEntry, alaIgmpServiceSourceHostAddress=alaIgmpServiceSourceHostAddress, alaMldServiceEntry=alaMldServiceEntry, alaMldStaticMemberServiceSdpBindGroupAddress=alaMldStaticMemberServiceSdpBindGroupAddress, alaSdpSvcType=alaSdpSvcType, alaSdpLdpEnabled=alaSdpLdpEnabled, alaSapSvcId=alaSapSvcId, alaIgmpServiceSourceDestAddressType=alaIgmpServiceSourceDestAddressType, alaMldServiceSourceEncapValue=alaMldServiceSourceEncapValue, alaMldServiceSdpBindGroup=alaMldServiceSdpBindGroup, alaMldServiceLastMemberQueryInterval=alaMldServiceLastMemberQueryInterval, alaMldServiceSpoofing=alaMldServiceSpoofing, alaVRtrLdpExtendedSessionEntry=alaVRtrLdpExtendedSessionEntry, alaIgmpServiceRobustness=alaIgmpServiceRobustness, alaIgmpServiceSdpBindForwardType=alaIgmpServiceSdpBindForwardType, alaIgmpServiceUnsolicitedReportInterval=alaIgmpServiceUnsolicitedReportInterval, alaSvcMulticastMode=alaSvcMulticastMode, alaMldServiceUnsolicitedReportInterval=alaMldServiceUnsolicitedReportInterval, alaIgmpMemberServiceSapCount=alaIgmpMemberServiceSapCount, alaRfpSpbLocalEndPoint=alaRfpSpbLocalEndPoint, alaSdpInfoTableGroup=alaSdpInfoTableGroup, alaIgmpStaticNeighborServiceSapGroup=alaIgmpStaticNeighborServiceSapGroup, alaMldNeighborServiceSapGroup=alaMldNeighborServiceSapGroup, alaSapClearCounters=alaSapClearCounters, alaMldServiceSapEntry=alaMldServiceSapEntry, smgrGeneralError=smgrGeneralError, alaIgmpQuerierServiceSapHostAddress=alaIgmpQuerierServiceSapHostAddress, alaIgmpServiceSdpBindForwardVcId=alaIgmpServiceSdpBindForwardVcId, alaIgmpServiceZapping=alaIgmpServiceZapping, alaIgmpStaticQuerierServiceSdpBindRowStatus=alaIgmpStaticQuerierServiceSdpBindRowStatus)
mibBuilder.exportSymbols("ALCATEL-IND1-SERVICE-MGR-MIB", alaSvcL3VpnMtu=alaSvcL3VpnMtu, alaSvcOperStatus=alaSvcOperStatus, alaServiceMgrPortProfile8021xTreatment=alaServiceMgrPortProfile8021xTreatment, alaServiceMgrPortSapType=alaServiceMgrPortSapType, alaIgmpStaticMemberServiceSapTable=alaIgmpStaticMemberServiceSapTable, alaSdpAllocationType=alaSdpAllocationType, alaIgmpServiceSdpBindForwardHostAddress=alaIgmpServiceSdpBindForwardHostAddress, alaSvcIngressByteCount=alaSvcIngressByteCount, alaSapTrusted=alaSapTrusted, alaMldMemberServiceSdpBindGroupAddressType=alaMldMemberServiceSdpBindGroupAddressType, alaSdpBindAdminStatus=alaSdpBindAdminStatus, alaMldNeighborServiceSdpBindHostAddress=alaMldNeighborServiceSdpBindHostAddress, alaSvcBaseInfoEntryGroup=alaSvcBaseInfoEntryGroup, alaSapRowStatus=alaSapRowStatus, alaSdpBindLastStatusChange=alaSdpBindLastStatusChange, alaMldMemberServiceSapTimeout=alaMldMemberServiceSapTimeout, alaIgmpServiceSdpBindForwardTable=alaIgmpServiceSdpBindForwardTable, alaSvcMgrSysTableGroup=alaSvcMgrSysTableGroup, alaSapBaseInfoEntryGroup=alaSapBaseInfoEntryGroup, alaIgmpServiceTable=alaIgmpServiceTable, alaServiceMgrPortProfileID=alaServiceMgrPortProfileID, alaSdpBindIngressPacketCount=alaSdpBindIngressPacketCount, alaSvcMgrEndPointGroup=alaSvcMgrEndPointGroup, alaMldMemberServiceSapCount=alaMldMemberServiceSapCount, alaMldServiceSapMaxGroupLimit=alaMldServiceSapMaxGroupLimit, alaMldMemberServiceSdpBindCount=alaMldMemberServiceSdpBindCount, alaSapIngressPacketCount=alaSapIngressPacketCount, alaIgmpServiceProxying=alaIgmpServiceProxying, alaMldServiceSapForwardHostAddress=alaMldServiceSapForwardHostAddress, alaIgmpQuerierServiceSapHostAddressType=alaIgmpQuerierServiceSapHostAddressType, alaMldQuerierServiceSdpBindTimeout=alaMldQuerierServiceSdpBindTimeout, alaSvcSapVlanXlation=alaSvcSapVlanXlation, alaSdpDynamicType=alaSdpDynamicType, alaIgmpMemberServiceSapTable=alaIgmpMemberServiceSapTable, alaSdpBindSystemId=alaSdpBindSystemId, alaIgmpStaticQuerierServiceSdpBindEntry=alaIgmpStaticQuerierServiceSdpBindEntry, alaMldServiceSourcePortId=alaMldServiceSourcePortId, alaMldServiceSourceVcId=alaMldServiceSourceVcId, alaIgmpQuerierServiceSdpBindTimeout=alaIgmpQuerierServiceSdpBindTimeout, alaMldServiceTable=alaMldServiceTable, alaIgmpMemberServiceSdpBindEntry=alaIgmpMemberServiceSdpBindEntry, alaMldStaticNeighborServiceSdpBindRowStatus=alaMldStaticNeighborServiceSdpBindRowStatus, alaSdpBindOperStatus=alaSdpBindOperStatus, alaIgmpStaticNeighborServiceSdpBindRowStatus=alaIgmpStaticNeighborServiceSdpBindRowStatus, alaMldMemberServiceSapTable=alaMldMemberServiceSapTable, smgrSdpError=smgrSdpError, alcatelIND1ServiceMgrMIB=alcatelIND1ServiceMgrMIB, alaIgmpMemberServiceSapMode=alaIgmpMemberServiceSapMode, alaIgmpNeighborServiceSdpBindCount=alaIgmpNeighborServiceSdpBindCount, alaIgmpStaticMemberServiceSdpBindEntry=alaIgmpStaticMemberServiceSdpBindEntry, alaServiceMgrPortProfileEntry=alaServiceMgrPortProfileEntry, alaIgmpQuerierServiceSdpBindTable=alaIgmpQuerierServiceSdpBindTable, alaIgmpQuerierServiceSdpBindCount=alaIgmpQuerierServiceSdpBindCount, smgrVxlanSdpBindStatusChange=smgrVxlanSdpBindStatusChange, alaIgmpNeighborServiceSdpBindEntry=alaIgmpNeighborServiceSdpBindEntry, alaSvcL3VpnVrfName=alaSvcL3VpnVrfName, alaRfpSpbRemoteEndPointStatus=alaRfpSpbRemoteEndPointStatus, alaSapExtraInfoTable=alaSapExtraInfoTable, alaSdpBindEgressByteCount=alaSdpBindEgressByteCount, alaIgmpStaticNeighborServiceSdpBindTable=alaIgmpStaticNeighborServiceSdpBindTable, alaMldServiceSapForwardEntry=alaMldServiceSapForwardEntry, alaMldNeighborServiceSapHostAddressType=alaMldNeighborServiceSapHostAddressType, alaIgmpServiceMaxGroupLimit=alaIgmpServiceMaxGroupLimit, alaIgmpQuerierServiceSapTimeout=alaIgmpQuerierServiceSapTimeout, alaSdpBindAdminIngressLabel=alaSdpBindAdminIngressLabel, alaSdpBindDescription=alaSdpBindDescription, alaSdpBindVnid=alaSdpBindVnid, alaIgmpStaticQuerierServiceSapTable=alaIgmpStaticQuerierServiceSapTable, alaIgmpStaticMemberServiceSdpBindGroup=alaIgmpStaticMemberServiceSdpBindGroup, alaMldStaticQuerierServiceSapEntry=alaMldStaticQuerierServiceSapEntry, alaServiceMgrIgmp=alaServiceMgrIgmp, alaServiceMgrPortSapCount=alaServiceMgrPortSapCount, alaMldNeighborServiceSdpBindTable=alaMldNeighborServiceSdpBindTable, alaIgmpMemberServiceSdpBindMode=alaIgmpMemberServiceSdpBindMode, alcatelIND1ServiceMgrMIBConformance=alcatelIND1ServiceMgrMIBConformance, alaSdpBindOperIngressLabel=alaSdpBindOperIngressLabel, alaMldQuerierServiceSapCount=alaMldQuerierServiceSapCount, alaIgmpServiceSapForwardGroupAddress=alaIgmpServiceSapForwardGroupAddress, alaIgmpQuerierServiceSapTable=alaIgmpQuerierServiceSapTable, alaIgmpServiceSdpBindForwardGroupAddress=alaIgmpServiceSdpBindForwardGroupAddress, smgrServiceStatusChange=smgrServiceStatusChange, alaIgmpServiceLastMemberQueryInterval=alaIgmpServiceLastMemberQueryInterval, alaIgmpServiceSapForwardNextSapEncapValue=alaIgmpServiceSapForwardNextSapEncapValue, alaIgmpServiceRouterTimeout=alaIgmpServiceRouterTimeout, alaIgmpMemberServiceSdpBindGroupAddressType=alaIgmpMemberServiceSdpBindGroupAddressType, alaServiceMgrPortProfileTable=alaServiceMgrPortProfileTable, alaIgmpNeighborServiceSapTimeout=alaIgmpNeighborServiceSapTimeout, alaIgmpStaticMemberServiceSdpBindGroupAddressType=alaIgmpStaticMemberServiceSdpBindGroupAddressType, AluSdpOriginType=AluSdpOriginType, alaMldServiceSourceLocale=alaMldServiceSourceLocale, alaRfpSpbRemoteEndPointEntry=alaRfpSpbRemoteEndPointEntry, alaIgmpStaticQuerierServiceSapGroup=alaIgmpStaticQuerierServiceSapGroup, alaMldStaticNeighborServiceSdpBindEntry=alaMldStaticNeighborServiceSdpBindEntry, alaServiceMgrPortProfileCiscoUplinkTreatment=alaServiceMgrPortProfileCiscoUplinkTreatment, alaMldServiceQuerying=alaMldServiceQuerying, alaRfpSpbLocalEndPointCBVlan=alaRfpSpbLocalEndPointCBVlan, alaSdpBindOperFlags=alaSdpBindOperFlags, alaIgmpStaticNeighborServiceSapTable=alaIgmpStaticNeighborServiceSapTable, alaIgmpServiceSdpBindGroup=alaIgmpServiceSdpBindGroup, alaIgmpMemberServiceSdpBindTimeout=alaIgmpMemberServiceSdpBindTimeout, alaMldQuerierServiceSdpBindCount=alaMldQuerierServiceSdpBindCount, alaRfpSpbLocalEndPointMaintAssociation=alaRfpSpbLocalEndPointMaintAssociation, smgrSdpStatusChange=smgrSdpStatusChange, alaSvcStatsAdminStatus=alaSvcStatsAdminStatus, alaRfpSpbRemoteEndPointRowStatus=alaRfpSpbRemoteEndPointRowStatus, alaSapSvcVFI=alaSapSvcVFI, alaSvcMgrVxlanVrfName=alaSvcMgrVxlanVrfName, alaMldServiceSapForwardNextSapPortId=alaMldServiceSapForwardNextSapPortId, alaSdpRowStatus=alaSdpRowStatus, alaIgmpNeighborServiceSapTable=alaIgmpNeighborServiceSapTable, alaMldServiceGroup=alaMldServiceGroup, alaIgmpServiceSapEntry=alaIgmpServiceSapEntry, alaMldServiceSourceOrigAddress=alaMldServiceSourceOrigAddress, alaIgmpMemberServiceSdpBindGroupAddress=alaIgmpMemberServiceSdpBindGroupAddress, AluServiceId=AluServiceId, alaSvcNumSdps=alaSvcNumSdps, alaMldStaticMemberServiceSdpBindEntry=alaMldStaticMemberServiceSdpBindEntry, alaSdpOperPathMtu=alaSdpOperPathMtu, alaMldServiceSdpBindTable=alaMldServiceSdpBindTable, alaSdpLastMgmtChange=alaSdpLastMgmtChange, alaMldStaticQuerierServiceSapTable=alaMldStaticQuerierServiceSapTable, alaMldStaticNeighborServiceSapGroup=alaMldStaticNeighborServiceSapGroup, alaServiceMgrPortTable=alaServiceMgrPortTable, alaIgmpNeighborServiceSapHostAddressType=alaIgmpNeighborServiceSapHostAddressType, alaSdpBindTableGroup=alaSdpBindTableGroup, alaRfpSpbRemoteEndPointBVlan=alaRfpSpbRemoteEndPointBVlan, alaIgmpMemberServiceSapSourceAddress=alaIgmpMemberServiceSapSourceAddress, alaIgmpServiceSapForwardDestAddress=alaIgmpServiceSapForwardDestAddress, alaSdpBindType=alaSdpBindType, alaVRtrExtendedLdpGeneralEntry=alaVRtrExtendedLdpGeneralEntry, alaIgmpServiceEntry=alaIgmpServiceEntry, alaMldServiceSdpBindForwardNextSdpBindId=alaMldServiceSdpBindForwardNextSdpBindId, alaSdpBindRowStatus=alaSdpBindRowStatus, alaIgmpServiceSdpBindForwardLocale=alaIgmpServiceSdpBindForwardLocale, alaIgmpNeighborServiceSdpBindHostAddress=alaIgmpNeighborServiceSdpBindHostAddress, alaMldServiceSdpBindForwardDestAddress=alaMldServiceSdpBindForwardDestAddress, alaMldStaticMemberServiceSapGroupAddress=alaMldStaticMemberServiceSapGroupAddress, alaSdpSpSourceId=alaSdpSpSourceId, alaIgmpStaticMemberServiceSapGroupAddressType=alaIgmpStaticMemberServiceSapGroupAddressType, alaMldStaticMemberServiceSapRowStatus=alaMldStaticMemberServiceSapRowStatus, AluServiceType=AluServiceType, alaMldMemberServiceSapGroup=alaMldMemberServiceSapGroup, alaIgmpServiceSdpBindForwardEncapValue=alaIgmpServiceSdpBindForwardEncapValue, alaServiceMgrPortGroup=alaServiceMgrPortGroup, alaMldStaticQuerierServiceSdpBindGroup=alaMldStaticQuerierServiceSdpBindGroup, alaSdpDelivery=alaSdpDelivery, alaMldQuerierServiceSapHostAddressType=alaMldQuerierServiceSapHostAddressType, alaServiceMgrPortProfileGroup=alaServiceMgrPortProfileGroup, alaIgmpServiceSdpBindEntry=alaIgmpServiceSdpBindEntry, alaIgmpNeighborServiceSapHostAddress=alaIgmpNeighborServiceSapHostAddress, alaMldStaticNeighborServiceSapTable=alaMldStaticNeighborServiceSapTable, alaVRtrLdpPeerLdpId=alaVRtrLdpPeerLdpId, alaVRtrLdpSessFtReconTimeAdvertised=alaVRtrLdpSessFtReconTimeAdvertised, alaIgmpNeighborServiceSapGroup=alaIgmpNeighborServiceSapGroup, alaMldServiceSapForwardNextType=alaMldServiceSapForwardNextType, alaIgmpServiceSourceDestAddress=alaIgmpServiceSourceDestAddress, smgrServiceHwError=smgrServiceHwError, alaMldMemberServiceSapEntry=alaMldMemberServiceSapEntry, alaIgmpServiceSapMaxGroupExceedAction=alaIgmpServiceSapMaxGroupExceedAction, alaSdpVlanVcEtype=alaSdpVlanVcEtype, alaMldQuerierServiceSdpBindHostAddressType=alaMldQuerierServiceSdpBindHostAddressType, alaIgmpNeighborServiceSdpBindGroup=alaIgmpNeighborServiceSdpBindGroup, alaSdpBindId=alaSdpBindId, alaIgmpQuerierServiceSdpBindGroup=alaIgmpQuerierServiceSdpBindGroup, alaSvcNumSaps=alaSvcNumSaps, alaSapIngressByteCount=alaSapIngressByteCount, alaSdpAdminTTL=alaSdpAdminTTL, AluSdpDynamicType=AluSdpDynamicType, alaMldQuerierServiceSapHostAddress=alaMldQuerierServiceSapHostAddress, alaIgmpServiceSapForwardLocale=alaIgmpServiceSapForwardLocale, alaIgmpServiceSourceTimeout=alaIgmpServiceSourceTimeout, alaIgmpQuerierServiceSapEntry=alaIgmpQuerierServiceSapEntry, alaIgmpServiceSdpBindForwardNextSdpBindId=alaIgmpServiceSdpBindForwardNextSdpBindId, alaIgmpStaticQuerierServiceSdpBindGroup=alaIgmpStaticQuerierServiceSdpBindGroup, alaIgmpServiceSdpBindCurrentGroupCount=alaIgmpServiceSdpBindCurrentGroupCount, alaSvcMgrSdpBindTrapAdminState=alaSvcMgrSdpBindTrapAdminState, alaExtraLdp=alaExtraLdp, alaMldServiceSapForwardDestAddress=alaMldServiceSapForwardDestAddress, alaVRtrLdpGenvRtrID=alaVRtrLdpGenvRtrID, alaSdpLastStatusChange=alaSdpLastStatusChange, alaIgmpServiceQueryInterval=alaIgmpServiceQueryInterval, alaMldMemberServiceSdpBindSourceAddressType=alaMldMemberServiceSdpBindSourceAddressType, alaMldServiceSourceGroupAddressType=alaMldServiceSourceGroupAddressType, alaSmgrNotificationGroup=alaSmgrNotificationGroup, alaServiceMgrPortProfileRowStatus=alaServiceMgrPortProfileRowStatus, alaSdpBindEgressPacketCount=alaSdpBindEgressPacketCount, alaRfpSpbRemoteEndPointSystemName=alaRfpSpbRemoteEndPointSystemName, alaSdpBVlan=alaSdpBVlan, alaSdpCreationOrigin=alaSdpCreationOrigin, alaMldServiceSdpBindForwardGroup=alaMldServiceSdpBindForwardGroup, alaMldServiceSapForwardType=alaMldServiceSapForwardType, AluDateAndTime=AluDateAndTime, alaRfpSpbLocalEndPointAdminStatus=alaRfpSpbLocalEndPointAdminStatus, alaVRtrLdpSessFtRecoveryTimeAdvertised=alaVRtrLdpSessFtRecoveryTimeAdvertised, alaSvcRowStatus=alaSvcRowStatus, smgrSapStatusChange=smgrSapStatusChange, alaServiceMgrPortProfileMvrpTreatment=alaServiceMgrPortProfileMvrpTreatment, alaMldNeighborServiceSapCount=alaMldNeighborServiceSapCount, alaMldServiceSdpBindForwardEntry=alaMldServiceSdpBindForwardEntry, alaServiceMgrPortDescription=alaServiceMgrPortDescription, alaIgmpStaticMemberServiceSapGroupAddress=alaIgmpStaticMemberServiceSapGroupAddress, alaServiceMgrPortRowStatus=alaServiceMgrPortRowStatus, alaIgmpServiceSdpBindMaxGroupExceedAction=alaIgmpServiceSdpBindMaxGroupExceedAction, alaMldServiceSdpBindForwardEncapValue=alaMldServiceSdpBindForwardEncapValue, alaMldNeighborServiceSapHostAddress=alaMldNeighborServiceSapHostAddress, alaSvcDescription=alaSvcDescription, alaIgmpQuerierServiceSapCount=alaIgmpQuerierServiceSapCount, alaMldServiceQueryResponseInterval=alaMldServiceQueryResponseInterval, alaMldQuerierServiceSdpBindEntry=alaMldQuerierServiceSdpBindEntry, alaMldStaticQuerierServiceSapRowStatus=alaMldStaticQuerierServiceSapRowStatus, smgrServiceError=smgrServiceError, alaIgmpQuerierServiceSdpBindEntry=alaIgmpQuerierServiceSdpBindEntry, alaSvcEgressByteCount=alaSvcEgressByteCount, alaIgmpServiceSdpBindForwardGroup=alaIgmpServiceSdpBindForwardGroup, alaMldStaticQuerierServiceSdpBindTable=alaMldStaticQuerierServiceSdpBindTable, alaMldMemberServiceSdpBindGroup=alaMldMemberServiceSdpBindGroup, alaSdpBindAllocationType=alaSdpBindAllocationType, alaRfpSpbLocalEndPointTable=alaRfpSpbLocalEndPointTable, alaIgmpServiceSourceTable=alaIgmpServiceSourceTable, alaSvcMgrSdpTrapAdminState=alaSvcMgrSdpTrapAdminState, alaMldServiceSapForwardPortId=alaMldServiceSapForwardPortId, alaMldServiceSdpBindForwardTable=alaMldServiceSdpBindForwardTable, alaVRtrLdpGenGRFwdStateHoldTime=alaVRtrLdpGenGRFwdStateHoldTime, alaSapDescription=alaSapDescription, alaMldServiceStatus=alaMldServiceStatus, alaRfpSpbLocalEndPointRowStatus=alaRfpSpbLocalEndPointRowStatus, alaIgmpServiceSourceGroupAddress=alaIgmpServiceSourceGroupAddress, alaMldMemberServiceSdpBindGroupAddress=alaMldMemberServiceSdpBindGroupAddress, alaMldServiceSdpBindForwardHostAddress=alaMldServiceSdpBindForwardHostAddress, alaSvcMgrSysName=alaSvcMgrSysName, alaSapOperStatus=alaSapOperStatus, alaIgmpServiceSourceType=alaIgmpServiceSourceType, alaSvcRemoteFlushStatus=alaSvcRemoteFlushStatus, alaIgmpServiceSapForwardOrigAddress=alaIgmpServiceSapForwardOrigAddress, alaSapType=alaSapType, alaServiceMgr=alaServiceMgr, alaSvcMtu=alaSvcMtu, alaIgmpStaticQuerierServiceSdpBindTable=alaIgmpStaticQuerierServiceSdpBindTable, alaMldServiceSdpBindForwardType=alaMldServiceSdpBindForwardType, alaMldServiceSapForwardVcId=alaMldServiceSapForwardVcId, alaIgmpMemberServiceSapGroup=alaIgmpMemberServiceSapGroup, alaSapBaseInfoTable=alaSapBaseInfoTable, alaSvcMgrSysId=alaSvcMgrSysId, alaMldServiceSdpBindForwardNextType=alaMldServiceSdpBindForwardNextType, alaIgmpNeighborServiceSapEntry=alaIgmpNeighborServiceSapEntry, alaSdpBindLastMgmtChange=alaSdpBindLastMgmtChange, alaSvcLastStatusChange=alaSvcLastStatusChange, alaIgmpMemberServiceSapEntry=alaIgmpMemberServiceSapEntry, alaIgmpServiceSdpBindMaxGroupLimit=alaIgmpServiceSdpBindMaxGroupLimit, alaMldServiceSapMaxGroupExceedAction=alaMldServiceSapMaxGroupExceedAction, smgrSdpBindError=smgrSdpBindError, alaSvcMgrSysTable=alaSvcMgrSysTable, alaIgmpStaticQuerierServiceSapEntry=alaIgmpStaticQuerierServiceSapEntry, alaSdpSystemName=alaSdpSystemName)
mibBuilder.exportSymbols("ALCATEL-IND1-SERVICE-MGR-MIB", alaMldServiceRobustness=alaMldServiceRobustness, alaServiceMgrPortMode=alaServiceMgrPortMode, alaIgmpServiceSourceLocale=alaIgmpServiceSourceLocale, alaIgmpServiceSdpBindForwardEntry=alaIgmpServiceSdpBindForwardEntry, alaSvcVFI=alaSvcVFI, alaSapBaseInfoEntry=alaSapBaseInfoEntry, alaIgmpServiceSdpBindForwardSdpId=alaIgmpServiceSdpBindForwardSdpId, alaSdpIsid=alaSdpIsid, alaIgmpServiceSdpBindTable=alaIgmpServiceSdpBindTable, alaMldStaticNeighborServiceSdpBindGroup=alaMldStaticNeighborServiceSdpBindGroup, alaSdpBindCount=alaSdpBindCount, alcatelIND1ServiceMgrMIBCompliances=alcatelIND1ServiceMgrMIBCompliances, alaMldServiceSdpBindForwardSdpId=alaMldServiceSdpBindForwardSdpId, alaSdpAdvertisedVllMtuOverride=alaSdpAdvertisedVllMtuOverride, alaIgmpServiceSapForwardType=alaIgmpServiceSapForwardType, alaSvcMcIndex=alaSvcMcIndex, alaSdpOperFlags=alaSdpOperFlags, alaIgmpServiceSapForwardNextType=alaIgmpServiceSapForwardNextType, alaIgmpQuerierServiceSapGroup=alaIgmpQuerierServiceSapGroup, alaServiceMgrPortID=alaServiceMgrPortID, alaSdpAdminStatus=alaSdpAdminStatus, alaVRtrLdpSessvRtrID=alaVRtrLdpSessvRtrID, alaSapStatsAdminStatus=alaSapStatsAdminStatus, alaIgmpMemberServiceSdpBindSourceAddressType=alaIgmpMemberServiceSdpBindSourceAddressType, alaMldServiceSapForwardEncapValue=alaMldServiceSapForwardEncapValue, alaMldServiceProxying=alaMldServiceProxying, alaMldStaticMemberServiceSdpBindGroup=alaMldStaticMemberServiceSdpBindGroup, alaMldNeighborServiceSdpBindHostAddressType=alaMldNeighborServiceSdpBindHostAddressType, alaMldServiceSapForwardSdpId=alaMldServiceSapForwardSdpId, alaMldServiceSdpBindMaxGroupLimit=alaMldServiceSdpBindMaxGroupLimit, alaMldNeighborServiceSdpBindGroup=alaMldNeighborServiceSdpBindGroup, alaIgmpServiceSapForwardSdpId=alaIgmpServiceSapForwardSdpId, alaMldStaticQuerierServiceSdpBindRowStatus=alaMldStaticQuerierServiceSdpBindRowStatus, alaSvcMgrSysLastMgmtChange=alaSvcMgrSysLastMgmtChange, alaSapLastMgmtChange=alaSapLastMgmtChange, alaIgmpServiceSapTable=alaIgmpServiceSapTable, alaSvcAllocationType=alaSvcAllocationType, alaMldServiceSapForwardOrigAddress=alaMldServiceSapForwardOrigAddress, alaIgmpStaticMemberServiceSapRowStatus=alaIgmpStaticMemberServiceSapRowStatus, alaSapOperFlags=alaSapOperFlags, alaServiceMgrPortProfile8021ABTreatment=alaServiceMgrPortProfile8021ABTreatment, alaIgmpServiceQueryResponseInterval=alaIgmpServiceQueryResponseInterval, alaRfpSpbRemoteEndPoint=alaRfpSpbRemoteEndPoint, alaSdpBindOperEgressLabel=alaSdpBindOperEgressLabel, alaMldMemberServiceSdpBindMode=alaMldMemberServiceSdpBindMode, alaSdpBindVirtualPort=alaSdpBindVirtualPort, alaIgmpStaticNeighborServiceSapEntry=alaIgmpStaticNeighborServiceSapEntry, alaSdpBindTable=alaSdpBindTable, alaMldMemberServiceSdpBindSourceAddress=alaMldMemberServiceSdpBindSourceAddress, alaMldServiceSourceDestAddress=alaMldServiceSourceDestAddress)
