#
# PySNMP MIB module RADLAN-HWENVIROMENT (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltex/RADLAN-HWENVIROMENT
# Produced by pysmi-1.1.3 at Sat Nov 20 22:23:13 2021
# On host fv-az33-360 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, TimeTicks, Counter32, Integer32, NotificationType, Gauge32, MibIdentifier, Counter64, ObjectIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32", "Integer32", "NotificationType", "Gauge32", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
rlEnv = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 83))
rlEnv.setRevisions(('2003-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlEnv.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlEnv.setLastUpdated('200309210000Z')
if mibBuilder.loadTexts: rlEnv.setOrganization('Radlan Computer Communications Ltd.')
if mibBuilder.loadTexts: rlEnv.setContactInfo('radlan.com')
if mibBuilder.loadTexts: rlEnv.setDescription('The private MIB module definition for environment of Radlan devices.')
class RlEnvMonState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored.\n                 Valid values are:\n\n                 normal(1):         the environment is good, such as low\n                                    temperature or full battery charge.\n\n                 warning(2):        the environment is bad, such as temperature\n                                    above normal operation range but not too\n                                    high, or battery discharge.\n\n                 critical(3):       the environment is very bad, such as\n                                    temperature much higher than normal\n                                    operation limit or critically low battery charge.\n\n                 shutdown(4):       the environment is the worst, the system\n                                    should be shutdown immediately.\n\n                 notPresent(5):     the environmental monitor is not present,\n                                    such as temperature sensors or battery does not exist.\n\n                 notFunctioning(6): the environmental monitor does not\n                                    function properly, such as a temperature\n                                    sensor generates a abnormal data like\n                                    1000 or error happens while reading battery\n                                    state.\n                                \n                 restore(7):        the environment is restoring its normal state,\n                                    such as battery recharging.\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6), ("restore", 7), ("notAvailable", 8), ("backingUp", 9))

class RlEnvMonDirection(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored.\n                 Valid values are:\n\n                 unKnown(1):        if the board not support air flow direction.\n\n                 frontToBack(2):    the air flow direction of the fan is front to back.\n\n                 backToFront(3):    the air flow direction of the fan is back to front.\n\n                 clockwise(4):      the air flow direction of the fan is clock wise\n\n                 unClockwise(5):    the air flow direction of the fan is unclock wise\n\n                 insideOutside(6):  the air flow direction of the fan is inside outside\n\n                 outsideInside(7):  the air flow direction of the fan is outside inside\n\n                 rightToLeft(8):    the air flow direction of the fan is from right to left\n\n                 leftToRight(9):    the air flow direction of the fan is from left to right\n\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("unKnown", 1), ("frontToBack", 2), ("backToFront", 3), ("clockwise", 4), ("unClockwise", 5), ("insideOut", 6), ("outsideIn", 7), ("rightToLeft", 8), ("leftToRight", 9))

rlEnvPhysicalDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 83, 1))
rlEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 1), )
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental\n                monitor.')
rlEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusEntry.setDescription('An entry in the fan status table, representing the status of\n                the associated fan maintained by the environmental monitor.')
rlEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusIndex.setDescription('Unique index for the fan being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
rlEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanStatusDescr.setDescription('Textual description of the fan being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
rlEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 1, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonFanState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonFanState.setDescription('The mandatory  state of the fan being instrumented.')
rlEnvMonSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 2), )
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusTable.setDescription('The table of power supply status maintained by the\n                environmental monitor card.')
rlEnvMonSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvMonSupplyStatusIndex"))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusEntry.setDescription('An entry in the power supply status table, representing the\n                status of the associated power supply maintained by the\n                environmental monitor card.')
rlEnvMonSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusIndex.setDescription('Unique index for the power supply being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
rlEnvMonSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyStatusDescr.setDescription('Textual description of the power supply being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
rlEnvMonSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 3), RlEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyState.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyState.setDescription('The mandatory  state of the power supply being instrumented.')
rlEnvMonSupplySource = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplySource.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplySource.setDescription('The power supply source.\n                 unknown - Power supply source unknown\n                 ac      - AC power supply\n                 dc      - DC power supply\n                 externalPowerSupply - External power supply\n                 internalRedundant - Internal redundant power supply\n                ')
rlEnvMonSupplyFanDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 2, 1, 5), RlEnvMonDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonSupplyFanDirection.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonSupplyFanDirection.setDescription("The direction of the power supply's fan.")
rlEnvMonIndexTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 1, 10), )
if mibBuilder.loadTexts: rlEnvMonIndexTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexTable.setDescription('The table that can help building indexes for EnvMon tables.')
rlEnvMonIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 1, 10, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvMonIndexUnitId"), (0, "RADLAN-HWENVIROMENT", "rlEnvMonIndexObjType"), (0, "RADLAN-HWENVIROMENT", "rlEnvMonIndexObjIndex"))
if mibBuilder.loadTexts: rlEnvMonIndexEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexEntry.setDescription('An entry in table, representing the index input parameters.')
rlEnvMonIndexUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: rlEnvMonIndexUnitId.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexUnitId.setDescription('Unit ID.')
rlEnvMonIndexObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 14))).clone(namedValues=NamedValues(("powerSupply", 5), ("fan", 6), ("thermalSensorUnderCard", 14))))
if mibBuilder.loadTexts: rlEnvMonIndexObjType.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexObjType.setDescription('Object type.')
rlEnvMonIndexObjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 10, 1, 3), Integer32())
if mibBuilder.loadTexts: rlEnvMonIndexObjIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexObjIndex.setDescription('Index of object.')
rlEnvMonIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvMonIndexValue.setStatus('current')
if mibBuilder.loadTexts: rlEnvMonIndexValue.setDescription('Calculated index value.')
rlEnvFanData = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 83, 5))
rlEnvFanDataTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 5, 1), )
if mibBuilder.loadTexts: rlEnvFanDataTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataTable.setDescription('For each unit in a stack')
rlEnvFanDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvFanDataStackUnit"))
if mibBuilder.loadTexts: rlEnvFanDataEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataEntry.setDescription('An entry of this table specifies a unit')
rlEnvFanDataStackUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataStackUnit.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataStackUnit.setDescription('The number of the stack unit')
rlEnvFanDataTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataTemp.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataTemp.setDescription('The unit temperature')
rlEnvFanDataSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataSpeed.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataSpeed.setDescription('Fan speed in RPM')
rlEnvFanDataOperLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataOperLevel.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataOperLevel.setDescription('Fan speed operative level')
rlEnvFanDataAdminLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlEnvFanDataAdminLevel.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataAdminLevel.setDescription('Configured fan speed level')
rlEnvFanDataDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 5, 1, 1, 6), RlEnvMonDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvFanDataDirection.setStatus('current')
if mibBuilder.loadTexts: rlEnvFanDataDirection.setDescription("The direction of the system's fan.")
class RlEnvRedundantFanStatus(TextualConvention, Integer32):
    description = 'Represents the status of a redundant fan.\n                                Valid values are:\n                                Ready(1):        fan is ready and not active (all fans are O.K)\n                                Active(2):        fan is active (one or more fan failed)\n                                Failure(3): fan failure '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("ready", 1), ("active", 2), ("failure", 3), ("notPresent", 4))

rlEnvRedundantFanTable = MibTable((1, 3, 6, 1, 4, 1, 89, 83, 6), )
if mibBuilder.loadTexts: rlEnvRedundantFanTable.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanTable.setDescription('Table of redundant fan status')
rlEnvRedundantFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 83, 6, 1), ).setIndexNames((0, "RADLAN-HWENVIROMENT", "rlEnvRedundantFanUnitId"), (0, "RADLAN-HWENVIROMENT", "rlEnvRedundantFanIndex"))
if mibBuilder.loadTexts: rlEnvRedundantFanEntry.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanEntry.setDescription('An entry in the redundant fan status table, representing the status of the associated fan ')
rlEnvRedundantFanUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvRedundantFanUnitId.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanUnitId.setDescription('The number of the stack unit')
rlEnvRedundantFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvRedundantFanIndex.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanIndex.setDescription('The fan index')
rlEnvRedundantFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 83, 6, 1, 3), RlEnvRedundantFanStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvRedundantFanStatus.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanStatus.setDescription('The fan status')
rlEnvRedundantFanSupported = MibScalar((1, 3, 6, 1, 4, 1, 89, 83, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlEnvRedundantFanSupported.setStatus('current')
if mibBuilder.loadTexts: rlEnvRedundantFanSupported.setDescription('Defines whether Redundant Fan feature is supported')
mibBuilder.exportSymbols("RADLAN-HWENVIROMENT", rlEnvMonFanStatusIndex=rlEnvMonFanStatusIndex, rlEnvMonSupplyStatusDescr=rlEnvMonSupplyStatusDescr, rlEnvMonFanStatusEntry=rlEnvMonFanStatusEntry, rlEnvFanDataAdminLevel=rlEnvFanDataAdminLevel, rlEnvMonFanStatusDescr=rlEnvMonFanStatusDescr, rlEnvMonSupplySource=rlEnvMonSupplySource, rlEnvMonSupplyState=rlEnvMonSupplyState, rlEnvRedundantFanSupported=rlEnvRedundantFanSupported, rlEnvFanDataDirection=rlEnvFanDataDirection, RlEnvRedundantFanStatus=RlEnvRedundantFanStatus, rlEnvFanDataTable=rlEnvFanDataTable, rlEnv=rlEnv, rlEnvMonFanState=rlEnvMonFanState, rlEnvMonIndexObjIndex=rlEnvMonIndexObjIndex, rlEnvFanDataOperLevel=rlEnvFanDataOperLevel, rlEnvMonIndexEntry=rlEnvMonIndexEntry, rlEnvFanDataEntry=rlEnvFanDataEntry, PYSNMP_MODULE_ID=rlEnv, rlEnvMonIndexUnitId=rlEnvMonIndexUnitId, RlEnvMonDirection=RlEnvMonDirection, rlEnvMonIndexObjType=rlEnvMonIndexObjType, rlEnvMonSupplyStatusIndex=rlEnvMonSupplyStatusIndex, rlEnvFanDataStackUnit=rlEnvFanDataStackUnit, rlEnvMonFanStatusTable=rlEnvMonFanStatusTable, rlEnvRedundantFanIndex=rlEnvRedundantFanIndex, rlEnvMonSupplyStatusTable=rlEnvMonSupplyStatusTable, rlEnvFanDataSpeed=rlEnvFanDataSpeed, rlEnvRedundantFanTable=rlEnvRedundantFanTable, rlEnvRedundantFanStatus=rlEnvRedundantFanStatus, RlEnvMonState=RlEnvMonState, rlEnvMonSupplyStatusEntry=rlEnvMonSupplyStatusEntry, rlEnvMonIndexTable=rlEnvMonIndexTable, rlEnvFanDataTemp=rlEnvFanDataTemp, rlEnvMonIndexValue=rlEnvMonIndexValue, rlEnvMonSupplyFanDirection=rlEnvMonSupplyFanDirection, rlEnvRedundantFanEntry=rlEnvRedundantFanEntry, rlEnvRedundantFanUnitId=rlEnvRedundantFanUnitId, rlEnvPhysicalDescription=rlEnvPhysicalDescription, rlEnvFanData=rlEnvFanData)
