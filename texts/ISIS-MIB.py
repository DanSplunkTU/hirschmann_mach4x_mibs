#
# PySNMP MIB module ISIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/ISIS-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, experimental, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Integer32, ModuleIdentity, Counter64, Unsigned32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "experimental", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Integer32", "ModuleIdentity", "Counter64", "Unsigned32", "MibIdentifier", "ObjectIdentity")
TestAndIncr, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
isisMIB = ModuleIdentity((1, 3, 6, 1, 3, 37))
if mibBuilder.loadTexts: isisMIB.setLastUpdated('200111151200Z')
if mibBuilder.loadTexts: isisMIB.setOrganization('IETF IS-IS for IP Internets Working Group')
if mibBuilder.loadTexts: isisMIB.setContactInfo('Jeff Parker\n              Axiowave Networks\n              200 Nickerson Rd.\n              Marlborough, MA 01752\n\n              jparker@axiowave.com')
if mibBuilder.loadTexts: isisMIB.setDescription('')
isisObjects = MibIdentifier((1, 3, 6, 1, 3, 37, 1))
isisNotifications = MibIdentifier((1, 3, 6, 1, 3, 37, 2))
isisConformance = MibIdentifier((1, 3, 6, 1, 3, 37, 3))
isisSystem = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 1))
if mibBuilder.loadTexts: isisSystem.setStatus('current')
if mibBuilder.loadTexts: isisSystem.setDescription('')
isisCirc = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 2))
if mibBuilder.loadTexts: isisCirc.setStatus('current')
if mibBuilder.loadTexts: isisCirc.setDescription('')
isisCircLevelValues = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 3))
if mibBuilder.loadTexts: isisCircLevelValues.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelValues.setDescription('')
isisCircPDUCounters = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 4))
if mibBuilder.loadTexts: isisCircPDUCounters.setStatus('current')
if mibBuilder.loadTexts: isisCircPDUCounters.setDescription('')
isisISAdj = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 5))
if mibBuilder.loadTexts: isisISAdj.setStatus('current')
if mibBuilder.loadTexts: isisISAdj.setDescription('')
isisReachAddr = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 6))
if mibBuilder.loadTexts: isisReachAddr.setStatus('current')
if mibBuilder.loadTexts: isisReachAddr.setDescription('')
isisIPReachAddr = ObjectIdentity((1, 3, 6, 1, 3, 37, 1, 7))
if mibBuilder.loadTexts: isisIPReachAddr.setStatus('current')
if mibBuilder.loadTexts: isisIPReachAddr.setDescription('')
class OSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, Network Entity Title'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 20)

class SNPAAddress(TextualConvention, OctetString):
    description = 'A MAC Address or DTE Address or other SNPA Address.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class NSAPPrefix(TextualConvention, OctetString):
    description = 'NSAP Prefix. The first octet of the string is used to\n           encode as an unsigned integer the length in bits of the\n           subsequent prefix. This length must be a multiple of 4\n           bits and may range from 0..160. The second and\n           subsequent octets are used to hold the prefix value.\n           If the last 4 bits of the last octet are not part of\n           the prefix then their value is undefined.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SNPAPrefix(TextualConvention, OctetString):
    description = 'SNPA Prefix. The first octet of the string is used to\n           encode as an unsigned integer the length in bits of the\n           subsequent prefix. The second and\n           subsequent octets are used to hold the prefix value.\n           Bits in the last octet which are not part of\n           the prefix have undefined value.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SystemID(TextualConvention, OctetString):
    description = 'A system ID.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class AdminState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class UpTime(TextualConvention, Integer32):
    description = "Number of seconds since the object has entered the state 'up'.\n              If the object is not up, the number of seconds since the\n              circuit was up, or since the system started, if the circuit\n              has never been up."
    status = 'current'

class LSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for LSP size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 1492)

class LevelState(TextualConvention, Integer32):
    description = 'states of the ISIS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3))

class SupportedProtocol(TextualConvention, Integer32):
    description = 'Types of network protocol supported by Integrated ISIS.\n              The values for ISO8473 and IP are those registered for\n              these protocols in ISO TR9577.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 204, 205))
    namedValues = NamedValues(("iso8473", 129), ("ip", 204), ("ipV6", 205))

class DefaultMetric(TextualConvention, Integer32):
    description = 'Integer sub-range for default metric for single hop.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 63)

class MetricType(TextualConvention, Integer32):
    description = 'Class of metric: Internal or External.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class CircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 9)

class ISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for ISIS priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

isisSysTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 1), )
if mibBuilder.loadTexts: isisSysTable.setStatus('current')
if mibBuilder.loadTexts: isisSysTable.setDescription('The set of instances of the Integrated IS-IS protocol\n             existing on the system.')
isisSysEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"))
if mibBuilder.loadTexts: isisSysEntry.setReference('ISIS.poi cLNSISISBasic-P (1)')
if mibBuilder.loadTexts: isisSysEntry.setStatus('current')
if mibBuilder.loadTexts: isisSysEntry.setDescription('Each row defines information specific to a single\n             instance of the protocol existing on the system.')
isisSysInstance = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: isisSysInstance.setStatus('current')
if mibBuilder.loadTexts: isisSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance\n             to which this row corresponds. This object follows the\n             index behaviour.')
isisSysVersion = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysVersion.setReference('ISIS.aoi version (1)')
if mibBuilder.loadTexts: isisSysVersion.setStatus('current')
if mibBuilder.loadTexts: isisSysVersion.setDescription('The version number of the IS-IS protocol to which this\n             instance conforms. This value must be set by the\n             implementation when the row is valid.')
isisSysType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1L2IS", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysType.setReference('ISIS.aoi iSType (2)')
if mibBuilder.loadTexts: isisSysType.setStatus('current')
if mibBuilder.loadTexts: isisSysType.setDescription('The type of this instance of the Integrated IS-IS\n             protocol. This object follows the\n             replaceOnlyWhileDisabled behaviour.')
isisSysID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 4), SystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysID.setReference('ISIS.aoi systemId (119)')
if mibBuilder.loadTexts: isisSysID.setStatus('current')
if mibBuilder.loadTexts: isisSysID.setDescription("The ID for this instance of the Integrated IS-IS\n             protocol. This value is appended to each of the\n             instance's area addresses to form the Network Entity\n             Titles valid for this instance. The derivation of a value\n             for this object is implementation-specific. Some\n             implementations may assign values and not permit write,\n             others may require the value to be set manually.")
isisSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxPathSplits.setReference('ISIS.aoi maximumPathSplits (3)')
if mibBuilder.loadTexts: isisSysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value\n             which it is permitted to split between. This object\n             follows the replaceOnlyWhileDisabled behaviour.')
isisSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setReference('ISIS.aoi maximumLSPGenerationInterval (6)')
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs\n             by this instance. This object follows the resettingTimer\n             behaviour.')
isisSysOrigL1LSPBuffSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 7), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysOrigL1LSPBuffSize.setReference('ISIS.aoi originatingL1LSPBufferSize (9)')
if mibBuilder.loadTexts: isisSysOrigL1LSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: isisSysOrigL1LSPBuffSize.setDescription('The maximum size of Level 1 LSPs and SNPs originated by\n             this instance. This object follows the\n             replaceOnlyWhileDisabled behaviour.')
isisSysMaxAreaAddresses = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 254)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxAreaAddresses.setReference('ISIS.aoi maximumAreaAddresses (4)')
if mibBuilder.loadTexts: isisSysMaxAreaAddresses.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxAreaAddresses.setDescription('The maximum number of area addresses to be permitted for\n             the area in which this instance exists. Note that all\n             Intermediate Systems in the same area must have the same\n             value configured for this attribute if correct operation\n             is to be assumed. This object follows the\n             replaceOnlyWhileDisabled behaviour.')
isisSysMinL1LSPGenInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMinL1LSPGenInt.setReference('ISIS.aoi minimumLSPGenerationInterval (11)')
if mibBuilder.loadTexts: isisSysMinL1LSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisSysMinL1LSPGenInt.setDescription('Minimum interval, in seconds, between successive generation\n             of L1 LSPs with the same LSPID by this instance.\n             This object follows the resettingTimer behaviour.')
isisSysMinL2LSPGenInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMinL2LSPGenInt.setReference('ISIS.aoi minimumLSPGenerationInterval (11)')
if mibBuilder.loadTexts: isisSysMinL2LSPGenInt.setStatus('current')
if mibBuilder.loadTexts: isisSysMinL2LSPGenInt.setDescription('Minimum interval, in seconds, between successive generation\n             of L2 LSPs with the same LSPID by this instance.\n             This object follows the resettingTimer behaviour.')
isisSysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysPollESHelloRate.setReference('ISIS.aoi pollESHelloRate (13)')
if mibBuilder.loadTexts: isisSysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: isisSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES\n             configuration timer in ISH PDUs when soliciting the ES\n             configuration.')
isisSysWaitTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysWaitTime.setReference('ISIS.aoi waitingTime (15)')
if mibBuilder.loadTexts: isisSysWaitTime.setStatus('current')
if mibBuilder.loadTexts: isisSysWaitTime.setDescription('Number of seconds to delay in waiting state before\n             entering on state. This object follows the resettingTimer\n             behaviour.')
isisSysAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 13), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysAdminState.setStatus('current')
if mibBuilder.loadTexts: isisSysAdminState.setDescription('The administrative state of this instance of the Integrated\n             IS-IS protocol. Setting this object to the value on when\n             its current value is off enables operation of this\n             instance of the Integrated IS-IS protocol.')
isisSysL1State = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 14), LevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysL1State.setReference('ISIS.aoi l1State (17)')
if mibBuilder.loadTexts: isisSysL1State.setStatus('current')
if mibBuilder.loadTexts: isisSysL1State.setDescription('The state of the Level 1 database.')
isisSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysCorrLSPs.setReference('ISIS.aoi corruptedLSPsDetected (19)')
if mibBuilder.loadTexts: isisSysCorrLSPs.setStatus('current')
if mibBuilder.loadTexts: isisSysCorrLSPs.setDescription('Number of corrupted LSPs detected.')
isisSysLSPL1DbaseOloads = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysLSPL1DbaseOloads.setReference('ISIS.aoi lSPL1DatabaseOverloads (20)')
if mibBuilder.loadTexts: isisSysLSPL1DbaseOloads.setStatus('current')
if mibBuilder.loadTexts: isisSysLSPL1DbaseOloads.setDescription('Number of times the LSP L1 database has become\n             overloaded.')
isisSysManAddrDropFromAreas = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysManAddrDropFromAreas.setReference('ISIS.aoi manualAddressesDroppedFromArea (21)')
if mibBuilder.loadTexts: isisSysManAddrDropFromAreas.setStatus('current')
if mibBuilder.loadTexts: isisSysManAddrDropFromAreas.setDescription('Number of times a manual address has been dropped from\n             the area.')
isisSysAttmptToExMaxSeqNums = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysAttmptToExMaxSeqNums.setReference('ISIS.aoi\n             attemptsToExceedmaximumSequenceNumber (22)')
if mibBuilder.loadTexts: isisSysAttmptToExMaxSeqNums.setStatus('current')
if mibBuilder.loadTexts: isisSysAttmptToExMaxSeqNums.setDescription('Number of times the IS has attempted to exceed the\n             maximum sequence number.')
isisSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysSeqNumSkips.setReference('ISIS.aoi sequenceNumberSkips (23)')
if mibBuilder.loadTexts: isisSysSeqNumSkips.setStatus('current')
if mibBuilder.loadTexts: isisSysSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
isisSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysOwnLSPPurges.setReference('ISIS.aoi ownLSPPurges (24)')
if mibBuilder.loadTexts: isisSysOwnLSPPurges.setStatus('current')
if mibBuilder.loadTexts: isisSysOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP\n             is received from some other node.")
isisSysIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysIDFieldLenMismatches.setReference('ISIS.aoi iDFieldLengthMismatches (25)')
if mibBuilder.loadTexts: isisSysIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisSysIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value\n             for ID field length to that of the receiving system.')
isisSysMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysMaxAreaAddrMismatches.setReference('ISIS.aoi MaximumAreaAddressesMismatches (118)')
if mibBuilder.loadTexts: isisSysMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxAreaAddrMismatches.setDescription('Number of times a PDU is received with a different value\n             for MaximumAreaAddresses from that of the receiving\n             system.')
isisSysOrigL2LSPBuffSize = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 23), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysOrigL2LSPBuffSize.setReference('ISIS.aoi originatingL2LSPBufferSize (26)')
if mibBuilder.loadTexts: isisSysOrigL2LSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: isisSysOrigL2LSPBuffSize.setDescription('The maximum size of Level 2 LSPs and SNPs originated by\n             this system. This object follows the\n             replaceOnlyWhileDisabled behaviour.')
isisSysL2State = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 24), LevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysL2State.setReference('ISIS.aoi l2State (28)')
if mibBuilder.loadTexts: isisSysL2State.setStatus('current')
if mibBuilder.loadTexts: isisSysL2State.setDescription('The state of the Level 2 database.')
isisSysLSPL2DbaseOloads = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysLSPL2DbaseOloads.setReference('ISIS.aoi lSPL2DatabaseOverloads (32)')
if mibBuilder.loadTexts: isisSysLSPL2DbaseOloads.setStatus('current')
if mibBuilder.loadTexts: isisSysLSPL2DbaseOloads.setDescription('Number of times the Level 2 LSP database has become\n             overloaded.')
isisSysAuthFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysAuthFails.setStatus('current')
if mibBuilder.loadTexts: isisSysAuthFails.setDescription('The number of authentication failures recognized by this\n             instance of the protocol.')
isisSysLSPIgnoreErrors = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLSPIgnoreErrors.setStatus('current')
if mibBuilder.loadTexts: isisSysLSPIgnoreErrors.setDescription('If true, allow the router to ignore IS-IS link state packets\n             (LSPs) that are received with internal checksum errors rather\n             than purging the LSPs.')
isisSysLogAdjacencyChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysLogAdjacencyChanges.setStatus('current')
if mibBuilder.loadTexts: isisSysLogAdjacencyChanges.setDescription('If true, causes IS-IS to generate a log message when an\n             IS-IS adjacency changes state (up or down).')
isisSysPartChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysPartChanges.setStatus('current')
if mibBuilder.loadTexts: isisSysPartChanges.setDescription('partition changes')
isisSysMaxAreaCheck = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 30), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysMaxAreaCheck.setStatus('current')
if mibBuilder.loadTexts: isisSysMaxAreaCheck.setDescription('When on, enables checking of maximum area\n             addresses per IS version of ISO10589.')
isisSysNextCircIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 31), TestAndIncr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisSysNextCircIndex.setStatus('current')
if mibBuilder.loadTexts: isisSysNextCircIndex.setDescription("This object is used to assign values to\n             isisCircIndex as described in 'Textual\n             Conventions for SNMPv2'.  The network manager\n             reads this object, and then writes the value\n             back as the isisCircIndex in a SET that creates\n             a new instance of isisCircEntry.  If the SET\n             fails with the code 'inconsistentValue', then\n             the process must be repeated; If the SET succeeds,\n             then the object is incremented, and the new\n             instance is created according to the manager's\n             directions.")
isisSysExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 32), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysExistState.setStatus('current')
if mibBuilder.loadTexts: isisSysExistState.setDescription('The state of the ISIS router.  Turning this off\n             forces the router to forget all current state')
isisSysL2toL1Leaking = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysL2toL1Leaking.setStatus('current')
if mibBuilder.loadTexts: isisSysL2toL1Leaking.setDescription('If true, allow the router to leak L2 routes into L1.')
isisSysSetOverload = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("setL1Overload", 1), ("setL2Overload", 2), ("setL1L2Overload", 3), ("overloadClear", 4))).clone('overloadClear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysSetOverload.setStatus('current')
if mibBuilder.loadTexts: isisSysSetOverload.setDescription('Administrativly set the overload bit for each level.\n              The overload bit will continue to be set if the\n              implementation runs out of memory, independent of\n              this variable')
isisManAreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 2), )
if mibBuilder.loadTexts: isisManAreaAddrTable.setReference('ISIS.aoi manualAreaAddresses (10)')
if mibBuilder.loadTexts: isisManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrTable.setDescription('The set of manual area addresses configured on this\n             Intermediate System.')
isisManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 2, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisManAreaAddr"))
if mibBuilder.loadTexts: isisManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrEntry.setDescription('Each entry contains one area address manually configured\n             on this system')
isisManAreaAddr = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 2, 1, 1), OSINSAddress())
if mibBuilder.loadTexts: isisManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddr.setDescription('A manually configured area address for this system. This\n             object follows the index behaviour.\n\n             Note: an index for the entry {1, {49.0001} active} in\n             this table would be the ordered pair\n             (1, (0x03 0x49 0x00 0x01)), as the length of an Octet\n             string is part of the OID.')
isisManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 2, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisManAreaAddrExistState.setDescription("The state of the isisManAreaAddrEntry. This object\n             follows the Row Status behaviour. If an attempt is\n             made to set this object to the value destroy when the\n             corresponding isisManAreaAddrEntry is the only valid\n             entry for this instance and when the corresponding ISIS\n             instance has isisSysAdminState set to 'on' then the\n             attempt to delete the row is rejected.")
isisAreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 3), )
if mibBuilder.loadTexts: isisAreaAddrTable.setReference('ISIS.aoi areaAddresses (18)')
if mibBuilder.loadTexts: isisAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddrTable.setDescription('The union of the sets of area addresses reported in all\n             Level 1 LSPs received by this instance of the protocol.')
isisAreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 3, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisAreaAddr"))
if mibBuilder.loadTexts: isisAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddrEntry.setDescription('Each entry contains one area address reported in a\n             Level 1 LSP received by this instance of the protocol.')
isisAreaAddr = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 3, 1, 1), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisAreaAddr.setStatus('current')
if mibBuilder.loadTexts: isisAreaAddr.setDescription('An area address reported in a Level 1 LSP received by\n             this instance of the protocol.')
isisSysProtSuppTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 4), )
if mibBuilder.loadTexts: isisSysProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: isisSysProtSuppTable.setDescription('This table contains the manually configured set of\n             protocols supported by each instance of the Integrated\n             ISIS protocol.')
isisSysProtSuppEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 4, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisSysProtSuppProtocol"))
if mibBuilder.loadTexts: isisSysProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: isisSysProtSuppEntry.setDescription('Each entry contains one protocol supported by an\n             instance of the Integrated ISIS protocol.')
isisSysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 4, 1, 1), SupportedProtocol())
if mibBuilder.loadTexts: isisSysProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: isisSysProtSuppProtocol.setDescription('One supported protocol. This object follows the index\n             behaviour.')
isisSysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 4, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSysProtSuppExistState.setStatus('current')
if mibBuilder.loadTexts: isisSysProtSuppExistState.setDescription('The state of the isisSysProtSuppEntry. This object\n             follows the RowStatus behavior.')
isisSummAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 1, 5), )
if mibBuilder.loadTexts: isisSummAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrTable.setDescription('The set of IP summary addresses to use in forming\n              summary TLVs originated by this Intermediate System.\n\n              An administrator may use a summary address to combine\n              and modify IP Reachability announcements.  If the\n              Intermediate system can reach any subset of the summary\n              address, the summary address will be announced instead,\n              at the configured metric.')
isisSummAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 1, 5, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisSummAddressType"), (0, "ISIS-MIB", "isisSummAddress"), (0, "ISIS-MIB", "isisSummAddrPrefixLen"))
if mibBuilder.loadTexts: isisSummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrEntry.setDescription('Each entry contains one IP summary address.')
isisSummAddressType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: isisSummAddressType.setStatus('current')
if mibBuilder.loadTexts: isisSummAddressType.setDescription('The Type of IP address for this summary address.\n              This object follows the index behaviour.')
isisSummAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: isisSummAddress.setStatus('current')
if mibBuilder.loadTexts: isisSummAddress.setDescription('The IP Address value for this summary address.\n              This object follows the index behaviour.')
isisSummAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: isisSummAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrPrefixLen.setDescription('The Length of the IP NetMask for this summary address.')
isisSummAddrExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrExistState.setDescription('The existence state of this summary address. This object\n             follows the row status behaviour.')
isisSummAddrAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("summaryL1", 1), ("summaryL2", 2), ("summaryL1L2", 3), ("summaryOff", 4))).clone('summaryOff')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrAdminState.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrAdminState.setDescription('The administrative state of this entry.  When the\n              administrative state changes, if the new value would\n              cause the contents of LSPs originated by the system\n              to change, then those new LSPs must be generated and\n              sent as soon as is permitted by the ISIS protocol.')
isisSummAddrDefaultMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 1, 5, 1, 6), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisSummAddrDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: isisSummAddrDefaultMetric.setDescription('The default metric value to announce this summary\n             address with in LSPs generated by this system.')
isisCircTable = MibTable((1, 3, 6, 1, 3, 37, 1, 2, 1), )
if mibBuilder.loadTexts: isisCircTable.setStatus('current')
if mibBuilder.loadTexts: isisCircTable.setDescription('The table of circuits used by each instance of\n             Integrated IS-IS on this system.')
isisCircEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 2, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"))
if mibBuilder.loadTexts: isisCircEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircEntry.setDescription('An isisCircEntry exists for each circuit used by\n             Integrated IS-IS on this system.')
isisCircIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisCircIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIndex.setDescription('The identifier of this circuit, unique within the\n             instance of the protocol. This object follows the index\n             behaviour.  This is for SNMP Indexing purposes only\n             and has no relation to any protocol value.')
isisCircIfIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIfIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIfIndex.setDescription('The value of ifIndex for the interface to which this\n             circuit corresponds.   This object cannot be modified\n             after creation')
isisCircIfSubIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which\n             this circuit corresponds, such as a DLCI or VPI/VCI.\n             This object cannot be modified after creation')
isisCircLocalID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLocalID.setStatus('current')
if mibBuilder.loadTexts: isisCircLocalID.setDescription('An identification that can be used in protocol packets\n             to identify a circuit.  Values of isisCircLocalID do\n             not need to be unique.  They are only required to differ\n             on LANs where the Intermediate System is the Designated\n             Intermediate System.')
isisCircAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 5), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircAdminState.setStatus('current')
if mibBuilder.loadTexts: isisCircAdminState.setDescription('The administrative state of the circuit. This\n              object follows the AdminState behaviour.')
isisCircExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 6), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircExistState.setStatus('current')
if mibBuilder.loadTexts: isisCircExistState.setDescription('The existence state of this circuit. This object follows\n             the Row Status behaviour.')
isisCircType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircType.setReference('ISIS.aoi type (33)')
if mibBuilder.loadTexts: isisCircType.setStatus('current')
if mibBuilder.loadTexts: isisCircType.setDescription('The type of the circuit. This object follows the\n             replaceOnlyWhileDisabled behaviour. The type specified\n             must be compatible with the type of the interface defined\n             by the value of isisCircIfIndex.')
isisCircExtDomain = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircExtDomain.setReference('ISIS.aoi externalDomain (46)')
if mibBuilder.loadTexts: isisCircExtDomain.setStatus('current')
if mibBuilder.loadTexts: isisCircExtDomain.setDescription('If true, suppress normal transmission of and\n             interpretation of Intra-domain ISIS PDUs on this\n             circuit.')
isisCircAdjChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircAdjChanges.setReference('ISIS.aoi changesInAdjacencyState (40)')
if mibBuilder.loadTexts: isisCircAdjChanges.setStatus('current')
if mibBuilder.loadTexts: isisCircAdjChanges.setDescription('The number of times an adjacency state change has\n             occurred on this circuit.')
isisCircInitFails = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircInitFails.setReference('ISIS.aoi initializationFailures (41)')
if mibBuilder.loadTexts: isisCircInitFails.setStatus('current')
if mibBuilder.loadTexts: isisCircInitFails.setDescription('The number of times initialization of this circuit has\n             failed.')
isisCircRejAdjs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircRejAdjs.setReference('ISIS.aoi rejectedAdjacencies (42)')
if mibBuilder.loadTexts: isisCircRejAdjs.setStatus('current')
if mibBuilder.loadTexts: isisCircRejAdjs.setDescription('The number of times an adjacency has been rejected on\n             this circuit.')
isisCircOutCtrlPDUs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircOutCtrlPDUs.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: isisCircOutCtrlPDUs.setStatus('current')
if mibBuilder.loadTexts: isisCircOutCtrlPDUs.setDescription('The number of IS-IS control PDUs sent on this circuit.')
isisCircInCtrlPDUs = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircInCtrlPDUs.setReference('ISIS.aoi controlPDUsReceived (44)')
if mibBuilder.loadTexts: isisCircInCtrlPDUs.setStatus('current')
if mibBuilder.loadTexts: isisCircInCtrlPDUs.setDescription('The number of IS-IS control PDUs received on this\n             circuit.')
isisCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setReference('ISIS.aoi iDFieldLengthMismatches (25)')
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: isisCircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID\n             field length different to that for this system has been\n             received.')
isisCircLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1L2", 3))).clone('level1L2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevel.setStatus('current')
if mibBuilder.loadTexts: isisCircLevel.setDescription('Indicates which type of packets will be sent and\n              accepted on this circuit. The values used will be\n              modified by the settings of isisSysType. This\n              object follows the replaceOnlyWhileDisabled behaviour.')
isisCircMCAddr = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group", 1), ("functional", 2))).clone('group')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircMCAddr.setStatus('current')
if mibBuilder.loadTexts: isisCircMCAddr.setDescription('Specifies which type of multicast address will\n             be used for sending HELLO PDUs on this\n             circuit.')
isisCircPtToPtCircID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 22), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircPtToPtCircID.setReference('ISIS.aoi ptPtCircuitID (51)')
if mibBuilder.loadTexts: isisCircPtToPtCircID.setStatus('current')
if mibBuilder.loadTexts: isisCircPtToPtCircID.setDescription('The ID of the circuit allocated during initialization.\n             If no value has been negotiated (either because the\n             adjacency is to an End System, or because initialization\n             has not yet successfully completed), this object has the\n             value which would be proposed for this circuit (i.e. the\n             concatenation of the local system ID and the one octet\n             local Circuit ID for this circuit.')
isisCircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircPassiveCircuit.setReference('')
if mibBuilder.loadTexts: isisCircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: isisCircPassiveCircuit.setDescription('Should we include this interface in LSPs, even if\n             it is not running the ISIS Protocol?')
isisCircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setReference('')
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: isisCircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked?\n             Circuits in the same mesh group act as a virtual\n             multiaccess network.  LSPs seen on one circuit in\n             a mesh group will not be flooded to another circuit\n             in the same mesh group.')
isisCircMeshGroup = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircMeshGroup.setReference('')
if mibBuilder.loadTexts: isisCircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: isisCircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual\n             multiaccess network.  LSPs seen on one circuit in\n             a mesh group will not be flooded to another circuit\n             in the same mesh group.  If isisCircMeshGroupEnabled\n             is inactive, this value is ignored.')
isisCircSmallHellos = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 26), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: isisCircSmallHellos.setDescription('Can we send unpadded hellos on LAN circuits?  Off means\n             LAN Hellos must be padded.')
isisCircUpTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 2, 1, 1, 27), UpTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircUpTime.setStatus('current')
if mibBuilder.loadTexts: isisCircUpTime.setDescription("If the circuit is up, the amount of time in seconds\n             since this circuit entered state 'up'.  If the circuit\n             is not up, the number of seconds since the circuit was\n             up, or since the system started, if the circuit has\n             never been up.\n\n             Note: This can be implemented as start time less\n             the current time.")
isisCircLevelTable = MibTable((1, 3, 6, 1, 3, 37, 1, 3, 1), )
if mibBuilder.loadTexts: isisCircLevelTable.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelTable.setDescription('Level specific information about circuits used by IS-IS')
isisCircLevelEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 3, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisCircLevelIndex"))
if mibBuilder.loadTexts: isisCircLevelEntry.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelEntry.setDescription('An isisCircLevelEntry exists for each level on\n              each circuit used by Integrated IS-IS on this system.')
isisCircLevelIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2))))
if mibBuilder.loadTexts: isisCircLevelIndex.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelIndex.setDescription('The level that this entry describes.')
isisCircLevelDefaultMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 2), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelDefaultMetric.setReference('ISIS.aoi l1DefaultMetric (35)')
if mibBuilder.loadTexts: isisCircLevelDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDefaultMetric.setDescription('The default metric value of this circuit for this level.')
isisCircLevelISPriority = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 3), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelISPriority.setReference('ISIS.aoi l2IntermediateSystemPriority (73)')
if mibBuilder.loadTexts: isisCircLevelISPriority.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelISPriority.setDescription('The priority for becoming LAN Designated\n             Intermediate System at this level.')
isisCircLevelCircID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 4), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelCircID.setReference('ISIS.aoi ptPtCircuitID (51)')
if mibBuilder.loadTexts: isisCircLevelCircID.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelCircID.setDescription('The ID of the circuit allocated during initialization.\n             If no value has been negotiated (either because the\n             adjacency is to an End System, or because initialization\n             has not yet successfully completed), this object has the\n             value which would be proposed for this circuit (i.e. the\n             concatenation of the local system ID and the one octet\n             local Circuit ID for this circuit.')
isisCircLevelDesIS = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 5), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelDesIS.setReference('ISIS.aoi l2DesignatedIntermediateSystem (75)')
if mibBuilder.loadTexts: isisCircLevelDesIS.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDesIS.setDescription('The ID of the LAN Designated Intermediate System\n             on this circuit at this level. If, for any reason,\n             this system is not partaking in the relevant\n             Designated Intermediate System election process,\n             then the value returned is the zero length OCTET STRING.')
isisCircLevelLANDesISChanges = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisCircLevelLANDesISChanges.setReference('ISIS.aoi\n             lanL2DesignatedIntermediateSystemChanges (76)')
if mibBuilder.loadTexts: isisCircLevelLANDesISChanges.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelLANDesISChanges.setDescription('The number of times the LAN Designated\n             Intermediate System has changed at this level.')
isisCircLevelHelloMultiplier = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelHelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer\n             and the result in seconds (rounded up) is used as the\n             holding time in transmitted hellos, to be used by receivers\n             of hello packets from this IS')
isisCircLevelHelloTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelHelloTimer.setDescription('Maximum period, in milliseconds, between IIH PDUs\n              on multiaccess networks at this level for LANs.\n              The value at level 1 is used as the period between\n              Hellos on point to point circuits.  Setting this\n              value at level 2 on a point to point circuit will\n              result in an error of InconsistentValue.\n\n              This object follows the resettingTimer behaviour.')
isisCircLevelDRHelloTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelDRHelloTimer.setDescription('Period, in milliseconds, between Hello PDUs on\n             multiaccess networks when this IS is the Designated\n             Intermediate System.  This object follows the\n             resettingTimer behaviour.')
isisCircLevelLSPThrottle = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setReference('ISIS.aoi minimumBroadcastLSPTransmissionInterval (5)')
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelLSPThrottle.setDescription('Minimal interval of time, in milliseconds, between\n             transmissions of LSPs on an interface at this level.')
isisCircLevelMinLSPRetransInt = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setReference('ISIS.aoi minimumLSPTransmissionInterval (5)')
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelMinLSPRetransInt.setDescription('Minimum interval, in seconds, between re-transmission of\n             an LSP at this level. This object follows the resettingTimer\n             behavior.\n\n             Note that isisCircLevelLSPThrottle controls\n             how fast we send back to back LSPs.  This variable\n             controls how fast we re-send the same LSP.')
isisCircLevelCSNPInterval = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setReference('')
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelCSNPInterval.setDescription('Interval of time, in seconds, between transmission\n             of CSNPs on multiaccess networks if this router is\n             the designated router at this level.')
isisCircLevelPartSNPInterval = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setReference('ISIS.aoi partialSNPInterval (14)')
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: isisCircLevelPartSNPInterval.setDescription('Minimum interval between sending Partial Sequence Number\n              PDUs at this level. This object follows the resettingTimer\n              behaviour.')
isisPacketCountTable = MibTable((1, 3, 6, 1, 3, 37, 1, 4, 1), )
if mibBuilder.loadTexts: isisPacketCountTable.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountTable.setDescription('Information about IS-IS packets sent and received')
isisPacketCountEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 4, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisPacketCountLevel"), (0, "ISIS-MIB", "isisPacketCountDirection"))
if mibBuilder.loadTexts: isisPacketCountEntry.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountEntry.setDescription('Information about IS-IS protocol traffic at one level\n              on one circuit in one direction')
isisPacketCountLevel = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2))))
if mibBuilder.loadTexts: isisPacketCountLevel.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountLevel.setDescription('The level at which these PDU counts have been collected.')
isisPacketCountDirection = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sending", 1), ("receiving", 2))))
if mibBuilder.loadTexts: isisPacketCountDirection.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountDirection.setDescription('Were we sending or receiving these PDUs?')
isisPacketCountHello = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountHello.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: isisPacketCountHello.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountHello.setDescription('The number of IS-IS Hello PDUs seen in this\n              direction at this level.')
isisPacketCountLSP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountLSP.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: isisPacketCountLSP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountLSP.setDescription('The number of IS-IS LSPs seen in this\n              direction at this level.')
isisPacketCountCSNP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountCSNP.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: isisPacketCountCSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountCSNP.setDescription('The number of IS-IS CSNPs seen in this\n              direction at this level.')
isisPacketCountPSNP = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisPacketCountPSNP.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: isisPacketCountPSNP.setStatus('current')
if mibBuilder.loadTexts: isisPacketCountPSNP.setDescription('The number of IS-IS PSNPs seen in this\n              direction at this level.')
isisISAdjTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 1), )
if mibBuilder.loadTexts: isisISAdjTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
isisISAdjEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisISAdjIndex"))
if mibBuilder.loadTexts: isisISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjEntry.setDescription('Each entry corresponds to one adjacency to an\n             Intermediate System on this system.')
isisISAdjIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIndex.setDescription('A unique value identifying the IS adjacency from all\n             other such adjacencies on this circuit. This value is\n             assigned by the system when the adjacency is created\n             automatically.')
isisISAdjState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjState.setReference('ISIS.aoi adjacencyState (78)')
if mibBuilder.loadTexts: isisISAdjState.setStatus('current')
if mibBuilder.loadTexts: isisISAdjState.setDescription('The state of the adjacency')
isisISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 3), SNPAAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setReference('ISIS.aoi neighbourSNPAAddress (79)')
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
isisISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l1IntermediateSystem", 1), ("l2IntermediateSystem", 2), ("l1L2IntermediateSystem", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSysType.setReference('ISIS.aoi neighbourSystemType (80)')
if mibBuilder.loadTexts: isisISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSysType.setDescription('The type of the neighboring system.')
isisISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighSysID.setReference('ISIS.aoi neighbourSystemIds (83)')
if mibBuilder.loadTexts: isisISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighSysID.setDescription("The system ID and 4 byte circuit ID of the\n             neighboring Intermediate System set from\n             the source ID field of the Three-Way-Handshake\n             information from the neighbor's IIH PDUs.")
isisISAdjUsage = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2), ("level2", 3), ("level1and2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjUsage.setReference('ISIS.aoi adjacencyUsage (82)')
if mibBuilder.loadTexts: isisISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: isisISAdjUsage.setDescription('An adjacency of type level1 is used for level 1\n             traffic only. An adjacency of type level2 is used\n             for level 2 traffic only. An adjacency of type level1and2\n             is used for both level 1 and level 2 traffic. There\n             may be two adjacencies (of types level1 and level2)\n             between the same pair of Intermediate Systems.')
isisISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjHoldTimer.setReference('ISIS.aoi holdingTimer (85)')
if mibBuilder.loadTexts: isisISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: isisISAdjHoldTimer.setDescription('The holding time for this adjacency updated from\n             received IIH PDUs.')
isisISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 8), ISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjNeighPriority.setReference('ISIS.aoi lANPriority (86)')
if mibBuilder.loadTexts: isisISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: isisISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for\n             becoming the LAN Level 1 Designated Intermediate System\n             if the value of isisISAdjNeighSysType is\n             L1IntermediateSystem or LAN Level 2 Designated\n             Intermediate System if the value of\n             isisISAdjNeighSysType is L2IntermediateSystem.')
isisISAdjUpTime = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 1, 1, 9), UpTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjUpTime.setStatus('current')
if mibBuilder.loadTexts: isisISAdjUpTime.setDescription("If the adjacency is up, the amount of time in seconds\n             since this adjacency entered state 'up'.  If the adjacency\n             is not up, the number of seconds since the adjacency was\n             up, or since the system started, if the adjacency has\n             never been up.\n\n             Note: This can be implemented as start time less\n             the current time.")
isisISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 2), )
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setReference('ISIS.aoi areaAddressesOfNeighbour (84)')
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of\n             neighboring Intermediate Systems as reported in received\n             IIH PDUs.')
isisISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 2, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisISAdjAreaAddrAdjIndex"), (0, "ISIS-MIB", "isisISAdjAreaAddress"))
if mibBuilder.loadTexts: isisISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a\n             neighboring Intermediate System in its IIH PDUs.')
isisISAdjAreaAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjAreaAddrAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry\n             belongs.')
isisISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 2, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from\n             the neighbor.')
isisISAdjIPAddrTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 3), )
if mibBuilder.loadTexts: isisISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrTable.setDescription('This table contains the set of IP Addresses of\n             neighboring Intermediate Systems as reported in received\n             IIH PDUs.')
isisISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 3, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisISAdjIPAddrAdjIndex"))
if mibBuilder.loadTexts: isisISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a\n             neighboring Intermediate System in its IIH PDUs.')
isisISAdjIPAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjIPAddrAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry\n             belongs.')
isisISAdjIPAddressType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjIPAddressType.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddressType.setDescription('The type of one IP Address as reported in IIH PDUs\n              received from the neighbor.')
isisISAdjIPAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjIPAddress.setStatus('current')
if mibBuilder.loadTexts: isisISAdjIPAddress.setDescription('One IP Address as reported in IIH PDUs received from the\n             neighbor.')
isisISAdjProtSuppTable = MibTable((1, 3, 6, 1, 3, 37, 1, 5, 4), )
if mibBuilder.loadTexts: isisISAdjProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by\n             neighboring Intermediate Systems as reported in received\n             IIH PDUs.')
isisISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 5, 4, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisISAdjProtSuppAdjIndex"), (0, "ISIS-MIB", "isisISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: isisISAdjProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a\n             neighboring Intermediate System as reported in its IIH\n             PDUs.')
isisISAdjProtSuppAdjIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisISAdjProtSuppAdjIndex.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppAdjIndex.setDescription('The identifier the IS adjacency to which this entry\n             corresponds.')
isisISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 5, 4, 1, 2), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isisISAdjProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: isisISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received\n             from the neighbor.')
isisRATable = MibTable((1, 3, 6, 1, 3, 37, 1, 6, 1), )
if mibBuilder.loadTexts: isisRATable.setStatus('current')
if mibBuilder.loadTexts: isisRATable.setDescription('The table of Reachable Addresses to NSAPs or Address\n             Prefixes.')
isisRAEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 6, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisRAIndex"))
if mibBuilder.loadTexts: isisRAEntry.setStatus('current')
if mibBuilder.loadTexts: isisRAEntry.setDescription('Each entry defines a Reachable Address to a NSAP or\n             Address Prefix.')
isisRAIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisRAIndex.setStatus('current')
if mibBuilder.loadTexts: isisRAIndex.setDescription('The identifier for this isisRAEntry. This value must be\n             unique amongst all Reachable Addresses on the same parent\n             Circuit. This object follows the index and\n             manualOrAutomatic behaviours.')
isisRAExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 2), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRAExistState.setStatus('current')
if mibBuilder.loadTexts: isisRAExistState.setDescription('The existence state of this Reachable Address. This\n             object follows the Row Status behaviours.')
isisRAAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 3), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRAAdminState.setStatus('current')
if mibBuilder.loadTexts: isisRAAdminState.setDescription('The administrative state of the Reachable Address. This\n             object follows the AdminState and manualOrAutomatic\n             behaviours.')
isisRAAddrPrefix = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 4), NSAPPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRAAddrPrefix.setReference('ISIS.aoi addressPrefix (98)')
if mibBuilder.loadTexts: isisRAAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: isisRAAddrPrefix.setDescription('The destination of this Reachable Address. This is an\n             Address Prefix. This object follows the\n             replaceOnlyWhileDisabled and manualOrAutomatic\n             behaviours.')
isisRAMapType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("explicit", 2), ("extractIDI", 3), ("extractDSP", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRAMapType.setReference('ISO10589-ISIS.aoi mappingType (107)')
if mibBuilder.loadTexts: isisRAMapType.setStatus('current')
if mibBuilder.loadTexts: isisRAMapType.setDescription('The type of mapping to be employed to ascertain the SNPA\n             Address which should be used in forwarding PDUs for this\n             Reachable Address prefix. This object follows the\n             manualOrAutomatic behaviour. The following values of\n             mapping type are defined:\n             none: The mapping is null because the neighbor SNPA is\n                         implicit by nature of the subnetwork (e.g. a\n             point-to-point linkage).\n             explicit: The subnetwork addresses in the object\n             isisRASNPAAddress is to be used.\n             extractIDI: The SNPA is embedded in the IDI of the\n             destination NSAP Address. The mapping algorithm\n             extracts the SNPA to be used according to the format\n             and encoding rules of ISO8473/Add2. This SNPA\n             extraction algorithm can be used in conjunction with\n             Reachable Address prefixes from the X.121, F.69, E.163\n             and E.164 addressing subdomains.\n             extractDSP: All, or a suffix, of the SNPA is embedded\n             in the DSP of the destination address. This SNPA\n             extraction algorithm extracts the embedded subnetwork\n             addressing information by performing a logical AND of\n             the isisRASNPAMask object value with the destination\n             address. The part of the SNPA extracted from the\n             destination NSAP is appended to the isisRASNPAPrefix\n             object value to form the next hop subnetwork\n             addressing information.')
isisRADefMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 6), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRADefMetric.setReference('ISIS.aoi DefaultMetric (99)')
if mibBuilder.loadTexts: isisRADefMetric.setStatus('current')
if mibBuilder.loadTexts: isisRADefMetric.setDescription('The default metric value for reaching the specified\n             prefix over this circuit. This object follows the\n             manualOrAutomatic behaviour.')
isisRADefMetricType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 7), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRADefMetricType.setReference('ISIS.aoi DefaultMetricType (103)')
if mibBuilder.loadTexts: isisRADefMetricType.setStatus('current')
if mibBuilder.loadTexts: isisRADefMetricType.setDescription('Indicates whether the default metric is internal or\n             external. This object follows the manualOrAutomatic\n             behaviour.')
isisRASNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 8), SNPAAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRASNPAAddress.setReference('ISIS.aoi sNPAAddresses (109)')
if mibBuilder.loadTexts: isisRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in\n             order to reach a destination which matches the address\n             prefix of the Reachable Address. This object follows the\n             manualOrAutomatic behaviour.')
isisRASNPAMask = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 9), SNPAPrefix().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRASNPAMask.setReference('ISIS.aoi sNPAMask (122)')
if mibBuilder.loadTexts: isisRASNPAMask.setStatus('current')
if mibBuilder.loadTexts: isisRASNPAMask.setDescription('A bit mask with 1 bits indicating the positions in the\n             effective destination address from which embedded SNPA\n             information is to be extracted. For the extraction the\n             first octet of the isisRASNPAMask object value is aligned\n             with the first octet (AFI) of the NSAP Address. If the\n             isisRASNPAMask object value and NSAP Address are of\n             different lengths, the shorter of the two is logically\n             padded with zeros before performing the extraction. This\n             object follows the manualOrAutomatic behaviour.')
isisRASNPAPrefix = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 10), SNPAPrefix().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRASNPAPrefix.setReference('ISIS.aoi sNPAPrefix (123)')
if mibBuilder.loadTexts: isisRASNPAPrefix.setStatus('current')
if mibBuilder.loadTexts: isisRASNPAPrefix.setDescription('A fixed SNPA prefix for use when the isisRAMapType is\n             extractDSP. The SNPA Address to use is formed by\n             concatenating the fixed SNPA prefix with a variable SNPA\n             part that is extracted from the effective destination\n             address. For Reachable Address prefixes in which the\n             entire SNPA is embedded in the DSP the SNPA Prefix shall\n             be null. This object follows the manualOrAutomatic\n             behaviour.')
isisRAType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))).clone('manual')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisRAType.setStatus('current')
if mibBuilder.loadTexts: isisRAType.setDescription(' The type of Reachable address. Those of type\n             manual are created by the network manager. Those\n             of type automatic are created through propogation\n             of routing information from another routing\n             protocol (eg. IDRP). ')
isisIPRATable = MibTable((1, 3, 6, 1, 3, 37, 1, 7, 1), )
if mibBuilder.loadTexts: isisIPRATable.setStatus('current')
if mibBuilder.loadTexts: isisIPRATable.setDescription('The table of IP Reachable Addresses to networks,\n             subnetworks or hosts either manually configured or\n             learned from another protocol.')
isisIPRAEntry = MibTableRow((1, 3, 6, 1, 3, 37, 1, 7, 1, 1), ).setIndexNames((0, "ISIS-MIB", "isisSysInstance"), (0, "ISIS-MIB", "isisCircIndex"), (0, "ISIS-MIB", "isisIPRAType"), (0, "ISIS-MIB", "isisIPRAIndex"))
if mibBuilder.loadTexts: isisIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: isisIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network,\n             subnetwork or host.')
isisIPRAIndex = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)))
if mibBuilder.loadTexts: isisIPRAIndex.setStatus('current')
if mibBuilder.loadTexts: isisIPRAIndex.setDescription('The identifier for this isisIPRAEntry. This value must\n             be unique amongst all IP Reachable Addresses on the same\n             parent Circuit. This object follows the index and\n             manualOrAutomatic behaviours.')
isisIPRAType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))))
if mibBuilder.loadTexts: isisIPRAType.setStatus('current')
if mibBuilder.loadTexts: isisIPRAType.setDescription('The type of this IP Reachable Address. Those of type\n             manual are created by the network manager. Those of type\n             automatic are created through propagation of routing\n             information from another routing protocol.')
isisIPRADestType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRADestType.setStatus('current')
if mibBuilder.loadTexts: isisIPRADestType.setDescription('The type of this IP Reachable Address.')
isisIPRADest = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRADest.setStatus('current')
if mibBuilder.loadTexts: isisIPRADest.setDescription('The destination of this IP Reachable Address. This is\n             either a network address, subnetwork address or host\n             address. This object follows the manualOrAutomatic\n             behaviour.')
isisIPRADestPrefixLen = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 5), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRADestPrefixLen.setStatus('current')
if mibBuilder.loadTexts: isisIPRADestPrefixLen.setDescription('The length of the IP Netmask for Reachability Address.')
isisIPRAExistState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 6), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRAExistState.setStatus('current')
if mibBuilder.loadTexts: isisIPRAExistState.setDescription('The state of this IP Reachable Address. This object\n             follows the ExistenceState and manualOrAutomatic\n             behaviours.')
isisIPRAAdminState = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 7), AdminState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRAAdminState.setStatus('current')
if mibBuilder.loadTexts: isisIPRAAdminState.setDescription('The administrative state of the IP Reachable Address. This\n             object follows the AdminState and manualOrAutomatic\n             behaviours.')
isisIPRADefMetric = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 8), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRADefMetric.setStatus('current')
if mibBuilder.loadTexts: isisIPRADefMetric.setDescription('The default metric value for reaching the specified\n             destination over this circuit. This object follows the\n             manualOrAutomatic behaviour.')
isisIPRADefMetricType = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 9), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRADefMetricType.setStatus('current')
if mibBuilder.loadTexts: isisIPRADefMetricType.setDescription('Indicates whether the default metric is internal or\n             external. This object follows the manualOrAutomatic\n             behaviour.')
isisIPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 3, 37, 1, 7, 1, 1, 10), SNPAAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: isisIPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: isisIPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in\n             order to reach a destination which matches this IP\n             Reachable Address. This object follows the\n             manualOrAutomatic behaviour.')
isisGroups = MibIdentifier((1, 3, 6, 1, 3, 37, 3, 1))
isisCompliances = MibIdentifier((1, 3, 6, 1, 3, 37, 3, 2))
isisCompliance = ModuleCompliance((1, 3, 6, 1, 3, 37, 3, 2, 1)).setObjects(("ISIS-MIB", "isisSystemGroup"), ("ISIS-MIB", "isisCircuitGroup"), ("ISIS-MIB", "isisISAdjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisCompliance = isisCompliance.setStatus('current')
if mibBuilder.loadTexts: isisCompliance.setDescription('The compiance statement for agents that support\n         the ISIS MIB')
isisSystemGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 1)).setObjects(("ISIS-MIB", "isisSysVersion"), ("ISIS-MIB", "isisSysType"), ("ISIS-MIB", "isisSysID"), ("ISIS-MIB", "isisSysMaxPathSplits"), ("ISIS-MIB", "isisSysMaxLSPGenInt"), ("ISIS-MIB", "isisSysOrigL1LSPBuffSize"), ("ISIS-MIB", "isisSysMaxAreaAddresses"), ("ISIS-MIB", "isisSysMinL1LSPGenInt"), ("ISIS-MIB", "isisSysMinL2LSPGenInt"), ("ISIS-MIB", "isisSysPollESHelloRate"), ("ISIS-MIB", "isisSysWaitTime"), ("ISIS-MIB", "isisSysAdminState"), ("ISIS-MIB", "isisSysL1State"), ("ISIS-MIB", "isisSysCorrLSPs"), ("ISIS-MIB", "isisSysLSPL1DbaseOloads"), ("ISIS-MIB", "isisSysManAddrDropFromAreas"), ("ISIS-MIB", "isisSysAttmptToExMaxSeqNums"), ("ISIS-MIB", "isisSysSeqNumSkips"), ("ISIS-MIB", "isisSysOwnLSPPurges"), ("ISIS-MIB", "isisSysIDFieldLenMismatches"), ("ISIS-MIB", "isisSysMaxAreaAddrMismatches"), ("ISIS-MIB", "isisSysOrigL2LSPBuffSize"), ("ISIS-MIB", "isisSysL2State"), ("ISIS-MIB", "isisSysLSPL2DbaseOloads"), ("ISIS-MIB", "isisSysAuthFails"), ("ISIS-MIB", "isisSysLSPIgnoreErrors"), ("ISIS-MIB", "isisSysLogAdjacencyChanges"), ("ISIS-MIB", "isisSysPartChanges"), ("ISIS-MIB", "isisSysMaxAreaCheck"), ("ISIS-MIB", "isisSysNextCircIndex"), ("ISIS-MIB", "isisSysExistState"), ("ISIS-MIB", "isisSysL2toL1Leaking"), ("ISIS-MIB", "isisSysSetOverload"), ("ISIS-MIB", "isisManAreaAddrExistState"), ("ISIS-MIB", "isisAreaAddr"), ("ISIS-MIB", "isisSysProtSuppExistState"), ("ISIS-MIB", "isisSummAddrExistState"), ("ISIS-MIB", "isisSummAddrAdminState"), ("ISIS-MIB", "isisSummAddrDefaultMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisSystemGroup = isisSystemGroup.setStatus('current')
if mibBuilder.loadTexts: isisSystemGroup.setDescription('The collections of objects used to manage an IS-IS router.')
isisCircuitGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 2)).setObjects(("ISIS-MIB", "isisCircIfSubIndex"), ("ISIS-MIB", "isisCircLocalID"), ("ISIS-MIB", "isisCircAdminState"), ("ISIS-MIB", "isisCircExistState"), ("ISIS-MIB", "isisCircType"), ("ISIS-MIB", "isisCircExtDomain"), ("ISIS-MIB", "isisCircAdjChanges"), ("ISIS-MIB", "isisCircInitFails"), ("ISIS-MIB", "isisCircRejAdjs"), ("ISIS-MIB", "isisCircOutCtrlPDUs"), ("ISIS-MIB", "isisCircInCtrlPDUs"), ("ISIS-MIB", "isisCircIDFieldLenMismatches"), ("ISIS-MIB", "isisCircLevel"), ("ISIS-MIB", "isisCircMCAddr"), ("ISIS-MIB", "isisCircPtToPtCircID"), ("ISIS-MIB", "isisCircPassiveCircuit"), ("ISIS-MIB", "isisCircMeshGroupEnabled"), ("ISIS-MIB", "isisCircMeshGroup"), ("ISIS-MIB", "isisCircSmallHellos"), ("ISIS-MIB", "isisCircUpTime"), ("ISIS-MIB", "isisCircIfIndex"), ("ISIS-MIB", "isisCircLevelDefaultMetric"), ("ISIS-MIB", "isisCircLevelISPriority"), ("ISIS-MIB", "isisCircLevelCircID"), ("ISIS-MIB", "isisCircLevelDesIS"), ("ISIS-MIB", "isisCircLevelLANDesISChanges"), ("ISIS-MIB", "isisCircLevelHelloMultiplier"), ("ISIS-MIB", "isisCircLevelHelloTimer"), ("ISIS-MIB", "isisCircLevelDRHelloTimer"), ("ISIS-MIB", "isisCircLevelLSPThrottle"), ("ISIS-MIB", "isisCircLevelMinLSPRetransInt"), ("ISIS-MIB", "isisCircLevelCSNPInterval"), ("ISIS-MIB", "isisCircLevelPartSNPInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisCircuitGroup = isisCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: isisCircuitGroup.setDescription('The collection of objects used to describe in IS-IS Circuit.')
isisISAdjGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 3)).setObjects(("ISIS-MIB", "isisISAdjState"), ("ISIS-MIB", "isisISAdjNeighSNPAAddress"), ("ISIS-MIB", "isisISAdjNeighSysType"), ("ISIS-MIB", "isisISAdjNeighSysID"), ("ISIS-MIB", "isisISAdjUsage"), ("ISIS-MIB", "isisISAdjHoldTimer"), ("ISIS-MIB", "isisISAdjNeighPriority"), ("ISIS-MIB", "isisISAdjUpTime"), ("ISIS-MIB", "isisISAdjAreaAddress"), ("ISIS-MIB", "isisISAdjIPAddressType"), ("ISIS-MIB", "isisISAdjIPAddress"), ("ISIS-MIB", "isisISAdjProtSuppProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISAdjGroup = isisISAdjGroup.setStatus('current')
if mibBuilder.loadTexts: isisISAdjGroup.setDescription('The collections of objects used to manage an IS-IS Adjacency.')
isisISPDUCounterGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 4)).setObjects(("ISIS-MIB", "isisPacketCountHello"), ("ISIS-MIB", "isisPacketCountLSP"), ("ISIS-MIB", "isisPacketCountCSNP"), ("ISIS-MIB", "isisPacketCountPSNP"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISPDUCounterGroup = isisISPDUCounterGroup.setStatus('current')
if mibBuilder.loadTexts: isisISPDUCounterGroup.setDescription('The collections of objects used to count various protocol PDUs.')
isisRATableGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 5)).setObjects(("ISIS-MIB", "isisRAExistState"), ("ISIS-MIB", "isisRAAdminState"), ("ISIS-MIB", "isisRAAddrPrefix"), ("ISIS-MIB", "isisRAMapType"), ("ISIS-MIB", "isisRADefMetric"), ("ISIS-MIB", "isisRADefMetricType"), ("ISIS-MIB", "isisRASNPAAddress"), ("ISIS-MIB", "isisRASNPAMask"), ("ISIS-MIB", "isisRASNPAPrefix"), ("ISIS-MIB", "isisRAType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisRATableGroup = isisRATableGroup.setStatus('current')
if mibBuilder.loadTexts: isisRATableGroup.setDescription('The collections of objects used to manage the reachable NSAP prefixes.')
isisISIPRADestGroup = ObjectGroup((1, 3, 6, 1, 3, 37, 3, 1, 6)).setObjects(("ISIS-MIB", "isisIPRADestType"), ("ISIS-MIB", "isisIPRADest"), ("ISIS-MIB", "isisIPRADestPrefixLen"), ("ISIS-MIB", "isisIPRAExistState"), ("ISIS-MIB", "isisIPRAAdminState"), ("ISIS-MIB", "isisIPRADefMetric"), ("ISIS-MIB", "isisIPRADefMetricType"), ("ISIS-MIB", "isisIPRASNPAAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    isisISIPRADestGroup = isisISIPRADestGroup.setStatus('current')
if mibBuilder.loadTexts: isisISIPRADestGroup.setDescription('The collections of objects used to manage configured IP addresses.')
mibBuilder.exportSymbols("ISIS-MIB", isisRAIndex=isisRAIndex, isisSysL2toL1Leaking=isisSysL2toL1Leaking, isisISAdjState=isisISAdjState, ISPriority=ISPriority, isisSysManAddrDropFromAreas=isisSysManAddrDropFromAreas, SystemID=SystemID, isisISAdjNeighSNPAAddress=isisISAdjNeighSNPAAddress, isisISAdjProtSuppTable=isisISAdjProtSuppTable, isisCircExtDomain=isisCircExtDomain, isisCircAdminState=isisCircAdminState, MetricType=MetricType, isisIPReachAddr=isisIPReachAddr, isisCircType=isisCircType, isisCircIDFieldLenMismatches=isisCircIDFieldLenMismatches, isisCircMeshGroup=isisCircMeshGroup, isisPacketCountLSP=isisPacketCountLSP, NSAPPrefix=NSAPPrefix, isisSysLSPL1DbaseOloads=isisSysLSPL1DbaseOloads, isisCompliance=isisCompliance, isisCircLevelDefaultMetric=isisCircLevelDefaultMetric, isisSystem=isisSystem, isisSysOrigL1LSPBuffSize=isisSysOrigL1LSPBuffSize, isisCircMeshGroupEnabled=isisCircMeshGroupEnabled, isisCirc=isisCirc, isisRADefMetricType=isisRADefMetricType, isisSysMinL1LSPGenInt=isisSysMinL1LSPGenInt, isisIPRAEntry=isisIPRAEntry, OSINSAddress=OSINSAddress, isisIPRADest=isisIPRADest, isisSysLogAdjacencyChanges=isisSysLogAdjacencyChanges, isisSysTable=isisSysTable, isisSysProtSuppTable=isisSysProtSuppTable, isisSysVersion=isisSysVersion, isisISAdjAreaAddrEntry=isisISAdjAreaAddrEntry, isisISAdjIPAddress=isisISAdjIPAddress, isisSummAddressType=isisSummAddressType, isisPacketCountHello=isisPacketCountHello, isisCircLevelCircID=isisCircLevelCircID, isisSysAttmptToExMaxSeqNums=isisSysAttmptToExMaxSeqNums, isisSystemGroup=isisSystemGroup, isisSysAdminState=isisSysAdminState, isisSummAddrTable=isisSummAddrTable, isisCircIfSubIndex=isisCircIfSubIndex, isisRAAddrPrefix=isisRAAddrPrefix, isisSummAddrAdminState=isisSummAddrAdminState, PYSNMP_MODULE_ID=isisMIB, isisRAEntry=isisRAEntry, isisISAdjAreaAddrTable=isisISAdjAreaAddrTable, isisRAAdminState=isisRAAdminState, isisCircLevelPartSNPInterval=isisCircLevelPartSNPInterval, isisSysOwnLSPPurges=isisSysOwnLSPPurges, isisSysProtSuppEntry=isisSysProtSuppEntry, isisIPRADestPrefixLen=isisIPRADestPrefixLen, isisManAreaAddrTable=isisManAreaAddrTable, isisCircPassiveCircuit=isisCircPassiveCircuit, isisISAdjHoldTimer=isisISAdjHoldTimer, isisISAdjIPAddrTable=isisISAdjIPAddrTable, isisISAdjUsage=isisISAdjUsage, isisCircSmallHellos=isisCircSmallHellos, isisReachAddr=isisReachAddr, isisNotifications=isisNotifications, isisCircuitGroup=isisCircuitGroup, isisObjects=isisObjects, isisSummAddrPrefixLen=isisSummAddrPrefixLen, isisSysCorrLSPs=isisSysCorrLSPs, isisAreaAddr=isisAreaAddr, isisSysIDFieldLenMismatches=isisSysIDFieldLenMismatches, isisSysLSPIgnoreErrors=isisSysLSPIgnoreErrors, isisSysL2State=isisSysL2State, isisIPRASNPAAddress=isisIPRASNPAAddress, isisRAType=isisRAType, isisSysL1State=isisSysL1State, isisSysID=isisSysID, isisSysOrigL2LSPBuffSize=isisSysOrigL2LSPBuffSize, isisSysMaxAreaCheck=isisSysMaxAreaCheck, isisISAdjAreaAddress=isisISAdjAreaAddress, isisCircUpTime=isisCircUpTime, isisRATableGroup=isisRATableGroup, isisRASNPAMask=isisRASNPAMask, isisISPDUCounterGroup=isisISPDUCounterGroup, isisCircLevelMinLSPRetransInt=isisCircLevelMinLSPRetransInt, isisSysProtSuppExistState=isisSysProtSuppExistState, isisISAdjIPAddrEntry=isisISAdjIPAddrEntry, isisCircIndex=isisCircIndex, isisCircMCAddr=isisCircMCAddr, isisIPRADestType=isisIPRADestType, isisSysLSPL2DbaseOloads=isisSysLSPL2DbaseOloads, isisISAdjProtSuppAdjIndex=isisISAdjProtSuppAdjIndex, isisCircLevelEntry=isisCircLevelEntry, isisSysMinL2LSPGenInt=isisSysMinL2LSPGenInt, isisCircLevelHelloMultiplier=isisCircLevelHelloMultiplier, isisIPRAIndex=isisIPRAIndex, SNPAAddress=SNPAAddress, isisRAExistState=isisRAExistState, isisISIPRADestGroup=isisISIPRADestGroup, CircuitID=CircuitID, isisSysAuthFails=isisSysAuthFails, isisAreaAddrEntry=isisAreaAddrEntry, isisSummAddrExistState=isisSummAddrExistState, isisISAdjGroup=isisISAdjGroup, isisSysNextCircIndex=isisSysNextCircIndex, isisCircLocalID=isisCircLocalID, isisIPRAExistState=isisIPRAExistState, isisCompliances=isisCompliances, isisSysPollESHelloRate=isisSysPollESHelloRate, isisSysSetOverload=isisSysSetOverload, isisSummAddrEntry=isisSummAddrEntry, isisSysMaxPathSplits=isisSysMaxPathSplits, isisISAdjTable=isisISAdjTable, UpTime=UpTime, isisCircLevelCSNPInterval=isisCircLevelCSNPInterval, isisPacketCountEntry=isisPacketCountEntry, isisPacketCountCSNP=isisPacketCountCSNP, isisCircIfIndex=isisCircIfIndex, isisRASNPAAddress=isisRASNPAAddress, LSPBuffSize=LSPBuffSize, isisCircPtToPtCircID=isisCircPtToPtCircID, isisConformance=isisConformance, isisCircLevelDesIS=isisCircLevelDesIS, isisSysMaxLSPGenInt=isisSysMaxLSPGenInt, isisISAdjIndex=isisISAdjIndex, isisISAdjUpTime=isisISAdjUpTime, isisRAMapType=isisRAMapType, isisSysProtSuppProtocol=isisSysProtSuppProtocol, isisSysExistState=isisSysExistState, isisMIB=isisMIB, isisSysMaxAreaAddresses=isisSysMaxAreaAddresses, isisSysEntry=isisSysEntry, isisIPRADefMetricType=isisIPRADefMetricType, isisISAdjNeighSysID=isisISAdjNeighSysID, isisISAdjNeighPriority=isisISAdjNeighPriority, isisIPRATable=isisIPRATable, AdminState=AdminState, isisGroups=isisGroups, SupportedProtocol=SupportedProtocol, isisRATable=isisRATable, DefaultMetric=DefaultMetric, isisCircAdjChanges=isisCircAdjChanges, isisManAreaAddrEntry=isisManAreaAddrEntry, isisISAdjProtSuppEntry=isisISAdjProtSuppEntry, isisRADefMetric=isisRADefMetric, isisISAdjAreaAddrAdjIndex=isisISAdjAreaAddrAdjIndex, isisISAdjIPAddressType=isisISAdjIPAddressType, isisCircLevelHelloTimer=isisCircLevelHelloTimer, isisCircLevelLANDesISChanges=isisCircLevelLANDesISChanges, isisSysMaxAreaAddrMismatches=isisSysMaxAreaAddrMismatches, isisSummAddress=isisSummAddress, isisSysInstance=isisSysInstance, isisISAdjIPAddrAdjIndex=isisISAdjIPAddrAdjIndex, isisIPRAAdminState=isisIPRAAdminState, isisCircLevel=isisCircLevel, isisCircRejAdjs=isisCircRejAdjs, isisPacketCountTable=isisPacketCountTable, isisISAdjEntry=isisISAdjEntry, isisManAreaAddrExistState=isisManAreaAddrExistState, isisPacketCountLevel=isisPacketCountLevel, isisCircTable=isisCircTable, isisISAdj=isisISAdj, isisSummAddrDefaultMetric=isisSummAddrDefaultMetric, isisCircOutCtrlPDUs=isisCircOutCtrlPDUs, isisRASNPAPrefix=isisRASNPAPrefix, isisCircLevelLSPThrottle=isisCircLevelLSPThrottle, isisSysSeqNumSkips=isisSysSeqNumSkips, isisCircPDUCounters=isisCircPDUCounters, isisCircExistState=isisCircExistState, isisSysType=isisSysType, isisCircInCtrlPDUs=isisCircInCtrlPDUs, isisPacketCountPSNP=isisPacketCountPSNP, isisCircLevelIndex=isisCircLevelIndex, isisSysPartChanges=isisSysPartChanges, isisCircInitFails=isisCircInitFails, isisISAdjProtSuppProtocol=isisISAdjProtSuppProtocol, isisCircLevelValues=isisCircLevelValues, LevelState=LevelState, isisCircLevelDRHelloTimer=isisCircLevelDRHelloTimer, isisCircLevelTable=isisCircLevelTable, isisISAdjNeighSysType=isisISAdjNeighSysType, isisCircLevelISPriority=isisCircLevelISPriority, isisManAreaAddr=isisManAreaAddr, isisIPRADefMetric=isisIPRADefMetric, isisAreaAddrTable=isisAreaAddrTable, isisIPRAType=isisIPRAType, SNPAPrefix=SNPAPrefix, isisPacketCountDirection=isisPacketCountDirection, isisCircEntry=isisCircEntry, isisSysWaitTime=isisSysWaitTime)
