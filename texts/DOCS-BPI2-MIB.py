#
# PySNMP MIB module DOCS-BPI2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-BPI-PLUS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 00:05:12 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
docsIfMib, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfMib")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Counter32, Integer32, Unsigned32, ObjectIdentity, Gauge32, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, TimeTicks, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "Integer32", "Unsigned32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "TimeTicks", "iso", "IpAddress")
TruthValue, TextualConvention, MacAddress, RowStatus, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "DisplayString", "DateAndTime")
docsBpi2MIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 127, 6))
docsBpi2MIB.setRevisions(('2001-04-17 00:00', '2000-11-17 19:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsBpi2MIB.setRevisionsDescriptions(('Modified CM and CMTS IP Multicast table indexing in \n         preparation for IPV6.  Obsoleted grace time objects\n         from the CMTS portion of the MIB.', 'Replaced DisplayString type with SnmpAdminString type.  \n         Several object descriptions were also changed.',))
if mibBuilder.loadTexts: docsBpi2MIB.setLastUpdated('200104170000Z')
if mibBuilder.loadTexts: docsBpi2MIB.setOrganization('IETF IPCDN Working Group')
if mibBuilder.loadTexts: docsBpi2MIB.setContactInfo('---------------------------------------\n\t\t      Stuart M. Green\n\t\t      Postal:\n\t\t      Arris Interactive / Nortel Networks\n\t\t      6 Riverside Drive\n\t\t      Andover, MA 01810\n\t\t      U.S.A.\n\t\t      Tel:    +1 978 946 4664\n\t\t      Fax:    +1 978 946 4800\n\t\t      E-mail: stu.green@ne.arris-i.com\n\t\t      ---------------------------------------\n\t\t      Kaz Ozawa\n\t\t      Postal:\n\t\t      Cable Television Laboratories\n\t\t      400 Centennial Parkway\n\t\t      Louisville, CO 80027\n\t\t      U.S.A.\n\t\t      Tel:    +1 303 661 3860\n\t\t      Fax:    +1 303 661 9199\n\t\t      E-mail: k.ozawa@cablelabs.com\n\t\t      ---------------------------------------\n\t\t      Rich Woundy (BPI MIB)\n\t\t      Postal:\n\t\t      Cisco Systems\n\t\t      300 Apollo Drive\n\t\t      Chelmsford, MA 01824\n\t\t      U.S.A.\n\t\t      Tel:    +1 978 244 8545\n\t\t      Fax:    +1 978 244 8917\n\t\t      E-mail: rwoundy@cisco.com\n\n        IETF IPCDN Working Group\n        General Discussion: ipcdn@ietf.org\n        Subscribe: http://www.ietf.org/mailman/listinfo/ipcdn\n        Archive: ftp://ftp.ietf.org/ietf-mail-archive/ipcdn\n        Co-chairs: Richard Woundy, rwoundy@cisco.com\n                   Andrew Valentine, a.valentine@eu.hns.com')
if mibBuilder.loadTexts: docsBpi2MIB.setDescription('This is the MIB Module for the DOCSIS Baseline Privacy\n\tPlus Interface (BPI+) at cable modems (CMs) and cable modem\n\ttermination systems (CMTSs).')
class X509Certificate(TextualConvention, OctetString):
    description = 'An X509 digital certificate encoded as an ASN.1 DER\n\tobject.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1400)

docsBpi2MIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1))
docsBpi2CmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1))
docsBpi2CmBaseTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1), )
if mibBuilder.loadTexts: docsBpi2CmBaseTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmBaseTable.setDescription('This table describes the basic and authorization\n\trelated\tBaseline Privacy Plus attributes of each CM MAC\n\tinterface.')
docsBpi2CmBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmBaseEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmBaseEntry.setDescription('Each entry contains objects describing attributes of\n\tone CM MAC interface. An entry in this table exists for each\n\tifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmPrivacyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.')
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmPrivacyEnable.setDescription('This object identifies whether this CM is\n\tprovisioned to run Baseline Privacy Plus.')
docsBpi2CmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(74, 74), ValueSizeConstraint(106, 106), ValueSizeConstraint(140, 140), ValueSizeConstraint(204, 204), ValueSizeConstraint(270, 270), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.4.')
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmPublicKey.setDescription('The value of this object is a DER-encoded\n\tRSAPublicKey ASN.1 type string, as defined in the RSA\n\tEncryption Standard (PKCS #1) [10], corresponding to the\n\tpublic key of the CM. The 74, 106, 140, 204, and 270 byte key\n\tencoding lengths correspond to 512 bit, 768 bit, 1024 bit,\n\t1536 bit, and 2048 public moduli respectively.')
docsBpi2CmAuthState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 1), ("authWait", 2), ("authorized", 3), ("reauthWait", 4), ("authRejectWait", 5), ("silent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthState.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.1.2.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthState.setDescription('The value of this object is the state of the CM\n\tauthorization FSM.  The start state indicates that FSM is in\n\tits initial state.')
docsBpi2CmAuthKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.10.')
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthKeySequenceNumber.setDescription('The value of this object is the most recent\n\tauthorization key sequence number for this FSM.')
docsBpi2CmAuthExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresOld.setDescription('The value of this object is the actual clock time for\n\texpiration of the immediate predecessor of the most recent \n\tauthorization key for this FSM.  If this FSM has only one \n\tauthorization key, then the value is the time of activation \n\tof this FSM.')
docsBpi2CmAuthExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthExpiresNew.setDescription('The value of this object is the actual clock time for\n\texpiration of the most recent authorization key for this FSM.')
docsBpi2CmAuthReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.1.2.3.4.')
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthReset.setDescription('Setting this object to TRUE generates a Reauthorize\n\tevent in the authorization FSM. Reading this object always\n\treturns FALSE.')
docsBpi2CmAuthGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6047999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.3.')
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthGraceTime.setDescription('The value of this object is the grace time for an\n\tauthorization key.  A CM is expected to start trying to get a\n\tnew authorization key beginning AuthGraceTime seconds before\n\tthe authorization key actually expires.')
docsBpi2CmTEKGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 302399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKGraceTime.setDescription('The value of this object is the grace time for\n\tthe TEK in seconds.  The CM is expected to start trying to\n\tacquire a new TEK beginning TEK GraceTime seconds before\n\tthe expiration of the most recent TEK.')
docsBpi2CmAuthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthWaitTimeout.setDescription('The value of this object is the Authorize Wait\n\tTimeout.')
docsBpi2CmReauthWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.2.')
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmReauthWaitTimeout.setDescription('The value of this object is the Reauthorize Wait\n\tTimeout in seconds.')
docsBpi2CmOpWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.4.')
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmOpWaitTimeout.setDescription('The value of this object is the Operational Wait\n\tTimeout in seconds.')
docsBpi2CmRekeyWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.5.')
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmRekeyWaitTimeout.setDescription('The value of this object is the Rekey Wait Timeout\n\tin seconds.')
docsBpi2CmAuthRejectWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.7.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectWaitTimeout.setDescription('The value of this object is the Authorization Reject\n\tWait Timeout in seconds.')
docsBpi2CmSAMapWaitTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.8.')
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmSAMapWaitTimeout.setDescription('The value of this object is the retransmission\n\tinterval, in seconds, of SA Map Requests from the MAP Wait\n\tstate.')
docsBpi2CmSAMapMaxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('count').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.9.')
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmSAMapMaxRetries.setDescription('The value of this object is the maximum number of\n\tMap Request retries allowed.')
docsBpi2CmAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthentInfos.setDescription('The value of this object is the count of times the CM\n\thas transmitted an Authentication Information message.')
docsBpi2CmAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRequests.setDescription('The value of this object is the count of times the CM\n\thas transmitted an Authorization Request message.')
docsBpi2CmAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthReplies.setDescription('The value of this object is the count of times the CM\n\thas received an Authorization Reply message.')
docsBpi2CmAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejects.setDescription('The value of this object is the count of times the CM\n\thas received an Authorization Reject message.')
docsBpi2CmAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalids.setDescription('The value of this object is the count of times the CM\n\thas received an Authorization Invalid message.')
docsBpi2CmAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.3 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent Authorization\n\tReject message received by the CM.  This has value unknown(2)\n\tif the last Error-Code value was 0, and none(1) if no\n\tAuthorization Reject message has been received since reboot.')
docsBpi2CmAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.3 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthRejectErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent Authorization Reject message received by the CM.\n\tThis is a zero length string if no Authorization Reject\n\tmessage has been received since reboot.')
docsBpi2CmAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.7 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent Authorization\n\tInvalid message received by the CM.  This has value unknown(2)\n\tif the last Error-Code value was 0, and none(1) if no\n\tAuthorization Invalid message has been received since reboot.')
docsBpi2CmAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.7 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmAuthInvalidErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent Authorization Invalid message received by the CM.\n\tThis is a zero length string if no Authorization Invalid\n\tmessage has been received since reboot.')
docsBpi2CmTEKTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2), )
if mibBuilder.loadTexts: docsBpi2CmTEKTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKTable.setDescription('This table describes the attributes of each CM\n\tTraffic Encryption Key(TEK) association. The CM maintains (no\n\tmore than) one TEK association per SAID per CM MAC interface.')
docsBpi2CmTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmTEKEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKEntry.setDescription('Each entry contains objects describing the TEK\n\tassociation attributes of one SAID. The CM MUST create one\n\tentry per SAID, regardless of whether the SAID was obtained\n\tfrom a Registration Response message, from an Authorization\n\tReply message, or from any dynamic SAID establishment\n\tmechanisms.')
docsBpi2CmTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKSAId.setDescription('The value of this object is the DOCSIS Security\n\tAssociation ID (SAID).')
docsBpi2CmTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKSAType.setDescription('The value of this object is the type of security\n\tassociation.')
docsBpi2CmTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKDataEncryptAlg.setDescription('The value of this object is the data encryption\n\talgorithm being utilized.')
docsBpi2CmTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKDataAuthentAlg.setDescription('The value of this object is the data authentication\n\talgorithm being utilized.')
docsBpi2CmTEKState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("start", 1), ("opWait", 2), ("opReauthWait", 3), ("operational", 4), ("rekeyWait", 5), ("rekeyReauthWait", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKState.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.1.3.1.')
if mibBuilder.loadTexts: docsBpi2CmTEKState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKState.setDescription('The value of this object is the state of the\n\tindicated TEK FSM.  The start(1) state indicates that FSM is\n\tin its initial state.')
docsBpi2CmTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.2.10 and 4.2.2.13.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK\n\tkey sequence number for this TEK FSM.')
docsBpi2CmTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresOld.setDescription('The value of this object is the actual clock time for\n\texpiration of the immediate predecessor of the most recent TEK\n\tfor this FSM.  If this FSM has only one TEK, then the value is\n\tthe time of activation of this FSM.')
docsBpi2CmTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKExpiresNew.setDescription('The value of this object is the actual clock time for\n\texpiration of the most recent TEK for this FSM.')
docsBpi2CmTEKKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.4.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRequests.setDescription('The value of this object is the count of times the CM\n\thas transmitted a Key Request message.')
docsBpi2CmTEKKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.5.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyReplies.setDescription('The value of this object is the count of times the CM\n\thas received a Key Reply message, including a message whose\n\tauthentication failed.')
docsBpi2CmTEKKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejects.setDescription('The value of this object is the count of times the CM\n\thas received a Key Reject message, including a message whose\n\tauthentication failed.')
docsBpi2CmTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.8.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalids.setDescription('The value of this object is the count of times the CM\n\thas received a TEK Invalid message, including a message whose\n\tauthentication failed.')
docsBpi2CmTEKAuthPends = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.1.3.3.3.')
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKAuthPends.setDescription('The value of this object is the count of times an\n\tAuthorization Pending (Auth Pend) event occurred in this FSM.')
docsBpi2CmTEKKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.1.2.6 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent Key Reject\n\tmessage received by the CM. This has value unknown(2) if the\n\tlast Error-Code value was 0, and none(1) if no Key Reject\n\tmessage has been received since reboot.')
docsBpi2CmTEKKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.1.2.6 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKKeyRejectErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent Key Reject message received by the CM. This is a\n\tzero length string if no Key Reject message has been received\n\tsince reboot.')
docsBpi2CmTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.1.2.8 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent TEK Invalid\n\tmessage received by the CM.  This has value unknown(2) if the\n\tlast Error-Code value was 0, and  none(1) if no TEK Invalid\n\tmessage has been received since reboot.')
docsBpi2CmTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 2, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.1.2.8 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmTEKInvalidErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent TEK Invalid message received by the CM. This is a\n\tzero length string if no TEK Invalid message has been received\n\tsince reboot.')
docsBpi2CmMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3))
docsBpi2CmIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs.\n\tIt is intended to map multicast IP addresses associated \n\twith SA MAP Request messages.')
docsBpi2CmIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of\n\tone multicast IP address to one SAID, as well as\n\tassociated state, message counters, and error information.')
docsBpi2CmIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: docsBpi2CmIpMulticastIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastIndex.setDescription('The index of this row.')
docsBpi2CmIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddressType.setDescription('The type of internet address for\n\tdocsBpi2CmIpMulticastAddress.')
docsBpi2CmIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 5.4.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastAddress.setDescription('This object represents the IP multicast address\n\tto be mapped.')
docsBpi2CmIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAId.setDescription('This object represents the SAID to which the IP\n\tmulticast address has been mapped.  If no SA Map Reply has\n\tbeen received for the IP address, this object should have the\n\tvalue 0.')
docsBpi2CmIpMulticastSAMapState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("start", 1), ("mapWait", 2), ("mapped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 5.3.1.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapState.setDescription('The value of this object is the state of the SA\n\tMapping\tFSM for this IP.')
docsBpi2CmIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRequests.setDescription('The value of this object is the count of times the\n\tCM has transmitted an SA Map Request message for this IP.')
docsBpi2CmIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapReplies.setDescription('The value of this object is the count of times the\n\tCM has received an SA Map Reply message for this IP.')
docsBpi2CmIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejects.setDescription('The value of this object is the count of times the\n\tCM has received an SA MAP Reject message for this IP.')
docsBpi2CmIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.12 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in the most recent SA Map\n\tReject message sent in response to an SA Map Request for this\n\tIP.  It has value unknown(2) if the last Error-Code value\n\twas 0, and none(1) if no SA MAP Reject message has been\n\treceived since reboot.')
docsBpi2CmIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 3, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.12 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the Display-String in\n\tthe most recent SA Map Reject message sent in response to an\n\tSA Map Request for this IP.  It is a zero length string if\n\tno SA Map Reject message has been received since reboot.')
docsBpi2CmCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4))
docsBpi2CmDeviceCertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmDeviceCertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCertTable.setDescription('This table describes the Baseline Privacy Plus\n\tdevice certificates for each CM MAC interface.')
docsBpi2CmDeviceCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmDeviceCertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCertEntry.setDescription('Each entry contains the device certificates of\n\tone CM MAC interface. An entry in this table exists for each\n\tifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmDeviceCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1, 1), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.1.')
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceCmCert.setDescription('The X509 DER-encoded cable modem certificate.\n\tNote:  This object can be set only when the value is the null\n\tstring.  Once the object contains the certificate, its access\n\tMUST be read-only.')
docsBpi2CmDeviceManufCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 4, 1, 1, 2), X509Certificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.1.')
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmDeviceManufCert.setDescription('The X509 DER-encoded manufacturer certificate which\n\tsigned the cable modem certificate.')
docsBpi2CmCryptoSuiteTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5), )
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteTable.setDescription('This table describes the Baseline Privacy Plus\n\tcryptographic suite capabilites for each CM MAC interface.')
docsBpi2CmCryptoSuiteEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmCryptoSuiteIndex"))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteEntry.setDescription('Each entry contains a cryptographic suite pair \n\twhich this CM MAC supports.')
docsBpi2CmCryptoSuiteIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteIndex.setDescription('The index for a cryptographic suite row.')
docsBpi2CmCryptoSuiteDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataEncryptAlg.setDescription('The value of this object is the data encryption\n\talgorithm for this cryptographic suite capability.')
docsBpi2CmCryptoSuiteDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmCryptoSuiteDataAuthentAlg.setDescription('The value of this object is the data authentication\n\talgorithm for this cryptographic suite capability.')
docsBpi2CmtsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2))
docsBpi2CmtsBaseTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsBaseTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsBaseTable.setDescription('This table describes the basic Baseline Privacy\n\tattributes of each CMTS MAC interface.')
docsBpi2CmtsBaseEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsBaseEntry.setDescription('Each entry contains objects describing attributes of\n\tone CMTS MAC interface.  An entry in this table exists for\n\teach ifEntry with an ifType of docsCableMaclayer(127).')
docsBpi2CmtsDefaultAuthLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6048000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultAuthLifetime.setDescription('The value of this object is the default lifetime, in\n\tseconds, the CMTS assigns to a new authorization key.')
docsBpi2CmtsDefaultTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultTEKLifetime.setDescription('The value of this object is the default lifetime, in\n\tseconds, the CMTS assigns to a new Traffic Encryption Key\n\t(TEK).')
docsBpi2CmtsDefaultSelfSignedManufCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsDefaultSelfSignedManufCertTrust.setDescription('This object determines the default trust of all (new)\n\tself-signed manufacturer certificates obtained after setting\n\tthe object.')
docsBpi2CmtsCheckCertValidityPeriods = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.2')
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCheckCertValidityPeriods.setDescription("Setting this object to TRUE causes all certificates\n\tobtained thereafter to have their validity periods (and their\n\tchain's validity periods) checked against the current time of\n\tday.  A FALSE setting will cause all certificates obtained\n\tthereafter to not have their validity periods (nor their\n\tchain's validity periods) checked against the current time of\n\tday.")
docsBpi2CmtsAuthentInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthentInfos.setDescription('The value of this object is the count of times the\n\tCMTS has received an Authentication Information message from\n\tany CM.')
docsBpi2CmtsAuthRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRequests.setDescription('The value of this object is the count of times the\n\tCMTS has received an Authorization Request message from any\n\tCM.')
docsBpi2CmtsAuthReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthReplies.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Reply message to any\n\tCM.')
docsBpi2CmtsAuthRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejects.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Reject message to any\n\tCM.')
docsBpi2CmtsAuthInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalids.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Invalid message to any\n\tCM.')
docsBpi2CmtsSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRequests.setDescription('The value of this object is the count of times the\n\tCMTS has received an SA Map Request message from any CM.')
docsBpi2CmtsSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapReplies.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an SA Map Reply message to any CM.')
docsBpi2CmtsSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsSAMapRejects.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an SA Map Reject message to any CM.')
docsBpi2CmtsAuthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsAuthTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthTable.setDescription('This table describes the attributes of each CM\n\tauthorization association. The CMTS maintains one\n\tauthorization association with each Baseline Privacy-enabled\n\tCM on each CMTS MAC interface.')
docsBpi2CmtsAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsAuthEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthEntry.setDescription('Each entry contains objects describing attributes of\n\tone authorization association. The CMTS MUST create one entry\n\tper CM per MAC interface, based on the receipt of an\n\tAuthorization Request message, and MUST not delete the entry\n\tbefore the CM authorization permanently expires.')
docsBpi2CmtsAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmMacAddress.setDescription('The value of this object is the physical address of\n\tthe CM to which the authorization association applies.')
docsBpi2CmtsAuthCmBpiVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bpi", 0), ("bpiPlus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmBpiVersion.setDescription('The value of this object is the version of Baseline\n\tPrivacy\tfor which this CM has registered.')
docsBpi2CmtsAuthCmPublicKey = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(74, 74), ValueSizeConstraint(106, 106), ValueSizeConstraint(140, 140), ValueSizeConstraint(204, 204), ValueSizeConstraint(270, 270), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.4.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmPublicKey.setDescription('The value of this object is a DER-encoded\n\tRSAPublicKey ASN.1 type string, as defined in the RSA\n\tEncryption Standard (PKCS #1) [10], corresponding to the\n\tpublic key of the CM. The 74, 106, 140, 204, and 270 byte key\n\tencoding lengths correspond to 512 bit, 768 bit, 1024 bit,\n\t1536 bit, and 2048 public moduli respectively. This is a \n\tzero-length string if the CMTS does not retain the public\n\tkey.')
docsBpi2CmtsAuthCmKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.10.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmKeySequenceNumber.setDescription('The value of this object is the most recent\n\tauthorization key sequence number for this CM.')
docsBpi2CmtsAuthCmExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresOld.setDescription('The value of this object is the actual clock time\n\tfor expiration of the immediate predecessor of the most\n\trecent authorization key for this FSM. If this FSM has only\n\tone authorization key, then the value is the time of\n\tactivation of this FSM.\n\tNote: For CMs running in BPI mode, implementation of this \n\tobject is optional and MAY vary.')
docsBpi2CmtsAuthCmExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.2 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmExpiresNew.setDescription('The value of this object is the actual clock time\n\tfor expiration of the most recent authorization key for this\n\tFSM.')
docsBpi2CmtsAuthCmLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6048000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.2 and Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmLifetime.setDescription('The value of this object is the lifetime, in seconds,\n\tthe CMTS assigns to an authorization key for this CM.')
docsBpi2CmtsAuthCmGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6047999))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmGraceTime.setStatus('obsolete')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmGraceTime.setDescription('The value of this object is the grace time for the\n\tauthorization key in seconds.  The CM is expected to start\n\ttrying to get a new authorization key beginning AuthGraceTime\n\tseconds before the authorization key actually expires.\n\tNote: Tracking this value is optional on certain CMTS\n\timplementations.')
docsBpi2CmtsAuthCmReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noResetRequested", 1), ("invalidateAuth", 2), ("sendAuthInvalid", 3), ("invalidateTeks", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.1.2.3.4, 4.1.2.3.5, and 4.1.3.3.5.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReset.setDescription('Setting this object to invalidateAuth(2) causes the\n\tCMTS to invalidate the current CM authorization key(s), but\n\tnot to transmit an Authorization Invalid message nor to\n\tinvalidate unicast TEKs.  Setting this object to\n\tsendAuthInvalid(3) causes the CMTS to invalidate the current\n\tCM authorization key(s), and to transmit an Authorization\n\tInvalid message to the CM, but not to invalidate unicast TEKs.\n\tSetting this object to invalidateTeks(4) causes the CMTS to\n\tinvalidate the current CM authorization key(s), to transmit an\n\tAuthorization Invalid message to the CM, and to invalidate all\n\tunicast TEKs associated with this CM authorization. Reading\n\tthis object returns the most-recently-set value of this\n\tobject, or returns noResetRequested(1) if the object has not\n\tbeen set since the last CMTS reboot.')
docsBpi2CmtsAuthCmInfos = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.9.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInfos.setDescription('The value of this object is the count of times the\n\tCMTS has received an Authentication Information message from\n\tthis CM.')
docsBpi2CmtsAuthCmRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.1.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRequests.setDescription('The value of this object is the count of times the\n\tCMTS has received an Authorization Request message from this\n\tCM.')
docsBpi2CmtsAuthCmReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmReplies.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Reply message to this\n\tCM.')
docsBpi2CmtsAuthCmRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmRejects.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Reject message to this\n\tCM.')
docsBpi2CmtsAuthCmInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.7.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthCmInvalids.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an Authorization Invalid message to this\n\tCM.')
docsBpi2CmtsAuthRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 11))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unauthorizedSaid", 4), ("permanentAuthorizationFailure", 8), ("timeOfDayNotAcquired", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.3 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent Authorization\n\tReject message transmitted to the CM.  This has value\n\tunknown(2) if the last Error-Code value was 0, and none(1) if\n\tno Authorization Reject message has been transmitted to the\n\tCM.')
docsBpi2CmtsAuthRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.3 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthRejectErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent Authorization Reject message transmitted to the\n\tCM.  This is a zero length string if no Authorization Reject\n\tmessage has been transmitted to the CM.')
docsBpi2CmtsAuthInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedCm", 3), ("unsolicited", 5), ("invalidKeySequence", 6), ("keyRequestAuthenticationFailure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.7 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in most recent Authorization\n\tInvalid message transmitted to the CM.  This has value\n\tunknown(2) if the last Error-Code value was 0, and none(1) if\n\tno Authorization Invalid message has been transmitted to the\n\tCM.')
docsBpi2CmtsAuthInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.7 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthInvalidErrorString.setDescription('The value of this object is the Display-String in\n\tmost recent Authorization Invalid message transmitted to the\n\tCM.  This is a zero length string if no Authorization Invalid\n\tmessage has been transmitted to the CM.')
docsBpi2CmtsAuthPrimarySAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthPrimarySAId.setDescription('The value of this object is the Primary Security\n\tAssociation identifier.')
docsBpi2CmtsAuthBpkmCmCertValid = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 0), ("validCmChained", 1), ("validCmTrusted", 2), ("invalidCmUntrusted", 3), ("invalidCAUntrusted", 4), ("invalidCmOther", 5), ("invalidCAOther", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCertValid.setDescription("Contains the reason why a CM's certificate is deemed\n\tvalid or invalid.\n\t\tReturn unknown if the CM is running BPI mode.\n\t\tValidCmChained means the certificate is valid because\n\tit chains to a valid certificate.\n\t\tValidCmTrusted means the certificate is valid because\n\tit has been provisioned (in the docsBpi2CmtsProvisionedCmCert\n\ttable) to be trusted.\n\t\tInvalidCmUntrusted means the certificate is invalid\n\tbecause it has been provisioned (in the\n\tdocsBpi2CmtsProvisionedCmCert table) to be untrusted.\n\t\tInvalidCAUntrusted means the certificate is invalid\n\tbecause\tit chains to an untrusted certificate.\n\t\tInvalidCmOther and InvalidCAOther refer to errors in\n\tparsing, validity periods, etc, which are attributable to the\n\tcm certificate or its chain respectively; additional \n\tinformation may be found in docsBpi2AuthRejectErrorString for\n\tthese types of errors.")
docsBpi2CmtsAuthBpkmCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 2, 1, 21), X509Certificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsAuthBpkmCmCert.setDescription('The X509 CM Certificate sent as part of a BPKM\n\tAuthorization Request.\n\tNote: The NULL string must be returned if the entire\n\tcertificate is not retained in the CMTS.')
docsBpi2CmtsTEKTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3), )
if mibBuilder.loadTexts: docsBpi2CmtsTEKTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKTable.setDescription('This table describes the attributes of each \n\tTraffic Encryption Key (TEK) association. The CMTS maintains\n\tone TEK association per SAID on each CMTS MAC interface.')
docsBpi2CmtsTEKEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsTEKSAId"))
if mibBuilder.loadTexts: docsBpi2CmtsTEKEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKEntry.setDescription('Each entry contains objects describing attributes of\n\tone TEK association on a particular CMTS MAC interface. The\n\tCMTS MUST create one entry per SAID per MAC interface,\n\tbased on the receipt of a Key Request message, and MUST not\n\tdelete the entry before the CM authorization for the SAID\n\tpermanently expires.')
docsBpi2CmtsTEKSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.12.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAId.setDescription('The value of this object is the DOCSIS Security\n\tAssociation ID (SAID).')
docsBpi2CmtsTEKSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKSAType.setDescription('The value of this object is the type of security\n\tassociation.  Dynamic does not apply to CMs running in\n\tBPI mode.')
docsBpi2CmtsTEKDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataEncryptAlg.setDescription('The value of this object is the data encryption\n\talgorithm being utilized.')
docsBpi2CmtsTEKDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKDataAuthentAlg.setDescription('The value of this object is the data authentication\n\talgorithm being utilized.')
docsBpi2CmtsTEKLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.5 and Appendix A.2.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKLifetime.setDescription('The value of this object is the lifetime, in\n\tseconds, the CMTS assigns to keys for this TEK association.')
docsBpi2CmtsTEKGraceTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 302399))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKGraceTime.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tAppendix A.1.1.1.6.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKGraceTime.setStatus('obsolete')
if mibBuilder.loadTexts: docsBpi2CmtsTEKGraceTime.setDescription('The value of this object is the grace time for\n\tthe TEK in seconds.  The CM is expected to start trying to\n\tacquire a new TEK beginning TEK GraceTime seconds before\n\tthe TEK actually expires.\n\tNote: The value of this object is vendor specific for\n\tmulticast TEKs.')
docsBpi2CmtsTEKKeySequenceNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.2.10 and 4.2.2.13.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKKeySequenceNumber.setDescription('The value of this object is the most recent TEK\n\tkey sequence number for this SAID.')
docsBpi2CmtsTEKExpiresOld = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresOld.setDescription('The value of this object is the actual clock time\n\tfor expiration of the immediate predecessor of the most\n\trecent TEK for this FSM. If this FSM has only one TEK, then\n\tthe value is the time of activation of this FSM.')
docsBpi2CmtsTEKExpiresNew = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.5 and 4.2.2.9.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKExpiresNew.setDescription('The value of this object is the actual clock time\n\tfor expiration of the most recent TEK for this FSM.')
docsBpi2CmtsTEKReset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.1.3.3.5.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKReset.setDescription('Setting this object to TRUE causes the CMTS to\n\tinvalidate the current active TEK(s) (plural due to key\n\ttransition periods), and to generate a new TEK for the\n\tassociated SAID; the CMTS MAY also generate an unsolicited\n\tTEK Invalid message, to optimize the TEK synchronization\n\tbetween the CMTS and the CM. Reading this object always\n\treturns\tFALSE.')
docsBpi2CmtsKeyRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.4.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRequests.setDescription('The value of this object is the count of times the\n\tCMTS has received a Key Request message.')
docsBpi2CmtsKeyReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.5.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyReplies.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted a Key Reply message.')
docsBpi2CmtsKeyRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.6.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejects.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted a Key Reject message.')
docsBpi2CmtsTEKInvalids = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.8.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalids.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted a TEK Invalid message.')
docsBpi2CmtsKeyRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("unauthorizedSaid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.6 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in the most recent Key Reject\n\tmessage sent in response to a Key Request for this SAID.\n\tThis has value unknown(2) if the last Error-Code value\n\twas 0, and none(1) if no Key Reject message has been received\n\tsince reboot.')
docsBpi2CmtsKeyRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.6 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsKeyRejectErrorString.setDescription('The value of this object is the Display-String in\n\tthe most recent Key Reject message sent in response to a Key\n\tRequest for this SAID. This is a zero length string if no\n\tKey Reject message has been received since reboot.')
docsBpi2CmtsTEKInvalidErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("invalidKeySequence", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.8 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in the most recent TEK Invalid\n\tmessage sent in association with this SAID.  This has value\n\tunknown(2) if the last Error-Code value was 0, and none(1) if\n\tno TEK Invalid message has been received since reboot.')
docsBpi2CmtsTEKInvalidErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 3, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.8 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsTEKInvalidErrorString.setDescription('The value of this object is the Display-String in\n\tthe most recent TEK Invalid message sent in association with\n\tthis SAID.  This is a zero length string if no TEK Invalid\n\tmessage has been received since reboot.')
docsBpi2CmtsMulticastObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4))
docsBpi2CmtsIpMulticastMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapTable.setDescription('This table maps multicast IP addresses to SAIDs.')
docsBpi2CmtsIpMulticastMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapEntry.setDescription('Each entry contains objects describing the mapping of\n\ta set of multicast IP address and mask to one SAID, as well as\n\tassociated message counters and error information.')
docsBpi2CmtsIpMulticastIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastIndex.setDescription('The index of this row.')
docsBpi2CmtsIpMulticastAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddressType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddressType.setDescription('The type of internet address for\n\tdocsBpi2CmtsIpMulticastAddress.')
docsBpi2CmtsIpMulticastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastAddress.setDescription('This object represents the IP multicast address\n\tto be mapped, in conjunction with \n\tdocsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastMaskType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMaskType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMaskType.setDescription('The type of internet address for\n\tdocsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastMask = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMask.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMask.setDescription('This object represents the IP multicast address mask\n\tfor this row. \n\tAn IP multicast address matches this row if it is\n\tequivalent to the logical AND of \n\tdocsBpi2CmtsIpMulticastAddr with \n\tdocsBpi2CmtsIpMulticastMask.')
docsBpi2CmtsIpMulticastSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAId.setDescription('This object represents the multicast SAID to be\n\tused in this IP multicast address mapping entry.')
docsBpi2CmtsIpMulticastSAType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 2.1.3.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAType.setDescription('The value of this object is the type of security\n\tassociation.  Dynamic does not apply to CMs running in\n\tBPI mode.')
docsBpi2CmtsIpMulticastDataEncryptAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("des56CbcMode", 1), ("des40CbcMode", 2))).clone('des56CbcMode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataEncryptAlg.setDescription('The value of this object is the data encryption\n\talgorithm being utilized.')
docsBpi2CmtsIpMulticastDataAuthentAlg = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.2.20.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastDataAuthentAlg.setDescription('The value of this object is the data authentication\n\talgorithm being utilized.')
docsBpi2CmtsIpMulticastSAMapRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.10.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRequests.setDescription('The value of this object is the count of times the\n\tCMTS has received an SA Map Request message for this IP.')
docsBpi2CmtsIpMulticastSAMapReplies = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.11.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapReplies.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an SA Map Reply message for this IP.')
docsBpi2CmtsIpMulticastSAMapRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 4.2.1.12.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejects.setDescription('The value of this object is the count of times the\n\tCMTS has transmitted an SA Map Reject message for this IP.')
docsBpi2CmtsIpMulticastSAMapRejectErrorCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("noAuthForRequestedDSFlow", 9), ("dsFlowNotMappedToSA", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.12 and 4.2.2.15.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorCode.setDescription('The value of this object is the enumerated\n\tdescription of the Error-Code in the most recent SA Map\n\tReject message sent in response to a SA Map Request for this\n\tIP.  It has value unknown(2) if the last Error-Code value\n\twas 0, and none(1) if no SA MAP Reject message has been\n\treceived since reboot.')
docsBpi2CmtsIpMulticastSAMapRejectErrorString = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSections 4.2.1.12 and 4.2.2.6.')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastSAMapRejectErrorString.setDescription('The value of this object is the Display-String in\n\tthe most recent SA Map Reject message sent in response to an\n\tSA Map Request for this IP.  It is a zero length string if\n\tno SA Map Reject message has been received since reboot.')
docsBpi2CmtsIpMulticastMapControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapControl.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsIpMulticastMapControl.setDescription('This object controls and reflects the IP multicast\n\taddress mapping entry.  There is no restriction on the ability \n\tto change values in this row while the row is active.  \n\tInactive rows need not be timed out.')
docsBpi2CmtsMulticastAuthTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthTable.setDescription('This table describes the multicast SAID\n\tauthorization for each CM on each CMTS MAC interface.')
docsBpi2CmtsMulticastAuthEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsMulticastAuthSAId"), (0, "DOCS-BPI2-MIB", "docsBpi2CmtsMulticastAuthCmMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthEntry.setDescription('Each entry contains objects describing the key\n\tauthorization of one cable modem for one multicast SAID\n\tfor one CMTS MAC interface.')
docsBpi2CmtsMulticastAuthSAId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthSAId.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthSAId.setDescription('This object represents the multicast SAID for\n\tauthorization.')
docsBpi2CmtsMulticastAuthCmMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthCmMacAddress.setDescription('This object represents the MAC address of the CM\n\tto which the multicast SAID authorization applies.')
docsBpi2CmtsMulticastAuthControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthControl.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsMulticastAuthControl.setDescription('This object controls and reflects the CM\n\tauthorization for each multicast SAID.  There is no \n\trestriction on the ability to change values in this row \n\twhile the row is active.  Inactive rows need not be\n\ttimed out.')
docsBpi2CmtsCertObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5))
docsBpi2CmtsProvisionedCmCertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1), )
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTable.setDescription('A table of CM certificate trust entries provisioned\n\tto the CMTS.  The trust object for a certificate in this table\n\thas an overriding effect on the validity object of a \n\tcertificate in the authorization table, as long as the\n\tentire contents of the two certificates are identical.')
docsBpi2CmtsProvisionedCmCertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1), ).setIndexNames((0, "DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertMacAddress"))
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertEntry.setDescription("An entry in the CMTS' provisioned CM certificate\n\ttable.")
docsBpi2CmtsProvisionedCmCertMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertMacAddress.setDescription('The index of this row.')
docsBpi2CmtsProvisionedCmCertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2))).clone('untrusted')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.1.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertTrust.setDescription('Trust state for the provisioned CM certificate entry.\n\tNote: Setting this object need only override the validity of\n\tCM certificates sent in future authorization requests;\n\tinstantaneous effect need not occur.')
docsBpi2CmtsProvisionedCmCertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.1.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertSource.setDescription('This object indicates how the certificate reached the\n\tCMTS.  Other means it originated from a source not identified\n\tabove.')
docsBpi2CmtsProvisionedCmCertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertStatus.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCertStatus.setDescription('\tStandard RowStatus object except: \n\ta) if a row has ever been activated, \n\ta set to docsBpi2CmtsProvisionedCmCert need not succeed,\n\tb) inactive rows need not be timed out.')
docsBpi2CmtsProvisionedCmCert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 1, 1, 5), X509Certificate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsProvisionedCmCert.setDescription('An X509 DER-encoded certificate authority\n\tcertificate.\n\tNote: The NULL string must be returned, on reads, if the\n\tentire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2), )
if mibBuilder.loadTexts: docsBpi2CmtsCACertTable.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTable.setDescription('The table of known certificate authority certificates\n\tacquired by this device.')
docsBpi2CmtsCACertEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1), ).setIndexNames((0, "DOCS-BPI2-MIB", "docsBpi2CmtsCACertIndex"))
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertEntry.setDescription('A row in the Certificate Authority certificate\n\ttable.')
docsBpi2CmtsCACertIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: docsBpi2CmtsCACertIndex.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIndex.setDescription('The index for this row.')
docsBpi2CmtsCACertSubject = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.4')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSubject.setDescription("The subject name exactly as it is encoded in the\n\tX509 certificate.\n\tThe organizationName portion of the certificate's subject \n\tname must be present.  All other fields are optional.  Any \n\toptional field present must be prepended with CR (carriage \n\treturn) LF (line feed) ASCII characters.\n\tOrdering of fields present must conform to:\n\n\torganizationName\n\tCR LF\n\tcountryName\n\tCR LF\n\tstateOrProvinceName\n\tCR LF\n\tlocalityName\t\n\tCR LF\n\torganizationalUnitName\n\tCR LF\n\torganizationalUnitName=<Manufacturing Location>\n\tCR LF\n\tcommonName\t\n\t")
docsBpi2CmtsCACertIssuer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.4')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertIssuer.setDescription("The issuer name exactly as it is encoded in the\n\tX509 certificate.\n\tThe commonName portion of the certificate's issuer \n\tname must be present.  All other fields are optional.  Any \n\toptional field present must be prepended with CR (carriage \n\treturn) LF (line feed) ASCII characters.\n\tOrdering of fields present must conform to:\n\n\tcommonName\t\n\tCR LF\n\tcountryName\n\tCR LF\n\tstateOrProvinceName\n\tCR LF\n\tlocalityName\t\n\tCR LF\n\torganizationName\n\tCR LF\n\torganizationalUnitName\n\tCR LF\n\torganizationalUnitName=<Manufacturing Location>\n\t")
docsBpi2CmtsCACertSerialNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.2')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSerialNumber.setDescription("This CA certificate's serial number represented as\n\tan octet string.")
docsBpi2CmtsCACertTrust = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 2), ("chained", 3), ("root", 4))).clone('chained')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertTrust.setDescription('This object controls the trust status of this\n\tcertificate.  Root certificates must be given root trust;\n\tmanufacturer certificates must not be given root trust.\n\tTrust on root certificates must not change.\n\tNote: Setting this object need only affect the validity of\n\tCM certificates sent in future authorization requests;\n\tinstantaneous effect need not occur.')
docsBpi2CmtsCACertSource = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4), ("authentInfo", 5), ("compiledIntoCode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.1')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertSource.setDescription('This object indicates how the certificate reached\n\tthe CMTS.  Other means it originated from a source not\n\tidentified above.')
docsBpi2CmtsCACertStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACertStatus.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertStatus.setDescription('\tStandard RowStatus objects except:\n\ta) if a row has ever been activated,\n\ta set to docsBpi2CmtsCACert need not succeed,\n\tb) inactive rows need not be timed out,\n\tc) if a row has ever been activated, a destroy setting need \n\tnot succeed.')
docsBpi2CmtsCACert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 8), X509Certificate()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.2.')
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACert.setDescription('An X509 DER-encoded certificate authority\n\tcertificate.\n\tTo help identify certificates, either this object or \n\tdocsBpi2CmtsCACertThumbprint must be returned by a CMTS for\n\tself-signed CA certificates.\n\n\tNote: The NULL string must be returned, on reads, if the\n\tentire certificate is not retained in the CMTS.')
docsBpi2CmtsCACertThumbprint = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 2, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection 9.4.3')
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsCACertThumbprint.setDescription('The SHA-1 hash of a CA certificate.  \n\tTo help identify certificates, either this object or \n\tdocsBpi2CmtsCACert must be returned by a CMTS for\n\tself-signed CA certificates.\n\n\tNote: The NULL string must be returned if this object is\n\tnot supported by the CMTS.')
docsBpi2CodeDownloadControl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4))
docsBpi2CodeDownloadStatusCode = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("configFileCvcVerified", 1), ("configFileCvcRejected", 2), ("snmpCvcVerified", 3), ("snmpCvcRejected", 4), ("codeFileVerified", 5), ("codeFileRejected", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.3.2 & D.3.5.1.')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusCode.setDescription('The value indicates the result of the latest config\n\tfile CVC verification, SNMP CVC verification, or code file\n\tverification.')
docsBpi2CodeDownloadStatusString = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection TBD (see D.3.7)')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadStatusString.setDescription('The value of this object indicates the additional\n\tinformation to the status code.  The value will include\n\tthe error code and error description which will be defined\n\tseparately.')
docsBpi2CodeMfgOrgName = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgOrgName.setDescription("The value of this object is the device manufacturer's\n\torganizationName.")
docsBpi2CodeMfgCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgCodeAccessStart.setDescription("The value of this object is the device manufacturer's\n\tcurrent codeAccessStart value referenced to Greenwich Mean\n\tTime (GMT).")
docsBpi2CodeMfgCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeMfgCvcAccessStart.setDescription("The value of this object is the device manufacturer's\n\tcurrent cvcAccessStart value referenced to Greenwich Mean\n\tTime (GMT).")
docsBpi2CodeCoSignerOrgName = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerOrgName.setDescription("The value of this object is the Co-Signer's\n\torganizationName.  The value is a zero length string if \n\tthe co-signer is not specified.")
docsBpi2CodeCoSignerCodeAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCodeAccessStart.setDescription("The value of this object is the Co-Signer's current\n\tcodeAccessStart value referenced to Greenwich Mean\n\tTime (GMT).  If docsBpi2CodeCoSignerOrgName is a zero \n\tlength string, the value of this object is meaningless.")
docsBpi2CodeCoSignerCvcAccessStart = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCoSignerCvcAccessStart.setDescription("The value of this object is the Co-Signer's current\n\tcvcAccessStart value referenced to Greenwich Mean\n\tTime (GMT).  If docsBpi2CodeCoSignerOrgName is a zero \n\tlength string, the value of this object is meaningless.")
docsBpi2CodeCvcUpdate = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 6, 1, 4, 9), X509Certificate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setReference('DOCSIS Baseline Privacy Plus Interface Specification,\n\tSection D.3.3.2.2.')
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeCvcUpdate.setDescription('Setting a CVC to this object triggers the device\n\tto verify the CVC and update the cvcAccessStart value.\n\tIf the device is not enabled to upgrade codefiles, or\n\tthe CVC verification fails, the CVC will be rejected.\n\tReading this object always returns the null string.')
docsBpi2Notification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 2))
docsBpi2Conformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3))
docsBpi2Compliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 1))
docsBpi2Groups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2))
docsBpi2BasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 1, 1)).setObjects(("DOCS-BPI2-MIB", "docsBpi2CmGroup"), ("DOCS-BPI2-MIB", "docsBpi2CmtsGroup"), ("DOCS-BPI2-MIB", "docsBpi2CodeDownloadGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2BasicCompliance = docsBpi2BasicCompliance.setStatus('current')
if mibBuilder.loadTexts: docsBpi2BasicCompliance.setDescription('This is the compliance statement for devices which\n\timplement the DOCSIS Baseline Privacy Interface.')
docsBpi2CmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 1)).setObjects(("DOCS-BPI2-MIB", "docsBpi2CmPrivacyEnable"), ("DOCS-BPI2-MIB", "docsBpi2CmPublicKey"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthState"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthKeySequenceNumber"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthExpiresOld"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthExpiresNew"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthReset"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthGraceTime"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKGraceTime"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmReauthWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmOpWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmRekeyWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthRejectWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmSAMapWaitTimeout"), ("DOCS-BPI2-MIB", "docsBpi2CmSAMapMaxRetries"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthentInfos"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthInvalids"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthInvalidErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmAuthInvalidErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKSAType"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKDataEncryptAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKDataAuthentAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKState"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeySequenceNumber"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKExpiresOld"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKExpiresNew"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeyRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeyReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeyRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKInvalids"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKAuthPends"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeyRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKKeyRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKInvalidErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmTEKInvalidErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastAddressType"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastAddress"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAId"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapState"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmIpMulticastSAMapRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmDeviceCmCert"), ("DOCS-BPI2-MIB", "docsBpi2CmDeviceManufCert"), ("DOCS-BPI2-MIB", "docsBpi2CmCryptoSuiteDataEncryptAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmCryptoSuiteDataAuthentAlg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmGroup = docsBpi2CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmGroup.setDescription('This collection of objects provides CM BPI+ status and\n\tcontrol.')
docsBpi2CmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 2)).setObjects(("DOCS-BPI2-MIB", "docsBpi2CmtsDefaultAuthLifetime"), ("DOCS-BPI2-MIB", "docsBpi2CmtsDefaultTEKLifetime"), ("DOCS-BPI2-MIB", "docsBpi2CmtsDefaultSelfSignedManufCertTrust"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCheckCertValidityPeriods"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthentInfos"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthInvalids"), ("DOCS-BPI2-MIB", "docsBpi2CmtsSAMapRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmtsSAMapReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmtsSAMapRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmBpiVersion"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmPublicKey"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmKeySequenceNumber"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmExpiresOld"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmExpiresNew"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmLifetime"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmReset"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmInfos"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmInvalids"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthInvalidErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthInvalidErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthPrimarySAId"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthBpkmCmCertValid"), ("DOCS-BPI2-MIB", "docsBpi2CmtsAuthBpkmCmCert"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKSAType"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKDataEncryptAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKDataAuthentAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKLifetime"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKKeySequenceNumber"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKExpiresOld"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKExpiresNew"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKReset"), ("DOCS-BPI2-MIB", "docsBpi2CmtsKeyRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmtsKeyReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmtsKeyRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKInvalids"), ("DOCS-BPI2-MIB", "docsBpi2CmtsKeyRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmtsKeyRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKInvalidErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKInvalidErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastAddressType"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastAddress"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastMaskType"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastMask"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAId"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAType"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastDataEncryptAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastDataAuthentAlg"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRequests"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapReplies"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejects"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejectErrorCode"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastSAMapRejectErrorString"), ("DOCS-BPI2-MIB", "docsBpi2CmtsIpMulticastMapControl"), ("DOCS-BPI2-MIB", "docsBpi2CmtsMulticastAuthControl"), ("DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertTrust"), ("DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertSource"), ("DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCertStatus"), ("DOCS-BPI2-MIB", "docsBpi2CmtsProvisionedCmCert"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertSubject"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertIssuer"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertSerialNumber"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertTrust"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertSource"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertStatus"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACert"), ("DOCS-BPI2-MIB", "docsBpi2CmtsCACertThumbprint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CmtsGroup = docsBpi2CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CmtsGroup.setDescription('This collection of objects provides CMTS BPI+ status and\n\tcontrol.')
docsBpi2CodeDownloadGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 3)).setObjects(("DOCS-BPI2-MIB", "docsBpi2CodeDownloadStatusCode"), ("DOCS-BPI2-MIB", "docsBpi2CodeDownloadStatusString"), ("DOCS-BPI2-MIB", "docsBpi2CodeMfgOrgName"), ("DOCS-BPI2-MIB", "docsBpi2CodeMfgCodeAccessStart"), ("DOCS-BPI2-MIB", "docsBpi2CodeMfgCvcAccessStart"), ("DOCS-BPI2-MIB", "docsBpi2CodeCoSignerOrgName"), ("DOCS-BPI2-MIB", "docsBpi2CodeCoSignerCodeAccessStart"), ("DOCS-BPI2-MIB", "docsBpi2CodeCoSignerCvcAccessStart"), ("DOCS-BPI2-MIB", "docsBpi2CodeCvcUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2CodeDownloadGroup = docsBpi2CodeDownloadGroup.setStatus('current')
if mibBuilder.loadTexts: docsBpi2CodeDownloadGroup.setDescription('This collection of objects provide authenticated software\n\tdownload support.')
docsBpi2ObsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 6, 3, 2, 4)).setObjects(("DOCS-BPI2-MIB", "docsBpi2CmtsAuthCmGraceTime"), ("DOCS-BPI2-MIB", "docsBpi2CmtsTEKGraceTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsBpi2ObsoleteObjectsGroup = docsBpi2ObsoleteObjectsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: docsBpi2ObsoleteObjectsGroup.setDescription('This is a collection of obsolete BPI+ objects.')
mibBuilder.exportSymbols("DOCS-BPI2-MIB", docsBpi2CmtsProvisionedCmCertTrust=docsBpi2CmtsProvisionedCmCertTrust, docsBpi2CodeMfgOrgName=docsBpi2CodeMfgOrgName, docsBpi2CmtsAuthEntry=docsBpi2CmtsAuthEntry, docsBpi2CmGroup=docsBpi2CmGroup, docsBpi2CodeDownloadStatusString=docsBpi2CodeDownloadStatusString, docsBpi2CmtsProvisionedCmCertSource=docsBpi2CmtsProvisionedCmCertSource, docsBpi2Notification=docsBpi2Notification, docsBpi2CmAuthentInfos=docsBpi2CmAuthentInfos, docsBpi2CmIpMulticastSAMapState=docsBpi2CmIpMulticastSAMapState, docsBpi2CmtsIpMulticastIndex=docsBpi2CmtsIpMulticastIndex, docsBpi2CmtsIpMulticastMapEntry=docsBpi2CmtsIpMulticastMapEntry, docsBpi2CmtsGroup=docsBpi2CmtsGroup, docsBpi2CmtsTEKEntry=docsBpi2CmtsTEKEntry, docsBpi2CmtsKeyRequests=docsBpi2CmtsKeyRequests, docsBpi2CmtsAuthCmPublicKey=docsBpi2CmtsAuthCmPublicKey, docsBpi2CmtsObjects=docsBpi2CmtsObjects, docsBpi2CmAuthState=docsBpi2CmAuthState, docsBpi2CmtsIpMulticastSAId=docsBpi2CmtsIpMulticastSAId, docsBpi2CmCryptoSuiteDataAuthentAlg=docsBpi2CmCryptoSuiteDataAuthentAlg, docsBpi2CmIpMulticastSAId=docsBpi2CmIpMulticastSAId, docsBpi2MIBObjects=docsBpi2MIBObjects, PYSNMP_MODULE_ID=docsBpi2MIB, docsBpi2CmAuthWaitTimeout=docsBpi2CmAuthWaitTimeout, docsBpi2CmIpMulticastMapEntry=docsBpi2CmIpMulticastMapEntry, docsBpi2CmtsAuthCmExpiresOld=docsBpi2CmtsAuthCmExpiresOld, docsBpi2CmIpMulticastSAMapRequests=docsBpi2CmIpMulticastSAMapRequests, docsBpi2CmtsDefaultAuthLifetime=docsBpi2CmtsDefaultAuthLifetime, docsBpi2CmtsTEKDataEncryptAlg=docsBpi2CmtsTEKDataEncryptAlg, docsBpi2CmCertObjects=docsBpi2CmCertObjects, docsBpi2CmTEKState=docsBpi2CmTEKState, docsBpi2CmtsSAMapRequests=docsBpi2CmtsSAMapRequests, docsBpi2CmTEKGraceTime=docsBpi2CmTEKGraceTime, docsBpi2CmRekeyWaitTimeout=docsBpi2CmRekeyWaitTimeout, docsBpi2CmtsMulticastObjects=docsBpi2CmtsMulticastObjects, docsBpi2CmtsCACert=docsBpi2CmtsCACert, docsBpi2CmIpMulticastMapTable=docsBpi2CmIpMulticastMapTable, docsBpi2CmtsMulticastAuthSAId=docsBpi2CmtsMulticastAuthSAId, docsBpi2CmtsCACertTable=docsBpi2CmtsCACertTable, docsBpi2CmtsAuthBpkmCmCert=docsBpi2CmtsAuthBpkmCmCert, docsBpi2CmCryptoSuiteTable=docsBpi2CmCryptoSuiteTable, docsBpi2CmtsIpMulticastMapTable=docsBpi2CmtsIpMulticastMapTable, docsBpi2CmTEKInvalidErrorString=docsBpi2CmTEKInvalidErrorString, docsBpi2CmtsAuthRejects=docsBpi2CmtsAuthRejects, docsBpi2CmTEKSAType=docsBpi2CmTEKSAType, docsBpi2CmtsCACertSerialNumber=docsBpi2CmtsCACertSerialNumber, X509Certificate=X509Certificate, docsBpi2CmtsCACertTrust=docsBpi2CmtsCACertTrust, docsBpi2CmAuthReplies=docsBpi2CmAuthReplies, docsBpi2CmMulticastObjects=docsBpi2CmMulticastObjects, docsBpi2CmAuthRejectErrorCode=docsBpi2CmAuthRejectErrorCode, docsBpi2CmtsMulticastAuthCmMacAddress=docsBpi2CmtsMulticastAuthCmMacAddress, docsBpi2CmtsAuthPrimarySAId=docsBpi2CmtsAuthPrimarySAId, docsBpi2CmtsAuthCmReplies=docsBpi2CmtsAuthCmReplies, docsBpi2CmCryptoSuiteDataEncryptAlg=docsBpi2CmCryptoSuiteDataEncryptAlg, docsBpi2CmtsKeyRejectErrorCode=docsBpi2CmtsKeyRejectErrorCode, docsBpi2CodeCoSignerCvcAccessStart=docsBpi2CodeCoSignerCvcAccessStart, docsBpi2CmtsAuthReplies=docsBpi2CmtsAuthReplies, docsBpi2CmAuthExpiresOld=docsBpi2CmAuthExpiresOld, docsBpi2CmObjects=docsBpi2CmObjects, docsBpi2CmtsTEKExpiresOld=docsBpi2CmtsTEKExpiresOld, docsBpi2CmTEKExpiresOld=docsBpi2CmTEKExpiresOld, docsBpi2CmSAMapWaitTimeout=docsBpi2CmSAMapWaitTimeout, docsBpi2CmTEKKeyRejectErrorString=docsBpi2CmTEKKeyRejectErrorString, docsBpi2CmTEKDataEncryptAlg=docsBpi2CmTEKDataEncryptAlg, docsBpi2CmIpMulticastAddressType=docsBpi2CmIpMulticastAddressType, docsBpi2CmAuthReset=docsBpi2CmAuthReset, docsBpi2CmtsCACertSubject=docsBpi2CmtsCACertSubject, docsBpi2CmDeviceManufCert=docsBpi2CmDeviceManufCert, docsBpi2CmTEKAuthPends=docsBpi2CmTEKAuthPends, docsBpi2CmAuthInvalidErrorString=docsBpi2CmAuthInvalidErrorString, docsBpi2CmtsTEKKeySequenceNumber=docsBpi2CmtsTEKKeySequenceNumber, docsBpi2CmTEKKeyRejectErrorCode=docsBpi2CmTEKKeyRejectErrorCode, docsBpi2CmReauthWaitTimeout=docsBpi2CmReauthWaitTimeout, docsBpi2CmtsAuthCmLifetime=docsBpi2CmtsAuthCmLifetime, docsBpi2CmtsAuthCmRequests=docsBpi2CmtsAuthCmRequests, docsBpi2CmtsMulticastAuthControl=docsBpi2CmtsMulticastAuthControl, docsBpi2CmtsMulticastAuthTable=docsBpi2CmtsMulticastAuthTable, docsBpi2CmtsProvisionedCmCertTable=docsBpi2CmtsProvisionedCmCertTable, docsBpi2CmAuthExpiresNew=docsBpi2CmAuthExpiresNew, docsBpi2CmtsProvisionedCmCert=docsBpi2CmtsProvisionedCmCert, docsBpi2CmTEKSAId=docsBpi2CmTEKSAId, docsBpi2CmtsIpMulticastSAMapRejectErrorCode=docsBpi2CmtsIpMulticastSAMapRejectErrorCode, docsBpi2CmtsAuthCmExpiresNew=docsBpi2CmtsAuthCmExpiresNew, docsBpi2CmAuthRequests=docsBpi2CmAuthRequests, docsBpi2CmtsTEKTable=docsBpi2CmtsTEKTable, docsBpi2CmtsIpMulticastDataAuthentAlg=docsBpi2CmtsIpMulticastDataAuthentAlg, docsBpi2CmTEKInvalidErrorCode=docsBpi2CmTEKInvalidErrorCode, docsBpi2CmtsTEKReset=docsBpi2CmtsTEKReset, docsBpi2CmtsBaseTable=docsBpi2CmtsBaseTable, docsBpi2CmtsAuthTable=docsBpi2CmtsAuthTable, docsBpi2CmtsAuthentInfos=docsBpi2CmtsAuthentInfos, docsBpi2CmIpMulticastSAMapReplies=docsBpi2CmIpMulticastSAMapReplies, docsBpi2CmtsIpMulticastMaskType=docsBpi2CmtsIpMulticastMaskType, docsBpi2CmtsBaseEntry=docsBpi2CmtsBaseEntry, docsBpi2CmTEKKeyReplies=docsBpi2CmTEKKeyReplies, docsBpi2CmtsAuthRequests=docsBpi2CmtsAuthRequests, docsBpi2CmtsIpMulticastSAMapReplies=docsBpi2CmtsIpMulticastSAMapReplies, docsBpi2CmTEKTable=docsBpi2CmTEKTable, docsBpi2CmtsTEKSAType=docsBpi2CmtsTEKSAType, docsBpi2CmtsAuthCmInfos=docsBpi2CmtsAuthCmInfos, docsBpi2CmTEKExpiresNew=docsBpi2CmTEKExpiresNew, docsBpi2CmIpMulticastSAMapRejects=docsBpi2CmIpMulticastSAMapRejects, docsBpi2CmPrivacyEnable=docsBpi2CmPrivacyEnable, docsBpi2CmtsKeyReplies=docsBpi2CmtsKeyReplies, docsBpi2CodeDownloadControl=docsBpi2CodeDownloadControl, docsBpi2CmtsKeyRejects=docsBpi2CmtsKeyRejects, docsBpi2CmTEKDataAuthentAlg=docsBpi2CmTEKDataAuthentAlg, docsBpi2CodeCoSignerCodeAccessStart=docsBpi2CodeCoSignerCodeAccessStart, docsBpi2CmtsMulticastAuthEntry=docsBpi2CmtsMulticastAuthEntry, docsBpi2CmtsIpMulticastAddress=docsBpi2CmtsIpMulticastAddress, docsBpi2CmAuthInvalidErrorCode=docsBpi2CmAuthInvalidErrorCode, docsBpi2CmCryptoSuiteIndex=docsBpi2CmCryptoSuiteIndex, docsBpi2CmAuthRejects=docsBpi2CmAuthRejects, docsBpi2CmtsTEKSAId=docsBpi2CmtsTEKSAId, docsBpi2CmCryptoSuiteEntry=docsBpi2CmCryptoSuiteEntry, docsBpi2CmtsSAMapReplies=docsBpi2CmtsSAMapReplies, docsBpi2CmtsAuthCmInvalids=docsBpi2CmtsAuthCmInvalids, docsBpi2CmtsCheckCertValidityPeriods=docsBpi2CmtsCheckCertValidityPeriods, docsBpi2CmtsSAMapRejects=docsBpi2CmtsSAMapRejects, docsBpi2CmtsAuthBpkmCmCertValid=docsBpi2CmtsAuthBpkmCmCertValid, docsBpi2Groups=docsBpi2Groups, docsBpi2CmPublicKey=docsBpi2CmPublicKey, docsBpi2CmtsTEKInvalidErrorString=docsBpi2CmtsTEKInvalidErrorString, docsBpi2BasicCompliance=docsBpi2BasicCompliance, docsBpi2CmtsDefaultSelfSignedManufCertTrust=docsBpi2CmtsDefaultSelfSignedManufCertTrust, docsBpi2CmtsAuthInvalids=docsBpi2CmtsAuthInvalids, docsBpi2CmAuthRejectErrorString=docsBpi2CmAuthRejectErrorString, docsBpi2CodeMfgCodeAccessStart=docsBpi2CodeMfgCodeAccessStart, docsBpi2CmtsCertObjects=docsBpi2CmtsCertObjects, docsBpi2CodeDownloadGroup=docsBpi2CodeDownloadGroup, docsBpi2CmtsIpMulticastSAMapRequests=docsBpi2CmtsIpMulticastSAMapRequests, docsBpi2Conformance=docsBpi2Conformance, docsBpi2CmtsIpMulticastMapControl=docsBpi2CmtsIpMulticastMapControl, docsBpi2CodeDownloadStatusCode=docsBpi2CodeDownloadStatusCode, docsBpi2CmtsTEKInvalids=docsBpi2CmtsTEKInvalids, docsBpi2CmtsTEKInvalidErrorCode=docsBpi2CmtsTEKInvalidErrorCode, docsBpi2CodeMfgCvcAccessStart=docsBpi2CodeMfgCvcAccessStart, docsBpi2CmOpWaitTimeout=docsBpi2CmOpWaitTimeout, docsBpi2CmTEKInvalids=docsBpi2CmTEKInvalids, docsBpi2CmtsAuthInvalidErrorString=docsBpi2CmtsAuthInvalidErrorString, docsBpi2CmAuthRejectWaitTimeout=docsBpi2CmAuthRejectWaitTimeout, docsBpi2CmSAMapMaxRetries=docsBpi2CmSAMapMaxRetries, docsBpi2CmtsIpMulticastAddressType=docsBpi2CmtsIpMulticastAddressType, docsBpi2CmtsCACertStatus=docsBpi2CmtsCACertStatus, docsBpi2CmAuthKeySequenceNumber=docsBpi2CmAuthKeySequenceNumber, docsBpi2CmtsTEKDataAuthentAlg=docsBpi2CmtsTEKDataAuthentAlg, docsBpi2CmtsIpMulticastSAType=docsBpi2CmtsIpMulticastSAType, docsBpi2CmtsDefaultTEKLifetime=docsBpi2CmtsDefaultTEKLifetime, docsBpi2CmtsCACertEntry=docsBpi2CmtsCACertEntry, docsBpi2CmtsKeyRejectErrorString=docsBpi2CmtsKeyRejectErrorString, docsBpi2CmDeviceCmCert=docsBpi2CmDeviceCmCert, docsBpi2CodeCvcUpdate=docsBpi2CodeCvcUpdate, docsBpi2CmtsAuthCmGraceTime=docsBpi2CmtsAuthCmGraceTime, docsBpi2CmtsCACertIndex=docsBpi2CmtsCACertIndex, docsBpi2CmtsCACertSource=docsBpi2CmtsCACertSource, docsBpi2CmIpMulticastAddress=docsBpi2CmIpMulticastAddress, docsBpi2CmAuthInvalids=docsBpi2CmAuthInvalids, docsBpi2MIB=docsBpi2MIB, docsBpi2CmtsAuthCmMacAddress=docsBpi2CmtsAuthCmMacAddress, docsBpi2CmtsAuthRejectErrorCode=docsBpi2CmtsAuthRejectErrorCode, docsBpi2CmBaseEntry=docsBpi2CmBaseEntry, docsBpi2CmtsCACertIssuer=docsBpi2CmtsCACertIssuer, docsBpi2CmtsProvisionedCmCertEntry=docsBpi2CmtsProvisionedCmCertEntry, docsBpi2CmIpMulticastSAMapRejectErrorString=docsBpi2CmIpMulticastSAMapRejectErrorString, docsBpi2CmDeviceCertEntry=docsBpi2CmDeviceCertEntry, docsBpi2CmtsCACertThumbprint=docsBpi2CmtsCACertThumbprint, docsBpi2CmtsAuthInvalidErrorCode=docsBpi2CmtsAuthInvalidErrorCode, docsBpi2CmtsProvisionedCmCertStatus=docsBpi2CmtsProvisionedCmCertStatus, docsBpi2CmtsProvisionedCmCertMacAddress=docsBpi2CmtsProvisionedCmCertMacAddress, docsBpi2CmTEKEntry=docsBpi2CmTEKEntry, docsBpi2CmDeviceCertTable=docsBpi2CmDeviceCertTable, docsBpi2CmtsIpMulticastSAMapRejectErrorString=docsBpi2CmtsIpMulticastSAMapRejectErrorString, docsBpi2CmtsIpMulticastDataEncryptAlg=docsBpi2CmtsIpMulticastDataEncryptAlg, docsBpi2CmTEKKeySequenceNumber=docsBpi2CmTEKKeySequenceNumber, docsBpi2CmtsIpMulticastMask=docsBpi2CmtsIpMulticastMask, docsBpi2CmtsTEKGraceTime=docsBpi2CmtsTEKGraceTime, docsBpi2CmAuthGraceTime=docsBpi2CmAuthGraceTime, docsBpi2CmTEKKeyRequests=docsBpi2CmTEKKeyRequests, docsBpi2CmIpMulticastIndex=docsBpi2CmIpMulticastIndex, docsBpi2CmtsIpMulticastSAMapRejects=docsBpi2CmtsIpMulticastSAMapRejects, docsBpi2Compliances=docsBpi2Compliances, docsBpi2CmIpMulticastSAMapRejectErrorCode=docsBpi2CmIpMulticastSAMapRejectErrorCode, docsBpi2CmtsTEKLifetime=docsBpi2CmtsTEKLifetime, docsBpi2CmTEKKeyRejects=docsBpi2CmTEKKeyRejects, docsBpi2CmtsAuthCmKeySequenceNumber=docsBpi2CmtsAuthCmKeySequenceNumber, docsBpi2ObsoleteObjectsGroup=docsBpi2ObsoleteObjectsGroup, docsBpi2CmtsTEKExpiresNew=docsBpi2CmtsTEKExpiresNew, docsBpi2CmtsAuthCmBpiVersion=docsBpi2CmtsAuthCmBpiVersion, docsBpi2CodeCoSignerOrgName=docsBpi2CodeCoSignerOrgName, docsBpi2CmtsAuthRejectErrorString=docsBpi2CmtsAuthRejectErrorString, docsBpi2CmtsAuthCmRejects=docsBpi2CmtsAuthCmRejects, docsBpi2CmtsAuthCmReset=docsBpi2CmtsAuthCmReset, docsBpi2CmBaseTable=docsBpi2CmBaseTable)
