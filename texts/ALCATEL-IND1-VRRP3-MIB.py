#
# PySNMP MIB module ALCATEL-IND1-VRRP3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-VRRP3-MIB
# Produced by pysmi-1.1.8 at Fri Jan 14 00:01:26 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
softentIND1Vrrp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Vrrp")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, iso, ObjectIdentity, ModuleIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, MibIdentifier, IpAddress, Gauge32, Bits, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "ObjectIdentity", "ModuleIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "MibIdentifier", "IpAddress", "Gauge32", "Bits", "TimeTicks", "Counter64")
TextualConvention, DisplayString, MacAddress, RowStatus, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "RowStatus", "TimeStamp", "TruthValue")
VrId, = mibBuilder.importSymbols("VRRP-MIB", "VrId")
alcatelIND1VRRP3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2))
alcatelIND1VRRP3MIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VRRP3MIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1VRRP3MIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VRRP3MIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VRRP3MIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VRRP3MIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Proprietary VRRP MIB definitions for simultaneous\n             support of IPv4 and IPv6 protocols.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n               or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2007 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alaVrrp3Operations = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1))
alaVrrp3Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2))
alaVrrp3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3))
alaVrrp3NotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrrp3NotificationCntl.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3NotificationCntl.setDescription("Indicates whether the VRRP-enabled router will generate\n         SNMP traps for events defined in this MIB. 'Enabled'\n         results in SNMP traps; 'disabled', no traps are sent.")
alaVrrp3OperTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2), )
if mibBuilder.loadTexts: alaVrrp3OperTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperTable.setDescription("Unified Operations table for a VRRP router which\n         consists of a sequence (i.e., one or more conceptual\n         rows) of 'alaVrrp3OperEntry' items.")
alaVrrp3OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperIpVersion"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaVrrp3OperEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperEntry.setDescription("An entry in the alaVrrp3OperTable containing the\n         operational characteristics of a virtual router. On a\n         VRRP router, a given virtual router is identified by a\n         combination of the IP version, VRID, and ifIndex.\n\n         Note that rows in this table can be distinguished on a\n         Multi-stacked device running both VRRP over IPv4 and\n         IPv6 interfaces.\n\n         Rows in the table cannot be modified unless the value\n         of 'alaVrrp3OperAdminState' is 'disabled' and the\n         'alaVrrp3OperState' has transitioned to\n         'initialize'")
alaVrrp3OperIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: alaVrrp3OperIpVersion.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperIpVersion.setDescription('This object contains the IP version on which this VRRP\n         instance is running.')
alaVrrp3OperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 2), VrId())
if mibBuilder.loadTexts: alaVrrp3OperVrId.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperVrId.setDescription('This object contains the Virtual Router Identifier\n         (VRID).')
alaVrrp3OperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperVirtualMacAddr.setDescription("The virtual MAC address of the virtual router.\n         Although this object can be derived from the\n         'alaVrrp3OperVrId' object, it is defined so that it\n         is easily obtainable by a management application and\n         can be included in VRRP-related SNMP traps.")
alaVrrp3OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperState.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperState.setDescription("The current state of the virtual router. This object\n         has three defined values:\n\n         - `initialize', which indicates that the\n           virtual router is waiting for a startup event.\n\n         - `backup', which indicates the virtual router is\n           monitoring the availability of the master router.\n\n         - `master', which indicates that the virtual router\n           is forwarding packets for IP addresses that are\n           associated with this router.\n\n         Setting the `alaVrrp3OperAdminState' object (below)\n         Initiates transitions in the value of this object.")
alaVrrp3OperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperAdminState.setDescription("This object will enable/disable the virtual router\n         function. Setting the value to `up', will transition\n         the state of the virtual router from `initialize' to\n         `backup' or `master', depending on the value of\n         `alaVrrp3OperPriority'.\n\n         Setting the value to `down', will transition the\n         router from `master' or `backup' to `initialize'. State\n         transitions may not be immediate; they sometimes depend\n         on other factors, such as the interface (IF) state.\n\n         The `alaVrrp3OperAdminState' object must be set to\n         `down' prior to modifying the other read-create objects\n         in the conceptual row. The value of the\n         alaVrrp3OperRowStatus' object (below) must be\n         `active', signifying that the conceptual row is valid\n         (i.e., the objects are correctly set), in order for\n         this object to be set to `up'.")
alaVrrp3OperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperPriority.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperPriority.setDescription("This object specifies the priority to be used for the\n         virtual router master election process. Higher values\n         imply higher priority.\n\n         A priority of '0', although not settable, is sent by\n         the master router to indicate that this router has\n         ceased to participate in VRRP and a backup virtual\n         router should transition to become a new master.\n\n         A priority of 255 is used for the router that owns the\n         associated IP address(es).")
alaVrrp3OperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vrrpv2", 1), ("vrrpv3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperVersion.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperVersion.setDescription('This object contains the VRRP version this VRRP\n         instance is running.')
alaVrrp3OperIpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperIpAddrCount.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperIpAddrCount.setDescription('The number of IP addresses associated with this\n         virtual router. This number is equal to the number\n         of rows in the alaVrrp3AssoIpAddrTable that\n         correspond to a given combination of IP version,\n         VRID, and ifIndex.')
alaVrrp3OperMasterIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperMasterIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperMasterIpAddrType.setDescription('This specifies the type of\n         alaVrrp3OperMasterIpAddr in this row.')
alaVrrp3OperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperMasterIpAddr.setDescription("The master router's real (primary for vrrp over IPv4)\n         IP address. This is the IP address listed as the\n         source in the advertisement last received by this\n         virtual router.  For IPv6, a link local address.")
alaVrrp3OperPrimaryIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperPrimaryIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperPrimaryIpAddrType.setDescription('This specifies the the type of\n         alaVrrp3OperPrimaryIpAddr in this row.')
alaVrrp3OperPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 12), InetAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperPrimaryIpAddr.setDescription("For VRRP over IPv6 this is the link local address\n         for a given ifIndex.  For VRRP over IPv4, in the\n         case where there is more than one IP address for\n         a given `ifIndex', this object is used to\n         specify the IP address that will become the\n         alaVrrp3OperMasterIpAddr', should the virtual router\n         transition from backup to master.")
alaVrrp3OperAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(100)).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperAdvInterval.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperAdvInterval.setDescription('The time interval, in centiseconds, between sending\n         advertisement messages. Only the master router sends\n         VRRP advertisements.')
alaVrrp3OperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperPreemptMode.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperPreemptMode.setDescription('Controls whether a higher priority virtual router will\n         preempt a lower priority master.')
alaVrrp3OperAcceptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperAcceptMode.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperAcceptMode.setDescription("Controls whether a virtual router in the master state\n         will accept packets addressed to the address owner's\n         IPv6 address as its own it it is not the IP address\n         owner.\n         This is required only for rows indicating VRRP over IPv6.\n         This object can be sparse and should not be implemented\n         for rows indicating VRRP for Ipv4.")
alaVrrp3OperUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3OperUpTime.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperUpTime.setDescription("This is the value of the `sysUpTime' object when this\n         virtual router (i.e., the `alaVrrp3OperState') transitioned\n         out of `initialized'.")
alaVrrp3OperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 2, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3OperRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperRowStatus.setDescription("The row status variable, used in accordance to\n         installation and removal conventions for conceptual\n         rows. The rowstatus of a currently active row in the\n         alaVrrp3OperTable is constrained by the operational\n         state of the corresponding virtual router.\n         When `alaVrrp3OperRowStatus' is set to active(1), no\n         other objects in the conceptual row, with the exception\n         of `alaVrrp3OperAdminState', can be modified. Prior\n         to setting the `alaVrrp3OperRowStatus' object from\n         `active' to a different value, the\n         `alaVrrp3OperAdminState' object must be set to\n         `down' and the `alaVrrp3OperState' object be transitioned\n         to `initialize'.\n\n         To create a row in this table, a manager sets this\n         object to either createAndGo(4) or createAndWait(5).\n         Until instances of all corresponding columns are\n         appropriately configured, the value of the\n         corresponding instance of the `alaVrrp3OperRowStatus'\n         column will be read as notReady(3).\n         In particular, a newly created row cannot be made\n         active(1) until (minimally) the corresponding instance\n         of `alaVrrp3OperVrId' has been set and there is at\n         least one active row in the `alaVrrp3AssoIpAddrTable'\n         defining an associated IP address for the virtual\n         router.")
alaVrrp3AssoIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 3), )
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrTable.setDescription('The table of addresses associated with this\n         virtual router.')
alaVrrp3AssoIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperIpVersion"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVrId"), (0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3AssoIpAddrType"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3AssoIpAddr"))
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrEntry.setDescription("An entry in the table contains an IP address that is\n         associated with a virtual router. The number of rows\n         for a given IP version, VrId, and ifIndex will equal\n         the number of IP addresses associated (e.g., backed\n         up) by the virtual router (equivalent to\n         'alaVrrp3OperIpAddrCount').\n\n         Rows in the table cannot be modified unless the value\n         of `alaVrrp3OperAdminState' is `disabled' and the\n         `alaVrrp3OperState' has transitioned to`initialize'.")
alaVrrp3AssoIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrType.setDescription('The IP addresses type of alaVrrp3AssoIpAddr in this\n         row.')
alaVrrp3AssoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: alaVrrp3AssoIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoIpAddr.setDescription('The assigned IP addresses that a virtual router is\n         responsible for backing up.')
alaVrrp3AssoIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoIpAddrRowStatus.setDescription('The row status variable, used according to\n         installation and removal conventions for conceptual\n         rows. Setting this object to active(1) or\n         createAndGo(4) results in the addition of an associated\n         address for a virtual router.\n\n         Destroying the entry or setting it to notInService(2)\n         removes the associated address from the virtual router.\n         The use of other values is implementation-dependent.')
alaVrrp3RouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3RouterChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3RouterChecksumErrors.setDescription('The total number of VRRP packets received with an\n         invalid VRRP checksum value.')
alaVrrp3RouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3RouterVersionErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3RouterVersionErrors.setDescription('The total number of VRRP packets received with an\n         unknown or unsupported version number.')
alaVrrp3RouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3RouterVrIdErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3RouterVrIdErrors.setDescription('The total number of VRRP packets received with an\n         invalid VRID for this virtual router.')
alaVrrp3RouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4), )
if mibBuilder.loadTexts: alaVrrp3RouterStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3RouterStatsTable.setDescription('Table of virtual router statistics.')
alaVrrp3RouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperIpVersion"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: alaVrrp3RouterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3RouterStatsEntry.setDescription('An entry in the table, containing statistics\n         information about a given virtual router.')
alaVrrp3StatsBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsBecomeMaster.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsBecomeMaster.setDescription("The total number of times that this virtual router's\n         state has transitioned to MASTER.")
alaVrrp3StatsAdvertiseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsAdvertiseRcvd.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsAdvertiseRcvd.setDescription('The total number of VRRP advertisements received by\n         this virtual router.')
alaVrrp3StatsAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsAdvIntervalErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsAdvIntervalErrors.setDescription('The total number of VRRP advertisement packets\n         received for which the advertisement interval is\n         different than the one configured for the local virtual\n         router.')
alaVrrp3StatsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsIpTtlErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsIpTtlErrors.setDescription('The total number of VRRP packets received by the\n         virtual router with IP TTL (Time-To-Live) not equal to\n         255. It also indicates the number of VRRPv3 packets\n         received by the virtual router with IPv6 hop limit not\n         equal to 255.')
alaVrrp3StatsPriZeroPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsPriZeroPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsPriZeroPktsRcvd.setDescription("The total number of VRRP packets received by the\n         virtual router with a priority of '0'.")
alaVrrp3StatsPriZeroPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsPriZeroPktsSent.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsPriZeroPktsSent.setDescription("The total number of VRRP packets sent by the virtual\n         router with a priority of '0'.")
alaVrrp3StatsInvldTypePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsInvldTypePktsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsInvldTypePktsRcvd.setDescription("The number of VRRP packets received by the virtual\n         router with an invalid value in the 'type' field.")
alaVrrp3StatsAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsAddressListErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsAddressListErrors.setDescription('The total number of packets received for which the\n         address list does not match the locally configured list\n         for the virtual router.')
alaVrrp3StatsInvldAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsInvldAuthType.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsInvldAuthType.setDescription("The total number of packets received with 'Auth Type'\n         not equal to Authentication Type 0, No Authentication.\n         This is required only for rows indicating VRRP over IPv4.\n         This object can be sparse and should not be implemented\n         for rows indicating VRRP for Ipv6.")
alaVrrp3StatsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3StatsPacketLengthErrors.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsPacketLengthErrors.setDescription('The total number of packets received with a packet\n         length less than the length of the VRRP header.')
alaVrrp3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 0))
alaVrrp3TrapNewMasterReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("priority", 0), ("preempted", 1), ("masterNoResponse", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaVrrp3TrapNewMasterReason.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrapNewMasterReason.setDescription('This indicates the reason for NewMaster trap.\n         Used by alaVrrp3TrapNewMaster trap.')
alaVrrp3TrapProtoErrReason = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("hopLimitError", 0), ("versionError", 1), ("checksumError", 2), ("vridError", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaVrrp3TrapProtoErrReason.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrapProtoErrReason.setDescription('This indicates the reason for protocol error trap.\n         Used by alaVrrp3TrapProtoError trap.')
alaVrrp3TrapNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 0, 1)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperMasterIpAddrType"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperMasterIpAddr"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapNewMasterReason"))
if mibBuilder.loadTexts: alaVrrp3TrapNewMaster.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrapNewMaster.setDescription("The newMaster trap indicates that the sending agent\n         has transitioned to 'Master' state.")
alaVrrp3TrapProtoError = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 0, 2)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapProtoErrReason"))
if mibBuilder.loadTexts: alaVrrp3TrapProtoError.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrapProtoError.setDescription('The error trap indicates that the sending agent has\n         encountered the protocol error indicated by\n         ErrorReason.')
alaVrrp3MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 1))
alaVrrp3MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 2))
alaVrrp3MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 1, 1)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperGroup"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsGroup"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapInfoGroup"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3MIBCompliance = alaVrrp3MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3MIBCompliance.setDescription('The compliance statement for switches with Alcatel VRRP and\n        implementing ALCATEL-IND1-VRRP3-MIB.')
alaVrrp3OperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 2, 1)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3NotificationCntl"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVirtualMacAddr"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperState"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperAdminState"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperPriority"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVersion"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperIpAddrCount"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperMasterIpAddrType"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperMasterIpAddr"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperPrimaryIpAddrType"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperPrimaryIpAddr"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperAdvInterval"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperPreemptMode"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperAcceptMode"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperUpTime"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperRowStatus"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3AssoIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3OperGroup = alaVrrp3OperGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperGroup.setDescription('A collection of objects to support management of Alcatel VRRP.')
alaVrrp3StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 2, 2)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3RouterChecksumErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3RouterVersionErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3RouterVrIdErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsBecomeMaster"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsAdvertiseRcvd"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsAdvIntervalErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsPriZeroPktsRcvd"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsPriZeroPktsSent"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsInvldTypePktsRcvd"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsInvldAuthType"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsIpTtlErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsAddressListErrors"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3StatsPacketLengthErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3StatsGroup = alaVrrp3StatsGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3StatsGroup.setDescription('A collection of objects to support management of Alcatel VRRP.')
alaVrrp3TrapInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 2, 3)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapNewMasterReason"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapProtoErrReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3TrapInfoGroup = alaVrrp3TrapInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrapInfoGroup.setDescription('A collection of objects to support management of Alcatel VRRP.')
alaVrrp3NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 2, 3, 2, 4)).setObjects(("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapNewMaster"), ("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3TrapProtoError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3NotificationsGroup = alaVrrp3NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3NotificationsGroup.setDescription('A collection of objects to support management of Alcatel VRRP.')
mibBuilder.exportSymbols("ALCATEL-IND1-VRRP3-MIB", alaVrrp3AssoIpAddr=alaVrrp3AssoIpAddr, alaVrrp3StatsAdvertiseRcvd=alaVrrp3StatsAdvertiseRcvd, alaVrrp3TrapInfoGroup=alaVrrp3TrapInfoGroup, alaVrrp3OperPreemptMode=alaVrrp3OperPreemptMode, alaVrrp3OperVersion=alaVrrp3OperVersion, alaVrrp3StatsGroup=alaVrrp3StatsGroup, PYSNMP_MODULE_ID=alcatelIND1VRRP3MIB, alaVrrp3OperPrimaryIpAddr=alaVrrp3OperPrimaryIpAddr, alaVrrp3RouterVersionErrors=alaVrrp3RouterVersionErrors, alaVrrp3StatsPacketLengthErrors=alaVrrp3StatsPacketLengthErrors, alaVrrp3OperVirtualMacAddr=alaVrrp3OperVirtualMacAddr, alaVrrp3OperAdminState=alaVrrp3OperAdminState, alaVrrp3StatsPriZeroPktsRcvd=alaVrrp3StatsPriZeroPktsRcvd, alaVrrp3StatsIpTtlErrors=alaVrrp3StatsIpTtlErrors, alaVrrp3StatsInvldTypePktsRcvd=alaVrrp3StatsInvldTypePktsRcvd, alaVrrp3OperIpVersion=alaVrrp3OperIpVersion, alcatelIND1VRRP3MIB=alcatelIND1VRRP3MIB, alaVrrp3OperIpAddrCount=alaVrrp3OperIpAddrCount, alaVrrp3MIBCompliances=alaVrrp3MIBCompliances, alaVrrp3AssoIpAddrType=alaVrrp3AssoIpAddrType, alaVrrp3RouterVrIdErrors=alaVrrp3RouterVrIdErrors, alaVrrp3AssoIpAddrEntry=alaVrrp3AssoIpAddrEntry, alaVrrp3OperPrimaryIpAddrType=alaVrrp3OperPrimaryIpAddrType, alaVrrp3NotificationCntl=alaVrrp3NotificationCntl, alaVrrp3StatsAdvIntervalErrors=alaVrrp3StatsAdvIntervalErrors, alaVrrp3AssoIpAddrTable=alaVrrp3AssoIpAddrTable, alaVrrp3Conformance=alaVrrp3Conformance, alaVrrp3Operations=alaVrrp3Operations, alaVrrp3OperEntry=alaVrrp3OperEntry, alaVrrp3OperPriority=alaVrrp3OperPriority, alaVrrp3OperVrId=alaVrrp3OperVrId, alaVrrp3RouterStatsEntry=alaVrrp3RouterStatsEntry, alaVrrp3OperMasterIpAddr=alaVrrp3OperMasterIpAddr, alaVrrp3OperUpTime=alaVrrp3OperUpTime, alaVrrp3StatsAddressListErrors=alaVrrp3StatsAddressListErrors, alaVrrp3StatsPriZeroPktsSent=alaVrrp3StatsPriZeroPktsSent, alaVrrp3StatsBecomeMaster=alaVrrp3StatsBecomeMaster, alaVrrp3RouterChecksumErrors=alaVrrp3RouterChecksumErrors, alaVrrp3TrapNewMaster=alaVrrp3TrapNewMaster, alaVrrp3RouterStatsTable=alaVrrp3RouterStatsTable, alaVrrp3OperRowStatus=alaVrrp3OperRowStatus, alaVrrp3TrapNewMasterReason=alaVrrp3TrapNewMasterReason, alaVrrp3OperAcceptMode=alaVrrp3OperAcceptMode, alaVrrp3TrapProtoError=alaVrrp3TrapProtoError, alaVrrp3OperAdvInterval=alaVrrp3OperAdvInterval, alaVrrp3Statistics=alaVrrp3Statistics, alaVrrp3OperState=alaVrrp3OperState, alaVrrp3AssoIpAddrRowStatus=alaVrrp3AssoIpAddrRowStatus, alaVrrp3NotificationsGroup=alaVrrp3NotificationsGroup, alaVrrp3OperTable=alaVrrp3OperTable, alaVrrp3OperMasterIpAddrType=alaVrrp3OperMasterIpAddrType, alaVrrp3StatsInvldAuthType=alaVrrp3StatsInvldAuthType, alaVrrp3Notifications=alaVrrp3Notifications, alaVrrp3MIBCompliance=alaVrrp3MIBCompliance, alaVrrp3MIBGroups=alaVrrp3MIBGroups, alaVrrp3TrapProtoErrReason=alaVrrp3TrapProtoErrReason, alaVrrp3OperGroup=alaVrrp3OperGroup)
