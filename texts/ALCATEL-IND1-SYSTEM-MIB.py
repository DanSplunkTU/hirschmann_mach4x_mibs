#
# PySNMP MIB module ALCATEL-IND1-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-SYSTEM-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:12 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
hardentIND1System, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1System")
virtualChassisOperChasId, VirtualOperChassisId = mibBuilder.importSymbols("ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "virtualChassisOperChasId", "VirtualOperChassisId")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, Gauge32, ObjectIdentity, Counter64, Bits, Counter32, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Gauge32", "ObjectIdentity", "Counter64", "Bits", "Counter32", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
alcatelIND1SystemMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1))
alcatelIND1SystemMIB.setRevisions(('2011-01-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1SystemMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setLastUpdated('200709040000Z')
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1SystemMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Proprietary System Subsystem.\n\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1SystemMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1))
if mibBuilder.loadTexts: alcatelIND1SystemMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBObjects.setDescription('Branch For BOP Proprietary System\n            Subsystem Managed Objects.')
alcatelIND1SystemMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2))
if mibBuilder.loadTexts: alcatelIND1SystemMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBConformance.setDescription('Branch For Alcatel IND BOP Proprietary System\n            Subsystem Conformance Information.')
alcatelIND1SystemMIBTrapObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 3))
if mibBuilder.loadTexts: alcatelIND1SystemMIBTrapObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBTrapObjects.setDescription('Branch For Alcatel IND BOP Proprietary System\n            Subsystem Trap Objects.')
alcatelIND1SystemMIBTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 4))
if mibBuilder.loadTexts: alcatelIND1SystemMIBTraps.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBTraps.setDescription('Branch For Alcatel IND BOP Proprietary System\n            Subsystem Trap Information.')
alcatelIND1SystemMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1SystemMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBGroups.setDescription('Branch For Alcatel IND BOP Proprietary System\n            Subsystem Units Of Conformance.')
alcatelIND1SystemMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1SystemMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBCompliances.setDescription('Branch For Alcatel IND BOP Proprietary System\n            Subsystem Compliance Statements.')
class SystemFileType(TextualConvention, Integer32):
    description = 'a small positive integer used to identify file types'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("file", 1), ("directory", 2), ("undefined", 3), ("tarArchive", 4))

class SwitchLoggingIndex(TextualConvention, Integer32):
    description = 'a small positive integer used to identify switch logging outputs'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("console", 1), ("flash", 2), ("socket", 3), ("ipaddr", 4))

class AppIdIndex(TextualConvention, Integer32):
    description = "a small positive integer used to index into tables arranged\n                        by Application ID's."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 254)

class Enable(TextualConvention, Integer32):
    description = 'an enumerated value used to indicate whether an entity is\n                        enabled(1), or disabled(2)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class FileSystemIndex(TextualConvention, Integer32):
    description = 'an enumerated value which provides an indication of the\n                        file system.  The value is a small positive integer indicating\n                        the type of the file system'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("flash", 1), ("uflash", 2))

class SeverityLevel(TextualConvention, Integer32):
    description = 'an enumerated value which provides an indication of the\n                        severity level used for logging and debug purposes.  The value is\n                        a small integer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("severityLevelOff", 0), ("severityLevelAlarm", 1), ("severityLevelError", 2), ("severityLevelAlert", 3), ("severityLevelWarn", 4), ("severityLevelInfo", 5), ("severityLevelDbg1", 6), ("severityLevelDbg2", 7), ("severityLevelDbg3", 8))

class SysLogFacilityId(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("uucp", 0), ("user", 1), ("system", 2), ("syslog", 3), ("secAuth2", 4), ("secAuth1", 5), ("ntp", 6), ("netNews", 7), ("mail", 8), ("lptr", 9), ("logAudit", 10), ("logAlert", 11), ("local7", 12), ("local6", 13), ("local5", 14), ("local4", 15), ("local3", 16), ("local2", 17), ("local1", 18), ("local0", 19), ("kernel", 20), ("ftp", 21), ("clock2", 22), ("clock1", 23))

class CommandPercentComplete(TextualConvention, Integer32):
    description = 'An indication of percent complete for a command.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class VrfId(TextualConvention, Integer32):
    description = 'Switch Log Vrf ID'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

class AgeLimit(TextualConvention, Integer32):
    description = 'Time Limit for switch log hash table entries'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

systemMicrocode = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1))
systemBootParams = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2))
systemHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3))
systemFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4))
systemServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5))
systemSwitchLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6))
systemDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7))
systemBlueToothServices = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8))
systemFips = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9))
systemVcHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10))
systemMicrocodePackageTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: systemMicrocodePackageTable.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageTable.setDescription('the microcode package table')
systemMicrocodePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDirectoryIndex"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDirectory"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageIndex"))
if mibBuilder.loadTexts: systemMicrocodePackageEntry.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageEntry.setDescription('a row in the microcode package table')
systemMicrocodePackageDirectoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodePackageDirectoryIndex.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageDirectoryIndex.setDescription('The package index for directories. Values 1-4 are pre-defined\n                        as: loaded(1), certified(2), working(3), issu(4). Values 5+\n\t\t\tare user working directories in /flash assigned by the system.\n\t\t\tValues 5+ remain associated with a directory until reboot,\n                        takeover, the directory no longer contains valid images or\n                        the directory no longer exists.')
systemMicrocodePackageDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 108)))
if mibBuilder.loadTexts: systemMicrocodePackageDirectory.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageDirectory.setDescription('The directory name under flash where the microcode package is found.\n                        Directories with names longer than 108 characters will be skipped.')
systemMicrocodePackageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodePackageIndex.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageIndex.setDescription('The index to the package sub table in the microcode table')
systemMicrocodePackageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageVersion.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageVersion.setDescription('The version of the microcode package (Fos.img, Fbase.img, etc.)')
systemMicrocodePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageName.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageName.setDescription('The name of the microcode package')
systemMicrocodePackageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageDescription.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageDescription.setDescription('The description of the microcode package')
systemMicrocodePackageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("ok", 2), ("inuse", 3))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageStatus.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageStatus.setDescription('The status of the microcode package')
systemMicrocodePackageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodePackageSize.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodePackageSize.setDescription('The size of the microcode package')
systemMicrocodeLoadedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: systemMicrocodeLoadedTable.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedTable.setDescription('the microcode package table')
systemMicrocodeLoadedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedIndex"))
if mibBuilder.loadTexts: systemMicrocodeLoadedEntry.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedEntry.setDescription('a row in the microcode package table')
systemMicrocodeLoadedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: systemMicrocodeLoadedIndex.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedIndex.setDescription('The index to the loaded package in microcode table')
systemMicrocodeLoadedDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 108))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedDirectory.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedDirectory.setDescription('The directory name under flash where the microcode package is found.\n                        Directories with names longer than 108 characters will be skipped.')
systemMicrocodeLoadedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedVersion.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedVersion.setDescription('The version of the microcode package (Fos.img, Fbase.img, etc.)')
systemMicrocodeLoadedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedName.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedName.setDescription('The name of the microcode package')
systemMicrocodeLoadedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedDescription.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedDescription.setDescription('The description of the microcode package')
systemMicrocodeLoadedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMicrocodeLoadedSize.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeLoadedSize.setDescription('The size of the microcode package')
systemBootNetwork = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetwork.setStatus('current')
if mibBuilder.loadTexts: systemBootNetwork.setDescription('this object is the base IP address of the EMP for this CMM')
systemBootNetworkGateway = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetworkGateway.setStatus('current')
if mibBuilder.loadTexts: systemBootNetworkGateway.setDescription('this object is the gateway of the EMP for this CMM')
systemBootNetworkNetmask = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemBootNetworkNetmask.setStatus('current')
if mibBuilder.loadTexts: systemBootNetworkNetmask.setDescription('This is the Netmask of the EMP that is used when this\n                        CMM boots.')
systemHardwareFlashMfg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("sandisk", 8), ("sst", 9), ("spansion", 10), ("wintec", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFlashMfg.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFlashMfg.setDescription('This object identifies the manufacturer of the Flash memory\n                        used on this product.  toshiba(7) is for hawk only. The reason 7 is used\n                        is because 5 is already used for micron and 6 is for kingston.\n                        toshiba, sandisk, and sst are compact flashes for the hawk only.')
systemHardwareFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFlashSize.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFlashSize.setDescription('This object identifies the size of the flash memory available\n                        on this CMM.  It is the total flash hardware memory and does\n                        not indicate how much of the memory is free, used, etc.')
systemHardwareMemoryMfg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("agilent", 8), ("dataram", 10), ("interward", 11), ("notreadable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMemoryMfg.setStatus('current')
if mibBuilder.loadTexts: systemHardwareMemoryMfg.setDescription('This object identifies the manufacturer of the RAM memory\n                        used on this CMM.')
systemHardwareMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMemorySize.setStatus('current')
if mibBuilder.loadTexts: systemHardwareMemorySize.setDescription('This object identifies the size of the RAM memory available on\n                        this CMM.  It is the total RAM hardware memory and does not\n                        indicate how much of the memory is free, used, etc.')
systemHardwareNVRAMBatteryLow = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareNVRAMBatteryLow.setStatus('current')
if mibBuilder.loadTexts: systemHardwareNVRAMBatteryLow.setDescription('This object identifies the whether the NVRAM battery is low.\n                         true(1), false(2)')
systemHardwareBootCpuType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("sparc380", 2), ("sparcV9", 3), ("ppc", 4), ("ppc8540", 5), ("ppc8572", 6), ("arm", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBootCpuType.setStatus('current')
if mibBuilder.loadTexts: systemHardwareBootCpuType.setDescription('Indicates the manufacturer and model number of the CPU.  Currently,\n                only two types of processors are enumerated.')
systemHardwareJumperInterruptBoot = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 7), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperInterruptBoot.setStatus('current')
if mibBuilder.loadTexts: systemHardwareJumperInterruptBoot.setDescription('This object identifies whether the Interrupt Boot Jumper on this\n                        CMM is set: True(1), False(2)')
systemHardwareJumperForceUartDefaults = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperForceUartDefaults.setStatus('current')
if mibBuilder.loadTexts: systemHardwareJumperForceUartDefaults.setDescription('This object identifies whether the Force Uart Defaults Jumper on this\n                        CMM is set: True(1), False(2)')
systemHardwareJumperRunExtendedMemoryDiagnostics = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 9), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperRunExtendedMemoryDiagnostics.setStatus('current')
if mibBuilder.loadTexts: systemHardwareJumperRunExtendedMemoryDiagnostics.setDescription('This object identifies whether the Run Extended Memory\n                        Diagnostics Jumper on this CMM is set: True(1), False(2)')
systemHardwareJumperSpare = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareJumperSpare.setStatus('current')
if mibBuilder.loadTexts: systemHardwareJumperSpare.setDescription('This object identifies whether the Spare Jumper on this\n                        CMM is set: True(1), False(2)')
systemHardwareFpgaVersionTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11), )
if mibBuilder.loadTexts: systemHardwareFpgaVersionTable.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFpgaVersionTable.setDescription('This table contains the FPGA version for each FPGA on this CMM')
systemHardwareFpgaVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersionIndex"))
if mibBuilder.loadTexts: systemHardwareFpgaVersionEntry.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFpgaVersionEntry.setDescription('a row in the systemHardwareFpgaVersionTable')
systemHardwareFpgaVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFpgaVersionIndex.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFpgaVersionIndex.setDescription('This is the index to one of the FPGA versions on this CMM')
systemHardwareFpgaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareFpgaVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareFpgaVersion.setDescription('This is the major version of one of the FPGA devices on this CMM.\n                         refer to the systemHardwareMinorFpgaVersion for the minor number.')
systemHardwareBootRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareBootRomVersion.setDescription('A string that identifies the boot rom version')
systemHardwareBackupMiniBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareBackupMiniBootVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareBackupMiniBootVersion.setDescription('A string that identifies the backup miniboot version.')
systemHardwareDefaultMiniBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareDefaultMiniBootVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareDefaultMiniBootVersion.setDescription('A string that identifies the default miniboot version.')
systemHardwareMinorFpgaVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareMinorFpgaVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareMinorFpgaVersion.setDescription('A string that identifies the minor FPGA version. Refer to the\n                 systemHardwareFpgaVersion for the major FPGA version number.')
systemHardwareCpldVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareCpldVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareCpldVersion.setDescription('A string that identifies the CPLD version.')
systemHardwareUbootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareUbootVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareUbootVersion.setDescription('A string that identifies the Uboot version.')
systemHardwareProdRegId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareProdRegId.setStatus('current')
if mibBuilder.loadTexts: systemHardwareProdRegId.setDescription('A string that identifies the product ID register')
systemHardwareRevisionRegister = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareRevisionRegister.setStatus('current')
if mibBuilder.loadTexts: systemHardwareRevisionRegister.setDescription('A string that identifies the hardware revision register')
systemHardwareXfpId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareXfpId.setStatus('current')
if mibBuilder.loadTexts: systemHardwareXfpId.setDescription('A string that identifies the XFP ID')
systemHardwareUbootMinibootVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 3, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemHardwareUbootMinibootVersion.setStatus('current')
if mibBuilder.loadTexts: systemHardwareUbootMinibootVersion.setDescription('A string that identifies the Uboot-miniboot version.')
systemServicesDate = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesDate.setStatus('current')
if mibBuilder.loadTexts: systemServicesDate.setDescription('This object contains the current System Date in the\n                        following format: MM/DD/YYYY')
systemServicesTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTime.setStatus('current')
if mibBuilder.loadTexts: systemServicesTime.setDescription('This object contains the current System Time in the\n                        following format: HH:MM:SS')
systemServicesTimezone = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezone.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezone.setDescription('This object contains the current Hour Offset from UTC\n                        in the following format:  -13:00 to +12:00\n                                OR\n                        a well known timezone (PST,CST,etc.)')
systemServicesTimezoneStartWeek = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartWeek.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneStartWeek.setDescription('first, second, third, fourth, fifth, last = 1,2,3,4,5,6')
systemServicesTimezoneStartDay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartDay.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneStartDay.setDescription('Sunday, Monday, Tues... = 1,2,3,4,5,6,7')
systemServicesTimezoneStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartMonth.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneStartMonth.setDescription('January, February, march... = 1,2,3,4,5,67,8,9,10,11,12')
systemServicesTimezoneStartTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneStartTime.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneStartTime.setDescription('2:00, 3:00, 4:00... = 200, 300, 400, etc.')
systemServicesTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneOffset.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneOffset.setDescription('60 minutes = 60')
systemServicesTimezoneEndWeek = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndWeek.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneEndWeek.setDescription('first, second, third, fourth, fifth, last = 1,2,3,4,5,6')
systemServicesTimezoneEndDay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndDay.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneEndDay.setDescription('Sunday, Monday, Tues... = 1,2,3,4,5,6,7')
systemServicesTimezoneEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndMonth.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneEndMonth.setDescription('January, February, march... = 1,2,3,4,5,6,7,8,9,10,11,12')
systemServicesTimezoneEndTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesTimezoneEndTime.setStatus('current')
if mibBuilder.loadTexts: systemServicesTimezoneEndTime.setDescription('2:00, 3:00, 4:00... = 200, 300, 400, etc.')
systemServicesEnableDST = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 13), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesEnableDST.setStatus('current')
if mibBuilder.loadTexts: systemServicesEnableDST.setDescription('This object enables and disables the DST.')
systemServicesWorkingDirectory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('/flash')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesWorkingDirectory.setStatus('current')
if mibBuilder.loadTexts: systemServicesWorkingDirectory.setDescription('This object contains the current file system working directory\n                        for this CMM.  For example, /flash/certified')
systemServicesArg1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg1.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg1.setDescription('the 1st argument for system services action routines')
systemServicesArg2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg2.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg2.setDescription('the 2nd argument for system services action routines')
systemServicesArg3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg3.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg3.setDescription('the 3rd argument for system services action routines')
systemServicesArg4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg4.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg4.setDescription('the 4th argument for system services action routines')
systemServicesArg5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg5.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg5.setDescription('the 5th argument for system services action routines')
systemServicesArg6 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg6.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg6.setDescription('the 6th argument for system services action routines')
systemServicesArg7 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg7.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg7.setDescription('the 7th argument for system services action routines')
systemServicesArg8 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg8.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg8.setDescription('the 8th argument for system services action routines')
systemServicesArg9 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesArg9.setStatus('current')
if mibBuilder.loadTexts: systemServicesArg9.setDescription('the 9th argument for system services action routines')
systemServicesAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))).clone(namedValues=NamedValues(("noaction", 0), ("mkdir", 1), ("rmdir", 2), ("mv", 3), ("rm", 4), ("rmr", 5), ("cp", 6), ("cpr", 7), ("chmodpw", 8), ("chmodmw", 9), ("fsck", 10), ("ftp", 11), ("rz", 12), ("vi", 13), ("telnet", 14), ("install", 15), ("ed", 16), ("more", 17), ("newfs", 18), ("dshell", 19), ("view", 20), ("modbootparams", 21), ("filedir", 22), ("ssh", 23), ("sftp", 24), ("debugPmdNi", 25), ("bootrom", 26), ("defaultminiboot", 27), ("backupminiboot", 28), ("fpgacmm", 29), ("ubootcmm", 30), ("ubootni", 31), ("scp", 32), ("aclman", 33), ("ubootMinibootAllSlots", 34), ("miniboot", 35), ("upgradeLicence", 36), ("restoreLicence", 37), ("updateDSineXtroller", 38), ("ftp6", 39), ("telnet6", 40), ("ssh6", 41), ("sftp6", 42), ("mount", 43), ("unmount", 44), ("backup", 45), ("restore", 46), ("tftp", 47), ("fscollect", 48), ("fpgani", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesAction.setStatus('current')
if mibBuilder.loadTexts: systemServicesAction.setDescription('This object identifies which of the above Actions is to be\n                        performed by the System Services Application.  Most Actions\n                        require one or more parameters be set before the Action is\n                        executed. systemServicesAction - 26 for bootrom, 27 for default miniboot,\n                        and 28 for backup miniboot use systemServicesArg1 for name of the file\n\n                        scp- the first 2 arguments are going to be used. Set arg 1 with the source\n                        and the arg 2 with the destination file(s).\n                        E.g. scp LocalDir/testfileX.txt admin@10.255.11.1:RemoteDir/testfileX.txt\n                        For mount and umount, systemServicesArg1 specifies the\n                        mount point (such as /uflash).\n                        For newfs, systemServicesArg1 contains the name of the\n                        file-system (/uflash or /flash) which will be created. On\n                        /uflash, a FAT16 file system is created with long name naming conventions.\n                        For fsck, systemServicesArg1 contains the name of the\n                        file-system (/uflash or /flash) which will be checked and\n                        systemServicesArg2 will contain the string repair or\n                        no-repair depending on if autocorrection is requested.\n                        To see all file systems currently mounted, refer to the\n                        systemFileSystemTable.\n                        For backup and restore, systemServicesArg1 contains the\n                        archive name and systemServicesArg2 through Arg9 contains the\n                        directories and/or files to be archived/extracted.\n                        For newfs, fsck, backup and restore, the\n                        systemServicesActionPercentComplete variable can be\n                        inspected to see a progress indication.')
systemServicesResultCode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesResultCode.setStatus('current')
if mibBuilder.loadTexts: systemServicesResultCode.setDescription('the result of a system services application')
systemServicesResultString = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesResultString.setStatus('current')
if mibBuilder.loadTexts: systemServicesResultString.setDescription('the string result of a system services application')
systemServicesKtraceEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 27), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesKtraceEnable.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesKtraceEnable.setDescription('enables/disables the Ktrace facility')
systemServicesSystraceEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 28), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesSystraceEnable.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesSystraceEnable.setDescription('enables/disables the Systrace facility')
systemServicesTtyLines = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesTtyLines.setStatus('current')
if mibBuilder.loadTexts: systemServicesTtyLines.setDescription('the number of tty lines for a console screen')
systemServicesTtyColumns = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesTtyColumns.setStatus('current')
if mibBuilder.loadTexts: systemServicesTtyColumns.setDescription('the number of tty columns for a console screen')
systemServicesMemMonitorEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 31), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesMemMonitorEnable.setStatus('current')
if mibBuilder.loadTexts: systemServicesMemMonitorEnable.setDescription('disables/enables the kernel Memory Monitor feature')
systemServicesKtraceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32), )
if mibBuilder.loadTexts: systemServicesKtraceLevelTable.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesKtraceLevelTable.setDescription('the table of Ktrace severity level settings')
systemServicesKtraceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevelAppId"))
if mibBuilder.loadTexts: systemServicesKtraceLevelEntry.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesKtraceLevelEntry.setDescription('A row in the system services ktrace level table.  There\n                        is one entry for each possible Application ID')
systemServicesKtraceLevelAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesKtraceLevelAppId.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesKtraceLevelAppId.setDescription('the index into the ktrace level table')
systemServicesKtraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 32, 1, 2), SeverityLevel().clone('severityLevelDbg3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesKtraceLevel.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesKtraceLevel.setDescription('the ktrace level for a specific Application ID')
systemServicesSystraceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33), )
if mibBuilder.loadTexts: systemServicesSystraceLevelTable.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesSystraceLevelTable.setDescription('the table of Systrace severity level settings')
systemServicesSystraceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevelAppId"))
if mibBuilder.loadTexts: systemServicesSystraceLevelEntry.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesSystraceLevelEntry.setDescription('A row in the system services systrace level table.  There\n                        is one entry for each possible Application ID')
systemServicesSystraceLevelAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesSystraceLevelAppId.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesSystraceLevelAppId.setDescription('the Systrace level for a specific Application ID.')
systemServicesSystraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 33, 1, 2), SeverityLevel().clone('severityLevelDbg3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesSystraceLevel.setStatus('obsolete')
if mibBuilder.loadTexts: systemServicesSystraceLevel.setDescription('the Systrace level for a specific Application ID.')
systemUpdateStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34), )
if mibBuilder.loadTexts: systemUpdateStatusTable.setStatus('current')
if mibBuilder.loadTexts: systemUpdateStatusTable.setDescription('Provides update status for firmware updates')
systemUpdateStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemUpdateIndex"))
if mibBuilder.loadTexts: systemUpdateStatusEntry.setStatus('current')
if mibBuilder.loadTexts: systemUpdateStatusEntry.setDescription('A row in the update status table.')
systemUpdateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 72)))
if mibBuilder.loadTexts: systemUpdateIndex.setStatus('current')
if mibBuilder.loadTexts: systemUpdateIndex.setDescription('The index to the CMM for which status is required.')
systemUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("doneOk", 2), ("doneNok", 3), ("noOp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: systemUpdateStatus.setDescription('Status of a firmware update.  In the case of doneNok,\n                        further information can be obtained from    systemUpdateErrorCode.')
systemUpdateErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 34, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("msgSendIpcErr", 1), ("fXferOPenErr", 2), ("fXferFtpErr", 3), ("fXferReadErr", 4), ("fXferWriteErr", 5), ("fXferReplyErr", 6), ("fXferQuitErr", 7), ("fXferFcloseErr", 8), ("fileNameErr", 9), ("rmFileErr", 10), ("noInstallComp", 11), ("notSysResource", 12), ("notSupported", 13), ("invalidValue", 14), ("waitMsgMaxTry", 15), ("installDrvErr", 16), ("fileNotFound", 17), ("notPrimary", 18), ("commandBlocked", 19), ("noError", 20), ("invalidNi", 21), ("niNotPresent", 22), ("dupSerialNum", 23), ("upToDate", 24), ("invalidModType", 25), ("maxFaiCount", 26), ("invalidKey", 27), ("niLocked", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpdateErrorCode.setStatus('current')
if mibBuilder.loadTexts: systemUpdateErrorCode.setDescription('Error codes for done_nok.')
systemServicesActionPercentComplete = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 35), CommandPercentComplete()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesActionPercentComplete.setStatus('current')
if mibBuilder.loadTexts: systemServicesActionPercentComplete.setDescription('This object identifies the percent completion of the currently\n                 executing systemServicesAction.')
systemServicesCurrentArchivePathName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesCurrentArchivePathName.setStatus('current')
if mibBuilder.loadTexts: systemServicesCurrentArchivePathName.setDescription('This object identifies the archive currently being read\n                 via the systemServicesArchiveTable. This object is the complete\n                 pathname to the archive and must be set prior to reading the\n                 systemServicesArchiveTable.')
systemServicesArchiveTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37), )
if mibBuilder.loadTexts: systemServicesArchiveTable.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveTable.setDescription('This table contains the contents of a backup archive.\n                        This table is used by the restore action command to\n                        display (rather than backup) an archive. The restore\n                        command will populate this table with archive\n                        information read from the archive specified by the\n                        systemServicesAction restore command. This is done as\n                        follows. Set the systemServicesArg1 object to the\n                        archive name to be read. Set the systemServicesArg2\n                        object to the string: display-only. Set the\n                        systemServicesAction object to restore. Then\n                        read this table.')
systemServicesArchiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveIndex"))
if mibBuilder.loadTexts: systemServicesArchiveEntry.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveEntry.setDescription('A row in the system services archive table.')
systemServicesArchiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveIndex.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveIndex.setDescription('Index to a specific entry in the backup archive file.')
systemServicesArchiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveName.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveName.setDescription('The name of a file in the backup archive file.')
systemServicesArchiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 3), SystemFileType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveType.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveType.setDescription('The type of a file in the backup archive file.')
systemServicesArchiveSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveSize.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveSize.setDescription('The size of a file in the backup archive file.')
systemServicesArchiveAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 37, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesArchiveAttr.setStatus('current')
if mibBuilder.loadTexts: systemServicesArchiveAttr.setDescription('The attributes of a file in the backup archive file.')
systemServicesUsbEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableasync", 1), ("disable", 2), ("enablesync", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesUsbEnable.setStatus('current')
if mibBuilder.loadTexts: systemServicesUsbEnable.setDescription('disable/enable the USB interface with mode as synchronous / asynchronous')
systemServicesUsbAutoCopyEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 39), Enable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesUsbAutoCopyEnable.setStatus('current')
if mibBuilder.loadTexts: systemServicesUsbAutoCopyEnable.setDescription('disable/enable the USB auto-copy facility')
systemServicesUsbMounted = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 5, 40), Enable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesUsbMounted.setStatus('current')
if mibBuilder.loadTexts: systemServicesUsbMounted.setDescription('determinse if usb is mounted')
systemFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: systemFileSystemTable.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemTable.setDescription('system file system table for this CMM.')
systemFileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemIndex"))
if mibBuilder.loadTexts: systemFileSystemEntry.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemEntry.setDescription('A row in the system file system table')
systemFileSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 1), FileSystemIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemIndex.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemIndex.setDescription('Index to a specific file system.')
systemFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemName.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemName.setDescription('The name of the file system.')
systemFileSystemFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFreeSpace.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFreeSpace.setDescription('the free space in octets of this file system')
systemFileSystemDirectoryName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFileSystemDirectoryName.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemDirectoryName.setDescription('The name of a file system directory.  This object is used in conjunction\n                        with an Action command.  The Action command will set this directory\n                        name to the name of a specific directory.  Information for all of the\n                        files in that directory will then be read from the file system and\n                        the appropriate values written in the entries in the systemFileSystemFile\n                        table.  All this is being done to give snmp access to the file system\n                        files.')
systemFileSystemDirectoryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemDirectoryDateTime.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemDirectoryDateTime.setDescription('the date and time (in system format) of the last access to this directory')
systemFileSystemFileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4), )
if mibBuilder.loadTexts: systemFileSystemFileTable.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileTable.setDescription('system file system File table for this CMM.  This table is used by\n                        an Action command which will populate it with file information read\n                        from the files in the specified directory.')
systemFileSystemFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileIndex"))
if mibBuilder.loadTexts: systemFileSystemFileEntry.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileEntry.setDescription('A row in the system file system File table')
systemFileSystemFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileIndex.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileIndex.setDescription('Index to a specific file system File.')
systemFileSystemFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileName.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileName.setDescription('The name of a file system File')
systemFileSystemFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 3), SystemFileType().clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileType.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileType.setDescription('The Type of a file system File')
systemFileSystemFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileSize.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileSize.setDescription('size of this file')
systemFileSystemFileAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("readOnly", 2), ("readWrite", 3), ("writeOnly", 4))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileAttr.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileAttr.setDescription('attributes of this file')
systemFileSystemFileDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 4, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFileSystemFileDateTime.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemFileDateTime.setDescription('the modification date and time of a file')
systemSwitchLoggingIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 1), SwitchLoggingIndex().clone('flash')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingIndex.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingIndex.setDescription('A small positive integer used to identify a switch logging\n                        output')
systemSwitchLoggingEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 2), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingEnable.setDescription('Global switch logging enable/disable')
systemSwitchLoggingFlash = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 3), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingFlash.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingFlash.setDescription('Enable/disable switch logging to flash')
systemSwitchLoggingSocket = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 4), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSocket.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingSocket.setDescription('Enable/disable switch logging to a socket')
systemSwitchLoggingSocketIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSocketIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: systemSwitchLoggingSocketIpAddr.setDescription('The IP Address of a remote host that can\n                        be used to send switch logging records to as an option')
systemSwitchLoggingConsole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 6), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingConsole.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingConsole.setDescription('Enable/disable switch logging to the console')
systemSwitchLoggingApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7), )
if mibBuilder.loadTexts: systemSwitchLoggingApplicationTable.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationTable.setDescription('The table of switch logging registered applications,one for\n\t\t\t\teach Application ID')
systemSwitchLoggingLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppId"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppId"), (0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelIndex"))
if mibBuilder.loadTexts: systemSwitchLoggingLevelEntry.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingLevelEntry.setDescription('A row in the system switch logging application table')
systemSwitchLoggingApplicationAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 1), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppId.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppId.setDescription('A specific application ID which has a registered application\n\t\t\t\tassociated with it. This application ID is used as an index\n                into the application table.')
systemSwitchLoggingApplicationSubAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 2), AppIdIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppId.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppId.setDescription('A specific sub-application ID which belongs to a registered\n        \t\tapplication associated with it. This sub-application ID is used\n \t\t\t\tas part of the index into the application table.')
systemSwitchLoggingApplicationSubAppVrfLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelIndex.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelIndex.setDescription("The specific sub-application's VRF severity level. This\n\t\t\t\tseverity level is used as part of the index into the\n\t\t\t\tapplication table.")
systemSwitchLoggingApplicationAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationAppName.setDescription('Application name in an entry in the table')
systemSwitchLoggingApplicationSubAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppName.setDescription('The name of the specific sub-application ID.')
systemSwitchLoggingApplicationSubAppLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 6), SeverityLevel().clone('severityLevelOff')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppLevel.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppLevel.setDescription('The severity level of the specific sub-application ID.')
systemSwitchLoggingApplicationSubAppVrfLevelString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 7, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelString.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingApplicationSubAppVrfLevelString.setDescription("A string with comma-delimited VRF IDs or ranges of VRF IDs\n\t\t\t\tthat belong to this sub-application's VRF severity level.")
systemSwitchLoggingClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingClear.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingClear.setDescription('Enable clearing of switch logging entries')
systemSwitchLoggingFileSize = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingFileSize.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingFileSize.setDescription('Set size of swlog logging file')
systemSwitchLoggingHostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10), )
if mibBuilder.loadTexts: systemSwitchLoggingHostTable.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostTable.setDescription('The table of switch logging remote hosts.')
systemSwitchLoggingHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostIpAddr"))
if mibBuilder.loadTexts: systemSwitchLoggingHostEntry.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostEntry.setDescription('A remote switch logging server entry.')
systemSwitchLoggingHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostIpAddr.setDescription('The IP Address of a remote host that can\n                        be used to send switch logging records to.')
systemSwitchLoggingHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostPort.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostPort.setDescription('The port number of a remote host that can\n                        be used to send switch logging records to.')
systemSwitchLoggingHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostStatus.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostStatus.setDescription('Provides the ability to add or remove a remote host entry.')
systemSwitchLoggingHostUserCommandHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 4), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostUserCommandHost.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostUserCommandHost.setDescription('Indicates whether this host may receive user\n                          command data.')
systemSwitchLoggingHostVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 10, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostVrfName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostVrfName.setDescription('The name or number of the VRF to be used to send\n                        switch logging records to.')
systemSwitchLoggingHostv6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11), )
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Table.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Table.setDescription('The table of switch logging remote hosts.')
systemSwitchLoggingHostv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6IpAddr"))
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Entry.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Entry.setDescription('A remote switch logging server entry.')
systemSwitchLoggingHostv6IpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6IpAddr.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6IpAddr.setDescription('The IP Address of a remote host that can\n                        be used to send switch logging records to.')
systemSwitchLoggingHostv6Port = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Port.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Port.setDescription('The port number of a remote host that can\n                        be used to send switch logging records to.')
systemSwitchLoggingHostv6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Status.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6Status.setDescription('Provides the ability to add or remove a remote host entry.')
systemSwitchLoggingHostv6UserCommandHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 4), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6UserCommandHost.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6UserCommandHost.setDescription('Indicates whether this host may receive user\n                          command data.')
systemSwitchLoggingHostv6VrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 11, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingHostv6VrfName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostv6VrfName.setDescription('The name or number of the VRF to be used to send\n                        switch logging records to.')
systemSwitchLoggingHostCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingHostCount.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHostCount.setDescription('The number of remote hosts currently defined.')
systemSwitchLoggingConsoleLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 13), SeverityLevel().clone('severityLevelWarn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingConsoleLevel.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingConsoleLevel.setDescription('Messages whose severity level is equal to or more\n                         severe than this value will be displayed to the console.')
systemSwitchLoggingUserCommandStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 14), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemSwitchLoggingUserCommandStatus.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingUserCommandStatus.setDescription('User commands will be logged to remote hosts when enabled.')
systemSwitchLoggingSysLogFacilityId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 15), SysLogFacilityId().clone('uucp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSysLogFacilityId.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingSysLogFacilityId.setDescription("This textual convention enumerates the facilities\n                    that originate syslog messages.\n\n                    The Facilities of syslog messages are numerically\n                    coded with decimal values.\n                    Some of the operating system daemons and processes\n                    are traditionally designated by the Facility values\n                    given below. Daemons and processes that do not have\n                    an explicitly assigned Facility may use any of the\n                    'local use' Facilities or they may use the 'user-level'\n                    Facility.\n\n                    For interoperability and backwards compatibility\n                    reasons, mapping specified in this document between\n                    a label which represents a Facility and\n                    the value which represents the corresponding code, is\n                    normative. So the mapping from a label configured by\n                    operators in syslog.conf or equivalent will consistently\n                    map to the same Facility code regardless of\n                    implementation, but the label itself is often\n                    semantically meaningless, because it is impractical to\n                    attempt to enumerate all possible facilities, and the\n                    enumeration (label and corresponding value) that is used\n                    by an actual Facility is, and has historically been,\n                    implementation-dependent.\n\n                    For example, the foobar application might log messages\n                    as having come from local7, even though there is no\n                    'local' process on the device, and the operator can\n                    configure syslog.conf to have local7.critical messages\n                    be relayed, even though there might be multiple facilities\n                    using Facility local7. This is typical current practice,\n                    and originators, relays and collectors know how to handle\n                    this situation. For improved accuracy, the foobar\n                    application can also include an APPNAME Structured Data\n                    Element.")
systemSwitchLoggingLevel = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 16), SeverityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLevel.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingLevel.setDescription('The logging level for a specific application id.')
systemSwitchLoggingAppName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingAppName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingAppName.setDescription('Application name used as an index into the table')
systemSwitchLoggingDuplicateDetect = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 18), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingDuplicateDetect.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDuplicateDetect.setDescription('Global switch logging enable/disable duplicate detection')
systemSwitchLoggingPreamble = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 19), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingPreamble.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingPreamble.setDescription('Global switch logging enable/disable printing preamble')
systemSwitchLoggingDebug = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 20), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingDebug.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDebug.setDescription('Global switch logging enable/disable debug information')
systemSwitchLoggingVrf = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 21), VrfId().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingVrf.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingVrf.setDescription('Global switch logging subapplicastion VRF ID')
systemSwitchLoggingHashAgeLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 22), AgeLimit().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingHashAgeLimit.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingHashAgeLimit.setDescription('Global switch logging Hash Table Age Limit')
systemSwitchLoggingTty = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 23), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingTty.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingTty.setDescription('Enable/disable switch logging to tty')
systemSwitchLoggingSubAppNbr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 24), AppIdIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingSubAppNbr.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingSubAppNbr.setDescription('The subapplication number of a given application')
systemSwitchLoggingLibraryName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLibraryName.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingLibraryName.setDescription('Library name used as an index into the table of\n\t\t\t\t\tregistered libraries')
systemSwitchLoggingLoopback0 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 26), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSwitchLoggingLoopback0.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingLoopback0.setDescription('Enable/disable switch logging using Loopback0\n\t\t\t\t\t\tinterface as the source ip address when logging\n\t\t\t\t\t\tto syslog server')
systemSwitchLoggingDgHostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27), )
if mibBuilder.loadTexts: systemSwitchLoggingDgHostTable.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDgHostTable.setDescription('The table of switch logging remote hosts for Dying Gasp.')
systemSwitchLoggingDgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIndex"))
if mibBuilder.loadTexts: systemSwitchLoggingDgHostEntry.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDgHostEntry.setDescription('A remote switch logging server entry.')
systemSwitchLoggingDgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1))
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIndex.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIndex.setDescription('Index of Dying Gasp swlod table.')
systemSwitchLoggingDgHostIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpType.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpType.setDescription('The IP address type .')
systemSwitchLoggingDgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 6, 27, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingDgHostIpAddr.setDescription('The IP Address of a remote host that can\n                        be used to send Dying Gasp switch logging records to.')
systemDNSEnableDnsResolver = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 1), Enable().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSEnableDnsResolver.setStatus('current')
if mibBuilder.loadTexts: systemDNSEnableDnsResolver.setDescription('Global Domain Name Service enable/disable')
systemDNSDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSDomainName.setStatus('current')
if mibBuilder.loadTexts: systemDNSDomainName.setDescription('current domain name used by the Domain Name Service')
systemDNSNsAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr1.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsAddr1.setDescription('1st part of address used by the Domain Name Service')
systemDNSNsAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr2.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsAddr2.setDescription('2nd part of address used by the Domain Name Service')
systemDNSNsAddr3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsAddr3.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsAddr3.setDescription('3rd part of address used by the Domain Name Service')
systemDNSNsIPv6Addr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 6), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr1.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsIPv6Addr1.setDescription('IPv6 address of the Primary DNS server')
systemDNSNsIPv6Addr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 7), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr2.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsIPv6Addr2.setDescription('IPv6 address of the Secondary DNS server')
systemDNSNsIPv6Addr3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 7, 8), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: systemDNSNsIPv6Addr3.setStatus('current')
if mibBuilder.loadTexts: systemDNSNsIPv6Addr3.setDescription('IPv6 address of the third DNS server')
systemServicesBluetoothEnable = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 1), Enable().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesBluetoothEnable.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothEnable.setDescription('Enable or disable Bluetooth.')
systemServicesBluetoothTxPower = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemServicesBluetoothTxPower.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothTxPower.setDescription('The Bluetooth transmit power, low or high.')
systemServicesBluetoothTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3), )
if mibBuilder.loadTexts: systemServicesBluetoothTable.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothTable.setDescription('The table of Bluetooth devices.')
systemServicesBluetoothEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothChassisId"))
if mibBuilder.loadTexts: systemServicesBluetoothEntry.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothEntry.setDescription('A Bluetooth device entry.')
systemServicesBluetoothChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1, 1), VirtualOperChassisId())
if mibBuilder.loadTexts: systemServicesBluetoothChassisId.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothChassisId.setDescription('The chassis ID for this Bluetooth instance.')
systemServicesBluetoothStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("connectionInactive", 2), ("connectionActive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemServicesBluetoothStatus.setStatus('current')
if mibBuilder.loadTexts: systemServicesBluetoothStatus.setDescription('The current Bluetooth status.')
systemFipsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9, 1), Enable().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFipsAdminState.setStatus('current')
if mibBuilder.loadTexts: systemFipsAdminState.setDescription('Enable or disable the FIPS mode on AOS switches. This value\n                      becomes the systemFipsOperState after write-memory and reboot.')
systemFipsOperState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 9, 2), Enable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFipsOperState.setStatus('current')
if mibBuilder.loadTexts: systemFipsOperState.setDescription('The Operational State of the FIPS mode on AOS switches')
systemVcHardwareTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1), )
if mibBuilder.loadTexts: systemVcHardwareTable.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareTable.setDescription('The table lists the results of cable diagnostics.')
systemVcHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-CHASSIS-MIB", "virtualChassisOperChasId"))
if mibBuilder.loadTexts: systemVcHardwareEntry.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareEntry.setDescription('An entry corresponding to each port.')
systemVcHardwareCpuVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCpuVendor.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareCpuVendor.setDescription('A string that identifies the CPU Vendor for this chassis in the VC.')
systemVcHardwareCpuModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCpuModel.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareCpuModel.setDescription('A string that identifies the CPU Model for this chassis in the VC.')
systemVcHardwareFlashMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("sandisk", 8), ("sst", 9), ("spansion", 10), ("wintec", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFlashMfg.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareFlashMfg.setDescription('This object identifies the manufacturer of the Flash memory\n                         used on this chassis in the VC.')
systemVcHardwareFlashSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFlashSize.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareFlashSize.setDescription('This object identifies the size of the flash memory available\n                         on this chassis in the VC.')
systemVcHardwareMemoryMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("amd", 2), ("intel", 3), ("atmel", 4), ("micron", 5), ("kingston", 6), ("toshiba", 7), ("agilent", 8), ("dataram", 10), ("interward", 11), ("notreadable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareMemoryMfg.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareMemoryMfg.setDescription('This object identifies the manufacturer of the RAM memory\n                         used on this chassis in the VC')
systemVcHardwareMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareMemorySize.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareMemorySize.setDescription('This object identifies the size of the RAM memory available on\n                         this chassis in the VC')
systemVcHardwareUbootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareUbootVersion.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareUbootVersion.setDescription('A string that identifies the Uboot version for this chassis in the VC.')
systemVcHardwareFpga1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFpga1Version.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareFpga1Version.setDescription('This is the version of one of the FPGA #1 this CMM in the VC.')
systemVcHardwareFpga2Version = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFpga2Version.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareFpga2Version.setDescription('This is the version of one of the FPGA #2 this CMM in the VC. If this FPGA does not exist then this will be N/A')
systemVcHardwarePowerSuppliesPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 10), Bits().clone(namedValues=NamedValues(("ps1", 0), ("ps2", 1), ("ps3", 2), ("ps4", 3), ("ps5", 4), ("ps6", 5), ("ps7", 6), ("ps8", 7), ("ps9", 8), ("ps10", 9), ("ps11", 10), ("ps12", 11), ("ps13", 12), ("ps14", 13), ("ps15", 14), ("ps16", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwarePowerSuppliesPresent.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwarePowerSuppliesPresent.setDescription('A List of the Power supplies that are Present')
systemVcHardwareNisPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 11), Bits().clone(namedValues=NamedValues(("ni1", 0), ("ni2", 1), ("ni3", 2), ("ni4", 3), ("ni5", 4), ("ni6", 5), ("ni7", 6), ("ni8", 7), ("ni9", 8), ("ni10", 9), ("ni11", 10), ("ni12", 11), ("ni13", 12), ("ni14", 13), ("ni15", 14), ("ni16", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareNisPresent.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareNisPresent.setDescription("A List of the NI's/Expansion modules Present")
systemVcHardwareCFMsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 12), Bits().clone(namedValues=NamedValues(("cfm1", 0), ("cfm2", 1), ("cfm3", 2), ("cfm4", 3), ("cfm5", 4), ("cfm6", 5), ("cfm7", 6), ("cfm8", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareCFMsPresent.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareCFMsPresent.setDescription("A List of the CFM's that are Present")
systemVcHardwareFanTraysPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 1, 10, 1, 1, 13), Bits().clone(namedValues=NamedValues(("fanTray1", 0), ("fanTray2", 1), ("fanTray3", 2), ("fanTray4", 3), ("fanTray5", 4), ("fanTray6", 5), ("fanTray7", 6), ("fanTray8", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemVcHardwareFanTraysPresent.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareFanTraysPresent.setDescription('A List of the Fan Trays Present')
systemSwlogName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemSwlogName.setStatus('current')
if mibBuilder.loadTexts: systemSwlogName.setDescription('SWLOG file name that might get overwritten since swlog file reached (90%) it size')
systemSwlogSizeTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 4, 0, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogName"))
if mibBuilder.loadTexts: systemSwlogSizeTrap.setStatus('current')
if mibBuilder.loadTexts: systemSwlogSizeTrap.setDescription('The file specified file may get lost if not backed up , since swlog file reached 90% \n            of its size , please back up swlog before getting overwritten.')
alcatelIND1SystemMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootParamsGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBlueToothServicesGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFipsGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareGroup"), ("ALCATEL-IND1-SYSTEM-MIB", "systemNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1SystemMIBCompliance = alcatelIND1SystemMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SystemMIBCompliance.setDescription('Compliance statement for\n             Alcatel BOP Proprietary System Subsystem.')
systemMicrocodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageDescription"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodePackageSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedDirectory"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedDescription"), ("ALCATEL-IND1-SYSTEM-MIB", "systemMicrocodeLoadedSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMicrocodeGroup = systemMicrocodeGroup.setStatus('current')
if mibBuilder.loadTexts: systemMicrocodeGroup.setDescription('Group all the system microcode objects together')
systemBootParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetwork"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetworkGateway"), ("ALCATEL-IND1-SYSTEM-MIB", "systemBootNetworkNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemBootParamsGroup = systemBootParamsGroup.setStatus('current')
if mibBuilder.loadTexts: systemBootParamsGroup.setDescription('Group all the system boot parameters together')
systemHardwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFlashMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFlashSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMemoryMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMemorySize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareNVRAMBatteryLow"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBootCpuType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperInterruptBoot"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperForceUartDefaults"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperRunExtendedMemoryDiagnostics"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareJumperSpare"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersionIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareFpgaVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBootRomVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareDefaultMiniBootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareBackupMiniBootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareCpldVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareMinorFpgaVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareProdRegId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareRevisionRegister"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareUbootMinibootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareUbootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemHardwareXfpId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemHardwareGroup = systemHardwareGroup.setStatus('current')
if mibBuilder.loadTexts: systemHardwareGroup.setDescription('Group all the system Hardware Data together')
systemServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezone"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartWeek"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartDay"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartMonth"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneStartTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneOffset"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndWeek"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndDay"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndMonth"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTimezoneEndTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesEnableDST"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesWorkingDirectory"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg3"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg4"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg5"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg6"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg7"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg8"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArg9"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesAction"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesResultCode"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesResultString"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTtyLines"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTtyColumns"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesMemMonitorEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevelAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesKtraceLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevelAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesSystraceLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemUpdateStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemUpdateErrorCode"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesActionPercentComplete"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveAttr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbAutoCopyEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesUsbMounted"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesArchiveIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesCurrentArchivePathName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemServicesGroup = systemServicesGroup.setStatus('current')
if mibBuilder.loadTexts: systemServicesGroup.setDescription('Group all the system services parameters together')
systemFileSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFreeSpace"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemDirectoryName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemDirectoryDateTime"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileAttr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFileSystemFileDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemFileSystemGroup = systemFileSystemGroup.setStatus('current')
if mibBuilder.loadTexts: systemFileSystemGroup.setDescription('Group all the system flash file parameters together')
systemSwitchLoggingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingFlash"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSocket"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSocketIpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingConsole"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingClear"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingFileSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelIndex"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingApplicationSubAppVrfLevelString"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingAppName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDuplicateDetect"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingPreamble"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDebug"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingVrf"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHashAgeLimit"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingTty"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSubAppNbr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLibraryName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingLoopback0"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingConsoleLevel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostCount"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingUserCommandStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingSysLogFacilityId"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostIpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostPort"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostStatus"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostUserCommandHost"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostVrfName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6IpAddr"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6Port"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6Status"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6UserCommandHost"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingHostv6VrfName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIpType"), ("ALCATEL-IND1-SYSTEM-MIB", "systemSwitchLoggingDgHostIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemSwitchLoggingGroup = systemSwitchLoggingGroup.setStatus('current')
if mibBuilder.loadTexts: systemSwitchLoggingGroup.setDescription('Group all the switch logging parameters together')
systemDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemDNSEnableDnsResolver"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSDomainName"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsAddr3"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr1"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr2"), ("ALCATEL-IND1-SYSTEM-MIB", "systemDNSNsIPv6Addr3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemDNSGroup = systemDNSGroup.setStatus('current')
if mibBuilder.loadTexts: systemDNSGroup.setDescription('Group all the systemDNS parameters together')
systemBlueToothServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothEnable"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothTxPower"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesBluetoothStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemBlueToothServicesGroup = systemBlueToothServicesGroup.setStatus('current')
if mibBuilder.loadTexts: systemBlueToothServicesGroup.setDescription('Group all the systemFips parameters together')
systemFipsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemFipsAdminState"), ("ALCATEL-IND1-SYSTEM-MIB", "systemFipsOperState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemFipsGroup = systemFipsGroup.setStatus('current')
if mibBuilder.loadTexts: systemFipsGroup.setDescription('Group all the systemFips parameters together')
systemVcHardwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCpuVendor"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCpuModel"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFlashMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFlashSize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareMemoryMfg"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareMemorySize"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareUbootVersion"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFpga1Version"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFpga2Version"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwarePowerSuppliesPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareNisPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareCFMsPresent"), ("ALCATEL-IND1-SYSTEM-MIB", "systemVcHardwareFanTraysPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemVcHardwareGroup = systemVcHardwareGroup.setStatus('current')
if mibBuilder.loadTexts: systemVcHardwareGroup.setDescription('Group all the system VC Hardware Data together')
systemSwlogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemSwlogGroup = systemSwlogGroup.setStatus('current')
if mibBuilder.loadTexts: systemSwlogGroup.setDescription('Group all the swlog trap objects together')
systemNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 2, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-SYSTEM-MIB", "systemSwlogSizeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemNotificationGroup = systemNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: systemNotificationGroup.setDescription('A collection of notifications for System Services events.')
mibBuilder.exportSymbols("ALCATEL-IND1-SYSTEM-MIB", systemSwitchLoggingApplicationSubAppName=systemSwitchLoggingApplicationSubAppName, systemSwitchLoggingDgHostTable=systemSwitchLoggingDgHostTable, systemSwitchLoggingHostv6Port=systemSwitchLoggingHostv6Port, systemSwitchLoggingDgHostEntry=systemSwitchLoggingDgHostEntry, systemVcHardwarePowerSuppliesPresent=systemVcHardwarePowerSuppliesPresent, SysLogFacilityId=SysLogFacilityId, systemHardwareFlashSize=systemHardwareFlashSize, systemFipsGroup=systemFipsGroup, systemFipsAdminState=systemFipsAdminState, systemSwlogGroup=systemSwlogGroup, systemVcHardwareMemoryMfg=systemVcHardwareMemoryMfg, alcatelIND1SystemMIBObjects=alcatelIND1SystemMIBObjects, systemServicesWorkingDirectory=systemServicesWorkingDirectory, systemSwitchLoggingDebug=systemSwitchLoggingDebug, systemSwitchLoggingHashAgeLimit=systemSwitchLoggingHashAgeLimit, AppIdIndex=AppIdIndex, systemSwitchLoggingConsoleLevel=systemSwitchLoggingConsoleLevel, systemServicesArchiveIndex=systemServicesArchiveIndex, systemServicesArg8=systemServicesArg8, systemHardwareGroup=systemHardwareGroup, systemServicesTimezoneStartTime=systemServicesTimezoneStartTime, systemServicesSystraceLevelTable=systemServicesSystraceLevelTable, systemVcHardwareCFMsPresent=systemVcHardwareCFMsPresent, systemServicesAction=systemServicesAction, systemUpdateIndex=systemUpdateIndex, systemSwitchLoggingHostVrfName=systemSwitchLoggingHostVrfName, systemMicrocodePackageDirectoryIndex=systemMicrocodePackageDirectoryIndex, systemDNSNsIPv6Addr3=systemDNSNsIPv6Addr3, systemSwitchLoggingAppName=systemSwitchLoggingAppName, Enable=Enable, SwitchLoggingIndex=SwitchLoggingIndex, systemFileSystemFileAttr=systemFileSystemFileAttr, systemServicesTimezone=systemServicesTimezone, SystemFileType=SystemFileType, systemServicesArg2=systemServicesArg2, systemSwitchLoggingApplicationAppName=systemSwitchLoggingApplicationAppName, systemMicrocodePackageStatus=systemMicrocodePackageStatus, systemServicesSystraceEnable=systemServicesSystraceEnable, systemServicesKtraceLevel=systemServicesKtraceLevel, systemSwitchLoggingHostIpAddr=systemSwitchLoggingHostIpAddr, systemServicesUsbMounted=systemServicesUsbMounted, systemVcHardwareNisPresent=systemVcHardwareNisPresent, systemServicesArg1=systemServicesArg1, systemMicrocode=systemMicrocode, systemFileSystemEntry=systemFileSystemEntry, VrfId=VrfId, systemBootNetworkGateway=systemBootNetworkGateway, systemMicrocodeGroup=systemMicrocodeGroup, systemFileSystemDirectoryDateTime=systemFileSystemDirectoryDateTime, systemHardwareBootCpuType=systemHardwareBootCpuType, systemSwitchLoggingFlash=systemSwitchLoggingFlash, systemServicesArg4=systemServicesArg4, systemSwitchLoggingHostv6UserCommandHost=systemSwitchLoggingHostv6UserCommandHost, systemDNSNsAddr3=systemDNSNsAddr3, systemVcHardwareFpga1Version=systemVcHardwareFpga1Version, systemUpdateStatusTable=systemUpdateStatusTable, systemServicesSystraceLevel=systemServicesSystraceLevel, systemSwitchLoggingApplicationSubAppVrfLevelIndex=systemSwitchLoggingApplicationSubAppVrfLevelIndex, systemSwitchLoggingApplicationAppId=systemSwitchLoggingApplicationAppId, systemServicesArchiveTable=systemServicesArchiveTable, systemMicrocodePackageTable=systemMicrocodePackageTable, systemHardwareFpgaVersionEntry=systemHardwareFpgaVersionEntry, systemServicesTtyLines=systemServicesTtyLines, systemHardwareJumperInterruptBoot=systemHardwareJumperInterruptBoot, systemNotificationGroup=systemNotificationGroup, systemFips=systemFips, systemFileSystemTable=systemFileSystemTable, systemSwitchLoggingApplicationSubAppId=systemSwitchLoggingApplicationSubAppId, systemSwitchLoggingHostTable=systemSwitchLoggingHostTable, systemSwitchLoggingHostv6VrfName=systemSwitchLoggingHostv6VrfName, systemBlueToothServicesGroup=systemBlueToothServicesGroup, systemServicesUsbAutoCopyEnable=systemServicesUsbAutoCopyEnable, systemServicesTimezoneEndTime=systemServicesTimezoneEndTime, systemSwitchLoggingLevelEntry=systemSwitchLoggingLevelEntry, systemHardwareCpldVersion=systemHardwareCpldVersion, systemFileSystemName=systemFileSystemName, systemSwitchLoggingLoopback0=systemSwitchLoggingLoopback0, systemSwitchLoggingHostCount=systemSwitchLoggingHostCount, systemBootParamsGroup=systemBootParamsGroup, systemHardwareXfpId=systemHardwareXfpId, systemFileSystemFreeSpace=systemFileSystemFreeSpace, systemServicesBluetoothEnable=systemServicesBluetoothEnable, systemFileSystemFileSize=systemFileSystemFileSize, systemServicesBluetoothTxPower=systemServicesBluetoothTxPower, systemSwitchLoggingApplicationSubAppLevel=systemSwitchLoggingApplicationSubAppLevel, systemSwitchLoggingLevel=systemSwitchLoggingLevel, systemMicrocodeLoadedTable=systemMicrocodeLoadedTable, systemSwitchLoggingDuplicateDetect=systemSwitchLoggingDuplicateDetect, systemMicrocodeLoadedDirectory=systemMicrocodeLoadedDirectory, systemMicrocodeLoadedDescription=systemMicrocodeLoadedDescription, systemServicesTtyColumns=systemServicesTtyColumns, systemServicesArchiveEntry=systemServicesArchiveEntry, systemVcHardwareFpga2Version=systemVcHardwareFpga2Version, systemMicrocodePackageName=systemMicrocodePackageName, systemFileSystemIndex=systemFileSystemIndex, systemSwitchLoggingSubAppNbr=systemSwitchLoggingSubAppNbr, systemVcHardwareFlashMfg=systemVcHardwareFlashMfg, systemHardwareFpgaVersion=systemHardwareFpgaVersion, systemHardwareMemorySize=systemHardwareMemorySize, systemVcHardwareTable=systemVcHardwareTable, systemHardwareBootRomVersion=systemHardwareBootRomVersion, systemSwitchLoggingApplicationSubAppVrfLevelString=systemSwitchLoggingApplicationSubAppVrfLevelString, systemHardwareUbootVersion=systemHardwareUbootVersion, systemDNSNsAddr1=systemDNSNsAddr1, systemServicesTimezoneStartDay=systemServicesTimezoneStartDay, systemVcHardwareMemorySize=systemVcHardwareMemorySize, systemSwitchLoggingSocketIpAddr=systemSwitchLoggingSocketIpAddr, alcatelIND1SystemMIBConformance=alcatelIND1SystemMIBConformance, systemMicrocodePackageDirectory=systemMicrocodePackageDirectory, systemServicesArchiveSize=systemServicesArchiveSize, systemDNSNsIPv6Addr2=systemDNSNsIPv6Addr2, systemVcHardwareFanTraysPresent=systemVcHardwareFanTraysPresent, systemHardwareNVRAMBatteryLow=systemHardwareNVRAMBatteryLow, systemVcHardware=systemVcHardware, alcatelIND1SystemMIBGroups=alcatelIND1SystemMIBGroups, systemSwitchLoggingHostv6Entry=systemSwitchLoggingHostv6Entry, systemSwitchLoggingSocket=systemSwitchLoggingSocket, systemHardwareProdRegId=systemHardwareProdRegId, systemMicrocodePackageIndex=systemMicrocodePackageIndex, systemServicesSystraceLevelEntry=systemServicesSystraceLevelEntry, systemSwitchLoggingDgHostIpType=systemSwitchLoggingDgHostIpType, systemMicrocodePackageEntry=systemMicrocodePackageEntry, systemFileSystemDirectoryName=systemFileSystemDirectoryName, systemServicesArg7=systemServicesArg7, PYSNMP_MODULE_ID=alcatelIND1SystemMIB, AgeLimit=AgeLimit, systemMicrocodeLoadedIndex=systemMicrocodeLoadedIndex, systemFileSystemFileName=systemFileSystemFileName, systemUpdateStatus=systemUpdateStatus, systemSwitchLoggingLibraryName=systemSwitchLoggingLibraryName, systemBootNetworkNetmask=systemBootNetworkNetmask, systemDNSEnableDnsResolver=systemDNSEnableDnsResolver, systemServicesTimezoneStartWeek=systemServicesTimezoneStartWeek, systemSwitchLoggingHostv6IpAddr=systemSwitchLoggingHostv6IpAddr, systemSwitchLoggingSysLogFacilityId=systemSwitchLoggingSysLogFacilityId, systemServicesCurrentArchivePathName=systemServicesCurrentArchivePathName, systemVcHardwareEntry=systemVcHardwareEntry, systemServicesBluetoothChassisId=systemServicesBluetoothChassisId, systemServicesKtraceLevelEntry=systemServicesKtraceLevelEntry, systemMicrocodePackageSize=systemMicrocodePackageSize, systemMicrocodeLoadedEntry=systemMicrocodeLoadedEntry, systemHardwareJumperSpare=systemHardwareJumperSpare, alcatelIND1SystemMIBCompliance=alcatelIND1SystemMIBCompliance, systemSwitchLoggingHostUserCommandHost=systemSwitchLoggingHostUserCommandHost, systemSwitchLoggingHostPort=systemSwitchLoggingHostPort, SeverityLevel=SeverityLevel, systemHardwareJumperForceUartDefaults=systemHardwareJumperForceUartDefaults, systemServices=systemServices, systemSwitchLoggingClear=systemSwitchLoggingClear, FileSystemIndex=FileSystemIndex, systemServicesTimezoneOffset=systemServicesTimezoneOffset, systemHardwareFlashMfg=systemHardwareFlashMfg, systemBootNetwork=systemBootNetwork, systemServicesArchiveName=systemServicesArchiveName, systemFileSystem=systemFileSystem, systemMicrocodeLoadedSize=systemMicrocodeLoadedSize, systemSwitchLoggingConsole=systemSwitchLoggingConsole, systemServicesTime=systemServicesTime, systemSwitchLoggingIndex=systemSwitchLoggingIndex, systemMicrocodePackageVersion=systemMicrocodePackageVersion, systemDNSNsAddr2=systemDNSNsAddr2, systemServicesTimezoneStartMonth=systemServicesTimezoneStartMonth, systemDNSGroup=systemDNSGroup, systemFileSystemGroup=systemFileSystemGroup, systemMicrocodeLoadedVersion=systemMicrocodeLoadedVersion, systemServicesResultCode=systemServicesResultCode, systemFileSystemFileType=systemFileSystemFileType, systemVcHardwareFlashSize=systemVcHardwareFlashSize, systemServicesBluetoothEntry=systemServicesBluetoothEntry, systemVcHardwareUbootVersion=systemVcHardwareUbootVersion, systemVcHardwareGroup=systemVcHardwareGroup, CommandPercentComplete=CommandPercentComplete, systemFileSystemFileDateTime=systemFileSystemFileDateTime, systemBlueToothServices=systemBlueToothServices, systemHardwareUbootMinibootVersion=systemHardwareUbootMinibootVersion, systemSwitchLoggingApplicationTable=systemSwitchLoggingApplicationTable, systemHardware=systemHardware, systemUpdateErrorCode=systemUpdateErrorCode, systemFileSystemFileEntry=systemFileSystemFileEntry, systemServicesKtraceLevelAppId=systemServicesKtraceLevelAppId, systemServicesArg5=systemServicesArg5, systemSwitchLoggingDgHostIpAddr=systemSwitchLoggingDgHostIpAddr, systemServicesTimezoneEndMonth=systemServicesTimezoneEndMonth, alcatelIND1SystemMIBTrapObjects=alcatelIND1SystemMIBTrapObjects, alcatelIND1SystemMIBTraps=alcatelIND1SystemMIBTraps, systemSwitchLoggingUserCommandStatus=systemSwitchLoggingUserCommandStatus, alcatelIND1SystemMIB=alcatelIND1SystemMIB, systemSwitchLoggingVrf=systemSwitchLoggingVrf, systemSwitchLoggingEnable=systemSwitchLoggingEnable, systemSwitchLoggingPreamble=systemSwitchLoggingPreamble, systemSwitchLogging=systemSwitchLogging, systemBootParams=systemBootParams, systemHardwareMinorFpgaVersion=systemHardwareMinorFpgaVersion, systemServicesBluetoothStatus=systemServicesBluetoothStatus, systemSwitchLoggingHostv6Status=systemSwitchLoggingHostv6Status, systemSwlogName=systemSwlogName, systemServicesGroup=systemServicesGroup, systemSwlogSizeTrap=systemSwlogSizeTrap, systemSwitchLoggingHostEntry=systemSwitchLoggingHostEntry, systemServicesTimezoneEndDay=systemServicesTimezoneEndDay, systemHardwareJumperRunExtendedMemoryDiagnostics=systemHardwareJumperRunExtendedMemoryDiagnostics, systemServicesMemMonitorEnable=systemServicesMemMonitorEnable, systemServicesKtraceLevelTable=systemServicesKtraceLevelTable, systemDNSNsIPv6Addr1=systemDNSNsIPv6Addr1, systemSwitchLoggingHostv6Table=systemSwitchLoggingHostv6Table, systemSwitchLoggingGroup=systemSwitchLoggingGroup, systemHardwareRevisionRegister=systemHardwareRevisionRegister, alcatelIND1SystemMIBCompliances=alcatelIND1SystemMIBCompliances, systemSwitchLoggingFileSize=systemSwitchLoggingFileSize, systemFileSystemFileIndex=systemFileSystemFileIndex, systemServicesSystraceLevelAppId=systemServicesSystraceLevelAppId, systemServicesDate=systemServicesDate, systemUpdateStatusEntry=systemUpdateStatusEntry, systemDNS=systemDNS, systemHardwareFpgaVersionTable=systemHardwareFpgaVersionTable, systemServicesEnableDST=systemServicesEnableDST, systemSwitchLoggingDgHostIndex=systemSwitchLoggingDgHostIndex, systemServicesArg9=systemServicesArg9, systemSwitchLoggingTty=systemSwitchLoggingTty, systemServicesUsbEnable=systemServicesUsbEnable, systemServicesArchiveAttr=systemServicesArchiveAttr, systemHardwareFpgaVersionIndex=systemHardwareFpgaVersionIndex, systemServicesKtraceEnable=systemServicesKtraceEnable, systemHardwareDefaultMiniBootVersion=systemHardwareDefaultMiniBootVersion, systemHardwareBackupMiniBootVersion=systemHardwareBackupMiniBootVersion, systemDNSDomainName=systemDNSDomainName, systemHardwareMemoryMfg=systemHardwareMemoryMfg, systemServicesTimezoneEndWeek=systemServicesTimezoneEndWeek, systemServicesResultString=systemServicesResultString, systemVcHardwareCpuModel=systemVcHardwareCpuModel, systemSwitchLoggingHostStatus=systemSwitchLoggingHostStatus, systemMicrocodePackageDescription=systemMicrocodePackageDescription, systemServicesArchiveType=systemServicesArchiveType, systemFileSystemFileTable=systemFileSystemFileTable, systemVcHardwareCpuVendor=systemVcHardwareCpuVendor, systemServicesBluetoothTable=systemServicesBluetoothTable, systemFipsOperState=systemFipsOperState, systemServicesArg6=systemServicesArg6, systemServicesArg3=systemServicesArg3, systemServicesActionPercentComplete=systemServicesActionPercentComplete, systemMicrocodeLoadedName=systemMicrocodeLoadedName)
