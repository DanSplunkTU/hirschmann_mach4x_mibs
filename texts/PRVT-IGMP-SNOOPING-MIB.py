#
# PySNMP MIB module PRVT-IGMP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-IGMP-SNOOPING-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 14:34:21 2021
# On host fv-az39-900 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Counter64, MibIdentifier, TimeTicks, iso, Integer32, NotificationType, ObjectIdentity, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "MibIdentifier", "TimeTicks", "iso", "Integer32", "NotificationType", "ObjectIdentity", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
prvtIgmpSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 135))
prvtIgmpSnoopingMIB.setRevisions(('2010-02-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtIgmpSnoopingMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtIgmpSnoopingMIB.setLastUpdated('201002030000Z')
if mibBuilder.loadTexts: prvtIgmpSnoopingMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtIgmpSnoopingMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtIgmpSnoopingMIB.setDescription('Prvt IGMP Snooping MIB')
prvtIgmpSnoopMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1))
prvtIgmpSnoopObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1))
prvtIgmpSnoopCfgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1), )
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTable.setDescription('A table containing configuration required for each VLAN')
prvtIgmpSnoopCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgSvcType"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgSvcId"))
if mibBuilder.loadTexts: prvtIgmpSnoopCfgEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgEntry.setDescription('The configuration related to a specific VLAN.')
prvtIgmpSnoopCfgSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vlan", 1), ("vpls", 2), ("dot1q", 3), ("tls", 4))))
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSvcType.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSvcType.setDescription('The Service Type')
prvtIgmpSnoopCfgSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)))
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSvcId.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSvcId.setDescription('The Service ID.')
prvtIgmpSnoopCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgRowStatus.setDescription('The RowStatus entry for this VLAN.')
prvtIgmpSnoopCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgEnable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgEnable.setDescription("Set to 'true' to enable IGMP snooping.")
prvtIgmpSnoopCfgRouterAlertCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgRouterAlertCheck.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgRouterAlertCheck.setDescription("Set to 'true' to enable checking of the router\n         alert flags and drop the packet if it is not set.")
prvtIgmpSnoopCfgIpTosCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIpTosCheck.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIpTosCheck.setDescription('Check IP tos and drop the packet if it is not set')
prvtIgmpSnoopCfgFloodOnFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgFloodOnFlush.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgFloodOnFlush.setDescription("Set to 'true' to enable flooding of unknown\n         multicast traffic when a VFDB flush event occurs.")
prvtIgmpSnoopCfgTmrRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrRobustness.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrRobustness.setDescription('The robustness value to use for this VLAN.')
prvtIgmpSnoopCfgTmrQIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrQIntvl.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrQIntvl.setDescription('The query interval to use for this VLAN .')
prvtIgmpSnoopCfgTmrQRespIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrQRespIntvl.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrQRespIntvl.setDescription('The query response interval to use for this VLAN.')
prvtIgmpSnoopCfgTmrLastMbrQIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrLastMbrQIntvl.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgTmrLastMbrQIntvl.setDescription('The last member query interval to use for this VLAN.')
prvtIgmpSnoopCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transparent", 0), ("report-suppression", 1), ("proxy", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgMode.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgMode.setDescription('Configure IGMP Snooping v3 operational mode')
prvtIgmpSnoopCfgSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSourceAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgSourceAddr.setDescription('Specify source IP address for Queries and Reports')
prvtIgmpSnoopCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2), )
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfTable.setDescription('A table containing configuration required for each interface.')
prvtIgmpSnoopCfgIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgSvcType"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgSvcId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfType"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"))
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfEntry.setDescription('The configuration related to a specific interface.')
prvtIgmpSnoopCfgIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("port", 1), ("sap", 2), ("spoke-sdp", 3), ("mesh-sdp", 4))))
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfType.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfType.setDescription('Interface type.')
prvtIgmpSnoopCfgIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 2), OctetString())
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfName.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfName.setDescription('Interface name.')
prvtIgmpSnoopCfgIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfRowStatus.setDescription('The RowStatus entry for this interface.')
prvtIgmpSnoopCfgIfMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMaxGroups.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMaxGroups.setDescription('The maximum number of groups permitted on this interface.')
prvtIgmpSnoopCfgIfMRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMRouter.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMRouter.setDescription("Set to 'true' to configure this interface as a multicast router\n         port (i.e. a port connected to a multicast router).")
prvtIgmpSnoopCfgIfMRouterBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMRouterBlock.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMRouterBlock.setDescription("Set to 'true' to prevent this interface from becoming a multicast router port.")
prvtIgmpSnoopCfgIfExplctTracking = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfExplctTracking.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfExplctTracking.setDescription("Set to 'true' to enable explicit tracking of the membership\n         of all multicast hosts.")
prvtIgmpSnoopCfgIfFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfFastLeave.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfFastLeave.setDescription("Set to 'true' to enable fast-leave mode on this interface.")
prvtIgmpSnoopCfgIfReportBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfReportBlock.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfReportBlock.setDescription('Deny entry of IGMP reports to local IGMP database (disable IGMP)')
prvtIgmpSnoopCfgIfForceFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfForceFwd.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfForceFwd.setDescription('Forward IGMP control packets between Mesh SDPs/Secured SAPs')
prvtIgmpSnoopCfgIfMrtAllowRprts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMrtAllowRprts.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfMrtAllowRprts.setDescription('Allow processing of Reports on MRouter port')
prvtIgmpSnoopCfgIfQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 2, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfQuerier.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCfgIfQuerier.setDescription('Send IGMPv2 General Query when interface becomes up.')
prvtIgmpSnoopDbGrpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpTable.setDescription('A table containing multicast groups.')
prvtIgmpSnoopDbGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpIpAddr"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpEntry.setDescription('Information about a specific multicast group.')
prvtIgmpSnoopDbGrpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpIpAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpIpAddr.setDescription('The IP address of the multicast group.')
prvtIgmpSnoopDbGrpBitFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpBitFlags.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpBitFlags.setDescription('The bit flags of this multicast group..')
prvtIgmpSnoopDbGrpFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2), ("toInclude", 3), ("toExclude", 4), ("allow", 5), ("block", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpFilterMode.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpFilterMode.setDescription('The IGMPv3 filter mode of this multicast group.')
prvtIgmpSnoopDbGrpExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpExpireTime.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpExpireTime.setDescription('The expiry time for this multicast group.')
prvtIgmpSnoopDbGrpHostTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 4), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostTable.setDescription('A table containing the hosts belonging to multicast groups.')
prvtIgmpSnoopDbGrpHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 4, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpIpAddr"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpHostSourceIp"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostEntry.setDescription('Information about a specific host.')
prvtIgmpSnoopDbGrpHostSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostSourceIp.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostSourceIp.setDescription('The source IP address of the host to which this row applies.')
prvtIgmpSnoopDbGrpHostExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostExpireTime.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpHostExpireTime.setDescription('The expiry time for this host.')
prvtIgmpSnoopDbGrpSrcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 5), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcTable.setDescription('A table containing the sources of multicast groups.')
prvtIgmpSnoopDbGrpSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 5, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpIpAddr"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpSrcIpAddr"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcEntry.setDescription('Information about a specific source.')
prvtIgmpSnoopDbGrpSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcIpAddr.setDescription('The IP address of the multicast source to which this row applies.')
prvtIgmpSnoopDbGrpSrcExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcExpTime.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcExpTime.setDescription('The expiry time for this multicast source.')
prvtIgmpSnoopDbGrpSrcHostTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 6), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostTable.setDescription('A table containing the hosts listening to each multicast source.')
prvtIgmpSnoopDbGrpSrcHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 6, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpIpAddr"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpSrcIpAddr"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpSrcHostIp"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostEntry.setDescription('Information about a specific host.')
prvtIgmpSnoopDbGrpSrcHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostIp.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostIp.setDescription('The IP of the host to which this row applies.')
prvtIgmpSnoopDbGrpSrcHostExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostExpTime.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpSrcHostExpTime.setDescription('The expiry time for this host.')
prvtIgmpSnoopDbMrtrTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 7), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrTable.setDescription('A table containing information about multicast routers.')
prvtIgmpSnoopDbMrtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 7, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbMrtrSrcIp"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrEntry.setDescription('Information about a specific multicast router.')
prvtIgmpSnoopDbMrtrSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrSrcIp.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrSrcIp.setDescription('The source IP address of the multicast router.')
prvtIgmpSnoopDbMrtrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrFlags.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrFlags.setDescription('Bit flags pertaining to this multicst router.')
prvtIgmpSnoopDbMrtrExpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrExpTime.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbMrtrExpTime.setDescription('The expiry time for this multicast router.')
prvtIgmpSnoopDbGrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsTable.setDescription('A table containing discarded packets for each VLAN')
prvtIgmpSnoopDbGrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsEntry.setDescription('Something something')
prvtIgmpSnoopDbGrpStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsVlanId.setDescription('The Vlan ID.')
prvtIgmpSnoopDbGrpStatsDscPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPkt.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPkt.setDescription('The number of Discarded packets.')
prvtIgmpSnoopDbGrpStatsDscPktTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktTtl.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktTtl.setDescription('The number of Discarded TTL packets.')
prvtIgmpSnoopDbGrpStatsDscPktChk = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktChk.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktChk.setDescription('The number of Discarded Checksum packets.')
prvtIgmpSnoopDbGrpStatsDscPktRA = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktRA.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbGrpStatsDscPktRA.setDescription('The number of Discarded Router Alert packets.')
prvtIgmpSnoopDbIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9), )
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsTable.setDescription('A table containing statistics for each interface.')
prvtIgmpSnoopDbIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbGrpStatsVlanId"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopDbIfStatsIfName"))
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsEntry.setDescription('Information about a specific interface.')
prvtIgmpSnoopDbIfStatsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 1), OctetString())
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsIfName.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsIfName.setDescription('Interface name.')
prvtIgmpSnoopDbIfStatsV2Reports = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV2Reports.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV2Reports.setDescription('The number of IGMP Snooping V2 reports.')
prvtIgmpSnoopDbIfStatsV2Leaves = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV2Leaves.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV2Leaves.setDescription('The number of IGMP Snooping V2 leaves.')
prvtIgmpSnoopDbIfStatsV3Reports = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV3Reports.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsV3Reports.setDescription('The number of IGMP Snooping V3 reports.')
prvtIgmpSnoopDbIfStatsGenQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsGenQueries.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsGenQueries.setDescription('The number of IGMP Snooping general queries.')
prvtIgmpSnoopDbIfStatsGrpQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsGrpQueries.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsGrpQueries.setDescription('The number of IGMP Snooping group-specific queries.')
prvtIgmpSnoopDbIfStatsSrcQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsSrcQueries.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDbIfStatsSrcQueries.setDescription('The number of IGMP Snooping group-and-source-specific queries.')
prvtIgmpSnoopMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10), )
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryTable.setDescription('A table containing information about IGMP Snooping memory pools.')
prvtIgmpSnoopMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMemoryPoolId"))
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryEntry.setDescription('Information about a specific memory pool.')
prvtIgmpSnoopMemoryPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryPoolId.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryPoolId.setDescription('Uniquely identifies a memory pool item.')
prvtIgmpSnoopMemoryPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryPoolName.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryPoolName.setDescription('Memory pool name.')
prvtIgmpSnoopMemoryTaken = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryTaken.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryTaken.setDescription('Taken memory.')
prvtIgmpSnoopMemoryFree = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryFree.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryFree.setDescription('Free memory.')
prvtIgmpSnoopMemoryToAllocate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryToAllocate.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryToAllocate.setDescription('Memory to allocate.')
prvtIgmpSnoopMemoryInitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryInitCount.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryInitCount.setDescription('Initialization count.')
prvtIgmpSnoopMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemorySize.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemorySize.setDescription('Memory size.')
prvtIgmpSnoopMemoryAllAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryAllAllocated.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMemoryAllAllocated.setDescription('All allocated memory.')
prvtIgmpSnoopApplStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11))
prvtIgmpSnoopCapturedPckts = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopCapturedPckts.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCapturedPckts.setDescription('The number of captured packets.')
prvtIgmpSnoopCapturedReports = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopCapturedReports.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopCapturedReports.setDescription('The number of captured reports.')
prvtIgmpSnoopUniqueSources = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueSources.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueSources.setDescription('The number of unique sources.')
prvtIgmpSnoopUniqueGroupRecords = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueGroupRecords.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueGroupRecords.setDescription('The number of unique group records.')
prvtIgmpSnoopDuplicateSources = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateSources.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateSources.setDescription('The number of duplicate sources.')
prvtIgmpSnoopDuplicateGrpRecs = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateGrpRecs.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateGrpRecs.setDescription('The number of duplicate group records.')
prvtIgmpSnoopUniqueMacs = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueMacs.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueMacs.setDescription('The number of unique MACs.')
prvtIgmpSnoopDuplicateMacs = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateMacs.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateMacs.setDescription('The number of duplicate MACs.')
prvtIgmpSnoopUniqueHsis = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueHsis.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopUniqueHsis.setDescription('The number of unique HSIs.')
prvtIgmpSnoopDuplicateHsis = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 1, 11, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateHsis.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopDuplicateHsis.setDescription('The number of duplicate HSIs.')
prvtIgmpSnoopMvrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3))
prvtIgmpSnoopMvrShutdown = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrShutdown.setDescription("Set to 'true' to shutdown the multicast VLAN registration.")
prvtIgmpSnoopMvrMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrMode.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrMode.setDescription('The Multicast VLAN registration mode.')
prvtIgmpSnoopMvrVlan = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrVlan.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrVlan.setDescription('The MVR VLAN.')
prvtIgmpSnoopMvrSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrSrcIp.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrSrcIp.setDescription('The MVR IP address.')
prvtIgmpSnoopMvrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 10), )
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpTable.setDescription('A table containing the MVR static multicast groups.')
prvtIgmpSnoopMvrGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 10, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpName"))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpEntry.setDescription('The configuration related to a MVR multicast group.')
prvtIgmpSnoopMvrGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpName.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpName.setDescription("A string uniquely identifying a MVR multicast group.\n         Acceptable characters are a-z, A-Z, 0-9, '\\', ']', '^', '_'.")
prvtIgmpSnoopMvrGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpRowStatus.setDescription('The RowStatus entry for this group.')
prvtIgmpSnoopMvrGrpAsmTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11), )
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmTable.setDescription('A table containing the MVR all-sources multicast groups.')
prvtIgmpSnoopMvrGrpAsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpAsmIndex"))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmEntry.setDescription('The configuration related to a specific group.')
prvtIgmpSnoopMvrGrpAsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmIndex.setDescription('Uniquely identifies an all-source multicast group.')
prvtIgmpSnoopMvrGrpAsmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmRowStatus.setDescription('The RowStatus entry for this group.')
prvtIgmpSnoopMvrGrpAsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmAddr.setDescription('In combination with prvtIgmpSnoopMvrGrpAsmCount, defines a\n         range of IP addresses belonging to the multicast group.')
prvtIgmpSnoopMvrGrpAsmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmCount.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpAsmCount.setDescription('In combination with prvtIgmpSnoopMvrGrpAsmAddr, defines a\n         range of IP addresses belonging to the multicast group.')
prvtIgmpSnoopMvrGrpSsmTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12), )
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmTable.setDescription('A table containg the MVR source-specific multicast groups.')
prvtIgmpSnoopMvrGrpSsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpSsmIndex"))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmEntry.setDescription('The configuration related to a specific group.')
prvtIgmpSnoopMvrGrpSsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmIndex.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmIndex.setDescription('Uniquely identifies a source-specific multicast group.')
prvtIgmpSnoopMvrGrpSsmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmRowStatus.setDescription('The RowStatus entry for this group.')
prvtIgmpSnoopMvrGrpSsmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmAddr.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmAddr.setDescription('The multicast IP address of this group.')
prvtIgmpSnoopMvrGrpSsmSrcList = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmSrcList.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmSrcList.setDescription('A list of the source IP addresses belonging to this group.\n         Entries in the list are expressed in ASCII dot-decimal notation (a.c.b.d)\n         separated from other entries by a space.')
prvtIgmpSnoopMvrGrpSsmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmMode.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrGrpSsmMode.setDescription('The mode for this multicast group.')
prvtIgmpSnoopMvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13), )
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortTable.setDescription('A table containing MVR port-specific configuration.')
prvtIgmpSnoopMvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortEntry.setDescription('The configuration related to a specific MVR port.')
prvtIgmpSnoopMvrPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortRowStatus.setDescription('The RowStatus entry for this MVR port.')
prvtIgmpSnoopMvrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source", 1), ("receiver", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortType.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortType.setDescription('The type of port.')
prvtIgmpSnoopMvrPortExpTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortExpTrack.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortExpTrack.setDescription("Set to 'true' to enable explicit tracking of the memberhip\n         of all multicast hosts.")
prvtIgmpSnoopMvrPortFastLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 13, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortFastLeave.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortFastLeave.setDescription("Set to 'true' to enable fast-leave mode.")
prvtIgmpSnoopMvrPortMcGrpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 14), )
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpTable.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpTable.setDescription('A table containing the multicast groups that are to be forwarded to a port.')
prvtIgmpSnoopMvrPortMcGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 14, 1), ).setIndexNames((0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopCfgIfName"), (0, "PRVT-IGMP-SNOOPING-MIB", "prvtIgmpSnoopMvrGrpName"))
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpEntry.setDescription('A row belonging to prvtIgmpSnoopMvrPortMcGrpTable.')
prvtIgmpSnoopMvrPortMcGrpRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 135, 1, 3, 14, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpRStatus.setStatus('current')
if mibBuilder.loadTexts: prvtIgmpSnoopMvrPortMcGrpRStatus.setDescription('The RowStatus entry for this multicast group.')
mibBuilder.exportSymbols("PRVT-IGMP-SNOOPING-MIB", prvtIgmpSnoopDbIfStatsGenQueries=prvtIgmpSnoopDbIfStatsGenQueries, prvtIgmpSnoopCfgIpTosCheck=prvtIgmpSnoopCfgIpTosCheck, prvtIgmpSnoopDbGrpStatsDscPktChk=prvtIgmpSnoopDbGrpStatsDscPktChk, prvtIgmpSnoopDbIfStatsSrcQueries=prvtIgmpSnoopDbIfStatsSrcQueries, prvtIgmpSnoopCfgIfType=prvtIgmpSnoopCfgIfType, prvtIgmpSnoopDbGrpHostTable=prvtIgmpSnoopDbGrpHostTable, prvtIgmpSnoopMvrGrpSsmRowStatus=prvtIgmpSnoopMvrGrpSsmRowStatus, prvtIgmpSnoopCfgIfReportBlock=prvtIgmpSnoopCfgIfReportBlock, prvtIgmpSnoopDbGrpStatsEntry=prvtIgmpSnoopDbGrpStatsEntry, prvtIgmpSnoopDbGrpSrcHostTable=prvtIgmpSnoopDbGrpSrcHostTable, prvtIgmpSnoopMemoryFree=prvtIgmpSnoopMemoryFree, prvtIgmpSnoopCfgTmrQRespIntvl=prvtIgmpSnoopCfgTmrQRespIntvl, prvtIgmpSnoopDbIfStatsTable=prvtIgmpSnoopDbIfStatsTable, prvtIgmpSnoopDbGrpStatsVlanId=prvtIgmpSnoopDbGrpStatsVlanId, prvtIgmpSnoopMvrPortFastLeave=prvtIgmpSnoopMvrPortFastLeave, prvtIgmpSnoopMvrGrpSsmAddr=prvtIgmpSnoopMvrGrpSsmAddr, prvtIgmpSnoopDbGrpSrcHostEntry=prvtIgmpSnoopDbGrpSrcHostEntry, prvtIgmpSnoopDbGrpFilterMode=prvtIgmpSnoopDbGrpFilterMode, prvtIgmpSnoopCfgIfExplctTracking=prvtIgmpSnoopCfgIfExplctTracking, prvtIgmpSnoopMemoryTaken=prvtIgmpSnoopMemoryTaken, prvtIgmpSnoopCfgSvcType=prvtIgmpSnoopCfgSvcType, prvtIgmpSnoopMvrGrpTable=prvtIgmpSnoopMvrGrpTable, prvtIgmpSnoopCfgIfForceFwd=prvtIgmpSnoopCfgIfForceFwd, prvtIgmpSnoopMvrGrpAsmIndex=prvtIgmpSnoopMvrGrpAsmIndex, prvtIgmpSnoopDbMrtrEntry=prvtIgmpSnoopDbMrtrEntry, prvtIgmpSnoopMemoryInitCount=prvtIgmpSnoopMemoryInitCount, prvtIgmpSnoopDbGrpIpAddr=prvtIgmpSnoopDbGrpIpAddr, prvtIgmpSnoopCfgMode=prvtIgmpSnoopCfgMode, prvtIgmpSnoopDbMrtrSrcIp=prvtIgmpSnoopDbMrtrSrcIp, prvtIgmpSnoopDuplicateSources=prvtIgmpSnoopDuplicateSources, prvtIgmpSnoopMvrPortExpTrack=prvtIgmpSnoopMvrPortExpTrack, prvtIgmpSnoopMvrGrpSsmMode=prvtIgmpSnoopMvrGrpSsmMode, prvtIgmpSnoopDbGrpSrcExpTime=prvtIgmpSnoopDbGrpSrcExpTime, prvtIgmpSnoopCfgTmrQIntvl=prvtIgmpSnoopCfgTmrQIntvl, prvtIgmpSnoopMvrPortType=prvtIgmpSnoopMvrPortType, prvtIgmpSnoopDbIfStatsV3Reports=prvtIgmpSnoopDbIfStatsV3Reports, prvtIgmpSnoopDbGrpSrcTable=prvtIgmpSnoopDbGrpSrcTable, prvtIgmpSnoopMvrGrpRowStatus=prvtIgmpSnoopMvrGrpRowStatus, prvtIgmpSnoopUniqueSources=prvtIgmpSnoopUniqueSources, prvtIgmpSnoopMemoryPoolId=prvtIgmpSnoopMemoryPoolId, prvtIgmpSnoopUniqueHsis=prvtIgmpSnoopUniqueHsis, prvtIgmpSnoopCfgIfFastLeave=prvtIgmpSnoopCfgIfFastLeave, prvtIgmpSnoopMvrShutdown=prvtIgmpSnoopMvrShutdown, prvtIgmpSnoopCfgIfMrtAllowRprts=prvtIgmpSnoopCfgIfMrtAllowRprts, prvtIgmpSnoopCfgIfMaxGroups=prvtIgmpSnoopCfgIfMaxGroups, prvtIgmpSnoopCfgIfQuerier=prvtIgmpSnoopCfgIfQuerier, prvtIgmpSnoopCfgIfName=prvtIgmpSnoopCfgIfName, prvtIgmpSnoopDbGrpEntry=prvtIgmpSnoopDbGrpEntry, prvtIgmpSnoopDbGrpSrcEntry=prvtIgmpSnoopDbGrpSrcEntry, prvtIgmpSnoopDbGrpStatsDscPktTtl=prvtIgmpSnoopDbGrpStatsDscPktTtl, prvtIgmpSnoopDbIfStatsGrpQueries=prvtIgmpSnoopDbIfStatsGrpQueries, prvtIgmpSnoopMvrGrpEntry=prvtIgmpSnoopMvrGrpEntry, prvtIgmpSnoopingMIB=prvtIgmpSnoopingMIB, prvtIgmpSnoopMvrGrpSsmSrcList=prvtIgmpSnoopMvrGrpSsmSrcList, prvtIgmpSnoopMvrPortRowStatus=prvtIgmpSnoopMvrPortRowStatus, prvtIgmpSnoopDbIfStatsIfName=prvtIgmpSnoopDbIfStatsIfName, prvtIgmpSnoopCfgFloodOnFlush=prvtIgmpSnoopCfgFloodOnFlush, prvtIgmpSnoopDbGrpStatsDscPkt=prvtIgmpSnoopDbGrpStatsDscPkt, prvtIgmpSnoopMvrGrpSsmIndex=prvtIgmpSnoopMvrGrpSsmIndex, prvtIgmpSnoopDbGrpSrcIpAddr=prvtIgmpSnoopDbGrpSrcIpAddr, prvtIgmpSnoopDbIfStatsEntry=prvtIgmpSnoopDbIfStatsEntry, prvtIgmpSnoopCfgSourceAddr=prvtIgmpSnoopCfgSourceAddr, prvtIgmpSnoopUniqueMacs=prvtIgmpSnoopUniqueMacs, prvtIgmpSnoopMIBObjects=prvtIgmpSnoopMIBObjects, prvtIgmpSnoopDuplicateMacs=prvtIgmpSnoopDuplicateMacs, prvtIgmpSnoopCfgIfTable=prvtIgmpSnoopCfgIfTable, prvtIgmpSnoopMvrGrpAsmEntry=prvtIgmpSnoopMvrGrpAsmEntry, prvtIgmpSnoopDbGrpSrcHostIp=prvtIgmpSnoopDbGrpSrcHostIp, prvtIgmpSnoopMvrGrpSsmEntry=prvtIgmpSnoopMvrGrpSsmEntry, prvtIgmpSnoopCapturedPckts=prvtIgmpSnoopCapturedPckts, prvtIgmpSnoopMemoryPoolName=prvtIgmpSnoopMemoryPoolName, prvtIgmpSnoopMvrSrcIp=prvtIgmpSnoopMvrSrcIp, prvtIgmpSnoopCfgIfRowStatus=prvtIgmpSnoopCfgIfRowStatus, prvtIgmpSnoopDbGrpBitFlags=prvtIgmpSnoopDbGrpBitFlags, prvtIgmpSnoopCfgTmrRobustness=prvtIgmpSnoopCfgTmrRobustness, prvtIgmpSnoopDbIfStatsV2Leaves=prvtIgmpSnoopDbIfStatsV2Leaves, prvtIgmpSnoopDbIfStatsV2Reports=prvtIgmpSnoopDbIfStatsV2Reports, prvtIgmpSnoopDbGrpHostExpireTime=prvtIgmpSnoopDbGrpHostExpireTime, prvtIgmpSnoopDbMrtrExpTime=prvtIgmpSnoopDbMrtrExpTime, prvtIgmpSnoopCfgRowStatus=prvtIgmpSnoopCfgRowStatus, prvtIgmpSnoopCapturedReports=prvtIgmpSnoopCapturedReports, prvtIgmpSnoopApplStatsObjects=prvtIgmpSnoopApplStatsObjects, prvtIgmpSnoopDbGrpSrcHostExpTime=prvtIgmpSnoopDbGrpSrcHostExpTime, PYSNMP_MODULE_ID=prvtIgmpSnoopingMIB, prvtIgmpSnoopCfgEntry=prvtIgmpSnoopCfgEntry, prvtIgmpSnoopMvrPortMcGrpEntry=prvtIgmpSnoopMvrPortMcGrpEntry, prvtIgmpSnoopUniqueGroupRecords=prvtIgmpSnoopUniqueGroupRecords, prvtIgmpSnoopCfgTmrLastMbrQIntvl=prvtIgmpSnoopCfgTmrLastMbrQIntvl, prvtIgmpSnoopMvrGrpName=prvtIgmpSnoopMvrGrpName, prvtIgmpSnoopMvrGrpSsmTable=prvtIgmpSnoopMvrGrpSsmTable, prvtIgmpSnoopDbGrpStatsDscPktRA=prvtIgmpSnoopDbGrpStatsDscPktRA, prvtIgmpSnoopCfgTable=prvtIgmpSnoopCfgTable, prvtIgmpSnoopDbGrpHostEntry=prvtIgmpSnoopDbGrpHostEntry, prvtIgmpSnoopDbGrpTable=prvtIgmpSnoopDbGrpTable, prvtIgmpSnoopDuplicateHsis=prvtIgmpSnoopDuplicateHsis, prvtIgmpSnoopMvrGrpAsmRowStatus=prvtIgmpSnoopMvrGrpAsmRowStatus, prvtIgmpSnoopMvrPortTable=prvtIgmpSnoopMvrPortTable, prvtIgmpSnoopCfgRouterAlertCheck=prvtIgmpSnoopCfgRouterAlertCheck, prvtIgmpSnoopMvrGrpAsmCount=prvtIgmpSnoopMvrGrpAsmCount, prvtIgmpSnoopMvrPortEntry=prvtIgmpSnoopMvrPortEntry, prvtIgmpSnoopMvrObjects=prvtIgmpSnoopMvrObjects, prvtIgmpSnoopObjects=prvtIgmpSnoopObjects, prvtIgmpSnoopCfgIfEntry=prvtIgmpSnoopCfgIfEntry, prvtIgmpSnoopMvrGrpAsmAddr=prvtIgmpSnoopMvrGrpAsmAddr, prvtIgmpSnoopCfgSvcId=prvtIgmpSnoopCfgSvcId, prvtIgmpSnoopDbGrpHostSourceIp=prvtIgmpSnoopDbGrpHostSourceIp, prvtIgmpSnoopMemoryTable=prvtIgmpSnoopMemoryTable, prvtIgmpSnoopMvrMode=prvtIgmpSnoopMvrMode, prvtIgmpSnoopDuplicateGrpRecs=prvtIgmpSnoopDuplicateGrpRecs, prvtIgmpSnoopDbMrtrTable=prvtIgmpSnoopDbMrtrTable, prvtIgmpSnoopMemoryAllAllocated=prvtIgmpSnoopMemoryAllAllocated, prvtIgmpSnoopDbGrpExpireTime=prvtIgmpSnoopDbGrpExpireTime, prvtIgmpSnoopCfgEnable=prvtIgmpSnoopCfgEnable, prvtIgmpSnoopMemoryEntry=prvtIgmpSnoopMemoryEntry, prvtIgmpSnoopMvrGrpAsmTable=prvtIgmpSnoopMvrGrpAsmTable, prvtIgmpSnoopCfgIfMRouter=prvtIgmpSnoopCfgIfMRouter, prvtIgmpSnoopDbMrtrFlags=prvtIgmpSnoopDbMrtrFlags, prvtIgmpSnoopMemoryToAllocate=prvtIgmpSnoopMemoryToAllocate, prvtIgmpSnoopDbGrpStatsTable=prvtIgmpSnoopDbGrpStatsTable, prvtIgmpSnoopMvrPortMcGrpRStatus=prvtIgmpSnoopMvrPortMcGrpRStatus, prvtIgmpSnoopMemorySize=prvtIgmpSnoopMemorySize, prvtIgmpSnoopCfgIfMRouterBlock=prvtIgmpSnoopCfgIfMRouterBlock, prvtIgmpSnoopMvrVlan=prvtIgmpSnoopMvrVlan, prvtIgmpSnoopMvrPortMcGrpTable=prvtIgmpSnoopMvrPortMcGrpTable)
