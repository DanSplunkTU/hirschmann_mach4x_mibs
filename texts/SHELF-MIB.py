#
# PySNMP MIB module SHELF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/SHELF-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 17:19:53 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
Severity, SagemBoolean = mibBuilder.importSymbols("EQUIPMENT-MIB", "Severity", "SagemBoolean")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, Gauge32, Bits, MibIdentifier, iso, TimeTicks, Unsigned32, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "Gauge32", "Bits", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
shelf = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 150))
if mibBuilder.loadTexts: shelf.setLastUpdated('0012060000Z')
if mibBuilder.loadTexts: shelf.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
if mibBuilder.loadTexts: shelf.setContactInfo('')
if mibBuilder.loadTexts: shelf.setDescription('The MIB module specific for ADR equipment')
led = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 2))
holdTime = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 3))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 20))
boardList = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 30))
softInv = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 40))
hardInv = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 50))
laser = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 100))
eow = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 150, 120))
boardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardNumber.setStatus('current')
if mibBuilder.loadTexts: boardNumber.setDescription('Number of board in equipment.')
boardTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2), )
if mibBuilder.loadTexts: boardTable.setStatus('current')
if mibBuilder.loadTexts: boardTable.setDescription('List of board in equipment.')
boardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1), ).setIndexNames((0, "SHELF-MIB", "boardIndex"))
if mibBuilder.loadTexts: boardEntry.setStatus('current')
if mibBuilder.loadTexts: boardEntry.setDescription('A particular board of the equipment.')
class ProtectionType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("cardp", 1))

class BoardFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("missing", 1), ("mismatch", 2), ("defective", 3))

boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardIndex.setStatus('current')
if mibBuilder.loadTexts: boardIndex.setDescription('A unique value which identify a particular slot.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to hardware.\n\tEach equipment maintain its own pool of values:\n\tex ADR155c : A = 1, B = 2, ... M = 5, Fan = 6\n\tex ADR2500c: Fan = 1, PSU1 = 2, ...Trib1 = 8, Trib6= 13, Line1 = 14,... \n\t\t\t\t\tSwitch2 = 17, Shelf = 18')
boardSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSlotName.setStatus('current')
if mibBuilder.loadTexts: boardSlotName.setDescription('A DisplayString which identify the name of a particular slot.\n   Its value is fixed at equipment design time. \n   It is usualy related to hardware\n   ex ADR155c : A, B, ... Fan\n   ex ADR2500c: Fan, CCU, CTRL, PSU1, ... TRIB5, .... SWITCH1, ...')
boardExpectType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardExpectType.setStatus('current')
if mibBuilder.loadTexts: boardExpectType.setDescription('A value which configure the expected type. If used, this one must be\n  equal to one of existent boardListIndex for the considerated board. Otherwise,\n  the value is set to 0.   \n  Known types are readable in boardListTable\n  ')
boardInsertType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardInsertType.setStatus('current')
if mibBuilder.loadTexts: boardInsertType.setDescription("When the inserted board doesn't match with the expexted board\n   the boardMismatch failure is generated.\n   The type of the card could be found in hardware inventory.")
boardExpectFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardExpectFamily.setStatus('current')
if mibBuilder.loadTexts: boardExpectFamily.setDescription('Board Family corresponding to the specified expected kind. This value is send by the equipment.\n   ex ADR155c  : \n   ex ADR2500c : CTRL, FAN, AUX, CCU, PSU, STM1 OPT, STM1 ERE, STM4 OPT, STM16 OPT, GBETH, SWITCH\n   ')
boardInsertFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardInsertFamily.setStatus('current')
if mibBuilder.loadTexts: boardInsertFamily.setDescription('Board Family corresponding to the type of inserted board.\n   ex ADR155c  : \n   ex ADR2500c : CTRL, FAN, AUX, CCU, PSU, STM1 OPT, STM1 ERE, STM4 OPT, STM16 OPT, GBETH, SWITCH\n   ')
boardActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardActive.setStatus('current')
if mibBuilder.loadTexts: boardActive.setDescription('When the value of this field is set to false, the transmission of \n   this board stop and the board could properly be extracted')
boardFirstPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirstPortIndex.setStatus('current')
if mibBuilder.loadTexts: boardFirstPortIndex.setDescription('If the card is a card with physical ports, then the value is \n    the first index of a physical interface (SPI, PPI) in the mib \n    SDH-ETS. Else, the value is 0.')
boardProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 9), ProtectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardProtectionType.setStatus('current')
if mibBuilder.loadTexts: boardProtectionType.setDescription("The value of this field indicates the kind of wanted card protection.\n    The default value is NONE.\n    if value is changed in cardP(1)then an entry is created in cardpTable. But this table\n    has to be completed (by setting the cardpReliefIndex,...) to obtain a configured protection. \n    if value is changed in None(0)then the associated entry in cardpTable is deleted.\n    Some cards don't accept any protection. In that case, the value of this field will remain to NONE")
boardMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 10), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMonitor.setStatus('current')
if mibBuilder.loadTexts: boardMonitor.setDescription('When the value of this field is set to false, the failure detection\n   is stopped for this board.')
boardFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 11), BoardFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFailure.setStatus('current')
if mibBuilder.loadTexts: boardFailure.setDescription('Active failures on board')
boardSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 12), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardSeverity.setStatus('current')
if mibBuilder.loadTexts: boardSeverity.setDescription('A reference to failure severity for boards.')
boardMissingSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 13), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMissingSev.setStatus('current')
if mibBuilder.loadTexts: boardMissingSev.setDescription('A reference to failure severity for boards.')
boardMismatchSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 14), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardMismatchSev.setStatus('current')
if mibBuilder.loadTexts: boardMismatchSev.setDescription('A reference to failure severity for boards.')
boardDefectiveSev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 20, 2, 1, 15), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: boardDefectiveSev.setStatus('current')
if mibBuilder.loadTexts: boardDefectiveSev.setDescription('A reference to failure severity for boards.')
boardListNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListNumber.setStatus('current')
if mibBuilder.loadTexts: boardListNumber.setDescription('Number of entry of the boardList Table')
boardListTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2), )
if mibBuilder.loadTexts: boardListTable.setStatus('current')
if mibBuilder.loadTexts: boardListTable.setDescription('List of board type able to be managed by this equipment .\n    In order to manage a new type, just insert the board and if\n    the family match with a known family, this table will be\n    expand automaticaly with the new type inserted\n    \n    The XX fist value defined ( with boardSlotName = Shelf = 18 for ADR2500c)\n    is a list all possible type of boardInsertedType. \n     ')
boardListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1), ).setIndexNames((0, "SHELF-MIB", "boardListIndex"))
if mibBuilder.loadTexts: boardListEntry.setStatus('current')
if mibBuilder.loadTexts: boardListEntry.setDescription('A particular boardList of the equipment.')
boardListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListIndex.setStatus('current')
if mibBuilder.loadTexts: boardListIndex.setDescription('A unique value.')
boardListSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListSlot.setStatus('current')
if mibBuilder.loadTexts: boardListSlot.setDescription('A reference to the corresponding Slot.')
boardListType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 30, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardListType.setStatus('current')
if mibBuilder.loadTexts: boardListType.setDescription('In order to manage a new type, just insert the board and if\n    the family match with a known family, this table will be\n    expand automaticaly with the new type inserted.\n    ex ADR155c :\n    ex ADR2500c: 4S1.1, S4.1, L16.2, SWITCH, ...')
softInventoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 40, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryNumber.setStatus('current')
if mibBuilder.loadTexts: softInventoryNumber.setDescription('Number of entry of the softInventory Table')
softInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2), )
if mibBuilder.loadTexts: softInventoryTable.setStatus('current')
if mibBuilder.loadTexts: softInventoryTable.setDescription('List of software inventory used ')
softInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1), ).setIndexNames((0, "SHELF-MIB", "softInventoryIndex"))
if mibBuilder.loadTexts: softInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: softInventoryEntry.setDescription('A particular boardList of the equipment.')
softInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryIndex.setStatus('current')
if mibBuilder.loadTexts: softInventoryIndex.setDescription('A unique value.')
softInventoryBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryBoard.setStatus('current')
if mibBuilder.loadTexts: softInventoryBoard.setDescription('A reference to the corresponding Slot. This variable is needed because some\n\t boards have their owns Applicative and Boot codes.  ')
softInventoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryType.setStatus('current')
if mibBuilder.loadTexts: softInventoryType.setDescription('Indication of type software')
softInventoryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryCode.setStatus('current')
if mibBuilder.loadTexts: softInventoryCode.setDescription('Indication of version code')
softInventoryExt = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 40, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softInventoryExt.setStatus('current')
if mibBuilder.loadTexts: softInventoryExt.setDescription('Indication of extension code. This one is not mandatory.')
hardInventoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 50, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryNumber.setStatus('current')
if mibBuilder.loadTexts: hardInventoryNumber.setDescription('Number of different hardware inventory in equipment.')
hardInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2), )
if mibBuilder.loadTexts: hardInventoryTable.setStatus('current')
if mibBuilder.loadTexts: hardInventoryTable.setDescription('List of hardware inventory in equipment. \n\t A hardware inventory is a description associed to a \n\t particular card')
hardInventoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1), ).setIndexNames((0, "SHELF-MIB", "hardInventoryIndex"))
if mibBuilder.loadTexts: hardInventoryEntry.setStatus('current')
if mibBuilder.loadTexts: hardInventoryEntry.setDescription('A particular tInv of the equipment.')
hardInventoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryIndex.setStatus('current')
if mibBuilder.loadTexts: hardInventoryIndex.setDescription('Index of the inventory entry that corresponds to a particular slot')
hardInventoryBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryBoard.setStatus('current')
if mibBuilder.loadTexts: hardInventoryBoard.setDescription('Family of card inserted in the slot')
hardInventoryDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 50, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardInventoryDescr.setStatus('current')
if mibBuilder.loadTexts: hardInventoryDescr.setDescription('The content of the inventory: a textual description')
laserNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 100, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserNumber.setStatus('current')
if mibBuilder.loadTexts: laserNumber.setDescription('Number of optical interface in equipment.')
laserTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2), )
if mibBuilder.loadTexts: laserTable.setStatus('current')
if mibBuilder.loadTexts: laserTable.setDescription('List of synchronous physical interface in equipment.')
laserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1), ).setIndexNames((0, "SHELF-MIB", "laserIndex"))
if mibBuilder.loadTexts: laserEntry.setStatus('current')
if mibBuilder.loadTexts: laserEntry.setDescription('A particular synchronous physical interface of the equipment.')
laserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: laserIndex.setStatus('current')
if mibBuilder.loadTexts: laserIndex.setDescription(' ')
laserTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserTxEnable.setStatus('current')
if mibBuilder.loadTexts: laserTxEnable.setDescription('Enable(true) or disable(false) the laser output of the interface.')
laserALSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSEnable.setStatus('current')
if mibBuilder.loadTexts: laserALSEnable.setDescription('Automatic Laser Shutdown enable(true) or disable(false).\n\tWhen enabled, this function cuts the laser output when a los is\n\tdetected on input signal.')
laserALSRestart2s = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSRestart2s.setStatus('current')
if mibBuilder.loadTexts: laserALSRestart2s.setDescription('Operator command to start a one shot emission during 2s.')
laserALSRestart90s = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 100, 2, 1, 5), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: laserALSRestart90s.setStatus('current')
if mibBuilder.loadTexts: laserALSRestart90s.setDescription('Operator command to start a one shot emission during 90s.')
adrHotReset = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 1), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrHotReset.setStatus('current')
if mibBuilder.loadTexts: adrHotReset.setDescription('Software hot reset when this variable is set to TRUE')
class LedStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("green", 2), ("yellow", 3), ("orange", 4), ("red", 5))

class LedType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("status1", 1), ("status2", 2), ("online", 3), ("traffic", 4), ("major", 5), ("minor", 6), ("ether", 7), ("halfFull", 8))

ledNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledNumber.setStatus('current')
if mibBuilder.loadTexts: ledNumber.setDescription('Number of led in equipment.')
ledTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2), )
if mibBuilder.loadTexts: ledTable.setStatus('current')
if mibBuilder.loadTexts: ledTable.setDescription('List of led in equipment.')
ledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1), ).setIndexNames((0, "SHELF-MIB", "ledIndex"))
if mibBuilder.loadTexts: ledEntry.setStatus('current')
if mibBuilder.loadTexts: ledEntry.setDescription('A particular led of the equipment.')
ledIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledIndex.setStatus('current')
if mibBuilder.loadTexts: ledIndex.setDescription('A unique value which identify a particular led.')
ledPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledPosition.setStatus('current')
if mibBuilder.loadTexts: ledPosition.setDescription('A reference to the associated Board on the equipment.')
ledType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 3), LedType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledType.setStatus('current')
if mibBuilder.loadTexts: ledType.setDescription('Type of the Led.')
ledStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 2, 2, 1, 4), LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledStatus.setStatus('current')
if mibBuilder.loadTexts: ledStatus.setDescription('Status of this Led.')
class HoldTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 3, 10, 30))
    namedValues = NamedValues(("hold01sec", 1), ("hold03sec", 3), ("hold10sec", 10), ("hold30sec", 30))

adrFailHoldOffTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 3, 1), HoldTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrFailHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: adrFailHoldOffTime.setDescription('Failure hold off time : the time interval during which the\n\tdefect is present and the failure is not raised')
adrFailHoldOnTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 3, 2), HoldTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adrFailHoldOnTime.setStatus('current')
if mibBuilder.loadTexts: adrFailHoldOnTime.setDescription('Failure hold on time : the time interval during which the\n\tdefect is cleared and the failure is not')
class EOWClockMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("codirectionnal", 0), ("contradirSlave", 1), ("contradirMaster", 2))

class EOWType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("rsE1", 1), ("rsF1", 2), ("rsOther", 3), ("msE2", 4), ("aux", 5))

eowNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 150, 120, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowNumber.setStatus('current')
if mibBuilder.loadTexts: eowNumber.setDescription('Number of EOW port in equipment.')
eowTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2), )
if mibBuilder.loadTexts: eowTable.setStatus('current')
if mibBuilder.loadTexts: eowTable.setDescription('List of EOW port in equipment.')
eowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1), ).setIndexNames((0, "SHELF-MIB", "eowIndex"))
if mibBuilder.loadTexts: eowEntry.setStatus('current')
if mibBuilder.loadTexts: eowEntry.setDescription('A particular EOW port of the equipment.')
eowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowIndex.setStatus('current')
if mibBuilder.loadTexts: eowIndex.setDescription('A unique value which identify a particular\n\tEOW port.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
eowName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eowName.setStatus('current')
if mibBuilder.loadTexts: eowName.setDescription('A text string which identifies the particular entry among the\n\tEOW port entries. ')
eowSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 6), EOWType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSrcType.setStatus('current')
if mibBuilder.loadTexts: eowSrcType.setDescription('A reference to the object which sends the data flow to this\n\tinterface. Usually the value is the oid of a vc12 or a connection.')
eowSrcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSrcPtr.setStatus('current')
if mibBuilder.loadTexts: eowSrcPtr.setDescription('A reference to the object which sends the data flow to this\n\tinterface. Usually the value is the oid of a vc12 or a connection.')
eowSinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 8), EOWType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSinkType.setStatus('current')
if mibBuilder.loadTexts: eowSinkType.setDescription('A reference to the object which sends the data flow to this\n\tinterface. Usually the value is the oid of a vc12 or a connection.')
eowSinkPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowSinkPtr.setStatus('current')
if mibBuilder.loadTexts: eowSinkPtr.setDescription('A reference to the object which sends the data flow to this\n\tinterface. Usually the value is the oid of a vc12 or a connection.')
eowClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 150, 120, 2, 1, 10), EOWClockMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eowClockMode.setStatus('current')
if mibBuilder.loadTexts: eowClockMode.setDescription('Select the direction of the two external synchronisation lines.')
mibBuilder.exportSymbols("SHELF-MIB", ledType=ledType, boardInsertFamily=boardInsertFamily, boardListSlot=boardListSlot, boardFailure=boardFailure, HoldTime=HoldTime, adrFailHoldOnTime=adrFailHoldOnTime, board=board, boardTable=boardTable, hardInventoryNumber=hardInventoryNumber, LedStatus=LedStatus, boardList=boardList, shelf=shelf, boardMonitor=boardMonitor, boardIndex=boardIndex, eowSrcType=eowSrcType, adrFailHoldOffTime=adrFailHoldOffTime, softInventoryCode=softInventoryCode, eowEntry=eowEntry, led=led, softInventoryEntry=softInventoryEntry, laserALSRestart2s=laserALSRestart2s, ledNumber=ledNumber, boardListNumber=boardListNumber, laserTxEnable=laserTxEnable, ledTable=ledTable, ledEntry=ledEntry, laserALSRestart90s=laserALSRestart90s, eowSinkPtr=eowSinkPtr, laserEntry=laserEntry, boardSeverity=boardSeverity, boardNumber=boardNumber, boardInsertType=boardInsertType, ledPosition=ledPosition, eowName=eowName, hardInventoryDescr=hardInventoryDescr, boardProtectionType=boardProtectionType, softInventoryTable=softInventoryTable, adrHotReset=adrHotReset, laserIndex=laserIndex, boardListType=boardListType, boardListEntry=boardListEntry, holdTime=holdTime, boardMismatchSev=boardMismatchSev, boardMissingSev=boardMissingSev, hardInventoryTable=hardInventoryTable, softInventoryIndex=softInventoryIndex, eowClockMode=eowClockMode, eowTable=eowTable, laserALSEnable=laserALSEnable, LedType=LedType, softInventoryNumber=softInventoryNumber, boardExpectFamily=boardExpectFamily, hardInv=hardInv, boardDefectiveSev=boardDefectiveSev, ledIndex=ledIndex, ledStatus=ledStatus, EOWType=EOWType, PYSNMP_MODULE_ID=shelf, hardInventoryEntry=hardInventoryEntry, boardListIndex=boardListIndex, softInventoryBoard=softInventoryBoard, softInventoryType=softInventoryType, laserTable=laserTable, eowNumber=eowNumber, boardEntry=boardEntry, softInventoryExt=softInventoryExt, EOWClockMode=EOWClockMode, ProtectionType=ProtectionType, BoardFailure=BoardFailure, hardInventoryBoard=hardInventoryBoard, boardExpectType=boardExpectType, hardInventoryIndex=hardInventoryIndex, softInv=softInv, eowSinkType=eowSinkType, eowIndex=eowIndex, boardActive=boardActive, eow=eow, boardFirstPortIndex=boardFirstPortIndex, laserNumber=laserNumber, laser=laser, eowSrcPtr=eowSrcPtr, boardListTable=boardListTable, boardSlotName=boardSlotName)
