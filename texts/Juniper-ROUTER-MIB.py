#
# PySNMP MIB module Juniper-ROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/Juniper-ROUTER-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:23:37 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
JuniIpPolicyExtendedCommunity, JuniIpPolicyName = mibBuilder.importSymbols("Juniper-IP-POLICY-MIB", "JuniIpPolicyExtendedCommunity", "JuniIpPolicyName")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
JuniName, = mibBuilder.importSymbols("Juniper-TC", "JuniName")
SnmpEngineID, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpEngineID")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, MibIdentifier, Bits, IpAddress, ObjectIdentity, NotificationType, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Integer32, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Bits", "IpAddress", "ObjectIdentity", "NotificationType", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Integer32", "Counter32", "Gauge32")
RowStatus, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "DisplayString")
juniRouterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32))
juniRouterMIB.setRevisions(('2004-05-06 20:30', '2003-09-24 17:31', '2003-05-22 15:52', '2003-05-10 20:54', '2003-04-24 13:25', '2002-05-10 18:16', '2001-01-24 18:25', '2000-01-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniRouterMIB.setRevisionsDescriptions(('Added RLI-870 Virtual Router and Vrf count support.', 'Added RADIUS Proxy protocol support.', 'Added support for global export map and export map filter.', 'Added DHCPv6 protocol support.', 'Replaced Unisphere names with Juniper names.\n         Added TACACS+ and RADIUS Disconnect protocol support.\n         Added SNMPv3 context engine ID to the virtual router table.', 'Added support for router context name string.', 'Added support for VRF - virtual router forwarder.  Support is defined\n         by these objects/table:\n             juniRouterVrf\n             juniRouterVrfTable\n             juniRouterVrfRouteTargetTable', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniRouterMIB.setLastUpdated('200405062030Z')
if mibBuilder.loadTexts: juniRouterMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniRouterMIB.setContactInfo('       Juniper Networks, Inc.\n        Postal: 10 Technology Park Drive\n                Westford, MA  01886-3146\n                USA\n        Tel:    +1 978 589 5800\n        Email:  mib@Juniper.net')
if mibBuilder.loadTexts: juniRouterMIB.setDescription('The Router MIB is used to manage the creation and deletion as well as\n        the administrative states of the protocols and functions that run within\n        a designated router.')
class JuniNextRouterIndex(TextualConvention, Unsigned32):
    description = 'Coordinates routerIndex value allocation for entries in an associated\n        router table.  Clients must first read the routerIndex value from this\n        object, then create an entry having the routerIndex value in the\n        associated router table.\n\n        The DESCRIPTION clause for an object of this type must identify the\n        associated router table.\n\n        A GET of this object returns the next available routerIndex value to be\n        used to create an entry in the associated router table; or zero, if no\n        valid routerIndex value is available.  This object also returns a value\n        of zero when it is the lexicographic successor of a varbind presented in\n        an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed\n        that routerIndex allocation is unintended.\n\n        Successive GETs will typically return different values, thus avoiding\n        collisions among cooperating management clients seeking to create table\n        entries simultaneously.\n\n        Unless specified otherwise by its MAX-ACCESS and DESCRIPTION clauses, an\n        object of this type is read-only, and a SET of such an object returns a\n        notWritable error.'
    status = 'current'

class JuniRouterProtocolIndex(TextualConvention, Integer32):
    description = 'Identifies the router protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))
    namedValues = NamedValues(("ip", 1), ("osi", 2), ("icmp", 3), ("igmp", 4), ("tcp", 5), ("udp", 6), ("bgp", 7), ("ospf", 8), ("isis", 9), ("rip", 10), ("snmp", 11), ("ntp", 12), ("generator", 13), ("localAddressServer", 14), ("dhcpProxy", 15), ("dhcpRelay", 16), ("nameResolver", 17), ("policyManager", 18), ("sscClient", 19), ("cops", 20), ("mgtm", 21), ("dvmrp", 22), ("pim", 23), ("msdp", 24), ("mpls", 25), ("radius", 26), ("mplsMgr", 27), ("dhcpLocalServer", 28), ("tacacsPlus", 29), ("radiusDisconnect", 30), ("dhcpv6LocalServer", 31), ("radiusProxy", 32))

juniRouterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1))
juniRouterSummaryCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6))
juniRouterSummaryScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6, 1))
juniRouterSummaryNonParentVRsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterSummaryNonParentVRsConfigured.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryNonParentVRsConfigured.setDescription('Total number of VRs without VRFs configured.')
juniRouterSummaryParentVRsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterSummaryParentVRsConfigured.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryParentVRsConfigured.setDescription('Total number of VRs with VRFs configured.')
juniRouterSummaryVRFsConfigured = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterSummaryVRFsConfigured.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryVRFsConfigured.setDescription('Total number of VRFs configured.')
juniRouterSummaryTotalConfigured = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterSummaryTotalConfigured.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryTotalConfigured.setDescription('Total number of Virtual Routers and VRFs configured.')
juniRouterNextRouterIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 1), JuniNextRouterIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterNextRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterNextRouterIndex.setDescription('Coordinates routerIndex and juniRouterVrfIndex value allocation for\n        entries in the juniRouterTable and juniRouterVrfTable, respectively.\n\n        A GET of this object returns the next available routerIndex value to be\n        used to create an entry in the associated router table; or zero, if no\n        valid routerIndex value is available.  This object also returns a value\n        of zero when it is the lexicographic successor of a varbind presented in\n        an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed\n        that routerIndex allocation is unintended.\n\n        Successive GETs will typically return different values, thus avoiding\n        collisions among cooperating management clients seeking to create table\n        entries simultaneously.')
juniRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2), )
if mibBuilder.loadTexts: juniRouterTable.setStatus('current')
if mibBuilder.loadTexts: juniRouterTable.setDescription('This table contains entries for routers present in the system.')
juniRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1), ).setIndexNames((0, "Juniper-ROUTER-MIB", "juniRouterIndex"))
if mibBuilder.loadTexts: juniRouterEntry.setStatus('current')
if mibBuilder.loadTexts: juniRouterEntry.setDescription('Each entry in this table represents a single router.  Creating and/or\n        deleting entries in this table causes corresponding entries to be\n        created or deleted in the juniRouterProtocolTable.  Note that VRFs also\n        appear as entries in this table and can be differentiated by the\n        juniRouterVrf object.  The juniRouterVrfTable shows the parent / child\n        relationship between routers and VRFs present in the system.')
juniRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterIndex.setDescription('The routerIndex of this router.  When creating entries in this table,\n        suitable values for this object are determined by reading\n        juniRouterNextRouterIndex.')
juniRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 2), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterName.setStatus('current')
if mibBuilder.loadTexts: juniRouterName.setDescription('The administratively assigned name given to this router.  The name must\n        be unique within the context of this table and cannot be changed after\n        the router instance is created.')
juniRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniRouterRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniRouterRowStatus\n            juniRouterName\n\n        In addition, when creating an entry the following conditions must hold:\n\n            A value for juniRouterIndex must have been determined previously by\n            reading juniRouterNextRouterIndex.\n\n        A corresponding entries in juniRouterProtocolTable are created/destroyed\n        as a result of creating/destroying an entry in this table.')
juniRouterVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterVrf.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrf.setDescription('Identifies whether this router is a VRF or not.  A value of true(1)\n        indicates that this is a VRF; a value of false(2) indicates that it is\n        not.')
juniRouterContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterContextName.setStatus('current')
if mibBuilder.loadTexts: juniRouterContextName.setDescription('An internally derived/assigned name given to this router with a\n        specific format:\n                routerN\n\n        where N is a decimal number (with no leading zeroes) in the range\n        1..16777215 corresponding to the value of the least significant 24 bits\n        of the juniRouterIndex (the router UID).  The name is unique within the\n        context of this table.')
juniRouterContextEngineID = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 6), SnmpEngineID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterContextEngineID.setReference('An Architecture for Describing Simple Network Management Protocol\n        (SNMP) Management Frameworks (RFC3411) clause 3.3.2.')
if mibBuilder.loadTexts: juniRouterContextEngineID.setStatus('current')
if mibBuilder.loadTexts: juniRouterContextEngineID.setDescription("The virtual router SNMP engine's administratively-unique identifier.\n        This is used as the contextEngineId to reach the virtual router's\n        SNMP context via the system-wide SNMP engine using SNMPv3.")
juniRouterSummaryVRFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniRouterSummaryVRFCount.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryVRFCount.setDescription('The number of VRFs contained in the VR.')
juniRouterProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3), )
if mibBuilder.loadTexts: juniRouterProtocolTable.setStatus('current')
if mibBuilder.loadTexts: juniRouterProtocolTable.setDescription('This table contains entries for each protocol supported by the router\n        entry created in the juniRouterTable.')
juniRouterProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1), ).setIndexNames((0, "Juniper-ROUTER-MIB", "juniRouterProtocolRouterIndex"), (0, "Juniper-ROUTER-MIB", "juniRouterProtocolProtocolIndex"))
if mibBuilder.loadTexts: juniRouterProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: juniRouterProtocolEntry.setDescription('Each entry provides administrative control on a router protocol for the\n        router designated by the first indice to this table.  The second indice\n        identifies the router protocol.\n\n        Entries in this table are created as a side-effect of row creation in\n        the juniRouterTable or juniRouterVrfTable.')
juniRouterProtocolRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniRouterProtocolRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterProtocolRouterIndex.setDescription('The routerIndex of this router.  This object is the same as the\n        juniRouterIndex object defined in the juniRouterTable.')
juniRouterProtocolProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 2), JuniRouterProtocolIndex())
if mibBuilder.loadTexts: juniRouterProtocolProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterProtocolProtocolIndex.setDescription('Identities the router protocol.')
juniRouterProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniRouterProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniRouterProtocolRowStatus.setDescription('Administrative control and status of a protocol on a router.\n\n        The following values can be read from this object:\n          active(1)   - Indicates that the protocol on the designated router\n                        is created, configured, and running.\n          notReady(3) - Indicates that the protocol requires additional\n                        configuration in a protocol specific MIB module.\n                        Examples include the BGP and OSPF protocols, which\n                        require additional configuration of protocol specific\n                        parameters such as: Autonomous System (AS) for BGP,\n                        and Process Id for OSPF.\n          destroy(6)  - The destroy(3) operation can fail if there are\n                        executing applications dependent on the protocol.\n                        If an attempt is made to destroy(6) an active(1)\n                        protocol that other applications are dependent on,\n                        the rowStatus will read destroy(6).  Normally, when\n                        a row is destroyed, the agent will cleaup and remove\n                        the entry.\n\n        The following values can be written to this object:\n          active(1)      - Activate protocol on the designated router.\n          createAndGo(4) - Create protocol on designated router.  The router\n                           indicated by juniRouterProtocolRouterIndex must\n                           already exist in the juniRouterTable.  The value of\n                           the juniRouterProtocolProtocolIndex must be from the\n                           set of protocol values defined by the\n                           JuniRouterProtocolIndex type.\n          destroy(6)     - Destroy protocol on designated router.  If the\n                           operation is successful, the agent will remove the\n                           entry.  If the operation failed, the row will remain\n                           in the table with a rowStatus value of destroy(6).\n\n            Conditions on destroy(6):\n             1) The default router can not be deleted.\n             2) The local router can not be deleted.  A local router is defined\n                as the router that sourced the SNMP request.\n\n        Upon creation of a router in the juniRouterTable, some protocol entries\n        will appear in this table by default, which indicates that these\n        protocols are created by the action of creating a router.  It is\n        important to note, that this behavior may change over time by protocol\n        type.')
juniRouterVrfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4), )
if mibBuilder.loadTexts: juniRouterVrfTable.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfTable.setDescription('This table contains entries for each VRF on each router entry created\n        in the juniRouterTable.')
juniRouterVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1), ).setIndexNames((0, "Juniper-ROUTER-MIB", "juniRouterVrfRouterIndex"), (0, "Juniper-ROUTER-MIB", "juniRouterVrfRouterVrfIndex"))
if mibBuilder.loadTexts: juniRouterVrfEntry.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfEntry.setDescription('Each entry provides administrative control on a router VRF for the\n        router designated by the first indice of this table.  The second indice\n        identifies the router VRF.\n\n        The parent router must exist in the juniRouterTable before performing\n        VRF row creation in this table')
juniRouterVrfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniRouterVrfRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouterIndex.setDescription('The router index of this router, also referred to as the parent of the\n        VRF.  This object is the same as the juniRouterIndex object defined in\n        the juniRouterTable.')
juniRouterVrfRouterVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniRouterVrfRouterVrfIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouterVrfIndex.setDescription('The VRF router index for this entry, also referred as the child of the\n        parent router, which is identified by the first indice to this table.')
juniRouterVrfIpv4UnicastImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 3), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastImportRouteMap.setDescription('The VRF router import route map for IPv4 unicast routes.')
juniRouterVrfIpv4UnicastExportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 4), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastExportRouteMap.setDescription('The VRF router export route map for IPv4 unicast routes.')
juniRouterVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 5), JuniIpPolicyExtendedCommunity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteDistinguisher.setDescription('The VRF router route distinguisher.')
juniRouterVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        *** LIMITED CONFIGURATION LEVEL ***\n        RowStatus createAndGo/destroy operations have the following\n        special-purpose semantics:\n            createAndGo     Create an entry having the specified configuration\n                            and append it to the target list, i.e. create an\n                            juniRouterVrfEntry table entry with the associated\n                            characteristics.\n            destroy         Destroy the specified element.\n\n        Entries in this table can be modified once the row has been created.\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            A value for juniRouterVrfRouterIndex must have been determined\n            previously by reading juniRouterNextRouterIndex.\n\n            A parent router must exist in the juniRouterTable.')
juniRouterVrfRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 8), JuniName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRouterName.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouterName.setDescription('The administratively assigned name given to this VRF router.  The name\n        must be unique within the context of this table and cannot be changed\n        after the router instance is created.')
juniRouterVrfRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRouterDescription.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouterDescription.setDescription('The administratively assigned description given to this VRF router.')
juniRouterVrfIpv4UnicastGlobalExportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 10), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalExportRouteMap.setDescription('The VRF router global export route map for IPv4 unicast routes.')
juniRouterVrfIpv4UnicastExportRouteMapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastExportRouteMapFilter.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastExportRouteMapFilter.setDescription('Is the VRF export map for IPv4 unicast routes allowed to \n        filter routes?')
juniRouterVrfIpv6UnicastImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 12), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastImportRouteMap.setDescription('The VRF router import route map for IPv6 unicast routes.')
juniRouterVrfIpv6UnicastExportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 13), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastExportRouteMap.setDescription('The VRF router export route map for IPv6 unicast routes.')
juniRouterVrfIpv6UnicastGlobalExportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 14), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalExportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalExportRouteMap.setDescription('The VRF router global export route map for IPv6 unicast routes.')
juniRouterVrfIpv6UnicastExportRouteMapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastExportRouteMapFilter.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastExportRouteMapFilter.setDescription('Is the VRF export map for IPv6 unicast routes allowed to \n        filter routes?')
juniRouterVrfIpv4UnicastGlobalImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 16), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalImportRouteMap.setDescription('The VRF router global import route map for IPv4 unicast routes.')
juniRouterVrfIpv4UnicastGlobalImportMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 17), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalImportMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv4UnicastGlobalImportMaxRoutes.setDescription('The maximum number of IPv4 unicast routes which can be\n        globaly imported.')
juniRouterVrfIpv6UnicastGlobalImportRouteMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 18), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalImportRouteMap.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalImportRouteMap.setDescription('The VRF router global import route map for IPv6 unicast routes.')
juniRouterVrfIpv6UnicastGlobalImportMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 4, 1, 19), Unsigned32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalImportMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfIpv6UnicastGlobalImportMaxRoutes.setDescription('The maximum number of IPv6 unicast routes which can be\n        globaly imported.')
juniRouterVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5), )
if mibBuilder.loadTexts: juniRouterVrfRouteTargetTable.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetTable.setDescription('This table contains entries for each route target for the router/VRF\n        entry created in the juniRouterTable and juniRouterVrfTable.')
juniRouterVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1), ).setIndexNames((0, "Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRouterIndex"), (0, "Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRouterVrfIndex"), (0, "Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetAddrFormat"), (0, "Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRouteTarget"))
if mibBuilder.loadTexts: juniRouterVrfRouteTargetEntry.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetEntry.setDescription('Each entry provides administrative control on VRF route targets for the\n        router/VRF pair designated by the first and second indice of this table.\n        The third indice identifies the route target.\n\n        The parent router must exist in the juniRouterTable and the VRF router\n        must exist in the juniRouterVrfTable before performing creation of the\n        route target in this table.')
juniRouterVrfRouteTargetRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouterIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouterIndex.setDescription('The routerIndex of this router, also referred to as the parent of the\n        VRF.  This object is the same as the juniRouterIndex object defined in\n        the juniRouterTable.')
juniRouterVrfRouteTargetRouterVrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouterVrfIndex.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouterVrfIndex.setDescription('The VRF router index for this entry, also referred as the child of the\n        parent router, which is identified by the first indice to this table.')
juniRouterVrfRouteTargetAddrFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("routeTargetFormatAsn", 0), ("routeTargetFormateIp", 1))))
if mibBuilder.loadTexts: juniRouterVrfRouteTargetAddrFormat.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetAddrFormat.setDescription('The address format of the route target.')
juniRouterVrfRouteTargetRouteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 4), JuniIpPolicyExtendedCommunity())
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouteTarget.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRouteTarget.setDescription('The VRF router route target.')
juniRouterVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("routeTargetInvalid", 0), ("routeTargetImport", 1), ("routeTargetExport", 2), ("routeTargetBoth", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRouteTargetType.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetType.setDescription('The VRF router route target type.')
juniRouterVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfRouteTargetRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        *** LIMITED CONFIGURATION LEVEL ***\n        RowStatus createAndGo/destroy operations have the following\n        special-purpose semantics:\n            createAndGo     Create an entry having the specified configuration\n                            and append it to the target list, i.e., create an\n                            juniRouterVrfRouteTargetEntry table entry with the\n                            associated characteristics.\n            destroy         Destroy the specified element.\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            A parent router must exist in the juniRouterTable.\n\n            A VRF router must exist in the juniRouterVrfTable.')
juniRouterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4))
juniRouterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1))
juniRouterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2))
juniRouterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 1)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance = juniRouterCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance.setDescription('An obsolete compliance statement for entities which implement the\n        Juniper Router MIB.  This statement became obsolete when support was\n        added for VRFs within routers.')
juniRouterCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 2)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup2"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance2 = juniRouterCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance2.setDescription('An obsolete compliance statement for entities which implement the\n        Juniper Router MIB.  This statement became obsolete when support was\n        added for the router context name.')
juniRouterCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 3)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup3"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance3 = juniRouterCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance3.setDescription('Obsolete compliance statement for entities which implement the Juniper\n        Router MIB.  This statement became obsolete when support was added for\n        the router context engine ID.')
juniRouterCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 4)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup4"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance4 = juniRouterCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance4.setDescription('Obsolete compliance statement for entities which implement the Juniper\n        Router MIB.  This statement became obsolete when the global export map\n        and the export map filter option were added to the VRF group.')
juniRouterCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 5)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup4"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance5 = juniRouterCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance5.setDescription('Obsolete compliance statement for entities which implement the Juniper\n        Router MIB.')
juniRouterCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 7)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup5"), ("Juniper-ROUTER-MIB", "juniRouterSummaryScalarsGroup"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance6 = juniRouterCompliance6.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterCompliance6.setDescription('Obsolete compliance statement for entities which implement the Juniper\n        Router MIB.')
juniRouterCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 1, 8)).setObjects(("Juniper-ROUTER-MIB", "juniRouterGroup5"), ("Juniper-ROUTER-MIB", "juniRouterSummaryScalarsGroup"), ("Juniper-ROUTER-MIB", "juniRouterVrfGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterCompliance7 = juniRouterCompliance7.setStatus('current')
if mibBuilder.loadTexts: juniRouterCompliance7.setDescription('The compliance statement for entities which implement the Juniper\n        Router MIB.')
juniRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 1)).setObjects(("Juniper-ROUTER-MIB", "juniRouterNextRouterIndex"), ("Juniper-ROUTER-MIB", "juniRouterName"), ("Juniper-ROUTER-MIB", "juniRouterRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterGroup = juniRouterGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterGroup.setDescription('An obsolete collection of objects providing management of routers and\n        routing protocols in a Juniper product.  This group became obsolete when\n        support was added for VRFs within routers.')
juniRouterGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 2)).setObjects(("Juniper-ROUTER-MIB", "juniRouterNextRouterIndex"), ("Juniper-ROUTER-MIB", "juniRouterName"), ("Juniper-ROUTER-MIB", "juniRouterRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrf"), ("Juniper-ROUTER-MIB", "juniRouterProtocolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterGroup2 = juniRouterGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterGroup2.setDescription('An obsolete collection of objects providing management of routers and\n        routing protocols in a Juniper product.  This group became obsolete when\n        support was added for the router context name.')
juniRouterVrfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 3)).setObjects(("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteDistinguisher"), ("Juniper-ROUTER-MIB", "juniRouterVrfRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterName"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetType"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterVrfGroup = juniRouterVrfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterVrfGroup.setDescription('Obsolete collection of objects providing management of VRFs within\n        routers in a Juniper product.  This group became obsolete when the VRF\n        router description object was added.')
juniRouterGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 4)).setObjects(("Juniper-ROUTER-MIB", "juniRouterNextRouterIndex"), ("Juniper-ROUTER-MIB", "juniRouterName"), ("Juniper-ROUTER-MIB", "juniRouterRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrf"), ("Juniper-ROUTER-MIB", "juniRouterProtocolRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterContextName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterGroup3 = juniRouterGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterGroup3.setDescription('Obsolete collection of objects providing management of routers and\n        routing protocols in a Juniper product.  This group became obsolete when\n        the contect engine ID object was added.')
juniRouterVrfGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 5)).setObjects(("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteDistinguisher"), ("Juniper-ROUTER-MIB", "juniRouterVrfRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterName"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterDescription"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetType"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterVrfGroup2 = juniRouterVrfGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterVrfGroup2.setDescription('Obsolete collection of objects providing management of VRFs within\n        routers in a Juniper product.  This group became obsolete when the\n        global export map and the export map filter option were added.')
juniRouterGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 6)).setObjects(("Juniper-ROUTER-MIB", "juniRouterNextRouterIndex"), ("Juniper-ROUTER-MIB", "juniRouterName"), ("Juniper-ROUTER-MIB", "juniRouterRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrf"), ("Juniper-ROUTER-MIB", "juniRouterProtocolRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterContextName"), ("Juniper-ROUTER-MIB", "juniRouterContextEngineID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterGroup4 = juniRouterGroup4.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterGroup4.setDescription('Obsolete collection of objects providing management of routers and\n        routing protocols in a Juniper product.  This group became obsolete when\n        the summaryVRfCount object was added.')
juniRouterVrfGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 7)).setObjects(("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteDistinguisher"), ("Juniper-ROUTER-MIB", "juniRouterVrfRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterName"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterDescription"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastGlobalExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMapFilter"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetType"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterVrfGroup3 = juniRouterVrfGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: juniRouterVrfGroup3.setDescription('Obsolete collection of objects providing management of VRFs within\n        routers in a Juniper product.  This group became obsolete when the\n        global import map was added and when support for separate ipv4 and\n        ipv6 route maps was added.')
juniRouterGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 8)).setObjects(("Juniper-ROUTER-MIB", "juniRouterNextRouterIndex"), ("Juniper-ROUTER-MIB", "juniRouterName"), ("Juniper-ROUTER-MIB", "juniRouterRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrf"), ("Juniper-ROUTER-MIB", "juniRouterProtocolRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterContextName"), ("Juniper-ROUTER-MIB", "juniRouterContextEngineID"), ("Juniper-ROUTER-MIB", "juniRouterSummaryVRFCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterGroup5 = juniRouterGroup5.setStatus('current')
if mibBuilder.loadTexts: juniRouterGroup5.setDescription('A collection of objects providing management of routers and routing\n        protocols in a Juniper product.')
juniRouterSummaryScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 9)).setObjects(("Juniper-ROUTER-MIB", "juniRouterSummaryNonParentVRsConfigured"), ("Juniper-ROUTER-MIB", "juniRouterSummaryParentVRsConfigured"), ("Juniper-ROUTER-MIB", "juniRouterSummaryVRFsConfigured"), ("Juniper-ROUTER-MIB", "juniRouterSummaryTotalConfigured"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterSummaryScalarsGroup = juniRouterSummaryScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: juniRouterSummaryScalarsGroup.setDescription('A collection of objects providing summary counts for number of virtual routers\n        and virtual router forwarding instances (VRFs) in a Juniper product.')
juniRouterVrfGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 32, 4, 2, 10)).setObjects(("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteDistinguisher"), ("Juniper-ROUTER-MIB", "juniRouterVrfRowStatus"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterName"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouterDescription"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastGlobalExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastExportRouteMapFilter"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastGlobalExportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastExportRouteMapFilter"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastGlobalImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv4UnicastGlobalImportMaxRoutes"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastGlobalImportRouteMap"), ("Juniper-ROUTER-MIB", "juniRouterVrfIpv6UnicastGlobalImportMaxRoutes"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetType"), ("Juniper-ROUTER-MIB", "juniRouterVrfRouteTargetRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniRouterVrfGroup4 = juniRouterVrfGroup4.setStatus('current')
if mibBuilder.loadTexts: juniRouterVrfGroup4.setDescription('A collection of objects providing management of VRFs within routers in\n        a Juniper product.')
mibBuilder.exportSymbols("Juniper-ROUTER-MIB", juniRouterCompliance3=juniRouterCompliance3, juniRouterNextRouterIndex=juniRouterNextRouterIndex, juniRouterVrfGroup2=juniRouterVrfGroup2, juniRouterVrfIpv6UnicastImportRouteMap=juniRouterVrfIpv6UnicastImportRouteMap, juniRouterVrfGroup3=juniRouterVrfGroup3, juniRouterCompliance4=juniRouterCompliance4, juniRouterTable=juniRouterTable, juniRouterSummaryParentVRsConfigured=juniRouterSummaryParentVRsConfigured, juniRouterSummaryTotalConfigured=juniRouterSummaryTotalConfigured, juniRouterContextName=juniRouterContextName, juniRouterIndex=juniRouterIndex, juniRouterVrfRouterName=juniRouterVrfRouterName, juniRouterMIB=juniRouterMIB, juniRouterVrfIpv6UnicastExportRouteMap=juniRouterVrfIpv6UnicastExportRouteMap, juniRouterVrfRouteDistinguisher=juniRouterVrfRouteDistinguisher, juniRouterGroup2=juniRouterGroup2, juniRouterVrfIpv4UnicastImportRouteMap=juniRouterVrfIpv4UnicastImportRouteMap, juniRouterConformance=juniRouterConformance, juniRouterCompliances=juniRouterCompliances, juniRouterVrfRouteTargetRouterVrfIndex=juniRouterVrfRouteTargetRouterVrfIndex, juniRouterVrfRouterDescription=juniRouterVrfRouterDescription, juniRouterProtocolEntry=juniRouterProtocolEntry, juniRouterVrfRouterIndex=juniRouterVrfRouterIndex, juniRouterCompliance2=juniRouterCompliance2, juniRouterVrfTable=juniRouterVrfTable, juniRouterVrfRouteTargetRouteTarget=juniRouterVrfRouteTargetRouteTarget, juniRouterCompliance6=juniRouterCompliance6, juniRouterRowStatus=juniRouterRowStatus, juniRouterVrfRouterVrfIndex=juniRouterVrfRouterVrfIndex, juniRouterSummaryScalarsGroup=juniRouterSummaryScalarsGroup, juniRouterEntry=juniRouterEntry, juniRouterGroup=juniRouterGroup, juniRouterContextEngineID=juniRouterContextEngineID, juniRouterSummaryScalars=juniRouterSummaryScalars, juniRouterVrfRouteTargetEntry=juniRouterVrfRouteTargetEntry, juniRouterVrfEntry=juniRouterVrfEntry, juniRouterVrfIpv4UnicastExportRouteMapFilter=juniRouterVrfIpv4UnicastExportRouteMapFilter, juniRouterVrfIpv6UnicastGlobalImportMaxRoutes=juniRouterVrfIpv6UnicastGlobalImportMaxRoutes, juniRouterCompliance=juniRouterCompliance, juniRouterVrfRouteTargetType=juniRouterVrfRouteTargetType, juniRouterVrfIpv4UnicastGlobalImportMaxRoutes=juniRouterVrfIpv4UnicastGlobalImportMaxRoutes, JuniRouterProtocolIndex=JuniRouterProtocolIndex, juniRouterSummaryVRFsConfigured=juniRouterSummaryVRFsConfigured, juniRouterVrfIpv4UnicastGlobalExportRouteMap=juniRouterVrfIpv4UnicastGlobalExportRouteMap, juniRouterSummaryVRFCount=juniRouterSummaryVRFCount, juniRouterGroups=juniRouterGroups, juniRouterName=juniRouterName, juniRouterProtocolRouterIndex=juniRouterProtocolRouterIndex, juniRouterObjects=juniRouterObjects, juniRouterVrfRouteTargetTable=juniRouterVrfRouteTargetTable, juniRouterVrfIpv6UnicastGlobalImportRouteMap=juniRouterVrfIpv6UnicastGlobalImportRouteMap, juniRouterVrfRouteTargetRouterIndex=juniRouterVrfRouteTargetRouterIndex, juniRouterVrfIpv6UnicastExportRouteMapFilter=juniRouterVrfIpv6UnicastExportRouteMapFilter, juniRouterCompliance7=juniRouterCompliance7, juniRouterGroup4=juniRouterGroup4, juniRouterGroup3=juniRouterGroup3, JuniNextRouterIndex=JuniNextRouterIndex, juniRouterVrfGroup4=juniRouterVrfGroup4, juniRouterSummaryCounts=juniRouterSummaryCounts, juniRouterVrf=juniRouterVrf, juniRouterProtocolProtocolIndex=juniRouterProtocolProtocolIndex, juniRouterVrfGroup=juniRouterVrfGroup, juniRouterVrfRouteTargetRowStatus=juniRouterVrfRouteTargetRowStatus, juniRouterVrfRowStatus=juniRouterVrfRowStatus, juniRouterGroup5=juniRouterGroup5, juniRouterProtocolRowStatus=juniRouterProtocolRowStatus, juniRouterVrfRouteTargetAddrFormat=juniRouterVrfRouteTargetAddrFormat, juniRouterVrfIpv6UnicastGlobalExportRouteMap=juniRouterVrfIpv6UnicastGlobalExportRouteMap, juniRouterVrfIpv4UnicastGlobalImportRouteMap=juniRouterVrfIpv4UnicastGlobalImportRouteMap, juniRouterVrfIpv4UnicastExportRouteMap=juniRouterVrfIpv4UnicastExportRouteMap, juniRouterProtocolTable=juniRouterProtocolTable, PYSNMP_MODULE_ID=juniRouterMIB, juniRouterCompliance5=juniRouterCompliance5, juniRouterSummaryNonParentVRsConfigured=juniRouterSummaryNonParentVRsConfigured)
