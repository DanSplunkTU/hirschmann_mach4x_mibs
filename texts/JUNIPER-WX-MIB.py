#
# PySNMP MIB module JUNIPER-WX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/JUNIPER-WX-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 17:27:41 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
jnxWxCommonEventDescr, = mibBuilder.importSymbols("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr")
jnxWxSpecificMib, jnxWxModules = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-REG", "jnxWxSpecificMib", "jnxWxModules")
TcQosIdentifier, TcAppName = mibBuilder.importSymbols("JUNIPER-WX-GLOBAL-TC", "TcQosIdentifier", "TcAppName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, iso, Counter32, Bits, Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, Integer32, MibIdentifier, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Counter32", "Bits", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Integer32", "MibIdentifier", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TimeStamp, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention")
jnxWxMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 8239, 1, 1, 4))
jnxWxMibModule.setRevisions(('2004-05-24 00:00', '2003-06-23 00:00', '2002-03-28 00:00', '2002-03-27 00:00', '2001-12-19 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxWxMibModule.setRevisionsDescriptions(('\n\t\t\tAdd jnxWxEventMultiPathStatusChange notification.', '\n\t\t\to Add compression and throughput statistics\n\t\t\t  to the jnxWxSysStats group.\n\t\t\to Add bytes counts to jnxWxAsmStatsTable.\n\t\t\to Add bytes counts and bytes-in percentage\n\t\t\t  to jnxWxAppStatsTable.\n\t\t\to Add jnxWxAppAggrStatsTable.', '\n\t\t\tAdd SessionOpened, RegServerUnreachable notifications.', '\n\t\t\tAdd SessionClosed, BufferOverflow notifications.', '\n\t\t\tRev 1.0\n\t\t\tInitial version of MIB module JUNIPER-WX-MIB.',))
if mibBuilder.loadTexts: jnxWxMibModule.setLastUpdated('200203280000Z')
if mibBuilder.loadTexts: jnxWxMibModule.setOrganization('Juniper Networks, Inc')
if mibBuilder.loadTexts: jnxWxMibModule.setContactInfo('\n\t\t\t\t\tCustomer Support\n\t\t\t\t\tJuniper Networks, Inc.\n\t\t\t\t\t1194 North Mathilda Avenue\n\t\t\t\t\tSunnyvale, CA  94089\n\n\t\t\t\t\t+1 888-314-JTAC\n\t\t\t\t\tsupport@juniper.net')
if mibBuilder.loadTexts: jnxWxMibModule.setDescription("\n\t\t\tA MIB module containing definitions of managed objects\n\t\t\tfor Juniper Networks' WAN Acceleration family of products.")
jnxWxMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1))
if mibBuilder.loadTexts: jnxWxMib.setStatus('current')
if mibBuilder.loadTexts: jnxWxMib.setDescription('\n\t\t\tSub-tree for WAN Acceleration MIB.')
jnxWxConfMib = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 1))
if mibBuilder.loadTexts: jnxWxConfMib.setStatus('current')
if mibBuilder.loadTexts: jnxWxConfMib.setDescription('\n\t\t\tSub-tree for WAN Acceleration MIB conformance statements.')
jnxWxObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2))
if mibBuilder.loadTexts: jnxWxObjs.setStatus('current')
if mibBuilder.loadTexts: jnxWxObjs.setDescription('\n\t\t\tSub-tree for WAN Acceleration MIB objects.')
jnxWxEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3))
if mibBuilder.loadTexts: jnxWxEvents.setStatus('current')
if mibBuilder.loadTexts: jnxWxEvents.setDescription('\n\t\t\tSub-tree for WAN Acceleration MIB events.')
jnxWxStatsUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsUpdateTime.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsUpdateTime.setDescription("This is the value of sysUpTime when the WX stats (jnxWxSysStats,\n\t\t\tjnxWxAsm, jnxWxApp) were last updated. The management station\n\t\t\tcan use this information to tell if it's downloading a consistent set\n\t\t\tof stats.")
jnxWxStatsAsmCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsAsmCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsAsmCount.setDescription('The number of Decompressors this Compressor has had a session\n\t\t\twith at any time during the last two months.')
jnxWxStatsVirtEndptCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsVirtEndptCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsVirtEndptCount.setDescription('The number of virtual endpoints configured\n\t\t\ton this WX')
jnxWxStatsAppCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsAppCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsAppCount.setDescription('The number of applications currently being monitored on this Compressor.')
jnxWxStatsAccelAppCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsAccelAppCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsAccelAppCount.setDescription('The number of applications currently being accelerated on this Compressor.')
jnxWxStatsQosClassCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsQosClassCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsQosClassCount.setDescription('The number of QoS classes currently being monitored on this Compressor.')
jnxWxStatsQosEndptCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsQosEndptCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsQosEndptCount.setDescription('The number of QoS endpoints currently being monitored on this Compressor.')
jnxWxStatsWpEndptCount = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxStatsWpEndptCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxStatsWpEndptCount.setDescription('Number of endpoints with WAN performance monitoring\n\t\t\tenabled')
jnxWxSysStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4))
if mibBuilder.loadTexts: jnxWxSysStats.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStats.setDescription('\n\t\t\tSub-tree for WAN Acceleration system statistics.')
jnxWxSysStatsBytesInAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesInAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesInAe.setDescription('Total number of bytes that entered the WX Assembly Engine\n\t\t\tsince the system was started.')
jnxWxSysStatsBytesOutAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutAe.setDescription('Total number of bytes that exited the WX Assembly Engine\n\t\t\tafter assembly since the system was started.')
jnxWxSysStatsPktsInAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsInAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsInAe.setDescription('Total number of packets that entered the WX Assembly Engine\n\t\t\tsince the system was started.')
jnxWxSysStatsPktsOutAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsOutAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsOutAe.setDescription('Total number of packets that exited the WX Assembly Engine\n\t\t\tafter assembly since the system was started.')
jnxWxSysStatsBytesOutOob = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutOob.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutOob.setDescription('Total number of out-of-band bytes sent to the control channel\n\t\t\tsince the system was started.')
jnxWxSysStatsBytesPtNoAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesPtNoAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesPtNoAe.setDescription('Total number of bytes that passed through the WX Compression Engine\n\t\t\tbecause there was no corresponding Assembly Engine WX, since the\n\t\t\tsystem was started.')
jnxWxSysStatsPktsPtNoAe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsPtNoAe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsPtNoAe.setDescription('Total number of packets that passed through the WX Compression Engine\n\t\t\tbecause there was no corresponding Assembly Engine WX, since the\n\t\t\tsystem was started.')
jnxWxSysStatsBytesPtFilter = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesPtFilter.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesPtFilter.setDescription('Total number of bytes that passed through the WX Compression Engine\n\t\t\tdue to a manually configured filter (such as an application\n\t\t\tfilter), since the system was started.')
jnxWxSysStatsPktsPtFilter = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsPtFilter.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsPtFilter.setDescription('Total number of packets that passed through the WX Compression Engine\n\t\t\tdue to a manually configured filter (such as an application\n\t\t\tfilter), since the system was started.')
jnxWxSysStatsBytesOfPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesOfPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesOfPt.setDescription('Total number of bytes that passed through the WX Compression Engine\n\t\t\tdue to device buffer overflow, since the system was started.')
jnxWxSysStatsPktsOfPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsOfPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsOfPt.setDescription('Total number of packets that passed through the WX Compression Engine\n\t\t\tdue to device buffer overflow, since the system was started.')
jnxWxSysStatsBytesTpIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpIn.setDescription('The number of bytes into the WX Compression Engine at the peak\n\t\t\tfive-second interval of data input, since the system was started.')
jnxWxSysStatsPktsTpIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpIn.setDescription('The number of packets into the WX Compression Engine at the peak\n\t\t\tfive-second interval of data input, since the system was started.')
jnxWxSysStatsBytesTpOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpOut.setDescription('The number of bytes out of the WX Compression Engine at the peak\n\t\t\tfive-second interval of data input, since the system was started.')
jnxWxSysStatsPktsTpOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpOut.setDescription('The number of packets out of the WX Compression Engine at the peak\n\t\t\tfive-second interval of data input, since the system was started.')
jnxWxSysStatsBytesTpPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesTpPt.setDescription('The number of bytes that passed through the WX Compression Engine\n\t\t\tat the peak five-second interval of data input, since the system\n\t\t\twas started.')
jnxWxSysStatsPktsTpPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsTpPt.setDescription('The number of packets that passed through the WX Compression Engine\n\t\t\tat the peak five-second interval of data input, since the system\n\t\t\twas started.')
jnxWxSysStatsPeakRdn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPeakRdn.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPeakRdn.setDescription('The maximum data reduction rate for a five second interval\n\t\t\tin the last minute.\n\n\t\t\tThe value returned is (percentage * 1000). Applications should\n\t\t\tdivide the returned value by 1000.')
jnxWxSysStatsThruputIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsThruputIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsThruputIn.setDescription('Average throughput of incoming data in Kbps since the\n\t\t\tsystem was started.')
jnxWxSysStatsThruputOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsThruputOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsThruputOut.setDescription('Average throughput of outgoing data in Kbps since the\n\t\t\tsystem was started.')
jnxWxSysStatsBytesInRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesInRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesInRe.setDescription('Total number of bytes that entered the WX Compression Engine\n\t\t\tsince the system was started.')
jnxWxSysStatsBytesOutRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsBytesOutRe.setDescription('Total number of bytes that exited the WX Compression Engine\n\t\t\tafter reduction since the system was started.')
jnxWxSysStatsPktsInRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsInRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsInRe.setDescription('Total number of packets that entered the WX Compression Engine\n\t\t\tsince the system was started.')
jnxWxSysStatsPktsOutRe = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktsOutRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktsOutRe.setDescription('Total number of packets that exited the WX Compression Engine\n\t\t\tafter reduction since the system was started.')
jnxWxSysStatsPktSizeIn1 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn1.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn1.setDescription('')
jnxWxSysStatsPktSizeIn2 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn2.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn2.setDescription('')
jnxWxSysStatsPktSizeIn3 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn3.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn3.setDescription('')
jnxWxSysStatsPktSizeIn4 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn4.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn4.setDescription('')
jnxWxSysStatsPktSizeIn5 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn5.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn5.setDescription('')
jnxWxSysStatsPktSizeIn6 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn6.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeIn6.setDescription('')
jnxWxSysStatsPktSizeOut1 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut1.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut1.setDescription('')
jnxWxSysStatsPktSizeOut2 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut2.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut2.setDescription('')
jnxWxSysStatsPktSizeOut3 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut3.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut3.setDescription('')
jnxWxSysStatsPktSizeOut4 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut4.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut4.setDescription('')
jnxWxSysStatsPktSizeOut5 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut5.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut5.setDescription('')
jnxWxSysStatsPktSizeOut6 = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 4, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut6.setStatus('current')
if mibBuilder.loadTexts: jnxWxSysStatsPktSizeOut6.setDescription('')
jnxWxAsm = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5))
if mibBuilder.loadTexts: jnxWxAsm.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsm.setDescription('\n\t\t\tInformation maintained by a Compressor for each Decompressor it has\n\t\t\ta session with.')
jnxWxAsmTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: jnxWxAsmTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmTable.setDescription('List of Decompressors the Compressor has sessions with.')
jnxWxAsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAsmIndex"))
if mibBuilder.loadTexts: jnxWxAsmEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmEntry.setDescription('A row in jnxWxAsmTable.')
jnxWxAsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxAsmIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmIndex.setDescription("This row's number, with range (1..jnxWxStatsAsmCount).")
jnxWxAsmIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAsmIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmIpAddress.setDescription('The IP address of the Decompressor.')
jnxWxAsmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: jnxWxAsmStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsTable.setDescription('Statistics maintained by a Compressor for each Decompressor it has\n\t\t\ta session with.')
jnxWxAsmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1), )
jnxWxAsmEntry.registerAugmentions(("JUNIPER-WX-MIB", "jnxWxAsmStatsEntry"))
jnxWxAsmStatsEntry.setIndexNames(*jnxWxAsmEntry.getIndexNames())
if mibBuilder.loadTexts: jnxWxAsmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsEntry.setDescription('A row in jnxWxAsmStatsTable.')
jnxWxAsmStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAsmStatsPktsIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsPktsIn.setDescription('The total number of packets into this WX, since\n\t\t\tthe system was started, that were identified for\n\t\t\treduction and addressed to the WX whose IP address\n\t\t\tis in the row in jnxWxAsmTable that matches\n\t\t\tthis row.')
jnxWxAsmStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAsmStatsPktsOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsPktsOut.setDescription('The total number of packets out of this WX, since\n\t\t\tthe system was started, that were identified for\n\t\t\treduction and addressed to the WX whose IP address\n\t\t\tis in the row in jnxWxAsmTable that matches\n\t\t\tthis row.')
jnxWxAsmStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAsmStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsBytesIn.setDescription('The total number of bytes into this WX, since\n\t\t\tthe system was started, that were identified for\n\t\t\treduction and addressed to the WX whose IP address\n\t\t\tis in the row in jnxWxAsmTable that matches\n\t\t\tthis row.')
jnxWxAsmStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAsmStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxAsmStatsBytesOut.setDescription('The total number of bytes out of this WX, since\n\t\t\tthe system was started, that were identified for\n\t\t\treduction and addressed to the WX whose IP address\n\t\t\tis in the row in jnxWxAsmTable that matches\n\t\t\tthis row.')
jnxWxVirtEndptTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 3), )
if mibBuilder.loadTexts: jnxWxVirtEndptTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxVirtEndptTable.setDescription('Virtual Endpoints defined in this WX')
jnxWxVirtEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 3, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxVirtEndptIndex"))
if mibBuilder.loadTexts: jnxWxVirtEndptEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxVirtEndptEntry.setDescription('A row in jnxWxVirtEndptTable.')
jnxWxVirtEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxVirtEndptIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxVirtEndptIndex.setDescription("A row's number, with range (1..jnxWxStatsVirtEndptCount)")
jnxWxVirtEndptName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 3, 1, 2), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxVirtEndptName.setStatus('current')
if mibBuilder.loadTexts: jnxWxVirtEndptName.setDescription('The name of the configured virtual endpoint')
jnxWxVirtEndptSubnetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxVirtEndptSubnetCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxVirtEndptSubnetCount.setDescription('The number of subnets associated with this\n\t\t\tvirtual endpoint')
jnxWxApp = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6))
if mibBuilder.loadTexts: jnxWxApp.setStatus('current')
if mibBuilder.loadTexts: jnxWxApp.setDescription('\n\t\t\tInformation maintained by a Compressor for each application\n\t\t\tthat is monitored.')
jnxWxAppTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1), )
if mibBuilder.loadTexts: jnxWxAppTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppTable.setDescription('List of applications currently monitored.')
jnxWxAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAppIndex"))
if mibBuilder.loadTexts: jnxWxAppEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppEntry.setDescription('A row in jnxWxAppTable.')
jnxWxAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxAppIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppIndex.setDescription("This row's number, with range (1..jnxWxStatsAppCount).")
jnxWxAppAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 1, 1, 2), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppAppName.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAppName.setDescription('The name of the application from which the data was\n\t\t\treceived (e.g., FTP, HTTP, Lotus Notes).')
jnxWxAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2), )
if mibBuilder.loadTexts: jnxWxAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsTable.setDescription('Statistics maintained by a Compressor for each application\n\t\t\tthat is monitored.')
jnxWxAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAsmIndex"), (0, "JUNIPER-WX-MIB", "jnxWxAppIndex"))
if mibBuilder.loadTexts: jnxWxAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsEntry.setDescription('A row in jnxWxAppStatsTable.\n\t\t\tNote that the indices are from jnxWxAsmTable and\n\t\t\tjnxWxAppTable. For each Decompressor this compressor has\n\t\t\ta session with (indexed by jnxWxAsmIndex), statistics\n\t\t\tare maintained for each application that is monitored\n\t\t\t(indexed by jnxWxAppIndex).')
jnxWxAppStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsBytesIn.setDescription('The total number of bytes into the WX, since the system\n\t\t\twas started, that were identified for reduction,\n\t\t\tand addressed to the WX whose IP address is in the\n\t\t\trow in jnxWxAsmTable that matches the index\n\t\t\tjnxWxAsmIndex, and that was received from the\n\t\t\tapplication whose name is in the row in jnxWxAppTable\n\t\t\tthat matches the index jnxWxAppIndex.')
jnxWxAppStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsBytesOut.setDescription('The total number of bytes out of the WX, since the\n\t\t\tsystem was started, that were identified for reduction,\n\t\t\tand addressed to the WX whose IP address is in the\n\t\t\trow in jnxWxAsmTable that matches the index\n\t\t\tjnxWxAsmIndex, and that was received from the\n\t\t\tapplication whose name is in the row in jnxWxAppTable.')
jnxWxAppStatsBytesInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsBytesInPercent.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsBytesInPercent.setDescription('The percentage of the bytes in for this application\n\t\t\tover the total bytes into the WX, since the system\n\t\t\twas started, that were identified for reduction,\n\t\t\tand addressed to the WX whose IP address is in the\n\t\t\trow in jnxWxAsmTable that matches the index\n\t\t\tjnxWxAsmIndex, and that was received from the\n\t\t\tapplication whose name is in the row in jnxWxAppTable\n\t\t\tthat matches the index jnxWxAppIndex.\n\n\t\t\tThe value returned is (percentage * 1000). Applications should\n\t\t\tdivide the returned value by 1000.')
jnxWxAppStatsAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 4), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsAppName.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsAppName.setDescription("The name of the application from which the data was\n\t\t\treceived (e.g., FTP, HTTP, Lotus Notes).\n\n\t\t\tNOTE: This object is here even though it's also in\n\t\t\tjnxWxAppTable. This is for the convenience of network\n\t\t\tmonitoring tools that require all columns to be from the\n\t\t\tsame table.")
jnxWxAppStatsAccelBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsAccelBytesIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsAccelBytesIn.setDescription('')
jnxWxAppStatsActiveSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsActiveSessionTime.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsActiveSessionTime.setDescription('')
jnxWxAppStatsEstBoostBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsEstBoostBytes.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsEstBoostBytes.setDescription('')
jnxWxAppStatsBytesOutWxc = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppStatsBytesOutWxc.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppStatsBytesOutWxc.setDescription('')
jnxWxAppAggrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3), )
if mibBuilder.loadTexts: jnxWxAppAggrStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAggrStatsTable.setDescription('Aggregate statistics maintained by a Compressor for each application\n\t\t\tthat is monitored. These statistics apply to the compressor as a whole\n\t\t\tand are summed over all decompressor sessions maintained by the compressor.')
jnxWxAppAggrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1), )
jnxWxAppEntry.registerAugmentions(("JUNIPER-WX-MIB", "jnxWxAppAggrStatsEntry"))
jnxWxAppAggrStatsEntry.setIndexNames(*jnxWxAppEntry.getIndexNames())
if mibBuilder.loadTexts: jnxWxAppAggrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAggrStatsEntry.setDescription('A row in jnxWxAppAggrStatsTable.')
jnxWxAppAggrStatsBytesInRe = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesInRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesInRe.setDescription('Total number of bytes that entered the WX Compression Engine\n\t\t\tfor this application since the system was started.')
jnxWxAppAggrStatsBytesOutRe = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesOutRe.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesOutRe.setDescription('Total number of bytes that exited the WX Compression Engine\n\t\t\tafter reduction for this application since the system was started.')
jnxWxAppAggrStatsBytesInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesInPercent.setStatus('current')
if mibBuilder.loadTexts: jnxWxAppAggrStatsBytesInPercent.setDescription('The percentage of the bytes in for this application over the\n\t\t\ttotal bytes into the WX Compression Engine.\n\n\t\t\tThe value returned is (percentage * 1000). Applications should\n\t\t\tdivide the returned value by 1000.')
jnxWxWanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 4), )
if mibBuilder.loadTexts: jnxWxWanStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxWanStatsTable.setDescription('Per application WAN performance statistics')
jnxWxWanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 4, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAsmIndex"), (0, "JUNIPER-WX-MIB", "jnxWxAppIndex"))
if mibBuilder.loadTexts: jnxWxWanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxWanStatsEntry.setDescription('A row in jnxWxWanStatsTable.\n\t\t\tNote that the indices are from jnxWxAsmTable and\n\t\t\tjnxWxAppTable. For each Decompressor this compressor has\n\t\t\ta session with (indexed by jnxWxAsmIndex), statistics\n\t\t\tare maintained for each application that is monitored\n\t\t\t(indexed by jnxWxAppIndex).')
jnxWxWanStatsBytesToWan = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWanStatsBytesToWan.setStatus('current')
if mibBuilder.loadTexts: jnxWxWanStatsBytesToWan.setDescription('Total number of bytes sent to the wan on a per\n\t\t\t application basis')
jnxWxWanStatsBytesFromWan = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWanStatsBytesFromWan.setStatus('current')
if mibBuilder.loadTexts: jnxWxWanStatsBytesFromWan.setDescription('Total number of bytes received from the WAN\n\t\t\ton a per application basis')
jnxWxAccelAppNameTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 5), )
if mibBuilder.loadTexts: jnxWxAccelAppNameTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppNameTable.setDescription('List of applications that can be accelerated by\n\t\t\tthe WX device.')
jnxWxAccelAppNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 5, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAccelAppIndex"))
if mibBuilder.loadTexts: jnxWxAccelAppNameEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppNameEntry.setDescription('A row in jnxWxAccelAppNameTable. Each row contains\n\t\t\tthe name of an application that can be accelerated.')
jnxWxAccelAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxAccelAppIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppIndex.setDescription("This row's number, with range (1..jnxWxStatsAccelAppCount).")
jnxWxAccelAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 5, 1, 2), TcAppName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAccelAppName.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppName.setDescription('The name of the application from which the data was\n\t\t\treceived (e.g., FTP, HTTP, Lotus Notes).')
jnxWxAccelAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 6), )
if mibBuilder.loadTexts: jnxWxAccelAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppStatsTable.setDescription('Accelerated application performance statistics. Includes\n\t\t\t time with and without acceleration in seconds')
jnxWxAccelAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 6, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxAsmIndex"), (0, "JUNIPER-WX-MIB", "jnxWxAccelAppIndex"))
if mibBuilder.loadTexts: jnxWxAccelAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppStatsEntry.setDescription('A row in jnxWxAccelAppStatsTable. Indices are from\n\t\t\tjnxWxAsmTable and jnxWxAccelAppNameTable. For each Decompressor\n\t\t\tthis compressor has a session with (indexed by jnxWxAsmIndex),\n\t\t\tstatistics are maintained for each application that is\n\t\t\taccelereated (indexed by jnxWxAccelAppIndex)')
jnxWxAccelAppTimeWithAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAccelAppTimeWithAccel.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppTimeWithAccel.setDescription('Total number of seconds required to complete all\n\t\t\t transactions with acceleration enabled.')
jnxWxAccelAppTimeWithoutAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 6, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxAccelAppTimeWithoutAccel.setStatus('current')
if mibBuilder.loadTexts: jnxWxAccelAppTimeWithoutAccel.setDescription('Total number of seconds that would be required to\n\t\t\tcomplete all transactions if acceleration was disabled.')
jnxWxBurstStats = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7))
if mibBuilder.loadTexts: jnxWxBurstStats.setStatus('current')
if mibBuilder.loadTexts: jnxWxBurstStats.setDescription('\n\t\t\tSub-tree for WAN Acceleration system statistics.')
jnxWxBurstStatsStartTime = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxBurstStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxWxBurstStatsStartTime.setDescription('The start of the minute in seconds since\n\t\t\tmidnight (00:00:00), January 1, 1970, UTC\n\t\t\tover which the burst stats apply.')
jnxWxBurstStatsBpsIn = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxBurstStatsBpsIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxBurstStatsBpsIn.setDescription('Burst bits per second into reduction engine for the past minute.')
jnxWxBurstStatsBpsOut = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxBurstStatsBpsOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxBurstStatsBpsOut.setDescription('Burst bits per second out of reduction engine for the past minute.')
jnxWxBurstStatsBpsPt = MibScalar((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxBurstStatsBpsPt.setStatus('current')
if mibBuilder.loadTexts: jnxWxBurstStatsBpsPt.setDescription('Burst pass-through bits per second for the past minute.')
jnxWxQos = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10))
if mibBuilder.loadTexts: jnxWxQos.setStatus('current')
if mibBuilder.loadTexts: jnxWxQos.setDescription('\n\t\t\tInformation maintained by a Compressor for each QoS class\n\t\t\tthat is monitored.')
jnxWxQosEndptTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: jnxWxQosEndptTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosEndptTable.setDescription('List of endpoints managed by QoS.')
jnxWxQosEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxQosEndptIndex"))
if mibBuilder.loadTexts: jnxWxQosEndptEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosEndptEntry.setDescription('A row in jnxWxQosEndptTable.')
jnxWxQosEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxQosEndptIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosEndptIndex.setDescription("This row's number, with range (1..jnxWxStatsQosEndptCount).")
jnxWxQosEndptIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 1, 1, 2), TcQosIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosEndptIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosEndptIdentifier.setDescription('The IP address of an Decompressor or the name\n\t\t\tof a virtual endpoint.')
jnxWxQosClassTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 2), )
if mibBuilder.loadTexts: jnxWxQosClassTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosClassTable.setDescription('List of QoS classes currently monitored.')
jnxWxQosClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 2, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxQosClassIndex"))
if mibBuilder.loadTexts: jnxWxQosClassEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosClassEntry.setDescription('A row in the jnxWxQosClassTable')
jnxWxQosClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxQosClassIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosClassIndex.setDescription("This row's number, with range (1..jnxWxStatsQosClassCount).")
jnxWxQosClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 2, 1, 2), TcQosIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosClassName.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosClassName.setDescription('The name of the QoS class')
jnxWxQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3), )
if mibBuilder.loadTexts: jnxWxQosStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsTable.setDescription('Per class QoS performance statistics')
jnxWxQosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxQosEndptIndex"), (0, "JUNIPER-WX-MIB", "jnxWxQosClassIndex"))
if mibBuilder.loadTexts: jnxWxQosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsEntry.setDescription('A row in the jnxWxQosStatsTable. Indexed by\n\t\t\tdecompressor and the corresponding QoS class.\n\t\t\tStatistics are maintained per endpoint\n\t\t\t(indexed by jnxWxQosEndptIndex) and per QoS\n\t\t\tclass associated with the endpoint (indexed\n\t\t\tby jnxWxQosClassIndex)')
jnxWxQosStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsBytesIn.setDescription('Total number of bytes received from the WAN\n\t\t\ton a per class basis')
jnxWxQosStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsBytesOut.setDescription('Total number of bytes sent to the WAN on a per\n\t\t\t class basis')
jnxWxQosStatsBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsBytesDropped.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsBytesDropped.setDescription('Total number of bytes dropped on a per\n\t\t\t class basis')
jnxWxQosStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsPktsIn.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsPktsIn.setDescription('Total number of packets received from the WAN\n\t\t\ton a per class basis')
jnxWxQosStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsPktsOut.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsPktsOut.setDescription('Total number of packets sent to the wan on a per\n\t\t\t class basis')
jnxWxQosStatsPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 10, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxQosStatsPktsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxWxQosStatsPktsDropped.setDescription('Total number of packets dropped\n\t\t\ton a per class basis')
jnxWxWanPerf = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14))
if mibBuilder.loadTexts: jnxWxWanPerf.setStatus('current')
if mibBuilder.loadTexts: jnxWxWanPerf.setDescription('\n\t\t\t')
jnxWxWpEndptTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 1), )
if mibBuilder.loadTexts: jnxWxWpEndptTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpEndptTable.setDescription('List of endpoints managed by Multi-path')
jnxWxWpEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 1, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxWpEndptIndex"))
if mibBuilder.loadTexts: jnxWxWpEndptEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpEndptEntry.setDescription('')
jnxWxWpEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxWxWpEndptIndex.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpEndptIndex.setDescription('')
jnxWxWpEndptIp = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpEndptIp.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpEndptIp.setDescription('')
jnxWxWpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2), )
if mibBuilder.loadTexts: jnxWxWpStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsTable.setDescription('')
jnxWxWpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1), ).setIndexNames((0, "JUNIPER-WX-MIB", "jnxWxWpEndptIndex"))
if mibBuilder.loadTexts: jnxWxWpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsEntry.setDescription('')
jnxWxWpStatsLatencyThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLatencyThresh.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLatencyThresh.setDescription('')
jnxWxWpStatsAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsAvgLatency.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsAvgLatency.setDescription('')
jnxWxWpStatsLatencyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLatencyCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLatencyCount.setDescription('')
jnxWxWpStatsLatencyAboveThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLatencyAboveThresh.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLatencyAboveThresh.setDescription('')
jnxWxWpStatsLatencyAboveThreshCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLatencyAboveThreshCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLatencyAboveThreshCount.setDescription('')
jnxWxWpStatsLossPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLossPercent.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLossPercent.setDescription('')
jnxWxWpStatsLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLossCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLossCount.setDescription('')
jnxWxWpStatsEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsEventCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsEventCount.setDescription('')
jnxWxWpStatsDiversionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsDiversionCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsDiversionCount.setDescription('')
jnxWxWpStatsReturnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsReturnCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsReturnCount.setDescription('')
jnxWxWpStatsLastDown = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsLastDown.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsLastDown.setDescription('')
jnxWxWpStatsUnavailableCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsUnavailableCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsUnavailableCount.setDescription('')
jnxWxWpStatsMinuteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 2, 14, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxWxWpStatsMinuteCount.setStatus('current')
if mibBuilder.loadTexts: jnxWxWpStatsMinuteCount.setDescription('')
jnxWxEventObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 1))
if mibBuilder.loadTexts: jnxWxEventObjs.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventObjs.setDescription('\n\t\t\tBranch for objects meant only to be sent in event varbinds.')
jnxWxEventEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2))
if mibBuilder.loadTexts: jnxWxEventEvents.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventEvents.setDescription('\n\t\t\tBranch for the events themselves.')
jnxWxEventEventsV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0))
if mibBuilder.loadTexts: jnxWxEventEventsV2.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventEventsV2.setDescription('\n\t\t\tBranch for SNMPv2 events. The OIDs for SNMPv2 events should\n\t\t\thave a zero as the next-to-last sub-identifier (as specified\n\t\t\tin RFC1902).')
jnxWxEventRipAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 1)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventRipAuthFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventRipAuthFailure.setDescription('RIP authentication failure')
jnxWxEventCompressionBufferOverflow = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 2)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventCompressionBufferOverflow.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventCompressionBufferOverflow.setDescription("The compressor's input buffer is approaching full capacity.\n\t\t\t\n\t\t\tThis trap is currently unused.")
jnxWxEventCompressionSessionClosed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 3)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventCompressionSessionClosed.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventCompressionSessionClosed.setDescription("The compressor's session to the device described in\n\t\t\tjnxWxCommonEventDescr was terminated.")
jnxWxEventDecompressionSessionClosed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 4)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventDecompressionSessionClosed.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventDecompressionSessionClosed.setDescription("The decompressor's session to the device described in\n\t\t\tjnxWxCommonEventDescr was terminated.")
jnxWxEventCompressionSessionOpened = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 5)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventCompressionSessionOpened.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventCompressionSessionOpened.setDescription("The compressor's session to the device described in\n\t\t\tjnxWxCommonEventDescr was opened.")
jnxWxEventDecompressionSessionOpened = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 6)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventDecompressionSessionOpened.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventDecompressionSessionOpened.setDescription("The decompressor's session to the device described in\n\t\t\tjnxWxCommonEventDescr was opened.")
jnxWxEventPrimaryRegServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 7)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventPrimaryRegServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventPrimaryRegServerUnreachable.setDescription('The primary registration server is\n\t\t\tcurrently unreachable.')
jnxWxEventSecondaryRegServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 8)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventSecondaryRegServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventSecondaryRegServerUnreachable.setDescription('The secondary registration server is\n\t\t\tcurrently unreachable.')
jnxWxEventMultiNodeMasterUp = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 9)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventMultiNodeMasterUp.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventMultiNodeMasterUp.setDescription("The system designated as the 'master' of a multi-node\n\t\t\tcame up. This notification is generated by the\n\t\t\tsystem that's designated as the 'master' of the\n\t\t\tmulti-node.\n\n\t\t\tNote that the corresponding Down notification is\n\t\t\tgenerated by the designated 'master-backup' of the\n\t\t\tsame multi-node.\n\t\t\t\n\t\t\tThis trap is currently unused.")
jnxWxEventMultiNodeMasterDown = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 10)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventMultiNodeMasterDown.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventMultiNodeMasterDown.setDescription("The system designated as the 'master' of a multi-node\n\t\t\tis currently down. This notification is generated by the\n\t\t\tsystem that's designated as the 'master-backup' of the\n\t\t\tsame multi-node.\n\n\t\t\tNote that the corresponding Up notification is\n\t\t\tgenerated by the designated 'master' of the same\n\t\t\tmulti-node.\n\t\t\t\n\t\t\tThis trap is currently unused.")
jnxWxEventMultiNodeLastUp = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 11)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventMultiNodeLastUp.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventMultiNodeLastUp.setDescription("The system designated as the 'last-node' of a multi-node\n\t\t\tcame up. This notification is generated by the\n\t\t\tsystem that's designated as the 'last-node' of the\n\t\t\tmulti-node.\n\n\t\t\tNote that the corresponding Down notification is\n\t\t\tgenerated by the designated 'master' of the\n\t\t\tsame multi-node.\n\t\t\t\n\t\t\tThis trap is currently unused.")
jnxWxEventMultiNodeLastDown = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 12)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventMultiNodeLastDown.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventMultiNodeLastDown.setDescription("The system designated as the 'last-node' of a multi-node\n\t\t\tis currently down. This notification is generated by the\n\t\t\tsystem that's designated as the 'master' of the\n\t\t\tsame multi-node.\n\n\t\t\tNote that the corresponding Up notification is\n\t\t\tgenerated by the designated 'last-node' of the same\n\t\t\tmulti-node.\n\t\t\t\n\t\t\tThis trap is currently unused.")
jnxWxEventPrimaryDownBackupEngaged = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 13)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventPrimaryDownBackupEngaged.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventPrimaryDownBackupEngaged.setDescription("The system designated as the 'primary' is currently\n\t\t\tunreachable. This notification is generated by the\n\t\t\tsystem that's designated as the 'backup' device.\n\t\t\tThe backup device is engaged for the primary device.")
jnxWxEventPrimaryDownBackupEngageFailed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 14)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventPrimaryDownBackupEngageFailed.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventPrimaryDownBackupEngageFailed.setDescription("The system designated as the 'primary' is currently\n\t\t\tunreachable. This notification is generated by the\n\t\t\tsystem that's designated as the 'backup' device.\n\t\t\tThe backup device failed to engage for the primary device.")
jnxWxEventPrimaryUpBackupDisengaged = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 15)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventPrimaryUpBackupDisengaged.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventPrimaryUpBackupDisengaged.setDescription("The system designated as the 'primary' is currently\n\t\t\treachable. This notification is generated by the\n\t\t\tsystem that's designated as the 'backup' device.\n\t\t\tThe backup device has disengaged itself.")
jnxWxEventMultiPathStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 16)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventMultiPathStatusChange.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventMultiPathStatusChange.setDescription('The status of the primary or secondary path to another\n\t\t\tmulti-path enabled system changed. The path became inactive\n\t\t\tor failed after previously being active or vice versa.\n\t\t\tThis might have caused traffic designated to flow over\n\t\t\tthis path to be switched from or to this path.')
jnxWxEventDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 17)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventDiskFailure.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventDiskFailure.setDescription('A hard disk failed on the system. The system was rebooted,\n\t\t\tand will now operate without the downed disk, at a degraded\n\t\t\tperformance. Dictionary accumulated until this point was lost.')
jnxWxEventWanPerfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 18)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventWanPerfStatusChange.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventWanPerfStatusChange.setDescription('The status of the Path on which WAN Performance Monitoring is\n \t\t\tenabled has changed. The performance of the path has changed either\n\t\t\tfrom acceptable to unacceptable or vice versa.')
jnxWxEventDCQAboveHiWatermark = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 19)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventDCQAboveHiWatermark.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventDCQAboveHiWatermark.setDescription('The decompression queue has reached the high watermark.')
jnxWxEventDCQBelowHiWatermark = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 20)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventDCQBelowHiWatermark.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventDCQBelowHiWatermark.setDescription('The decompression queue has fallen below the high watermark.')
jnxWxEventPerformanceThreshCrossed = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 21)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventPerformanceThreshCrossed.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventPerformanceThreshCrossed.setDescription('The threshold for a configured perfromance event has been\n            crossed. This notification indicates that some system parameter\n            being measured has reached a critical value.')
jnxWxEventClientLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 22)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventClientLinkDown.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventClientLinkDown.setDescription('Link to the Client went down.')
jnxWxEventClientLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 8239, 2, 2, 1, 3, 2, 0, 23)).setObjects(("JUNIPER-WX-COMMON-MIB", "jnxWxCommonEventDescr"))
if mibBuilder.loadTexts: jnxWxEventClientLinkUp.setStatus('current')
if mibBuilder.loadTexts: jnxWxEventClientLinkUp.setDescription('Link to the client came up.')
mibBuilder.exportSymbols("JUNIPER-WX-MIB", jnxWxAccelAppTimeWithAccel=jnxWxAccelAppTimeWithAccel, jnxWxSysStatsPktSizeIn1=jnxWxSysStatsPktSizeIn1, jnxWxAppAggrStatsBytesInPercent=jnxWxAppAggrStatsBytesInPercent, jnxWxSysStats=jnxWxSysStats, jnxWxWpStatsLatencyAboveThreshCount=jnxWxWpStatsLatencyAboveThreshCount, jnxWxSysStatsBytesOfPt=jnxWxSysStatsBytesOfPt, jnxWxEventMultiNodeLastDown=jnxWxEventMultiNodeLastDown, jnxWxEventDiskFailure=jnxWxEventDiskFailure, jnxWxStatsAsmCount=jnxWxStatsAsmCount, jnxWxSysStatsBytesInRe=jnxWxSysStatsBytesInRe, jnxWxSysStatsPktSizeIn5=jnxWxSysStatsPktSizeIn5, jnxWxSysStatsThruputIn=jnxWxSysStatsThruputIn, jnxWxBurstStatsStartTime=jnxWxBurstStatsStartTime, jnxWxQosStatsBytesDropped=jnxWxQosStatsBytesDropped, jnxWxWpStatsLatencyAboveThresh=jnxWxWpStatsLatencyAboveThresh, jnxWxWpStatsEventCount=jnxWxWpStatsEventCount, jnxWxMibModule=jnxWxMibModule, jnxWxAsmTable=jnxWxAsmTable, jnxWxWanStatsBytesToWan=jnxWxWanStatsBytesToWan, jnxWxObjs=jnxWxObjs, jnxWxSysStatsBytesPtNoAe=jnxWxSysStatsBytesPtNoAe, jnxWxSysStatsBytesOutRe=jnxWxSysStatsBytesOutRe, PYSNMP_MODULE_ID=jnxWxMibModule, jnxWxEventPrimaryRegServerUnreachable=jnxWxEventPrimaryRegServerUnreachable, jnxWxQosClassName=jnxWxQosClassName, jnxWxEventPrimaryDownBackupEngaged=jnxWxEventPrimaryDownBackupEngaged, jnxWxWpStatsDiversionCount=jnxWxWpStatsDiversionCount, jnxWxQosEndptTable=jnxWxQosEndptTable, jnxWxSysStatsPktSizeOut1=jnxWxSysStatsPktSizeOut1, jnxWxSysStatsPktSizeIn4=jnxWxSysStatsPktSizeIn4, jnxWxWpEndptEntry=jnxWxWpEndptEntry, jnxWxQosStatsBytesIn=jnxWxQosStatsBytesIn, jnxWxEventSecondaryRegServerUnreachable=jnxWxEventSecondaryRegServerUnreachable, jnxWxEventClientLinkDown=jnxWxEventClientLinkDown, jnxWxAccelAppTimeWithoutAccel=jnxWxAccelAppTimeWithoutAccel, jnxWxSysStatsPktsOutRe=jnxWxSysStatsPktsOutRe, jnxWxStatsQosEndptCount=jnxWxStatsQosEndptCount, jnxWxAppAggrStatsTable=jnxWxAppAggrStatsTable, jnxWxSysStatsBytesTpIn=jnxWxSysStatsBytesTpIn, jnxWxWanStatsTable=jnxWxWanStatsTable, jnxWxStatsAppCount=jnxWxStatsAppCount, jnxWxAppStatsAppName=jnxWxAppStatsAppName, jnxWxVirtEndptName=jnxWxVirtEndptName, jnxWxAsm=jnxWxAsm, jnxWxSysStatsPktsTpIn=jnxWxSysStatsPktsTpIn, jnxWxWpStatsTable=jnxWxWpStatsTable, jnxWxSysStatsBytesInAe=jnxWxSysStatsBytesInAe, jnxWxSysStatsPktsTpOut=jnxWxSysStatsPktsTpOut, jnxWxAsmStatsEntry=jnxWxAsmStatsEntry, jnxWxWpStatsMinuteCount=jnxWxWpStatsMinuteCount, jnxWxAsmStatsTable=jnxWxAsmStatsTable, jnxWxAppStatsBytesOut=jnxWxAppStatsBytesOut, jnxWxSysStatsPktSizeOut5=jnxWxSysStatsPktSizeOut5, jnxWxEventDCQAboveHiWatermark=jnxWxEventDCQAboveHiWatermark, jnxWxSysStatsPktsInAe=jnxWxSysStatsPktsInAe, jnxWxEventDCQBelowHiWatermark=jnxWxEventDCQBelowHiWatermark, jnxWxAsmIpAddress=jnxWxAsmIpAddress, jnxWxBurstStatsBpsOut=jnxWxBurstStatsBpsOut, jnxWxQosStatsTable=jnxWxQosStatsTable, jnxWxAppStatsEstBoostBytes=jnxWxAppStatsEstBoostBytes, jnxWxEventEventsV2=jnxWxEventEventsV2, jnxWxWpStatsUnavailableCount=jnxWxWpStatsUnavailableCount, jnxWxWpEndptIp=jnxWxWpEndptIp, jnxWxQosEndptIdentifier=jnxWxQosEndptIdentifier, jnxWxAsmStatsBytesOut=jnxWxAsmStatsBytesOut, jnxWxSysStatsBytesPtFilter=jnxWxSysStatsBytesPtFilter, jnxWxVirtEndptIndex=jnxWxVirtEndptIndex, jnxWxEventClientLinkUp=jnxWxEventClientLinkUp, jnxWxWpStatsLossPercent=jnxWxWpStatsLossPercent, jnxWxVirtEndptEntry=jnxWxVirtEndptEntry, jnxWxWpStatsLatencyThresh=jnxWxWpStatsLatencyThresh, jnxWxWanStatsBytesFromWan=jnxWxWanStatsBytesFromWan, jnxWxEventWanPerfStatusChange=jnxWxEventWanPerfStatusChange, jnxWxEventDecompressionSessionClosed=jnxWxEventDecompressionSessionClosed, jnxWxSysStatsPktSizeOut2=jnxWxSysStatsPktSizeOut2, jnxWxSysStatsBytesTpOut=jnxWxSysStatsBytesTpOut, jnxWxSysStatsPktSizeIn2=jnxWxSysStatsPktSizeIn2, jnxWxAsmIndex=jnxWxAsmIndex, jnxWxAppAggrStatsBytesOutRe=jnxWxAppAggrStatsBytesOutRe, jnxWxEventMultiNodeMasterDown=jnxWxEventMultiNodeMasterDown, jnxWxQosStatsEntry=jnxWxQosStatsEntry, jnxWxSysStatsThruputOut=jnxWxSysStatsThruputOut, jnxWxAppAggrStatsBytesInRe=jnxWxAppAggrStatsBytesInRe, jnxWxEventRipAuthFailure=jnxWxEventRipAuthFailure, jnxWxAsmStatsBytesIn=jnxWxAsmStatsBytesIn, jnxWxAppStatsActiveSessionTime=jnxWxAppStatsActiveSessionTime, jnxWxAccelAppStatsEntry=jnxWxAccelAppStatsEntry, jnxWxApp=jnxWxApp, jnxWxVirtEndptTable=jnxWxVirtEndptTable, jnxWxQosEndptIndex=jnxWxQosEndptIndex, jnxWxAppAppName=jnxWxAppAppName, jnxWxWanStatsEntry=jnxWxWanStatsEntry, jnxWxSysStatsPktsTpPt=jnxWxSysStatsPktsTpPt, jnxWxEvents=jnxWxEvents, jnxWxQosStatsPktsOut=jnxWxQosStatsPktsOut, jnxWxWanPerf=jnxWxWanPerf, jnxWxSysStatsBytesOutOob=jnxWxSysStatsBytesOutOob, jnxWxAppEntry=jnxWxAppEntry, jnxWxQosClassIndex=jnxWxQosClassIndex, jnxWxQosStatsPktsIn=jnxWxQosStatsPktsIn, jnxWxWpStatsReturnCount=jnxWxWpStatsReturnCount, jnxWxWpStatsEntry=jnxWxWpStatsEntry, jnxWxWpStatsAvgLatency=jnxWxWpStatsAvgLatency, jnxWxEventCompressionBufferOverflow=jnxWxEventCompressionBufferOverflow, jnxWxEventCompressionSessionOpened=jnxWxEventCompressionSessionOpened, jnxWxAppStatsTable=jnxWxAppStatsTable, jnxWxEventCompressionSessionClosed=jnxWxEventCompressionSessionClosed, jnxWxAccelAppName=jnxWxAccelAppName, jnxWxSysStatsBytesTpPt=jnxWxSysStatsBytesTpPt, jnxWxAsmStatsPktsOut=jnxWxAsmStatsPktsOut, jnxWxAsmEntry=jnxWxAsmEntry, jnxWxEventMultiPathStatusChange=jnxWxEventMultiPathStatusChange, jnxWxBurstStatsBpsPt=jnxWxBurstStatsBpsPt, jnxWxAccelAppNameTable=jnxWxAccelAppNameTable, jnxWxQosEndptEntry=jnxWxQosEndptEntry, jnxWxAsmStatsPktsIn=jnxWxAsmStatsPktsIn, jnxWxEventPrimaryUpBackupDisengaged=jnxWxEventPrimaryUpBackupDisengaged, jnxWxEventEvents=jnxWxEventEvents, jnxWxEventMultiNodeMasterUp=jnxWxEventMultiNodeMasterUp, jnxWxWpEndptIndex=jnxWxWpEndptIndex, jnxWxEventObjs=jnxWxEventObjs, jnxWxSysStatsPktsOfPt=jnxWxSysStatsPktsOfPt, jnxWxAppTable=jnxWxAppTable, jnxWxQosClassEntry=jnxWxQosClassEntry, jnxWxSysStatsPktsInRe=jnxWxSysStatsPktsInRe, jnxWxQos=jnxWxQos, jnxWxQosStatsPktsDropped=jnxWxQosStatsPktsDropped, jnxWxAccelAppNameEntry=jnxWxAccelAppNameEntry, jnxWxBurstStats=jnxWxBurstStats, jnxWxConfMib=jnxWxConfMib, jnxWxAccelAppIndex=jnxWxAccelAppIndex, jnxWxAppStatsBytesInPercent=jnxWxAppStatsBytesInPercent, jnxWxBurstStatsBpsIn=jnxWxBurstStatsBpsIn, jnxWxSysStatsPktSizeOut3=jnxWxSysStatsPktSizeOut3, jnxWxMib=jnxWxMib, jnxWxWpStatsLastDown=jnxWxWpStatsLastDown, jnxWxAppIndex=jnxWxAppIndex, jnxWxWpEndptTable=jnxWxWpEndptTable, jnxWxStatsVirtEndptCount=jnxWxStatsVirtEndptCount, jnxWxEventPrimaryDownBackupEngageFailed=jnxWxEventPrimaryDownBackupEngageFailed, jnxWxSysStatsPktSizeOut4=jnxWxSysStatsPktSizeOut4, jnxWxAppStatsBytesOutWxc=jnxWxAppStatsBytesOutWxc, jnxWxEventPerformanceThreshCrossed=jnxWxEventPerformanceThreshCrossed, jnxWxSysStatsPktsPtNoAe=jnxWxSysStatsPktsPtNoAe, jnxWxEventMultiNodeLastUp=jnxWxEventMultiNodeLastUp, jnxWxSysStatsPktSizeIn3=jnxWxSysStatsPktSizeIn3, jnxWxAppStatsBytesIn=jnxWxAppStatsBytesIn, jnxWxStatsAccelAppCount=jnxWxStatsAccelAppCount, jnxWxAppStatsAccelBytesIn=jnxWxAppStatsAccelBytesIn, jnxWxWpStatsLossCount=jnxWxWpStatsLossCount, jnxWxQosClassTable=jnxWxQosClassTable, jnxWxSysStatsPktsOutAe=jnxWxSysStatsPktsOutAe, jnxWxEventDecompressionSessionOpened=jnxWxEventDecompressionSessionOpened, jnxWxWpStatsLatencyCount=jnxWxWpStatsLatencyCount, jnxWxSysStatsPktsPtFilter=jnxWxSysStatsPktsPtFilter, jnxWxVirtEndptSubnetCount=jnxWxVirtEndptSubnetCount, jnxWxStatsUpdateTime=jnxWxStatsUpdateTime, jnxWxStatsQosClassCount=jnxWxStatsQosClassCount, jnxWxStatsWpEndptCount=jnxWxStatsWpEndptCount, jnxWxAppStatsEntry=jnxWxAppStatsEntry, jnxWxQosStatsBytesOut=jnxWxQosStatsBytesOut, jnxWxSysStatsBytesOutAe=jnxWxSysStatsBytesOutAe, jnxWxSysStatsPeakRdn=jnxWxSysStatsPeakRdn, jnxWxSysStatsPktSizeIn6=jnxWxSysStatsPktSizeIn6, jnxWxAccelAppStatsTable=jnxWxAccelAppStatsTable, jnxWxSysStatsPktSizeOut6=jnxWxSysStatsPktSizeOut6, jnxWxAppAggrStatsEntry=jnxWxAppAggrStatsEntry)
