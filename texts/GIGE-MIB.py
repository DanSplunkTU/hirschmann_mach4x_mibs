#
# PySNMP MIB module GIGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/GIGE-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 17:33:14 2021
# On host fv-az77-605 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
adr2500c, = mibBuilder.importSymbols("ADR2500C-MIB", "adr2500c")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SagemBoolean, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "Severity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, NotificationType, TimeTicks, ObjectIdentity, MibIdentifier, Unsigned32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Bits")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
gige = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 17, 10))
if mibBuilder.loadTexts: gige.setLastUpdated('0205220000Z')
if mibBuilder.loadTexts: gige.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
if mibBuilder.loadTexts: gige.setContactInfo('    ')
if mibBuilder.loadTexts: gige.setDescription('The MIB module specific for GigE module of Adr2500c')
class BandwidthSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16, 64))
    namedValues = NamedValues(("none", 0), ("stm1", 1), ("stm4", 4), ("stm16", 16), ("stm64", 64))

gigeNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigeNumber.setStatus('current')
if mibBuilder.loadTexts: gigeNumber.setDescription('Number of gigabitEthernet cards in equipment.')
gigeTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11), )
if mibBuilder.loadTexts: gigeTable.setStatus('current')
if mibBuilder.loadTexts: gigeTable.setDescription('List of gigabitEthernet cards in equipment.')
gigeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1), ).setIndexNames((0, "GIGE-MIB", "gigeIndex"))
if mibBuilder.loadTexts: gigeEntry.setStatus('current')
if mibBuilder.loadTexts: gigeEntry.setDescription('A particular gigabitEthernet card of the equipment.')
gigeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gigeIndex.setStatus('current')
if mibBuilder.loadTexts: gigeIndex.setDescription('A unique value which identify a particular\tgigabitEthernet card of the equipment.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware')
gigeSdhBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 2), BandwidthSize()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeSdhBandwidth.setStatus('current')
if mibBuilder.loadTexts: gigeSdhBandwidth.setDescription('This field set the size of the SDH Bandwidth which is allocated to the gigabitEthernet card.')
gigeAutoTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeAutoTest.setStatus('current')
if mibBuilder.loadTexts: gigeAutoTest.setDescription('When the value of this field is set to true, an autotest is executed on the gigabitEthernet card.')
gigeWarmStart = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 11, 1, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gigeWarmStart.setStatus('current')
if mibBuilder.loadTexts: gigeWarmStart.setDescription('When the value of this field is set to true, a warmStart is launched on the gigabitEthernet card.')
class LoopbackGE(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10))
    namedValues = NamedValues(("none", 0), ("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("remote", 10))

maintenanceNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenanceNumber.setStatus('current')
if mibBuilder.loadTexts: maintenanceNumber.setDescription('Number of gigabitEthernet ports in equipment.')
maintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21), )
if mibBuilder.loadTexts: maintenanceTable.setStatus('current')
if mibBuilder.loadTexts: maintenanceTable.setDescription('List of gigabitEthernet ports in equipment.')
maintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1), ).setIndexNames((0, "GIGE-MIB", "maintenanceIndex"))
if mibBuilder.loadTexts: maintenanceEntry.setStatus('current')
if mibBuilder.loadTexts: maintenanceEntry.setDescription('A particular gigabitEthernet port of the equipment.')
maintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenanceIndex.setStatus('current')
if mibBuilder.loadTexts: maintenanceIndex.setDescription('A unique value which identify a particular\tgigabitEthernet port of the equipment.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware')
maintenanceAutoTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceAutoTest.setStatus('current')
if mibBuilder.loadTexts: maintenanceAutoTest.setDescription('When the value of this field is set to true, an autotest is executed on the gigabitEthernet port.')
maintenanceLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 3), LoopbackGE()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceLoopback.setStatus('current')
if mibBuilder.loadTexts: maintenanceLoopback.setDescription('This field set a loopback mode to a particular gigabitEthernet port.')
maintenancePRBSSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenancePRBSSent.setStatus('current')
if mibBuilder.loadTexts: maintenancePRBSSent.setDescription('This field allows to sent a PRBS frame on a particular gigabitEthernet port.')
maintenancePRBSReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenancePRBSReceived.setStatus('current')
if mibBuilder.loadTexts: maintenancePRBSReceived.setDescription('The value is the actual PRBS frame received in the particular gigabitEthernet port.')
maintenanceResetAllCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetAllCounters.setStatus('current')
if mibBuilder.loadTexts: maintenanceResetAllCounters.setDescription('When the value of this field is set to true, all counters attached to this interface are deleted.')
maintenanceResetLanCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetLanCounters.setStatus('current')
if mibBuilder.loadTexts: maintenanceResetLanCounters.setDescription('When the value of this field is set to true, all QoS counters attached to this interface are deleted.')
maintenanceResetGfpCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 8), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetGfpCounters.setStatus('current')
if mibBuilder.loadTexts: maintenanceResetGfpCounters.setDescription('When the value of this field is set to true, all Gfp counters attached to this interface are deleted.')
maintenanceResetQosCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 21, 1, 9), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintenanceResetQosCounters.setStatus('current')
if mibBuilder.loadTexts: maintenanceResetQosCounters.setDescription('When the value of this field is set to true, all Qos counters attached to this interface are deleted.')
class QosType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 10, 11, 13))
    namedValues = NamedValues(("none", 0), ("pauseMode", 1), ("userPriority", 2), ("vlanId", 3), ("balanced", 4), ("ipv4TOS", 10), ("ipv6TClass", 11), ("dscp", 13))

class CongestionControl(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("red", 1), ("wred", 2))

class SchedulingSystem(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 4, 5, 10))
    namedValues = NamedValues(("unknown", 0), ("spq", 1), ("wfq", 4), ("cbwfq", 5), ("wrr", 10))

qosNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNumber.setStatus('current')
if mibBuilder.loadTexts: qosNumber.setDescription('Number of Quality of Service set in equipment. This number match to channelNumber because\n\tthere is only one Qos per Sdh Channel.\n\t= number of entries in qosTable')
qosTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31), )
if mibBuilder.loadTexts: qosTable.setStatus('current')
if mibBuilder.loadTexts: qosTable.setDescription('List of Qos in equipment.')
qosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1), ).setIndexNames((0, "GIGE-MIB", "qosIndex"))
if mibBuilder.loadTexts: qosEntry.setStatus('current')
if mibBuilder.loadTexts: qosEntry.setDescription('A particular qos of the equipment.')
qosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIndex.setStatus('current')
if mibBuilder.loadTexts: qosIndex.setDescription('A unique value which identify a particular\tQoS of the equipment.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware')
qosClassNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosClassNumber.setStatus('current')
if mibBuilder.loadTexts: qosClassNumber.setDescription('This field allows to choose the number of CoS defined for the QoS')
qosType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 3), QosType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosType.setStatus('current')
if mibBuilder.loadTexts: qosType.setDescription('This field allows to choose the type of Qos')
qosCongestionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 4), CongestionControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCongestionControl.setStatus('current')
if mibBuilder.loadTexts: qosCongestionControl.setDescription('This field allows to choose a mechanism to manage congestion problems. Some Type of Qos\n        force the value of this field. ')
qosSchedulingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 5), SchedulingSystem()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingSystem.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingSystem.setDescription('This field allows to choose a mechanism to manage congestion problems. ')
qosBwREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosBwREnable.setStatus('current')
if mibBuilder.loadTexts: qosBwREnable.setDescription('This field allows to activate or desactivate the Sdh throughput reservation feature. ')
qosHCInCCDiscardsGe = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosHCInCCDiscardsGe.setStatus('current')
if mibBuilder.loadTexts: qosHCInCCDiscardsGe.setDescription('The number of packets received on the GE interface which were discarded to prevent from switch saturation')
qosHCInCCDiscardsWan = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 31, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosHCInCCDiscardsWan.setStatus('current')
if mibBuilder.loadTexts: qosHCInCCDiscardsWan.setDescription('The number of packets received on the WAN interface which were discarded to prevent from switch saturation')
class CosId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("cos0", 0), ("cos1", 1), ("cos2", 2), ("cos3", 3), ("cos4", 4), ("cos5", 5), ("cos6", 6), ("cos7", 7))

cosNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosNumber.setStatus('current')
if mibBuilder.loadTexts: cosNumber.setDescription('Number of Class of Service set in equipment\n\t= number of entries in cosTable \n\t= qosNumber * qosClassNumber')
cosTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41), )
if mibBuilder.loadTexts: cosTable.setStatus('current')
if mibBuilder.loadTexts: cosTable.setDescription('List of CoS in equipment.')
cosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1), ).setIndexNames((0, "GIGE-MIB", "cosIndex"))
if mibBuilder.loadTexts: cosEntry.setStatus('current')
if mibBuilder.loadTexts: cosEntry.setDescription('A particular CoS of the equipment.')
cosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosIndex.setStatus('current')
if mibBuilder.loadTexts: cosIndex.setDescription('A unique value which identify a particular\tCoS of the equipment.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware. Its values are taken between 1 and cosNumber.')
cosQosId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosQosId.setStatus('current')
if mibBuilder.loadTexts: cosQosId.setDescription('This field allows to identify which QoS this Class is belonging. Its values must match to qosIndex.')
cosId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 3), CosId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosId.setStatus('current')
if mibBuilder.loadTexts: cosId.setDescription(' This field identify the class of Service.')
cosDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosDefinition.setStatus('current')
if mibBuilder.loadTexts: cosDefinition.setDescription('This optional textual field brings some precisions about the CoS configuration. ')
cosBwRRatioMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBwRRatioMin.setStatus('current')
if mibBuilder.loadTexts: cosBwRRatioMin.setDescription('When the qosBwREnable field is set to True, then this field allows to configure the guaranted percentage of SDH\n        throughput which must be booked up for the CoS')
cosBwRRatioMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cosBwRRatioMax.setStatus('current')
if mibBuilder.loadTexts: cosBwRRatioMax.setDescription('When the qosBwREnable field is set to True, then this field allows to configure the maximum percentage of SDH\n        throughput which can be booked up for the CoS')
cosHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInOctets.setStatus('current')
if mibBuilder.loadTexts: cosHCInOctets.setDescription('The total number of octets received on the GE interface (excluding framing characters preambule and sfd)\n         and belonging to a CosId packet')
cosHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: cosHCOutOctets.setDescription('The total number of octets transmitted out of the Wan interface (excluding framing characters preambule and sfd)\n         and belonging to a CosId paket')
cosHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInPkts.setStatus('current')
if mibBuilder.loadTexts: cosHCInPkts.setDescription('The total number of octets received on the GE interface (excluding framing characters preambule and sfd)\n         and belonging to a CosId packet')
cosHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: cosHCOutPkts.setDescription('The total number of octets transmitted out of the Wan interface (excluding framing characters preambule and sfd)\n         and belonging to a CosId paket')
cosHCInCCDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 41, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cosHCInCCDiscards.setStatus('current')
if mibBuilder.loadTexts: cosHCInCCDiscards.setDescription('The number of CosId packets received on the GE interface which were discarded by RED/WRED/BandWidthReservation\n         to prevent from congestion.')
class GfpFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("oofd", 1), ("lofd", 2), ("fdsc", 3))

class GfpState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

gfpNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpNumber.setStatus('current')
if mibBuilder.loadTexts: gfpNumber.setDescription('ports Number of the Gfp layer.\n\t= number of entries in gfpTable ')
gfpTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51), )
if mibBuilder.loadTexts: gfpTable.setStatus('current')
if mibBuilder.loadTexts: gfpTable.setDescription('List of gfp port in the equipment.')
gfpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1), ).setIndexNames((0, "GIGE-MIB", "gfpIndex"))
if mibBuilder.loadTexts: gfpEntry.setStatus('current')
if mibBuilder.loadTexts: gfpEntry.setDescription('A particular gfp port of the equipment.')
gfpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpIndex.setStatus('current')
if mibBuilder.loadTexts: gfpIndex.setDescription('A unique value which identify a particular\tgfp port in the equipment.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware. Its values are mapped to channelIndex values.')
gfpHCInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInPkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCInPkts.setDescription(' The total number of packets received on the Gfp interface')
gfpHCInIdlePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInIdlePkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCInIdlePkts.setDescription(' The total number of Idle frames received on the Gfp interface')
gfpHCInCorruptedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInCorruptedPkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCInCorruptedPkts.setDescription(' The total number of mismatched packets received on the Gfp interface.')
gfpHCInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInErrors.setStatus('current')
if mibBuilder.loadTexts: gfpHCInErrors.setDescription('The total number of mismatched packets that have been discarded. ')
gfpHCInCorrectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInCorrectedPkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCInCorrectedPkts.setDescription('The total number of mismatched packets received on the Gfp interface that have been corrected. ')
gfpHCFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCFCSErrors.setStatus('current')
if mibBuilder.loadTexts: gfpHCFCSErrors.setDescription('The number of frames received on the Gfp interface that are an integral number of octets\n         in length but do not pass the FCS check. ')
gfpHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCInOctets.setStatus('current')
if mibBuilder.loadTexts: gfpHCInOctets.setDescription(' The total number of Octets received on the Gfp interface')
gfpHCOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutPkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCOutPkts.setDescription(' The total number of packets transmitted out of the Gfp interface')
gfpHCOutIdlePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutIdlePkts.setStatus('current')
if mibBuilder.loadTexts: gfpHCOutIdlePkts.setDescription(' The total number of Idle frame transmitted out of the Gfp interface')
gfpHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: gfpHCOutOctets.setDescription(' The total number of packets transmitted out of the Gfp interface')
gfpIdleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpIdleRate.setStatus('current')
if mibBuilder.loadTexts: gfpIdleRate.setDescription(' The received Idle frames rate on a particular gfp port. ')
gfpSendingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpSendingRate.setStatus('current')
if mibBuilder.loadTexts: gfpSendingRate.setDescription(' The sent frames rate on a particular gfp port. ')
gfpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 14), GfpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpState.setStatus('current')
if mibBuilder.loadTexts: gfpState.setDescription('This field allows to know in which state this gfp port is working.')
gfpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: gfpAdminStatus.setDescription('The desired state of the gfp port.  The\n     testing(3) state indicates that no operational\n     packets can be passed.')
gfpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpOperStatus.setStatus('current')
if mibBuilder.loadTexts: gfpOperStatus.setDescription('The current operational state of the gfp port.\n     The testing(3) state indicates that no operational\n     packets can be passed.')
gfpMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 17), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpMonitor.setStatus('current')
if mibBuilder.loadTexts: gfpMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this gfp port.')
gfpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 18), GfpFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpFailure.setStatus('current')
if mibBuilder.loadTexts: gfpFailure.setDescription('Active failures on channel')
gfpSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 19), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gfpSeverity.setStatus('current')
if mibBuilder.loadTexts: gfpSeverity.setDescription('A reference to failure severity for gfp port.')
gfpOOFD = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpOOFD.setStatus('current')
if mibBuilder.loadTexts: gfpOOFD.setDescription('Severity associated with Out of Frame Delineation failure\n\tfor gfp port.')
gfpLOFD = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpLOFD.setStatus('current')
if mibBuilder.loadTexts: gfpLOFD.setDescription('Severity associated with Loss Of Frame Delineation failure\n\tfor gfp port.')
gfpFDSC = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 51, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gfpFDSC.setStatus('current')
if mibBuilder.loadTexts: gfpFDSC.setDescription('Severity associated with Frame Delineation State Change failure\n\tfor gfp port.')
class PauseFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("pauseModeRejected", 1))

pauseNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 17, 10, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseNumber.setStatus('current')
if mibBuilder.loadTexts: pauseNumber.setDescription('Number of ports in the equipment which accept Pause mechanism\n\t= number of entries in pauseTable ')
pauseTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61), )
if mibBuilder.loadTexts: pauseTable.setStatus('current')
if mibBuilder.loadTexts: pauseTable.setDescription('List of Ethernet port in the equipment which accept Pause mechanism.')
pauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1), ).setIndexNames((0, "GIGE-MIB", "pauseIndex"))
if mibBuilder.loadTexts: pauseEntry.setStatus('current')
if mibBuilder.loadTexts: pauseEntry.setDescription('A particular Ethernet port of the equipment.')
pauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseIndex.setStatus('current')
if mibBuilder.loadTexts: pauseIndex.setDescription('A unique value which identify a particular\tEthernet Physical port of a gigabitEthernet card.\n\tThe value of this index is a constant value assigned to an entry at\n\tequipment design time. It is usualy related to harware. Its values are mapped to IfIndex values of Lan Ports.')
pauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseTime.setStatus('current')
if mibBuilder.loadTexts: pauseTime.setDescription('This field allows to set the Time during which the linkPartner stop any transmission. The Unit used is the time slot\n        (= 512 ns).')
pauseBetweenTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseBetweenTime.setStatus('current')
if mibBuilder.loadTexts: pauseBetweenTime.setDescription('This field allows to set the Time between two Pause Frames transmission. The Unit used is the time slot\n        (= 512 ns).')
pauseMacSA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMacSA.setStatus('current')
if mibBuilder.loadTexts: pauseMacSA.setDescription(' The physical address of the Ethernet port.\n         This address is used to fill the SourceAddress field of any Pause Frame which is trasmitted by the LinkPartner.')
pauseMacDA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMacDA.setStatus('current')
if mibBuilder.loadTexts: pauseMacDA.setDescription(' The physical address used to fill the DestinationAddress field of any Pause Frame which is transmitted by the LinkPartner.')
pauseCHT = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseCHT.setStatus('current')
if mibBuilder.loadTexts: pauseCHT.setDescription('This field allows to configure the credit High Threshold of Pause mechanism.')
pauseCLT = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseCLT.setStatus('current')
if mibBuilder.loadTexts: pauseCLT.setDescription('This field allows to configure the credit Low Threshold of Pause mechanism.')
pauseMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 10), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseMonitor.setStatus('current')
if mibBuilder.loadTexts: pauseMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this Ethernet port.')
pauseFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 11), PauseFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseFailure.setStatus('current')
if mibBuilder.loadTexts: pauseFailure.setDescription('Active failures in the pause mechanism of the Ethernet port.')
pauseSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 12), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pauseSeverity.setStatus('current')
if mibBuilder.loadTexts: pauseSeverity.setDescription('A reference to severity associated to the current pause failure.')
pauseModeRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 17, 10, 61, 1, 13), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pauseModeRejected.setStatus('current')
if mibBuilder.loadTexts: pauseModeRejected.setDescription('This field allows to configure the Severity associated with Pause Mode Rejected failure\n\tfor Ethernet port.')
mibBuilder.exportSymbols("GIGE-MIB", gigeSdhBandwidth=gigeSdhBandwidth, cosQosId=cosQosId, maintenancePRBSReceived=maintenancePRBSReceived, gfpOperStatus=gfpOperStatus, cosHCOutPkts=cosHCOutPkts, qosIndex=qosIndex, cosDefinition=cosDefinition, maintenanceResetGfpCounters=maintenanceResetGfpCounters, gfpIdleRate=gfpIdleRate, cosIndex=cosIndex, cosBwRRatioMin=cosBwRRatioMin, cosBwRRatioMax=cosBwRRatioMax, gfpHCOutOctets=gfpHCOutOctets, maintenanceIndex=maintenanceIndex, gigeWarmStart=gigeWarmStart, gfpEntry=gfpEntry, LoopbackGE=LoopbackGE, cosHCInPkts=cosHCInPkts, qosCongestionControl=qosCongestionControl, gigeEntry=gigeEntry, pauseMacSA=pauseMacSA, maintenanceEntry=maintenanceEntry, maintenanceTable=maintenanceTable, cosId=cosId, GfpFailure=GfpFailure, pauseNumber=pauseNumber, gfpTable=gfpTable, gigeAutoTest=gigeAutoTest, PauseFailure=PauseFailure, gfpState=gfpState, gfpMonitor=gfpMonitor, qosHCInCCDiscardsGe=qosHCInCCDiscardsGe, gfpHCInCorrectedPkts=gfpHCInCorrectedPkts, BandwidthSize=BandwidthSize, maintenancePRBSSent=maintenancePRBSSent, gfpHCFCSErrors=gfpHCFCSErrors, gfpSeverity=gfpSeverity, gfpHCInOctets=gfpHCInOctets, gfpSendingRate=gfpSendingRate, gigeTable=gigeTable, cosTable=cosTable, gfpNumber=gfpNumber, SchedulingSystem=SchedulingSystem, maintenanceNumber=maintenanceNumber, pauseBetweenTime=pauseBetweenTime, qosClassNumber=qosClassNumber, qosBwREnable=qosBwREnable, qosSchedulingSystem=qosSchedulingSystem, gfpHCInIdlePkts=gfpHCInIdlePkts, pauseCHT=pauseCHT, pauseMonitor=pauseMonitor, cosEntry=cosEntry, maintenanceAutoTest=maintenanceAutoTest, maintenanceResetAllCounters=maintenanceResetAllCounters, pauseSeverity=pauseSeverity, gfpHCInPkts=gfpHCInPkts, PYSNMP_MODULE_ID=gige, cosNumber=cosNumber, gfpLOFD=gfpLOFD, qosType=qosType, gfpHCInErrors=gfpHCInErrors, gfpAdminStatus=gfpAdminStatus, pauseModeRejected=pauseModeRejected, gigeNumber=gigeNumber, gfpHCInCorruptedPkts=gfpHCInCorruptedPkts, qosEntry=qosEntry, gige=gige, pauseCLT=pauseCLT, pauseFailure=pauseFailure, maintenanceLoopback=maintenanceLoopback, gigeIndex=gigeIndex, qosNumber=qosNumber, cosHCInCCDiscards=cosHCInCCDiscards, gfpFailure=gfpFailure, gfpFDSC=gfpFDSC, CosId=CosId, qosHCInCCDiscardsWan=qosHCInCCDiscardsWan, GfpState=GfpState, QosType=QosType, cosHCInOctets=cosHCInOctets, CongestionControl=CongestionControl, gfpOOFD=gfpOOFD, cosHCOutOctets=cosHCOutOctets, pauseEntry=pauseEntry, maintenanceResetQosCounters=maintenanceResetQosCounters, maintenanceResetLanCounters=maintenanceResetLanCounters, gfpHCOutPkts=gfpHCOutPkts, pauseTable=pauseTable, pauseIndex=pauseIndex, gfpHCOutIdlePkts=gfpHCOutIdlePkts, gfpIndex=gfpIndex, pauseTime=pauseTime, qosTable=qosTable, pauseMacDA=pauseMacDA)
