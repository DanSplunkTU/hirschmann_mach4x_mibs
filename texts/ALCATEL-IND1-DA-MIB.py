#
# PySNMP MIB module ALCATEL-IND1-DA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-DA-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:48:02 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Da, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Da")
TmnxEncapVal, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxEncapVal")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressIPv4, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressIPv4", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, NotificationType, Counter32, IpAddress, ModuleIdentity, Unsigned32, ObjectIdentity, iso, Gauge32, Counter64, Bits, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "iso", "Gauge32", "Counter64", "Bits", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
MacAddress, TruthValue, RowStatus, TextualConvention, DisplayString, DateAndTime, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "RowStatus", "TextualConvention", "DisplayString", "DateAndTime", "TimeStamp")
alcatelIND1DaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1))
alcatelIND1DaMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1DaMIB.setRevisionsDescriptions(('DA module is taking care of the authentication and classification of MACs\n\t\t\ton a DA port. The pkts from the MAC would be allowed to enter the network\n\t\t\tonly if the authentication and/or classification is done by the DA task.',))
if mibBuilder.loadTexts: alcatelIND1DaMIB.setLastUpdated('201008160000Z')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DaMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alaIND1DaMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0))
if mibBuilder.loadTexts: alaIND1DaMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBNotifications.setDescription('Branch For DA Subsystem Notifications.')
alaIND1DaMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1))
if mibBuilder.loadTexts: alaIND1DaMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBObjects.setDescription('Branch For DA Subsystem Managed Objects.')
alaIND1DaMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2))
if mibBuilder.loadTexts: alaIND1DaMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBConformance.setDescription('Branch for DA Module MIB Subsystem Conformance Information.')
alaIND1DaMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1))
if mibBuilder.loadTexts: alaIND1DaMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBGroups.setDescription('Branch for DA Module MIB Subsystem Units of Conformance.')
class AlaDaClassificationPolicyType(TextualConvention, Integer32):
    description = 'This policy type is the classification policy used to classify\n                a device onto the system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312))
    namedValues = NamedValues(("authPassAltUnp", 1), ("authPassDefUnp", 2), ("authPassSrvUnp", 3), ("noAuthMacRuleUnp", 4), ("noAuthMacRangeRuleUnp", 5), ("noAuthIpRuleUnp", 6), ("authFailDefUnp", 7), ("authFailMacRuleUnp", 8), ("authFailMacRangeRuleUnp", 9), ("authFailIpRuleUnp", 10), ("authFailRuleDefUnp", 11), ("authFailMacRangeVlanTagRuleUnp", 12), ("tagAuthFailMacRuleUnp", 13), ("tagAuthFailMacVlanTagRuleUnp", 14), ("tagAuthFailMacRangeRuleUnp", 15), ("tagAuthFailMacRangeVlanTagRuleUnp", 16), ("tagAuthFailIpRuleUnp", 17), ("tagAuthFailIpVlanTagRuleUnp", 18), ("tagAuthFailVlanTagRuleUnp", 19), ("tagAuthPassAltUnp", 20), ("tagAuthPassDefUnp", 21), ("tagAuthPassSrvUnp", 22), ("tagMacRuleUnp", 23), ("tagMacVlanTagRuleUnp", 24), ("tagMacRangeRuleUnp", 25), ("tagMacRangeVlanTagRuleUnp", 26), ("tagIpRuleUnp", 27), ("tagIpVlanTagRuleUnp", 28), ("tagVlanTagRuleUnp", 29), ("tagRuleDefUnp", 30), ("authPassDefUnpBlk", 31), ("authFailDefUnpBlk", 32), ("authFailRuleDefUnpBlk", 33), ("tagAuthPassDefUnpBlk", 34), ("tagRuleDefUnpBlk", 35), ("authPassSrvUnpTagMismatchBlk", 36), ("authPassAltUnpTagMismatchBlk", 37), ("authPassDefUnpTagMismatchBlk", 38), ("authFailMacRuleUnpTagMismatchBlk", 39), ("authFailMacVlanRuleUnpTagMismatchBlk", 40), ("authFailMacRangeRuleUnpTagMismatchBlk", 41), ("authFailMacRangeVlanRuleUnpTagMismatchBlk", 42), ("authFailIpRuleUnpTagMismatchBlk", 43), ("authFailIpVlanRuleUnpTagMismatchBlk", 44), ("authFailVlanRuleUnpTagMismatchBlk", 45), ("defUnpBlk", 46), ("authPassSrvUnpBlk", 47), ("authPassAltUnpBlk", 48), ("authFailMacRuleUnpBlk", 49), ("authFailMacRangeRuleUnpBlk", 50), ("authFailIpRuleUnpBlk", 51), ("tagMacRuleUnpBlk", 52), ("tagMacVlanTagRuleUnpBlk", 53), ("tagMacRangeRuleUnpBlk", 54), ("tagMacRangeVlanTagRuleUnpBlk", 55), ("tagIpRuleUnpBlk", 56), ("tagIpVlanTagRuleUnpBlk", 57), ("tagVlanTagRuleUnpBlk", 58), ("authSrvDownUnpTagMismatchBlk", 59), ("noMatchingUnpBlk", 60), ("trustTag", 61), ("authSrvDownUnp", 62), ("defUnp", 63), ("lpsUnpBlk", 64), ("sysDefSpb", 65), ("defSpbProfile", 66), ("noSpbResource", 67), ("tagAuthPassPortMacIpRuleUnp", 68), ("tagAuthPassPortMacRuleUnp", 69), ("tagAuthPassPortIpRuleUnp", 70), ("tagAuthPassGroupMacIpRuleUnp", 71), ("tagAuthPassGroupMacRuleUnp", 72), ("tagAuthPassGroupIpRuleUnp", 73), ("tagAuthPassPortRuleUnp", 74), ("tagAuthPassGroupRuleUnp", 75), ("tagAuthPassMacVlanRuleUnp", 76), ("tagAuthPassMacRuleUnp", 77), ("tagAuthPassMacouiRuleUnp", 78), ("tagAuthPassMacrangeVlanRuleUnp", 79), ("tagAuthPassMacrangeRuleUnp", 80), ("tagAuthPassLldpRuleUnp", 81), ("tagAuthPassL2authRuleUnp", 82), ("tagAuthPassIpVlanRuleUnp", 83), ("tagAuthPassIpRuleUnp", 84), ("tagAuthPassVlanRuleUnp", 85), ("tagAuthPassDmGroupRuleUnp", 86), ("tagAuthFailPortMacIpRuleUnp", 87), ("tagAuthFailPortMacRuleUnp", 88), ("tagAuthFailPortIpRuleUnp", 89), ("tagAuthFailGroupMacIpRuleUnp", 90), ("tagAuthFailGroupMacRuleUnp", 91), ("tagAuthFailGroupIpRuleUnp", 92), ("tagAuthFailPortRuleUnp", 93), ("tagAuthFailGroupRuleUnp", 94), ("tagAuthFailMacouiRuleUnp", 95), ("tagAuthFailLldpRuleUnp", 96), ("tagAuthFailL2authRuleUnp", 97), ("tagAuthFailDmGroupRuleUnp", 98), ("tagPortMacIpRuleUnp", 99), ("tagPortMacRuleUnp", 100), ("tagPortIpRuleUnp", 101), ("tagGroupMacIpRuleUnp", 102), ("tagGroupMacRuleUnp", 103), ("tagGroupIpRuleUnp", 104), ("tagPortRuleUnp", 105), ("tagGroupRuleUnp", 106), ("tagMacouiRuleUnp", 107), ("tagLldpRuleUnp", 108), ("tagL2authRuleUnp", 109), ("tagDmGroupRuleUnp", 110), ("authPassPortMacIpRuleUnp", 111), ("authPassPortMacRuleUnp", 112), ("authPassPortIpRuleUnp", 113), ("authPassGroupMacIpRuleUnp", 114), ("authPassGroupMacRuleUnp", 115), ("authPassGroupIpRuleUnp", 116), ("authPassPortRuleUnp", 117), ("authPassGroupRuleUnp", 118), ("authPassMacRuleUnp", 119), ("authPassMacouiRuleUnp", 120), ("authPassMacrangeRuleUnp", 121), ("authPassLldpRuleUnp", 122), ("authPassL2authRuleUnp", 123), ("authPassIpRuleUnp", 124), ("authPassDmGroupRuleUnp", 125), ("authFailPortMacIpRuleUnp", 126), ("authFailPortMacRuleUnp", 127), ("authFailPortIpRuleUnp", 128), ("authFailGroupMacIpRuleUnp", 129), ("authFailGroupMacRuleUnp", 130), ("authFailGroupIpRuleUnp", 131), ("authFailPortRuleUnp", 132), ("authFailGroupRuleUnp", 133), ("authFailMacouiRuleUnp", 134), ("authFailLldpRuleUnp", 135), ("authFailL2authRuleUnp", 136), ("authFailDmGroupRuleUnp", 137), ("noAuthPortMacIpRuleUnp", 138), ("noAuthPortMacRuleUnp", 139), ("noAuthPortIpRuleUnp", 140), ("noAuthGroupMacIpRuleUnp", 141), ("noAuthGroupMacRuleUnp", 142), ("noAuthGroupIpRuleUnp", 143), ("noAuthPortRuleUnp", 144), ("noAuthGroupRuleUnp", 145), ("noAuthMacouiRuleUnp", 146), ("noAuthLldpRuleUnp", 147), ("noAuthL2authRuleUnp", 148), ("noAuthDmGroupRuleUnp", 149), ("authPassPortMacIpRuleUnpTagMismatchBlk", 150), ("authPassPortMacRuleUnpTagMismatchBlk", 151), ("authPassPortIpRuleUnpTagMismatchBlk", 152), ("authPassGroupMacIpRuleUnpTagMismatchBlk", 153), ("authPassGroupMacRuleUnpTagMismatchBlk", 154), ("authPassGroupIpRuleUnpTagMismatchBlk", 155), ("authPassPortRuleUnpTagMismatchBlk", 156), ("authPassGroupRuleUnpTagMismatchBlk", 157), ("authPassMacVlanRuleUnpTagMismatchBlk", 158), ("authPassMacRuleUnpTagMismatchBlk", 159), ("authPassMacouiRuleUnpTagMismatchBlk", 160), ("authPassMacrangeVlanRuleUnpTagMismatchBlk", 161), ("authPassMacrangeRuleUnpTagMismatchBlk", 162), ("authPassLldpRuleUnpTagMismatchBlk", 163), ("authPassL2authRuleUnpTagMismatchBlk", 164), ("authPassIpVlanRuleUnpTagMismatchBlk", 165), ("authPassIpRuleUnpTagMismatchBlk", 166), ("authPassVlanRuleUnpTagMismatchBlk", 167), ("authPassDmGroupRuleUnpTagMismatchBlk", 168), ("authFailPortMacIpRuleUnpTagMismatchBlk", 169), ("authFailPortMacRuleUnpTagMismatchBlk", 170), ("authFailPortIpRuleUnpTagMismatchBlk", 171), ("authFailGroupMacIpRuleUnpTagMismatchBlk", 172), ("authFailGroupMacRuleUnpTagMismatchBlk", 173), ("authFailGroupIpRuleUnpTagMismatchBlk", 174), ("authFailPortRuleUnpTagMismatchBlk", 175), ("authFailGroupRuleUnpTagMismatchBlk", 176), ("authFailMacouiRuleUnpTagMismatchBlk", 177), ("authFailLldpRuleUnpTagMismatchBlk", 178), ("authFailL2authRuleUnpTagMismatchBlk", 179), ("authFailDmGroupRuleUnpTagMismatchBlk", 180), ("portMacIpRuleUnpTagMismatchBlk", 181), ("portMacRuleUnpTagMismatchBlk", 182), ("portIpRuleUnpTagMismatchBlk", 183), ("groupMacIpRuleUnpTagMismatchBlk", 184), ("groupMacRuleUnpTagMismatchBlk", 185), ("groupIpRuleUnpTagMismatchBlk", 186), ("portRuleUnpTagMismatchBlk", 187), ("groupRuleUnpTagMismatchBlk", 188), ("macouiRuleUnpTagMismatchBlk", 189), ("lldpRuleUnpTagMismatchBlk", 190), ("l2authRuleUnpTagMismatchBlk", 191), ("dmGroupRuleUnpTagMismatchBlk", 192), ("tagAuthPassExtendedRuleUnp", 193), ("tagAuthFailExtendedRuleUnp", 194), ("tagExtendedRuleUnp", 195), ("authPassExtendedRuleUnp", 196), ("authFailExtendedRuleUnp", 197), ("noAuthExtendedRuleUnp", 198), ("authPassExtendedRuleUnpTagMismatchBlk", 199), ("authFailExtendedRuleUnpTagMismatchBlk", 200), ("extendedRuleUnpTagMismatchBlk", 201), ("lpsStatic", 202), ("lpsPseudoStatic", 203), ("lpsDupStatic", 204), ("authSrvDownEdgeProfileUnp", 205), ("byodPauseTimerFilter", 206), ("byodServerUnp", 207), ("noVxlanResource", 208), ("noVxlanResourceAuthSrvDownUnp", 209), ("defVxlanProfile", 210), ("sysDefVxlan", 211), ("cportalEdgeProfilePolicy", 212), ("tagAuthPassPortMacIpVlanRuleUnp", 213), ("tagAuthPassPortMacVlanRuleUnp", 214), ("tagAuthPassPortIpVlanRuleUnp", 215), ("tagAuthPassGroupMacIpVlanRuleUnp", 216), ("tagAuthPassGroupMacVlanRuleUnp", 217), ("tagAuthPassGroupIpVlanRuleUnp", 218), ("tagAuthPassPortVlanRuleUnp", 219), ("tagAuthPassGroupVlanRuleUnp", 220), ("tagAuthPassMacouiVlanRuleUnp", 221), ("tagAuthPassL2authVlanRuleUnp", 222), ("tagAuthPassDmGroupVlanRuleUnp", 223), ("tagAuthFailPortMacIpVlanRuleUnp", 224), ("tagAuthFailPortMacVlanRuleUnp", 225), ("tagAuthFailPortIpVlanRuleUnp", 226), ("tagAuthFailGroupMacIpVlanRuleUnp", 227), ("tagAuthFailGroupMacVlanRuleUnp", 228), ("tagAuthFailGroupIpVlanRuleUnp", 229), ("tagAuthFailPortVlanRuleUnp", 230), ("tagAuthFailGroupVlanRuleUnp", 231), ("tagAuthFailMacouiVlanRuleUnp", 232), ("tagAuthFailL2authVlanRuleUnp", 233), ("tagAuthFailDmGroupVlanRuleUnp", 234), ("tagPortMacIpVlanRuleUnp", 235), ("tagPortMacVlanRuleUnp", 236), ("tagPortIpVlanRuleUnp", 237), ("tagGroupMacIpVlanRuleUnp", 238), ("tagGroupMacVlanRuleUnp", 239), ("tagGroupIpVlanRuleUnp", 240), ("tagPortVlanRuleUnp", 241), ("tagGroupVlanRuleUnp", 242), ("tagMacouiVlanRuleUnp", 243), ("tagL2authVlanRuleUnp", 244), ("tagDmGroupVlanRuleUnp", 245), ("authPassPortMacIpVlanRuleUnp", 246), ("authPassPortMacVlanRuleUnp", 247), ("authPassPortIpVlanRuleUnp", 248), ("authPassGroupMacIpVlanRuleUnp", 249), ("authPassGroupMacVlanRuleUnp", 250), ("authPassGroupIpVlanRuleUnp", 251), ("authPassPortVlanRuleUnp", 252), ("authPassGroupVlanRuleUnp", 253), ("authPassMacouiVlanRuleUnp", 254), ("authPassL2authVlanRuleUnp", 255)) + NamedValues(("authPassDmGroupVlanRuleUnp", 256), ("authFailPortMacIpVlanRuleUnp", 257), ("authFailPortMacVlanRuleUnp", 258), ("authFailPortIpVlanRuleUnp", 259), ("authFailGroupMacIpVlanRuleUnp", 260), ("authFailGroupMacVlanRuleUnp", 261), ("authFailGroupIpVlanRuleUnp", 262), ("authFailPortVlanRuleUnp", 263), ("authFailGroupVlanRuleUnp", 264), ("authFailMacouiVlanRuleUnp", 265), ("authFailL2authVlanRuleUnp", 266), ("authFailDmGroupVlanRuleUnp", 267), ("noAuthPortMacIpVlanRuleUnp", 268), ("noAuthPortMacVlanRuleUnp", 269), ("noAuthPortIpVlanRuleUnp", 270), ("noAuthGroupMacIpVlanRuleUnp", 271), ("noAuthGroupMacVlanRuleUnp", 272), ("noAuthGroupIpVlanRuleUnp", 273), ("noAuthPortVlanRuleUnp", 274), ("noAuthGroupVlanRuleUnp", 275), ("noAuthMacouiVlanRuleUnp", 276), ("noAuthL2authVlanRuleUnp", 277), ("noAuthDmGroupVlanRuleUnp", 278), ("authPassPortMacIpVlanRuleUnpTagMismatchBlk", 279), ("authPassPortMacVlanRuleUnpTagMismatchBlk", 280), ("authPassPortIpVlanRuleUnpTagMismatchBlk", 281), ("authPassGroupMacIpVlanRuleUnpTagMismatchBlk", 282), ("authPassGroupMacVlanRuleUnpTagMismatchBlk", 283), ("authPassGroupIpVlanRuleUnpTagMismatchBlk", 284), ("authPassPortVlanRuleUnpTagMismatchBlk", 285), ("authPassGroupVlanRuleUnpTagMismatchBlk", 286), ("authPassMacouiVlanRuleUnpTagMismatchBlk", 287), ("authPassL2authVlanRuleUnpTagMismatchBlk", 288), ("authPassDmGroupVlanRuleUnpTagMismatchBlk", 289), ("authFailPortMacIpVlanRuleUnpTagMismatchBlk", 290), ("authFailPortMacVlanRuleUnpTagMismatchBlk", 291), ("authFailPortIpVlanRuleUnpTagMismatchBlk", 292), ("authFailGroupMacIpVlanRuleUnpTagMismatchBlk", 293), ("authFailGroupMacVlanRuleUnpTagMismatchBlk", 294), ("authFailGroupIpVlanRuleUnpTagMismatchBlk", 295), ("authFailPortVlanRuleUnpTagMismatchBlk", 296), ("authFailGroupVlanRuleUnpTagMismatchBlk", 297), ("authFailMacouiVlanRuleUnpTagMismatchBlk", 298), ("authFailL2authVlanRuleUnpTagMismatchBlk", 299), ("authFailDmGroupVlanRuleUnpTagMismatchBlk", 300), ("portMacIpVlanRuleUnpTagMismatchBlk", 301), ("portMacVlanRuleUnpTagMismatchBlk", 302), ("portIpVlanRuleUnpTagMismatchBlk", 303), ("groupMacIpVlanRuleUnpTagMismatchBlk", 304), ("groupMacVlanRuleUnpTagMismatchBlk", 305), ("groupIpVlanRuleUnpTagMismatchBlk", 306), ("portVlanRuleUnpTagMismatchBlk", 307), ("groupVlanRuleUnpTagMismatchBlk", 308), ("macouiVlanRuleUnpTagMismatchBlk", 309), ("l2authVlanRuleUnpTagMismatchBlk", 310), ("dmGroupVlanRuleUnpTagMismatchBlk", 311), ("cportalPauseTimerFilter", 312))

class AlaDaAuthenticationType(TextualConvention, Integer32):
    description = 'The type of authentication used'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAuthentication", 1), ("dot1XAuthentication", 2), ("macAuthentication", 3), ("captivePortal", 4))

class AlaDaAuthenticationResult(TextualConvention, Integer32):
    description = 'The result of the authentication.  If the AlaDaAuthenticationType of this\n                 device is noAuthentication then this object will return notApplicable.  If the\n                 authentication has not completed then this object will return inProgress.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("inProgress", 1), ("success", 2), ("fail", 3))

class AlaDaMacLearntState(TextualConvention, Integer32):
    description = 'The state of MAC address in the system'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("bridging", 0), ("filtering", 1))

class AlaMultiChassisConfigStatus(TextualConvention, Integer32):
    description = 'The status of Multi-Chassis consistency check. If no MCLAG involved\n                then status is local to the switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("sync", 2), ("outOfSync", 3))

class MacOui(TextualConvention, OctetString):
    description = 'Represents a MAC-OUI.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

alaDaUserNetProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1), )
if mibBuilder.loadTexts: alaDaUserNetProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileTable.setDescription('This table stores the UNP profiles created in the system.\n         The entries would be mapped to vlan ID which would be used\n         by device authentication for classifying users.')
alaDaUserNetProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileName"))
if mibBuilder.loadTexts: alaDaUserNetProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileEntry.setDescription('User Network Profile entry')
alaDaUserNetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUserNetProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileName.setDescription('The name of this profile.')
alaDaUserNetProfileVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileVlanID.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileVlanID.setDescription('The VLAN id for this profile.')
alaDaUserNetProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileRowStatus.setDescription('The status of this table entry.')
alaDaUserNetProfileQosPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileQosPolicyListName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileQosPolicyListName.setDescription('The name of the QoS Policy List name that will be used if this\n         User Network Profile is applied for a given device along with\n         alaDaUserNetProfileVlanID.')
alaDaUserNetProfileMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUserNetProfileMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n         Actual status will be set through remote chassis synchronization.')
alaDaUserNetProfileSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileSaaProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileSaaProfileName.setDescription('The name of the SAA profile that is associated to this profile.')
alaDaUserNetProfileMobileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileMobileTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMobileTag.setDescription('User Net Profile Mobile Tag .')
alaDaUserNetProfileMaxIngressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileMaxIngressBw.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMaxIngressBw.setDescription('Maximum Ingress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n        If value is set to -1, then the Ingress Bandwidth specified for the profile is unconfigured.')
alaDaUserNetProfileMaxEgressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileMaxEgressBw.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMaxEgressBw.setDescription('Maximum Egress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n        If value is set to -1, then the Egress Bandwidth specified for the profile is unconfigured.')
alaDaUserNetProfileMaxIngressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileMaxIngressDepth.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMaxIngressDepth.setDescription('Maximum Ingress Depth associated to Bandwidth.\n        If set to -1, then the Depth associated with the profile is unconfigured.')
alaDaUserNetProfileMaxEgressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUserNetProfileMaxEgressDepth.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileMaxEgressDepth.setDescription('Maximum Egress Depth associated to Bandwidth.\n        If set to -1, then the Depth associated with the profile is unconfigured.')
alaDaUNPIpNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2), )
if mibBuilder.loadTexts: alaDaUNPIpNetRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleTable.setDescription('A list of IP network address rules.  This is used to match\n                 the InetAddress of a packet to a User Network Profile entry.')
alaDaUNPIpNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleMask"))
if mibBuilder.loadTexts: alaDaUNPIpNetRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleEntry.setDescription('An IP network address rule entry.')
alaDaUNPIpNetRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddrType.setDescription('The IP network address type used for VLAN classification.  For now\n                   Only IPv4 is supported.')
alaDaUNPIpNetRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleAddr.setDescription('The IP network address used for VLAN classification.  Only IPv4 is\n                  supported.')
alaDaUNPIpNetRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMask.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMask.setDescription('The IP network mask applying to the IP network address.')
alaDaUNPIpNetRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPIpNetRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n                 Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPIpNetRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPIpNetRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 2, 1, 7), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n                 Actual status will be set through remote chassis synchronization.')
alaDaUNPMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3), )
if mibBuilder.loadTexts: alaDaUNPMacRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleTable.setDescription('A list of MAC address rules.  This is used to match\n                 the MAC Address of a packet to a User Network Profile entry ')
alaDaUNPMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPMacRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaUNPMacRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleAddr.setDescription('The MAC address used for VLAN classification.')
alaDaUNPMacRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPMacRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n                 Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPMacRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 3, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPMacRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n                     Actual status will be set through remote chassis synchronization.')
alaDaUNPMacRangeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4), )
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleTable.setDescription('A list of MAC range rules.  This is used to match\n                 the MAC Address Range of a packet to a User Network Profile entry.')
alaDaUNPMacRangeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleLoAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleEntry.setDescription('A MAC range rule entry.')
alaDaUNPMacRangeRuleLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleLoAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleLoAddr.setDescription('The lower bound of  MAC address range used for VLAN classification.')
alaDaUNPMacRangeRuleHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleHiAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleHiAddr.setDescription('The upper bound of MAC address range used for VLAN classification.')
alaDaUNPMacRangeRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPMacRangeRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n                     The range states the valid vlan range in the system.\n                     Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacRangeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPMacRangeRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 4, 1, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n                     Actual status will be set through remote chassis synchronization.')
alaDaUNPVlanTagRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5), )
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleTable.setDescription('A list of Vlan Tag based classification rules.  This is used to match\n                 the vlan tag in a packet to a User Network Profile entry ')
alaDaUNPVlanTagRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleVlan"))
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleEntry.setDescription('A Vlan Tag rule entry.')
alaDaUNPVlanTagRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleVlan.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleVlan.setDescription('The Vlan Tag used for VLAN classification. The range states the valid\n\t\t\t\tVlan range in the system.')
alaDaUNPVlanTagRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPVlanTagRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPVlanTagRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 5, 1, 4), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleMCLagConfigStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanTagRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n                     Actual status will be set through remote chassis synchronization.')
alaDaMacUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6), )
if mibBuilder.loadTexts: alaDaMacUserTable.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserTable.setDescription('A table of MAC address learned on an UNP port.')
alaDaMacUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaMacUserIntfNum"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacUserMACAddress"))
if mibBuilder.loadTexts: alaDaMacUserEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserEntry.setDescription('Non 802.1x supplicant information.')
alaDaMacUserIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaMacUserIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserIntfNum.setDescription('The ifIndex representing the slot and port where the non 802.1x supplicant is learned.')
alaDaMacUserMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaMacUserMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDaMacUserVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDaAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("authenticated", 3), ("failed", 4), ("failedTimeout", 5), ("failedNoServer", 6), ("failedNoResources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaAuthenticationStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaAuthenticationStatus.setDescription('Authentication status of the non 802.1x supplicant.')
alaDaMacUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserIpAddress.setDescription('The ip address from which the mac user is sending the packets')
alaDaMacUserUnpUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserUnpUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserUnpUsed.setDescription('The UNP used for classifying the mac user')
alaDaMacUserLoginTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserLoginTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserLoginTimeStamp.setDescription('The Login time stamp of the mac user')
alaDaMacUserAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("macAuthentication", 0), ("others", 1), ("onexAuthentication", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserAuthtype.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserAuthtype.setDescription('The authentication type of the mac user')
alaDaMacUserClassificationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 9), AlaDaClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserClassificationSource.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserClassificationSource.setDescription('Classification policy under which the non 802.1x supplicant is learned.')
alaDaMacUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 6, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacUserName.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserName.setDescription('The mac user name')
alaDaUNPPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7), )
if mibBuilder.loadTexts: alaDaUNPPortTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTable.setDescription('A table of system level information for each port\n        supported by the Port Access Entity.  An entry appears\n        in this table for each port of this system.')
alaDaUNPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortIfIndex"))
if mibBuilder.loadTexts: alaDaUNPPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortEntry.setDescription('Each of these entries represents a user port on which UNP is enabled \n         and their configuration.')
alaDaUNPPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: alaDaUNPPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortIfIndex.setDescription('The interface index of the UNP enabled port.')
alaDaUNPPortDefaultProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortDefaultProfileName.setDescription('The default UNP name.')
alaDaUNPPortPassAltProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPassAltProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortPassAltProfileName.setDescription('The Pass alternate UNP name.')
alaDaUNPPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRowStatus.setDescription('The status of this table entry.')
alaDaUNPPortMacAuthFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortMacAuthFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMacAuthFlag.setDescription('The flag to indicate if MAC AUTH is enabled on port.')
alaDaUNPPortClassificationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortClassificationFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortClassificationFlag.setDescription('The flag to indicate if Classification is enabled on port.')
alaDaUNPPortTrustTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTrustTagStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTrustTagStatus.setDescription('The flag to indicate whether the vlan tag in the incoming packet\n         could be used for classifying the user when mac authentication fails\n         and classification rules dont match.')
alaDaUNPPortMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n           Actual status will be set through remote chassis synchronization.')
alaDaUNPPortCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortCustomerDomainId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortCustomerDomainId.setDescription('The Customer Domain that this port belongs to.  Default is on domain 0.')
alaDaUNPPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridgePort", 1), ("spbAccessPort", 2), ("edge", 3), ("vxlanAccessPort", 4), ("accessPort", 5))).clone('bridgePort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortType.setDescription('The object defines the port as UNP enable bridge-port(1), spb-access-port(2), edge-port(3) and vxlan-access-port(4).')
alaDaUNPPortPassAltSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPassAltSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortPassAltSpbProfileName.setDescription('The Pass alternate Spb Profile name.  This is to be used on a successful authentication\n         and there is no SPB profile passed back from the Authentication Server.')
alaDaUNPPortDefaultSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortDefaultSpbProfileName.setDescription('The default Spb Profile name.')
alaDaUNPPortDefaultEdgeProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultEdgeProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortDefaultEdgeProfName.setDescription('The default Edge  Profile name.')
alaDaUNPPortMacPassEdgeProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortMacPassEdgeProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortMacPassEdgeProfName.setDescription('Mac Authenticattion Edge Profile Name .')
alaDaUNPPort8021XEdgeProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XEdgeProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XEdgeProfName.setDescription('802.1X Pass Alternate Edge Profile .')
alaDaUNPPort8021XAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XAuthStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XAuthStatus.setDescription(' flag to indicate 802.1X Authentication .')
alaDaUNPPort8021XTxPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XTxPeriodStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XTxPeriodStatus.setDescription(' flag to indicate if 802.1X Authentication\n          tx-period is configured or not.')
alaDaUNPPort8021XTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XTxPeriod.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XTxPeriod.setDescription('802.1X Tx periaod .')
alaDaUNPPort8021XSuppTimeoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XSuppTimeoutStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XSuppTimeoutStatus.setDescription(' flag to indicate if 802.1X Authentication\n          supp-timeout is configured or not.')
alaDaUNPPort8021XSuppTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XSuppTimeOut.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XSuppTimeOut.setDescription('802.1X Authenttication Supp Timeout .')
alaDaUNPPort8021XMaxReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XMaxReqStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XMaxReqStatus.setDescription(' flag to indicate if 802.1X Authentication\n          max-req is configured or not.')
alaDaUNPPort8021XMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XMaxReq.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XMaxReq.setDescription(' 802.1X Authenttication Max Req .')
alaDaUNPPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortGroupId.setDescription('Associated Group ID .')
alaDaUNPPortAaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortAaaProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortAaaProfile.setDescription('Associated Aaa Profile.')
alaDaUNPPortEdgeTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortEdgeTemplate.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortEdgeTemplate.setDescription('Associated Edge Template .')
alaDaUNPPortRedirectPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRedirectPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRedirectPortBounce.setDescription('The flag to indicate whether port-bounce is enabled or disabled on port.')
alaDaUNPPort8021XFailurePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("macAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XFailurePolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XFailurePolicy.setDescription(' Failure Policy type.')
alaDaUNPPort8021XBypassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XBypassStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XBypassStatus.setDescription(' Flag to indicate Bypass enable status on port.')
alaDaUNPPortMacAllowEap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noauth", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortMacAllowEap.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMacAllowEap.setDescription(' Flag to indicate Allow Eap on port.')
alaDaUNPPortAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("noVal", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortAdminControlledDirections.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortAdminControlledDirections.setDescription('The current value of the administrative controlled\n         directions parameter for the Port.')
alaDaUNPPortAdminControlledOperDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("noVal", 3))).clone('both')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortAdminControlledOperDirections.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortAdminControlledOperDirections.setDescription('The operational value of the administrative controlled\n         directions parameter for the Port.')
alaDaUNPPort8021XPassAltUserNetProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltUserNetProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltUserNetProfName.setDescription('802.1X Pass Alternate Vlan Profile .')
alaDaUNPPort8021XPassAltSpbProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 33), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltSpbProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltSpbProfName.setDescription('802.1X Pass Alternate SPB Profile .')
alaDaUNPPort8021XPassAltVxlanProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltVxlanProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltVxlanProfName.setDescription('802.1X Pass Alternate VXLAN Profile .')
alaDaUNPPortPassAltVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPassAltVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortPassAltVxlanProfileName.setDescription('The Pass alternate VXLAN Profile name.')
alaDaUNPPortDefaultVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDefaultVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortDefaultVxlanProfileName.setDescription('The default VXLAN Profile name.')
alaDaUNPPortAFDConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("autoFabric", 2))).clone('admin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortAFDConfig.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortAFDConfig.setDescription('Configuration is made by admin or auto-fabric on\n         this interface')
alaDaUNPPortMaxIngressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10485760), ))).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressBw.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressBw.setDescription('Current Ingress BW active on UNP Port in Kbps.\n          If value is -1, it means no Ingress Bandwidth exists on port.')
alaDaUNPPortMaxIngressBwSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unp", 2), ("qos", 3))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressBwSource.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressBwSource.setDescription('Application responsible for setting Ingress BW on port.')
alaDaUNPPortMaxEgressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 10485760), ))).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressBw.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressBw.setDescription('Current Egress BW active on UNP Port in Kbps.\n          If value is -1, it means no Egress Bandwidth exists on port.')
alaDaUNPPortMaxEgressBwSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("unp", 2), ("qos", 3))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressBwSource.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressBwSource.setDescription('Application responsible for setting Egress BW on port.')
alaDaUNPPortMaxIngressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressDepth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxIngressDepth.setDescription('Ingress Depth applied on the port.')
alaDaUNPPortMaxEgressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressDepth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortMaxEgressDepth.setDescription('Egress Depth applied on the port.')
alaDaUNPPortIngressSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 44), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortIngressSourceProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortIngressSourceProfile.setDescription('The name of the UNP Profile responsible for setting current Ingress\n        Bandwidth limitation on port. Applicable only if current bandwidth set is\n        due to UNP classification on port.')
alaDaUNPPortEgressSourceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 45), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortEgressSourceProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortEgressSourceProfile.setDescription('The name of the UNP Profile responsible for setting current Egress\n        Bandwidth limitation on port. Applicable only if current bandwidth set is\n        due to UNP classification on port')
alaDaUNPPortForceL3Learning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortForceL3Learning.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortForceL3Learning.setDescription('UNP force L3 learning status on the UNP Port.')
alaDaUNPPortForceL3LearningPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortForceL3LearningPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortForceL3LearningPortBounce.setDescription('Port-Bounce associated with UNP force L3 learning status on the UNP Port.')
alaDaUNPPort8021XPassAltProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 48), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPort8021XPassAltProfileName.setDescription('802.1X Pass Alternate Profile .')
alaDaUNPPortPortTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 49), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortPortTemplateName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortPortTemplateName.setDescription('Associated port Template .')
alaDaUNPPortDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDomainID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortDomainID.setDescription('The Domain that this port belongs to.  Default is on domain 0.')
alaDaUNPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortAdminState.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortAdminState.setDescription('The flag to indicate if admin state is enabled on port.')
alaDaUNPPortDynamicService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("spb", 2), ("vxlan", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortDynamicService.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortDynamicService.setDescription('Indicates the type of dynamic service for the port. \n\tDynamic Service type SPB/VXLAN are applicable for Access type UNP port.')
alaDaUNPPortPVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 7, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("community", 2), ("isolated", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPPortPVlanPortType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortPVlanPortType.setDescription('The Port type in PVLAN Domain.')
alaDaUNPGlobalConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8))
alaDaUNPDynamicVlanConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPDynamicVlanConfigFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicVlanConfigFlag.setDescription('Indicated whether dynamic vlan configuration is enabled or not.')
alaDaUNPAuthServerDownUnp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUnp.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUnp.setDescription('The UNP to be used for classification if the authentication server\n        is not reachable.')
alaDaUNPAuthServerDownTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeout.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeout.setDescription('The timeout, in seconds, after which all the users learned in the auth-server-down\n         UNP will be sent for re-authentication.')
alaDaUNPDynamicVlanMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 4), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPDynamicVlanMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicVlanMCLagConfigStatus.setDescription('Indicated whether dynamic vlan configuration is sync across both MCLAG chassis or not.\n         All rows will be created as local. Actual status will be set through remote chassis\n         synchronization.')
alaDaUNPAuthServerDownUNPMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUNPMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownUNPMCLagConfigStatus.setDescription('Indicated whether Auth server down UNP config is sync across both MCLAG\n         chassis or not. All rows will be created as local. Actual status will be\n         set through remote chassis synchronization.')
alaDaUNPAuthServerDownTimeoutMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeoutMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownTimeoutMCLagConfigStatus.setDescription('Indicated whether Auth server down timeout config is sync across both MCLAG\n         chassis or not. All rows will be created as local. Actual status will be set\n         through remote chassis synchronization.')
alaDaUNPDynamicProfileConfigFlag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigFlag.setDescription('Indicated whether dynamic profile configuration is enabled or not.')
alaDaUNPDynamicProfileConfigMCLagConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPDynamicProfileConfigMCLagConfigStatus.setDescription('Indicated whether dynamic profile creation is sync across both MCLAG\n        chassis or not.')
alaDaUNPReloadVsiTypeDB = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPReloadVsiTypeDB.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPReloadVsiTypeDB.setDescription('The object triggers the system to reload the VSI Type DB from flash.  \n         Once the operation is done it is reset to zero (0).')
alaDaUNPAuthSrvDownEdgeProfName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownEdgeProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownEdgeProfName.setDescription('The Edge Profile  to be used for classification if the authentication server\n        is not reachable.')
alaDaUNPAuthServerDowneEdgeProfTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDowneEdgeProfTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthServerDowneEdgeProfTimeout.setDescription('The timeout, in seconds, after which all the users learned in the auth-server-down\n        Edge Profile will be sent for re-authentication.')
alaDaUNPEdgeUserFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeUserFlush.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeUserFlush.setDescription('Global configuration to flush Edge User .')
alaDaUNP8021XEdgeUserFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNP8021XEdgeUserFlush.setStatus('current')
if mibBuilder.loadTexts: alaDaUNP8021XEdgeUserFlush.setDescription('Global configuration to flush Edge User based on auth 802.1X .')
alaDaUNPMacEdgeUserFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPMacEdgeUserFlush.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacEdgeUserFlush.setDescription('Global configuration to flush Edge User based on auth mac .')
alaDaUNPNoAuthEdgeUserFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPNoAuthEdgeUserFlush.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPNoAuthEdgeUserFlush.setDescription('For no authentication , Global configuration to flush Edge User .')
alaDaUNPRedirectPortBounce = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPRedirectPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectPortBounce.setDescription('Redirect port bounce status.')
alaDaUNPRedirectPauseTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPRedirectPauseTimer.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectPauseTimer.setDescription('The integer value used to identify the redirect pause timer. \n        A value of zero shall be used to not support pause timer.')
alaDaUNPRedirectProxyServerPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1024, 49151), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPRedirectProxyServerPort.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectProxyServerPort.setDescription('The integer representing logical port on HTTP Server, By Default proxy HTTP port is 8080.')
alaDaUNPRedirectServerIPType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 19), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPRedirectServerIPType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectServerIPType.setDescription('Address type of UNP Redirect Server.')
alaDaUNPRedirectServerIP = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 20), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPRedirectServerIP.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectServerIP.setDescription('UNP Redirect Server IP Address.')
alaDaUNPAuthSrvDownVxlanProfileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownVxlanProfileName.setDescription('The Vxlan Profile  to be used for classification if the authentication server\n         is not reachable.')
alaDaUNPAuthSrvDownVxlanProfileTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownVxlanProfileTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthSrvDownVxlanProfileTimeout.setDescription('The timeout, in seconds, after which all the users learned in the auth-server-down\n         VXLAN Profile will be sent for re-authentication.')
alaDaUNPForceL3Learning = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPForceL3Learning.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPForceL3Learning.setDescription('UNP force L3 learning status.')
alaDaUNPForceL3LearningPortBounce = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPForceL3LearningPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPForceL3LearningPortBounce.setDescription('Port-Bounce associated with UNP force L3 learning status.')
alaDaUNPAuthServerDownProfile1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile1.setDescription('The profile to be used for classification if the authentication server\n         is not reachable.')
alaDaUNPAuthServerDownProfile2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile2.setDescription('The profile to be used for classification if the authentication server\n          is not reachable.')
alaDaUNPAuthServerDownProfile3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 27), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthServerDownProfile3.setDescription('The profile to be used for classification if the authentication server\n         is not reachable.')
alaDaUNPVlanUserFlush = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 8, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVlanUserFlush.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanUserFlush.setDescription('Global configuration to flush Vlan User .')
alaDaMacVlanUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9), )
if mibBuilder.loadTexts: alaDaMacVlanUserTable.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserTable.setDescription('A table of non 802.1x supplicants learned on 802.1x authenticated ports.')
alaDaMacVlanUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIntfNum"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserMACAddress"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserVlanID"))
if mibBuilder.loadTexts: alaDaMacVlanUserEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserEntry.setDescription('Non 802.1x supplicant information.')
alaDaMacVlanUserIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaMacVlanUserIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIntfNum.setDescription('The ifIndex representing the slot and port where the non 802.1x supplicant is learned.')
alaDaMacVlanUserMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaMacVlanUserMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDaMacVlanUserVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: alaDaMacVlanUserVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDaMacVlanUserAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("authenticated", 3), ("failed", 4), ("failedTimeout", 5), ("failedNoServer", 6), ("failedNoResources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthStatus.setDescription('Authentication status of the non 802.1x supplicant.')
alaDaMacVlanUserIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddressType.setDescription('The type of the IP address of the user.  For now\n         only IPv4 is supported.')
alaDaMacVlanUserIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserIpAddress.setDescription('The ip address from which the mac user is sending the packets')
alaDaMacVlanUserUnpUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserUnpUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserUnpUsed.setDescription('The UNP used for classifying the mac user')
alaDaMacVlanUserLoginTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserLoginTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserLoginTimeStamp.setDescription('The Login time stamp of the mac user')
alaDaMacVlanUserAuthtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("macAuthentication", 0), ("others", 1), ("onexAuthentication", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthtype.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthtype.setDescription('The authentication type of the mac user')
alaDaMacVlanUserClassificationSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 10), AlaDaClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserClassificationSource.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserClassificationSource.setDescription('Classification policy under which the non 802.1x supplicant is learned.')
alaDaMacVlanUserMCLagLearningLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserMCLagLearningLoc.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserMCLagLearningLoc.setDescription('Source of Learning. Informs whether the Mac was learnt locally or through remote.')
alaDaMacVlanUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserName.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserName.setDescription('The UNP used for classifying the mac user')
alaDaMacVlanUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserRole.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserRole.setDescription('The UNP used for classifying the mac user role')
alaDaMacVlanUserRoleSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserRoleSource.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserRoleSource.setDescription('The mac user role source')
alaDaMacVlanUserAuthFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthFailReason.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthFailReason.setDescription('The mac vlan user auth fail reason.')
alaDaMacVlanUserAuthRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthRetryCount.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthRetryCount.setDescription('The mac vlan user auth retry count.')
alaDaMacVlanUserClassifProfRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserClassifProfRule.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserClassifProfRule.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserRoleRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserRoleRule.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserRoleRule.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserRestAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserRestAccessStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserRestAccessStatus.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserLocPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserLocPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserLocPolicyStatus.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserTimePolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserTimePolicyStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserTimePolicyStatus.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserCapPortalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserCapPortalStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserCapPortalStatus.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserQMRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserQMRStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserQMRStatus.setDescription('The mac vlan user auth server ip address.')
alaDaMacVlanUserAuthServerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 24), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerIpType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerIpType.setDescription('The type of the IP address of the user.  For now\n         only IPv4 is supported.')
alaDaMacVlanUserAuthServerIpUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 25), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerIpUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerIpUsed.setDescription('The authentication server ip address used to \n         authentication the user.')
alaDaMacVlanUserAuthServerUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerUsed.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserAuthServerUsed.setDescription('The authentication server name (configured in AAA) \n         used for the latest authentication session of the user.')
alaDaMacVlanUserServerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 27), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserServerMessage.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserServerMessage.setDescription('The RADIUS server message displayed to the user. In case of successful\n         authentication the information returned in the RADIUS Reply-Message\n         attribute is displayed to the user, otherwise the reason for failure \n         is displayed to the user.')
alaDaMacVlanUserRedirectionUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserRedirectionUrl.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserRedirectionUrl.setDescription('The mac vlan user redirection URL.')
alaDaMacVlanUserSIPCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalCall", 1), ("emergencyCall", 2), ("notInCall", 3))).clone('notInCall')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserSIPCallType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserSIPCallType.setDescription('SIP call type status of the non 802.1x supplicant.')
alaDaMacVlanUserSIPMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("audio", 2), ("video", 3), ("none", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserSIPMediaType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserSIPMediaType.setDescription('SIP media type status of the non 802.1x supplicant.')
alaDaMacVlanUserUnpFromAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 31), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserUnpFromAuthServer.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserUnpFromAuthServer.setDescription('The UNP profile returned from the Authentication\n         server. It also indicates if the profile is configured\n         in the system or not.')
alaDaMacVlanUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bridge", 1), ("spbAccess", 2), ("edge", 3), ("vxlanAccess", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserType.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserType.setDescription('Service type of UNP user.')
alaDaMacVlanUserServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserServiceID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserServiceID.setDescription('Service ID assigned to of UNP user.')
alaDaMacVlanUserServiceSapIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 34), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserServiceSapIDIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserServiceSapIDIfIndex.setDescription('Interface Index of the Service SAP-ID assigned to the UNP users.')
alaDaMacVlanUserServiceSapIDEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 35), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserServiceSapIDEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserServiceSapIDEncapVal.setDescription('Encapsulation Value of the Service SAP-ID assigned to of UNP user.')
alaDaMacVlanUserVxlanVnid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 36), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserVxlanVnid.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserVxlanVnid.setDescription('VNID assigned to the VXLAN UNP user.')
alaDaMacVlanUserSpbIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 37), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserSpbIsid.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserSpbIsid.setDescription('I-SID assigned to the SPB UNP user.')
alaDaMacVlanUserSpbBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserSpbBVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserSpbBVlan.setDescription('BVLAN ID assigned to the SPB UNP user.')
alaDaMacVlanUserKerberosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pass", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserKerberosStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserKerberosStatus.setDescription('The mac vlan user Kerberos authentication status.')
alaDaUNPNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10))
unpMcLagMacIgnored = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 1)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpSourceIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpNativeVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"))
if mibBuilder.loadTexts: unpMcLagMacIgnored.setStatus('current')
if mibBuilder.loadTexts: unpMcLagMacIgnored.setDescription('This trap is generated if a MAC/User is dropped due to vlan not existing or UNP is not enabled on the MCLAG')
unpMcLagConfigInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpCommandType"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpName"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr1"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr2"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"))
if mibBuilder.loadTexts: unpMcLagConfigInconsistency.setStatus('current')
if mibBuilder.loadTexts: unpMcLagConfigInconsistency.setDescription('This trap is generated when configuration becomes Out_of_Sync.')
alaDaKerberosReqTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 3)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaKerberosIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserMac"))
if mibBuilder.loadTexts: alaDaKerberosReqTimeoutTrap.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosReqTimeoutTrap.setDescription('This trap shall be raised when the KERBEROS server do not reply in time.')
alaDaKerberosInactivityTimerExpiryTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 4)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserName"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserMac"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserDomain"))
if mibBuilder.loadTexts: alaDaKerberosInactivityTimerExpiryTrap.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosInactivityTimerExpiryTrap.setDescription('The trap shall be raised when the KERBEROS lease timer get expired for the user')
alaDaKerberosRateLimitExceed = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 0, 5)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaKerberosRateLimitString"))
if mibBuilder.loadTexts: alaDaKerberosRateLimitExceed.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosRateLimitExceed.setDescription('This trap shall be raised when the kerberos packets exceed the Limit.')
alaDaUnpMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr.setDescription('The mac which failed to get configured on peer chassis.')
alaDaUnpSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpSourceIpAddr.setDescription('The ip-address of mac which failed to get configured on peer chassis.')
alaDaUnpNativeVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpNativeVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpNativeVlan.setDescription('The native vlan of MCLAG on which the mac ingressed.')
alaDaUnpVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpVlan.setDescription('The vlan on which mac was classified on local chassis')
alaDaUnpMCLAGId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMCLAGId.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMCLAGId.setDescription('The lag id for MCLAG')
alaDaUnpCommandType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unpConfigCmd", 1), ("macRuleConfigCmd", 2), ("macRangeRuleConfigCmd", 3), ("ipRuleConfigCmd", 4), ("vlanTagRuleConfigCmd", 5), ("authServerUnpConfigCmd", 6), ("authServerTimerConfigCmd", 7), ("dynamicVlanConfigCmd", 8), ("lagConfigCmd", 9), ("dynamicProfileConfigCmd", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpCommandType.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCommandType.setDescription('Indicates which configuration command is out-of-sync')
alaDaUnpName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpName.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpName.setDescription('Indicates which unp profile is out-of-sync. If there is no UNP Profile\n        associated then zero length string is sent')
alaDaUnpMacAddr1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr1.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr1.setDescription('The mac for mac rule or the lower limit of mac-range rule.')
alaDaUnpMacAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpMacAddr2.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpMacAddr2.setDescription('The upper limit of mac-range rule.')
alaDaUnpIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 10), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpIpAddr.setDescription('The ip-address in ip-rule')
alaDaUnpIpMask = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 11), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpIpMask.setDescription('The ip-address in ip-rule')
alaDaUnpVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaUnpVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpVlanTag.setDescription('The vlan vlan-tag rule. Zero value means it is not applicable')
alaDaKerberosRateLimitString = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 10, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDaKerberosRateLimitString.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosRateLimitString.setDescription('Failure string for Rate Limit Trap.')
alaDaUnpCustomerDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11), )
if mibBuilder.loadTexts: alaDaUnpCustomerDomainTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainTable.setDescription('This table creates and deletes the UNP group within a switch.')
alaDaUnpCustomerDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainId"))
if mibBuilder.loadTexts: alaDaUnpCustomerDomainEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainEntry.setDescription('UNP Group: entry')
alaDaUnpCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUnpCustomerDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainId.setDescription('The Customer Domain ID.  Domain ID zero (0) is the default and is always present in the switch.')
alaDaUnpCustomerDomainDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpCustomerDomainDesc.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainDesc.setDescription('A field to provide meaningful description of the Customer Domain for easy identification of the domain.')
alaDaUnpCustomerDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpCustomerDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainRowStatus.setDescription('The status of this table entry.')
alaDaSpbProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12), )
if mibBuilder.loadTexts: alaDaSpbProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileTable.setDescription('This table stores the Service Classification profiles created in the system.\n         The entries provides information to classify device in the Service domain.')
alaDaSpbProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaSpbProfileName"))
if mibBuilder.loadTexts: alaDaSpbProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileEntry.setDescription('Service Classification Profile entry')
alaDaSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileName.setDescription('The name of this profile.')
alaDaSpbProfileEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 2), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileEncapVal.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaSpbProfileQosPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileQosPolicyListName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileQosPolicyListName.setDescription('The name of the QoS Policy List name that will be used if this\n         User Network Profile is applied for a given device along with\n         alaDaSpbProfileVlanID.')
alaDaSpbProfileIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileIsid.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileIsid.setDescription('The object represnet the I-SID that is to be dynamically created when \n         alaDaSpbProfileServiceID does not exist in the system and must be \n         used along with alaDaSpbProfileBVlan.')
alaDaSpbProfileBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileBVlan.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileBVlan.setDescription('The Backbone VLAN ID (BVLAN) used for the I-SID specified in alaDaSpbProfileIsid.\n         This object must be specified along with alaDaSpbProfileIsid.')
alaDaSpbProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileRowStatus.setDescription('The row status of this table entry.')
alaDaSpbProfileMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileMulticastMode.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileMulticastMode.setDescription('To configure the multicast replication mode for each service:\n         Head-end(1) where a non-unicast packet entering the SAP port\n         is replicated once for each receiver in the b-domain using its\n         unicast BMAC.\n         Tandem(2) where a non-unicast packet entering the SAP port is\n         replicated once at each node using the multicast group address.')
alaDaSpbProfileSapVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileSapVlanXlation.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileSapVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n         in this service if the corresponding access ports for the SAPs also\n         has the vlan translation enabled.')
alaDaSpbProfileMobileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSpbProfileMobileTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileMobileTag.setDescription('SPB Profile Mobile Tag .')
alaDaSpbProfileAFDConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("autoFabric", 2))).clone('admin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaSpbProfileAFDConfig.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileAFDConfig.setDescription('Configuration is made by admin or auto-fabric on\n         this profile')
alaDaUNPCustDomainEvbGpIdRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13), )
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleTable.setDescription('A list of EVB group ID based classification rules.  This is used to match\n                 the EVB Group ID passed from EVB to a User Network Profile entry ')
alaDaUNPCustDomainEvbGpIdRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleGroupId"))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleEntry.setDescription('A EVB Group ID rule entry.')
alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId.setDescription('The UNP Customer Domain ID that will be used for profile lookup.')
alaDaUNPCustDomainEvbGpIdRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroupId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroupId.setDescription('The EVB Group ID used for profile lookup.')
alaDaUNPCustDomainEvbGpIdRuleVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVlanProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVlanProfileName.setDescription('The VLAN profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPCustDomainEvbGpIdRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleSpbProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPCustDomainEvbGpIdRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 13, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName.setDescription('The VXLAN profile name in the User Network Profile Table to be\n                  applied.')
alaDaUNPCustDomainVlanTagRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14), )
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTable.setDescription("A list of Customer Domain and Vlan Tag based classification rules.  This is used to match\n        the vlan tag in a packet and the port's UNP Customer Domain to a User Network Profile entry ")
alaDaUNPCustDomainVlanTagRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleVlan"))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleEntry.setDescription('A Vlan Tag rule entry.')
alaDaUNPCustDomainVlanTagRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainVlanTagRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlan.setDescription('The VLAN Tag used for VLAN classification. The range states the valid\n\tVLAN range in the system. The VLAN Tag is of the Q-in-Q VLAN Tag \n        format, where the value of the outer 802.1Q VLAN ID is encoded in the \n        least significant 16 bits, and the value of the inner VLAN ID is \n        encoded in the most significant 16 bits.')
alaDaUNPCustDomainVlanTagRuleVlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVlanProfileName.setDescription('The VLAN profile name in the User Network Profile Table to be applied.')
alaDaUNPCustDomainVlanTagRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 5), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n        Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainVlanTagRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleSpbProfileName.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainVlanTagRuleTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("outerTag", 1), ("innerTag", 2))).clone('outerTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTagPosition.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleTagPosition.setDescription('This object specify the tag position to apply this Vlan Tag rule for \n         double tagged frames.')
alaDaUNPCustDomainVlanTagRuleVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleVxlanProfileName.setDescription('The VXLAN profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainVlanTagRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainVlanTagRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainVlanTagRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 14, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainIpNetRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15), )
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleTable.setDescription('A list of IP network address rules.  This is used to match\n         the InetAddress of a packet to a User Network Profile entry.')
alaDaUNPCustDomainIpNetRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleMask"))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEntry.setDescription('An IP network address rule entry.')
alaDaUNPCustDomainIpNetRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainIpNetRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddrType.setDescription('The IP network address type used for VLAN classification.  For now\n         Only IPv4 is supported.')
alaDaUNPCustDomainIpNetRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleAddr.setDescription('The IP network address used for VLAN classification.  Only IPv4 is\n         supported.')
alaDaUNPCustDomainIpNetRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMask.setDescription('The IP network mask applying to the IP network address.')
alaDaUNPCustDomainIpNetRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated.\n         The VLAN Tag is of the Q-in-Q VLAN Tag format, where the value of the\n         outer 802.1Q VLAN ID is encoded in the least significant 16 bits,\n         and the value of the inner VLAN ID is encoded in the most significant\n         16 bits.')
alaDaUNPCustDomainIpNetRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainIpNetRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 8), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n         Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainIpNetRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleSpbProfileName.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleEdgeProfile.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleVxlanProfileName.setDescription('The VXLAN profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainIpNetRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 15, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16), )
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleTable.setDescription('A list of MAC address rules.  This is used to match\n         the MAC Address of a packet to a User Network Profile entry ')
alaDaUNPCustDomainMacRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleAddr"))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPCustDomainMacRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainMacRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleAddr.setDescription('The MAC address used for VLAN classification.')
alaDaUNPCustDomainMacRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of\n         the Q-in-Q VLAN Tag format, where the value of the outer 802.1Q  \n         VLAN ID is encoded in the least significant 16 bits, and the value of\n         inner VLAN ID is encoded  in the most significant 16 bits.')
alaDaUNPCustDomainMacRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainMacRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 6), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n         Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainMacRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRuleEdgeProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEdgeProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleEdgeProfileName.setDescription('The SBP profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRuleVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleVxlanProfileName.setDescription('The VXLAN profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile1.setDescription('The profile name to be applied.')
alaDaUNPCustDomainMacRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile2.setDescription('The profile name to be applied.')
alaDaUNPCustDomainMacRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 16, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleProfile3.setDescription('The profile name to be applied.')
alaDaUNPCustDomainMacRangeRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17), )
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleTable.setDescription('A list of MAC range rules.  This is used to match\n         the MAC Address Range of a packet to a User Network Profile entry.')
alaDaUNPCustDomainMacRangeRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleDomainId"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleLoAddr"))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEntry.setDescription('A MAC range rule entry.')
alaDaUNPCustDomainMacRangeRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleDomainId.setDescription('The UNP Customer Domain ID for profile lookup.')
alaDaUNPCustDomainMacRangeRuleLoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleLoAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleLoAddr.setDescription('The lower bound of  MAC address range used for VLAN classification.')
alaDaUNPCustDomainMacRangeRuleHiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleHiAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleHiAddr.setDescription('The upper bound of MAC address range used for VLAN classification.')
alaDaUNPCustDomainMacRangeRuleProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfileName.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRangeRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         The range states the valid VLAN range in the system.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPCustDomainMacRangeRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleRowStatus.setDescription('Row Status for creating/deleting rules.')
alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 7), AlaMultiChassisConfigStatus().clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus.setDescription('Result of MCLAG Consistency Check. All rows will be created as local.\n         Actual status will be set through remote chassis synchronization.')
alaDaUNPCustDomainMacRangeRuleSpbProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleSpbProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleSpbProfileName.setDescription('The SBP profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRangeRuleEdgeProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEdgeProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleEdgeProfileName.setDescription('The Edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRangeRuleVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleVxlanProfileName.setDescription('The VXLAN profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPCustDomainMacRangeRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile1.setDescription('The profile name to be appiled.')
alaDaUNPCustDomainMacRangeRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile2.setDescription('The profile name to be appiled.')
alaDaUNPCustDomainMacRangeRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 17, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeRuleProfile3.setDescription('The profile name to be appiled.')
alaDaSaaProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18), )
if mibBuilder.loadTexts: alaDaSaaProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileTable.setDescription('This table stores the SAA Performance Monitoring profiles \n             that holds the Latency and Jitter Threshold of a network connection.')
alaDaSaaProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaSaaProfileName"))
if mibBuilder.loadTexts: alaDaSaaProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileEntry.setDescription('Service Classification Profile entry')
alaDaSaaProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaSaaProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileName.setDescription('The name of this profile.')
alaDaSaaProfileLatencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileLatencyThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileLatencyThreshold.setDescription('The object holds the Latency Threshold. A value of zero (0) means no threshold')
alaDaSaaProfileJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileJitterThreshold.setDescription('The object holds the Jitter Threshold. A value of zero (0) means no threshold')
alaDaSaaProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaSaaProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileRowStatus.setDescription('The row status of this table entry.')
alaDaCPortalMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19))
alaDaCPortalGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1))
alaDaCPortalRedirectUrlName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('captive-portal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalRedirectUrlName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalRedirectUrlName.setDescription('Name of the rediret URL that is used for \n\t\t\taccessing a public certificate.')
alaDaCPortalIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))).clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalIpAddressType.setDescription('Address type of address associated with captive portal.')
alaDaCPortalIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalIpAddress.setDescription('The factory default Captive Portal IP address is 10.123.0.1.\n             If the 10.123.0.0 subnet is already in use, user can change\n             the Captive Portal IP address to another 10.x.0.0 subnet.\n            Only the second octet of the Captive Portal IP address can\n            be changed.')
alaDaCPortalMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalMode.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalMode.setDescription('Captive Portal Mode')
alaDaCPortalSuccRedirectUrl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalSuccRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalSuccRedirectUrl.setDescription("Captive Portal's Redirect Url upon successful authentication.")
alaDaCPortalProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1024, 49151), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalProxyPort.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProxyPort.setDescription("Captive Portal's user defined proxy port number.")
alaDaCPortalRetryCnt = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalRetryCnt.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalRetryCnt.setDescription('Number of retries for the Captive Portal user to provide the user\n             credential before the software will classify the user to the failed\n             policy according the the alaCaptivePortalPolicy.')
alaDaCPortalPolicyListName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalPolicyListName.setDescription('Captive Portal Global Policy List Name')
alaDaCPortalCustomization = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalCustomization.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalCustomization.setDescription('Captive Portal Customization')
alaDaCPortalUNPProfile = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalUNPProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalUNPProfile.setDescription('Captive Portal Global UNP Profile Name')
alaDaCPortalUNPProfileChange = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaCPortalUNPProfileChange.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalUNPProfileChange.setDescription('Captive Portal Global UNP Profile Status')
alaDaCPortalAuthPassTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2), )
if mibBuilder.loadTexts: alaDaCPortalAuthPassTable.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthPassTable.setDescription('Current Rate Limit Table On 8021x Port')
alaDaCPortalAuthPassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthDomainName"))
if mibBuilder.loadTexts: alaDaCPortalAuthPassEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthPassEntry.setDescription('Captive Portal Auth Pass Enty')
alaDaCPortalAuthDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaCPortalAuthDomainName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthDomainName.setDescription('Captive Portal Authenticated Pass Domain Name.')
alaDaCPortalAuthRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prefix", 1), ("suffix", 2))).clone('prefix')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalAuthRealm.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthRealm.setDescription('Captive Portal Authenticated Pass Realm')
alaDaCPortalAuthPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalAuthPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthPolicyListName.setDescription('Captive Portal Authenticated Policy List Name.')
alaDaCPortalAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthRowStatus.setDescription('This object allows entries to be created and deleted in the table')
alaDaCPortalAuthUNPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalAuthUNPProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthUNPProfile.setDescription('Captive Portal Authenticated UNP Profile Name.')
alaDaCPortalAuthUNPProfileChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalAuthUNPProfileChange.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalAuthUNPProfileChange.setDescription('Captive Portal Global UNP Profile Status')
alaDaCPortalProfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3), )
if mibBuilder.loadTexts: alaDaCPortalProfTable.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfTable.setDescription('Table contain Captive Portal profiles ')
alaDaCPortalProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaCPortalProfName"))
if mibBuilder.loadTexts: alaDaCPortalProfEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfEntry.setDescription('Each entry defines Captive portal  profile ')
alaDaCPortalProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaCPortalProfName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfName.setDescription('Captive Portal Profile  name .')
alaDaCPortalProfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfMode.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfMode.setDescription('Captive Portal Profile Mode')
alaDaCPortalProfSuccRedirectUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfSuccRedirectUrl.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfSuccRedirectUrl.setDescription("Captive Portal's Redirect Url upon successful authentication.")
alaDaCPortalProfRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfRetryCnt.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfRetryCnt.setDescription('Number of retries for the Captive Portal Profile  to provide the user\n             credential before the software will classify the user to the failed\n             policy according the the alaCaptivePortalPolicy.')
alaDaCPortalProfAuthPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfAuthPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfAuthPolicyListName.setDescription('Captive Portal Profile Authenticated Pass Policy List Name')
alaDaCPortalProfAaaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfAaaProf.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfAaaProf.setDescription('Captive Portal Profile associated with AAA profile')
alaDaCPortalProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfRowStatus.setDescription('Row Status for initiating a MIB retrieval request.')
alaDaCPortalProfUNPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfUNPProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfUNPProfile.setDescription('UNP Profile associated with Captive Portal Profile')
alaDaCPortalProfUNPProfileChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfUNPProfileChange.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfUNPProfileChange.setDescription('UNP Profile Status associated with Captive Portal Profile')
alaDaCPortalProfDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4), )
if mibBuilder.loadTexts: alaDaCPortalProfDomainTable.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainTable.setDescription('Table contain Captive Portal profiles domain specific policy list.')
alaDaCPortalProfDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaCPortalProfName"), (0, "ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainAuthDomainName"))
if mibBuilder.loadTexts: alaDaCPortalProfDomainEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainEntry.setDescription('Each entry defines Captive portal  profiles domain specific policy paramaters.')
alaDaCPortalProfDomainAuthDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthDomainName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthDomainName.setDescription('Captive Portal Profile Authenticated Domain Name')
alaDaCPortalProfDomainAuthPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthPolicyListName.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthPolicyListName.setDescription('Captive Portal Profile Authenticated Pass Policy List Name')
alaDaCPortalProfDomainAuthRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prefix", 1), ("suffix", 2))).clone('prefix')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthRealm.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainAuthRealm.setDescription('Captive Portal Profile Authenticated Pass Realm')
alaDaCPortalProfDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainRowStatus.setDescription('This object allows entries to be created and deleted in the table')
alaDaCPortalProfDomainUNPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfDomainUNPProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainUNPProfile.setDescription('Captive Portal Profile Authenticated UNP Profile.')
alaDaCPortalProfDomainUNPProfileChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 19, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaCPortalProfDomainUNPProfileChange.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalProfDomainUNPProfileChange.setDescription('Captive Portal Profile Authenticated UNP Profile Status.')
alaDaHICMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20))
alaDaHICGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1))
alaDaHICStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaHICStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICStatus.setDescription('HIC Status. The HIC server has to be configured before HIC\n        can be enabled.')
alaDaHICWebAgentDownloadUrl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaHICWebAgentDownloadUrl.setStatus('current')
if mibBuilder.loadTexts: alaDaHICWebAgentDownloadUrl.setDescription('The URL for web agent download.')
alaDaHICCustomHttpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(8080)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaHICCustomHttpProxyPort.setStatus('current')
if mibBuilder.loadTexts: alaDaHICCustomHttpProxyPort.setDescription("The custom HTTP port for QoS to intercept the host's initial HTTP request.")
alaDaHICBgPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ValueRangeConstraint(48, 48), ValueRangeConstraint(64, 64), ValueRangeConstraint(80, 80), ValueRangeConstraint(96, 96), ValueRangeConstraint(112, 112), ValueRangeConstraint(128, 128), ValueRangeConstraint(144, 144), ValueRangeConstraint(160, 160), ValueRangeConstraint(176, 176), ValueRangeConstraint(192, 192), ValueRangeConstraint(208, 208), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), ValueRangeConstraint(256, 256), )).clone(16)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaHICBgPollInterval.setStatus('current')
if mibBuilder.loadTexts: alaDaHICBgPollInterval.setDescription('Background-poll-interval provides time frequency in seconds for background polling packets.')
alaDaHICSvrFailMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hold", 1), ("passthrough", 2))).clone('hold')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaHICSvrFailMode.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailMode.setDescription('The server-failure-mode specifies the policy to be followed \n         in case both the servers are not reachable, \n         value can be either passthrough or hold')
alaDaHICSvrTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2), )
if mibBuilder.loadTexts: alaDaHICSvrTable.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrTable.setDescription('This table shows current configuration for each HIC server.')
alaDaHICSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaHICSvrName"))
if mibBuilder.loadTexts: alaDaHICSvrEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrEntry.setDescription('A HIC server configuration.')
alaDaHICSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaDaHICSvrName.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrName.setDescription('Name of the server.\n        This name is given by the operator to refer the server.')
alaDaHICSvrIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrIpAddrType.setDescription('IP address of the server host.')
alaDaHICSvrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrIpAddr.setDescription('IP address of the server host.')
alaDaHICSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535)).clone(11707)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrPort.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrPort.setDescription('For HIC server only. Port number for HIC request')
alaDaHICSvrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrKey.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrKey.setDescription('The shared secret is a string of characters known to the switch\n        and to the HIC server. It is used to compute the digest to\n        preserve the integrity between the HIC server and the AoS Switch.\n        The secret is stored encrypted using a two way algorithm.')
alaDaHICSvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaHICSvrStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrStatus.setDescription('HIC server status.')
alaDaHICSvrRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2))).clone('primary')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaHICSvrRole.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrRole.setDescription('Role of the server either primary or backup')
alaDaHICSvrConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaHICSvrConnection.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrConnection.setDescription('The server connection specifies the current mode of the server either active or inactive.')
alaDaHICSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrRowStatus.setDescription('The status of this table entry.')
alaDaHICAllowedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3), )
if mibBuilder.loadTexts: alaDaHICAllowedTable.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedTable.setDescription('This table contains the list of allowed/exception IP Addresses the\n        the HIC hosts allowed to access during HIC. Those are the IP addresses\n        of the Remediation/Patch servers, and the Web Agent Download server.')
alaDaHICAllowedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaHICAllowedName"))
if mibBuilder.loadTexts: alaDaHICAllowedEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedEntry.setDescription('A Remediation server configuration.')
alaDaHICAllowedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaDaHICAllowedName.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedName.setDescription('Name of the server.\n        This name is given by the operator to refer the server.')
alaDaHICAllowedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICAllowedIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedIpAddrType.setDescription('IP address of the allowed entry.')
alaDaHICAllowedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICAllowedIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedIpAddr.setDescription('IP address of the allowed entry.')
alaDaHICAllowedIpMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICAllowedIpMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedIpMaskType.setDescription('IP mask type of the allowed entry.')
alaDaHICAllowedIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICAllowedIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedIpMask.setDescription('IP Mask of the allowed entry.')
alaDaHICAllowedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICAllowedRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICAllowedRowStatus.setDescription('The status of this table entry.')
alaDaHICSvrFailPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 4), )
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyTable.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyTable.setDescription('This table shows current configuration for HIC server Fail Policy list mapping.')
alaDaHICSvrFailPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaHICSvrFailPolicyName"))
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyEntry.setDescription('A HIC server Fail UNP configuration.')
alaDaHICSvrFailPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyName.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailPolicyName.setDescription('The profile name which needs to be modified when the HIC server is down.')
alaDaHICSvrFailChangedPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrFailChangedPolicyName.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailChangedPolicyName.setDescription('The profile name to which the host needs to be moved when the HIC server is down.')
alaDaHICSvrFailRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaHICSvrFailRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICSvrFailRowStatus.setDescription('Row Status for creating/deleting policy list  name .')
alaDaHICHostTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 5), )
if mibBuilder.loadTexts: alaDaHICHostTable.setStatus('current')
if mibBuilder.loadTexts: alaDaHICHostTable.setDescription('This table shows list of HIC Hosts and their active HIC status.')
alaDaHICHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaHICHostMac"))
if mibBuilder.loadTexts: alaDaHICHostEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaHICHostEntry.setDescription('HIC Host status information.')
alaDaHICHostMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaHICHostMac.setStatus('current')
if mibBuilder.loadTexts: alaDaHICHostMac.setDescription('Static MAC address index to each override entry.')
alaDaHICHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("fail", 3), ("timeout", 4))).clone('fail')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaHICHostStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaHICHostStatus.setDescription('HIC status of each HIC Host.')
alaDaUNPETmplTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21), )
if mibBuilder.loadTexts: alaDaUNPETmplTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplTable.setDescription('Unp Edge Template Table .')
alaDaUNPETmplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPETmplName"))
if mibBuilder.loadTexts: alaDaUNPETmplEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplEntry.setDescription('EdgeTemplate Entries.')
alaDaUNPETmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPETmplName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplName.setDescription('UNP Edge Template name.')
alaDaUNPETmpl8021XAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XAuthStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XAuthStatus.setDescription('Edge Template  802.1X Authenttication Status .')
alaDaUNPETmpl8021XTxPeriodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XTxPeriodStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XTxPeriodStatus.setDescription('Edge Template  802.1X Authentication \n         tx-period configured or not.')
alaDaUNPETmpl8021XTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XTxPeriod.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XTxPeriod.setDescription('Edge Template 802.1X Tx period .')
alaDaUNPETmpl8021XSuppTimeoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XSuppTimeoutStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XSuppTimeoutStatus.setDescription('Edge Template  802.1X Authentication \n         supp-timeout configured or not.')
alaDaUNPETmpl8021XSuppTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XSuppTimeOut.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XSuppTimeOut.setDescription('Edge Template 802.1X Authenttication Supp Timeout .')
alaDaUNPETmpl8021XMaxReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XMaxReqStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XMaxReqStatus.setDescription('Edge Template  802.1X Authentication \n         supp-timeout configured or not.')
alaDaUNPETmpl8021XMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XMaxReq.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XMaxReq.setDescription(' Edge Template 802.1X Authenttication Max Req .')
alaDaUNPETmpl8021XPassAltEProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmpl8021XPassAltEProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmpl8021XPassAltEProf.setDescription(' 802.1X Auth Pass Alternate Edge Profile name.')
alaDaUNPETmplMacAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplMacAuthStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplMacAuthStatus.setDescription('Edge Template  Mac Authenttication Status .')
alaDaUNPETmplMacPassAltEProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplMacPassAltEProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplMacPassAltEProf.setDescription(' Mac Auth Pass Alternate Edge Profile name.')
alaDaUNPETmplClassifStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplClassifStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplClassifStatus.setDescription('Edge Template Classification Status .')
alaDaUNPETmplDefEProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplDefEProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplDefEProf.setDescription(' Edge Template default Profile .')
alaDaUNPETmplGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplGroupId.setDescription('Associated Group ID .')
alaDaUNPETmplAaaProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplAaaProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplAaaProf.setDescription('Associated Aaa Profile.')
alaDaUNPETmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplRowStatus.setDescription('The status of this table entry.')
alaDaUNPETmplRedirectPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplRedirectPortBounce.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplRedirectPortBounce.setDescription('Edge Template Classification Status .')
alaDaUNPETmplFailurePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("macAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplFailurePolicy.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplFailurePolicy.setDescription(' Failure Policy type.')
alaDaUNPETmplBypassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplBypassStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplBypassStatus.setDescription(' Flag to indicate Bypass enable status on port.')
alaDaUNPETmplMacAllowEap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noauth", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplMacAllowEap.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplMacAllowEap.setDescription(' Flag to indicate Allow Eap on port.')
alaDaUNPETmplAdminControlledDirections = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("noVal", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplAdminControlledDirections.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplAdminControlledDirections.setDescription('The current value of the administrative controlled\n         directions parameter for the Port.')
alaDaUNPETmplTrustTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplTrustTagStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPETmplTrustTagStatus.setDescription('The flag to indicate whether the vlan tag in the incoming packet\n         could be used for classifying the user when MAC authentication fails\n         and classification rules dont match.')
alaDaUNPETmplForceL3Learning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplForceL3Learning.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplForceL3Learning.setDescription('UNP force L3 learning status on the Edge-Template.')
alaDaUNPETmplForceL3LearningPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 21, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplForceL3LearningPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplForceL3LearningPortBounce.setDescription('Port-Bounce associated with UNP force L3 learning status on the Edge-Template.')
alaDaUNPEdgeProfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22), )
if mibBuilder.loadTexts: alaDaUNPEdgeProfTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfTable.setDescription('Unp Edge Profile Table .')
alaDaUNPEdgeProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfName"))
if mibBuilder.loadTexts: alaDaUNPEdgeProfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfEntry.setDescription('Edge Profile Table Entries .')
alaDaUNPEdgeProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPEdgeProfName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfName.setDescription('UNP Edge Profile name.')
alaDaUNPEdgeProfQosPolicyList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfQosPolicyList.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfQosPolicyList.setDescription('Associated Qos Policy List.')
alaDaUNPEdgeProfLocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfLocationPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfLocationPolicy.setDescription('Associated Edge Profile Location Policy Name .')
alaDaUNPEdgeProfPeriodPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfPeriodPolicy.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfPeriodPolicy.setDescription('Associated Edge Profile Period  Policy Name .')
alaDaUNPEdgeProfHICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfHICStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfHICStatus.setDescription('Edge Profile HIC Status .')
alaDaUNPEdgeProfCPortalAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfCPortalAuth.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfCPortalAuth.setDescription('Edge Profile Captive Portal Authentication Status.')
alaDaUNPEdgeProfAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfAuthStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfAuthStatus.setDescription('Edge Profile Authentication Status .')
alaDaUNPEdgeProfMobileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfMobileTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfMobileTag.setDescription('Edge Profile Mobile Tag .')
alaDaUNPEdgeProfDHCPEnforcment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfDHCPEnforcment.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfDHCPEnforcment.setDescription('Edge Profile Dhcp Enforcement .')
alaDaUNPEdgeProfCPortalProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfCPortalProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfCPortalProf.setDescription('Associated Captive Portal Profile .')
alaDaUNPEdgeProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfRowStatus.setDescription('The status of this table entry.')
alaDaUNPEdgeProfRedirectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfRedirectStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfRedirectStatus.setDescription('Edge Profile Port bounce Status .')
alaDaUNPEdgeProfKerberosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfKerberosStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfKerberosStatus.setDescription('Edge Profile Kerberos Status .')
alaDaUNPEdgeProfMaxIngressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxIngressBw.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxIngressBw.setDescription('Maximum Ingress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n         If value is set to -1, then the Ingress Bandwidth specified for the profile is unconfigured.')
alaDaUNPEdgeProfMaxEgressBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxEgressBw.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxEgressBw.setDescription('Maximum Egress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n         If value is set to -1, then the Egress Bandwidth specified for the profile is unconfigured.')
alaDaUNPEdgeProfMaxIngressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxIngressDepth.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxIngressDepth.setDescription('Maximum Ingress Depth associated to Bandwidth.\n         If set to 0, then the Depth associated with the profile is unconfigured.')
alaDaUNPEdgeProfMaxEgressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 22, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxEgressDepth.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfMaxEgressDepth.setDescription('Maximum Egress Depth associated to Bandwidth.\n         If set to 0, then the Depth associated with the profile is unconfigured.')
alaDaUNPPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23), )
if mibBuilder.loadTexts: alaDaUNPPortRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleTable.setDescription('Unp Port Rule Table .')
alaDaUNPPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleNum"))
if mibBuilder.loadTexts: alaDaUNPPortRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleEntry.setDescription('PortRule Table Entries .')
alaDaUNPPortRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaUNPPortRuleNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleNum.setDescription(' ifIndex .')
alaDaUNPPortRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPPortRuleEdgeProf.setDescription('Associated Edge Profile Name .')
alaDaUNPPortRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPPortRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPPortRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile1.setDescription('Associated Profile Name .')
alaDaUNPPortRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile2.setDescription('Associated Profile Name .')
alaDaUNPPortRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 23, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortRuleProfile3.setDescription('Associated Profile Name .')
alaDaUNPGroupRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24), )
if mibBuilder.loadTexts: alaDaUNPGroupRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleTable.setDescription('Based on Group id , Edge Profile Classification table  .')
alaDaUNPGroupRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPGroupRuleId"))
if mibBuilder.loadTexts: alaDaUNPGroupRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleEntry.setDescription('Group Rule Table Entries .')
alaDaUNPGroupRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: alaDaUNPGroupRuleId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleId.setDescription('Group Id .')
alaDaUNPGroupRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPGroupRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleEdgeProf.setDescription('Associated Edge Profile .')
alaDaUNPGroupRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPGroupRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPGroupRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPGroupRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacOuiRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25), )
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleTable.setDescription('A list of MAC Oui rules.  This is used to match\n         the MAC Oui  of a packet to a User Network Profile entry ')
alaDaUNPMacOuiRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleAddr"))
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPMacOuiRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 1), MacOui())
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleAddr.setDescription('The MAC Oui address used for classification.')
alaDaUNPMacOuiRuleEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleEdgeProfile.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacOuiRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacOuiRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPMacOuiRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacOuiRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacOuiRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 25, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPEndPoinRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26), )
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleTable.setDescription('A list of  End point  rules.  This is used to match\n         the lldp med-endpoint   of a packet to a User Network Profile entry ')
alaDaUNPEndPoinRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinRuleId"))
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleEntry.setDescription('A MAC rule entry.')
alaDaUNPEndPoinRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipPhone", 1))))
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleId.setDescription('End Point Identifier .')
alaDaUNPEndPoinEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEndPoinEdgeProfile.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPEndPoinRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPEndPoinProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPEndPoinProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPEndPoinProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPEndPoinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPEndPoinVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPoinVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of\n         the Q-in-Q VLAN Tag format, where the value of the outer 802.1Q  \n         VLAN ID is encoded in the least significant 16 bits, and the value of\n         inner VLAN ID is encoded  in the most significant 16 bits.')
alaDaUNPAuthRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27), )
if mibBuilder.loadTexts: alaDaUNPAuthRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleTable.setDescription('A list of  Auth  rules.  This is used to match\n         authentication type  to a User Network Profile entry ')
alaDaUNPAuthRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleType"))
if mibBuilder.loadTexts: alaDaUNPAuthRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleEntry.setDescription(' Auth based  rule entry.')
alaDaUNPAuthRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("dot1x", 2), ("mac", 3), ("dot1xFail", 4), ("macFail", 5), ("noAuth", 6))))
if mibBuilder.loadTexts: alaDaUNPAuthRuleType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleType.setDescription('Auth Rule Identifier .')
alaDaUNPAuthRuleEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPAuthRuleEdgeProfile.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPAuthRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPAuthRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPAuthRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPAuthRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPAuthRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 27, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPClassifRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28), )
if mibBuilder.loadTexts: alaDaUNPClassifRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleTable.setDescription('A list of  Calssification rules.  This is used to match\n         classification rule  to a User Network Profile entry ')
alaDaUNPClassifRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleName"))
if mibBuilder.loadTexts: alaDaUNPClassifRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleEntry.setDescription(' Classification   rule entry.')
alaDaUNPClassifRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPClassifRuleName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleName.setDescription('Classification Rule Name .')
alaDaUNPClassifRulePrecedenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRulePrecedenceNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRulePrecedenceNum.setDescription('Classification Rule Precedence number .')
alaDaUNPClassifRuleEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPClassifRuleEdgeProfile.setDescription('Classification Rule Edge ProfileName .')
alaDaUNPClassifRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRulePort.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRulePort.setDescription('Classification Rule  port .')
alaDaUNPClassifRulePortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRulePortHigh.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRulePortHigh.setDescription('Classification Rule  port .')
alaDaUNPClassifRuleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPClassifRuleGroupId.setDescription('Classification Rule Group Id. Value of -1 \n         indicates uncofiguring the previously\n         configured groupId value .')
alaDaUNPClassifRuleMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPClassifRuleMacRngLoaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacRngLoaddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacRngLoaddr.setDescription('Classification Rule mac Address Range starting address.')
alaDaUNPClassifRuleMacRngHiaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacRngHiaddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacRngHiaddr.setDescription('Classification Rule mac Address Range ending address.')
alaDaUNPClassifRuleMacOuiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacOuiAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleMacOuiAddr.setDescription('Classification Rule mac oui address.')
alaDaUNPClassifRuleEndPoin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("ipPhone", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleEndPoin.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleEndPoin.setDescription('End Point Identifier .')
alaDaUNPClassifRuleAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("noAuth", 1), ("dot1x", 2), ("mac", 3), ("dot1xFail", 4), ("macFail", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleAuthType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleAuthType.setDescription('Classification Rule Auth Type .')
alaDaUNPClassifRuleIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 13), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpAddressType.setDescription('The IP address type .')
alaDaUNPClassifRuleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 14), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpAddress.setDescription('Classification Rule Ip address.')
alaDaUNPClassifRuleIpMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 15), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpMaskType.setDescription('The IP Mask type .')
alaDaUNPClassifRuleIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 16), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleIpMask.setDescription('Classification Rule Ip Mask.')
alaDaUNPClassifRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRowStatus.setDescription('The status of this table entry.')
alaDaUNPClassifRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         The VLAN Tag is of the Q-in-Q VLAN Tag format, \n         where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits. Value of -1 \n\t indicates unconfiguring of the previously configured VLAN-Tag.')
alaDaUNPClassifRuleCustomerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 4294967295), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleCustomerDomain.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleCustomerDomain.setDescription('Classification Rule Customer Domain. Value of -1 \n                indicates uncofiguring the previously\n                configured customer domain value .')
alaDaUNPClassifRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile1.setDescription('Profile with priority 1 associated with the Classification Rule.')
alaDaUNPClassifRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile2.setDescription('Profile with priority 2 associated with the Classification Rule.')
alaDaUNPClassifRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 28, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassifRuleProfile3.setDescription('Profile with priority 3 associated with the Classification Rule.')
alaDaUNPMacPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29), )
if mibBuilder.loadTexts: alaDaUNPMacPortRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleTable.setDescription('Mac Address & port classification table .')
alaDaUNPMacPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleMacAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleNum"))
if mibBuilder.loadTexts: alaDaUNPMacPortRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleEntry.setDescription(' Mac & port  based  classification rule .')
alaDaUNPMacPortRuleMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacPortRuleMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPMacPortRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaDaUNPMacPortRuleNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleNum.setDescription('Classification Rule Port num.')
alaDaUNPMacPortRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacPortRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacPortRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPMacPortRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacPortRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacPortRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 29, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPIpPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30), )
if mibBuilder.loadTexts: alaDaUNPIpPortRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleTable.setDescription('Ip Address & port classification table .')
alaDaUNPIpPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleNum"))
if mibBuilder.loadTexts: alaDaUNPIpPortRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleEntry.setDescription(' Ip & port  based  classification rule .')
alaDaUNPIpPortRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpPortRuleAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleAddrType.setDescription('The IP address type .')
alaDaUNPIpPortRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpPortRuleAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleAddr.setDescription('The IP network address .')
alaDaUNPIpPortRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 3), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaDaUNPIpPortRuleNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleNum.setDescription('Classification Rule Port num.')
alaDaUNPIpPortRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPIpPortRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPIpPortRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPIpPortRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPIpPortRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPIpPortRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPIpPortRuleMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 10), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleMaskType.setDescription('The IP mask type. This field is mandatory.')
alaDaUNPIpPortRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 30, 1, 11), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpPortRuleMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortRuleMask.setDescription('The IP network mask applying to the IP network address. This field is mandatory.')
alaDaUNPMacIpPortRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31), )
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleTable.setDescription('Mac, Ip Address & port classification table .')
alaDaUNPMacIpPortRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleMacAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleAddrIpType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleIpAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleNum"))
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleEntry.setDescription(' Mac, Ip & port  based  classification rule .')
alaDaUNPMacIpPortRuleMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPMacIpPortRuleAddrIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleAddrIpType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleAddrIpType.setDescription('The IP address type .')
alaDaUNPMacIpPortRuleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpAddr.setDescription('The IP network address .')
alaDaUNPMacIpPortRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 4), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleNum.setDescription('Classification Rule Port num.')
alaDaUNPMacIpPortRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacIpPortRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacIpPortRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPMacIpPortRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile1.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacIpPortRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile2.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacIpPortRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleProfile3.setDescription('The profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacIpPortRuleIpMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 11), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpMaskType.setDescription('The IP mask type. This field is mandatory.')
alaDaUNPMacIpPortRuleIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 31, 1, 12), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpPortRuleIpMask.setDescription('The IP network mask applying to the IP network address. This field is mandatory.')
alaDaUNPMacGroupRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32), )
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleTable.setDescription('Mac Address & Group classification table .')
alaDaUNPMacGroupRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacGroupRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacGroupRuleId"))
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleEntry.setDescription(' Mac & group  based  classification rule .')
alaDaUNPMacGroupRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleAddr.setDescription('Classification Rule mac Address.')
alaDaUNPMacGroupRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleId.setDescription('Classification Rule Group Id.')
alaDaUNPMacGroupRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPMacGroupRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacGroupRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacGroupRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n    Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPIpGroupRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33), )
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleTable.setDescription('Ip Address & Group classification table .')
alaDaUNPIpGroupRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleNum"))
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleEntry.setDescription(' Ip & Group  based  classification rule .')
alaDaUNPIpGroupRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleAddrType.setDescription('The IP address type .')
alaDaUNPIpGroupRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleAddr.setDescription('The IP network address .')
alaDaUNPIpGroupRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleNum.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleNum.setDescription('Classification Rule Group num.')
alaDaUNPIpGroupRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n         applied.')
alaDaUNPIpGroupRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPIpGroupRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpGroupRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacIpGroupRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34), )
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleTable.setDescription('Mac Address,IP  & Group classification table .')
alaDaUNPMacIpGroupRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleMacAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleIpAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleIpAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleId"))
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleEntry.setDescription(' Mac Ip & group  based  classification rule entries .')
alaDaUNPMacIpGroupRuleMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPMacIpGroupRuleIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleIpAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleIpAddrType.setDescription('The IP address type .')
alaDaUNPMacIpGroupRuleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleIpAddr.setDescription('The IP network address .')
alaDaUNPMacIpGroupRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleId.setDescription('Classification Rule Group Id.')
alaDaUNPMacIpGroupRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPMacIpGroupRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacIpGroupRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 34, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroupRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPUserRoleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35), )
if mibBuilder.loadTexts: alaDaUNPUserRoleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleTable.setDescription('User Role Table.')
alaDaUNPUserRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleName"))
if mibBuilder.loadTexts: alaDaUNPUserRoleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleEntry.setDescription(' User Role Name  based  rule entry.')
alaDaUNPUserRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPUserRoleName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleName.setDescription('User Role Name .')
alaDaUNPUserRolePrecedenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRolePrecedenceNum.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRolePrecedenceNum.setDescription('User Role Precedence number .')
alaDaUNPUserRolePolicyList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRolePolicyList.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRolePolicyList.setDescription('User Role Policy List Name .')
alaDaUNPUserRoleEdgeProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleEdgeProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPUserRoleEdgeProfile.setDescription('User Role  Edge ProfileName .')
alaDaUNPUserRoleAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAuth", 0), ("none", 1), ("dot1x", 2), ("mac", 3), ("dot1xFail", 4), ("macFail", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleAuthType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleAuthType.setDescription('User Rule Auth Type .')
alaDaUNPUserRolePostLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRolePostLoginStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRolePostLoginStatus.setDescription(' Enable/Disable Captive Portal Post Login Status ')
alaDaUNPUserRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleRowStatus.setDescription('The status of this table entry.')
alaDaUNPUserRoleKerberosPostLoginStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleKerberosPostLoginStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleKerberosPostLoginStatus.setDescription(' Enable/Disable Kerberos Post Login Status ')
alaDaUNPUserRoleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile1.setDescription('User Role ProfileName .')
alaDaUNPUserRoleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile2.setDescription('User Role ProfileName .')
alaDaUNPUserRoleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 35, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleProfile3.setDescription('User Role ProfileName .')
alaDaUNPRstrctedRoleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 36), )
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleTable.setDescription('Restricted  Role Table.')
alaDaUNPRstrctedRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 36, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPRstrctedRoleType"))
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleEntry.setDescription(' Entry identified by Restricted Role .')
alaDaUNPRstrctedRoleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unauthorized", 1), ("hic", 2), ("qmr", 3), ("blacklist", 4), ("cpPreLogin", 5), ("kerberosPreLogin", 6))))
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleType.setDescription('Unp Restricted Roles .')
alaDaUNPRstrctedRolePolicyList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 36, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRstrctedRolePolicyList.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRstrctedRolePolicyList.setDescription('Restricted  Role Policy List Name .')
alaDaUNPRstrctedRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 36, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRstrctedRoleRowStatus.setDescription('The status of this table entry.')
alaDaUNPVlanMapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 37), )
if mibBuilder.loadTexts: alaDaUNPVlanMapTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMapTable.setDescription('Vlan/Unp Mapping Table .')
alaDaUNPVlanMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVlanMapEdgeProf"))
if mibBuilder.loadTexts: alaDaUNPVlanMapEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMapEntry.setDescription(' Entry identified by Edge Profile Name  .')
alaDaUNPVlanMapEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 37, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPVlanMapEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMapEdgeProf.setDescription('Edge Profile  Name .')
alaDaUNPVlanMapIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanMapIdent.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMapIdent.setDescription('Vlan Identifier which is mapped to Edge profile .')
alaDaUNPVlanMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 37, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanMapRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMapRowStatus.setDescription('The status of this table entry.')
alaDaUnpGroupIdTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 38), )
if mibBuilder.loadTexts: alaDaUnpGroupIdTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUnpGroupIdTable.setDescription('This table creates and deletes the UNP group within a switch.')
alaDaUnpGroupIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 38, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUnpGroupId"))
if mibBuilder.loadTexts: alaDaUnpGroupIdEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUnpGroupIdEntry.setDescription('UNP GroupId entry')
alaDaUnpGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaDaUnpGroupId.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUnpGroupId.setDescription('Unp Group Id.')
alaDaUnpGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 38, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpGroupDescription.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUnpGroupDescription.setDescription('Unp Group Id.')
alaDaUnpGroupIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 38, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUnpGroupIdRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUnpGroupIdRowStatus.setDescription('The status of this table entry.')
alaDaUNPEdgeFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39), )
if mibBuilder.loadTexts: alaDaUNPEdgeFlushTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushTable.setDescription('Port, LinkAgg, Mac, Edge User Type Based Flush Table .')
alaDaUNPEdgeFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushIndex"))
if mibBuilder.loadTexts: alaDaUNPEdgeFlushEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushEntry.setDescription('One entry  to flush edge users on the basis of user criteria.')
alaDaUNPEdgeFlushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaDaUNPEdgeFlushIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushIndex.setDescription(' Interface index .')
alaDaUNPEdgeFlushPortLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeFlushPortLow.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushPortLow.setDescription(' Edge Flush Port Criteria .')
alaDaUNPEdgeFlushPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeFlushPortHigh.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushPortHigh.setDescription(' Edge Flush Port Criteria .')
alaDaUNPEdgeFlushType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noAuth", 1), ("onex", 2), ("mac", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeFlushType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushType.setDescription(' Edge Flush Type criteria .')
alaDaUNPEdgrFlushMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 5), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgrFlushMac.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgrFlushMac.setDescription(' Edge Flush MAC criteria .')
alaDaUNPEdgeFlushComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("all", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeFlushComplete.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushComplete.setDescription(' To flush all Edge Users .')
alaDaUNPEdgeFlushProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 39, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPEdgeFlushProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushProfile.setDescription(' To flush all Edge Users in the given Edge-Profile')
alaDaUNPMacRulesTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40), )
if mibBuilder.loadTexts: alaDaUNPMacRulesTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesTable.setDescription('Mac Address classification table .')
alaDaUNPMacRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRulesMacAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRulesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesEntry.setDescription(' Mac based  classification rule .')
alaDaUNPMacRulesMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacRulesMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPMacRulesEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRulesEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPMacRulesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRulesRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacRulesVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRulesVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRulesVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPMacRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41), )
if mibBuilder.loadTexts: alaDaUNPMacRangeTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeTable.setDescription('Mac Address classification table .')
alaDaUNPMacRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeStartMacAddr"))
if mibBuilder.loadTexts: alaDaUNPMacRangeEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeEntry.setDescription(' Mac based  classification rule .')
alaDaUNPMacRangeStartMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPMacRangeStartMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeStartMacAddr.setDescription('Classification Rule start mac Address.')
alaDaUNPMacRangeEndMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeEndMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeEndMacAddr.setDescription('Classification Rule end mac Address.')
alaDaUNPMacRangeEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n      applied.')
alaDaUNPMacRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeRowStatus.setDescription('The status of this table entry.')
alaDaUNPMacRangeVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPMacRangeVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangeVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaUNPIpMaskRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42), )
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleTable.setDescription('Ip Address & port classification table .')
alaDaUNPIpMaskRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleMaskType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleMask"))
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleEntry.setDescription(' Ip & Mask  based  classification rule .')
alaDaUNPIpMaskRuleAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleAddrType.setDescription('The IP address type .')
alaDaUNPIpMaskRuleAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleAddr.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleAddr.setDescription('The IP network address .')
alaDaUNPIpMaskRuleMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 3), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleMaskType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleMaskType.setDescription('The IP mask type .')
alaDaUNPIpMaskRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 4), InetAddress())
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleMask.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleMask.setDescription('The IP network mask.')
alaDaUNPIpMaskRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleEdgeProf.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n          applied.')
alaDaUNPIpMaskRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPIpMaskRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 42, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleVlanTag.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts.\n         Vlan tag of 0 indicates no VLAN is associated.')
alaDaQMRMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43))
alaDaQMRGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 1))
alaDaQMRPage = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaQMRPage.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRPage.setDescription('Flag to indicate whether to send back a quarantined page \n\t\t      when a client is quarantined but a remediation URL is not specified.')
alaDaQMRPath = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaQMRPath.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRPath.setDescription('Default path for remediation server redirect.')
alaDaQMRCustomHttpProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1025, 65535), )).clone(8080)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaQMRCustomHttpProxyPort.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRCustomHttpProxyPort.setDescription("The custom HTTP port for QoS to intercept the host's initial HTTP request.\n        If set to 0 then custom HTTP port will be reset to its default value 8080.")
alaDaQMRPolicyList = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaQMRPolicyList.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRPolicyList.setDescription('The name of the policy associated with QMR.')
alaDaQMRAllowedTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2), )
if mibBuilder.loadTexts: alaDaQMRAllowedTable.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedTable.setDescription('This table shows the list of IP addresses the host can communicate with\n       \t\t      when it is in quarantined state.')
alaDaQMRAllowedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedName"))
if mibBuilder.loadTexts: alaDaQMRAllowedEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedEntry.setDescription('Entry of the IP address the host can communicate with\n\t\t      when it is in quarantined state..')
alaDaQMRAllowedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: alaDaQMRAllowedName.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedName.setDescription('Allowed name.')
alaDaQMRAllowedIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaQMRAllowedIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedIpAddrType.setDescription('IP address type of the IP Adddress that is allowed.')
alaDaQMRAllowedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaQMRAllowedIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedIpAddr.setDescription('The IP address that is allowed to access.')
alaDaQMRAllowedIpMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaQMRAllowedIpMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedIpMaskType.setDescription('IP mask type of the allowed entry.')
alaDaQMRAllowedIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaQMRAllowedIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedIpMask.setDescription('IP Mask of the allowed entry.')
alaDaQMRAllowedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 43, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaQMRAllowedRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRAllowedRowStatus.setDescription('The status of this table entry.')
alaDaUNPValidityPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44), )
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTable.setDescription('Table of UNP ValidityPeriod definitions')
alaDaUNPValidityPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodName"))
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEntry.setDescription('Definition of UNP ValidityPeriod')
alaDaUNPValidityPeriodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPValidityPeriodName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodName.setDescription('Name of validity period')
alaDaUNPValidityPeriodDays = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodDays.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodDays.setDescription('Bitfield for each day of the week this validity period\n  is active.  Monday is least significant, Sunday is most significant.')
alaDaUNPValidityPeriodDaysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodDaysStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodDaysStatus.setDescription('Status field indicating whether the validity period\n  has specific active days of the month.')
alaDaUNPValidityPeriodMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodMonths.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodMonths.setDescription('Bitfield for each month this validity period\n  is active.  January is least significant. Decemeber\n  is most significant.')
alaDaUNPValidityPeriodMonthsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodMonthsStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodMonthsStatus.setDescription('Status field indicating whether the validity period\n  has specific active days of the week.')
alaDaUNPValidityPeriodHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodHour.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodHour.setDescription("Time of day this period becomes active.\n  Format is 'hh:mm'")
alaDaUNPValidityPeriodHourStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodHourStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodHourStatus.setDescription('Status field indicating whether the validity period\n  has specific active hours of the day.')
alaDaUNPValidityPeriodEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEndHour.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEndHour.setDescription("Time of day this period becomes inactive.\n  Format is 'hh:mm'")
alaDaUNPValidityPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodInterval.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodInterval.setDescription("Date/time when the validity period begins.\n  Format is 'mm/dd/yyyy hh:mm'")
alaDaUNPValidityPeriodIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodIntervalStatus.setDescription('Status field indicating whether the validity period\n  has a specific active date-time interval.')
alaDaUNPValidityPeriodEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEndInterval.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodEndInterval.setDescription("Date/time when the validity period ends.\n  Format is 'mm/dd/yyyy hh:mm'")
alaDaUNPValidityPeriodTimezone = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("nzst", 1), ("zp11", 2), ("aest", 3), ("gst", 4), ("acst", 5), ("kst", 6), ("jst", 7), ("awst", 8), ("zp8", 9), ("zp7", 10), ("zp6", 11), ("ist", 12), ("zp5", 13), ("zp4", 14), ("msk", 15), ("eet", 16), ("cet", 17), ("met", 18), ("bst", 19), ("wat", 20), ("utc", 21), ("gmt", 22), ("wet", 23), ("zm2", 24), ("zm3", 25), ("nst", 26), ("ast", 27), ("astcam", 28), ("est", 29), ("estcam", 30), ("cst", 31), ("cstcam", 32), ("mst", 33), ("mstcam", 34), ("pst", 35), ("pstcam", 36), ("akst", 37), ("hst", 38), ("zm11", 39)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTimezone.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTimezone.setDescription("Timezone in which the policy's time has\n  to be interpreted.")
alaDaUNPValidityPeriodTimezoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTimezoneStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodTimezoneStatus.setDescription('Status field indicating whether the validity period\n  has specific timezone enabled.')
alaDaUNPValidityPeriodActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodActiveStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodActiveStatus.setDescription('Status field indicating whether the validity period\n  is currently active in the system so that Access Guardian will \n  utilize it for Time-based Policy checks.')
alaDaUNPValidityPeriodRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 44, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPValidityPeriodRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodRowStatus.setDescription('Used to create/delete validity periods according\n  to the RowStatus convention')
alaDaUNPLocationPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45), )
if mibBuilder.loadTexts: alaDaUNPLocationPolicyTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyTable.setDescription('Table of UNP Location Policy definitions')
alaDaUNPLocationPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyName"))
if mibBuilder.loadTexts: alaDaUNPLocationPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyEntry.setDescription('Definition of UNP Location Policy')
alaDaUNPLocationPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPLocationPolicyName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyName.setDescription('Name of the Location Policy')
alaDaUNPLocationPolicyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPort.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPort.setDescription('Specifies the port criterion')
alaDaUNPLocationPolicyPortHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPortHigh.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPortHigh.setDescription('Specifies the upper bound of the port criterion')
alaDaUNPLocationPolicyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPortStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyPortStatus.setDescription('This object has to be set to ENABLE when the ports form one of the criteria for the location policy.\n \tIt should be set to DISABLE when the ports are to be removed.')
alaDaUNPLocationPolicySystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicySystemName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicySystemName.setDescription('System Name criterion of the Location Policy')
alaDaUNPLocationPolicySystemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicySystemLocation.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicySystemLocation.setDescription('System Location criterion of the Location Policy')
alaDaUNPLocationPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 45, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPLocationPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyRowStatus.setDescription('Used to create/delete location policies according\n  to the RowStatus convention')
alaDaUNPRedirectAllowedServerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46), )
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerTable.setDescription('Table of UNP Redirect Allowed Server')
alaDaUNPRedirectAllowedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedServerName"))
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerEntry.setDescription('Definition of UNP Redirect Allowed Server')
alaDaUNPRedirectAllowedServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerName.setDescription('Name of Redirect Allowed Server')
alaDaUNPRedirectAllowedServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerIPType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerIPType.setDescription('IP Address Type IPV4/IPV6 of Redirect server')
alaDaUNPRedirectAllowedServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerIP.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerIP.setDescription('IP Address of Redirect server')
alaDaUNPRedirectAllowedMaskIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedMaskIPType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedMaskIPType.setDescription('IP Mask Type IPV4/IPV6 of Redirect server')
alaDaUNPRedirectAllowedMaskIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedMaskIP.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedMaskIP.setDescription('IP Mask Address of Redirect server')
alaDaUNPRedirectAllowedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 46, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedRowStatus.setDescription('ROwStatus Implies deleting/adding Entry to Table.')
alaDaMacVlanUserExtTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47), )
if mibBuilder.loadTexts: alaDaMacVlanUserExtTable.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtTable.setDescription('Extension to alaDaMacVlanUserTable to support number of applications.')
alaDaMacVlanUserExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtIntfNum"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtMACAddress"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtVlanID"), (0, "ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtAppID"))
if mibBuilder.loadTexts: alaDaMacVlanUserExtEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtEntry.setDescription('Non 802.1x supplicant information.')
alaDaMacVlanUserExtIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaMacVlanUserExtIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtIntfNum.setDescription('The ifIndex representing the slot and port where the non 802.1x supplicant is learned.')
alaDaMacVlanUserExtMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaDaMacVlanUserExtMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDaMacVlanUserExtVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: alaDaMacVlanUserExtVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDaMacVlanUserExtAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: alaDaMacVlanUserExtAppID.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtAppID.setDescription('to indicate the application number or ID.')
alaDaMacVlanUserExtAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 47, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaMacVlanUserExtAppName.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtAppName.setDescription('Applications added to the non 802.1x supplicant')
alaDaUNPVxlanProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48), )
if mibBuilder.loadTexts: alaDaUNPVxlanProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileTable.setDescription('This table stores the Service Classification profiles created in the system.\n         The entries provides information to classify device in the VXLAN Service domain.')
alaDaUNPVxlanProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileName"))
if mibBuilder.loadTexts: alaDaUNPVxlanProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileEntry.setDescription('VXLAN Service Classification Profile entry')
alaDaUNPVxlanProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPVxlanProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileName.setDescription('The name of the profile.')
alaDaUNPVxlanProfileEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 2), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileEncapVal.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaUNPVxlanProfileVnid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileVnid.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileVnid.setDescription('The object represnet the VNID that is to be used to dynamically \n         create a VXLAN service.')
alaDaUNPVxlanProfileQosPolicyListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileQosPolicyListName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileQosPolicyListName.setDescription('The name of the QoS Policy List name that will be used if this\n         User Network Profile is applied for a given device.')
alaDaUNPVxlanProfileFarEndIPListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileFarEndIPListName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileFarEndIPListName.setDescription('The name of the Far End IP List that will be used if this\n         User Network Profile is applied for a given device.')
alaDaUNPVxlanProfileMulticastIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastIPAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastIPAddressType.setDescription('The IP address type of the multicast group IP address.')
alaDaUNPVxlanProfileMulticastIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastIPAddress.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastIPAddress.setDescription('The multicast group IP address.')
alaDaUNPVxlanProfileSapVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileSapVlanXlation.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileSapVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n         in this service if the corresponding access ports for the SAPs also\n         has the vlan translation enabled.')
alaDaUNPVxlanProfileMobileTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMobileTagStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMobileTagStatus.setDescription('VXLAN Profile Mobile Tag status. When enabled, the packets egressing out on the SAP\n         will be tagged.')
alaDaUNPVxlanProfileMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2), ("hybrid", 3))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastMode.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileMulticastMode.setDescription('To configure the multicast replication mode for each service:\n          Head-end(1) where a non-unicast packet entering the SAP port\n          is replicated once for each receiver in the b-domain using its\n          unicast BMAC.\n          Tandem(2) where a non-unicast packet entering the SAP port is\n          replicated once at each node using the multicast group address.')
alaDaUNPVxlanProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 48, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanProfileRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileRowStatus.setDescription('The row status of this table entry.')
alaDaUNPVxlanFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49), )
if mibBuilder.loadTexts: alaDaUNPVxlanFlushTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushTable.setDescription('Table to flush the VXLAN access users based on some criteria \n         such as MAC Address, Authentication Type, SAP, Service and/or Profile.')
alaDaUNPVxlanFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushIndex"))
if mibBuilder.loadTexts: alaDaUNPVxlanFlushEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushEntry.setDescription('One entry  to flush VXLAN access users on the basis of user criteria.')
alaDaUNPVxlanFlushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaDaUNPVxlanFlushIndex.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushIndex.setDescription('Flush index.')
alaDaUNPVxlanFlushComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("all", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushComplete.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushComplete.setDescription('Flush all users learnt on all VXLAN-access type ports.')
alaDaUNPVxlanFlushAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("onex", 2), ("mac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushAuthType.setDescription('Flush based on the authentication type of the user.')
alaDaUNPVxlanFlushMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushMacAddress.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushMacAddress.setDescription('Flush based on a single MAC address.')
alaDaUNPVxlanFlushSapIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushSapIDIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushSapIDIfIndex.setDescription('Flush the users learnt on the given SAP-ID Interface Index.')
alaDaUNPVxlanFlushSapIDEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 6), TmnxEncapVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushSapIDEncapVal.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushSapIDEncapVal.setDescription('Flush the users learnt on the given SAP-ID Encapsulation.')
alaDaUNPVxlanFlushServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushServiceID.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushServiceID.setDescription('Flush the users learnt of the given VXLAN service.')
alaDaUNPVxlanFlushVxlanProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 49, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFlushVxlanProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushVxlanProfile.setDescription('Flush the users learnt on the given VXLAN Profile.')
alaDaUNPVxlanFarEndIPListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 50), )
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListTable.setDescription('Table shows all the Far-End-IP-Lists configured.')
alaDaUNPVxlanFarEndIPListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 50, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPListName"))
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListEntry.setDescription('Far-end IP List entry.')
alaDaUNPVxlanFarEndIPListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 50, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListName.setDescription('Name of the Far-End-IP list configured.')
alaDaUNPVxlanFarEndIPListIPAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 50, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListIPAddressCount.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListIPAddressCount.setDescription('The count of the IP Addresses configured for the corresponding Far-End-IP-List.')
alaDaUNPVxlanFarEndIPListRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListRemove.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListRemove.setDescription('This object is used to remove a Far-End-IP-List.')
alaDaUNPVxlanFarEndIPAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 51), )
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListTable.setDescription('Table to configure the Far-End-List and the IP Addresses for that list.')
alaDaUNPVxlanFarEndIPAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 51, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPListName"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPAddressListIPType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPAddressListIP"))
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListEntry.setDescription('Far-end IP Address List entry.')
alaDaUNPVxlanFarEndIPAddressListIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 51, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListIPType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListIPType.setDescription('The IP address type of the IP address.')
alaDaUNPVxlanFarEndIPAddressListIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 51, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListIP.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListIP.setDescription('The Far-End IP address.')
alaDaUNPVxlanFarEndIPAddressListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 51, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListRowStatus.setDescription('The row status of this table entry.')
alaDaUNPSpbFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52), )
if mibBuilder.loadTexts: alaDaUNPSpbFlushTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushTable.setDescription('Table to flush the VXLAN access users based on some criteria \n         such as MAC Address, Authentication Type, SAP, Service and/or Profile.')
alaDaUNPSpbFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushIndex"))
if mibBuilder.loadTexts: alaDaUNPSpbFlushEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushEntry.setDescription('One entry to flush SPB access users on the basis of user criteria.')
alaDaUNPSpbFlushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaDaUNPSpbFlushIndex.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushIndex.setDescription('Flush index.')
alaDaUNPSpbFlushComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("all", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushComplete.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushComplete.setDescription('Flush all users learnt on all SPB-access type ports.')
alaDaUNPSpbFlushAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("onex", 2), ("mac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushAuthType.setDescription('Flush based on the authentication type of the user.')
alaDaUNPSpbFlushMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushMacAddress.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushMacAddress.setDescription('Flush based on a single mac-address.')
alaDaUNPSpbFlushSapIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 5), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushSapIDIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushSapIDIfIndex.setDescription('Flush the users learnt on the given SAP-ID Interface Index.')
alaDaUNPSpbFlushSapIDEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 6), TmnxEncapVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushSapIDEncapVal.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushSapIDEncapVal.setDescription('Flush the users learnt on the given SAP-ID Encapsulation.')
alaDaUNPSpbFlushServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushServiceID.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushServiceID.setDescription('Flush the users learnt of the given VXLAN service.')
alaDaUNPSpbFlushSpbProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 52, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPSpbFlushSpbProfile.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushSpbProfile.setDescription('Flush the users learnt on the given SPB Profile.')
alaDaKerberosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53))
alaDaKerberosGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1))
alaDaKerberosGlobalMacMoveStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalMacMoveStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalMacMoveStatus.setDescription('Defines the global mac move status for Kerberos.')
alaDaKerberosGlobalInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalInactivityTimer.setDescription('Inactivity Timer value for the Kerberos users in minutes.\n        It will be configured globally.')
alaDaKerberosGlobalPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalPolicy.setDescription('The name of the QoS Policy List name that will be used for a kerberos user\n      if per domain QOS Policy List is not configured by object alaDaKerberosPolicyName.')
alaDaKerberosGlobalPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosGlobalPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalPolicyStatus.setDescription('The status of global policy list. This can be Active or Inactive if \n       alaDaKerberosGlobalPolicy is configured else it will be none.')
alaDaKerberosClientPktHwDiscardStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosClientPktHwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosClientPktHwDiscardStats.setDescription('The total number of packets dropped due to hardware rate limiter, destined to Kerberos server.')
alaDaKerberosServerPktHwDiscardStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosServerPktHwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosServerPktHwDiscardStats.setDescription('The total number of packets from kerberos server, dropped due to hardware rate limiter.')
alaDaKerberosTotalClientPktRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalClientPktRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalClientPktRxStats.setDescription('The total number of packets received by software, destined to the kerberos server.')
alaDaKerberosTotalServerPktRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalServerPktRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalServerPktRxStats.setDescription('The total number of packets received by software from kerberos server.')
alaDaKerberosClientPktSwDiscardStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosClientPktSwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosClientPktSwDiscardStats.setDescription('Total number of packtes discarded by software, destined to kerberos server.')
alaDaKerberosServerPktSwDiscardStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosServerPktSwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosServerPktSwDiscardStats.setDescription('Total number of packets discarded by software, received from kerberos server.')
alaDaKerberosTotalASREQRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalASREQRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalASREQRxStats.setDescription('Total number of AS-REQ packet received by Kerberos application.')
alaDaKerberosTotalASREPRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalASREPRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalASREPRxStats.setDescription('Total number of AS-REP packet received by Kerberos application.')
alaDaKerberosTotalTGSREQRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalTGSREQRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalTGSREQRxStats.setDescription('Total number of TGS-REQ packet received by Kerberos application.')
alaDaKerberosTotalTGSREPRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalTGSREPRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalTGSREPRxStats.setDescription('Total number of TGS-REP packet received by Kerberos application.')
alaDaKerberosTotalErrorRxStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosTotalErrorRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosTotalErrorRxStats.setDescription('Total number of KRB-ERROR packet received by Kerberos application.')
alaDaKerberosGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalClearStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalClearStats.setDescription('Defines the global clear statistics control for Kerberos Snooping\n        The value reset (1) indicates that clear all global statistic counters.')
alaDaKerberosGlobalClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalClearPortStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalClearPortStats.setDescription('Defines the global clear statistics control for Kerberos Snooping\n        The value reset (1) indicates that clear all per port statistic counters.')
alaDaKerberosGlobalServerTimeoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosGlobalServerTimeoutTimer.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGlobalServerTimeoutTimer.setDescription('Defines the global reply timeout value for Kerberos Server in seconds.')
alaDaKerberosPolicyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2), )
if mibBuilder.loadTexts: alaDaKerberosPolicyConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyConfigTable.setDescription('Provide the list of user policies configured per user domain.')
alaDaKerberosPolicyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2, 1), ).setIndexNames((1, "ALCATEL-IND1-DA-MIB", "alaDaKerberosPolicyDomainName"))
if mibBuilder.loadTexts: alaDaKerberosPolicyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyConfigEntry.setDescription('Policy config table entry.')
alaDaKerberosPolicyDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaKerberosPolicyDomainName.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyDomainName.setDescription('The name of the kerberos user domain.')
alaDaKerberosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaKerberosPolicyName.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyName.setDescription('The name of the QoS Policy List name that will be used for a kerberos user\n      in the domain.')
alaDaKerberosPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyStatus.setDescription('The status of domain level policy list. This can be Active or Inactive.')
alaDaKerberosPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaKerberosPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPolicyRowStatus.setDescription('This object allows entries to be created and deleted in the table')
alaDaKerberosUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3), )
if mibBuilder.loadTexts: alaDaKerberosUserTable.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserTable.setDescription('Provide the list of Kerberos users.')
alaDaKerberosUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaKerberosUserMac"))
if mibBuilder.loadTexts: alaDaKerberosUserEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserEntry.setDescription('Kerberos user Table entry.')
alaDaKerberosUserMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDaKerberosUserMac.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserMac.setDescription('Mac address of the user.')
alaDaKerberosUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserPort.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserPort.setDescription('Port number on which user is learned.')
alaDaKerberosUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserName.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserName.setDescription('Name of the user')
alaDaKerberosUserDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserDomain.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserDomain.setDescription('Domain of the user.')
alaDaKerberosUserAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("asAuthenticating", 1), ("asAuthenticated", 2), ("asFailed", 3), ("asTimeout", 4), ("tgsAuthenticating", 5), ("tgsAuthenticated", 6), ("tgsFailed", 7), ("tgsTimeout", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserAuthState.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserAuthState.setDescription('Current state of the Kerberos User authentication.')
alaDaKerberosUserPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserPolicy.setDescription('Classification Policy applied for the user.')
alaDaKerberosUserLeftTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserLeftTime.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserLeftTime.setDescription('Inactivity Timer left value for the Kerberos users in seconds.')
alaDaKerberosUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosUserState.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUserState.setDescription('Current state of the Kerberos User.')
alaDaKerberosPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4), )
if mibBuilder.loadTexts: alaDaKerberosPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortStatsTable.setDescription('This table contains the statistics for kerberos on per port basis.')
alaDaKerberosPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaKerberosStatsIfIndex"))
if mibBuilder.loadTexts: alaDaKerberosPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortStatsEntry.setDescription('Kerberos statistics table entry.')
alaDaKerberosStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDaKerberosStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosStatsIfIndex.setDescription('The ifindex of the port on which Kerberos Snooping is running.')
alaDaKerberosPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaKerberosPortClearStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortClearStats.setDescription('When this object is set to reset(1), all statistics parameters\n         corresponding to this port gets cleared (reset).')
alaDaKerberosPortClientPktRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortClientPktRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortClientPktRxStats.setDescription('Number of packets received by software on a port, destined to the kerberos server.')
alaDaKerberosPortServerPktRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortServerPktRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortServerPktRxStats.setDescription('Number of packets from kerberos server received by software on a port.')
alaDaKerberosPortClientPktSwDiscardStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortClientPktSwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortClientPktSwDiscardStats.setDescription('Number of packets discarded by software on a port, destined to the kerberos server.')
alaDaKerberosPortServerPktSwDiscardStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortServerPktSwDiscardStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortServerPktSwDiscardStats.setDescription('Number of packets from kerberos server discarded by software on a port.')
alaDaKerberosPortASREQRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortASREQRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortASREQRxStats.setDescription('Number of AS-REQ packets received on a port.')
alaDaKerberosPortASREPRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortASREPRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortASREPRxStats.setDescription('Number of AS-REP packets received on a port.')
alaDaKerberosPortTGSREQRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortTGSREQRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortTGSREQRxStats.setDescription('Number of TGS-REQ packets received on a port.')
alaDaKerberosPortTGSREPRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortTGSREPRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortTGSREPRxStats.setDescription('Number of TGS-REP packets received on a port.')
alaDaKerberosPortErrorRxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaKerberosPortErrorRxStats.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosPortErrorRxStats.setDescription('Number of KRB-ERROR packet received on a port.')
alaDaKerberosServerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5), )
if mibBuilder.loadTexts: alaDaKerberosServerTable.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosServerTable.setDescription('This table configures the kerberos server ip address.')
alaDaKerberosServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaKerberosIpAddressType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaKerberosIpAddress"))
if mibBuilder.loadTexts: alaDaKerberosServerEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosServerEntry.setDescription('Kerberos server table entry.')
alaDaKerberosIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDaKerberosIpAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosIpAddressType.setDescription('The ip-address type of the Kerberos server.')
alaDaKerberosIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDaKerberosIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosIpAddress.setDescription('The ip-address of the Kerberos server.')
alaDaKerberosUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(88)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaKerberosUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosUdpPort.setDescription('The UDP port number for Kerberos server host.')
alaDaKerberosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 53, 5, 1, 4), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaKerberosRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosRowStatus.setDescription('The status of this table entry.')
alaDaUNPPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 54), )
if mibBuilder.loadTexts: alaDaUNPPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortVlanTable.setDescription('This table contains a list of untagged VLANs configured for an UNP Port/Linkagg')
alaDaUNPPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 54, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortIfIndex"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortVlanVID"))
if mibBuilder.loadTexts: alaDaUNPPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortVlanEntry.setDescription('Each of these entries represents an untagged Vlan Port association')
alaDaUNPPortVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 54, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPPortVlanVID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortVlanVID.setDescription('Untagged VLAN for an UNP Port/Linkagg.')
alaDaUNPPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 54, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortVlanRowStatus.setDescription('On create, the specified UNP Port/Linkagg must exist in alaDaUNPPortTable,\n      otherwise an entry creation in this table would not be allowed. Deletion of an UNP Port/Linkagg entry in \n      alaDaUNPPortTable would result in deletion of all entries for that Port/Linkagg in the\n      alaDaUNPPortVlanEntry')
alaDaUNPVlanRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55), )
if mibBuilder.loadTexts: alaDaUNPVlanRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleTable.setDescription('Vlan Tag classification table .')
alaDaUNPVlanRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPVlanRuleVlanTag"))
if mibBuilder.loadTexts: alaDaUNPVlanRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleEntry.setDescription(' VlanTag  based  classification rule .')
alaDaUNPVlanRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPVlanRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleVlanTag.setDescription('The vlan tag to be used for classification of tagged pkts. The range states \n          the valid Vlan range in the system.')
alaDaUNPVlanRuleVlanTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outerTag", 1), ("innerTag", 2))).clone('outerTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanRuleVlanTagPosition.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleVlanTagPosition.setDescription('This object specifies the tag position to which this Vlan Tag rule should be applied in the case of double tagged frames.')
alaDaUNPVlanRuleEdgeProf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanRuleEdgeProf.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleEdgeProf.setDescription('The edge profile name in the User Network Profile Table to be\n  applied.')
alaDaUNPVlanRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 55, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPVlanRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanRuleRowStatus.setDescription('The Row status of this table entry.')
alaDaUNPETmplVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 56), )
if mibBuilder.loadTexts: alaDaUNPETmplVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplVlanTable.setDescription('This table contains a list of untagged VLANs configured for an UNP Edge Template.')
alaDaUNPETmplVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 56, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPETmplName"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPETmplVlanVID"))
if mibBuilder.loadTexts: alaDaUNPETmplVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplVlanEntry.setDescription('Each of these entries represents an untagged Vlan Edge Template association.')
alaDaUNPETmplVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 56, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPETmplVlanVID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplVlanVID.setDescription('Untagged VLAN for an UNP Edge Template.')
alaDaUNPETmplVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 56, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPETmplVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplVlanRowStatus.setDescription('On create, the specified UNP Edge Template must exist in alaDaUNPETmplTable,\n      otherwise an entry creation in this table would not be allowed. Deletion of an Edge Template entry in \n      alaDaUNPETmplTable would result in deletion of all entries for that Edge Template in the\n      alaDaUNPETmplVlanTable.')
alaDaUNPUserFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57), )
if mibBuilder.loadTexts: alaDaUNPUserFlushTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushTable.setDescription('Table to flush the UNP users based on some criteria \n         such as MAC Address, Authentication Type and Port or SAP/Service.')
alaDaUNPUserFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushIndex"))
if mibBuilder.loadTexts: alaDaUNPUserFlushEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushEntry.setDescription('One entry to flush users on the basis of user criteria.')
alaDaUNPUserFlushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaDaUNPUserFlushIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushIndex.setDescription('Flush index.')
alaDaUNPUserFlushComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("all", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushComplete.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushComplete.setDescription('Flush all users learnt on all access type ports.')
alaDaUNPUserFlushAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuth", 1), ("onex", 2), ("mac", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushAuthType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushAuthType.setDescription('Flush based on the authentication type of the user.')
alaDaUNPUserFlushMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 4), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushMacAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushMacAddress.setDescription('Flush based on a single MAC address.')
alaDaUNPUserFlushProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushProfile.setDescription('Flush the users learnt on the given Profile.')
alaDaUNPUserFlushPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 6), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushPortStart.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushPortStart.setDescription('Start of the Port-Range on which the users learnt need to be flushed.')
alaDaUNPUserFlushPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 7), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushPortEnd.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushPortEnd.setDescription('End of the Port-Range on which the users learnt need to be flushed.')
alaDaUNPUserFlushSapIDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 8), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushSapIDIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushSapIDIfIndex.setDescription('Flush the users learnt on the given SAP-ID Interface Index.')
alaDaUNPUserFlushSapIDEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 9), TmnxEncapVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushSapIDEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushSapIDEncapVal.setDescription('Flush the users learnt on the given SAP-ID Encapsulation.')
alaDaUNPUserFlushServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 57, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDaUNPUserFlushServiceID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushServiceID.setDescription('Flush the users learnt of the given service.')
alaDaUNPCustDomainRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58), )
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleTable.setDescription('Based on customer domain id , Profile Classification table.')
alaDaUNPCustDomainRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleId"))
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleEntry.setDescription('Customer Domain Rule Table Entries .')
alaDaUNPCustDomainRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleId.setDescription('CustDomain Id .')
alaDaUNPCustDomainRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPCustDomainRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile1.setDescription('Associated Profile .')
alaDaUNPCustDomainRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile2.setDescription('Associated Profile .')
alaDaUNPCustDomainRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleProfile3.setDescription('Associated Profile .')
alaDaUNPCustDomainRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 58, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPPortTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59), )
if mibBuilder.loadTexts: alaDaUNPPortTemplateTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateTable.setDescription('Unp Port Template Table.')
alaDaUNPPortTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateName"))
if mibBuilder.loadTexts: alaDaUNPPortTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateEntry.setDescription('EdgeTemplate Entries.')
alaDaUNPPortTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPPortTemplateName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateName.setDescription('The name of the Port Template.')
alaDaUNPPortTemplateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateAdminState.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateAdminState.setDescription('To enable/disable the Port Template.')
alaDaUNPPortTemplateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("in", 2), ("noVal", 3))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateDirection.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateDirection.setDescription('The current value of the administrative controlled\n          directions parameter for the Port Template.')
alaDaUNPPortTemplateDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateDomainID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateDomainID.setDescription('The Domain that this port belongs to.  Default is on domain 0.')
alaDaUNPPortTemplateClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateClassification.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateClassification.setDescription('To enable/disable Classification on the Port Template.')
alaDaUNPPortTemplateTrustTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateTrustTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateTrustTag.setDescription('To enable/disable Truth Tag on the Port Template.')
alaDaUNPPortTemplateDynamicService = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("spb", 2), ("vxlan", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateDynamicService.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateDynamicService.setDescription('Indicates the type of dynamic service for the port-template. \n\tDynamic Service type SPB/VXLAN are applicable for Access type UNP port.')
alaDaUNPPortTemplateDefaultProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateDefaultProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateDefaultProfile.setDescription('The default profile for the Port Template.')
alaDaUNPPortTemplateAAAProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateAAAProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateAAAProfile.setDescription('The AAA profile for the Port Template.')
alaDaUNPPortTemplateRedirectPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateRedirectPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateRedirectPortBounce.setDescription('To enable/disable Redirect Port bounce on the Port Template.')
alaDaUNPPortTemplate8021XAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuth.setDescription('To enable/disable 802.1x authentication on the Port Template.')
alaDaUNPPortTemplate8021XAuthPassAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthPassAlternate.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthPassAlternate.setDescription('The Pass-Alternate profile for 802.1X authentication on the Port Template.')
alaDaUNPPortTemplate8021XAuthBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthBypass.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthBypass.setDescription('To enable/disable 802.1x authentication bypass on the Port Template.')
alaDaUNPPortTemplate8021XAuthFailPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("mac", 2))).clone('mac')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthFailPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthFailPolicy.setDescription('802.1x authentication failure policy for the Port Template.')
alaDaUNPPortTemplate8021XAuthTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthTxPeriod.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthTxPeriod.setDescription('802.1x authentication Tx period.')
alaDaUNPPortTemplate8021XAuthSuppTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthSuppTimeout.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthSuppTimeout.setDescription('802.1x authentication supplicant Timeout period.')
alaDaUNPPortTemplate8021XAuthMaxReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthMaxReq.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplate8021XAuthMaxReq.setDescription('802.1x authentication Max requests.')
alaDaUNPPortTemplateMACAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuth.setDescription('To enable/disable MAC authentication on the Port Template.')
alaDaUNPPortTemplateMACAuthPassAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuthPassAlternate.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuthPassAlternate.setDescription('The Pass-Alternate profile for MAC authentication on the Port Template.')
alaDaUNPPortTemplateMACAuthAllowEAP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2), ("noAuth", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuthAllowEAP.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateMACAuthAllowEAP.setDescription('To enable/disable MAC authentication on the Port Template.')
alaDaUNPPortTemplateForceL3Learning = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateForceL3Learning.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateForceL3Learning.setDescription('UNP force L3 learning status on the UNP Port-Template.')
alaDaUNPPortTemplateForceL3LearningPortBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateForceL3LearningPortBounce.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateForceL3LearningPortBounce.setDescription('Port-Bounce associated with UNP force L3 learning status on the UNP Port-Template.')
alaDaUNPPortTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 59, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateRowStatus.setDescription('Row Status for this table.')
alaDaUNPProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60), )
if mibBuilder.loadTexts: alaDaUNPProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileTable.setDescription('This table stores the profiles created in the system.')
alaDaUNPProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPProfileName"))
if mibBuilder.loadTexts: alaDaUNPProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileEntry.setDescription('Profile entry.')
alaDaUNPProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaDaUNPProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileName.setDescription('The name of the UNP profile.')
alaDaUNPProfileAuthenticationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileAuthenticationFlag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileAuthenticationFlag.setDescription('UNP profile authentication flag.')
alaDaUNPProfileMobileTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMobileTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMobileTag.setDescription('UNP profile Mobile Tag flag.')
alaDaUNPProfileCPortalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileCPortalAuthentication.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileCPortalAuthentication.setDescription('UNP profile Captive Profile Authentication flag.')
alaDaUNPProfileRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileRedirect.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileRedirect.setDescription('UNP profile redirect flag.')
alaDaUNPProfileQoSPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileQoSPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileQoSPolicy.setDescription('The name of the QoS Policy List name that will be used if this\n        User Network Profile is applied for a given device.')
alaDaUNPProfilePeriodPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfilePeriodPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfilePeriodPolicy.setDescription('The name of the Period Policy List name that will be used if this\n        User Network Profile is applied for a given device.')
alaDaUNPProfileCPortalProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileCPortalProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileCPortalProfile.setDescription('The name of the Captive Portal Profile Policy List name that will be used if this\n        User Network Profile is applied for a given device.')
alaDaUNPProfileLocationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileLocationPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileLocationPolicy.setDescription('The name of the Location Policy name that will be used if this\n        User Network Profile is applied for a given device.')
alaDaUNPProfileSaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileSaaProfile.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileSaaProfile.setDescription('The name of the SAA profile name that will be used if this\n            User Network Profile is applied for a given device.')
alaDaUNPProfileInactivityInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(300)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileInactivityInterval.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileInactivityInterval.setDescription('Inactivity Timer value for the UNP profile users in minutes.')
alaDaUNPProfileKerberosAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileKerberosAuthentication.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileKerberosAuthentication.setDescription('UNP profile Kerberos Authentication flag.')
alaDaUNPProfileMaxIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMaxIngressBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMaxIngressBandwidth.setDescription('Maximum Ingress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n         If value is set to -1, then the Ingress Bandwidth specified for the profile is unconfigured.')
alaDaUNPProfileMaxEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setUnits('kilobits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMaxEgressBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMaxEgressBandwidth.setDescription('Maximum Egress Bandwidth (Kbits/sec or Mbits/sec) allowed for traffic associated to this profile.\n         If value is set to -1, then the Egress Bandwidth specified for the profile is unconfigured.')
alaDaUNPProfileMaxIngressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMaxIngressDepth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMaxIngressDepth.setDescription('Maximum Ingress Depth associated to Bandwidth.\n         If set to -1, then the Depth associated with the profile is unconfigured.')
alaDaUNPProfileMaxEgressDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16384), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMaxEgressDepth.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMaxEgressDepth.setDescription('Maximum Egress Depth associated to Bandwidth.\n         If set to -1, then the Depth associated with the profile is unconfigured.')
alaDaUNPProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileRowStatus.setDescription('The row status of this table entry.')
alaDaUNPProfileAFDConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 60, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("autoFabric", 2))).clone('admin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDaUNPProfileAFDConfig.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileAFDConfig.setDescription('Configuration is made by admin or auto-fabric on\t \n         this profile')
alaDaUNPProfileMapVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 61), )
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanTable.setDescription('This table stores the VLAN profiles created in the system.\n        The entries would be mapped to vlan ID which would be used\n        by device authentication for classifying users.')
alaDaUNPProfileMapVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 61, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPProfileName"))
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanEntry.setDescription('VLAN Profile entry.')
alaDaUNPProfileMapVlanVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 61, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanVlanID.setDescription('The VLAN ID for this profile.')
alaDaUNPProfileMapVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 61, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanRowStatus.setDescription('The row status of this table entry.')
alaDaUNPProfileMapSpbTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62), )
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbTable.setDescription('This table stores the Service Classification profiles created in the system.\n        The entries provides information to classify device in the Service domain.')
alaDaUNPProfileMapSpbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPProfileName"))
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbEntry.setDescription('Service Classification Profile entry')
alaDaUNPProfileMapSpbEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 1), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaUNPProfileMapSpbIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbIsid.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbIsid.setDescription('The object represent the I-SID that is to be dynamically created when \n        SPB Service ID does not exist in the system and must be \n        used along with B-VLAN.')
alaDaUNPProfileMapSpbBVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbBVlan.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbBVlan.setDescription('The Backbone VLAN ID (BVLAN) used for the I-SID specified in alaUNPProfileMapSpbIsid.\n        This object must be specified along with alaUNPProfileMapSpbIsid.')
alaDaUNPProfileMapSpbMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbMulticastMode.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbMulticastMode.setDescription('To configure the multicast replication mode for each service:\n        Head-end(1) where a non-unicast packet entering the SAP port\n        is replicated once for each receiver in the b-domain using its\n        unicast BMAC.\n        Tandem(2) where a non-unicast packet entering the SAP port is\n        replicated once at each node using the multicast group address.')
alaDaUNPProfileMapSpbVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbVlanXlation.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n        in this service if the corresponding access ports for the SAPs also\n        has the VLAN translation enabled.')
alaDaUNPProfileMapSpbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 62, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbRowStatus.setDescription('The row status of this table entry.')
alaDaUNPProfileMapVxlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63), )
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanTable.setDescription('This table stores the Service Classification profiles created in the system.\n        The entries provides information to classify device in the VXLAN Service domain.')
alaDaUNPProfileMapVxlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPProfileName"))
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanEntry.setDescription('VXLAN Service Classification Profile entry')
alaDaUNPProfileMapVxlanEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 1), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaUNPProfileMapVxlanVnid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanVnid.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanVnid.setDescription('The object represnet the VNID that is to be used to dynamically \n        create a VXLAN service.')
alaDaUNPProfileMapVxlanFarEndIPList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanFarEndIPList.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanFarEndIPList.setDescription('The name of the Far End IP List that will be used if this\n        User Network Profile is applied for a given device.')
alaDaUNPProfileMapVxlanMulticastIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastIPAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastIPAddressType.setDescription('The IP address type of the multicast group IP address.')
alaDaUNPProfileMapVxlanMulticastIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastIPAddress.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastIPAddress.setDescription('The multicast group IP address.')
alaDaUNPProfileMapVxlanVlanXlation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanVlanXlation.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanVlanXlation.setDescription('To enable/disable the vlan translation for all the SAPs configured\n        in this service if the corresponding access ports for the SAPs also\n        has the vlan translation enabled.')
alaDaUNPProfileMapVxlanMulticastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("headend", 1), ("tandem", 2), ("hybrid", 3))).clone('headend')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastMode.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanMulticastMode.setDescription('To configure the multicast replication mode for each service:\n        Head-end(1) where a non-unicast packet entering the SAP port\n        is replicated once for each receiver in the b-domain using its\n        unicast BMAC.\n        Tandem(2) where a non-unicast packet entering the SAP port is\n        replicated once at each node using the multicast group address.')
alaDaUNPProfileMapVxlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 63, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanRowStatus.setDescription('The row status of this table entry.')
alaDaUNPProfileMapStaticTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 64), )
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticTable.setDescription('This table stores the Static profiles created in the system.')
alaDaUNPProfileMapStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 64, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPProfileName"))
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticEntry.setDescription('Static Profile entry.')
alaDaUNPProfileMapStaticEncapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 64, 1, 1), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticEncapVal.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticEncapVal.setDescription('The encapsulation to be used for the SAP connecting to the service.')
alaDaUNPProfileMapStaticServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 64, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticServiceID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticServiceID.setDescription('The Service ID for this profile.')
alaDaUNPProfileMapStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 64, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticRowStatus.setDescription('The row status of this table entry.')
alaDaUNPCustDomainMacIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65), )
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleTable.setDescription('Mac Address,IP  & customer domain classification table .')
alaDaUNPCustDomainMacIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleMacAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleIpAddrType"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleIpAddr"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleDomainId"))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleEntry.setDescription(' Mac Ip & customer domain  based  classification rule entries .')
alaDaUNPCustDomainMacIpRuleMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 1), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleMacAddr.setDescription('Classification Rule mac Address.')
alaDaUNPCustDomainMacIpRuleIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpAddrType.setDescription('The IP address type .')
alaDaUNPCustDomainMacIpRuleIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpAddr.setDescription('The IP network address .')
alaDaUNPCustDomainMacIpRuleDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleDomainId.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleDomainId.setDescription('Classification Rule Group Id.')
alaDaUNPCustDomainMacIpRuleVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleVlanTag.setDescription('The VLAN Tag to be used for classification of tagged pkts.\n         VLAN Tag of 0 indicates no VLAN is associated. The VLAN Tag is of the\n         Q-in-Q VLAN Tag format, where the value of the outer 802.1Q VLAN ID is\n         encoded in the least significant 16 bits, and the value of the inner\n         VLAN ID is encoded in the most significant 16 bits.')
alaDaUNPCustDomainMacIpRuleProfile1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile1.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile1.setDescription('The  profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainMacIpRuleProfile2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile2.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile2.setDescription('The  profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainMacIpRuleProfile3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile3.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleProfile3.setDescription('The  profile name in the User Network Profile Table to be\n        applied.')
alaDaUNPCustDomainMacIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleRowStatus.setDescription('The status of this table entry.')
alaDaUNPCustDomainMacIpRuleIpMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 10), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpMaskType.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpMaskType.setDescription('The IP mask type. This object is mandatory.')
alaDaUNPCustDomainMacIpRuleIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 65, 1, 11), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpMask.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleIpMask.setDescription('The IP network mask applying to the IP network address.\n         This object is mandatory.')
alaDaUNPPortTemplateVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 66), )
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanTable.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanTable.setDescription('This table contains a list of untagged VLANs configured for an UNP Port Template.')
alaDaUNPPortTemplateVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 66, 1), ).setIndexNames((0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateName"), (0, "ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateVlanVID"))
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanEntry.setDescription('Each of these entries represents an untagged Vlan Port Template association.')
alaDaUNPPortTemplateVlanVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 66, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanVID.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanVID.setDescription('Untagged VLAN for an UNP Port Template.')
alaDaUNPPortTemplateVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 1, 66, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanRowStatus.setDescription('On create, the specified UNP Port Template must exist in alaDaUNPPortTemplateTable,\n      otherwise an entry creation in this table would not be allowed. Deletion of an Port Template entry in \n      alaDaUNPPortTemplateTable would result in deletion of all entries for that Port Template in the\n      alaDaUNPPortTmplVlanTable.')
alaIND1DaMIBCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGlobalGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaNotificationObjectGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaNotificationsGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaHICGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeTemplateGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassificationRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGroupIdEdgeClassifyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPointGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortClassifyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortClassifyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpClassifyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacClassifyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpAddressGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRestrictedRoleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanMappingGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacAddrsRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangesGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedServerGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortVlanGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplVlanGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVlanGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapStaticGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleGroup"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1DaMIBCompliances = alaIND1DaMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaIND1DaMIBCompliances.setDescription('Compliance statement for Alcatel DA module.')
alaDaUserNetProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileVlanID"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileQosPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileSaaProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMobileTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMaxIngressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMaxEgressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMaxIngressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUserNetProfileMaxEgressDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUserNetProfileGroup = alaDaUserNetProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUserNetProfileGroup.setDescription('Collection of DA objects for UNP Table')
alaDaUNPIpNetRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpNetRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPIpNetRuleGroup = alaDaUNPIpNetRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpNetRuleGroup.setDescription('Collection of DA objects for system level UNP Ip rule')
alaDaUNPMacRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacRuleGroup = alaDaUNPMacRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacRuleGroup.setDescription('Collection of DA objects for system level UNP Mac Rule')
alaDaUNPMacRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleHiAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacRangeGroup = alaDaUNPMacRangeGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacRangeGroup.setDescription('Collection of DA objects for system level UNP Mac Range Rule')
alaDaUNPVlanTagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanTagRuleMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVlanTagGroup = alaDaUNPVlanTagGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanTagGroup.setDescription('Collection of DA objects for system level Vlan Tag Rule')
alaDaMacUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaMacUserVlanID"), ("ALCATEL-IND1-DA-MIB", "alaDaAuthenticationStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserUnpUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserLoginTimeStamp"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserAuthtype"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserClassificationSource"), ("ALCATEL-IND1-DA-MIB", "alaDaMacUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaMacUserGroup = alaDaMacUserGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaMacUserGroup.setDescription('Collection of DA objects for UNP Mac User')
alaDaUNPPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPassAltProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMacAuthFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortClassificationFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTrustTagStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMCLagConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPPortGroup = alaDaUNPPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortGroup.setDescription('Collection of DA UNP Ports')
alaDaUNPGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicVlanConfigFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownUnp"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownTimeout"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicVlanMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownUNPMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownTimeoutMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicProfileConfigFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPDynamicProfileConfigMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPReloadVsiTypeDB"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthSrvDownEdgeProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDowneEdgeProfTimeout"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeUserFlush"), ("ALCATEL-IND1-DA-MIB", "alaDaUNP8021XEdgeUserFlush"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacEdgeUserFlush"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPNoAuthEdgeUserFlush"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectPauseTimer"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectProxyServerPort"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectServerIPType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectServerIP"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthSrvDownVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthSrvDownVxlanProfileTimeout"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPForceL3Learning"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPForceL3LearningPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthServerDownProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanUserFlush"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGlobalGroup = alaDaUNPGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPGlobalGroup.setDescription('Collection of DA objects for Global parameters')
alaDaNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpSourceIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpNativeVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMCLAGId"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCommandType"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpName"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr1"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpMacAddr2"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosRateLimitString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaNotificationObjectGroup = alaDaNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaNotificationObjectGroup.setDescription('Collection of DA objects for Notifications')
alaDaNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-DA-MIB", "unpMcLagMacIgnored"), ("ALCATEL-IND1-DA-MIB", "unpMcLagConfigInconsistency"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosReqTimeoutTrap"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosInactivityTimerExpiryTrap"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosRateLimitExceed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaNotificationsGroup = alaDaNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaNotificationsGroup.setDescription('Collection of Notifications for management of DA.')
alaDaMacVlanUserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIpAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserUnpUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserLoginTimeStamp"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthtype"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserClassificationSource"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserMCLagLearningLoc"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserName"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserRole"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserRoleSource"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthFailReason"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthRetryCount"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserClassifProfRule"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserRoleRule"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserRestAccessStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserLocPolicyStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserTimePolicyStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserCapPortalStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserQMRStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthServerIpType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthServerIpUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserAuthServerUsed"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserServerMessage"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserRedirectionUrl"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserSIPCallType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserSIPMediaType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserUnpFromAuthServer"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserType"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserServiceID"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserServiceSapIDIfIndex"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserServiceSapIDEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserVxlanVnid"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserSpbIsid"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserSpbBVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserKerberosStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaMacVlanUserGroup = alaDaMacVlanUserGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserGroup.setDescription('Collection of DA objects for UNP Mac User')
alaDaUnpCustomerDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainDesc"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpCustomerDomainRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUnpCustomerDomainGroup = alaDaUnpCustomerDomainGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUnpCustomerDomainGroup.setDescription('Collection of DA objects for UNP Group')
alaDaSpbProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileQosPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileIsid"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileBVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileMulticastMode"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileSapVlanXlation"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileMobileTag"), ("ALCATEL-IND1-DA-MIB", "alaDaSpbProfileAFDConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaSpbProfileGroup = alaDaSpbProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaSpbProfileGroup.setDescription('Collection of DA objects for Service Classification Profile.')
alaDaUNPCustDomainEvbGpIdRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleVlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainEvbGpIdRuleGroup = alaDaUNPCustDomainEvbGpIdRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainEvbGpIdRuleGroup.setDescription('Collection of DA objects for system level EVB Group ID Rule.')
alaDaUNPCustDomainVlanTagRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleVlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleTagPosition"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainVlanTagRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainVlanTagRuleGroup = alaDaUNPCustDomainVlanTagRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainVlanTagRuleGroup.setDescription('Collection of DA objects for system level Vlan Tag Rule')
alaDaUNPCustDomainIpNetRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainIpNetRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainIpNetRuleGroup = alaDaUNPCustDomainIpNetRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainIpNetRuleGroup.setDescription('Collection of DA objects for system level UNP Ip rule')
alaDaUNPCustDomainMacRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleEdgeProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainMacRuleGroup = alaDaUNPCustDomainMacRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRuleGroup.setDescription('Collection of DA objects for system level UNP Mac Rule')
alaDaUNPCustDomainMacRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleHiAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleEdgeProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacRangeRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainMacRangeGroup = alaDaUNPCustDomainMacRangeGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacRangeGroup.setDescription('Collection of DA objects for system level UNP Mac Range Rule')
alaDaUNPGroupObjects = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 19)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortCustomerDomainId"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPassAltSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultSpbProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultEdgeProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMacPassEdgeProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XEdgeProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XTxPeriodStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XTxPeriod"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XSuppTimeoutStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XSuppTimeOut"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XMaxReqStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XMaxReq"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortGroupId"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortAaaProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortEdgeTemplate"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRedirectPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XFailurePolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XBypassStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMacAllowEap"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortAdminControlledDirections"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortAdminControlledOperDirections"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XPassAltUserNetProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XPassAltSpbProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XPassAltVxlanProfName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPassAltVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDefaultVxlanProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortAFDConfig"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxIngressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxIngressBwSource"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxEgressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxEgressBwSource"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxIngressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortMaxEgressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortIngressSourceProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortEgressSourceProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortForceL3Learning"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortForceL3LearningPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPort8021XPassAltProfileName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPortTemplateName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDomainID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortAdminState"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortDynamicService"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortPVlanPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGroupObjects = alaDaUNPGroupObjects.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPGroupObjects.setDescription('Collection of DA objects created to keep SNMP4J compiler happy.')
alaDaSaaProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 20)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileLatencyThreshold"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileJitterThreshold"), ("ALCATEL-IND1-DA-MIB", "alaDaSaaProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaSaaProfileGroup = alaDaSaaProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaSaaProfileGroup.setDescription('Collection of DA objects for SAA Profile.')
alaDaCPortalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 21)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaCPortalRedirectUrlName"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalIpAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalMode"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalSuccRedirectUrl"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProxyPort"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalRetryCnt"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthRealm"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthUNPProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalAuthUNPProfileChange"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfMode"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfSuccRedirectUrl"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfRetryCnt"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfAuthPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfAaaProf"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainAuthPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainAuthRealm"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalCustomization"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfUNPProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfUNPProfileChange"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalUNPProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalUNPProfileChange"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainUNPProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaCPortalProfDomainUNPProfileChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaCPortalGroup = alaDaCPortalGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaCPortalGroup.setDescription('Collection of Captive Portal  objects .')
alaDaHICGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 22)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaHICStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaHICWebAgentDownloadUrl"), ("ALCATEL-IND1-DA-MIB", "alaDaHICCustomHttpProxyPort"), ("ALCATEL-IND1-DA-MIB", "alaDaHICBgPollInterval"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrFailMode"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrIpAddrType"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrPort"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrKey"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrRole"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrConnection"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaHICAllowedIpAddrType"), ("ALCATEL-IND1-DA-MIB", "alaDaHICAllowedIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaHICAllowedIpMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaHICAllowedIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaHICAllowedRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrFailChangedPolicyName"), ("ALCATEL-IND1-DA-MIB", "alaDaHICSvrFailRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaHICHostStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaHICGroup = alaDaHICGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaHICGroup.setDescription('Collection of HIC  objects .')
alaDaUNPEdgeTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 23)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XTxPeriodStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XTxPeriod"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XSuppTimeoutStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XSuppTimeOut"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XMaxReqStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XMaxReq"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmpl8021XPassAltEProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplMacAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplMacPassAltEProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplClassifStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplDefEProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplGroupId"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplAaaProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplRedirectPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplFailurePolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplBypassStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplMacAllowEap"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplAdminControlledDirections"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplTrustTagStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplForceL3Learning"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplForceL3LearningPortBounce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPEdgeTemplateGroup = alaDaUNPEdgeTemplateGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeTemplateGroup.setDescription('Collection of UNP Edge Template Objects.')
alaDaUNPEdgeProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 24)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfQosPolicyList"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfLocationPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfPeriodPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfHICStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfCPortalAuth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfAuthStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfMobileTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfDHCPEnforcment"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfCPortalProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfRedirectStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfKerberosStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfMaxIngressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfMaxEgressBw"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfMaxIngressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeProfMaxEgressDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPEdgeProfileGroup = alaDaUNPEdgeProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPEdgeProfileGroup.setDescription('Collection of UNP Edge Profile Table Objects.')
alaDaUNPClassificationRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 25)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPClassificationRuleGroup = alaDaUNPClassificationRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPClassificationRuleGroup.setDescription('Collection of UNP Classification Rule Port Objects.')
alaDaUNPGroupIdEdgeClassifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 26)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPGroupRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGroupRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPGroupRuleVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGroupIdEdgeClassifyGroup = alaDaUNPGroupIdEdgeClassifyGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroupIdEdgeClassifyGroup.setDescription('Collection of UNP Classification Rule Port Objects.')
alaDaUNPMacOuiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 27)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacOuiRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacOuiGroup = alaDaUNPMacOuiGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacOuiGroup.setDescription('Collection of UNP MAC Oui Objects.')
alaDaUNPEndPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 28)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEndPoinVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPEndPointGroup = alaDaUNPEndPointGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEndPointGroup.setDescription('Collection of UNP MAC Oui Objects.')
alaDaUNPAuthRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 29)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPAuthRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPAuthRuleGroup = alaDaUNPAuthRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPAuthRuleGroup.setDescription('Collection of UNP Authentication Rule Objects.')
alaDaUNPRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 30)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRulePrecedenceNum"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRulePort"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRulePortHigh"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleGroupId"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleMacRngLoaddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleMacRngHiaddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleMacOuiAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleEndPoin"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleAuthType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleIpAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleIpAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleIpMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleCustomerDomain"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPClassifRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPRuleGroup = alaDaUNPRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRuleGroup.setDescription('Collection of UNP Rule Objects.')
alaDaUNPMacPortClassifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 31)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacPortRuleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacPortClassifyGroup = alaDaUNPMacPortClassifyGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacPortClassifyGroup.setDescription('Collection of Objects for Mac & Port  based  classification rule.')
alaDaUNPIpPortClassifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 32)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpPortRuleMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPIpPortClassifyGroup = alaDaUNPIpPortClassifyGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPIpPortClassifyGroup.setDescription('Collection of Objects for Ip & port  based  classification rule.')
alaDaUNPMacIpClassifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 33)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleIpMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpPortRuleIpMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacIpClassifyGroup = alaDaUNPMacIpClassifyGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPMacIpClassifyGroup.setDescription('Collection of Objects for Mac, Ip & port  based  classification rule.')
alaDaUNPMacClassifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 34)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacGroupRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacGroupRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacGroupRuleVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacClassifyGroup = alaDaUNPMacClassifyGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacClassifyGroup.setDescription('Collection of Objects for Mac Address and Group classification.')
alaDaUNPIpAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 35)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpGroupRuleVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPIpAddressGroup = alaDaUNPIpAddressGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpAddressGroup.setDescription('Collection of Objects for IP and Group Classification.')
alaDaUNPMacIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 36)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacIpGroupRuleVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacIpGroup = alaDaUNPMacIpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacIpGroup.setDescription('Collection of objects for UNP MAC, IP and Group Classification.')
alaDaUNPUserRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 37)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRolePrecedenceNum"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRolePolicyList"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleEdgeProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleAuthType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRolePostLoginStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleKerberosPostLoginStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserRoleProfile3"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPUserRoleGroup = alaDaUNPUserRoleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserRoleGroup.setDescription('Collection of UNP User Role Objects.')
alaDaUNPRestrictedRoleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 38)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPRstrctedRolePolicyList"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRstrctedRoleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPRestrictedRoleGroup = alaDaUNPRestrictedRoleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRestrictedRoleGroup.setDescription('Collection of UNP Restricted Role Objects.')
alaDaUNPVlanMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 39)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanMapIdent"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVlanMappingGroup = alaDaUNPVlanMappingGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVlanMappingGroup.setDescription('Collection of UNP Vlan Mapping Objects.')
alaDaUNPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 40)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUnpGroupDescription"), ("ALCATEL-IND1-DA-MIB", "alaDaUnpGroupIdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPGroup = alaDaUNPGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPGroup.setDescription('Collection of Objects for UNP Group Creation and Deletion.')
alaDaUNPEdgeFlushGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 41)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushPortLow"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushPortHigh"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgrFlushMac"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushComplete"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPEdgeFlushProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPEdgeFlushGroup = alaDaUNPEdgeFlushGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPEdgeFlushGroup.setDescription('Collection of UNP Port Edge Flush Objects.')
alaDaUNPMacAddrsRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 42)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRulesEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRulesRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRulesVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacAddrsRuleGroup = alaDaUNPMacAddrsRuleGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacAddrsRuleGroup.setDescription('Collection of UNP MAC Edge Flush Objects.')
alaDaUNPMacRangesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 43)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeEndMacAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPMacRangeVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPMacRangesGroup = alaDaUNPMacRangesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPMacRangesGroup.setDescription('Collection of UNP MAC Edge Flush Objects.')
alaDaUNPIpMaskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 44)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPIpMaskRuleVlanTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPIpMaskGroup = alaDaUNPIpMaskGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPIpMaskGroup.setDescription('Collection of UNP MAC Edge Flush Objects.')
alaDaQMRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 45)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaQMRPage"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRPath"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRCustomHttpProxyPort"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRPolicyList"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedIpAddrType"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedIpAddr"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedIpMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedIpMask"), ("ALCATEL-IND1-DA-MIB", "alaDaQMRAllowedRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaQMRGroup = alaDaQMRGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaQMRGroup.setDescription('Collection of QMR objects .')
alaDaUNPValidityPeriodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 46)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodDays"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodDaysStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodMonths"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodMonthsStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodHour"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodHourStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodEndHour"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodInterval"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodIntervalStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodEndInterval"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodTimezone"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodTimezoneStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodActiveStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPValidityPeriodRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPValidityPeriodGroup = alaDaUNPValidityPeriodGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPValidityPeriodGroup.setDescription('Collection of UNP Validity Period Objects.')
alaDaUNPLocationPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 47)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyPort"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyPortHigh"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyPortStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicySystemName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicySystemLocation"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPLocationPolicyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPLocationPolicyGroup = alaDaUNPLocationPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPLocationPolicyGroup.setDescription('Collection of UNP Location Policy Objects.')
alaDaUNPRedirectAllowedServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 48)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedServerIPType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedServerIP"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedMaskIPType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedMaskIP"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPRedirectAllowedRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPRedirectAllowedServerGroup = alaDaUNPRedirectAllowedServerGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPRedirectAllowedServerGroup.setDescription('Collection of UNP Redirect Allowed Server Objects.')
alaDaMacVlanUserExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 49)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaMacVlanUserExtAppName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaMacVlanUserExtGroup = alaDaMacVlanUserExtGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaMacVlanUserExtGroup.setDescription('Collection of Mac Vlan User Extended Objects.')
alaDaUNPVxlanProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 50)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileVnid"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileQosPolicyListName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileFarEndIPListName"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileMulticastIPAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileMulticastIPAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileSapVlanXlation"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileMobileTagStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileMulticastMode"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVxlanProfileGroup = alaDaUNPVxlanProfileGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanProfileGroup.setDescription('Collection of DA objects for VXLAN Service Classification Profile.')
alaDaUNPVxlanFlushGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 51)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushComplete"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushAuthType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushMacAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushSapIDIfIndex"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushSapIDEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushServiceID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFlushVxlanProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVxlanFlushGroup = alaDaUNPVxlanFlushGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPVxlanFlushGroup.setDescription('Collection of DA objects for VXLAN Users Flush Table.')
alaDaUNPVxlanFarEndIPListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 52)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPListIPAddressCount"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPListRemove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVxlanFarEndIPListGroup = alaDaUNPVxlanFarEndIPListGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPListGroup.setDescription('Collection of DA objects for VXLAN Far-End-IP Lists Table.')
alaDaUNPVxlanFarEndIPAddressListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 53)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVxlanFarEndIPAddressListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVxlanFarEndIPAddressListGroup = alaDaUNPVxlanFarEndIPAddressListGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVxlanFarEndIPAddressListGroup.setDescription('Collection of DA objects for VXLAN Far-End-IP Lists Table.')
alaDaUNPSpbFlushGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 54)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushComplete"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushAuthType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushMacAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushSapIDIfIndex"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushSapIDEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushServiceID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPSpbFlushSpbProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPSpbFlushGroup = alaDaUNPSpbFlushGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaDaUNPSpbFlushGroup.setDescription('Collection of DA objects for SPB Users Flush Table.')
alaDaKerberosGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 55)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalMacMoveStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalInactivityTimer"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalPolicyStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosClientPktHwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosServerPktHwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalClientPktRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalServerPktRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosClientPktSwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosServerPktSwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalASREQRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalASREPRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalTGSREQRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalTGSREPRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosTotalErrorRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalClearStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalClearPortStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosGlobalServerTimeoutTimer"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPolicyName"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPolicyStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPolicyRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserPort"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserName"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserDomain"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserAuthState"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserLeftTime"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUserState"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortClearStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortClientPktRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortServerPktRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortClientPktSwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortServerPktSwDiscardStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortASREQRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortASREPRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortTGSREQRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortTGSREPRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosPortErrorRxStats"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosUdpPort"), ("ALCATEL-IND1-DA-MIB", "alaDaKerberosRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaKerberosGroup = alaDaKerberosGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaKerberosGroup.setDescription('Collection of objects for the management of Kerberos Global configuration.')
alaDaUNPVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 56)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanRuleVlanTagPosition"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanRuleEdgeProf"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPVlanRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPVlanGroup = alaDaUNPVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPVlanGroup.setDescription('Collection of UNP VlanTag ClassificationRule Objects.')
alaDaUNPPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 57)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPPortVlanGroup = alaDaUNPPortVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortVlanGroup.setDescription('Collection of objects for the management of \n        UNP static Port-Vlan configuration.')
alaDaUNPETmplVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 58)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPETmplVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPETmplVlanGroup = alaDaUNPETmplVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPETmplVlanGroup.setDescription('Collection of objects for the management of\n            UNP Edge Template configuration.')
alaDaUNPUserFlushGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 59)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushComplete"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushAuthType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushMacAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushPortStart"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushPortEnd"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushSapIDIfIndex"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushSapIDEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPUserFlushServiceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPUserFlushGroup = alaDaUNPUserFlushGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPUserFlushGroup.setDescription('Collection of DA objects for Access Users Flush Table.')
alaDaUNPCustDomainRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 60)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainRuleRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainRuleGroup = alaDaUNPCustDomainRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainRuleGroup.setDescription('Collection of DA objects for Customer Domain Rule Table.')
alaDaUNPPortTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 61)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateAdminState"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateDirection"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateDomainID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateClassification"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateTrustTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateDynamicService"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateDefaultProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateAAAProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateRedirectPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthPassAlternate"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthBypass"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthFailPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthTxPeriod"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthSuppTimeout"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplate8021XAuthMaxReq"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateMACAuth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateMACAuthPassAlternate"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateMACAuthAllowEAP"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateForceL3Learning"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateForceL3LearningPortBounce"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPPortTemplateGroup = alaDaUNPPortTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateGroup.setDescription('Collection of objects for the management of \n         UNP Template configuration.')
alaDaUNPProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 62)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileAuthenticationFlag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMobileTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileCPortalAuthentication"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileRedirect"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileQoSPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfilePeriodPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileCPortalProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileLocationPolicy"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileSaaProfile"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileInactivityInterval"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileKerberosAuthentication"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMaxIngressBandwidth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMaxEgressBandwidth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMaxIngressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMaxEgressDepth"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileAFDConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPProfileGroup = alaDaUNPProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileGroup.setDescription('Collection of DA objects for UNP Profile.')
alaDaUNPProfileMapVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 63)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVlanVlanID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPProfileMapVlanGroup = alaDaUNPProfileMapVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVlanGroup.setDescription('Collection of DA objects for VLAN Classification Profile.')
alaDaUNPProfileMapSpbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 64)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbIsid"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbBVlan"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbMulticastMode"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbVlanXlation"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapSpbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPProfileMapSpbGroup = alaDaUNPProfileMapSpbGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapSpbGroup.setDescription('Collection of DA objects for VLAN Service Classification Profile.')
alaDaUNPProfileMapVxlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 65)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanVnid"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanFarEndIPList"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanMulticastIPAddressType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanMulticastIPAddress"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanVlanXlation"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanMulticastMode"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapVxlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPProfileMapVxlanGroup = alaDaUNPProfileMapVxlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapVxlanGroup.setDescription('Collection of DA objects for VXLAN Service Classification Profile.')
alaDaUNPProfileMapStaticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 66)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapStaticEncapVal"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapStaticServiceID"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPProfileMapStaticRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPProfileMapStaticGroup = alaDaUNPProfileMapStaticGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPProfileMapStaticGroup.setDescription('Collection of DA objects for Static Classification Profile.')
alaDaUNPCustDomainMacIpRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 67)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleVlanTag"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleProfile1"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleProfile2"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleProfile3"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleRowStatus"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleIpMaskType"), ("ALCATEL-IND1-DA-MIB", "alaDaUNPCustDomainMacIpRuleIpMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPCustDomainMacIpRuleGroup = alaDaUNPCustDomainMacIpRuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPCustDomainMacIpRuleGroup.setDescription('Collection of DA objects for system level\n             UNP Mac, Ip and Domain Id rule')
alaDaUNPPortTemplateVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 63, 1, 2, 1, 68)).setObjects(("ALCATEL-IND1-DA-MIB", "alaDaUNPPortTemplateVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDaUNPPortTemplateVlanGroup = alaDaUNPPortTemplateVlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaDaUNPPortTemplateVlanGroup.setDescription('Collection of objects for the management of\n         UNP Port Template configuration.')
mibBuilder.exportSymbols("ALCATEL-IND1-DA-MIB", alaDaUNPUserFlushIndex=alaDaUNPUserFlushIndex, alaDaUNPMacIpGroupRuleEntry=alaDaUNPMacIpGroupRuleEntry, alaDaUNPPortRuleNum=alaDaUNPPortRuleNum, alaDaUNPMacClassifyGroup=alaDaUNPMacClassifyGroup, alaDaUNPSpbFlushGroup=alaDaUNPSpbFlushGroup, alaDaHICSvrFailPolicyName=alaDaHICSvrFailPolicyName, alaDaKerberosTotalTGSREQRxStats=alaDaKerberosTotalTGSREQRxStats, alaDaMacVlanUserRedirectionUrl=alaDaMacVlanUserRedirectionUrl, alaDaUNPMacIpPortRuleProfile2=alaDaUNPMacIpPortRuleProfile2, alaDaUNPAuthRuleVlanTag=alaDaUNPAuthRuleVlanTag, alaDaUNPMacGroupRuleAddr=alaDaUNPMacGroupRuleAddr, alaDaUNPProfileMapSpbMulticastMode=alaDaUNPProfileMapSpbMulticastMode, alaDaUNPVxlanFlushSapIDIfIndex=alaDaUNPVxlanFlushSapIDIfIndex, alaDaUNPProfilePeriodPolicy=alaDaUNPProfilePeriodPolicy, alaDaUNPProfileMapStaticRowStatus=alaDaUNPProfileMapStaticRowStatus, alaDaUNPETmplAaaProf=alaDaUNPETmplAaaProf, alaDaQMRGroup=alaDaQMRGroup, alaDaUNPMacRangeRuleProfileName=alaDaUNPMacRangeRuleProfileName, alaDaUNPAuthServerDownTimeout=alaDaUNPAuthServerDownTimeout, alaDaUNPPortTemplateAAAProfile=alaDaUNPPortTemplateAAAProfile, alaDaUNPProfileGroup=alaDaUNPProfileGroup, alaDaUNPMacPortRuleEdgeProf=alaDaUNPMacPortRuleEdgeProf, alaDaUNPPortTemplateDynamicService=alaDaUNPPortTemplateDynamicService, alaDaUNPMacIpClassifyGroup=alaDaUNPMacIpClassifyGroup, alaDaUNPEdgeProfMaxEgressDepth=alaDaUNPEdgeProfMaxEgressDepth, alaDaUNPPortVlanGroup=alaDaUNPPortVlanGroup, alaDaUNPIpNetRuleVlanTag=alaDaUNPIpNetRuleVlanTag, alaDaKerberosUserName=alaDaKerberosUserName, alaDaKerberosTotalASREQRxStats=alaDaKerberosTotalASREQRxStats, alaDaUNPMacIpGroupRuleId=alaDaUNPMacIpGroupRuleId, alaDaUNPClassifRuleMacRngHiaddr=alaDaUNPClassifRuleMacRngHiaddr, alaDaUNPPortDynamicService=alaDaUNPPortDynamicService, alaDaUserNetProfileEntry=alaDaUserNetProfileEntry, alaDaSpbProfileMobileTag=alaDaSpbProfileMobileTag, alaDaUNPMacIpPortRuleNum=alaDaUNPMacIpPortRuleNum, alaDaMacVlanUserExtEntry=alaDaMacVlanUserExtEntry, alaDaCPortalAuthUNPProfileChange=alaDaCPortalAuthUNPProfileChange, alaDaUnpCustomerDomainId=alaDaUnpCustomerDomainId, alaDaUNPVlanTagRuleMCLagConfigStatus=alaDaUNPVlanTagRuleMCLagConfigStatus, alaDaUNPPortTable=alaDaUNPPortTable, alaDaUNPPortMaxEgressDepth=alaDaUNPPortMaxEgressDepth, alaDaSpbProfileMulticastMode=alaDaSpbProfileMulticastMode, alaDaUNPCustDomainIpNetRuleDomainId=alaDaUNPCustDomainIpNetRuleDomainId, alaDaUNPForceL3LearningPortBounce=alaDaUNPForceL3LearningPortBounce, alaDaUNPUserRoleKerberosPostLoginStatus=alaDaUNPUserRoleKerberosPostLoginStatus, alaDaUNPPortRedirectPortBounce=alaDaUNPPortRedirectPortBounce, alaDaUNPMacRuleEntry=alaDaUNPMacRuleEntry, alaDaUNPCustDomainIpNetRuleProfileName=alaDaUNPCustDomainIpNetRuleProfileName, alaDaUNPIpGroupRuleRowStatus=alaDaUNPIpGroupRuleRowStatus, alaDaMacVlanUserAuthFailReason=alaDaMacVlanUserAuthFailReason, alaDaKerberosGlobalInactivityTimer=alaDaKerberosGlobalInactivityTimer, alcatelIND1DaMIB=alcatelIND1DaMIB, alaDaKerberosUserPolicy=alaDaKerberosUserPolicy, alaDaUNPCustDomainMacIpRuleIpMask=alaDaUNPCustDomainMacIpRuleIpMask, alaDaCPortalSuccRedirectUrl=alaDaCPortalSuccRedirectUrl, alaDaUNPCustDomainVlanTagRuleGroup=alaDaUNPCustDomainVlanTagRuleGroup, alaDaQMRAllowedIpMaskType=alaDaQMRAllowedIpMaskType, alaDaUNPPortType=alaDaUNPPortType, alaDaMacVlanUserLocPolicyStatus=alaDaMacVlanUserLocPolicyStatus, alaDaMacUserClassificationSource=alaDaMacUserClassificationSource, alaDaUNPUserRolePostLoginStatus=alaDaUNPUserRolePostLoginStatus, alaDaUNPPortTemplate8021XAuthBypass=alaDaUNPPortTemplate8021XAuthBypass, alaDaUNPMacRangeVlanTag=alaDaUNPMacRangeVlanTag, alaDaUNPEdgeProfileGroup=alaDaUNPEdgeProfileGroup, alaDaKerberosTotalTGSREPRxStats=alaDaKerberosTotalTGSREPRxStats, alaDaMacVlanUserCapPortalStatus=alaDaMacVlanUserCapPortalStatus, alaDaMacVlanUserAuthServerIpType=alaDaMacVlanUserAuthServerIpType, alaDaUNPProfileMapStaticGroup=alaDaUNPProfileMapStaticGroup, alaDaUNPEdgeProfQosPolicyList=alaDaUNPEdgeProfQosPolicyList, alaDaUNPEdgeProfMobileTag=alaDaUNPEdgeProfMobileTag, alaDaUNPCustDomainMacRangeRuleRowStatus=alaDaUNPCustDomainMacRangeRuleRowStatus, alaDaQMRPage=alaDaQMRPage, alaDaUNPRedirectAllowedServerName=alaDaUNPRedirectAllowedServerName, alaDaKerberosRowStatus=alaDaKerberosRowStatus, alaDaUNPVxlanFlushGroup=alaDaUNPVxlanFlushGroup, alaDaKerberosClientPktHwDiscardStats=alaDaKerberosClientPktHwDiscardStats, alaDaUNPCustDomainMacRangeRuleProfile3=alaDaUNPCustDomainMacRangeRuleProfile3, alaDaUnpCommandType=alaDaUnpCommandType, alaDaUNPAuthServerDownUNPMCLagConfigStatus=alaDaUNPAuthServerDownUNPMCLagConfigStatus, alaDaCPortalPolicyListName=alaDaCPortalPolicyListName, alaDaUNPPortForceL3LearningPortBounce=alaDaUNPPortForceL3LearningPortBounce, alaDaUNPValidityPeriodDaysStatus=alaDaUNPValidityPeriodDaysStatus, alaDaUNPVlanRuleVlanTag=alaDaUNPVlanRuleVlanTag, alaDaUNPPortForceL3Learning=alaDaUNPPortForceL3Learning, alaDaUNPETmplName=alaDaUNPETmplName, alaDaUNPPortRuleEntry=alaDaUNPPortRuleEntry, alaDaUNPGroupRuleTable=alaDaUNPGroupRuleTable, alaDaUNPUserRoleProfile1=alaDaUNPUserRoleProfile1, alaDaUNPPortTemplateForceL3LearningPortBounce=alaDaUNPPortTemplateForceL3LearningPortBounce, alaDaMacVlanUserMACAddress=alaDaMacVlanUserMACAddress, alaDaUNPProfileMaxEgressDepth=alaDaUNPProfileMaxEgressDepth, alaDaMacVlanUserTable=alaDaMacVlanUserTable, alaDaMacVlanUserServerMessage=alaDaMacVlanUserServerMessage, alaDaUNPProfileMapVxlanMulticastIPAddress=alaDaUNPProfileMapVxlanMulticastIPAddress, alaDaUNPPortAFDConfig=alaDaUNPPortAFDConfig, alaDaUNPClassifRuleIpMaskType=alaDaUNPClassifRuleIpMaskType, alaDaUNPMacRuleMCLagConfigStatus=alaDaUNPMacRuleMCLagConfigStatus, alaDaUNPRedirectAllowedServerTable=alaDaUNPRedirectAllowedServerTable, alaDaKerberosPolicyDomainName=alaDaKerberosPolicyDomainName, alaDaUNPIpPortRuleMask=alaDaUNPIpPortRuleMask, alaDaCPortalProfMode=alaDaCPortalProfMode, alaDaUNPCustDomainIpNetRuleVlanTag=alaDaUNPCustDomainIpNetRuleVlanTag, alaDaUNPAuthSrvDownEdgeProfName=alaDaUNPAuthSrvDownEdgeProfName, alaDaMacVlanUserEntry=alaDaMacVlanUserEntry, alaDaUNPAuthRuleProfile2=alaDaUNPAuthRuleProfile2, alaDaUNPClassifRowStatus=alaDaUNPClassifRowStatus, alaDaUNPEdgeProfHICStatus=alaDaUNPEdgeProfHICStatus, alaDaUNPMacIpGroupRuleMacAddr=alaDaUNPMacIpGroupRuleMacAddr, alaDaUNPMacIpGroupRuleIpAddrType=alaDaUNPMacIpGroupRuleIpAddrType, alaDaUNPClassifRuleProfile1=alaDaUNPClassifRuleProfile1, alaDaUNPPortDefaultProfileName=alaDaUNPPortDefaultProfileName, alaDaUNPCustDomainMacRangeRuleEntry=alaDaUNPCustDomainMacRangeRuleEntry, alaDaUNPCustDomainMacRangeRuleHiAddr=alaDaUNPCustDomainMacRangeRuleHiAddr, alaDaQMRAllowedRowStatus=alaDaQMRAllowedRowStatus, alaDaHICStatus=alaDaHICStatus, alaDaUNPMacOuiRuleEntry=alaDaUNPMacOuiRuleEntry, alaDaUNPCustDomainMacIpRuleEntry=alaDaUNPCustDomainMacIpRuleEntry, alaDaUNPPortTemplateVlanRowStatus=alaDaUNPPortTemplateVlanRowStatus, alaDaQMRCustomHttpProxyPort=alaDaQMRCustomHttpProxyPort, alaDaUNPCustDomainIpNetRuleGroup=alaDaUNPCustDomainIpNetRuleGroup, alaDaSpbProfileEntry=alaDaSpbProfileEntry, alaDaUNPCustDomainEvbGpIdRuleVlanProfileName=alaDaUNPCustDomainEvbGpIdRuleVlanProfileName, alaDaHICSvrRowStatus=alaDaHICSvrRowStatus, alaDaUNPAuthRuleProfile1=alaDaUNPAuthRuleProfile1, alaDaKerberosPolicyConfigTable=alaDaKerberosPolicyConfigTable, alaDaUNPUserRolePrecedenceNum=alaDaUNPUserRolePrecedenceNum, alaDaUNPIpNetRuleAddr=alaDaUNPIpNetRuleAddr, alaDaUNPVxlanFarEndIPAddressListTable=alaDaUNPVxlanFarEndIPAddressListTable, alaDaUnpGroupDescription=alaDaUnpGroupDescription, alaDaKerberosTotalClientPktRxStats=alaDaKerberosTotalClientPktRxStats, alaDaSpbProfileEncapVal=alaDaSpbProfileEncapVal, alaDaKerberosServerPktHwDiscardStats=alaDaKerberosServerPktHwDiscardStats, alaDaUNPPortTemplateGroup=alaDaUNPPortTemplateGroup, alaDaUNPVxlanFarEndIPListRemove=alaDaUNPVxlanFarEndIPListRemove, alaDaUNPIpNetRuleRowStatus=alaDaUNPIpNetRuleRowStatus, alaDaUNPProfileQoSPolicy=alaDaUNPProfileQoSPolicy, alaDaQMRAllowedIpMask=alaDaQMRAllowedIpMask, alaDaHICGlobalConfig=alaDaHICGlobalConfig, alaDaUNPPortRuleTable=alaDaUNPPortRuleTable, alaDaUNPIpNetRuleMCLagConfigStatus=alaDaUNPIpNetRuleMCLagConfigStatus, alaDaUNPGroupRuleVlanTag=alaDaUNPGroupRuleVlanTag, alaDaUNPVlanTagGroup=alaDaUNPVlanTagGroup, alaDaUNPMacGroupRuleId=alaDaUNPMacGroupRuleId, alaDaUNPETmplFailurePolicy=alaDaUNPETmplFailurePolicy, alaDaUNPETmplEntry=alaDaUNPETmplEntry, alaDaUNPIpPortRuleAddrType=alaDaUNPIpPortRuleAddrType, alaDaUNPProfileMaxIngressBandwidth=alaDaUNPProfileMaxIngressBandwidth, alaDaMacVlanUserIntfNum=alaDaMacVlanUserIntfNum, alaDaUNPAuthServerDownProfile3=alaDaUNPAuthServerDownProfile3, alaDaSpbProfileIsid=alaDaSpbProfileIsid, alaDaUNPMacPortRuleVlanTag=alaDaUNPMacPortRuleVlanTag, alaDaUNPIpGroupRuleVlanTag=alaDaUNPIpGroupRuleVlanTag, alaDaKerberosUserState=alaDaKerberosUserState, alaDaUNPValidityPeriodRowStatus=alaDaUNPValidityPeriodRowStatus, PYSNMP_MODULE_ID=alcatelIND1DaMIB, alaDaUNPIpMaskRuleEdgeProf=alaDaUNPIpMaskRuleEdgeProf, alaDaUNPCustDomainIpNetRuleTable=alaDaUNPCustDomainIpNetRuleTable, alaDaNotificationObjectGroup=alaDaNotificationObjectGroup, alaDaQMRPath=alaDaQMRPath, alaDaUNPMacRangeRuleRowStatus=alaDaUNPMacRangeRuleRowStatus, alaDaUNPPort8021XPassAltProfileName=alaDaUNPPort8021XPassAltProfileName, alaDaUNPCustDomainMacIpRuleIpMaskType=alaDaUNPCustDomainMacIpRuleIpMaskType, alaDaUNPVxlanProfileSapVlanXlation=alaDaUNPVxlanProfileSapVlanXlation, alaDaSpbProfileGroup=alaDaSpbProfileGroup, alaDaSpbProfileBVlan=alaDaSpbProfileBVlan, alaDaUNPVlanMappingGroup=alaDaUNPVlanMappingGroup, alaDaUNPPortTemplateVlanEntry=alaDaUNPPortTemplateVlanEntry, alaDaCPortalProfDomainUNPProfileChange=alaDaCPortalProfDomainUNPProfileChange, alaDaUNPClassifRuleGroupId=alaDaUNPClassifRuleGroupId, alaDaKerberosPortTGSREQRxStats=alaDaKerberosPortTGSREQRxStats, alaDaUNPClassifRuleCustomerDomain=alaDaUNPClassifRuleCustomerDomain, alaDaKerberosGlobalPolicy=alaDaKerberosGlobalPolicy, alaDaUNPAuthServerDownProfile2=alaDaUNPAuthServerDownProfile2, alaDaUNPCustDomainMacRangeRuleSpbProfileName=alaDaUNPCustDomainMacRangeRuleSpbProfileName, alaDaHICSvrConnection=alaDaHICSvrConnection, alaDaUNPMacOuiRuleEdgeProfile=alaDaUNPMacOuiRuleEdgeProfile, alaDaUNPVlanTagRuleProfileName=alaDaUNPVlanTagRuleProfileName, alaDaUNPEdgeProfMaxIngressBw=alaDaUNPEdgeProfMaxIngressBw, alaDaUNPVlanTagRuleEntry=alaDaUNPVlanTagRuleEntry, alaDaUNPPortEgressSourceProfile=alaDaUNPPortEgressSourceProfile, alaDaUNPCustDomainMacIpRuleVlanTag=alaDaUNPCustDomainMacIpRuleVlanTag, alaDaUNPGroupRuleId=alaDaUNPGroupRuleId, alaDaUNPUserFlushSapIDIfIndex=alaDaUNPUserFlushSapIDIfIndex, alaDaCPortalProfDomainAuthPolicyListName=alaDaCPortalProfDomainAuthPolicyListName, alaDaUNPProfileMapSpbTable=alaDaUNPProfileMapSpbTable, alaDaUNPVlanRuleTable=alaDaUNPVlanRuleTable, alaIND1DaMIBNotifications=alaIND1DaMIBNotifications, alaDaHICAllowedEntry=alaDaHICAllowedEntry, alaDaUNPVlanMapEntry=alaDaUNPVlanMapEntry, alaDaUNPIpMaskRuleTable=alaDaUNPIpMaskRuleTable, alaDaKerberosMIBObjects=alaDaKerberosMIBObjects, alaDaUNPProfileKerberosAuthentication=alaDaUNPProfileKerberosAuthentication, alaDaUNPVlanMapEdgeProf=alaDaUNPVlanMapEdgeProf, alaDaMacVlanUserVxlanVnid=alaDaMacVlanUserVxlanVnid, alaDaUNPVxlanFarEndIPAddressListEntry=alaDaUNPVxlanFarEndIPAddressListEntry, alaDaUNPProfileMapSpbEntry=alaDaUNPProfileMapSpbEntry, alaDaUNPMacOuiGroup=alaDaUNPMacOuiGroup, alaDaUNPEdgeFlushGroup=alaDaUNPEdgeFlushGroup, alaDaUNPMacRangeGroup=alaDaUNPMacRangeGroup, alaDaMacVlanUserServiceSapIDEncapVal=alaDaMacVlanUserServiceSapIDEncapVal, alaDaUNPMacIpPortRuleMacAddr=alaDaUNPMacIpPortRuleMacAddr, alaDaUNPEdgrFlushMac=alaDaUNPEdgrFlushMac, alaDaUNPCustDomainIpNetRuleProfile2=alaDaUNPCustDomainIpNetRuleProfile2, alaDaUNPCustDomainMacRuleTable=alaDaUNPCustDomainMacRuleTable, alaDaUNPCustDomainVlanTagRuleProfile3=alaDaUNPCustDomainVlanTagRuleProfile3, alaDaUNPAuthServerDownUnp=alaDaUNPAuthServerDownUnp, alaDaUNPMacGroupRuleTable=alaDaUNPMacGroupRuleTable, alaDaMacVlanUserRoleSource=alaDaMacVlanUserRoleSource, alaDaUNPPortMaxEgressBw=alaDaUNPPortMaxEgressBw, alaDaKerberosInactivityTimerExpiryTrap=alaDaKerberosInactivityTimerExpiryTrap, alaDaUNPVxlanProfileQosPolicyListName=alaDaUNPVxlanProfileQosPolicyListName, alaDaUNPUserFlushPortStart=alaDaUNPUserFlushPortStart, alaDaUNPLocationPolicySystemLocation=alaDaUNPLocationPolicySystemLocation, alaDaUNPValidityPeriodInterval=alaDaUNPValidityPeriodInterval, alaDaUNPRedirectAllowedServerIP=alaDaUNPRedirectAllowedServerIP, alaDaMacVlanUserRoleRule=alaDaMacVlanUserRoleRule, alaDaQMRAllowedIpAddrType=alaDaQMRAllowedIpAddrType, alaDaUNPSpbFlushTable=alaDaUNPSpbFlushTable, alaDaMacVlanUserIpAddressType=alaDaMacVlanUserIpAddressType, alaDaUNPEdgeUserFlush=alaDaUNPEdgeUserFlush, alaDaUNPCustDomainRuleProfile1=alaDaUNPCustDomainRuleProfile1, alaDaUNPRstrctedRoleType=alaDaUNPRstrctedRoleType, alaDaUNPClassifRuleName=alaDaUNPClassifRuleName, alaDaUNPMacRuleRowStatus=alaDaUNPMacRuleRowStatus, alaDaMacUserName=alaDaMacUserName, alaDaHICSvrFailRowStatus=alaDaHICSvrFailRowStatus, alaDaUNPIpPortRuleVlanTag=alaDaUNPIpPortRuleVlanTag, alaDaUNPETmplMacPassAltEProf=alaDaUNPETmplMacPassAltEProf, alaDaUNPUserRoleProfile2=alaDaUNPUserRoleProfile2, alaDaUNPCustDomainMacRuleGroup=alaDaUNPCustDomainMacRuleGroup, alaDaUNPLocationPolicyPortStatus=alaDaUNPLocationPolicyPortStatus, alaDaUNPCustDomainMacRuleMCLagConfigStatus=alaDaUNPCustDomainMacRuleMCLagConfigStatus, alaDaUNPVlanTagRuleRowStatus=alaDaUNPVlanTagRuleRowStatus, alaDaMacVlanUserSpbBVlan=alaDaMacVlanUserSpbBVlan, alaDaUNPMacIpPortRuleEntry=alaDaUNPMacIpPortRuleEntry, alaDaUNPMacOuiRuleProfile2=alaDaUNPMacOuiRuleProfile2, alaDaUNPETmplForceL3Learning=alaDaUNPETmplForceL3Learning, alaDaUNPETmpl8021XMaxReq=alaDaUNPETmpl8021XMaxReq, alaDaUNPProfileMaxEgressBandwidth=alaDaUNPProfileMaxEgressBandwidth, alaDaUNPSpbFlushSapIDEncapVal=alaDaUNPSpbFlushSapIDEncapVal, alaDaUNPPortPVlanPortType=alaDaUNPPortPVlanPortType, alaDaMacUserLoginTimeStamp=alaDaMacUserLoginTimeStamp, alaDaHICBgPollInterval=alaDaHICBgPollInterval, alaDaMacVlanUserName=alaDaMacVlanUserName, alaDaUNPPortTemplateEntry=alaDaUNPPortTemplateEntry, alaDaUNPVxlanFlushAuthType=alaDaUNPVxlanFlushAuthType, alaDaCPortalAuthDomainName=alaDaCPortalAuthDomainName, alaDaUNPETmplRowStatus=alaDaUNPETmplRowStatus, alaDaUNPProfileMapVlanRowStatus=alaDaUNPProfileMapVlanRowStatus, alaDaUNPCustDomainIpNetRuleEntry=alaDaUNPCustDomainIpNetRuleEntry, alaDaUNPProfileMobileTag=alaDaUNPProfileMobileTag, alaDaUNPSpbFlushMacAddress=alaDaUNPSpbFlushMacAddress, alaDaUNPMacRulesTable=alaDaUNPMacRulesTable, alaDaUNPVxlanFlushComplete=alaDaUNPVxlanFlushComplete)
mibBuilder.exportSymbols("ALCATEL-IND1-DA-MIB", AlaMultiChassisConfigStatus=AlaMultiChassisConfigStatus, alaDaUNPVxlanProfileRowStatus=alaDaUNPVxlanProfileRowStatus, AlaDaMacLearntState=AlaDaMacLearntState, alaDaUNPPortTemplateMACAuthPassAlternate=alaDaUNPPortTemplateMACAuthPassAlternate, alaDaUserNetProfileVlanID=alaDaUserNetProfileVlanID, alaDaUNPNoAuthEdgeUserFlush=alaDaUNPNoAuthEdgeUserFlush, alaDaUNPMacIpGroupRuleIpAddr=alaDaUNPMacIpGroupRuleIpAddr, alaDaQMRPolicyList=alaDaQMRPolicyList, alaDaUNPForceL3Learning=alaDaUNPForceL3Learning, alaDaUNPETmplClassifStatus=alaDaUNPETmplClassifStatus, alaDaUNPCustDomainMacIpRuleGroup=alaDaUNPCustDomainMacIpRuleGroup, alaDaUNPPortTemplate8021XAuthMaxReq=alaDaUNPPortTemplate8021XAuthMaxReq, alaDaUNPCustDomainMacRangeRuleProfileName=alaDaUNPCustDomainMacRangeRuleProfileName, alaDaUNPMacRangeRuleVlanTag=alaDaUNPMacRangeRuleVlanTag, alaDaUNPCustDomainMacRuleVlanTag=alaDaUNPCustDomainMacRuleVlanTag, alaDaUNPMacIpGroupRuleVlanTag=alaDaUNPMacIpGroupRuleVlanTag, alaDaNotificationsGroup=alaDaNotificationsGroup, alaDaUNPEndPoinProfile2=alaDaUNPEndPoinProfile2, alaDaUNPIpMaskGroup=alaDaUNPIpMaskGroup, alaDaMacUserTable=alaDaMacUserTable, alaDaMacUserVlanID=alaDaMacUserVlanID, alaDaUNPIpNetRuleAddrType=alaDaUNPIpNetRuleAddrType, alaDaHICSvrFailChangedPolicyName=alaDaHICSvrFailChangedPolicyName, alaDaUNPRedirectAllowedServerGroup=alaDaUNPRedirectAllowedServerGroup, alaDaUNPRedirectServerIPType=alaDaUNPRedirectServerIPType, alaDaCPortalAuthPassEntry=alaDaCPortalAuthPassEntry, alaDaUNPSpbFlushIndex=alaDaUNPSpbFlushIndex, alaDaCPortalGroup=alaDaCPortalGroup, alaDaUNPMacRangeRowStatus=alaDaUNPMacRangeRowStatus, alaDaUNPPortAdminControlledDirections=alaDaUNPPortAdminControlledDirections, alaDaCPortalProfDomainRowStatus=alaDaCPortalProfDomainRowStatus, alaDaUNPMacRangeRuleTable=alaDaUNPMacRangeRuleTable, alaDaUNPCustDomainVlanTagRuleTable=alaDaUNPCustDomainVlanTagRuleTable, alaDaUNPMacOuiRuleRowStatus=alaDaUNPMacOuiRuleRowStatus, alaDaUNPUserRoleRowStatus=alaDaUNPUserRoleRowStatus, alaDaUNPPortIfIndex=alaDaUNPPortIfIndex, alaDaUNPUserRoleName=alaDaUNPUserRoleName, alaDaUNPPortDefaultVxlanProfileName=alaDaUNPPortDefaultVxlanProfileName, alaDaHICAllowedTable=alaDaHICAllowedTable, alaDaMacVlanUserExtAppName=alaDaMacVlanUserExtAppName, alaDaCPortalProfDomainTable=alaDaCPortalProfDomainTable, alaDaSaaProfileGroup=alaDaSaaProfileGroup, alaDaUNPCustDomainMacRangeRuleDomainId=alaDaUNPCustDomainMacRangeRuleDomainId, alaDaUNPMacPortClassifyGroup=alaDaUNPMacPortClassifyGroup, alaDaMacVlanUserMCLagLearningLoc=alaDaMacVlanUserMCLagLearningLoc, alaDaUNPMacIpPortRuleTable=alaDaUNPMacIpPortRuleTable, alaDaUNPProfileSaaProfile=alaDaUNPProfileSaaProfile, alaDaUNPProfileMapVxlanMulticastMode=alaDaUNPProfileMapVxlanMulticastMode, alaDaUNPClassifRuleMacAddr=alaDaUNPClassifRuleMacAddr, alaDaHICSvrFailPolicyTable=alaDaHICSvrFailPolicyTable, alaDaUNPProfileMapStaticEncapVal=alaDaUNPProfileMapStaticEncapVal, alaDaSpbProfileName=alaDaSpbProfileName, alaDaUNPIpMaskRuleEntry=alaDaUNPIpMaskRuleEntry, alaDaUNPEndPoinProfile1=alaDaUNPEndPoinProfile1, alaDaKerberosRateLimitExceed=alaDaKerberosRateLimitExceed, alaDaCPortalProxyPort=alaDaCPortalProxyPort, alaDaUNPValidityPeriodHour=alaDaUNPValidityPeriodHour, alaDaUNPProfileMapStaticServiceID=alaDaUNPProfileMapStaticServiceID, alaDaUNPMacRuleVlanTag=alaDaUNPMacRuleVlanTag, alaDaUNPMacIpPortRuleRowStatus=alaDaUNPMacIpPortRuleRowStatus, alaDaUNPProfileCPortalProfile=alaDaUNPProfileCPortalProfile, alaDaUNPClassifRulePort=alaDaUNPClassifRulePort, alaDaUNPUserRolePolicyList=alaDaUNPUserRolePolicyList, alaDaCPortalAuthUNPProfile=alaDaCPortalAuthUNPProfile, alaDaUNPValidityPeriodActiveStatus=alaDaUNPValidityPeriodActiveStatus, alaDaUNPVxlanFarEndIPListTable=alaDaUNPVxlanFarEndIPListTable, alaDaUNPEdgeProfCPortalAuth=alaDaUNPEdgeProfCPortalAuth, alaDaKerberosUserDomain=alaDaKerberosUserDomain, alaDaUNPETmplVlanEntry=alaDaUNPETmplVlanEntry, alaDaUNPIpGroupRuleAddr=alaDaUNPIpGroupRuleAddr, alaDaUNPPortTemplateDomainID=alaDaUNPPortTemplateDomainID, alaDaUNPRstrctedRoleEntry=alaDaUNPRstrctedRoleEntry, alaDaUNPCustDomainMacRuleSpbProfileName=alaDaUNPCustDomainMacRuleSpbProfileName, alaDaUNPSpbFlushEntry=alaDaUNPSpbFlushEntry, alaDaUNPIpGroupRuleAddrType=alaDaUNPIpGroupRuleAddrType, alaDaUnpVlanTag=alaDaUnpVlanTag, alaDaUNPIpNetRuleProfileName=alaDaUNPIpNetRuleProfileName, unpMcLagConfigInconsistency=unpMcLagConfigInconsistency, alaDaKerberosGlobalServerTimeoutTimer=alaDaKerberosGlobalServerTimeoutTimer, alaDaUNPPortMaxEgressBwSource=alaDaUNPPortMaxEgressBwSource, alaDaMacVlanUserLoginTimeStamp=alaDaMacVlanUserLoginTimeStamp, alaIND1DaMIBGroups=alaIND1DaMIBGroups, alaDaUNPCustDomainEvbGpIdRuleEntry=alaDaUNPCustDomainEvbGpIdRuleEntry, alaDaUNPVxlanFlushIndex=alaDaUNPVxlanFlushIndex, alaDaUNPPortMCLagConfigStatus=alaDaUNPPortMCLagConfigStatus, alaDaUNPProfileMapVxlanEntry=alaDaUNPProfileMapVxlanEntry, alaDaKerberosGroup=alaDaKerberosGroup, alaDaCPortalProfAuthPolicyListName=alaDaCPortalProfAuthPolicyListName, alaDaUNPMacRangeRuleMCLagConfigStatus=alaDaUNPMacRangeRuleMCLagConfigStatus, alaDaUNPCustDomainEvbGpIdRuleGroupId=alaDaUNPCustDomainEvbGpIdRuleGroupId, alaDaUNPIpPortRuleProfile1=alaDaUNPIpPortRuleProfile1, alaDaUNPValidityPeriodTable=alaDaUNPValidityPeriodTable, alaDaCPortalRetryCnt=alaDaCPortalRetryCnt, alaDaUNPClassifRuleEdgeProfile=alaDaUNPClassifRuleEdgeProfile, alaDaUNPClassifRuleProfile2=alaDaUNPClassifRuleProfile2, alaDaUNPSpbFlushComplete=alaDaUNPSpbFlushComplete, alaDaKerberosPolicyRowStatus=alaDaKerberosPolicyRowStatus, alaDaUNPProfileRowStatus=alaDaUNPProfileRowStatus, alaDaUNPVlanGroup=alaDaUNPVlanGroup, alaDaUNPCustDomainVlanTagRuleProfile2=alaDaUNPCustDomainVlanTagRuleProfile2, alaDaUNPAuthServerDownProfile1=alaDaUNPAuthServerDownProfile1, AlaDaAuthenticationResult=AlaDaAuthenticationResult, alaDaUNPVxlanFlushServiceID=alaDaUNPVxlanFlushServiceID, alaDaUNPValidityPeriodMonths=alaDaUNPValidityPeriodMonths, alaDaUNPCustDomainMacRuleProfile2=alaDaUNPCustDomainMacRuleProfile2, alaDaHICSvrKey=alaDaHICSvrKey, alaDaUNPClassifRulePrecedenceNum=alaDaUNPClassifRulePrecedenceNum, alaDaUNPMacIpPortRuleIpMaskType=alaDaUNPMacIpPortRuleIpMaskType, alaDaUNPCustDomainMacRuleEntry=alaDaUNPCustDomainMacRuleEntry, alaDaUNPCustDomainMacRangeRuleVxlanProfileName=alaDaUNPCustDomainMacRangeRuleVxlanProfileName, alaDaUNPMacIpPortRuleProfile1=alaDaUNPMacIpPortRuleProfile1, alaDaKerberosServerTable=alaDaKerberosServerTable, alaDaUnpName=alaDaUnpName, alaDaUNPVxlanFarEndIPAddressListIPType=alaDaUNPVxlanFarEndIPAddressListIPType, alaDaUNPProfileEntry=alaDaUNPProfileEntry, alaDaKerberosPortTGSREPRxStats=alaDaKerberosPortTGSREPRxStats, MacOui=MacOui, alaDaUNPPortMacAllowEap=alaDaUNPPortMacAllowEap, alaDaKerberosPortServerPktSwDiscardStats=alaDaKerberosPortServerPktSwDiscardStats, alaDaUNPProfileMapSpbBVlan=alaDaUNPProfileMapSpbBVlan, alaDaMacVlanUserExtVlanID=alaDaMacVlanUserExtVlanID, alaDaUNPProfileMapVxlanMulticastIPAddressType=alaDaUNPProfileMapVxlanMulticastIPAddressType, alaDaUNPCustDomainMacRuleDomainId=alaDaUNPCustDomainMacRuleDomainId, alaDaUnpVlan=alaDaUnpVlan, alaDaSpbProfileSapVlanXlation=alaDaSpbProfileSapVlanXlation, alaDaKerberosUserMac=alaDaKerberosUserMac, alaDaUNPCustDomainRuleEntry=alaDaUNPCustDomainRuleEntry, alaDaHICAllowedRowStatus=alaDaHICAllowedRowStatus, alaDaUNPPortTemplateAdminState=alaDaUNPPortTemplateAdminState, alaDaUNPPortTemplate8021XAuth=alaDaUNPPortTemplate8021XAuth, alaDaUNPCustDomainMacIpRuleProfile1=alaDaUNPCustDomainMacIpRuleProfile1, alaDaUNPMacIpGroupRuleRowStatus=alaDaUNPMacIpGroupRuleRowStatus, alaDaMacVlanUserAuthRetryCount=alaDaMacVlanUserAuthRetryCount, alaDaUNPETmplMacAllowEap=alaDaUNPETmplMacAllowEap, alaDaKerberosStatsIfIndex=alaDaKerberosStatsIfIndex, alaDaUNPVlanRuleEdgeProf=alaDaUNPVlanRuleEdgeProf, alaDaUNPPortTemplate8021XAuthPassAlternate=alaDaUNPPortTemplate8021XAuthPassAlternate, alaDaUNPLocationPolicySystemName=alaDaUNPLocationPolicySystemName, alaDaUNPVlanUserFlush=alaDaUNPVlanUserFlush, alaDaUNPCustDomainIpNetRuleProfile3=alaDaUNPCustDomainIpNetRuleProfile3, alaDaUNPCustDomainEvbGpIdRuleTable=alaDaUNPCustDomainEvbGpIdRuleTable, alaDaUNPMacPortRuleTable=alaDaUNPMacPortRuleTable, alaDaMacVlanUserAuthtype=alaDaMacVlanUserAuthtype, alaDaUNPPortTemplateDirection=alaDaUNPPortTemplateDirection, alaDaUNPPortTemplateVlanGroup=alaDaUNPPortTemplateVlanGroup, alaDaUNPClassifRuleVlanTag=alaDaUNPClassifRuleVlanTag, alaDaUNPUserFlushSapIDEncapVal=alaDaUNPUserFlushSapIDEncapVal, alaDaUNPIpNetRuleGroup=alaDaUNPIpNetRuleGroup, alaDaUNPNotificationObjects=alaDaUNPNotificationObjects, alaDaSaaProfileJitterThreshold=alaDaSaaProfileJitterThreshold, alaDaHICHostMac=alaDaHICHostMac, alaDaUNPIpMaskRuleMask=alaDaUNPIpMaskRuleMask, alaDaUNPRedirectPauseTimer=alaDaUNPRedirectPauseTimer, alaDaHICSvrRole=alaDaHICSvrRole, alaDaUNPEdgeProfEntry=alaDaUNPEdgeProfEntry, alaDaUNPCustDomainVlanTagRuleDomainId=alaDaUNPCustDomainVlanTagRuleDomainId, alaDaUNPCustDomainMacRuleRowStatus=alaDaUNPCustDomainMacRuleRowStatus, alaDaUNPValidityPeriodMonthsStatus=alaDaUNPValidityPeriodMonthsStatus, alaDaUNPPortTemplateRowStatus=alaDaUNPPortTemplateRowStatus, alaDaUNPVxlanFarEndIPAddressListRowStatus=alaDaUNPVxlanFarEndIPAddressListRowStatus, alaDaUNPValidityPeriodTimezoneStatus=alaDaUNPValidityPeriodTimezoneStatus, alaDaKerberosPolicyConfigEntry=alaDaKerberosPolicyConfigEntry, alaDaKerberosPortErrorRxStats=alaDaKerberosPortErrorRxStats, alaDaKerberosGlobalMacMoveStatus=alaDaKerberosGlobalMacMoveStatus, alaDaKerberosGlobalPolicyStatus=alaDaKerberosGlobalPolicyStatus, alaDaUNPUserFlushServiceID=alaDaUNPUserFlushServiceID, alaDaUNPCustDomainMacRangeRuleVlanTag=alaDaUNPCustDomainMacRangeRuleVlanTag, alaDaUserNetProfileMaxIngressBw=alaDaUserNetProfileMaxIngressBw, alaIND1DaMIBCompliances=alaIND1DaMIBCompliances, alaDaUNPPortVlanRowStatus=alaDaUNPPortVlanRowStatus, alaDaUNPCustDomainMacRangeRuleLoAddr=alaDaUNPCustDomainMacRangeRuleLoAddr, alaDaUNPETmplBypassStatus=alaDaUNPETmplBypassStatus, alaDaUNPMacRulesRowStatus=alaDaUNPMacRulesRowStatus, alaDaUNPMacAddrsRuleGroup=alaDaUNPMacAddrsRuleGroup, alaDaUnpIpAddr=alaDaUnpIpAddr, alaDaCPortalProfTable=alaDaCPortalProfTable, alaDaUNPCustDomainMacRuleVxlanProfileName=alaDaUNPCustDomainMacRuleVxlanProfileName, alaDaUNPIpPortRuleTable=alaDaUNPIpPortRuleTable, AlaDaAuthenticationType=AlaDaAuthenticationType, alaDaMacVlanUserKerberosStatus=alaDaMacVlanUserKerberosStatus, alaDaUNPEdgeProfMaxIngressDepth=alaDaUNPEdgeProfMaxIngressDepth, alaDaQMRMIBObjects=alaDaQMRMIBObjects, alaDaUNPIpPortRuleProfile3=alaDaUNPIpPortRuleProfile3, alaDaUNPPortTemplateTrustTag=alaDaUNPPortTemplateTrustTag, alaDaCPortalProfRowStatus=alaDaCPortalProfRowStatus, alaDaUNPEdgeProfKerberosStatus=alaDaUNPEdgeProfKerberosStatus, alaDaUserNetProfileGroup=alaDaUserNetProfileGroup, alaDaUNPPortRuleEdgeProf=alaDaUNPPortRuleEdgeProf, alaDaUNPETmplTrustTagStatus=alaDaUNPETmplTrustTagStatus, alaDaUNPIpAddressGroup=alaDaUNPIpAddressGroup, alaDaUNPPortClassificationFlag=alaDaUNPPortClassificationFlag, alaDaUNPIpPortRuleEntry=alaDaUNPIpPortRuleEntry, alaDaMacVlanUserVlanID=alaDaMacVlanUserVlanID, alaDaUNPIpGroupRuleEdgeProf=alaDaUNPIpGroupRuleEdgeProf, alaDaUnpGroupIdTable=alaDaUnpGroupIdTable, alaDaUNPProfileMapVlanGroup=alaDaUNPProfileMapVlanGroup, alaDaUNPAuthServerDowneEdgeProfTimeout=alaDaUNPAuthServerDowneEdgeProfTimeout, alaDaUNPEdgeProfDHCPEnforcment=alaDaUNPEdgeProfDHCPEnforcment, alaDaUNPVxlanFarEndIPAddressListGroup=alaDaUNPVxlanFarEndIPAddressListGroup, alaDaUserNetProfileMaxIngressDepth=alaDaUserNetProfileMaxIngressDepth, alaDaUNPIpNetRuleEntry=alaDaUNPIpNetRuleEntry, alaDaUNPEdgeFlushProfile=alaDaUNPEdgeFlushProfile, alaDaUNPProfileTable=alaDaUNPProfileTable, alaDaUNPIpPortClassifyGroup=alaDaUNPIpPortClassifyGroup, alaDaUNPAuthRuleType=alaDaUNPAuthRuleType, alaDaUNPPortVlanVID=alaDaUNPPortVlanVID, alaDaUNPVxlanFlushMacAddress=alaDaUNPVxlanFlushMacAddress, alaDaUNPCustDomainEvbGpIdRuleRowStatus=alaDaUNPCustDomainEvbGpIdRuleRowStatus, alaDaUNPCustDomainIpNetRuleMask=alaDaUNPCustDomainIpNetRuleMask, alaDaUNPCustDomainIpNetRuleEdgeProfile=alaDaUNPCustDomainIpNetRuleEdgeProfile, alaDaUNPPortVlanTable=alaDaUNPPortVlanTable, alaDaUNPClassifRuleTable=alaDaUNPClassifRuleTable, alaDaUNPPortRuleProfile1=alaDaUNPPortRuleProfile1, alaDaMacVlanUserQMRStatus=alaDaMacVlanUserQMRStatus, alaDaHICSvrPort=alaDaHICSvrPort, alaDaUNPEndPoinRuleId=alaDaUNPEndPoinRuleId, alaDaUNPPort8021XPassAltSpbProfName=alaDaUNPPort8021XPassAltSpbProfName, alaDaUnpGroupIdRowStatus=alaDaUnpGroupIdRowStatus, alaDaUNPPortTemplate8021XAuthFailPolicy=alaDaUNPPortTemplate8021XAuthFailPolicy, alaDaUNPPortTemplateClassification=alaDaUNPPortTemplateClassification, alaDaUNPPortTemplateDefaultProfile=alaDaUNPPortTemplateDefaultProfile, alaDaUNPUserFlushMacAddress=alaDaUNPUserFlushMacAddress, alaDaUNPMacPortRuleNum=alaDaUNPMacPortRuleNum, alaDaUNPCustDomainMacRangeRuleProfile2=alaDaUNPCustDomainMacRangeRuleProfile2, alaDaUNPProfileRedirect=alaDaUNPProfileRedirect, alaDaUNPPort8021XBypassStatus=alaDaUNPPort8021XBypassStatus, alaDaMacUserAuthtype=alaDaMacUserAuthtype, alaDaCPortalProfDomainAuthDomainName=alaDaCPortalProfDomainAuthDomainName, alaDaUNPPortRuleRowStatus=alaDaUNPPortRuleRowStatus, alaDaUNPLocationPolicyName=alaDaUNPLocationPolicyName, alaDaUNPPortRowStatus=alaDaUNPPortRowStatus, alaDaUNPClassifRulePortHigh=alaDaUNPClassifRulePortHigh, alaDaUNPMacOuiRuleProfile1=alaDaUNPMacOuiRuleProfile1, alaDaUNPPort8021XFailurePolicy=alaDaUNPPort8021XFailurePolicy, alaDaUNPEndPoinProfile3=alaDaUNPEndPoinProfile3, unpMcLagMacIgnored=unpMcLagMacIgnored, alaIND1DaMIBConformance=alaIND1DaMIBConformance, alaDaUNPPortEdgeTemplate=alaDaUNPPortEdgeTemplate, alaDaCPortalUNPProfileChange=alaDaCPortalUNPProfileChange, alaDaCPortalProfDomainUNPProfile=alaDaCPortalProfDomainUNPProfile, alaDaUNPAuthRuleEdgeProfile=alaDaUNPAuthRuleEdgeProfile, alaDaKerberosTotalServerPktRxStats=alaDaKerberosTotalServerPktRxStats, alaDaKerberosClientPktSwDiscardStats=alaDaKerberosClientPktSwDiscardStats, alaDaUNPPortAdminState=alaDaUNPPortAdminState, alaDaKerberosUdpPort=alaDaKerberosUdpPort, alaDaUNPProfileMapSpbEncapVal=alaDaUNPProfileMapSpbEncapVal, alaDaUNPEndPoinEdgeProfile=alaDaUNPEndPoinEdgeProfile, alaDaUNPETmpl8021XSuppTimeOut=alaDaUNPETmpl8021XSuppTimeOut, alaDaUNPIpMaskRuleVlanTag=alaDaUNPIpMaskRuleVlanTag, alaDaSaaProfileEntry=alaDaSaaProfileEntry, alaDaUNPReloadVsiTypeDB=alaDaUNPReloadVsiTypeDB, alaDaUNPProfileMapVlanVlanID=alaDaUNPProfileMapVlanVlanID, alaDaCPortalAuthPolicyListName=alaDaCPortalAuthPolicyListName, alaDaUNPEdgeProfLocationPolicy=alaDaUNPEdgeProfLocationPolicy)
mibBuilder.exportSymbols("ALCATEL-IND1-DA-MIB", alaDaUNPETmpl8021XAuthStatus=alaDaUNPETmpl8021XAuthStatus, alaDaCPortalUNPProfile=alaDaCPortalUNPProfile, alaDaUNPEndPoinVlanTag=alaDaUNPEndPoinVlanTag, alaDaUNPEdgeProfTable=alaDaUNPEdgeProfTable, alaDaKerberosTotalErrorRxStats=alaDaKerberosTotalErrorRxStats, alaDaMacUserIntfNum=alaDaMacUserIntfNum, alaDaUNPMacGroupRuleEntry=alaDaUNPMacGroupRuleEntry, alaDaUnpIpMask=alaDaUnpIpMask, alaDaUNPCustDomainMacIpRuleDomainId=alaDaUNPCustDomainMacIpRuleDomainId, alaDaUNPGroup=alaDaUNPGroup, alaDaUNPMacRangeRuleLoAddr=alaDaUNPMacRangeRuleLoAddr, alaDaUNPEdgeFlushTable=alaDaUNPEdgeFlushTable, alaDaUNPVlanTagRuleVlan=alaDaUNPVlanTagRuleVlan, alaDaUNPRedirectAllowedMaskIP=alaDaUNPRedirectAllowedMaskIP, alaDaUNPMacOuiRuleTable=alaDaUNPMacOuiRuleTable, alaDaKerberosPortServerPktRxStats=alaDaKerberosPortServerPktRxStats, alaDaUNPIpNetRuleTable=alaDaUNPIpNetRuleTable, alaDaHICAllowedIpAddrType=alaDaHICAllowedIpAddrType, alaDaUNPPortTemplate8021XAuthTxPeriod=alaDaUNPPortTemplate8021XAuthTxPeriod, alaDaUnpCustomerDomainTable=alaDaUnpCustomerDomainTable, alaDaUNPMacOuiRuleProfile3=alaDaUNPMacOuiRuleProfile3, alaDaUNPClassifRuleIpMask=alaDaUNPClassifRuleIpMask, alaDaUNPAuthRuleEntry=alaDaUNPAuthRuleEntry, alaDaQMRAllowedEntry=alaDaQMRAllowedEntry, alaDaUNPPort8021XPassAltVxlanProfName=alaDaUNPPort8021XPassAltVxlanProfName, alaDaUNPLocationPolicyPortHigh=alaDaUNPLocationPolicyPortHigh, alaDaUNPSpbFlushSpbProfile=alaDaUNPSpbFlushSpbProfile, alaDaQMRAllowedIpAddr=alaDaQMRAllowedIpAddr, alaDaUNPETmplVlanGroup=alaDaUNPETmplVlanGroup, alaDaUNPVxlanProfileTable=alaDaUNPVxlanProfileTable, alaDaUNPCustDomainMacIpRuleMacAddr=alaDaUNPCustDomainMacIpRuleMacAddr, alaDaUNPPortAdminControlledOperDirections=alaDaUNPPortAdminControlledOperDirections, alaDaUNPValidityPeriodHourStatus=alaDaUNPValidityPeriodHourStatus, alaDaUNPCustDomainMacRuleAddr=alaDaUNPCustDomainMacRuleAddr, alaDaUNPEdgeProfRedirectStatus=alaDaUNPEdgeProfRedirectStatus, alaDaUNPProfileAFDConfig=alaDaUNPProfileAFDConfig, alaDaUNPEndPoinRuleTable=alaDaUNPEndPoinRuleTable, alaDaUNPUserRoleTable=alaDaUNPUserRoleTable, alaDaUNPProfileMapVlanTable=alaDaUNPProfileMapVlanTable, alaDaUNPUserRoleAuthType=alaDaUNPUserRoleAuthType, alaDaUNPRedirectAllowedServerIPType=alaDaUNPRedirectAllowedServerIPType, alaDaUNPETmpl8021XTxPeriod=alaDaUNPETmpl8021XTxPeriod, alaDaUNPEdgeFlushType=alaDaUNPEdgeFlushType, alaDaUNPIpGroupRuleTable=alaDaUNPIpGroupRuleTable, alaDaUNPMacRuleGroup=alaDaUNPMacRuleGroup, alaDaUnpCustomerDomainGroup=alaDaUnpCustomerDomainGroup, alaDaUNPAuthSrvDownVxlanProfileTimeout=alaDaUNPAuthSrvDownVxlanProfileTimeout, alaDaUNPAuthSrvDownVxlanProfileName=alaDaUNPAuthSrvDownVxlanProfileName, alaDaUNPPort8021XTxPeriod=alaDaUNPPort8021XTxPeriod, alaDaUNPRstrctedRoleTable=alaDaUNPRstrctedRoleTable, alaDaUNPVxlanFlushEntry=alaDaUNPVxlanFlushEntry, alaDaUNPPortTrustTagStatus=alaDaUNPPortTrustTagStatus, alaDaCPortalGlobalConfig=alaDaCPortalGlobalConfig, alaDaUNPPortTemplateName=alaDaUNPPortTemplateName, alaDaUNPMacRangeTable=alaDaUNPMacRangeTable, alaDaUNPValidityPeriodDays=alaDaUNPValidityPeriodDays, alaDaUNPUserFlushTable=alaDaUNPUserFlushTable, alaDaMacVlanUserClassifProfRule=alaDaMacVlanUserClassifProfRule, alaDaKerberosReqTimeoutTrap=alaDaKerberosReqTimeoutTrap, alaDaUNPIpPortRuleAddr=alaDaUNPIpPortRuleAddr, alaDaCPortalMode=alaDaCPortalMode, alaDaUNPClassifRuleMacOuiAddr=alaDaUNPClassifRuleMacOuiAddr, alaDaMacVlanUserSIPMediaType=alaDaMacVlanUserSIPMediaType, alaDaSaaProfileRowStatus=alaDaSaaProfileRowStatus, alaDaUNPMacRangeRuleHiAddr=alaDaUNPMacRangeRuleHiAddr, alaDaKerberosUserLeftTime=alaDaKerberosUserLeftTime, alaDaUNPVlanMapRowStatus=alaDaUNPVlanMapRowStatus, alaDaUNPVxlanProfileGroup=alaDaUNPVxlanProfileGroup, alaDaUnpCustomerDomainDesc=alaDaUnpCustomerDomainDesc, alaDaUNPLocationPolicyGroup=alaDaUNPLocationPolicyGroup, alaDaUNPAuthRuleGroup=alaDaUNPAuthRuleGroup, alaDaUNPCustDomainMacRuleProfileName=alaDaUNPCustDomainMacRuleProfileName, alaDaCPortalCustomization=alaDaCPortalCustomization, alaDaUNPIpPortRuleEdgeProf=alaDaUNPIpPortRuleEdgeProf, alaDaUNPETmplRedirectPortBounce=alaDaUNPETmplRedirectPortBounce, alaDaUNPLocationPolicyPort=alaDaUNPLocationPolicyPort, alaDaKerberosIpAddress=alaDaKerberosIpAddress, alaDaUNPVxlanProfileEncapVal=alaDaUNPVxlanProfileEncapVal, alaDaCPortalProfUNPProfileChange=alaDaCPortalProfUNPProfileChange, alaDaUNPValidityPeriodEndInterval=alaDaUNPValidityPeriodEndInterval, alaDaUserNetProfileTable=alaDaUserNetProfileTable, alaDaMacUserGroup=alaDaMacUserGroup, alaDaUNPClassifRuleProfile3=alaDaUNPClassifRuleProfile3, alaDaUnpGroupIdEntry=alaDaUnpGroupIdEntry, alaDaUNPEdgeFlushPortHigh=alaDaUNPEdgeFlushPortHigh, alaDaUNPMacRuleTable=alaDaUNPMacRuleTable, alaDaUNPPortTemplateMACAuthAllowEAP=alaDaUNPPortTemplateMACAuthAllowEAP, alaDaCPortalIpAddress=alaDaCPortalIpAddress, alaDaKerberosUserTable=alaDaKerberosUserTable, alaDaUNPIpPortRuleNum=alaDaUNPIpPortRuleNum, alaDaUNPIpPortRuleRowStatus=alaDaUNPIpPortRuleRowStatus, alaDaUNPEdgeFlushIndex=alaDaUNPEdgeFlushIndex, alaDaUnpMacAddr2=alaDaUnpMacAddr2, alaDaUNPEndPoinRuleEntry=alaDaUNPEndPoinRuleEntry, alaDaUNPProfileAuthenticationFlag=alaDaUNPProfileAuthenticationFlag, alaDaUNPClassifRuleIpAddress=alaDaUNPClassifRuleIpAddress, alaDaUNPDynamicVlanConfigFlag=alaDaUNPDynamicVlanConfigFlag, alaDaUNPCustDomainMacIpRuleRowStatus=alaDaUNPCustDomainMacIpRuleRowStatus, alaDaUNPLocationPolicyEntry=alaDaUNPLocationPolicyEntry, alaDaKerberosUserAuthState=alaDaKerberosUserAuthState, alaDaMacUserUnpUsed=alaDaMacUserUnpUsed, alaDaUNPClassifRuleEndPoin=alaDaUNPClassifRuleEndPoin, alaDaUNPPortTemplateForceL3Learning=alaDaUNPPortTemplateForceL3Learning, alaDaUNPMacOuiRuleAddr=alaDaUNPMacOuiRuleAddr, alaDaUNPProfileMapVxlanVlanXlation=alaDaUNPProfileMapVxlanVlanXlation, alaDaUNPValidityPeriodTimezone=alaDaUNPValidityPeriodTimezone, alaDaUNPRedirectPortBounce=alaDaUNPRedirectPortBounce, alaDaKerberosTotalASREPRxStats=alaDaKerberosTotalASREPRxStats, alaDaUNPProfileMapStaticTable=alaDaUNPProfileMapStaticTable, alaDaUNPCustDomainMacIpRuleIpAddrType=alaDaUNPCustDomainMacIpRuleIpAddrType, alaDaUNPIpGroupRuleEntry=alaDaUNPIpGroupRuleEntry, alaDaHICCustomHttpProxyPort=alaDaHICCustomHttpProxyPort, alaDaUNPMacEdgeUserFlush=alaDaUNPMacEdgeUserFlush, alaDaSaaProfileTable=alaDaSaaProfileTable, alaDaUNPETmplAdminControlledDirections=alaDaUNPETmplAdminControlledDirections, alaDaUNPEdgeProfRowStatus=alaDaUNPEdgeProfRowStatus, alaDaUserNetProfileMCLagConfigStatus=alaDaUserNetProfileMCLagConfigStatus, alaDaUNPMacGroupRuleVlanTag=alaDaUNPMacGroupRuleVlanTag, alaDaUNPVlanRuleEntry=alaDaUNPVlanRuleEntry, alaDaHICMIBObjects=alaDaHICMIBObjects, alaDaKerberosGlobalClearPortStats=alaDaKerberosGlobalClearPortStats, alaDaUNPPortGroupId=alaDaUNPPortGroupId, alaDaUNPPortRuleProfile3=alaDaUNPPortRuleProfile3, alaDaUNPUserRoleEntry=alaDaUNPUserRoleEntry, alaDaUNPValidityPeriodIntervalStatus=alaDaUNPValidityPeriodIntervalStatus, alaDaKerberosPolicyStatus=alaDaKerberosPolicyStatus, alaDaCPortalProfDomainAuthRealm=alaDaCPortalProfDomainAuthRealm, alaDaUNPCustDomainMacRangeGroup=alaDaUNPCustDomainMacRangeGroup, alaDaUnpMacAddr1=alaDaUnpMacAddr1, alaDaMacVlanUserTimePolicyStatus=alaDaMacVlanUserTimePolicyStatus, alaDaHICHostStatus=alaDaHICHostStatus, alaDaMacVlanUserAuthStatus=alaDaMacVlanUserAuthStatus, alaDaUserNetProfileRowStatus=alaDaUserNetProfileRowStatus, alaDaSpbProfileAFDConfig=alaDaSpbProfileAFDConfig, alaDaCPortalProfAaaProf=alaDaCPortalProfAaaProf, alaDaUNPAuthRuleRowStatus=alaDaUNPAuthRuleRowStatus, alaDaUNPMacIpPortRuleIpMask=alaDaUNPMacIpPortRuleIpMask, alaDaUNPGlobalGroup=alaDaUNPGlobalGroup, alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName=alaDaUNPCustDomainEvbGpIdRuleVxlanProfileName, alaDaUNPGroupRuleEntry=alaDaUNPGroupRuleEntry, alaDaUNPVxlanFlushSapIDEncapVal=alaDaUNPVxlanFlushSapIDEncapVal, alaDaUNPVxlanProfileName=alaDaUNPVxlanProfileName, alaDaUNPIpPortRuleProfile2=alaDaUNPIpPortRuleProfile2, alaDaUNPUserFlushGroup=alaDaUNPUserFlushGroup, alaDaUNPPort8021XMaxReqStatus=alaDaUNPPort8021XMaxReqStatus, alaDaHICSvrIpAddr=alaDaHICSvrIpAddr, alaDaHICHostEntry=alaDaHICHostEntry, alaDaUNPClassifRuleMacRngLoaddr=alaDaUNPClassifRuleMacRngLoaddr, alaDaMacVlanUserSIPCallType=alaDaMacVlanUserSIPCallType, alaDaCPortalProfRetryCnt=alaDaCPortalProfRetryCnt, alaDaUNPMacRulesMacAddr=alaDaUNPMacRulesMacAddr, alaDaCPortalMIBObjects=alaDaCPortalMIBObjects, AlaDaClassificationPolicyType=AlaDaClassificationPolicyType, alaDaUNPMacGroupRuleEdgeProf=alaDaUNPMacGroupRuleEdgeProf, alaDaUNPMacRangeEndMacAddr=alaDaUNPMacRangeEndMacAddr, alaDaMacVlanUserServiceID=alaDaMacVlanUserServiceID, alaDaUNPUserFlushPortEnd=alaDaUNPUserFlushPortEnd, alaDaUNPProfileName=alaDaUNPProfileName, alaDaCPortalProfDomainEntry=alaDaCPortalProfDomainEntry, alaDaUNPPortMaxIngressBwSource=alaDaUNPPortMaxIngressBwSource, alaDaMacVlanUserType=alaDaMacVlanUserType, alaDaUNPETmplForceL3LearningPortBounce=alaDaUNPETmplForceL3LearningPortBounce, alaDaUNPPort8021XPassAltUserNetProfName=alaDaUNPPort8021XPassAltUserNetProfName, alaDaUNPCustDomainVlanTagRuleEntry=alaDaUNPCustDomainVlanTagRuleEntry, alaDaKerberosPortClientPktRxStats=alaDaKerberosPortClientPktRxStats, alaDaUNPIpMaskRuleRowStatus=alaDaUNPIpMaskRuleRowStatus, alaDaHICHostTable=alaDaHICHostTable, alaDaUNPMacRulesEntry=alaDaUNPMacRulesEntry, alaDaUserNetProfileMaxEgressBw=alaDaUserNetProfileMaxEgressBw, alaDaUNPPortMacPassEdgeProfName=alaDaUNPPortMacPassEdgeProfName, alaDaUNPPortTemplateTable=alaDaUNPPortTemplateTable, alaDaUNPMacPortRuleProfile1=alaDaUNPMacPortRuleProfile1, alaDaCPortalAuthRealm=alaDaCPortalAuthRealm, alaDaUNPEdgeProfAuthStatus=alaDaUNPEdgeProfAuthStatus, alaDaMacVlanUserExtTable=alaDaMacVlanUserExtTable, alaDaUNPProfileMapStaticEntry=alaDaUNPProfileMapStaticEntry, alaDaUNPCustDomainEvbGpIdRuleGroup=alaDaUNPCustDomainEvbGpIdRuleGroup, alaDaUNPValidityPeriodEntry=alaDaUNPValidityPeriodEntry, alaDaHICSvrName=alaDaHICSvrName, alaDaUNPMacOuiRuleVlanTag=alaDaUNPMacOuiRuleVlanTag, alaDaKerberosRateLimitString=alaDaKerberosRateLimitString, alaDaUnpNativeVlan=alaDaUnpNativeVlan, alaDaUNPMacRangeStartMacAddr=alaDaUNPMacRangeStartMacAddr, alaDaUNPPortTemplateVlanTable=alaDaUNPPortTemplateVlanTable, alaDaUNPMacIpGroupRuleTable=alaDaUNPMacIpGroupRuleTable, alaDaUNPPortCustomerDomainId=alaDaUNPPortCustomerDomainId, alaDaUNPPort8021XTxPeriodStatus=alaDaUNPPort8021XTxPeriodStatus, alaDaUNPUserFlushEntry=alaDaUNPUserFlushEntry, alaDaUNPDynamicVlanMCLagConfigStatus=alaDaUNPDynamicVlanMCLagConfigStatus, alaDaUNPRedirectAllowedMaskIPType=alaDaUNPRedirectAllowedMaskIPType, alaDaUNPLocationPolicyTable=alaDaUNPLocationPolicyTable, alaDaQMRGlobalConfig=alaDaQMRGlobalConfig, alaDaHICSvrEntry=alaDaHICSvrEntry, alaDaUNPVxlanProfileMobileTagStatus=alaDaUNPVxlanProfileMobileTagStatus, alaDaCPortalProfEntry=alaDaCPortalProfEntry, alaDaUserNetProfileMaxEgressDepth=alaDaUserNetProfileMaxEgressDepth, alaDaUNPVxlanFarEndIPListEntry=alaDaUNPVxlanFarEndIPListEntry, alaDaUNPProfileMapSpbGroup=alaDaUNPProfileMapSpbGroup, alaDaUNPPortMaxIngressBw=alaDaUNPPortMaxIngressBw, alaDaUNPClassifRuleEntry=alaDaUNPClassifRuleEntry, alaDaUNPPortPassAltProfileName=alaDaUNPPortPassAltProfileName, alaDaUNPEndPointGroup=alaDaUNPEndPointGroup, alaDaUNPEdgeProfPeriodPolicy=alaDaUNPEdgeProfPeriodPolicy, alaDaUNPVxlanFlushVxlanProfile=alaDaUNPVxlanFlushVxlanProfile, alaDaKerberosPortClientPktSwDiscardStats=alaDaKerberosPortClientPktSwDiscardStats, alaDaUNPRedirectProxyServerPort=alaDaUNPRedirectProxyServerPort, alaDaSpbProfileRowStatus=alaDaSpbProfileRowStatus, alaDaUNPPortAaaProfile=alaDaUNPPortAaaProfile, alaDaUNPGroupRuleRowStatus=alaDaUNPGroupRuleRowStatus, alaDaUNPCustDomainRuleTable=alaDaUNPCustDomainRuleTable, alaDaUNPAuthRuleTable=alaDaUNPAuthRuleTable, alaDaUNPVxlanFlushTable=alaDaUNPVxlanFlushTable, alaDaUNPPort8021XEdgeProfName=alaDaUNPPort8021XEdgeProfName, alaDaUNPCustDomainMacRangeRuleTable=alaDaUNPCustDomainMacRangeRuleTable, alaDaUNPMacPortRuleProfile3=alaDaUNPMacPortRuleProfile3, alaDaKerberosGlobalClearStats=alaDaKerberosGlobalClearStats, alaDaMacVlanUserIpAddress=alaDaMacVlanUserIpAddress, alaDaUNPMacRulesVlanTag=alaDaUNPMacRulesVlanTag, alaDaUNPIpNetRuleMask=alaDaUNPIpNetRuleMask, alaDaUnpGroupId=alaDaUnpGroupId, alaDaUNPMacRulesEdgeProf=alaDaUNPMacRulesEdgeProf, alaDaMacVlanUserGroup=alaDaMacVlanUserGroup, alaDaUNPPortPassAltSpbProfileName=alaDaUNPPortPassAltSpbProfileName, alaDaUNPCustDomainEvbGpIdRuleSpbProfileName=alaDaUNPCustDomainEvbGpIdRuleSpbProfileName, alaDaUNPEdgeFlushPortLow=alaDaUNPEdgeFlushPortLow, alaDaUNPCustDomainRuleGroup=alaDaUNPCustDomainRuleGroup, alaDaMacVlanUserExtGroup=alaDaMacVlanUserExtGroup, alaDaUNPEdgeFlushComplete=alaDaUNPEdgeFlushComplete, alaDaKerberosPortStatsEntry=alaDaKerberosPortStatsEntry, alaDaUNPPortTemplate8021XAuthSuppTimeout=alaDaUNPPortTemplate8021XAuthSuppTimeout, alaDaKerberosPortASREQRxStats=alaDaKerberosPortASREQRxStats, alaDaKerberosPortClearStats=alaDaKerberosPortClearStats, alaDaMacVlanUserAuthServerUsed=alaDaMacVlanUserAuthServerUsed, alaDaUNPVxlanProfileFarEndIPListName=alaDaUNPVxlanProfileFarEndIPListName, alaDaUNPEdgeProfName=alaDaUNPEdgeProfName, alaDaUNPProfileCPortalAuthentication=alaDaUNPProfileCPortalAuthentication, alaDaMacVlanUserUnpFromAuthServer=alaDaMacVlanUserUnpFromAuthServer, alaDaUNPCustDomainVlanTagRuleVlan=alaDaUNPCustDomainVlanTagRuleVlan, alaDaUNPCustDomainVlanTagRuleVxlanProfileName=alaDaUNPCustDomainVlanTagRuleVxlanProfileName, alaDaUNPCustDomainIpNetRuleAddrType=alaDaUNPCustDomainIpNetRuleAddrType, alaDaUNPProfileMapVxlanTable=alaDaUNPProfileMapVxlanTable, alaDaMacVlanUserExtMACAddress=alaDaMacVlanUserExtMACAddress, alaDaUNPCustDomainMacRangeRuleProfile1=alaDaUNPCustDomainMacRangeRuleProfile1, alaDaUNPEdgeTemplateGroup=alaDaUNPEdgeTemplateGroup, alaDaUNPCustDomainVlanTagRuleTagPosition=alaDaUNPCustDomainVlanTagRuleTagPosition, alaDaQMRAllowedName=alaDaQMRAllowedName, alaDaMacVlanUserRole=alaDaMacVlanUserRole, alaDaUNPETmpl8021XPassAltEProf=alaDaUNPETmpl8021XPassAltEProf, alaDaSpbProfileTable=alaDaSpbProfileTable, alaDaCPortalAuthPassTable=alaDaCPortalAuthPassTable, alaDaMacUserEntry=alaDaMacUserEntry, alaDaUNPVxlanProfileMulticastMode=alaDaUNPVxlanProfileMulticastMode, alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus=alaDaUNPCustDomainVlanTagRuleMCLagConfigStatus, alaDaHICAllowedIpMask=alaDaHICAllowedIpMask)
mibBuilder.exportSymbols("ALCATEL-IND1-DA-MIB", alaDaUNPMacIpPortRuleVlanTag=alaDaUNPMacIpPortRuleVlanTag, alaDaUNPPort8021XMaxReq=alaDaUNPPort8021XMaxReq, alaDaKerberosIpAddressType=alaDaKerberosIpAddressType, alaDaUNPCustDomainMacRuleProfile3=alaDaUNPCustDomainMacRuleProfile3, alaDaUNPAuthServerDownTimeoutMCLagConfigStatus=alaDaUNPAuthServerDownTimeoutMCLagConfigStatus, alaDaUNPPortRuleProfile2=alaDaUNPPortRuleProfile2, alaDaUNPEdgeProfMaxEgressBw=alaDaUNPEdgeProfMaxEgressBw, alaDaUNPVlanRuleVlanTagPosition=alaDaUNPVlanRuleVlanTagPosition, alaDaUNPVxlanFarEndIPAddressListIP=alaDaUNPVxlanFarEndIPAddressListIP, alaDaUNPIpMaskRuleAddr=alaDaUNPIpMaskRuleAddr, alaDaUNPProfileMapVxlanFarEndIPList=alaDaUNPProfileMapVxlanFarEndIPList, alaDaAuthenticationStatus=alaDaAuthenticationStatus, alaDaUNPPortPassAltVxlanProfileName=alaDaUNPPortPassAltVxlanProfileName, alaDaUNPProfileMapSpbIsid=alaDaUNPProfileMapSpbIsid, alaDaUNPMacIpPortRuleEdgeProf=alaDaUNPMacIpPortRuleEdgeProf, alaDaUNPRuleGroup=alaDaUNPRuleGroup, alaDaUNPCustDomainMacIpRuleIpAddr=alaDaUNPCustDomainMacIpRuleIpAddr, alaDaUNPVlanMapIdent=alaDaUNPVlanMapIdent, alaDaUnpCustomerDomainRowStatus=alaDaUnpCustomerDomainRowStatus, alaDaUNPVxlanProfileEntry=alaDaUNPVxlanProfileEntry, alaDaKerberosPolicyName=alaDaKerberosPolicyName, alaDaCPortalRedirectUrlName=alaDaCPortalRedirectUrlName, alaDaCPortalProfUNPProfile=alaDaCPortalProfUNPProfile, alaDaUNPUserFlushComplete=alaDaUNPUserFlushComplete, alaDaUNPMacRangesGroup=alaDaUNPMacRangesGroup, alaDaUNPMacIpPortRuleIpAddr=alaDaUNPMacIpPortRuleIpAddr, alaDaUNPSpbFlushServiceID=alaDaUNPSpbFlushServiceID, alaDaMacUserIpAddress=alaDaMacUserIpAddress, alaDaUNPProfileInactivityInterval=alaDaUNPProfileInactivityInterval, alaDaUNPIpMaskRuleMaskType=alaDaUNPIpMaskRuleMaskType, alaDaUserNetProfileQosPolicyListName=alaDaUserNetProfileQosPolicyListName, alaDaUNPClassificationRuleGroup=alaDaUNPClassificationRuleGroup, alaDaUNPETmplVlanRowStatus=alaDaUNPETmplVlanRowStatus, alaDaUNPCustDomainIpNetRuleAddr=alaDaUNPCustDomainIpNetRuleAddr, alaDaUNPPortTemplateRedirectPortBounce=alaDaUNPPortTemplateRedirectPortBounce, alaDaHICSvrStatus=alaDaHICSvrStatus, alaDaUNPCustDomainRuleId=alaDaUNPCustDomainRuleId, alaDaUNPCustDomainMacIpRuleProfile3=alaDaUNPCustDomainMacIpRuleProfile3, alaDaHICWebAgentDownloadUrl=alaDaHICWebAgentDownloadUrl, alaDaUNPMacPortRuleMacAddr=alaDaUNPMacPortRuleMacAddr, alaDaUNPETmplVlanTable=alaDaUNPETmplVlanTable, alaDaUNPProfileMaxIngressDepth=alaDaUNPProfileMaxIngressDepth, alaDaSaaProfileName=alaDaSaaProfileName, alaDaUNPProfileMapVxlanRowStatus=alaDaUNPProfileMapVxlanRowStatus, alaDaUNPVlanTagRuleTable=alaDaUNPVlanTagRuleTable, alaDaUNPMacGroupRuleRowStatus=alaDaUNPMacGroupRuleRowStatus, alaDaUNPETmpl8021XSuppTimeoutStatus=alaDaUNPETmpl8021XSuppTimeoutStatus, alaDaUNPETmpl8021XTxPeriodStatus=alaDaUNPETmpl8021XTxPeriodStatus, alaDaUNPPortTemplateVlanVID=alaDaUNPPortTemplateVlanVID, alaIND1DaMIBObjects=alaIND1DaMIBObjects, alaDaUNPPort8021XSuppTimeoutStatus=alaDaUNPPort8021XSuppTimeoutStatus, alaDaHICSvrIpAddrType=alaDaHICSvrIpAddrType, alaDaUnpMCLAGId=alaDaUnpMCLAGId, alaDaUNPETmplTable=alaDaUNPETmplTable, alaDaUNPMacRangeRuleEntry=alaDaUNPMacRangeRuleEntry, alaDaUNPMacRuleProfileName=alaDaUNPMacRuleProfileName, alaDaUNPPortEntry=alaDaUNPPortEntry, alaDaUNPETmpl8021XMaxReqStatus=alaDaUNPETmpl8021XMaxReqStatus, alaDaHICSvrFailMode=alaDaHICSvrFailMode, alaDaUNPRedirectAllowedServerEntry=alaDaUNPRedirectAllowedServerEntry, alaDaCPortalIpAddressType=alaDaCPortalIpAddressType, alaDaMacVlanUserClassificationSource=alaDaMacVlanUserClassificationSource, alaDaUNPGroupRuleEdgeProf=alaDaUNPGroupRuleEdgeProf, alaDaUNPRedirectAllowedRowStatus=alaDaUNPRedirectAllowedRowStatus, alaDaUNPUserRoleProfile3=alaDaUNPUserRoleProfile3, alaDaUnpSourceIpAddr=alaDaUnpSourceIpAddr, alaDaUNPUserFlushAuthType=alaDaUNPUserFlushAuthType, alaDaUNPProfileMapVxlanGroup=alaDaUNPProfileMapVxlanGroup, alaDaUNPPortDefaultSpbProfileName=alaDaUNPPortDefaultSpbProfileName, alaDaUNPCustDomainVlanTagRuleSpbProfileName=alaDaUNPCustDomainVlanTagRuleSpbProfileName, alaDaUNPMacIpGroup=alaDaUNPMacIpGroup, alaDaUNPPortMaxIngressDepth=alaDaUNPPortMaxIngressDepth, alaDaUNPCustDomainIpNetRuleMCLagConfigStatus=alaDaUNPCustDomainIpNetRuleMCLagConfigStatus, alaDaUNPValidityPeriodGroup=alaDaUNPValidityPeriodGroup, alaDaUNPGroupObjects=alaDaUNPGroupObjects, alaDaUNPClassifRuleAuthType=alaDaUNPClassifRuleAuthType, alaDaUNPMacPortRuleProfile2=alaDaUNPMacPortRuleProfile2, alaDaUNPVxlanProfileMulticastIPAddressType=alaDaUNPVxlanProfileMulticastIPAddressType, alaDaUNPPortIngressSourceProfile=alaDaUNPPortIngressSourceProfile, alaDaUNPPortGroup=alaDaUNPPortGroup, alaDaUNPVlanMapTable=alaDaUNPVlanMapTable, alaDaUNPProfileMapSpbVlanXlation=alaDaUNPProfileMapSpbVlanXlation, alaDaUNPLocationPolicyRowStatus=alaDaUNPLocationPolicyRowStatus, alaDaCPortalAuthRowStatus=alaDaCPortalAuthRowStatus, alaDaUNPCustDomainVlanTagRuleProfile1=alaDaUNPCustDomainVlanTagRuleProfile1, alaDaUNPSpbFlushAuthType=alaDaUNPSpbFlushAuthType, alaDaUNPDynamicProfileConfigMCLagConfigStatus=alaDaUNPDynamicProfileConfigMCLagConfigStatus, alaDaUNPCustDomainMacIpRuleProfile2=alaDaUNPCustDomainMacIpRuleProfile2, alaDaUNPCustDomainRuleRowStatus=alaDaUNPCustDomainRuleRowStatus, alaDaUNPPortMacAuthFlag=alaDaUNPPortMacAuthFlag, alaDaUNPMacIpGroupRuleEdgeProf=alaDaUNPMacIpGroupRuleEdgeProf, alaDaUNPCustDomainRuleProfile3=alaDaUNPCustDomainRuleProfile3, alaDaUNPCustDomainVlanTagRuleVlanProfileName=alaDaUNPCustDomainVlanTagRuleVlanProfileName, alaDaMacVlanUserUnpUsed=alaDaMacVlanUserUnpUsed, alaDaUNPETmplDefEProf=alaDaUNPETmplDefEProf, alaDaUNPPort8021XSuppTimeOut=alaDaUNPPort8021XSuppTimeOut, alaDaKerberosUserPort=alaDaKerberosUserPort, alaDaUNPPortTemplateMACAuth=alaDaUNPPortTemplateMACAuth, alaDaUNPETmplGroupId=alaDaUNPETmplGroupId, alaDaUNPProfileLocationPolicy=alaDaUNPProfileLocationPolicy, alaDaUNPUserRoleGroup=alaDaUNPUserRoleGroup, alaDaUNPCustDomainRuleProfile2=alaDaUNPCustDomainRuleProfile2, alaDaUNPValidityPeriodName=alaDaUNPValidityPeriodName, alaDaUNPETmplMacAuthStatus=alaDaUNPETmplMacAuthStatus, alaDaUNPRstrctedRoleRowStatus=alaDaUNPRstrctedRoleRowStatus, alaDaMacVlanUserExtAppID=alaDaMacVlanUserExtAppID, alaDaUNPPortDefaultEdgeProfName=alaDaUNPPortDefaultEdgeProfName, alaDaUNPGroupIdEdgeClassifyGroup=alaDaUNPGroupIdEdgeClassifyGroup, alaDaUNP8021XEdgeUserFlush=alaDaUNP8021XEdgeUserFlush, alaDaKerberosPortASREPRxStats=alaDaKerberosPortASREPRxStats, alaDaUNPProfileMapVxlanEncapVal=alaDaUNPProfileMapVxlanEncapVal, alaDaUserNetProfileSaaProfileName=alaDaUserNetProfileSaaProfileName, alaDaUNPMacPortRuleEntry=alaDaUNPMacPortRuleEntry, alaDaUNPETmplVlanVID=alaDaUNPETmplVlanVID, alaDaUnpCustomerDomainEntry=alaDaUnpCustomerDomainEntry, alaDaUNPRstrctedRolePolicyList=alaDaUNPRstrctedRolePolicyList, alaDaSpbProfileQosPolicyListName=alaDaSpbProfileQosPolicyListName, alaDaUNPProfileMapSpbRowStatus=alaDaUNPProfileMapSpbRowStatus, alaDaHICSvrFailPolicyEntry=alaDaHICSvrFailPolicyEntry, alaDaKerberosGlobalConfig=alaDaKerberosGlobalConfig, alaDaUNPValidityPeriodEndHour=alaDaUNPValidityPeriodEndHour, alaDaHICSvrTable=alaDaHICSvrTable, alaDaUNPPortRuleVlanTag=alaDaUNPPortRuleVlanTag, alaDaMacVlanUserAuthServerIpUsed=alaDaMacVlanUserAuthServerIpUsed, alaDaUNPVxlanProfileVnid=alaDaUNPVxlanProfileVnid, alaDaUNPCustDomainIpNetRuleSpbProfileName=alaDaUNPCustDomainIpNetRuleSpbProfileName, alaDaKerberosServerEntry=alaDaKerberosServerEntry, alaDaUNPVxlanFarEndIPListName=alaDaUNPVxlanFarEndIPListName, alaDaUNPCustDomainMacRangeRuleEdgeProfileName=alaDaUNPCustDomainMacRangeRuleEdgeProfileName, alaDaUNPMacRuleAddr=alaDaUNPMacRuleAddr, alaDaUNPPortVlanEntry=alaDaUNPPortVlanEntry, alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus=alaDaUNPCustDomainMacRangeRuleMCLagConfigStatus, alaDaHICAllowedName=alaDaHICAllowedName, alaDaUNPMacPortRuleRowStatus=alaDaUNPMacPortRuleRowStatus, alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId=alaDaUNPCustDomainEvbGpIdRuleCustomerDomainId, alaDaUNPRestrictedRoleGroup=alaDaUNPRestrictedRoleGroup, alaDaMacVlanUserServiceSapIDIfIndex=alaDaMacVlanUserServiceSapIDIfIndex, alaDaHICAllowedIpMaskType=alaDaHICAllowedIpMaskType, alaDaUNPMacIpPortRuleProfile3=alaDaUNPMacIpPortRuleProfile3, alaDaUNPAuthRuleProfile3=alaDaUNPAuthRuleProfile3, alaDaUNPMacIpPortRuleAddrIpType=alaDaUNPMacIpPortRuleAddrIpType, alaDaUNPDynamicProfileConfigFlag=alaDaUNPDynamicProfileConfigFlag, alaDaMacVlanUserRestAccessStatus=alaDaMacVlanUserRestAccessStatus, alaDaUNPCustDomainVlanTagRuleRowStatus=alaDaUNPCustDomainVlanTagRuleRowStatus, alaDaUNPUserRoleEdgeProfile=alaDaUNPUserRoleEdgeProfile, alaDaMacVlanUserExtIntfNum=alaDaMacVlanUserExtIntfNum, alaDaKerberosPortStatsTable=alaDaKerberosPortStatsTable, alaDaUNPUserFlushProfile=alaDaUNPUserFlushProfile, alaDaUserNetProfileName=alaDaUserNetProfileName, alaDaCPortalProfSuccRedirectUrl=alaDaCPortalProfSuccRedirectUrl, alaDaUNPCustDomainRuleVlanTag=alaDaUNPCustDomainRuleVlanTag, alaDaUNPCustDomainMacIpRuleTable=alaDaUNPCustDomainMacIpRuleTable, alaDaUNPCustDomainIpNetRuleVxlanProfileName=alaDaUNPCustDomainIpNetRuleVxlanProfileName, alaDaUNPRedirectServerIP=alaDaUNPRedirectServerIP, alaDaUNPVxlanProfileMulticastIPAddress=alaDaUNPVxlanProfileMulticastIPAddress, alaDaKerberosUserEntry=alaDaKerberosUserEntry, alaDaUNPProfileMapVxlanVnid=alaDaUNPProfileMapVxlanVnid, alaDaUNPIpGroupRuleNum=alaDaUNPIpGroupRuleNum, alaDaUNPVxlanFarEndIPListIPAddressCount=alaDaUNPVxlanFarEndIPListIPAddressCount, alaDaHICGroup=alaDaHICGroup, alaDaUNPCustDomainMacRuleEdgeProfileName=alaDaUNPCustDomainMacRuleEdgeProfileName, alaDaMacUserMACAddress=alaDaMacUserMACAddress, alaDaUNPPortDomainID=alaDaUNPPortDomainID, alaDaUNPPortPortTemplateName=alaDaUNPPortPortTemplateName, alaDaUnpMacAddr=alaDaUnpMacAddr, alaDaCPortalProfName=alaDaCPortalProfName, alaDaUNPIpPortRuleMaskType=alaDaUNPIpPortRuleMaskType, alaDaUNPMacRangeEntry=alaDaUNPMacRangeEntry, alaDaUNPVlanRuleRowStatus=alaDaUNPVlanRuleRowStatus, alaDaUserNetProfileMobileTag=alaDaUserNetProfileMobileTag, alaDaUNPMacRangeEdgeProf=alaDaUNPMacRangeEdgeProf, alaDaUNPEndPoinRuleRowStatus=alaDaUNPEndPoinRuleRowStatus, alaDaUNPIpMaskRuleAddrType=alaDaUNPIpMaskRuleAddrType, alaDaUNPGlobalConfiguration=alaDaUNPGlobalConfiguration, alaDaUNPCustDomainIpNetRuleProfile1=alaDaUNPCustDomainIpNetRuleProfile1, alaDaMacVlanUserSpbIsid=alaDaMacVlanUserSpbIsid, alaDaUNPEdgeProfCPortalProf=alaDaUNPEdgeProfCPortalProf, alaDaUNPSpbFlushSapIDIfIndex=alaDaUNPSpbFlushSapIDIfIndex, alaDaSaaProfileLatencyThreshold=alaDaSaaProfileLatencyThreshold, alaDaHICAllowedIpAddr=alaDaHICAllowedIpAddr, alaDaUNPCustDomainIpNetRuleRowStatus=alaDaUNPCustDomainIpNetRuleRowStatus, alaDaUNPVxlanFarEndIPListGroup=alaDaUNPVxlanFarEndIPListGroup, alaDaUNPEdgeFlushEntry=alaDaUNPEdgeFlushEntry, alaDaQMRAllowedTable=alaDaQMRAllowedTable, alaDaKerberosServerPktSwDiscardStats=alaDaKerberosServerPktSwDiscardStats, alaDaUNPCustDomainMacRuleProfile1=alaDaUNPCustDomainMacRuleProfile1, alaDaUNPClassifRuleIpAddressType=alaDaUNPClassifRuleIpAddressType, alaDaUNPProfileMapVlanEntry=alaDaUNPProfileMapVlanEntry, alaDaUNPPort8021XAuthStatus=alaDaUNPPort8021XAuthStatus)
