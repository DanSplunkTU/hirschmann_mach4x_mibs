#
# PySNMP MIB module PRVT-PORTS-AGGREGATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-PORTS-AGGREGATION-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:20:51 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, ObjectIdentity, ModuleIdentity, MibIdentifier, iso, TimeTicks, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "IpAddress", "Integer32")
DisplayString, MacAddress, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "TruthValue", "RowStatus")
prvtPortsAggregationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 106))
prvtPortsAggregationMIB.setRevisions(('2010-01-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtPortsAggregationMIB.setRevisionsDescriptions(('Initial',))
if mibBuilder.loadTexts: prvtPortsAggregationMIB.setLastUpdated('201402050000Z')
if mibBuilder.loadTexts: prvtPortsAggregationMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtPortsAggregationMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtPortsAggregationMIB.setDescription('The Ports Aggregation MIB module for\n         managing switch or ipSwitch static and\n         dynamic port aggregation.')
class PrvtPortsAggregationMacSecType(TextualConvention, Integer32):
    description = 'The state of a port with regards to MAC count.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noViolation", 1), ("watermarkReached", 2), ("maxMacCountReached", 3), ("errorState", 4))

prvtPortsAggregationNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0))
prvtPortsAggregationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1))
prvtPortsAggregationDistributionType = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("l2", 1), ("l3", 2), ("l4", 3), ("mpls", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtPortsAggregationDistributionType.setStatus('current')
if mibBuilder.loadTexts: prvtPortsAggregationDistributionType.setDescription('The LACP distribution type.\n         l2 - MAC address based distribution\n         l3 - IP address based distribution\n         l4 - TCP/UDP IP address based distribution\n         mpls -MPLS label based distribution')
portsAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2), )
if mibBuilder.loadTexts: portsAggregationTable.setStatus('current')
if mibBuilder.loadTexts: portsAggregationTable.setDescription('This table contains the status of all the\n         trunks in the system. It can contain two\n         major types: static and dynamic trunks.')
portsAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1), ).setIndexNames((0, "PRVT-PORTS-AGGREGATION-MIB", "portsAggregationName"))
if mibBuilder.loadTexts: portsAggregationEntry.setStatus('current')
if mibBuilder.loadTexts: portsAggregationEntry.setDescription('Ports aggregation entry.')
portsAggregationName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 5)))
if mibBuilder.loadTexts: portsAggregationName.setStatus('current')
if mibBuilder.loadTexts: portsAggregationName.setDescription('Aggregation Name:\n         pattern ag(([1-9])|([1-9][0-9])|(1[0-9][0-9])|(2[0-5][0-6]))')
portsAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationRowStatus.setStatus('current')
if mibBuilder.loadTexts: portsAggregationRowStatus.setDescription('Aggregation row status.')
portsAggregationDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationDescription.setStatus('current')
if mibBuilder.loadTexts: portsAggregationDescription.setDescription('Aggregation description.')
portsAggregationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("network", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationMode.setStatus('current')
if mibBuilder.loadTexts: portsAggregationMode.setDescription('Aggregation mode.')
portsAggregationLacpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpEnable.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpEnable.setDescription('Link Aggregation Control Protocol (LACP) Configuration')
portsAggregationLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpMode.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpMode.setDescription('Aggregation lacp mode.')
portsAggregationLacpAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpAdminKey.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpAdminKey.setDescription('Aggregation administrative key.')
portsAggregationLacpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpId.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpId.setDescription('Specify LACP ID (MAC address format).')
portsAggregationLacpMarker = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpMarker.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpMarker.setDescription('Aggregation lacp marker.')
portsAggregationLacpSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpSystemPriority.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpSystemPriority.setDescription('Aggregation lacp priority.')
portsAggregationOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationOperStatus.setStatus('current')
if mibBuilder.loadTexts: portsAggregationOperStatus.setDescription('Aggregation operational status.')
portsAggregationPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationPortCount.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortCount.setDescription('Aggregation ports count.')
portsAggregationUplinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationUplinkCount.setStatus('current')
if mibBuilder.loadTexts: portsAggregationUplinkCount.setDescription('Aggregation uplink ports count.')
portsAggregationIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInOctets.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInOctets.setDescription('The total number of octets received on the interface,\n         including framing characters.')
portsAggregationIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n         higher (sub-)layer, which were not addressed to a multicast\n         or broadcast address at this sub-layer.')
portsAggregationIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInNUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n         higher (sub-)layer, which were addressed to a multicast or\n         broadcast address at this sub-layer.')
portsAggregationIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInErrors.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInErrors.setDescription('For packet-oriented interfaces, the number of inbound\n         packets that contained errors preventing them from being\n         deliverable to a higher-layer protocol. For character-\n         oriented or fixed-length interfaces, the number of inbound\n         transmission units that contained errors preventing them\n         from being deliverable to a higher-layer protocol.')
portsAggregationIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets\n         received via the interface which were discarded because of\n         an unknown or unsupported protocol. For character-oriented\n         or fixed-length interfaces that support protocol\n         multiplexing the number of transmission units received via\n         the interface which were discarded because of an unknown or\n         unsupported protocol. For any interface that does not\n         support protocol multiplexing, this counter will always be\n         0.')
portsAggregationIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutOctets.setDescription('The total number of octets transmitted out of the\n         interface, including framing characters.')
portsAggregationIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols\n         requested be transmitted, and which were not addressed to a\n         multicast or broadcast address at this sub-layer, including\n         those that were discarded or not sent.')
portsAggregationIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols\n         requested be transmitted, and which were addressed to a\n         multicast or broadcast address at this sub-layer, including\n         those that were discarded or not sent.')
portsAggregationIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutErrors.setDescription('For packet-oriented interfaces, the number of outbound\n         packets that could not be transmitted because of errors.\n         For character-oriented or fixed-length interfaces, the\n         number of outbound transmission units that could not be\n         transmitted because of errors.')
portsAggregationIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n         higher (sub-)layer, which were addressed to a multicast\n         address at this sub-layer. For a MAC layer protocol, this\n         includes both Group and Functional addresses.')
portsAggregationIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a\n         higher (sub-)layer, which were addressed to a broadcast\n         address at this sub-layer.')
portsAggregationIfInDiscardsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfInDiscardsPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfInDiscardsPkts.setDescription('The number of inbound packets which were chosen to be\n         discarded even though no errors had been detected to prevent\n         \n         their being deliverable to a higher-layer protocol. One\n         possible reason for discarding such a packet could be to\n         free up buffer space.')
portsAggregationIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutMulticastPkts.setDescription('The total number of packets that higher-level protocols\n         requested be transmitted, and which were addressed to a\n         multicast address at this sub-layer, including those that\n         were discarded or not sent. For a MAC layer protocol, this\n         includes both Group and Functional addresses.\n         \n         Discontinuities in the value of this counter can occur at\n         re-initialization of the management system, and at other\n         times as indicated by the value of\n         ifCounterDiscontinuityTime.')
portsAggregationIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portsAggregationIfOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols\n         requested be transmitted, and which were addressed to a\n         broadcast address at this sub-layer, including those that\n         were discarded or not sent.')
portsAggregationLacpFastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpFastRate.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpFastRate.setDescription('Specify LACP transmission interval.')
portsAggregationLacpSelectionCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highest-count", 1), ("highest-weight", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpSelectionCriteria.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpSelectionCriteria.setDescription('Specify LACP active Sub-LAG selection criteria.')
portsAggregationLacpTxOnStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpTxOnStandby.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpTxOnStandby.setDescription('Enable transmission of LACP PDUs on links selected as standby.')
portsAggregationLacpForceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationLacpForceActive.setStatus('current')
if mibBuilder.loadTexts: portsAggregationLacpForceActive.setDescription('Force the active Sub-LAG.')
portsAggregationFailoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationFailoverTime.setStatus('current')
if mibBuilder.loadTexts: portsAggregationFailoverTime.setDescription('Time since last Sub-LAG failover.')
portsAggregationMacSecIfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationMacSecIfProfile.setStatus('current')
if mibBuilder.loadTexts: portsAggregationMacSecIfProfile.setDescription('The name of a learning profile from prvtMacSecLrnProfTable.')
portsAggregationMacSecIfCurrMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationMacSecIfCurrMacCount.setStatus('current')
if mibBuilder.loadTexts: portsAggregationMacSecIfCurrMacCount.setDescription('The current MAC count for this entry.')
portsAggregationMacSecIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 35), PrvtPortsAggregationMacSecType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsAggregationMacSecIfState.setStatus('current')
if mibBuilder.loadTexts: portsAggregationMacSecIfState.setDescription('The current state of this entry.')
portsAggregationEvPropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 2, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationEvPropProfile.setStatus('current')
if mibBuilder.loadTexts: portsAggregationEvPropProfile.setDescription('Event propagation profile name, aplied to this aggregation.')
portsAggregationPortsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3), )
if mibBuilder.loadTexts: portsAggregationPortsTable.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsTable.setDescription('This table contains ports in trunk.')
portsAggregationPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3, 1), ).setIndexNames((0, "PRVT-PORTS-AGGREGATION-MIB", "portsAggregationName"), (0, "PRVT-PORTS-AGGREGATION-MIB", "portsAggregationPortsIfIndex"))
if mibBuilder.loadTexts: portsAggregationPortsEntry.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsEntry.setDescription('Ports aggregation entry.')
portsAggregationPortsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portsAggregationPortsIfIndex.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsIfIndex.setDescription('Aggregation port index.')
portsAggregationPortsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationPortsRowStatus.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsRowStatus.setDescription('Aggregation ports row status.')
portsAggregationPortsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationPortsPriority.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsPriority.setDescription('Aggregation port priority.')
portsAggregationPortsSubLag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portsAggregationPortsSubLag.setStatus('current')
if mibBuilder.loadTexts: portsAggregationPortsSubLag.setDescription('Aggregation port Sub-LAG.')
lagMemberLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 1)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationUplinkCount"))
if mibBuilder.loadTexts: lagMemberLinkUp.setStatus('current')
if mibBuilder.loadTexts: lagMemberLinkUp.setDescription('This notification is generated\n         when a port in lag link becomes up.')
lagMemberLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 2)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationUplinkCount"))
if mibBuilder.loadTexts: lagMemberLinkDown.setStatus('current')
if mibBuilder.loadTexts: lagMemberLinkDown.setDescription('This notification is generated\n         when a port in lag link becomes down.')
lagMemberAdd = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 3)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationPortCount"))
if mibBuilder.loadTexts: lagMemberAdd.setStatus('current')
if mibBuilder.loadTexts: lagMemberAdd.setDescription('This notification is generated when a new port is added to \n         a lag link.')
lagMemberRemove = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 4)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationPortCount"))
if mibBuilder.loadTexts: lagMemberRemove.setStatus('current')
if mibBuilder.loadTexts: lagMemberRemove.setDescription('This notification is generated when a port is removed from \n         a lag.')
lagLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 5)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationOperStatus"))
if mibBuilder.loadTexts: lagLinkUp.setStatus('current')
if mibBuilder.loadTexts: lagLinkUp.setDescription('This notification is generated when lag link becomes\n         up.')
lagLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 6)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationOperStatus"))
if mibBuilder.loadTexts: lagLinkDown.setStatus('current')
if mibBuilder.loadTexts: lagLinkDown.setDescription('This notification is generated when lag link becomes\n         down.')
portsAggregationWmarkViolation = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 7)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationName"))
if mibBuilder.loadTexts: portsAggregationWmarkViolation.setStatus('current')
if mibBuilder.loadTexts: portsAggregationWmarkViolation.setDescription('')
portsAggregationViolation = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 106, 0, 8)).setObjects(("PRVT-PORTS-AGGREGATION-MIB", "portsAggregationName"))
if mibBuilder.loadTexts: portsAggregationViolation.setStatus('current')
if mibBuilder.loadTexts: portsAggregationViolation.setDescription('')
mibBuilder.exportSymbols("PRVT-PORTS-AGGREGATION-MIB", portsAggregationPortsIfIndex=portsAggregationPortsIfIndex, portsAggregationWmarkViolation=portsAggregationWmarkViolation, portsAggregationIfInNUcastPkts=portsAggregationIfInNUcastPkts, portsAggregationIfInDiscardsPkts=portsAggregationIfInDiscardsPkts, portsAggregationLacpSelectionCriteria=portsAggregationLacpSelectionCriteria, prvtPortsAggregationObjects=prvtPortsAggregationObjects, portsAggregationPortsSubLag=portsAggregationPortsSubLag, portsAggregationLacpFastRate=portsAggregationLacpFastRate, portsAggregationLacpMarker=portsAggregationLacpMarker, prvtPortsAggregationMIB=prvtPortsAggregationMIB, portsAggregationOperStatus=portsAggregationOperStatus, portsAggregationIfInUnknownProtos=portsAggregationIfInUnknownProtos, portsAggregationIfOutMulticastPkts=portsAggregationIfOutMulticastPkts, portsAggregationLacpTxOnStandby=portsAggregationLacpTxOnStandby, portsAggregationLacpMode=portsAggregationLacpMode, portsAggregationLacpForceActive=portsAggregationLacpForceActive, portsAggregationPortCount=portsAggregationPortCount, portsAggregationMacSecIfCurrMacCount=portsAggregationMacSecIfCurrMacCount, portsAggregationIfOutOctets=portsAggregationIfOutOctets, portsAggregationIfInBroadcastPkts=portsAggregationIfInBroadcastPkts, portsAggregationPortsRowStatus=portsAggregationPortsRowStatus, portsAggregationRowStatus=portsAggregationRowStatus, lagMemberRemove=lagMemberRemove, portsAggregationLacpSystemPriority=portsAggregationLacpSystemPriority, portsAggregationMode=portsAggregationMode, lagMemberAdd=lagMemberAdd, portsAggregationPortsEntry=portsAggregationPortsEntry, PYSNMP_MODULE_ID=prvtPortsAggregationMIB, portsAggregationIfOutErrors=portsAggregationIfOutErrors, portsAggregationEvPropProfile=portsAggregationEvPropProfile, portsAggregationPortsTable=portsAggregationPortsTable, portsAggregationIfOutBroadcastPkts=portsAggregationIfOutBroadcastPkts, portsAggregationPortsPriority=portsAggregationPortsPriority, portsAggregationMacSecIfProfile=portsAggregationMacSecIfProfile, lagMemberLinkDown=lagMemberLinkDown, portsAggregationViolation=portsAggregationViolation, portsAggregationIfOutUcastPkts=portsAggregationIfOutUcastPkts, prvtPortsAggregationNotifications=prvtPortsAggregationNotifications, portsAggregationIfOutNUcastPkts=portsAggregationIfOutNUcastPkts, lagLinkUp=lagLinkUp, portsAggregationEntry=portsAggregationEntry, portsAggregationTable=portsAggregationTable, portsAggregationDescription=portsAggregationDescription, portsAggregationLacpId=portsAggregationLacpId, portsAggregationLacpEnable=portsAggregationLacpEnable, portsAggregationFailoverTime=portsAggregationFailoverTime, prvtPortsAggregationDistributionType=prvtPortsAggregationDistributionType, portsAggregationUplinkCount=portsAggregationUplinkCount, PrvtPortsAggregationMacSecType=PrvtPortsAggregationMacSecType, portsAggregationIfInUcastPkts=portsAggregationIfInUcastPkts, portsAggregationIfInErrors=portsAggregationIfInErrors, lagLinkDown=lagLinkDown, portsAggregationIfInOctets=portsAggregationIfInOctets, lagMemberLinkUp=lagMemberLinkUp, portsAggregationMacSecIfState=portsAggregationMacSecIfState, portsAggregationLacpAdminKey=portsAggregationLacpAdminKey, portsAggregationIfInMulticastPkts=portsAggregationIfInMulticastPkts, portsAggregationName=portsAggregationName)
