#
# PySNMP MIB module ALCATEL-IND1-WEBMGT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-WEBMGT-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:36 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1WebMgt, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1WebMgt")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, IpAddress, iso, ModuleIdentity, MibIdentifier, Counter64, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "IpAddress", "iso", "ModuleIdentity", "MibIdentifier", "Counter64", "NotificationType", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
alcatelIND1WebMgtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1))
alcatelIND1WebMgtMIB.setRevisions(('2010-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1WebMgtMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.',))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                        version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n                Telephone:               North America  +1 800 995 2696\n                                           Latin America  +1 877 919 9526\n                                             Europe         +31 23 556 0100\n                                       Asia           +65 394 7933\n                                         All Other      +1 818 878 4507\n\n             Electronic Mail:         support@ind.alcatel.com\n                        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 WebView - web based embedded device manager.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1WebMgtMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 0))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBNotifications.setDescription('Branch For WebView MIB Subsystem Notifications.')
alcatelIND1WebMgtMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBObjects.setDescription('Branch For WebView Subsystem Managed Objects.')
alcatelIND1WebMgtMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBConformance.setDescription('Branch For WebView Subsystem Conformance Information.')
alcatelIND1WebMgtMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBGroups.setDescription('Branch For WebView Subsystem Groups of managed objects.')
alcatelIND1WebMgtMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtMIBCompliances.setDescription('Branch For WebView Subsystem Compliance Statements.')
alaIND1WebMgtAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIND1WebMgtAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtAdminStatus.setDescription('Enable/Disable access to WebView.  If WebView access is disabled, the\n            WebView server will not be disabled automatically.')
alaIND1WebMgtSSL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIND1WebMgtSSL.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtSSL.setDescription('Enable/Disable forced SSL for WebView.')
alaIND1WebMgtHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(80, 80), ValueRangeConstraint(1024, 65535), )).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIND1WebMgtHttpPort.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtHttpPort.setDescription("The user configurable TCP port for switch's\n                 http access. Default is 80.")
alaIND1WebMgtHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(443, 443), ValueRangeConstraint(1024, 65535), )).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIND1WebMgtHttpsPort.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtHttpsPort.setDescription("The user configurable TCP port for switch's https\n                 access. Default is 443.")
alaIND1WebMgtServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("restarting", 3), ("error", 4))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIND1WebMgtServerStatus.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtServerStatus.setDescription('Enable/Disable WebView embedded server.\n             If the WebView server is disabled and WebView access is enabled, access will be\n             automatically disabled.  However, if the server was disabled and changes to enabled,\n             WebView access will not be automatically enabled.\n             Status restarting and error are max-access read-only\n             (the error code string can be read using alaIND1WebMgtServerError).')
alaIND1WebMgtServerError = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIND1WebMgtServerError.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtServerError.setDescription("Error code string when WebView Server is in error status.\n             Format is 'Error Num: {Number}. {String message}.' where\n             {Number} is an integer representing the error code and\n             {String message} is the error string message.")
alcatelIND1WebMgtCertObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 8))
if mibBuilder.loadTexts: alcatelIND1WebMgtCertObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtCertObjects.setDescription('Branch For WebView SSL Certificate Objects.')
alcatelIND1WebMgtCertFile = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("default", 2), ("user", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1WebMgtCertFile.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtCertFile.setDescription('Triggers certificate file to be synchronize across the chassis.\n            The default value may not be used when setting this object.\n            The default will always be returned when getting this object.')
alcatelIND1WebMgtCertMD5 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 8, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alcatelIND1WebMgtCertMD5.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1WebMgtCertMD5.setDescription('The md5 of the certificate indicated by alcatelIND1WebMgtCertFile.\n            This value can be filled in when doing a set but it must match the md5\n            of the file on the primary master CMM. This object will always return\n            the default value.')
webMgtTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 7))
webMgtServerErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 0, 1)).setObjects(("ALCATEL-IND1-WEBMGT-MIB", "webMgtServerError"))
if mibBuilder.loadTexts: webMgtServerErrorTrap.setStatus('current')
if mibBuilder.loadTexts: webMgtServerErrorTrap.setDescription('This trap is sent to management station(s) when the\n             Web Management server goes into error state after\n             crashing twice within a minute.')
webMgtServerError = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 1, 7, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webMgtServerError.setStatus('current')
if mibBuilder.loadTexts: webMgtServerError.setDescription('Error code string of WebView Server error, same as alaIND1WebMgtServerError.')
alaIND1WebMgtConfigMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtConfigMIBGroup"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtNotificationGroup"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtConfigMIBCertGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1WebMgtConfigMIBCompliance = alaIND1WebMgtConfigMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtConfigMIBCompliance.setDescription('Compliance statement for Learned Port Security.')
alaIND1WebMgtConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtAdminStatus"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtSSL"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtHttpPort"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtHttpsPort"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtServerStatus"), ("ALCATEL-IND1-WEBMGT-MIB", "alaIND1WebMgtServerError"), ("ALCATEL-IND1-WEBMGT-MIB", "webMgtServerError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1WebMgtConfigMIBGroup = alaIND1WebMgtConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtConfigMIBGroup.setDescription('Collection of objects for global configuration parameters defining\n                         the behavior of the embedded web server.')
alaIND1WebMgtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-WEBMGT-MIB", "webMgtServerErrorTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1WebMgtNotificationGroup = alaIND1WebMgtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtNotificationGroup.setDescription('Collection of notifications for Web Management.')
alaIND1WebMgtConfigMIBCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 17, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-WEBMGT-MIB", "alcatelIND1WebMgtCertFile"), ("ALCATEL-IND1-WEBMGT-MIB", "alcatelIND1WebMgtCertMD5"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1WebMgtConfigMIBCertGroup = alaIND1WebMgtConfigMIBCertGroup.setStatus('current')
if mibBuilder.loadTexts: alaIND1WebMgtConfigMIBCertGroup.setDescription("Collection of objects for global configuration parameters defining\n                         the behavior of the embedded web server's SSL certificate.")
mibBuilder.exportSymbols("ALCATEL-IND1-WEBMGT-MIB", alcatelIND1WebMgtMIB=alcatelIND1WebMgtMIB, alcatelIND1WebMgtMIBNotifications=alcatelIND1WebMgtMIBNotifications, alaIND1WebMgtConfigMIBGroup=alaIND1WebMgtConfigMIBGroup, alaIND1WebMgtServerError=alaIND1WebMgtServerError, webMgtServerErrorTrap=webMgtServerErrorTrap, alaIND1WebMgtHttpPort=alaIND1WebMgtHttpPort, alcatelIND1WebMgtCertFile=alcatelIND1WebMgtCertFile, alaIND1WebMgtNotificationGroup=alaIND1WebMgtNotificationGroup, alcatelIND1WebMgtMIBConformance=alcatelIND1WebMgtMIBConformance, alcatelIND1WebMgtMIBGroups=alcatelIND1WebMgtMIBGroups, alaIND1WebMgtConfigMIBCompliance=alaIND1WebMgtConfigMIBCompliance, alcatelIND1WebMgtMIBCompliances=alcatelIND1WebMgtMIBCompliances, webMgtTrapsObj=webMgtTrapsObj, PYSNMP_MODULE_ID=alcatelIND1WebMgtMIB, alaIND1WebMgtConfigMIBCertGroup=alaIND1WebMgtConfigMIBCertGroup, alcatelIND1WebMgtMIBObjects=alcatelIND1WebMgtMIBObjects, webMgtServerError=webMgtServerError, alaIND1WebMgtAdminStatus=alaIND1WebMgtAdminStatus, alaIND1WebMgtSSL=alaIND1WebMgtSSL, alaIND1WebMgtHttpsPort=alaIND1WebMgtHttpsPort, alaIND1WebMgtServerStatus=alaIND1WebMgtServerStatus, alcatelIND1WebMgtCertObjects=alcatelIND1WebMgtCertObjects, alcatelIND1WebMgtCertMD5=alcatelIND1WebMgtCertMD5)
