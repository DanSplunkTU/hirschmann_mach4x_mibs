#
# PySNMP MIB module PRVT-RAPS-SVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-RAPS-SVC-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:20:51 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PrvtRapsMonitoringMethodType, PrvtRapsActionType, PrvtRapsLinkOperStatusType, PrvtRapsInstIndexType, PrvtRapsRoleType, PrvtRapsTopPriCmdType, PrvtRapsInstStatusType, PrvtRapsWaitTimerType, PrvtRapsVlanIdType, PrvtRapsHoldOffType, PrvtRapsReceivedInfoType, PrvtRapsReceivedCommandType, PrvtRapsCfmLevelType, PrvtRapsGuardTimerType, PrvtRapsLinkAggIdType, PrvtRapsMepIdType, PrvtRapsStatesType, PrvtRapsBlockTimerType, PrvtRapsRingIdType = mibBuilder.importSymbols("PRVT-RAPS-MIB", "PrvtRapsMonitoringMethodType", "PrvtRapsActionType", "PrvtRapsLinkOperStatusType", "PrvtRapsInstIndexType", "PrvtRapsRoleType", "PrvtRapsTopPriCmdType", "PrvtRapsInstStatusType", "PrvtRapsWaitTimerType", "PrvtRapsVlanIdType", "PrvtRapsHoldOffType", "PrvtRapsReceivedInfoType", "PrvtRapsReceivedCommandType", "PrvtRapsCfmLevelType", "PrvtRapsGuardTimerType", "PrvtRapsLinkAggIdType", "PrvtRapsMepIdType", "PrvtRapsStatesType", "PrvtRapsBlockTimerType", "PrvtRapsRingIdType")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "serviceAccessSwitch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Counter64, MibIdentifier, Gauge32, ObjectIdentity, iso, NotificationType, Unsigned32, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Counter64", "MibIdentifier", "Gauge32", "ObjectIdentity", "iso", "NotificationType", "Unsigned32", "Counter32", "ModuleIdentity")
DisplayString, TruthValue, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowStatus", "MacAddress", "TextualConvention")
prvtRapsSvcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 7, 6))
prvtRapsSvcMIB.setRevisions(('2011-03-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtRapsSvcMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtRapsSvcMIB.setLastUpdated('201103020000Z')
if mibBuilder.loadTexts: prvtRapsSvcMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtRapsSvcMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtRapsSvcMIB.setDescription('The SNMP MIB module for Ring Automatic Protection Switching with Service Support (G.8032).')
prvtRapsSvcMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 0))
prvtRapsSvcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1))
prvtRapsSvcInstTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1), )
if mibBuilder.loadTexts: prvtRapsSvcInstTable.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstTable.setDescription('R-APS Instance table.\n         Each entry in this table defines an instance of a Ring APS.')
prvtRapsSvcInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1, 1), ).setIndexNames((0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstIndex"))
if mibBuilder.loadTexts: prvtRapsSvcInstEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstEntry.setDescription('An entry in prvtRapsSvcInstTable.')
prvtRapsSvcInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1, 1, 1), PrvtRapsInstIndexType())
if mibBuilder.loadTexts: prvtRapsSvcInstIndex.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstIndex.setDescription('An arbitrary index uniquely identifying a Ring APS instance.')
prvtRapsSvcInstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstRowStatus.setDescription('The RowStatus for this R-APS instance.')
prvtRapsSvcInstCfmDomainLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1, 1, 3), PrvtRapsCfmLevelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstCfmDomainLevel.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstCfmDomainLevel.setDescription('The CFM domain level for this R-APS instance.\n         Must perform shutdown to change this object.')
prvtRapsSvcInstDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstDescription.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstDescription.setDescription('RAPS instance description.')
prvtRapsSvcInstSubRingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2), )
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingTable.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingTable.setDescription('R-APS Instance Sub-ring Table\n         Each entry in this table defines a sub-ring belonging to a R-APS instance.\n         Sub-rings are not available in version 1 mode.')
prvtRapsSvcInstSubRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1), ).setIndexNames((0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstIndex"), (0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingIndex"))
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingEntry.setDescription('An entry in prvtRapsSvcInstSubRingTable.')
prvtRapsSvcInstSubRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 1), PrvtRapsInstIndexType())
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingIndex.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingIndex.setDescription('An arbitrary index uniquely identifying a sub-ring for this R-APS instance.')
prvtRapsSvcInstSubRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRowStatus.setDescription('The RowStatus for this sub-ring.')
prvtRapsSvcInstSubRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 3), PrvtRapsRingIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingId.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingId.setDescription('The ring ID for this sub-ring.')
prvtRapsSvcInstSubRingRole = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 4), PrvtRapsRoleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRole.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRole.setDescription('The role of the node inside this sub-ring.\n         Must perform shutdown to change this object.')
prvtRapsSvcInstSubRingVirtChanService = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVirtChanService.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVirtChanService.setDescription('Configures the virtual channel VLAN for this sub-ring.\n         Must be a VLAN from the prvtRapsInstMonVlanTable.\n         No two sub-rings can use the same VLAN for the virtual channel VLAN.')
prvtRapsSvcInstSubRingRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRevertiveMode.setDescription("Set to 'true' to select revertive behavior for this sub-ring.")
prvtRapsSvcInstSubRingHoldOffTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 7), PrvtRapsHoldOffType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingHoldOffTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingHoldOffTimer.setDescription('The hold-off timer time-out value for this sub-ring.')
prvtRapsSvcInstSubRingWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 8), PrvtRapsWaitTimerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingWaitTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingWaitTimer.setDescription('The wait-to-restore timer time-out value for this sub-ring.')
prvtRapsSvcInstSubRingGuardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 9), PrvtRapsGuardTimerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingGuardTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingGuardTimer.setDescription('The guard timer time-out value for this sub-ring.')
prvtRapsSvcInstSubRingBlockTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 10), PrvtRapsBlockTimerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingBlockTimer.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingBlockTimer.setDescription('The wait to block timer time-out value for this sub-ring.')
prvtRapsSvcInstSubRingPropTopChng = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPropTopChng.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPropTopChng.setDescription("Set to 'true' to enable topology change propagation for this sub-ring.")
prvtRapsSvcInstSubRingShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingShutdown.setDescription("Set to 'true' to de-activate this sub-ring.")
prvtRapsSvcInstSubRingClear = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 13), PrvtRapsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingClear.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingClear.setDescription('Send the Clear command to this sub-ring.')
prvtRapsSvcInstSubRingManualSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 14), PrvtRapsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingManualSwitch.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingManualSwitch.setDescription('Send the Manual Switch command to this sub-ring.')
prvtRapsSvcInstSubRingForcedSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 15), PrvtRapsActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingForcedSwitch.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingForcedSwitch.setDescription('Send the Forced Switch command to this sub-ring.')
prvtRapsSvcInstSubRingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 16), PrvtRapsInstStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingOperStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingOperStatus.setDescription('The operational status of this sub-ring.')
prvtRapsSvcInstSubRingRapsState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 17), PrvtRapsStatesType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRapsState.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRapsState.setDescription('The current state of this sub-ring.')
prvtRapsSvcInstSubRingTopPriCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 18), PrvtRapsTopPriCmdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingTopPriCmd.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingTopPriCmd.setDescription('The received Top Priority Request and Status value for this sub-ring.')
prvtRapsSvcInstSubRingPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortName.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortName.setDescription('The textual name of the port belonging to this sub-ring.\n         For a physical port, the format is U/S/P.\n         For a LAG interface, the format is agX.')
prvtRapsSvcInstSubRingLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 20), PrvtRapsLinkOperStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLinkStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLinkStatus.setDescription('The operational status of the port belonging to this sub-ring.')
prvtRapsSvcInstSubRingRcvdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 21), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdNodeId.setDescription('The MAC address of the remote R-APS device connected to the port belonging to this sub-ring.')
prvtRapsSvcInstSubRingRcvdCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 22), PrvtRapsReceivedCommandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdCmd.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdCmd.setDescription('The command received on the port belonging to this sub-ring.')
prvtRapsSvcInstSubRingRcvdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 23), PrvtRapsReceivedInfoType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdInfo.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingRcvdInfo.setDescription('The info received on the port belonging to this sub-ring.')
prvtRapsSvcInstSubRingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingDescription.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingDescription.setDescription('RAPS instance sub-ring description.')
prvtRapsSvcInstSubRingVcRcvdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 25), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdNodeId.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdNodeId.setDescription('The MAC address of the remote R-APS device connected through the virtual channel.')
prvtRapsSvcInstSubRingVcRcvdCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 26), PrvtRapsReceivedCommandType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdCmd.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdCmd.setDescription('The command received through the virtual channel belonging to this sub-ring.')
prvtRapsSvcInstSubRingVcRcvdInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 27), PrvtRapsReceivedInfoType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdInfo.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingVcRcvdInfo.setDescription('The info received through the virtual channel belonging to this sub-ring.')
prvtRapsSvcInstSubRingControlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 2, 1, 28), PrvtRapsVlanIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingControlVlan.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingControlVlan.setDescription('The control VLAN for this R-APS sub-ring instance.\n         This object must be set to the ID of an existing VLAN.\n         Each R-APS sub-ring instance must use a unique VLAN for the control VLAN.\n         Must perform shutdown to change this object.')
prvtRapsSvcInstSubRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3), )
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortTable.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortTable.setDescription('R-APS Instance Sub-ring port Table\n         An entry in this table defines a physical port belonging to a sub-ring.\n         Exactly one interface must be defined per sub-ring. This includes physical\n         ports (defined in prvtRapsInstSubRingPortTable) and LAG interfaces (defined\n         in prvtRapsInstSubRingLagTable).\n         A sub-ring port can not be part of the main ring.')
prvtRapsSvcInstSubRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3, 1), ).setIndexNames((0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstIndex"), (0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortEntry.setDescription('An entry in prvtRapsInstSubRingPortTable.')
prvtRapsSvcInstSubRingPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortRowStatus.setDescription('The RowStatus for this sub-ring port.')
prvtRapsSvcInstSubRingPortMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3, 1, 2), PrvtRapsMepIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortMep.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortMep.setDescription('The peer maintenance entity group end point ID that should monitor this sub-ring port.\n         A sub-ring MEP can not be used in another ring.')
prvtRapsSvcInstSubRingPortRpl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortRpl.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortRpl.setDescription("Set to 'true' to define this sub-ring port as a Ring Protection Link port.\n         Exactly one RPL port must be defined when sub-ring role (prvtRapsInstSubRingRole)\n         is not 'simpleNode'.\n         In 'simpleNode' role, no RPL ports must be defined.")
prvtRapsSvcInstSubRingPortMonitoringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 3, 1, 4), PrvtRapsMonitoringMethodType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortMonitoringMethod.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingPortMonitoringMethod.setDescription('Ethernet ring protection monitoring methods')
prvtRapsSvcInstSubRingLagTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4), )
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagTable.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagTable.setDescription('R-APS Instance Sub-ring LAG interface Table\n         An entry in this table defines a LAG interface belonging to a sub-ring.\n         Exactly one interface must be defined per sub-ring. This includes physical\n         ports (defined in prvtRapsInstSubRingPortTable) and LAG interfaces (defined\n         in prvtRapsInstSubRingLagTable).')
prvtRapsSvcInstSubRingLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1), ).setIndexNames((0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstIndex"), (0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingIndex"), (0, "PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingLagId"))
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagEntry.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagEntry.setDescription('An entry in prvtRapsInstSubRingLagTable.')
prvtRapsSvcInstSubRingLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1, 1), PrvtRapsLinkAggIdType())
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagId.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagId.setDescription('Uniquely identifies a LAG interface belonging to a sub-ring.\n         Must be set to the LAG ID of an existing LAG interface.\n         A sub-ring LAG port can not be part of the main ring.')
prvtRapsSvcInstSubRingLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagRowStatus.setDescription('The RowStatus for this sub-ring LAG interface.')
prvtRapsSvcInstSubRingLagMep = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1, 3), PrvtRapsMepIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagMep.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagMep.setDescription('The peer maintenance entity group end point ID that should monitor this sub-ring LAG interface.\n         A sub-ring MEP can not be used in another ring.')
prvtRapsSvcInstSubRingLagRpl = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagRpl.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagRpl.setDescription("Set to 'true' to define this sub-ring LAG port as a Ring Protection Link port.\n         Exactly one RPL port must be defined when sub-ring role (prvtRapsInstSubRingRole)\n         is not 'simpleNode'.\n         In 'simpleNode' role, no RPL ports must be defined.")
prvtRapsSvcInstSubRingLagMonitoringMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 1, 4, 1, 5), PrvtRapsMonitoringMethodType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagMonitoringMethod.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingLagMonitoringMethod.setDescription('Ethernet ring protection monitoring methods')
prvtRapsSvcInstSubRingDefectAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 0, 1)).setObjects(("PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingOperStatus"), ("PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingControlVlan"))
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingDefectAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingDefectAlarm.setDescription('This trap will be sent by any subring instance when it notices a defect.\n         So far only the situation when two or more RPL-owners are defined\n         in the ring is identified as a defect. This scenario is noticed when\n         the instance with the RPL-Owner role receives a RAPS packet with the\n         RB bit set in its status field from a different NodeID than its own.\n         The management entity receiving the notification can identify\n         the system from the network source address of the\n         notification, and can identify the instance reporting the change\n         by the indices in the OID of the prvtRapsInstSubRingOperStatus\n         variable in the notification.')
prvtRapsSvcInstSubRingSwitchoverAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 6, 0, 2)).setObjects(("PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingRapsState"), ("PRVT-RAPS-SVC-MIB", "prvtRapsSvcInstSubRingControlVlan"))
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingSwitchoverAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtRapsSvcInstSubRingSwitchoverAlarm.setDescription('This trap will be sent by any subring instance when it changes state.\n         The management entity receiving the notification can identify\n         the system from the network source address of the\n         notification, and can identify the instance reporting the change\n         by the indices in the OID of the prvtRapsInstSubRingRapsState\n         variable in the notification.')
mibBuilder.exportSymbols("PRVT-RAPS-SVC-MIB", prvtRapsSvcInstSubRingPropTopChng=prvtRapsSvcInstSubRingPropTopChng, prvtRapsSvcInstSubRingRcvdNodeId=prvtRapsSvcInstSubRingRcvdNodeId, prvtRapsSvcInstSubRingVcRcvdInfo=prvtRapsSvcInstSubRingVcRcvdInfo, prvtRapsSvcInstSubRingPortTable=prvtRapsSvcInstSubRingPortTable, prvtRapsSvcMIBNotifications=prvtRapsSvcMIBNotifications, prvtRapsSvcInstSubRingRcvdCmd=prvtRapsSvcInstSubRingRcvdCmd, prvtRapsSvcMIB=prvtRapsSvcMIB, prvtRapsSvcInstSubRingVirtChanService=prvtRapsSvcInstSubRingVirtChanService, prvtRapsSvcInstSubRingLinkStatus=prvtRapsSvcInstSubRingLinkStatus, prvtRapsSvcInstSubRingVcRcvdNodeId=prvtRapsSvcInstSubRingVcRcvdNodeId, prvtRapsSvcInstSubRingPortMep=prvtRapsSvcInstSubRingPortMep, prvtRapsSvcInstSubRingEntry=prvtRapsSvcInstSubRingEntry, prvtRapsSvcInstSubRingTable=prvtRapsSvcInstSubRingTable, prvtRapsSvcInstSubRingId=prvtRapsSvcInstSubRingId, prvtRapsSvcInstSubRingBlockTimer=prvtRapsSvcInstSubRingBlockTimer, prvtRapsSvcInstSubRingLagMonitoringMethod=prvtRapsSvcInstSubRingLagMonitoringMethod, prvtRapsSvcInstSubRingDefectAlarm=prvtRapsSvcInstSubRingDefectAlarm, prvtRapsSvcInstSubRingSwitchoverAlarm=prvtRapsSvcInstSubRingSwitchoverAlarm, prvtRapsSvcInstSubRingLagEntry=prvtRapsSvcInstSubRingLagEntry, prvtRapsSvcInstSubRingRole=prvtRapsSvcInstSubRingRole, prvtRapsSvcInstCfmDomainLevel=prvtRapsSvcInstCfmDomainLevel, prvtRapsSvcInstSubRingPortEntry=prvtRapsSvcInstSubRingPortEntry, prvtRapsSvcInstSubRingTopPriCmd=prvtRapsSvcInstSubRingTopPriCmd, prvtRapsSvcInstSubRingGuardTimer=prvtRapsSvcInstSubRingGuardTimer, PYSNMP_MODULE_ID=prvtRapsSvcMIB, prvtRapsSvcInstSubRingHoldOffTimer=prvtRapsSvcInstSubRingHoldOffTimer, prvtRapsSvcInstSubRingLagMep=prvtRapsSvcInstSubRingLagMep, prvtRapsSvcInstSubRingVcRcvdCmd=prvtRapsSvcInstSubRingVcRcvdCmd, prvtRapsSvcInstSubRingIndex=prvtRapsSvcInstSubRingIndex, prvtRapsSvcInstSubRingLagId=prvtRapsSvcInstSubRingLagId, prvtRapsSvcInstSubRingWaitTimer=prvtRapsSvcInstSubRingWaitTimer, prvtRapsSvcInstSubRingRcvdInfo=prvtRapsSvcInstSubRingRcvdInfo, prvtRapsSvcInstSubRingDescription=prvtRapsSvcInstSubRingDescription, prvtRapsSvcInstSubRingClear=prvtRapsSvcInstSubRingClear, prvtRapsSvcInstSubRingPortRpl=prvtRapsSvcInstSubRingPortRpl, prvtRapsSvcInstEntry=prvtRapsSvcInstEntry, prvtRapsSvcInstSubRingForcedSwitch=prvtRapsSvcInstSubRingForcedSwitch, prvtRapsSvcInstSubRingPortRowStatus=prvtRapsSvcInstSubRingPortRowStatus, prvtRapsSvcInstSubRingShutdown=prvtRapsSvcInstSubRingShutdown, prvtRapsSvcInstSubRingRapsState=prvtRapsSvcInstSubRingRapsState, prvtRapsSvcInstSubRingLagRpl=prvtRapsSvcInstSubRingLagRpl, prvtRapsSvcInstSubRingPortMonitoringMethod=prvtRapsSvcInstSubRingPortMonitoringMethod, prvtRapsSvcInstSubRingRowStatus=prvtRapsSvcInstSubRingRowStatus, prvtRapsSvcInstSubRingRevertiveMode=prvtRapsSvcInstSubRingRevertiveMode, prvtRapsSvcInstDescription=prvtRapsSvcInstDescription, prvtRapsSvcInstTable=prvtRapsSvcInstTable, prvtRapsSvcInstSubRingLagRowStatus=prvtRapsSvcInstSubRingLagRowStatus, prvtRapsSvcInstSubRingControlVlan=prvtRapsSvcInstSubRingControlVlan, prvtRapsSvcInstSubRingPortName=prvtRapsSvcInstSubRingPortName, prvtRapsSvcMIBObjects=prvtRapsSvcMIBObjects, prvtRapsSvcInstSubRingOperStatus=prvtRapsSvcInstSubRingOperStatus, prvtRapsSvcInstRowStatus=prvtRapsSvcInstRowStatus, prvtRapsSvcInstSubRingLagTable=prvtRapsSvcInstSubRingLagTable, prvtRapsSvcInstSubRingManualSwitch=prvtRapsSvcInstSubRingManualSwitch, prvtRapsSvcInstIndex=prvtRapsSvcInstIndex)
