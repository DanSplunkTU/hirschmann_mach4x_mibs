#
# PySNMP MIB module ALCATEL-IND1-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-AAA-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:30 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1AAA, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1AAA")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, NotificationType, MibIdentifier, ModuleIdentity, Unsigned32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, TimeTicks, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "NotificationType", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "TimeTicks", "Integer32", "iso")
MacAddress, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1AAAMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1))
alcatelIND1AAAMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1AAAMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1AAAMIB.setLastUpdated('201311070000Z')
if mibBuilder.loadTexts: alcatelIND1AAAMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1AAAMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                      Alcatel-Lucent, Enterprise Solutions Division\n                    (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1AAAMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Authentication, Authorization, and Accounting (AAA) Subsystem.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1AAAMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1))
if mibBuilder.loadTexts: alcatelIND1AAAMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1AAAMIBObjects.setDescription('Branch For Authentication, Authorization, and Accounting (AAA)\n            Subsystem Managed Objects.')
alcatelIND1AAAMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2))
if mibBuilder.loadTexts: alcatelIND1AAAMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1AAAMIBConformance.setDescription('Branch For Authentication, Authorization, and Accounting (AAA)\n            Subsystem Conformance Information.')
alcatelIND1AAAMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1AAAMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1AAAMIBGroups.setDescription('Branch For Authentication, Authorization, and Accounting (AAA)\n            Subsystem Units Of Conformance.')
alcatelIND1AAAMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1AAAMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1AAAMIBCompliances.setDescription('Branch For Authentication, Authorization, and Accounting (AAA)\n            Subsystem Compliance Statements.')
aaaServerMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1))
aaaServerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1), )
if mibBuilder.loadTexts: aaaServerTable.setStatus('current')
if mibBuilder.loadTexts: aaaServerTable.setDescription('This table shows current configuration for each AAA server.')
aaaServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaasName"))
if mibBuilder.loadTexts: aaaServerEntry.setStatus('current')
if mibBuilder.loadTexts: aaaServerEntry.setDescription('An AAA server configuration identified by its protocol\n             and its index. An entry is created/removed when a server\n             is defined or undefined with IOS configuration commands\n             via CLI or by issuing appropriate sets to this table\n             using snmp.')
aaasName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: aaasName.setStatus('current')
if mibBuilder.loadTexts: aaasName.setDescription('Name of the server.\n            This name is given by the operator to refer the server.')
aaasProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("radius", 1), ("ldap", 2), ("ace", 3), ("tacacs", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasProtocol.setStatus('current')
if mibBuilder.loadTexts: aaasProtocol.setDescription('Protocol used with the server:\n                 radius(1) - RADIUS\n                   ldap(2) - LDAP\n                    ace(3) - ACE\n                 tacacs(4) - TACACS+')
aaasHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasHostName.setStatus('current')
if mibBuilder.loadTexts: aaasHostName.setDescription('DNS name of the server host.')
aaasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasIpAddress.setStatus('current')
if mibBuilder.loadTexts: aaasIpAddress.setDescription('IP address of the server host.')
aaasHostName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasHostName2.setStatus('current')
if mibBuilder.loadTexts: aaasHostName2.setDescription('DNS name of the backup server host.')
aaasIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasIpAddress2.setStatus('current')
if mibBuilder.loadTexts: aaasIpAddress2.setDescription('IP address of the backup server host.')
aaasRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRetries.setStatus('current')
if mibBuilder.loadTexts: aaasRetries.setDescription(' Number of retries the switch makes to the server to\n            authenticate a user before trying the next backup server.\n            The default value is 3.')
aaasTimout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasTimout.setStatus('current')
if mibBuilder.loadTexts: aaasTimout.setDescription('Time-out for server replies to authentication requests.\n            The default value is 2.')
aaasRadKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRadKey.setStatus('current')
if mibBuilder.loadTexts: aaasRadKey.setDescription('The shared secret is a string of characters known to the switch\n            and to the RADIUS server, but it is not sent out over the network.\n            The secret can be any text string and must be configured here as\n            well as on the server. The secret is stored encrypted using a two\n            way algorithm.')
aaasRadAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1645)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRadAuthPort.setStatus('current')
if mibBuilder.loadTexts: aaasRadAuthPort.setDescription('For RADIUS server only.\n            Port number for authentication request;\n            the host is not used for authentication if set to 0.\n            The default value is 1645.')
aaasRadAcctPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1646)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRadAcctPort.setStatus('current')
if mibBuilder.loadTexts: aaasRadAcctPort.setDescription('For RADIUS server only.\n            Port number for accounting request;\n            the host is not used for authentication if set to 0.\n            The default value is 1646.')
aaasLdapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapPort.setStatus('current')
if mibBuilder.loadTexts: aaasLdapPort.setDescription('For LDAP server only.\n            Port number for LDAP server host.')
aaasLdapDn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapDn.setStatus('current')
if mibBuilder.loadTexts: aaasLdapDn.setDescription('For LDAP server only.\n            the super user dn, i.e., the administrative distinguished name\n            recognized by the LDAP-enabled directory servers\n            (e.g., cn=manager)')
aaasLdapPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapPasswd.setStatus('current')
if mibBuilder.loadTexts: aaasLdapPasswd.setDescription('For LDAP server only.\n            the super user password, i.e., the administrative password\n            recognized by LDAP-enabled directory servers (e.g., secret).\n            The secret is stored encrypted using a two way algorithm.')
aaasLdapSearchBase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapSearchBase.setStatus('current')
if mibBuilder.loadTexts: aaasLdapSearchBase.setDescription('For LDAP server only.\n             Search base recognized by LDAP-enabled\n             directory servers (e.g.,o=company, c=US).')
aaasLdapServType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ns", 0), ("generic", 1), ("netscape", 2), ("novell", 3), ("sun", 4), ("microsoft", 5))).clone('netscape')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapServType.setStatus('current')
if mibBuilder.loadTexts: aaasLdapServType.setDescription('For LDAP server only.\n             Directory server type used in LDAP Authentication:\n                        ns(0) - non significant value\n                   generic(1) - Generic Schema\n                  netscape(2) - Netscape Directory Server\n                    novell(3) - Novell NDS\n                       sun(4) - Sun Directory Services\n                 microsoft(5) - Microsoft Active Directory')
aaasLdapEnableSsl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ns", 0), ("true", 1), ("false", 2))).clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapEnableSsl.setStatus('current')
if mibBuilder.loadTexts: aaasLdapEnableSsl.setDescription('Only for LDAP server.\n            Specify if the connection between the swtich and the LDAP server\n            use a SSL session.')
aaasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 18), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaasRowStatus.setDescription('The status of this table entry.')
aaasTacacsKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasTacacsKey.setStatus('current')
if mibBuilder.loadTexts: aaasTacacsKey.setDescription('The shared secret is a string of characters known to the switch\n            and to the TACACS+ server, but it is not sent out over the network.\n            The secret can be any text string and must be configured here as\n            well as on the server. The secret is stored encrypted using a two\n            way algorithm.')
aaasTacacsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasTacacsPort.setStatus('current')
if mibBuilder.loadTexts: aaasTacacsPort.setDescription('For TACACS+ server only.\n            Port number for LDAP server host.')
aaasVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasVrfName.setStatus('current')
if mibBuilder.loadTexts: aaasVrfName.setDescription('Name of the VRF that the server is on.\n            This VRF name is valid only when the server type is RADIUS.\n            (aaasProtocol = 1 (Radius).')
aaasRadKeyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasRadKeyHash.setStatus('current')
if mibBuilder.loadTexts: aaasRadKeyHash.setDescription('The encrypted version of the aaasRadKey attribute.')
aaasLdapPasswdHash = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasLdapPasswdHash.setStatus('current')
if mibBuilder.loadTexts: aaasLdapPasswdHash.setDescription('The encrypted version of the aaasLdapPasswd attribute.')
aaasTacacsKeyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaasTacacsKeyHash.setStatus('current')
if mibBuilder.loadTexts: aaasTacacsKeyHash.setDescription('The encrypted version of the aaasTacacsKey attribute.')
aaaAuthAcctMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2))
aaaAuthSATable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1), )
if mibBuilder.loadTexts: aaaAuthSATable.setStatus('current')
if mibBuilder.loadTexts: aaaAuthSATable.setDescription('This table allow to display and modify the configuration of the\n            authentication servers for the switch accesses.')
aaaAuthSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaatsInterface"))
if mibBuilder.loadTexts: aaaAuthSAEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAuthSAEntry.setDescription('A switch access authentication entry is specified by the type\n            of access.')
aaatsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("default", 1), ("console", 2), ("telnet", 3), ("ftp", 4), ("http", 5), ("snmp", 6), ("ssh", 7))))
if mibBuilder.loadTexts: aaatsInterface.setStatus('current')
if mibBuilder.loadTexts: aaatsInterface.setDescription('Type of connection that must be authenticated\n            default(1) -define the default authentication method for console,\n            telnet, ftp, snmp , http and ssh. If the operator\n            interface is not especially configured the default value\n            is applied to this interface.')
aaatsName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsName1.setStatus('current')
if mibBuilder.loadTexts: aaatsName1.setDescription("Name of the server.\n            Special value 'local' correspond to the local database.\n            Other name correspond to an index value of the aaaServerTable\n            snmp entry can only use ldap server and local database.")
aaatsName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsName2.setStatus('current')
if mibBuilder.loadTexts: aaatsName2.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local database.\n            Other name correspond to an index value of the aaaServerTable\n            snmp entry can only use ldap server and local database.")
aaatsName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsName3.setStatus('current')
if mibBuilder.loadTexts: aaatsName3.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local database.\n            Other name correspond to an index value of the aaaServerTable\n            snmp entry can only use ldap server and local database.")
aaatsName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsName4.setStatus('current')
if mibBuilder.loadTexts: aaatsName4.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local database.\n            Other name correspond to an index value of the aaaServerTable\n            snmp entry can only use ldap server and local database.")
aaatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaatsRowStatus.setDescription('The status of this table entry.')
aaatsCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noCertificate", 0), ("certificateOnly", 1), ("certificateWithPassword", 2))).clone('noCertificate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaatsCertificate.setStatus('current')
if mibBuilder.loadTexts: aaatsCertificate.setDescription('use of x509 user certificate during the HTTPs session establisment.\n            noCertificate(0)- no user certificate is required,\n            certificateOnly(1) - the DN from the certifiicate is used to access to the authorization\n            data of the user\n            certificateWithPassword(2) - the user must execute a log-in procedure with user\n            name and password after his certificate validation')
aaaAcctSATable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2), )
if mibBuilder.loadTexts: aaaAcctSATable.setStatus('current')
if mibBuilder.loadTexts: aaaAcctSATable.setDescription('This table shows current configuration for Switch access accounting.')
aaaAcctSAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaacsInterface"))
if mibBuilder.loadTexts: aaaAcctSAEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAcctSAEntry.setDescription('Accounting configuration for switch access.')
aaacsInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: aaacsInterface.setStatus('current')
if mibBuilder.loadTexts: aaacsInterface.setDescription('For now, accounting for console, telnet, ftp, http, snmp, ssh are stored\n            in the same set of servers, the index is always (1).')
aaacsName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacsName1.setStatus('current')
if mibBuilder.loadTexts: aaacsName1.setDescription("Name of the server.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            An Ace server can not be used for accounting.")
aaacsName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacsName2.setStatus('current')
if mibBuilder.loadTexts: aaacsName2.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            An Ace server can not be used for accounting.")
aaacsName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacsName3.setStatus('current')
if mibBuilder.loadTexts: aaacsName3.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            An Ace server can not be used for accounting.")
aaacsName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacsName4.setStatus('current')
if mibBuilder.loadTexts: aaacsName4.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            An Ace server can not be used for accounting.")
aaacsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 2, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacsRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaacsRowStatus.setDescription('The status of this table entry.')
aaaAcctCmdTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3), )
if mibBuilder.loadTexts: aaaAcctCmdTable.setStatus('current')
if mibBuilder.loadTexts: aaaAcctCmdTable.setDescription('This table stores the commands that will be logged during an accounting session.\n                         This feature is valid only for Tacacs+ accounting')
aaaAcctCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaacmdInterface"))
if mibBuilder.loadTexts: aaaAcctCmdEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAcctCmdEntry.setDescription('Tacacs+ Accounting configuration for executed commands.')
aaacmdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: aaacmdInterface.setStatus('current')
if mibBuilder.loadTexts: aaacmdInterface.setDescription('For now, accounting for console, telnet, ftp, http, snmp, ssh are stored\n            in the same set of servers, the index is always (1).')
aaacmdSrvName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacmdSrvName1.setStatus('current')
if mibBuilder.loadTexts: aaacmdSrvName1.setDescription('Name of the Tacacs+ server.\n            Other name correspond to an index value of the aaaServerTable')
aaacmdSrvName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacmdSrvName2.setStatus('current')
if mibBuilder.loadTexts: aaacmdSrvName2.setDescription('Name of the Tacacs+  server used if the precedent is not accessible.\n            Other name correspond to an index value of the aaaServerTable')
aaacmdSrvName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacmdSrvName3.setStatus('current')
if mibBuilder.loadTexts: aaacmdSrvName3.setDescription('Name of the Tacacs+  server used if the precedent is not accessible.\n            Other name correspond to an index value of the aaaServerTable')
aaacmdSrvName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacmdSrvName4.setStatus('current')
if mibBuilder.loadTexts: aaacmdSrvName4.setDescription('Name of the Tacacs+ server used if the precedent is not accessible.\n            Other name correspond to an index value of the aaaServerTable')
aaacmdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 3, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacmdRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaacmdRowStatus.setDescription('The status of this table entry.')
aaaAuthDATable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4), )
if mibBuilder.loadTexts: aaaAuthDATable.setStatus('current')
if mibBuilder.loadTexts: aaaAuthDATable.setDescription('This table shows current configuration for MAC/Onex/Captive Portal authentication.')
aaaAuthDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaadaInterface"))
if mibBuilder.loadTexts: aaaAuthDAEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAuthDAEntry.setDescription('configuration for MAC/Onex/Captive Portal authentication.')
aaadaInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaadaInterface.setStatus('current')
if mibBuilder.loadTexts: aaadaInterface.setDescription('one for mac , two for 1x, three for captive portal authentication')
aaadaName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaadaName1.setStatus('current')
if mibBuilder.loadTexts: aaadaName1.setDescription('Name of the server.\n            It corresponds to an index value of the aaaServerTable\n            Only RADIUS server can be used in front hand.')
aaadaName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaadaName2.setStatus('current')
if mibBuilder.loadTexts: aaadaName2.setDescription('Name of the server.\n            It corresponds to an index value of the aaaServerTable\n            Only RADIUS server can be used in front hand.')
aaadaName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaadaName3.setStatus('current')
if mibBuilder.loadTexts: aaadaName3.setDescription('Name of the server.\n            It corresponds to an index value of the aaaServerTable\n            Only RADIUS server can be used in front hand.')
aaadaName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaadaName4.setStatus('current')
if mibBuilder.loadTexts: aaadaName4.setDescription('Name of the server.\n            It corresponds to an index value of the aaaServerTable\n            Only RADIUS server can be used in front hand.')
aaadaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 4, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaadaRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaadaRowStatus.setDescription('The status of this table entry.')
aaaAcctDATable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5), )
if mibBuilder.loadTexts: aaaAcctDATable.setStatus('current')
if mibBuilder.loadTexts: aaaAcctDATable.setDescription('This table shows current configuration for device access accounting.')
aaaAcctDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaacdInterface"))
if mibBuilder.loadTexts: aaaAcctDAEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAcctDAEntry.setDescription('Accounting configuration for device access.')
aaacdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: aaacdInterface.setStatus('current')
if mibBuilder.loadTexts: aaacdInterface.setDescription('accounting for mac ,onex  & captive portal ')
aaacdName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdName1.setStatus('current')
if mibBuilder.loadTexts: aaacdName1.setDescription("Name of the server.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            for accounting.")
aaacdName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdName2.setStatus('current')
if mibBuilder.loadTexts: aaacdName2.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            for accounting.")
aaacdName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdName3.setStatus('current')
if mibBuilder.loadTexts: aaacdName3.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            for accounting.")
aaacdName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdName4.setStatus('current')
if mibBuilder.loadTexts: aaacdName4.setDescription("Name of a server used if the precedent is not accessible.\n            Special value 'local' correspond to the local log.\n            Other name correspond to an index value of the aaaServerTable\n            for accounting.")
aaacdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaacdRowStatus.setDescription('The status of this table entry.')
aaacdSyslogIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdSyslogIPAddrType.setStatus('current')
if mibBuilder.loadTexts: aaacdSyslogIPAddrType.setDescription('Accounting Syslog IpAddress type')
aaacdSyslogIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdSyslogIPAddr.setStatus('current')
if mibBuilder.loadTexts: aaacdSyslogIPAddr.setDescription('Accounting Syslog IpAddress ')
aaacdSyslogUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 9), Unsigned32().clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdSyslogUdpPort.setStatus('current')
if mibBuilder.loadTexts: aaacdSyslogUdpPort.setDescription('Accounting Syslog Udp port ')
aaacdCallngStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaacdCallngStationId.setStatus('current')
if mibBuilder.loadTexts: aaacdCallngStationId.setDescription('Raduis Calling Station ID ')
alaAaaAuthConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6))
alaAaaOnexReAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaOnexReAuthStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaOnexReAuthStatus.setDescription(' Enable/Disable Reauthentication for user authenticated  using Onex ')
alaAaaOnexReAuthIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 2), Integer32().clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaOnexReAuthIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaOnexReAuthIntrvl.setDescription(' Reauthentication Interval  for user authenticated  using Onex ')
alaAaaOnexReAuthTrustRadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaOnexReAuthTrustRadStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaOnexReAuthTrustRadStatus.setDescription(' Reauthentication Trust Radius status   for user authenticated  using Onex ')
alaAaaOnexIntrmIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 4), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaOnexIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaOnexIntrmIntrvl.setDescription(' Accounting Interim  Interval   ')
alaAaaOnexIntmIntvlTrstRadSts = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaOnexIntmIntvlTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaOnexIntmIntvlTrstRadSts.setDescription(' Using Onex ,Interim  Interval Trust Radius Status   ')
alaAaaMacIntrmIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 6), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacIntrmIntrvl.setDescription(' Using Mac, Accounting Interim  Interval   ')
alaAaaMacIntmIntvlTrstRadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacIntmIntvlTrstRadStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacIntmIntvlTrstRadStatus.setDescription(' Using Mac ,Interim  Interval Trust Radius Status   ')
alaAaaMacSessTimeoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacSessTimeoutStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacSessTimeoutStatus.setDescription(' Using Mac,Interim  Session Timeout Status   ')
alaAaaMacSessTimeoutIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 9), Integer32().clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacSessTimeoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacSessTimeoutIntrvl.setDescription(' Using Mac,Session Timeout Status Interval  ')
alaAaaMacSesTimeoutTrstRadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacSesTimeoutTrstRadStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacSesTimeoutTrstRadStatus.setDescription('Session Timeout Radius Status for Mac based authenticated user ')
alaAaaMacInActLogoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacInActLogoutStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacInActLogoutStatus.setDescription('Session Timeout Trust Radius Status  for Captive Portal  method based authenticated user ')
alaAaaMacInActLogoutIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 12), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaMacInActLogoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaMacInActLogoutIntrvl.setDescription('InActivity logout Interval for MAC based authenticated user ')
alaAaaCpIntrmIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 13), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpIntrmIntrvl.setDescription(' Using Captive Portal, Accounting Interim  Interval   ')
alaAaaCpIntmIntvlTrstRadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpIntmIntvlTrstRadStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpIntmIntvlTrstRadStatus.setDescription(' Using Captive Portal ,Interim  Interval Trust Radius Status   ')
alaAaaCpSessTimeoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpSessTimeoutStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpSessTimeoutStatus.setDescription('Session Timeout Status for Captive Portal  method based authenticated user ')
alaAaaCpSessTimeoutIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 16), Integer32().clone(43200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpSessTimeoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpSessTimeoutIntrvl.setDescription('Session Timeout Interval for Captive Portal  method based authenticated user ')
alaAaaCpSessTmotTrstRadStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpSessTmotTrstRadStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpSessTmotTrstRadStatus.setDescription('Session Timeout Trust Radius Status  for Captive Portal  method based authenticated user ')
alaAaaCpInActLogoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpInActLogoutStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpInActLogoutStatus.setDescription('InActivity logout Status for Captive Portal based authenticated user ')
alaAaaCpInActLogoutIntrvl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 19), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCpInActLogoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaCpInActLogoutIntrvl.setDescription('InActivity logout Interval  for Captive Portal based authenticated user ')
alaAaaTacacsServerCmdAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 2, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTacacsServerCmdAuthorization.setStatus('current')
if mibBuilder.loadTexts: alaAaaTacacsServerCmdAuthorization.setDescription('Getting command based authorization from TACACS+ server')
aaaUserMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3))
aaaUserTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1), )
if mibBuilder.loadTexts: aaaUserTable.setStatus('current')
if mibBuilder.loadTexts: aaaUserTable.setDescription('This table shows current configuration for the local user database.')
aaaUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaauUserName"))
if mibBuilder.loadTexts: aaaUserEntry.setStatus('current')
if mibBuilder.loadTexts: aaaUserEntry.setDescription('An user configuration identified by its user name.')
aaauUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)))
if mibBuilder.loadTexts: aaauUserName.setStatus('current')
if mibBuilder.loadTexts: aaauUserName.setDescription('Name of the user.')
aaauPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauPassword.setStatus('current')
if mibBuilder.loadTexts: aaauPassword.setDescription('Password of the user. For get response the password in encoded in a\n            one way method. This makes the password readable by noone.')
aaauReadRight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauReadRight1.setStatus('current')
if mibBuilder.loadTexts: aaauReadRight1.setDescription("Specifies the families that the user can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauReadRight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauReadRight2.setStatus('current')
if mibBuilder.loadTexts: aaauReadRight2.setDescription("Specifies the families that the user can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run\n            commands of this family.Second part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauWriteRight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauWriteRight1.setStatus('current')
if mibBuilder.loadTexts: aaauWriteRight1.setDescription("Specifies the families that the user can execute with write right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run commands of\n            this family. First part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauWriteRight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauWriteRight2.setStatus('current')
if mibBuilder.loadTexts: aaauWriteRight2.setDescription("Specifies the families that the user can execute with write right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run commands of\n            this family. Second part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauSnmpLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("no", 1), ("noauth", 2), ("sha", 3), ("md5", 4), ("shaDes", 5), ("md5Des", 6), ("shaAes", 7), ("sha224", 8), ("sha256", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauSnmpLevel.setStatus('current')
if mibBuilder.loadTexts: aaauSnmpLevel.setDescription("Specifies if the user is authorized to use SNMP and if yes its security level.\n                     no(1) - Not authorized to use SNMP.\n                 noauth(2) - SNMPv1,SNMPv2c or SNMPv3 without authentication.\n                    sha(3) - SNMPv3 with SHA authentication and no encryption.\n                    md5(4) - SNMPv3 with MD5 authentication and no encryption.\n                sha-des(5) - SNMPv3 with SHA authentication and DES encryption.\n                md5-des(6) - SNMPv3 with MD5 authentication and DES encryption.\n                sha-aes(7) - SNMPv3 with SHA authentication and AES encryption.\n                 sha224(8) - SNMPv3 with SHA224 authentication and no encryption.\n                 sha256(9) - SNMPv3 with SHA256 authentication and no encryption.\n             If the value is not specified, the value configured for the 'default' user\n             is taken")
aaauSnmpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaauSnmpAuthKey.setStatus('current')
if mibBuilder.loadTexts: aaauSnmpAuthKey.setDescription('Authentication key of the user. The key is encoded in a two way method.\n            The encryption key is deducted from this key.')
aaauRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 9), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaauRowStatus.setDescription('The status of this table entry.')
aaauOldPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauOldPassword.setStatus('current')
if mibBuilder.loadTexts: aaauOldPassword.setDescription('Internal use')
aaauPasswordExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauPasswordExpirationDate.setStatus('current')
if mibBuilder.loadTexts: aaauPasswordExpirationDate.setDescription('The local time of when the password would be expired.\n             This date will be reset once the value of\n             aaaAsaDefaultPasswordExpirationInDays is updated.\n\n             Only the following format is valid:\n\n             mm/dd/yyyy hh:mm\n\n             where\n             mm   - month  (1-12)\n             dd   - day    (1-31)\n             yyyy - year   (2000-2050)\n             hh   - hour   (1-24)\n             mm   - minute (1-59)\n\n             Password will not be expired if set to empty string')
aaauPasswordExpirationInMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 216000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauPasswordExpirationInMinute.setStatus('current')
if mibBuilder.loadTexts: aaauPasswordExpirationInMinute.setDescription('Number of minutes from now till the password expiration time.\n             Setting this object will update aaauPasswordExpirationDate.\n             If -1, password will not be expired.\n             If  0, password has been expired.')
aaauPasswordAllowModifyDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaauPasswordAllowModifyDate.setStatus('current')
if mibBuilder.loadTexts: aaauPasswordAllowModifyDate.setDescription('The local time of when the password can be start to be modified.\n             This date will be reset once the value of\n             aaauPasswordAllowModifyDate is updated.\n\n             Only the following format is valid:\n\n             mm/dd/yyyy hh:mm\n\n             where\n             mm   - month  (1-12)\n             dd   - day    (1-31)\n             yyyy - year   (2000-2050)\n             hh   - hour   (1-24)\n             mm   - minute (1-59)\n\n             Password will not be expired if set to empty string')
aaauPasswordLockoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lockout", 1), ("unlock", 2), ("expired", 3))).clone('unlock')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauPasswordLockoutEnable.setStatus('current')
if mibBuilder.loadTexts: aaauPasswordLockoutEnable.setDescription('Indicate whether this account is locked out.')
aaauBadAtempts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaauBadAtempts.setStatus('current')
if mibBuilder.loadTexts: aaauBadAtempts.setDescription('Number bad password attempts in the observation window.')
aaauReadRight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauReadRight3.setStatus('current')
if mibBuilder.loadTexts: aaauReadRight3.setDescription("Specifies the families that the user can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauReadRight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauReadRight4.setStatus('current')
if mibBuilder.loadTexts: aaauReadRight4.setDescription("Specifies the families that the user can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run\n            commands of this family.Second part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauWriteRight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauWriteRight3.setStatus('current')
if mibBuilder.loadTexts: aaauWriteRight3.setDescription("Specifies the families that the user can execute with write right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run commands of\n            this family. First part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauWriteRight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaauWriteRight4.setStatus('current')
if mibBuilder.loadTexts: aaauWriteRight4.setDescription("Specifies the families that the user can execute with write right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, the user is allowed to run commands of\n            this family. Second part of the bitmask.If the value is\n            not specified, the value configured for the 'default' user is taken")
aaauSnmpPrivPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 3, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaauSnmpPrivPassword.setStatus('current')
if mibBuilder.loadTexts: aaauSnmpPrivPassword.setDescription('Authentication key of the user. The key is encoded in a two way method.\n            The encryption key is deducted from this key.')
aaaAsaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4))
aaaAsaPasswordSizeMin = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordSizeMin.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordSizeMin.setDescription('Minimum number of digits of the passwords\n            ( nominator aaauPassword).')
aaaAsaDefaultPasswordExpirationInDays = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaDefaultPasswordExpirationInDays.setStatus('current')
if mibBuilder.loadTexts: aaaAsaDefaultPasswordExpirationInDays.setDescription('Default password expiration time in days to be applied to all users.\n             Updating this object will reset aaauPasswordExpirationDate.\n             Password expiration will not be enforced if set to 0.')
aaaAsaPasswordContainUserName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordContainUserName.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordContainUserName.setDescription('Indicate whether check password contains username or not.')
aaaAsaPasswordMinUpperCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordMinUpperCase.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordMinUpperCase.setDescription('Minimum number of English uppercase characters required for password. 0 is disable')
aaaAsaPasswordMinLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordMinLowerCase.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordMinLowerCase.setDescription('Minimum number of English lowercase characters required for password 0 is disable.')
aaaAsaPasswordMinDigit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordMinDigit.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordMinDigit.setDescription('Minimum number of base-10 digits required for password. 0 is disable')
aaaAsaPasswordMinNonAlphan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordMinNonAlphan.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordMinNonAlphan.setDescription('Minimum number of non-alphanumeric required for password. 0 is disable')
aaaAsaPasswordHistory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordHistory.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordHistory.setDescription('Password history feature will prevent users from repeatedly using the same password. 0 is disable')
aaaAsaPasswordMinAge = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaPasswordMinAge.setStatus('current')
if mibBuilder.loadTexts: aaaAsaPasswordMinAge.setDescription("The password can't be modified in these days. 0 is disable")
aaaAsaLockoutWindow = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaLockoutWindow.setStatus('current')
if mibBuilder.loadTexts: aaaAsaLockoutWindow.setDescription('The window of time in which the system increments the bad logon count.(minutes) 0 is disable')
aaaAsaLockoutDuration = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaLockoutDuration.setStatus('current')
if mibBuilder.loadTexts: aaaAsaLockoutDuration.setDescription('The amount of time that an account is locked due to the aaauLockoutThreshold being exceeded.(minutes) 0 is disable')
aaaAsaLockoutThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaLockoutThreshold.setStatus('current')
if mibBuilder.loadTexts: aaaAsaLockoutThreshold.setDescription('The number of invalid logon attempts that are permitted before the account is locked out. 0 is disable')
aaaAsaAccessPolicyAdminConsoleOnly = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaAccessPolicyAdminConsoleOnly.setStatus('current')
if mibBuilder.loadTexts: aaaAsaAccessPolicyAdminConsoleOnly.setDescription('Enable or disable AdminUser console only restriction')
aaaAsaAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("enhanced", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaAccessMode.setStatus('current')
if mibBuilder.loadTexts: aaaAsaAccessMode.setDescription('Set access mode to enhanced or default.  0 is default 1 is enhanced')
aaaAsaAccessIpLockoutThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaAccessIpLockoutThreshold.setStatus('current')
if mibBuilder.loadTexts: aaaAsaAccessIpLockoutThreshold.setDescription('When aaaAsaAccessMode is enhanced, This object indicates the value of the threshold for failed login     \n              attempts from an IP address after which the IP address will be banned from switch access.    \n              when aaaAsaAccessMode, this  is set to 0, disable')
aaaAsaAccessManagementIpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaAsaAccessManagementIpStatus.setStatus('current')
if mibBuilder.loadTexts: aaaAsaAccessManagementIpStatus.setDescription(' When aaaAsaAccessMode is enhanced, When enabled , session allowed only for   \n               pre-configured/allowed management station  defined in aaaSwitchAccessMgmtStationTable.  \n              If disabled, any station can try to establish session is authenticated successfully,     \n              when disabled aaaSwitchAccessMgmtStationTable will be destroyed.     \n               When aaaAsaAccessMode is default, aaaAsaAccessManagementIpStatus will be disable')
alaAaaClientAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5))
alaAaaRadClientGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1))
alaAaaRadNasPortId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadNasPortId.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadNasPortId.setDescription('Radius Client Attribute NAS Port Identifier')
alaAaaRadNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadNasIdentifier.setDescription('Radius Client Attribute NAS Identifier')
alaAaaRadUserNameDelim = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadUserNameDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadUserNameDelim.setDescription('Radius Client Attribute user name delimiter')
alaAaaRadPasswordDelim = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadPasswordDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadPasswordDelim.setDescription('Radius Client Attribute user password delimiter')
alaAaaRadCallnStnIdDelim = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadCallnStnIdDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadCallnStnIdDelim.setDescription('Radius Client attribute Calling Station delimiter')
alaAaaRadCalldStnIdDelim = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadCalldStnIdDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadCalldStnIdDelim.setDescription('Radius Client attribute Called Station delimiter')
alaAaaRadUserNameCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadUserNameCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadUserNameCase.setDescription('Radius client attribute UserName case')
alaAaaRadPasswordCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadPasswordCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadPasswordCase.setDescription('Radius client attribute Password case')
alaAaaRadCallingStationIdCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadCallingStationIdCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadCallingStationIdCase.setDescription('Radius client attribute  CallingStationId case')
alaAaaRadCalledStationIdCase = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaRadCalledStationIdCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaRadCalledStationIdCase.setDescription('Radius client attribute  CalledStationId case')
alaAaaProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6))
alaAaaProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1))
alaAaaProfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1), )
if mibBuilder.loadTexts: alaAaaProfTable.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfTable.setDescription('Table contain AAA profiles details for Onex/MAC/Captive Portal ')
alaAaaProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "alaAaaProfName"))
if mibBuilder.loadTexts: alaAaaProfEntry.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfEntry.setDescription('Each entry defines  AAA  profile for Onex/MAC')
alaAaaProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaAaaProfName.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfName.setDescription(' AAA  profile name  for Onex/MAC/Captive Portal authenticated sessions ')
alaAaaProfOnexReAuthSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfOnexReAuthSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfOnexReAuthSts.setDescription(' AAA  profile Re-auth Status for  Onex authenticated sessions ')
alaAaaProfOnexReAuthIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 3), Integer32().clone(3600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfOnexReAuthIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfOnexReAuthIntrvl.setDescription(' AAA  profile Re-auth Interval for  Onex authenticated sessions ')
alaAaaProfOnexReAuthTrstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfOnexReAuthTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfOnexReAuthTrstRadSts.setDescription(' AAA  profile Re-auth Trust Radius Status for  Onex authenticated sessions ')
alaAaaProfOnexIntrmIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 5), Integer32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfOnexIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfOnexIntrmIntrvl.setDescription(' AAA  profile Interium Interval  for  Onex authenticated sessions ')
alaAaaProfOnexIntmItvlTstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfOnexIntmItvlTstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfOnexIntmItvlTstRadSts.setDescription(' AAA  profile Interium Interval Trust Radius Status  for  Onex authenticated sessions ')
alaAaaProfMacIntrmIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 7), Integer32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacIntrmIntrvl.setDescription(' AAA  profile Interium Interval  for  MAC  authenticated sessions ')
alaAaaProfMacIntmItvlTrstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacIntmItvlTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacIntmItvlTrstRadSts.setDescription(' AAA  profile Interium Interval Trust Radius Status for  MAC  authenticated sessions ')
alaAaaProfMacSessTimeoutSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacSessTimeoutSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacSessTimeoutSts.setDescription(' AAA  profile Session Timeout  Status for  MAC  authenticated sessions ')
alaAaaProfMacSessTimeoutIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 10), Integer32().clone(43200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacSessTimeoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacSessTimeoutIntrvl.setDescription(' AAA  profile Session Timeout  Interval for  MAC  authenticated sessions ')
alaAaaProfMacSessTmoutTrstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacSessTmoutTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacSessTmoutTrstRadSts.setDescription(' AAA  profile Session Timeout  Trust Radius Status for  MAC  authenticated sessions ')
alaAaaProfMacInActLogoutSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacInActLogoutSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacInActLogoutSts.setDescription(' AAA  profile InActivity Logout  Status for  MAC  authenticated sessions ')
alaAaaProfMacInActLogoutIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 13), Integer32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfMacInActLogoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfMacInActLogoutIntrvl.setDescription(' AAA  profile InActivity Logout  Interval for  MAC  authenticated sessions ')
alaAaaProfCpSessTimeoutSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpSessTimeoutSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpSessTimeoutSts.setDescription('AAA profile Captive Portal Session Timeout Status. ')
alaAaaProfCpSessTimeoutIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 15), Integer32().clone(432000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpSessTimeoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpSessTimeoutIntrvl.setDescription('AAA profile Captive Portal Session Timeout Interval. ')
alaAaaProfCpSessTmotTrstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpSessTmotTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpSessTmotTrstRadSts.setDescription('AAA profile Captive Portal Session Timeout Trust radius Status ')
alaAaaProfCpInActLogoutSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpInActLogoutSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpInActLogoutSts.setDescription('AAA profile Captive Portal Inactivity Logout Status.')
alaAaaProfCpInActLogoutIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 18), Integer32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpInActLogoutIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpInActLogoutIntrvl.setDescription('AAA profile Captive Portal Inactivity Logout Interval.')
alaAaaProfCpIntrmIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 19), Integer32().clone(43200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpIntrmIntrvl.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpIntrmIntrvl.setDescription('AAA profile Captive Portal Interim Interval.')
alaAaaProfCpItrmIntlTrstRadSts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfCpItrmIntlTrstRadSts.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfCpItrmIntlTrstRadSts.setDescription('AAA profile Captive Portal Interim Interval Trust Radius Status.')
alaAaaProfRadNasPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadNasPortId.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadNasPortId.setDescription('Radius Client Attribute NAS Port Identifier')
alaAaaProfRadNasIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadNasIdentifier.setDescription('Radius Client Attribute  NAS  Identifier')
alaAaaProfRadUserNameDelim = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadUserNameDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadUserNameDelim.setDescription('Radius Client Attribute  user name delimiter')
alaAaaProfRadPasswrdDelim = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadPasswrdDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadPasswrdDelim.setDescription('Radius Client Attribute Password delimiter')
alaAaaProfRadCallnStnIdDelim = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadCallnStnIdDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadCallnStnIdDelim.setDescription('Radius Client attribute Calling Station delimiter')
alaAaaProfRadCalldStnIdDelim = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadCalldStnIdDelim.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadCalldStnIdDelim.setDescription('Radius Client attribute Called Station delimiter')
alaAaaProfRadUserNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadUserNameCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadUserNameCase.setDescription('Radius client Attribute UserName case')
alaAaaProfRadPasswordCase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadPasswordCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadPasswordCase.setDescription('Radius client  attribute Password case')
alaAaaProfRadCallnStnIdCase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadCallnStnIdCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadCallnStnIdCase.setDescription('Radius client attribute  CallingStationId case')
alaAaaProfRadCalldStnIdCase = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerCase", 1), ("upperCase", 2))).clone('upperCase')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRadCalldStnIdCase.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRadCalldStnIdCase.setDescription('Radius client attribute  CalledStationId case')
alaAaaProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 1, 1, 31), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfRowStatus.setDescription('Row  status of table .')
alaAaaProfAuthTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2), )
if mibBuilder.loadTexts: alaAaaProfAuthTable.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthTable.setDescription('This table shows aaa profiles for configuring authentication server for MAC/Onex/Captive Portal')
alaAaaProfAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "alaAaaProfName"), (0, "ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthInterface"))
if mibBuilder.loadTexts: alaAaaProfAuthEntry.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthEntry.setDescription('configuration for MAC/Onex authentication.')
alaAaaProfAuthInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dot1x", 2), ("captivePortal", 3))))
if mibBuilder.loadTexts: alaAaaProfAuthInterface.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthInterface.setDescription('one for mac, two for 1x,threee for Captive Portal')
alaAaaProfAuthSrvName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAuthSrvName1.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthSrvName1.setDescription(' Radius authenticated server')
alaAaaProfAuthSrvName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAuthSrvName2.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthSrvName2.setDescription(' Radius authenticated server')
alaAaaProfAuthSrvName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAuthSrvName3.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthSrvName3.setDescription(' Radius authenticated server')
alaAaaProfAuthSrvName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAuthSrvName4.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthSrvName4.setDescription(' Radius authenticated server')
alaAaaProfAuthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 2, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAuthRowStatus.setDescription('The status of this table entry.')
alaAaaProfAcctTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3), )
if mibBuilder.loadTexts: alaAaaProfAcctTable.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctTable.setDescription(' Profile Table for configuring radius accounting server for MAC/Onex authentication.')
alaAaaProfAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "alaAaaProfName"), (0, "ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctInterface"))
if mibBuilder.loadTexts: alaAaaProfAcctEntry.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctEntry.setDescription('configuration for MAC/Onex/Captive Portal accounting.')
alaAaaProfAcctInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("dot1x", 2), ("captivePortal", 3))))
if mibBuilder.loadTexts: alaAaaProfAcctInterface.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctInterface.setDescription('one for mac, two for 1x, three for Captive Portal')
alaAaaProfAcctSrvName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSrvName1.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSrvName1.setDescription('Radius accounting Server for Onex/MAC/Captive Portal accounting  sessions.')
alaAaaProfAcctSrvName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSrvName2.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSrvName2.setDescription('Radius accounting Server for Onex/MAC/Captive Portal accounting  sessions.')
alaAaaProfAcctSrvName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSrvName3.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSrvName3.setDescription('Radius accounting Server for Onex/MAC/Captive Portal accounting  sessions.')
alaAaaProfAcctSrvName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSrvName4.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSrvName4.setDescription('Radius accounting Server for Onex/MAC/Captive Portal accounting  sessions.')
alaAaaProfAcctSyslogIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSyslogIPAddrType.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSyslogIPAddrType.setDescription('Accounting Syslog IpAddress type')
alaAaaProfAcctSyslogIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 7), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSyslogIPAddr.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSyslogIPAddr.setDescription('Accounting Syslog IpAddress ')
alaAaaProfAcctSyslogUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctSyslogUdpPort.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctSyslogUdpPort.setDescription('Accounting Syslog Udp port ')
alaAaaProfAcctCalingStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctCalingStationId.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctCalingStationId.setDescription('Raduis Calling Station ID ')
alaAaaProfAcctRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 3, 1, 10), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaAaaProfAcctRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfAcctRowStatus.setDescription('The status of this table entry.')
aaaSwitchAccessConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7))
aaaSwitchAccessMgmtStationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1), )
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationTable.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationTable.setDescription("This table is used to configure SwitchAccess management station's Ip address.")
aaaSwitchAccessMgmtStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessMgmtStationIpType"), (0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessMgmtStationIpAddress"), (0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessMgmtStationIpPrefixLength"))
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationEntry.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationEntry.setDescription('SwitchAccessManagementStation configuration.')
aaaSwitchAccessMgmtStationIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1))))
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpType.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpType.setDescription('The Ip Address Type for the SwitchAccess management station')
aaaSwitchAccessMgmtStationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpAddress.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpAddress.setDescription('The Ip Address for the SwitchAccess management station')
aaaSwitchAccessMgmtStationIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationIpPrefixLength.setDescription('The prefix length that, when combined\n            with aaaSwitchAccessMgmtStationIpAddress , gives the prefix for this\n            entry.  The InetAddressType is given by the\n            aaaSwitchAccessMgmtStationIpType object.\n            Currntly release supports only IPV4.')
aaaSwitchAccessMgmtStationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMgmtStationRowStatus.setDescription('The Rowstatus of the AaaSwitchAccessMgmtStationEntry.')
aaaSwitchAccessBannedIpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 2), )
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpTable.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpTable.setDescription('This table is populated by software for Banned Ip address.')
aaaSwitchAccessBannedIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessBannedIpType"), (0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessBannedIpAddress"))
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpEntry.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpEntry.setDescription('SwitchAccessManagementStation configuration.')
aaaSwitchAccessBannedIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpType.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpType.setDescription('IP address type of banned IP')
aaaSwitchAccessBannedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpAddress.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpAddress.setDescription('IP address of banned IP')
aaaSwitchAccessBannedIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessBannedIpRowStatus.setDescription('Rowstatus of the AaaSwitchAccessBannedIpEntry, Since this table\n             is populated by switch, only destroy action is allowed.')
aaaSwitchAccessPrivMaskTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3), )
if mibBuilder.loadTexts: aaaSwitchAccessPrivMaskTable.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessPrivMaskTable.setDescription('This table is used to define the user privilege based on access type along with users existing privilege level.')
aaaSwitchAccessPrivMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessType"))
if mibBuilder.loadTexts: aaaSwitchAccessPrivMaskEntry.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessPrivMaskEntry.setDescription('Priv mask configuration identified by the access type')
aaaSwitchAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5))))
if mibBuilder.loadTexts: aaaSwitchAccessType.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessType.setDescription('Type of connection for which privilege mask should be applied for.\n             If no specific privilege is configured, by default all the mode shall have\n             all the privilege for the user.')
aaaSwitchAccessReadRight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessReadRight1.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessReadRight1.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessReadRight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessReadRight2.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessReadRight2.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessReadRight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessReadRight3.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessReadRight3.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessReadRight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessReadRight4.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessReadRight4.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessWriteRight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight1.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight1.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessWriteRight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight2.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight2.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessWriteRight3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight3.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight3.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
aaaSwitchAccessWriteRight4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 7, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight4.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessWriteRight4.setDescription("Specifies the families through the access type can execute with read right.\n            Each bit of the 32-bit integer mask represents a command's family\n            number. When the family bit is set, through the access type the user is allowed to run\n            commands of this family.First part of the bitmask.If the value is\n            not specified, the value configured for the 'default'.")
alaAaaUserProfileSave = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userProfile", 1), ("globalProfile", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaUserProfileSave.setStatus('current')
if mibBuilder.loadTexts: alaAaaUserProfileSave.setDescription('This object is used for saving the profiles to a file.\n        userProfile (1) : when set through CLI user profile file is created at /flash/switch/.profiles location and \n                          synced  accross Chassis/VC.\n        globalProfile (2): when set through CLI GlobalProfile.txt is generated and synced accross VC/Chassiss.')
alaAaaCommonCriteriaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 8))
alaAaaCommonCriteriaMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaCommonCriteriaMode.setStatus('current')
if mibBuilder.loadTexts: alaAaaCommonCriteriaMode.setDescription(' Enable/Disable Common Criteria mode.')
alaAaaTlsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9))
alaAaaTlsBaseConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 1))
alaAaaTlsCaFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCaFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCaFileName.setDescription('Name of the CA bundle file (in PEM format) stored in /flash/switch directory.')
alaAaaTlsCrlFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCrlFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCrlFileName.setDescription('Name of the CRL file (in PEM format) stored in /flash/switch directory.')
alaAaaTlsKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsKeyFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsKeyFileName.setDescription('Name of the rsa key file stored in /flash/switch directory.')
alaAaaTlsSelfSignedCert = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2))
alaAaaTlsSelfSignedCertFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertFileName.setDescription('Name of the self-signed certificate file stored in /flash/switch directory.')
alaAaaTlsSelfSignedCertKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertKeyFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertKeyFileName.setDescription('Name of the key file file stored in /flash/switch directory.')
alaAaaTlsSelfSignedCertValidPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3650))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertValidPeriod.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertValidPeriod.setDescription('The valid period in days of certificate.')
alaAaaTlsSelfSignedCertCommonName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertCommonName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertCommonName.setDescription('The certificate common name.')
alaAaaTlsSelfSignedCertOrgName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertOrgName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertOrgName.setDescription('The certificate organization name .')
alaAaaTlsSelfSignedCertOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertOrgUnit.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertOrgUnit.setDescription('The certificate organization unit.')
alaAaaTlsSelfSignedCertLocality = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertLocality.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertLocality.setDescription('Locality of the certificate organization.')
alaAaaTlsSelfSignedCertState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertState.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertState.setDescription('The state of certificate organization.')
alaAaaTlsSelfSignedCertCountry = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertCountry.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertCountry.setDescription('The country of certificate organization.')
alaAaaTlsSelfSignedCertAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertAction.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertAction.setDescription('Create/delete self-signed certificate stored in /flash/switch directory.')
alaAaaTlsCsr = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3))
alaAaaTlsCsrFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrFileName.setDescription('The domain name of csr file stored in /flash/switch directory.')
alaAaaTlsCsrKeyFileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrKeyFileName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrKeyFileName.setDescription('Name of key file stored in /flash/switch directory.')
alaAaaTlsCsrCommonName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrCommonName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrCommonName.setDescription('The csr common name.')
alaAaaTlsCsrOrgName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrOrgName.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrOrgName.setDescription('The csr organization name .')
alaAaaTlsCsrOrgUnit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrOrgUnit.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrOrgUnit.setDescription('The csr organization unit.')
alaAaaTlsCsrLocality = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrLocality.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrLocality.setDescription('Locality of the certificate organization.')
alaAaaTlsCsrState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrState.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrState.setDescription('The state of certificate organization.')
alaAaaTlsCsrCountry = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 3, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsCsrCountry.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrCountry.setDescription('The country of certificate organization.')
alaAaaTlsValidate = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 4))
alaAaaTlsValidateCa = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 4, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsValidateCa.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsValidateCa.setDescription('Name of the CA certificate (in PEM format) used to validate.')
alaAaaTlsValidateCert = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 1, 9, 4, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAaaTlsValidateCert.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsValidateCert.setDescription('Name of the certificate (in PEM format) needed to validate.')
alcatelIND1AAAMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-AAA-MIB", "aaaServerMIBGroup"), ("ALCATEL-IND1-AAA-MIB", "aaaAuthAcctGroup"), ("ALCATEL-IND1-AAA-MIB", "aaaUserMIBGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaClientAttrGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfileObjectsGroup"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessMIBGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCommonCriteriaGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsBaseConfigGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertGroup"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1AAAMIBCompliance = alcatelIND1AAAMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1AAAMIBCompliance.setDescription('Compliance statement for\n             Authentication, Authorization, and Accounting (AAA) Subsystem.')
aaaServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-AAA-MIB", "aaasProtocol"), ("ALCATEL-IND1-AAA-MIB", "aaasHostName"), ("ALCATEL-IND1-AAA-MIB", "aaasIpAddress"), ("ALCATEL-IND1-AAA-MIB", "aaasHostName2"), ("ALCATEL-IND1-AAA-MIB", "aaasIpAddress2"), ("ALCATEL-IND1-AAA-MIB", "aaasRetries"), ("ALCATEL-IND1-AAA-MIB", "aaasTimout"), ("ALCATEL-IND1-AAA-MIB", "aaasRadKey"), ("ALCATEL-IND1-AAA-MIB", "aaasRadAuthPort"), ("ALCATEL-IND1-AAA-MIB", "aaasRadAcctPort"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapPort"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapDn"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapPasswd"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapSearchBase"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapServType"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapEnableSsl"), ("ALCATEL-IND1-AAA-MIB", "aaasRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaasTacacsKey"), ("ALCATEL-IND1-AAA-MIB", "aaasTacacsPort"), ("ALCATEL-IND1-AAA-MIB", "aaasVrfName"), ("ALCATEL-IND1-AAA-MIB", "aaasRadKeyHash"), ("ALCATEL-IND1-AAA-MIB", "aaasLdapPasswdHash"), ("ALCATEL-IND1-AAA-MIB", "aaasTacacsKeyHash"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaAccessMode"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaAccessIpLockoutThreshold"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaAccessManagementIpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aaaServerMIBGroup = aaaServerMIBGroup.setStatus('current')
if mibBuilder.loadTexts: aaaServerMIBGroup.setDescription('Collection of objects for management of AAA Server.')
aaaAuthAcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-AAA-MIB", "aaatsName1"), ("ALCATEL-IND1-AAA-MIB", "aaatsName2"), ("ALCATEL-IND1-AAA-MIB", "aaatsName3"), ("ALCATEL-IND1-AAA-MIB", "aaatsName4"), ("ALCATEL-IND1-AAA-MIB", "aaatsRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaatsCertificate"), ("ALCATEL-IND1-AAA-MIB", "aaacsName1"), ("ALCATEL-IND1-AAA-MIB", "aaacsName2"), ("ALCATEL-IND1-AAA-MIB", "aaacsName3"), ("ALCATEL-IND1-AAA-MIB", "aaacsName4"), ("ALCATEL-IND1-AAA-MIB", "aaacsRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaacmdSrvName1"), ("ALCATEL-IND1-AAA-MIB", "aaacmdSrvName2"), ("ALCATEL-IND1-AAA-MIB", "aaacmdSrvName3"), ("ALCATEL-IND1-AAA-MIB", "aaacmdSrvName4"), ("ALCATEL-IND1-AAA-MIB", "aaacmdRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaadaInterface"), ("ALCATEL-IND1-AAA-MIB", "aaadaName1"), ("ALCATEL-IND1-AAA-MIB", "aaadaName2"), ("ALCATEL-IND1-AAA-MIB", "aaadaName3"), ("ALCATEL-IND1-AAA-MIB", "aaadaName4"), ("ALCATEL-IND1-AAA-MIB", "aaadaRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaacdName1"), ("ALCATEL-IND1-AAA-MIB", "aaacdName2"), ("ALCATEL-IND1-AAA-MIB", "aaacdName3"), ("ALCATEL-IND1-AAA-MIB", "aaacdName4"), ("ALCATEL-IND1-AAA-MIB", "aaacdRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaacdSyslogIPAddrType"), ("ALCATEL-IND1-AAA-MIB", "aaacdSyslogIPAddr"), ("ALCATEL-IND1-AAA-MIB", "aaacdSyslogUdpPort"), ("ALCATEL-IND1-AAA-MIB", "aaacdCallngStationId"), ("ALCATEL-IND1-AAA-MIB", "alaAaaOnexReAuthStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaOnexReAuthIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaOnexReAuthTrustRadStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaOnexIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaOnexIntmIntvlTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacIntmIntvlTrstRadStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacSessTimeoutStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacSessTimeoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacSesTimeoutTrstRadStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacInActLogoutStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaMacInActLogoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpSessTimeoutStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpSessTimeoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpSessTmotTrstRadStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpIntmIntvlTrstRadStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpInActLogoutStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaCpInActLogoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTacacsServerCmdAuthorization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aaaAuthAcctGroup = aaaAuthAcctGroup.setStatus('current')
if mibBuilder.loadTexts: aaaAuthAcctGroup.setDescription('Collection of objects for management of AAA Authentication Accounting.')
aaaUserMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-AAA-MIB", "aaauPassword"), ("ALCATEL-IND1-AAA-MIB", "aaauReadRight1"), ("ALCATEL-IND1-AAA-MIB", "aaauReadRight2"), ("ALCATEL-IND1-AAA-MIB", "aaauWriteRight1"), ("ALCATEL-IND1-AAA-MIB", "aaauWriteRight2"), ("ALCATEL-IND1-AAA-MIB", "aaauSnmpLevel"), ("ALCATEL-IND1-AAA-MIB", "aaauSnmpAuthKey"), ("ALCATEL-IND1-AAA-MIB", "aaauRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaauOldPassword"), ("ALCATEL-IND1-AAA-MIB", "aaauPasswordExpirationDate"), ("ALCATEL-IND1-AAA-MIB", "aaauPasswordExpirationInMinute"), ("ALCATEL-IND1-AAA-MIB", "aaauPasswordAllowModifyDate"), ("ALCATEL-IND1-AAA-MIB", "aaauPasswordLockoutEnable"), ("ALCATEL-IND1-AAA-MIB", "aaauBadAtempts"), ("ALCATEL-IND1-AAA-MIB", "aaauReadRight3"), ("ALCATEL-IND1-AAA-MIB", "aaauReadRight4"), ("ALCATEL-IND1-AAA-MIB", "aaauWriteRight3"), ("ALCATEL-IND1-AAA-MIB", "aaauWriteRight4"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordSizeMin"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaDefaultPasswordExpirationInDays"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordContainUserName"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordMinUpperCase"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordMinLowerCase"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordMinDigit"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordMinNonAlphan"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordHistory"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaPasswordMinAge"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaLockoutWindow"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaLockoutDuration"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaLockoutThreshold"), ("ALCATEL-IND1-AAA-MIB", "aaaAsaAccessPolicyAdminConsoleOnly"), ("ALCATEL-IND1-AAA-MIB", "aaauSnmpPrivPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aaaUserMIBGroup = aaaUserMIBGroup.setStatus('current')
if mibBuilder.loadTexts: aaaUserMIBGroup.setDescription('Collection of objects for management of AAA User Local Database.')
alaAaaClientAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaRadNasPortId"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadNasIdentifier"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadUserNameDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadPasswordDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadCallnStnIdDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadCalldStnIdDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadUserNameCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadPasswordCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadCallingStationIdCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaRadCalledStationIdCase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaClientAttrGroup = alaAaaClientAttrGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaClientAttrGroup.setDescription('Collection of object for AAA client attributes')
alaAaaProfileObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaProfOnexReAuthSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfOnexReAuthIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfOnexReAuthTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfOnexIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfOnexIntmItvlTstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacIntmItvlTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacSessTimeoutSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacSessTimeoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacSessTmoutTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacInActLogoutSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfMacInActLogoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpSessTimeoutSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpSessTimeoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpSessTmotTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpInActLogoutSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpInActLogoutIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpIntrmIntrvl"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfCpItrmIntlTrstRadSts"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadNasPortId"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadNasIdentifier"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadUserNameDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadPasswrdDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadCallnStnIdDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadCalldStnIdDelim"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadUserNameCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadPasswordCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadCallnStnIdCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRadCalldStnIdCase"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfRowStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthSrvName1"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthSrvName2"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthSrvName3"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthSrvName4"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAuthRowStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSrvName1"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSrvName2"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSrvName3"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSrvName4"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSyslogIPAddrType"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSyslogIPAddr"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctSyslogUdpPort"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctCalingStationId"), ("ALCATEL-IND1-AAA-MIB", "alaAaaProfAcctRowStatus"), ("ALCATEL-IND1-AAA-MIB", "alaAaaUserProfileSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaProfileObjectsGroup = alaAaaProfileObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaProfileObjectsGroup.setDescription('Collection of AAA profile objects')
aaaSwitchAccessMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessMgmtStationRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessBannedIpRowStatus"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessReadRight1"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessReadRight2"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessReadRight3"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessReadRight4"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessWriteRight1"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessWriteRight2"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessWriteRight3"), ("ALCATEL-IND1-AAA-MIB", "aaaSwitchAccessWriteRight4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aaaSwitchAccessMIBGroup = aaaSwitchAccessMIBGroup.setStatus('current')
if mibBuilder.loadTexts: aaaSwitchAccessMIBGroup.setDescription('Collection of objects for management of AAA Switch Access.')
alaAaaCommonCriteriaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaCommonCriteriaMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaCommonCriteriaGroup = alaAaaCommonCriteriaGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaCommonCriteriaGroup.setDescription('Collection of objects for common criteria.')
alaAaaTlsBaseConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCaFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCrlFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsKeyFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaTlsBaseConfigGroup = alaAaaTlsBaseConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsBaseConfigGroup.setDescription('Collection of objects for management of AAA TLS base configuration.')
alaAaaTlsSelfSignedCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertKeyFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertValidPeriod"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertCommonName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertOrgName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertOrgUnit"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertLocality"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertState"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertCountry"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsSelfSignedCertAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaTlsSelfSignedCertGroup = alaAaaTlsSelfSignedCertGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsSelfSignedCertGroup.setDescription('Collection of objects for management of AAA TLS self-signed certificate.')
alaAaaTlsCsrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrKeyFileName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrCommonName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrOrgName"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrOrgUnit"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrLocality"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrState"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsCsrCountry"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaTlsCsrGroup = alaAaaTlsCsrGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsCsrGroup.setDescription('Collection of objects for management of AAA TLS CSR.')
alaAaaTlsValidateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 15, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-AAA-MIB", "alaAaaTlsValidateCa"), ("ALCATEL-IND1-AAA-MIB", "alaAaaTlsValidateCert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaAaaTlsValidateGroup = alaAaaTlsValidateGroup.setStatus('current')
if mibBuilder.loadTexts: alaAaaTlsValidateGroup.setDescription('Collection of objects for certificate validation.')
mibBuilder.exportSymbols("ALCATEL-IND1-AAA-MIB", aaaSwitchAccessBannedIpRowStatus=aaaSwitchAccessBannedIpRowStatus, alaAaaProfileConfig=alaAaaProfileConfig, alaAaaProfMacSessTimeoutSts=alaAaaProfMacSessTimeoutSts, aaaSwitchAccessBannedIpEntry=aaaSwitchAccessBannedIpEntry, aaaAsaPasswordMinNonAlphan=aaaAsaPasswordMinNonAlphan, aaaSwitchAccessMIBGroup=aaaSwitchAccessMIBGroup, aaacsName3=aaacsName3, aaacdName3=aaacdName3, alaAaaProfRadNasPortId=alaAaaProfRadNasPortId, alcatelIND1AAAMIBObjects=alcatelIND1AAAMIBObjects, aaasLdapEnableSsl=aaasLdapEnableSsl, aaacdSyslogUdpPort=aaacdSyslogUdpPort, aaaSwitchAccessMgmtStationIpPrefixLength=aaaSwitchAccessMgmtStationIpPrefixLength, alaAaaTacacsServerCmdAuthorization=alaAaaTacacsServerCmdAuthorization, alaAaaProfRadCallnStnIdDelim=alaAaaProfRadCallnStnIdDelim, aaaAsaAccessIpLockoutThreshold=aaaAsaAccessIpLockoutThreshold, aaaAsaAccessManagementIpStatus=aaaAsaAccessManagementIpStatus, alaAaaProfAuthSrvName3=alaAaaProfAuthSrvName3, alaAaaTlsConfig=alaAaaTlsConfig, aaasIpAddress=aaasIpAddress, aaasVrfName=aaasVrfName, alaAaaProfAcctCalingStationId=alaAaaProfAcctCalingStationId, alaAaaProfRadPasswordCase=alaAaaProfRadPasswordCase, aaasRadAcctPort=aaasRadAcctPort, aaauWriteRight3=aaauWriteRight3, alaAaaUserProfileSave=alaAaaUserProfileSave, aaadaName1=aaadaName1, aaacdCallngStationId=aaacdCallngStationId, alaAaaMacInActLogoutIntrvl=alaAaaMacInActLogoutIntrvl, alaAaaProfAuthInterface=alaAaaProfAuthInterface, alaAaaProfAcctSrvName2=alaAaaProfAcctSrvName2, aaaAuthAcctGroup=aaaAuthAcctGroup, aaaServerEntry=aaaServerEntry, alaAaaProfAuthEntry=alaAaaProfAuthEntry, aaasRadKey=aaasRadKey, alaAaaMacSessTimeoutIntrvl=alaAaaMacSessTimeoutIntrvl, alaAaaTlsBaseConfigGroup=alaAaaTlsBaseConfigGroup, alaAaaProfCpSessTimeoutIntrvl=alaAaaProfCpSessTimeoutIntrvl, alaAaaOnexIntmIntvlTrstRadSts=alaAaaOnexIntmIntvlTrstRadSts, aaauPasswordAllowModifyDate=aaauPasswordAllowModifyDate, alaAaaTlsKeyFileName=alaAaaTlsKeyFileName, aaaAsaLockoutDuration=aaaAsaLockoutDuration, aaacsName4=aaacsName4, aaatsCertificate=aaatsCertificate, aaasLdapPasswd=aaasLdapPasswd, aaasTacacsKeyHash=aaasTacacsKeyHash, aaasIpAddress2=aaasIpAddress2, alaAaaRadClientGlobalAttr=alaAaaRadClientGlobalAttr, alaAaaProfName=alaAaaProfName, aaacmdSrvName4=aaacmdSrvName4, alaAaaMacIntrmIntrvl=alaAaaMacIntrmIntrvl, aaaSwitchAccessBannedIpTable=aaaSwitchAccessBannedIpTable, alcatelIND1AAAMIBCompliance=alcatelIND1AAAMIBCompliance, aaacmdSrvName3=aaacmdSrvName3, aaauReadRight3=aaauReadRight3, alaAaaProfMacIntrmIntrvl=alaAaaProfMacIntrmIntrvl, alaAaaProfileObjectsGroup=alaAaaProfileObjectsGroup, aaacdName4=aaacdName4, alaAaaRadNasIdentifier=alaAaaRadNasIdentifier, aaaSwitchAccessConfig=aaaSwitchAccessConfig, alaAaaOnexReAuthTrustRadStatus=alaAaaOnexReAuthTrustRadStatus, aaacdSyslogIPAddr=aaacdSyslogIPAddr, aaaSwitchAccessMgmtStationEntry=aaaSwitchAccessMgmtStationEntry, alaAaaTlsSelfSignedCertOrgName=alaAaaTlsSelfSignedCertOrgName, alaAaaProfRadCallnStnIdCase=alaAaaProfRadCallnStnIdCase, alaAaaProfOnexReAuthIntrvl=alaAaaProfOnexReAuthIntrvl, aaatsName4=aaatsName4, alaAaaCpIntrmIntrvl=alaAaaCpIntrmIntrvl, alaAaaProfAcctRowStatus=alaAaaProfAcctRowStatus, alaAaaTlsSelfSignedCertState=alaAaaTlsSelfSignedCertState, aaasLdapPasswdHash=aaasLdapPasswdHash, aaacsName2=aaacsName2, aaatsRowStatus=aaatsRowStatus, aaaSwitchAccessWriteRight2=aaaSwitchAccessWriteRight2, aaaSwitchAccessMgmtStationRowStatus=aaaSwitchAccessMgmtStationRowStatus, aaaSwitchAccessWriteRight1=aaaSwitchAccessWriteRight1, alaAaaTlsCsrOrgUnit=alaAaaTlsCsrOrgUnit, aaasHostName2=aaasHostName2, alaAaaMacInActLogoutStatus=alaAaaMacInActLogoutStatus, alaAaaRadUserNameDelim=alaAaaRadUserNameDelim, aaaAsaPasswordContainUserName=aaaAsaPasswordContainUserName, alaAaaProfCpItrmIntlTrstRadSts=alaAaaProfCpItrmIntlTrstRadSts, alaAaaTlsSelfSignedCertKeyFileName=alaAaaTlsSelfSignedCertKeyFileName, alaAaaProfAuthTable=alaAaaProfAuthTable, alaAaaTlsCsrGroup=alaAaaTlsCsrGroup, aaaAsaConfig=aaaAsaConfig, aaacdSyslogIPAddrType=aaacdSyslogIPAddrType, alaAaaProfCpIntrmIntrvl=alaAaaProfCpIntrmIntrvl, aaacmdSrvName2=aaacmdSrvName2, aaasProtocol=aaasProtocol, alaAaaTlsValidateGroup=alaAaaTlsValidateGroup, aaacmdInterface=aaacmdInterface, alaAaaProfAcctSrvName4=alaAaaProfAcctSrvName4, alaAaaMacIntmIntvlTrstRadStatus=alaAaaMacIntmIntvlTrstRadStatus, alaAaaProfTable=alaAaaProfTable, alaAaaProfOnexReAuthTrstRadSts=alaAaaProfOnexReAuthTrstRadSts, aaaSwitchAccessWriteRight4=aaaSwitchAccessWriteRight4, alcatelIND1AAAMIBConformance=alcatelIND1AAAMIBConformance, aaadaName4=aaadaName4, aaaAsaLockoutThreshold=aaaAsaLockoutThreshold, alaAaaProfRowStatus=alaAaaProfRowStatus, aaauReadRight1=aaauReadRight1, aaauRowStatus=aaauRowStatus, aaasName=aaasName, aaaAsaDefaultPasswordExpirationInDays=aaaAsaDefaultPasswordExpirationInDays, alaAaaProfEntry=alaAaaProfEntry, aaaSwitchAccessWriteRight3=aaaSwitchAccessWriteRight3, alaAaaTlsSelfSignedCertCountry=alaAaaTlsSelfSignedCertCountry, alaAaaTlsValidateCert=alaAaaTlsValidateCert, alaAaaProfCpSessTmotTrstRadSts=alaAaaProfCpSessTmotTrstRadSts, aaaSwitchAccessPrivMaskTable=aaaSwitchAccessPrivMaskTable, alaAaaCommonCriteriaGroup=alaAaaCommonCriteriaGroup, alaAaaTlsSelfSignedCertGroup=alaAaaTlsSelfSignedCertGroup, aaasLdapSearchBase=aaasLdapSearchBase, aaaServerTable=aaaServerTable, aaaAcctDATable=aaaAcctDATable, alaAaaProfOnexIntmItvlTstRadSts=alaAaaProfOnexIntmItvlTstRadSts, aaaAsaPasswordHistory=aaaAsaPasswordHistory, alaAaaProfAuthSrvName4=alaAaaProfAuthSrvName4, alaAaaCommonCriteriaConfig=alaAaaCommonCriteriaConfig, alaAaaRadCallnStnIdDelim=alaAaaRadCallnStnIdDelim, alaAaaCpSessTmotTrstRadStatus=alaAaaCpSessTmotTrstRadStatus, aaaAsaAccessPolicyAdminConsoleOnly=aaaAsaAccessPolicyAdminConsoleOnly, alaAaaProfAcctSrvName3=alaAaaProfAcctSrvName3, aaatsName2=aaatsName2, aaacmdRowStatus=aaacmdRowStatus, aaauSnmpLevel=aaauSnmpLevel, aaaAuthSATable=aaaAuthSATable, alaAaaRadCalldStnIdDelim=alaAaaRadCalldStnIdDelim, alaAaaProfMacSessTimeoutIntrvl=alaAaaProfMacSessTimeoutIntrvl, alaAaaCommonCriteriaMode=alaAaaCommonCriteriaMode, alaAaaTlsCsrState=alaAaaTlsCsrState, aaasHostName=aaasHostName, aaaSwitchAccessMgmtStationTable=aaaSwitchAccessMgmtStationTable, alaAaaOnexIntrmIntrvl=alaAaaOnexIntrmIntrvl, alaAaaTlsCrlFileName=alaAaaTlsCrlFileName, alaAaaProfRadCalldStnIdDelim=alaAaaProfRadCalldStnIdDelim, aaaAcctCmdTable=aaaAcctCmdTable, alaAaaProfCpInActLogoutIntrvl=alaAaaProfCpInActLogoutIntrvl, aaaAsaPasswordMinUpperCase=aaaAsaPasswordMinUpperCase, aaauWriteRight4=aaauWriteRight4, aaasTimout=aaasTimout, aaaSwitchAccessBannedIpAddress=aaaSwitchAccessBannedIpAddress, aaauOldPassword=aaauOldPassword, aaatsInterface=aaatsInterface, aaaAuthAcctMIB=aaaAuthAcctMIB, alaAaaTlsValidate=alaAaaTlsValidate, alaAaaCpSessTimeoutStatus=alaAaaCpSessTimeoutStatus, aaaAsaLockoutWindow=aaaAsaLockoutWindow, aaauWriteRight2=aaauWriteRight2, aaauUserName=aaauUserName, aaasLdapServType=aaasLdapServType, aaauPasswordLockoutEnable=aaauPasswordLockoutEnable, alaAaaProfMacInActLogoutSts=alaAaaProfMacInActLogoutSts, aaaSwitchAccessReadRight2=aaaSwitchAccessReadRight2, aaaUserMIBGroup=aaaUserMIBGroup, aaadaInterface=aaadaInterface, alaAaaTlsSelfSignedCertOrgUnit=alaAaaTlsSelfSignedCertOrgUnit, alaAaaMacSessTimeoutStatus=alaAaaMacSessTimeoutStatus, aaauPasswordExpirationInMinute=aaauPasswordExpirationInMinute, alaAaaProfAcctTable=alaAaaProfAcctTable, aaauPasswordExpirationDate=aaauPasswordExpirationDate, aaaAuthDAEntry=aaaAuthDAEntry, alaAaaClientAttrGroup=alaAaaClientAttrGroup, alaAaaTlsBaseConfig=alaAaaTlsBaseConfig, alaAaaCpSessTimeoutIntrvl=alaAaaCpSessTimeoutIntrvl, aaasTacacsKey=aaasTacacsKey, aaasTacacsPort=aaasTacacsPort, aaacmdSrvName1=aaacmdSrvName1, alcatelIND1AAAMIB=alcatelIND1AAAMIB, alaAaaRadPasswordCase=alaAaaRadPasswordCase, alaAaaProfOnexReAuthSts=alaAaaProfOnexReAuthSts, alaAaaProfMacIntmItvlTrstRadSts=alaAaaProfMacIntmItvlTrstRadSts, alaAaaProfCpInActLogoutSts=alaAaaProfCpInActLogoutSts, aaatsName1=aaatsName1, alaAaaProfAcctSyslogUdpPort=alaAaaProfAcctSyslogUdpPort, alcatelIND1AAAMIBGroups=alcatelIND1AAAMIBGroups, aaaServerMIBGroup=aaaServerMIBGroup, alaAaaRadCallingStationIdCase=alaAaaRadCallingStationIdCase, alaAaaTlsCsrKeyFileName=alaAaaTlsCsrKeyFileName, aaaUserEntry=aaaUserEntry, alaAaaOnexReAuthIntrvl=alaAaaOnexReAuthIntrvl, aaauReadRight4=aaauReadRight4, alaAaaTlsSelfSignedCert=alaAaaTlsSelfSignedCert, aaauPassword=aaauPassword, aaaAcctCmdEntry=aaaAcctCmdEntry, alaAaaCpIntmIntvlTrstRadStatus=alaAaaCpIntmIntvlTrstRadStatus, aaaSwitchAccessMgmtStationIpAddress=aaaSwitchAccessMgmtStationIpAddress, aaasRowStatus=aaasRowStatus, aaauSnmpAuthKey=aaauSnmpAuthKey, alaAaaRadNasPortId=alaAaaRadNasPortId, aaacdName1=aaacdName1, aaaAcctSATable=aaaAcctSATable, alaAaaRadPasswordDelim=alaAaaRadPasswordDelim, alaAaaProfOnexIntrmIntrvl=alaAaaProfOnexIntrmIntrvl, aaaSwitchAccessBannedIpType=aaaSwitchAccessBannedIpType, alaAaaMacSesTimeoutTrstRadStatus=alaAaaMacSesTimeoutTrstRadStatus, aaasRadAuthPort=aaasRadAuthPort, aaaAsaPasswordMinLowerCase=aaaAsaPasswordMinLowerCase, alaAaaProfAcctSyslogIPAddrType=alaAaaProfAcctSyslogIPAddrType, alaAaaProfAcctSyslogIPAddr=alaAaaProfAcctSyslogIPAddr, alaAaaTlsSelfSignedCertFileName=alaAaaTlsSelfSignedCertFileName, alaAaaTlsSelfSignedCertAction=alaAaaTlsSelfSignedCertAction, alaAaaProfMacInActLogoutIntrvl=alaAaaProfMacInActLogoutIntrvl, aaaSwitchAccessMgmtStationIpType=aaaSwitchAccessMgmtStationIpType, aaaSwitchAccessReadRight4=aaaSwitchAccessReadRight4, alaAaaProfAuthRowStatus=alaAaaProfAuthRowStatus, aaaAuthSAEntry=aaaAuthSAEntry, alaAaaTlsCsrLocality=alaAaaTlsCsrLocality, alaAaaProfRadUserNameCase=alaAaaProfRadUserNameCase, aaadaName2=aaadaName2, aaasLdapDn=aaasLdapDn, alaAaaTlsCsrCommonName=alaAaaTlsCsrCommonName, alaAaaCpInActLogoutStatus=alaAaaCpInActLogoutStatus, aaaAsaAccessMode=aaaAsaAccessMode, aaasLdapPort=aaasLdapPort, alaAaaProfRadUserNameDelim=alaAaaProfRadUserNameDelim, alaAaaProfRadNasIdentifier=alaAaaProfRadNasIdentifier, aaaSwitchAccessType=aaaSwitchAccessType, alaAaaProfAcctInterface=alaAaaProfAcctInterface, alaAaaTlsCsrFileName=alaAaaTlsCsrFileName, alaAaaTlsCsrCountry=alaAaaTlsCsrCountry, aaasRetries=aaasRetries, aaaAuthDATable=aaaAuthDATable, alaAaaRadUserNameCase=alaAaaRadUserNameCase, aaaSwitchAccessReadRight3=aaaSwitchAccessReadRight3, aaacsRowStatus=aaacsRowStatus, aaaAsaPasswordMinDigit=aaaAsaPasswordMinDigit, alaAaaProfRadPasswrdDelim=alaAaaProfRadPasswrdDelim, alaAaaOnexReAuthStatus=alaAaaOnexReAuthStatus, aaaAcctDAEntry=aaaAcctDAEntry, alaAaaProfAcctSrvName1=alaAaaProfAcctSrvName1, aaasRadKeyHash=aaasRadKeyHash, aaauReadRight2=aaauReadRight2, aaauWriteRight1=aaauWriteRight1, alaAaaClientAttr=alaAaaClientAttr, aaacdRowStatus=aaacdRowStatus, aaaUserMIB=aaaUserMIB, alaAaaProfRadCalldStnIdCase=alaAaaProfRadCalldStnIdCase, alaAaaProfCpSessTimeoutSts=alaAaaProfCpSessTimeoutSts, aaaSwitchAccessPrivMaskEntry=aaaSwitchAccessPrivMaskEntry, alaAaaProfAcctEntry=alaAaaProfAcctEntry, aaacdName2=aaacdName2, aaaSwitchAccessReadRight1=aaaSwitchAccessReadRight1, alaAaaTlsSelfSignedCertValidPeriod=alaAaaTlsSelfSignedCertValidPeriod, aaauBadAtempts=aaauBadAtempts, aaadaRowStatus=aaadaRowStatus, aaaUserTable=aaaUserTable, alaAaaRadCalledStationIdCase=alaAaaRadCalledStationIdCase, alcatelIND1AAAMIBCompliances=alcatelIND1AAAMIBCompliances, aaaAcctSAEntry=aaaAcctSAEntry, aaaAsaPasswordSizeMin=aaaAsaPasswordSizeMin, aaaAsaPasswordMinAge=aaaAsaPasswordMinAge, alaAaaProfAuthSrvName2=alaAaaProfAuthSrvName2)
mibBuilder.exportSymbols("ALCATEL-IND1-AAA-MIB", aaauSnmpPrivPassword=aaauSnmpPrivPassword, aaacsInterface=aaacsInterface, alaAaaTlsSelfSignedCertCommonName=alaAaaTlsSelfSignedCertCommonName, aaatsName3=aaatsName3, alaAaaProfMacSessTmoutTrstRadSts=alaAaaProfMacSessTmoutTrstRadSts, alaAaaTlsCsrOrgName=alaAaaTlsCsrOrgName, PYSNMP_MODULE_ID=alcatelIND1AAAMIB, aaacdInterface=aaacdInterface, alaAaaProfileObjects=alaAaaProfileObjects, alaAaaProfAuthSrvName1=alaAaaProfAuthSrvName1, aaacsName1=aaacsName1, alaAaaCpInActLogoutIntrvl=alaAaaCpInActLogoutIntrvl, alaAaaTlsCaFileName=alaAaaTlsCaFileName, aaadaName3=aaadaName3, alaAaaTlsSelfSignedCertLocality=alaAaaTlsSelfSignedCertLocality, alaAaaTlsCsr=alaAaaTlsCsr, alaAaaAuthConfig=alaAaaAuthConfig, alaAaaTlsValidateCa=alaAaaTlsValidateCa, aaaServerMIB=aaaServerMIB)
