#
# PySNMP MIB module DOCS-CABLE-DEVICE-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-CABLE-DEVICE-TRAP-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 05:10:50 2022
# On host fv-az42-839 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
docsDevEvId, docsDevSwServer, docsDevServerDhcp, docsDevServerTime, docsDevNotification, docsDevSwFilename, docsDevEvLevel, docsDev, docsDevEvText = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvId", "docsDevSwServer", "docsDevServerDhcp", "docsDevServerTime", "docsDevNotification", "docsDevSwFilename", "docsDevEvLevel", "docsDev", "docsDevEvText")
docsIfCmtsCmStatusDocsisMode, docsIfDocsisCapability, docsIfDocsisOperMode = mibBuilder.importSymbols("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode", "docsIfDocsisCapability", "docsIfDocsisOperMode")
docsIfCmStatusDocsisOperMode, docsIfDocsisBaseCapability, docsIfCmtsCmStatusDocsisRegMode, docsIfCmStatusModulationType, docsIfCmtsCmStatusMacAddress, docsIfCmCmtsAddress, docsIfCmtsCmStatusModulationType = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode", "docsIfDocsisBaseCapability", "docsIfCmtsCmStatusDocsisRegMode", "docsIfCmStatusModulationType", "docsIfCmtsCmStatusMacAddress", "docsIfCmCmtsAddress", "docsIfCmtsCmStatusModulationType")
ifPhysAddress, = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter32, iso, IpAddress, TimeTicks, ModuleIdentity, Counter64, Unsigned32, Bits, Gauge32, ObjectIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "iso", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter64", "Unsigned32", "Bits", "Gauge32", "ObjectIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
docsDevTrapMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 69, 10))
docsDevTrapMIB.setRevisions(('1970-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsDevTrapMIB.setRevisionsDescriptions(('The CABLE DEVICE TRAP MIB is an extension of the\n                 CABLE DEVICE MIB defined in RFC2669. It defines various\n                 trap objects for both cable modem and cable modem\n                 termination systems. Two groups of SNMP notification\n                 objects are defined. One group is for notifying cable\n                 modem events and one group for notifying cable modem\n                 termination system events. Common to all CM\n                 notification objects (traps) is that their OBJECTS\n                 statements contain information about the event priority,\n                 the event Id, the event message body, the CM DOCSIS\n                 capability, the CM DOCSIS QOS level, the CM DOCSIS\n                 upstream modulation type, the cable interface MAC\n                 address of the cable modem and the cable card MAC address\n                 of the CMTS to which the modem is connectede.\n\n                 These objects are docsDevEvLevel, docsDevId,\n                 docsDevEvText, docsIfDocsisBaseCapability,\n                 docsIfCmStatusDocsisOperMode, docsIfCmStatusModulationType\n                 ifPhysAddress and docsIfCmCmtsAddress. The values of\n                 docsDevEvLevel, docsDevId, and docsDevEvText are from the\n                 entry which logs this event in the docsDevEventTable, which\n                 is defined in DOCS-CABLE-DEVICE-MIB of RFC2669. The\n                 docsIfDocsisBaseCapability, docsIfCmStatusDocsisOperMode,\n                 and docsIfCmStatusModulationType are defined in the DOCS-IF-MIB.\n                 The ifPhysAddress value is the MAC address of the cable\n                 interface of this cable modem. The docsIfCmCmtsAddress\n                 specifies the MAC address of the CMTS (if there is a cable\n                 card/ interface in the CMTS, then it is actually the\n                 cable interface interface MAC address to which the CM is\n                 connected).  Individual CM trap may contain additional\n                 objects to provide necessary information.\n\n                 Common to all CMTS notification objects (traps) is that\n                 their OBJECTS statements contain information about the\n                 event priority, the event Id, the event message body,\n                 the connected CM DOCSIS QOS status, the connected CM DOCSIS\n                 modulation type, the CM cable interface MAC address, the\n                 CMTS DOCSIS capability, and the CMTS MAC address.\n\n                 These objects are docsDevEvLevel, docsDevId, docsDevEvText,\n                 docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmStatusModulationType,\n                 docsIfCmtsCmStatusMacAddress, docsIfDocsisBaseCapability, and\n                 ifPhysAddress. The values of docsDevEvLevel, docsDevId, and\n                 docsDevEvText are similar to those in CM traps. The values of\n                 docsIfCmtsCmStatusDocsisRegMode, docsIfCmtsCmStatusModulationType,\n                 and docsIfCmtsCmStatusMacAddress are from the\n                 docsIfCmtsCmStatusEntry (defined in DOCS-IF-MIB) corresponding\n                 to a connected CM. The docsIfDocsisBaseCapability indicates the\n                 CMTS DOCSIS capability. The ifPhysAddress value is the CMTS MAC\n                 address (if there is a cable card/ interface in the CMTS, then\n                 it is actually the MAC address of the cable interface which\n                 connected to the CM).\n                ',))
if mibBuilder.loadTexts: docsDevTrapMIB.setLastUpdated('0202250000Z')
if mibBuilder.loadTexts: docsDevTrapMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: docsDevTrapMIB.setContactInfo('\n                          Junming Gao\n                          Cisco Systems Inc\n                          <jgao@ cisco. com>\n                          ')
if mibBuilder.loadTexts: docsDevTrapMIB.setDescription('Modified by David Raftus (david.raftus@imedia.com) to\n                  deprecate trap definition objects originating from\n                  the docsIfExt MIB. Corresponding objects from the\n                  Docsis 2.0 RF MIB draft were added to the trap\n                  definitions.')
docsDevTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1))
docsDevTrapControl = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 1))
docsDevCmTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0))
docsDevCmtsTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0))
docsDevCmTrapControl = MibScalar((1, 3, 6, 1, 2, 1, 69, 2, 1, 1, 1), Bits().clone(namedValues=NamedValues(("cmInitTLVUnknownTrap", 0), ("cmDynServReqFailTrap", 1), ("cmDynServRspFailTrap", 2), ("cmDynServAckFailTrap", 3), ("cmBpiInitTrap", 4), ("cmBPKMTrap", 5), ("cmDynamicSATrap", 6), ("cmDHCPFailTrap", 7), ("cmSwUpgradeInitTrap", 8), ("cmSwUpgradeFailTrap", 9), ("cmSwUpgradeSuccessTrap", 10), ("cmSwUpgradeCVCTrap", 11), ("cmTODFailTrap", 12), ("cmDCCReqFailTrap", 13), ("cmDCCRspFailTrap", 14), ("cmDCCAckFailTrap", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmTrapControl.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapControl.setDescription('The object is used to enable CM traps. From left to right,\n         the set bit indicates the corresponding CM trap is enabled.\n         For example, if the first bit is set, then\n         docsDevCmInitTLVUnknownTrap is enabled. If it is zero,\n         the trap is disabled.\n        ')
docsDevCmtsTrapControl = MibScalar((1, 3, 6, 1, 2, 1, 69, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("cmtsInitRegReqFailTrap", 0), ("cmtsInitRegRspFailTrap", 1), ("cmtsInitRegAckFailTrap", 2), ("cmtsDynServReqFailTrap", 3), ("cmtsDynServRspFailTrap", 4), ("cmtsDynServAckFailTrap", 5), ("cmtsBpiInitTrap", 6), ("cmtsBPKMTrap", 7), ("cmtsDynamicSATrap", 8), ("cmtsDCCReqFailTrap", 9), ("cmtsDCCRspFailTrap", 10), ("cmtsDCCAckFailTrap", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsDevCmtsTrapControl.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapControl.setDescription('The object is used to enable CMTS traps. From left to right,\n     the set bit indicates the corresponding CMTS trap is enabled.\n     For example, if the first bit is set, then\n     docsDevCmtsInitRegRspFailTrap is enabled. If it is zero,\n     the trap is disabled.\n    ')
docsDevCmInitTLVUnknownTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmInitTLVUnknownTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmInitTLVUnknownTrap.setDescription('Event due to detection of unknown TLV during\n         the TLV parsing process.\n         The values of docsDevEvLevel, docsDevId, and\n         docsDevEvText are from the entry which logs this event\n         in the docsDevEventTable. The docsIfDocsisBaseCapability\n         indicates the DOCSIS version information. The docsIfCmStatusDocsisOperMode indicates the QOS level of the CM, while the docsIfCmStatusModulationType indicates the upstream modulation methodology used by the CM. \n         The ifPhysAddress value is the MAC address of the cable interface of this cable modem.\n         The docsIfCmCmtsAddress specifies the MAC address\n         of the CMTS to which the CM is connected (if there is a cable\n         card/ interface in the CMTS, then it is actually the MAC address of the cable\n         interface which connected to the CM).\n         This part of information is uniformed across all CM traps.\n        ')
docsDevCmDynServReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServReqFailTrap.setDescription('An event to report the failure of a dynamic service\n         request happened during the dynamic services process.\n        ')
docsDevCmDynServRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServRspFailTrap.setDescription('An event to report the failure of a dynamic service\n         response happened during the dynamic services process.\n        ')
docsDevCmDynServAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynServAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynServAckFailTrap.setDescription('An event to report the failure of a dynamic service\n         acknowledgement happened during the dynamic services process.\n        ')
docsDevCmBpiInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmBpiInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmBpiInitTrap.setDescription('An event to report the failure of a BPI initialization\n         attempt happened during the registration process.\n        ')
docsDevCmBPKMTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmBPKMTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmBPKMTrap.setDescription('An event to report the failure of a BPKM operation.\n        ')
docsDevCmDynamicSATrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDynamicSATrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDynamicSATrap.setDescription('An event to report the failure of a dynamic security\n         association operation.\n        ')
docsDevCmDHCPFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerDhcp"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDHCPFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDHCPFailTrap.setDescription('An event to report the failure of a DHCP server.\n        The value of docsDevServerDhcp is the IP address\n        of the DHCP server.\n        ')
docsDevCmSwUpgradeInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeInitTrap.setDescription('An event to report a software upgrade initiated\n         event. The values of docsDevSwFilename, and\n         docsDevSwServer indicate the software image name\n         and the server IP address the image is from.\n        ')
docsDevCmSwUpgradeFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeFailTrap.setDescription('An event to report the failure of a software upgrade\n         attempt. The values of docsDevSwFilename, and\n         docsDevSwServer indicate the software image name\n         and the server IP address the image is from.\n        ')
docsDevCmSwUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 11)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwFilename"), ("DOCS-CABLE-DEVICE-MIB", "docsDevSwServer"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeSuccessTrap.setDescription('An event to report the Software upgrade success event.\n         The values of docsDevSwFilename, and\n         docsDevSwServer indicate the software image name\n         and the server IP address the image is from.\n        ')
docsDevCmSwUpgradeCVCFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 12)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmSwUpgradeCVCFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmSwUpgradeCVCFailTrap.setDescription('An event to report the failure of the verification\n         of code file happened during a secure software upgrade\n         attempt.\n        ')
docsDevCmTODFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 13)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-CABLE-DEVICE-MIB", "docsDevServerTime"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmTODFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTODFailTrap.setDescription('An event to report the failure of a time of day server.\n         The value of docsDevServerTime indicates the server IP\n         address.\n        ')
docsDevCmDCCReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 14)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCReqFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change request happened during the dynamic channel\n         change process in the CM side.\n        ')
docsDevCmDCCRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 15)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCRspFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change response happened during the dynamic channel\n         change process in the CM side.\n        ')
docsDevCmDCCAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 2, 0, 16)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("DOCS-IF-EXT-MIB", "docsIfDocsisOperMode"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmStatusDocsisOperMode"), ("DOCS-IF-MIB", "docsIfCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmDCCAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmDCCAckFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change acknowledgement happened during the dynamic channel\n         change process in the CM side.\n        ')
docsDevCmtsInitRegReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 1)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegReqFailTrap.setDescription('An event to report the failure of a registration\n        request from CM happening during the CM initialization\n        process and detected on the CMTS side. The values of\n        docsDevEvLevel, docsDevId, and docsDevEvText are from\n        the entry which logs this event in the\n        docsDevEventTable. The docsIfCmtsCmStatusDocsisRegMode\n        and docsIfCmtsCmStatusMacAddress indicate the docsis\n        QOS version and the MAC address of the requesting CM.\n        The docsIfCmtsCmModulationType indicates the upstream\n        modulation methodology used by the connected CM.\n        The docsIfDocsisBaseCapability and ifPhysAddress\n        indicate the docsis version of the CMTS and the MAC\n        address of the CMTS (if there is a cable card/ interface\n        in the CMTS, then it is actually the MAC address of the\n        cable interface which connected to the CM) cable card\n        connected to the CM. This part of information is\n        uniformed across all CMTS traps.\n        ')
docsDevCmtsInitRegRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 2)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegRspFailTrap.setDescription('An event to report the failure of a registration\n         response happened during the CM initialization\n         process and detected in the CMTS side.\n        ')
docsDevCmtsInitRegAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 3)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsInitRegAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsInitRegAckFailTrap.setDescription('An event to report the failure of a registration\n         acknowledgement from CM happened during the CM\n         initialization process and detected in the CMTS side.\n        ')
docsDevCmtsDynServReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 4)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServReqFailTrap.setDescription('An event to report the failure of a dynamic service\n         request happened during the dynamic services process\n         and detected in the CMTS side.\n        ')
docsDevCmtsDynServRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 5)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServRspFailTrap.setDescription('An event to report the failure of a dynamic service\n         response happened during the dynamic services process\n         and detected in the CMTS side.\n        ')
docsDevCmtsDynServAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 6)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynServAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynServAckFailTrap.setDescription('An event to report the failure of a dynamic service\n         acknowledgement happened during the dynamic services\n         process and detected in the CMTS side.\n        ')
docsDevCmtsBpiInitTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 7)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsBpiInitTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsBpiInitTrap.setDescription('An event to report the failure of a BPI initialization\n         attempt happened during the CM registration process\n         and detected in the CMTS side.\n        ')
docsDevCmtsBPKMTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 8)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsBPKMTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsBPKMTrap.setDescription('An event to report the failure of a BPKM operation\n         which is detected in the CMTS side.\n        ')
docsDevCmtsDynamicSATrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 9)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDynamicSATrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDynamicSATrap.setDescription('An event to report the failure of a dynamic security\n         association operation which is detected in the CMTS side.\n        ')
docsDevCmtsDCCReqFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 10)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCReqFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCReqFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change request happened during the dynamic channel\n         change process in the CM side and detected in the\n         CMTS side.\n        ')
docsDevCmtsDCCRspFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 11)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCRspFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCRspFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change response happened during the dynamic channel\n         change process in the CMTS side.\n        ')
docsDevCmtsDCCAckFailTrap = NotificationType((1, 3, 6, 1, 2, 1, 69, 2, 1, 3, 0, 12)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-EXT-MIB", "docsIfCmtsCmStatusDocsisMode"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-EXT-MIB", "docsIfDocsisCapability"), ("IF-MIB", "ifPhysAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDocsisRegMode"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusModulationType"))
if mibBuilder.loadTexts: docsDevCmtsDCCAckFailTrap.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsDCCAckFailTrap.setDescription('An event to report the failure of a dynamic channel\n         change acknowledgement happened during the dynamic channel\n         change process in the CMTS side.\n        ')
docsDevTrapConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4))
docsDevTrapGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1))
docsDevTrapCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2))
docsDevCmTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2, 1)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTrapControlGroup"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmTrapCompliance = docsDevCmTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapCompliance.setDescription('The compliance statement for Cable Modem Traps and Control')
docsDevCmTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 1)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmTrapControlGroup = docsDevCmTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmTrapControlGroup.setDescription('CM must support docsDevCmTrapControl.')
docsDevCmNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 2)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmInitTLVUnknownTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynServAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmBpiInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmBPKMTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDynamicSATrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDHCPFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeSuccessTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmSwUpgradeCVCFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmTODFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmDCCAckFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmNotificationGroup = docsDevCmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmNotificationGroup.setDescription('A collection of CM notifications providing device status and\n        control.')
docsDevCmtsTrapCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 2, 2)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsTrapControlGroup"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsTrapCompliance = docsDevCmtsTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapCompliance.setDescription('The compliance statement for MCNS Cable Modems and\n        Cable Modem Termination Systems.')
docsDevCmtsTrapControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 3)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsTrapControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsTrapControlGroup = docsDevCmtsTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsTrapControlGroup.setDescription('CMTS must support docsDevCmtsTrapControl.')
docsDevCmtsNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 69, 2, 1, 4, 1, 4)).setObjects(("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsInitRegAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynServAckFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsBpiInitTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsBPKMTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDynamicSATrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCReqFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCRspFailTrap"), ("DOCS-CABLE-DEVICE-TRAP-MIB", "docsDevCmtsDCCAckFailTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsDevCmtsNotificationGroup = docsDevCmtsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: docsDevCmtsNotificationGroup.setDescription('A collection of CMTS notifications providing device status and\n        control.')
mibBuilder.exportSymbols("DOCS-CABLE-DEVICE-TRAP-MIB", docsDevCmtsDynServReqFailTrap=docsDevCmtsDynServReqFailTrap, docsDevCmBPKMTrap=docsDevCmBPKMTrap, docsDevCmSwUpgradeCVCFailTrap=docsDevCmSwUpgradeCVCFailTrap, docsDevCmTODFailTrap=docsDevCmTODFailTrap, docsDevCmtsDynamicSATrap=docsDevCmtsDynamicSATrap, docsDevTrapGroups=docsDevTrapGroups, docsDevCmtsDCCReqFailTrap=docsDevCmtsDCCReqFailTrap, docsDevCmtsTraps=docsDevCmtsTraps, docsDevCmDCCReqFailTrap=docsDevCmDCCReqFailTrap, docsDevCmSwUpgradeSuccessTrap=docsDevCmSwUpgradeSuccessTrap, docsDevCmtsTrapControlGroup=docsDevCmtsTrapControlGroup, docsDevTrapConformance=docsDevTrapConformance, docsDevCmDCCRspFailTrap=docsDevCmDCCRspFailTrap, docsDevCmNotificationGroup=docsDevCmNotificationGroup, docsDevCmtsBPKMTrap=docsDevCmtsBPKMTrap, docsDevCmDynServRspFailTrap=docsDevCmDynServRspFailTrap, docsDevCmInitTLVUnknownTrap=docsDevCmInitTLVUnknownTrap, docsDevCmBpiInitTrap=docsDevCmBpiInitTrap, docsDevTrapCompliances=docsDevTrapCompliances, docsDevCmtsNotificationGroup=docsDevCmtsNotificationGroup, docsDevCmtsDCCRspFailTrap=docsDevCmtsDCCRspFailTrap, docsDevTrapMIB=docsDevTrapMIB, docsDevCmtsTrapControl=docsDevCmtsTrapControl, docsDevCmtsDynServAckFailTrap=docsDevCmtsDynServAckFailTrap, docsDevCmDynServAckFailTrap=docsDevCmDynServAckFailTrap, docsDevCmTraps=docsDevCmTraps, docsDevCmtsInitRegReqFailTrap=docsDevCmtsInitRegReqFailTrap, docsDevTrapControl=docsDevTrapControl, docsDevCmtsDCCAckFailTrap=docsDevCmtsDCCAckFailTrap, docsDevCmTrapControlGroup=docsDevCmTrapControlGroup, docsDevCmtsInitRegRspFailTrap=docsDevCmtsInitRegRspFailTrap, docsDevCmtsBpiInitTrap=docsDevCmtsBpiInitTrap, docsDevCmTrapCompliance=docsDevCmTrapCompliance, docsDevCmSwUpgradeInitTrap=docsDevCmSwUpgradeInitTrap, docsDevCmDynServReqFailTrap=docsDevCmDynServReqFailTrap, docsDevCmDHCPFailTrap=docsDevCmDHCPFailTrap, docsDevCmDynamicSATrap=docsDevCmDynamicSATrap, docsDevCmtsTrapCompliance=docsDevCmtsTrapCompliance, docsDevCmtsDynServRspFailTrap=docsDevCmtsDynServRspFailTrap, docsDevCmDCCAckFailTrap=docsDevCmDCCAckFailTrap, docsDevCmTrapControl=docsDevCmTrapControl, docsDevCmtsInitRegAckFailTrap=docsDevCmtsInitRegAckFailTrap, PYSNMP_MODULE_ID=docsDevTrapMIB, docsDevCmSwUpgradeFailTrap=docsDevCmSwUpgradeFailTrap, docsDevTraps=docsDevTraps)
