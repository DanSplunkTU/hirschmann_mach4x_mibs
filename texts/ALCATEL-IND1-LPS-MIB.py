#
# PySNMP MIB module ALCATEL-IND1-LPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-LPS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:14:28 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1MacAddress, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MacAddress")
systemServicesDate, systemServicesTime = mibBuilder.importSymbols("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate", "systemServicesTime")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Gauge32, Counter64, iso, Counter32, MibIdentifier, Bits, ObjectIdentity, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Counter64", "iso", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "Unsigned32")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
alcatelIND1LearnedPortSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2))
alcatelIND1LearnedPortSecurityMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The MIB module for Learned Port Security entity.',))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the MIB module for\n        address learning mac addresses entity.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special,\n        or consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1LearnedPortSecurityMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBNotifications.setDescription('Branch For LAG MIB Subsystem Notifications.')
alcatelIND1LearnedPortSecurityMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBObjects.setDescription('Branch For Learned Port Security Module MIB Subsystem Managed\nObjects.')
alcatelIND1LearnedPortSecurityMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBConformance.setDescription('Branch for Learned Port Security Module MIB Subsystem Conformance\nInformation.')
alcatelIND1LearnedPortSecurityMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBGroups.setDescription('Branch for Learned Port Security Module MIB Subsystem Units of\nConformance.')
alcatelIND1LearnedPortSecurityMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 2))
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBCompliances.setDescription('Branch for Learned Port Security Module MIB Subsystem Compliance\nStatements.')
learnedPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1), )
if mibBuilder.loadTexts: learnedPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityTable.setDescription('A table contains Learned Port Security information.')
learnedPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: learnedPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityEntry.setDescription('Definition of the Learned Port Security port security table entries.')
lpsViolationOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2), ("discard", 3))).clone('restrict')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsViolationOption.setStatus('current')
if mibBuilder.loadTexts: lpsViolationOption.setDescription('The handle option for LPS violation ')
lpsMaxMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsMaxMacNum.setStatus('current')
if mibBuilder.loadTexts: lpsMaxMacNum.setDescription('The maximum number of MAC addresses that the LPS port could learn.')
lpsLoMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 3), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsLoMacRange.setStatus('current')
if mibBuilder.loadTexts: lpsLoMacRange.setDescription('The low end of Mac range which is allowed to be learned on LPS\n     port')
lpsHiMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 4), MacAddress().clone(hexValue="ffffffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsHiMacRange.setStatus('current')
if mibBuilder.loadTexts: lpsHiMacRange.setDescription('The high end of Mac range which is allowed to be learned on LPS\n     port')
lpsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("locked", 3))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: lpsAdminStatus.setDescription('This object specifies the desired administrative state of\n     the Learned Port Security feature on this port. ')
lpsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("securityViolated", 3), ("locked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsOperStatus.setStatus('current')
if mibBuilder.loadTexts: lpsOperStatus.setDescription('This object identifies the current operational state of the\n       LPS port.')
lpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: lpsRowStatus.setDescription('The RowStatus for this table.')
lpsRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("release", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsRelease.setStatus('current')
if mibBuilder.loadTexts: lpsRelease.setDescription('This object causes the release of LPS port if it is in violated state.')
lpsMaxFilteredMacNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsMaxFilteredMacNum.setStatus('current')
if mibBuilder.loadTexts: lpsMaxFilteredMacNum.setDescription('The maximum number of Filtered MAC addresses that the LPS port\n     could learn. The default is 5.')
lpsLearnTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsLearnTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: lpsLearnTrapThreshold.setDescription('When the number of bridged MACs learned goes over this value, a trap will\n     be generated for every additional MAC that is learned.')
lpsViolatingMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 1, 1, 11), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsViolatingMac.setStatus('current')
if mibBuilder.loadTexts: lpsViolatingMac.setDescription('The MAC Address which cause the Violation on this Port.\n    This field is set when LPS port is in Violated state,\n    it is cleared when Port comes out of violation')
learnedPortSecurityGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3))
lpsLearningWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowTime.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowTime.setDescription('The learning time window that can be configured on the switch to learn new MACs on the\n     LPS port. This paramater applies to the whole switch and the granularity is in minutes.')
lpsLearningWindowTimeWithStaticConversion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowTimeWithStaticConversion.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowTimeWithStaticConversion.setDescription('If it is enabled, when the learning window is expired, the dynamic MACs learned\n     on all LPS ports will be converted to static. It is configurable only when\n     the learning window is enabled.')
lpsConvertToStatic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2147483647, 2147483647), ValueRangeConstraint(1001, 17000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsConvertToStatic.setStatus('current')
if mibBuilder.loadTexts: lpsConvertToStatic.setDescription('It converts the L2 addresses learned on the given port in IfIndex format from dynamic to static,\n     Value 2147483647 converts the L2 addresses learned for all ports.')
lpsLearningWindowNoAging = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowNoAging.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowNoAging.setDescription('If it is enabled, all mac-address learnt on the port would be deffered from aging')
lpsLearningWindowBootupStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowBootupStatus.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowBootupStatus.setDescription('If it is enabled, Learning window will start at boot-up time')
lpsLearningWindowTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 172800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsLearningWindowTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowTimeRemaining.setDescription('Amount of time (in seconds) remaining until the learning window expires.')
lpsLearningWindowLearnAsStatic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowLearnAsStatic.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowLearnAsStatic.setDescription('If it is enabled, all mac-address learnt on the port would be directly converted to static.')
lpsLearningWindowPseudoMacMove = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lpsLearningWindowPseudoMacMove.setStatus('current')
if mibBuilder.loadTexts: lpsLearningWindowPseudoMacMove.setDescription('If it is enabled, pseudo-static MACs will be subject to MAC move.')
learnedPortSecurityL2MacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4), )
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressTable.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressTable.setDescription('A table contains Learned Port Security L2 Mac addresses.')
learnedPortSecurityL2MacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-LPS-MIB", "lpsL2VlanId"), (0, "ALCATEL-IND1-LPS-MIB", "lpsL2MacAddress"))
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressEntry.setDescription('Definition of the Learned Port Security port security mac-address table entries.')
lpsL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: lpsL2VlanId.setStatus('current')
if mibBuilder.loadTexts: lpsL2VlanId.setDescription('The Vlan Id assigned to the packet.')
lpsL2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: lpsL2MacAddress.setStatus('current')
if mibBuilder.loadTexts: lpsL2MacAddress.setDescription('The MacAddress that is either configured or dynamically learnt on the LPS port.')
lpsL2MacAddressLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("configured", 1), ("dynamic", 2), ("filtered", 3), ("quarantined", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsL2MacAddressLearnType.setStatus('current')
if mibBuilder.loadTexts: lpsL2MacAddressLearnType.setDescription('Learned L2 MAC address type.')
lpsL2MacAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsL2MacAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: lpsL2MacAddressRowStatus.setDescription('The RowStatus for this table.')
learnedPortSecurityAgL2MacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6), )
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressTable.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressTable.setDescription('A table contains Learned Port Security L2 Mac addresses.')
learnedPortSecurityAgL2MacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddress"), (0, "ALCATEL-IND1-LPS-MIB", "lpsAgL2VlanId"))
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityAgL2MacAddressEntry.setDescription('Definition of the Learned Port Security port security mac-address table entries.')
lpsAgL2MacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: lpsAgL2MacAddress.setStatus('current')
if mibBuilder.loadTexts: lpsAgL2MacAddress.setDescription('The MacAddress that is either configured or dynamically learnt on the LPS port.')
lpsAgL2VlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: lpsAgL2VlanId.setStatus('current')
if mibBuilder.loadTexts: lpsAgL2VlanId.setDescription('The Vlan Id assigned to the packet.')
lpsAgL2MacAddressLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("configured", 1), ("dynamic", 2), ("filtered", 3), ("quarantined", 4), ("configuredFiltered", 5), ("pseudoStatic", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsAgL2MacAddressLearnType.setStatus('current')
if mibBuilder.loadTexts: lpsAgL2MacAddressLearnType.setDescription('Learned L2 MAC address type.')
lpsAgL2MacAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: lpsAgL2MacAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: lpsAgL2MacAddressRowStatus.setDescription('The RowStatus for this table.')
lpsTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5))
lpsViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchIpAddr"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolatingMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolationType"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if mibBuilder.loadTexts: lpsViolationTrap.setStatus('current')
if mibBuilder.loadTexts: lpsViolationTrap.setDescription('Learned Port Security Violation Trap.')
lpsPortUpAfterLearningWindowExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 2)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"))
if mibBuilder.loadTexts: lpsPortUpAfterLearningWindowExpiredTrap.setStatus('current')
if mibBuilder.loadTexts: lpsPortUpAfterLearningWindowExpiredTrap.setDescription('When an LPS port joins or is enabled after the Learning Window is expired,\n         the MAC address learning on the port will be disabled, and this trap is\n         generated as a notification.')
lpsLearnMac = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 0, 3)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapBridgeMac"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesDate"), ("ALCATEL-IND1-SYSTEM-MIB", "systemServicesTime"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if mibBuilder.loadTexts: lpsLearnMac.setStatus('current')
if mibBuilder.loadTexts: lpsLearnMac.setDescription('When the number of bridged MACs learned goes over the configured threshold value,\n        a trap will  be generated for every additional MAC that is learned.')
lpsTrapSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchName.setStatus('current')
if mibBuilder.loadTexts: lpsTrapSwitchName.setDescription('The name of the switch.')
lpsTrapSwitchIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchIpAddr.setStatus('current')
if mibBuilder.loadTexts: lpsTrapSwitchIpAddr.setDescription('The IP address of switch.')
lpsTrapSwitchSlice = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchSlice.setStatus('deprecated')
if mibBuilder.loadTexts: lpsTrapSwitchSlice.setDescription('The physical slice number for the LPS port on which\n                         violation occured. ')
lpsTrapSwitchPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchPort.setStatus('deprecated')
if mibBuilder.loadTexts: lpsTrapSwitchPort.setDescription('The physical port number on which\n                         violation occured. ')
lpsTrapViolatingMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapViolatingMac.setStatus('current')
if mibBuilder.loadTexts: lpsTrapViolatingMac.setDescription('The violating MAC address. ')
lpsTrapViolationType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restrict", 1), ("shutdown", 2), ("discard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapViolationType.setStatus('current')
if mibBuilder.loadTexts: lpsTrapViolationType.setDescription('The type of violation that occured on the LPS port.')
lpsTrapSwitchVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapSwitchVlan.setStatus('current')
if mibBuilder.loadTexts: lpsTrapSwitchVlan.setDescription('The VLAN number on which\n                         violation occured. ')
lpsTrapBridgeMac = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapBridgeMac.setStatus('current')
if mibBuilder.loadTexts: lpsTrapBridgeMac.setDescription('The Bridge MAC address\n                         when learn trap threshold exceeds.')
lpsTrapIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 1, 5, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpsTrapIfIndex.setStatus('current')
if mibBuilder.loadTexts: lpsTrapIfIndex.setDescription('The ifIndex of the physical port on which\n                         violation occured. ')
alcatelIND1LearnedPortSecurityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityGlobGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityTrapsGroup"), ("ALCATEL-IND1-LPS-MIB", "learnedPortSecurityTrapsObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1LearnedPortSecurityMIBCompliance = alcatelIND1LearnedPortSecurityMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1LearnedPortSecurityMIBCompliance.setDescription('Compliance statement for Learned Port Security.')
learnedPortSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsViolationOption"), ("ALCATEL-IND1-LPS-MIB", "lpsMaxMacNum"), ("ALCATEL-IND1-LPS-MIB", "lpsLoMacRange"), ("ALCATEL-IND1-LPS-MIB", "lpsHiMacRange"), ("ALCATEL-IND1-LPS-MIB", "lpsAdminStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsOperStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsRowStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsRelease"), ("ALCATEL-IND1-LPS-MIB", "lpsMaxFilteredMacNum"), ("ALCATEL-IND1-LPS-MIB", "lpsLearnTrapThreshold"), ("ALCATEL-IND1-LPS-MIB", "lpsViolatingMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityGroup = learnedPortSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityGroup.setDescription('Collection of objects for learned port security table.')
learnedPortSecurityGlobGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 2)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTime"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTimeWithStaticConversion"), ("ALCATEL-IND1-LPS-MIB", "lpsConvertToStatic"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowNoAging"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowBootupStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowTimeRemaining"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowLearnAsStatic"), ("ALCATEL-IND1-LPS-MIB", "lpsLearningWindowPseudoMacMove"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityGlobGroup = learnedPortSecurityGlobGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityGlobGroup.setDescription('Collection of objects for learned port security global group.')
learnedPortSecurityTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 3)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsViolationTrap"), ("ALCATEL-IND1-LPS-MIB", "lpsPortUpAfterLearningWindowExpiredTrap"), ("ALCATEL-IND1-LPS-MIB", "lpsLearnMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityTrapsGroup = learnedPortSecurityTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityTrapsGroup.setDescription('Collection of notifications for learned port security.')
learnedPortSecurityL2MacAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 4)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsL2MacAddressLearnType"), ("ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddressLearnType"), ("ALCATEL-IND1-LPS-MIB", "lpsL2MacAddressRowStatus"), ("ALCATEL-IND1-LPS-MIB", "lpsAgL2MacAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityL2MacAddressGroup = learnedPortSecurityL2MacAddressGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityL2MacAddressGroup.setDescription('Collection of objects for learned port security MacAddress table.')
learnedPortSecurityTrapsObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 6)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchName"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchIpAddr"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchSlice"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchPort"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolatingMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapViolationType"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapSwitchVlan"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapBridgeMac"), ("ALCATEL-IND1-LPS-MIB", "lpsTrapIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityTrapsObjGroup = learnedPortSecurityTrapsObjGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityTrapsObjGroup.setDescription('Collection of objects for learned port security Notofocation Object Group.')
learnedPortSecurityNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 8, 2, 2, 1, 7)).setObjects(("ALCATEL-IND1-LPS-MIB", "lpsLearnMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    learnedPortSecurityNotificationGroup = learnedPortSecurityNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: learnedPortSecurityNotificationGroup.setDescription('Collection of notifications for LPS.')
mibBuilder.exportSymbols("ALCATEL-IND1-LPS-MIB", lpsTrapSwitchPort=lpsTrapSwitchPort, lpsTrapSwitchName=lpsTrapSwitchName, alcatelIND1LearnedPortSecurityMIBNotifications=alcatelIND1LearnedPortSecurityMIBNotifications, lpsL2MacAddress=lpsL2MacAddress, learnedPortSecurityAgL2MacAddressTable=learnedPortSecurityAgL2MacAddressTable, lpsAdminStatus=lpsAdminStatus, lpsAgL2VlanId=lpsAgL2VlanId, lpsMaxFilteredMacNum=lpsMaxFilteredMacNum, lpsRelease=lpsRelease, lpsLearningWindowTime=lpsLearningWindowTime, lpsMaxMacNum=lpsMaxMacNum, lpsTrapIfIndex=lpsTrapIfIndex, learnedPortSecurityTrapsObjGroup=learnedPortSecurityTrapsObjGroup, lpsL2MacAddressLearnType=lpsL2MacAddressLearnType, lpsViolationOption=lpsViolationOption, lpsAgL2MacAddressLearnType=lpsAgL2MacAddressLearnType, lpsPortUpAfterLearningWindowExpiredTrap=lpsPortUpAfterLearningWindowExpiredTrap, lpsAgL2MacAddress=lpsAgL2MacAddress, lpsTrapViolatingMac=lpsTrapViolatingMac, lpsHiMacRange=lpsHiMacRange, alcatelIND1LearnedPortSecurityMIBCompliance=alcatelIND1LearnedPortSecurityMIBCompliance, learnedPortSecurityGroup=learnedPortSecurityGroup, learnedPortSecurityL2MacAddressEntry=learnedPortSecurityL2MacAddressEntry, lpsTrapBridgeMac=lpsTrapBridgeMac, lpsLearningWindowTimeWithStaticConversion=lpsLearningWindowTimeWithStaticConversion, learnedPortSecurityL2MacAddressTable=learnedPortSecurityL2MacAddressTable, alcatelIND1LearnedPortSecurityMIBGroups=alcatelIND1LearnedPortSecurityMIBGroups, lpsTrapViolationType=lpsTrapViolationType, lpsAgL2MacAddressRowStatus=lpsAgL2MacAddressRowStatus, alcatelIND1LearnedPortSecurityMIBConformance=alcatelIND1LearnedPortSecurityMIBConformance, lpsOperStatus=lpsOperStatus, lpsLearningWindowPseudoMacMove=lpsLearningWindowPseudoMacMove, lpsL2MacAddressRowStatus=lpsL2MacAddressRowStatus, learnedPortSecurityGlobalGroup=learnedPortSecurityGlobalGroup, lpsLearningWindowLearnAsStatic=lpsLearningWindowLearnAsStatic, lpsL2VlanId=lpsL2VlanId, alcatelIND1LearnedPortSecurityMIBCompliances=alcatelIND1LearnedPortSecurityMIBCompliances, learnedPortSecurityTrapsGroup=learnedPortSecurityTrapsGroup, learnedPortSecurityL2MacAddressGroup=learnedPortSecurityL2MacAddressGroup, learnedPortSecurityNotificationGroup=learnedPortSecurityNotificationGroup, lpsLearningWindowTimeRemaining=lpsLearningWindowTimeRemaining, lpsLearningWindowNoAging=lpsLearningWindowNoAging, learnedPortSecurityAgL2MacAddressEntry=learnedPortSecurityAgL2MacAddressEntry, lpsTrapsObj=lpsTrapsObj, alcatelIND1LearnedPortSecurityMIB=alcatelIND1LearnedPortSecurityMIB, learnedPortSecurityTable=learnedPortSecurityTable, lpsLearnMac=lpsLearnMac, lpsViolatingMac=lpsViolatingMac, PYSNMP_MODULE_ID=alcatelIND1LearnedPortSecurityMIB, lpsTrapSwitchVlan=lpsTrapSwitchVlan, lpsViolationTrap=lpsViolationTrap, lpsLearningWindowBootupStatus=lpsLearningWindowBootupStatus, lpsLoMacRange=lpsLoMacRange, lpsConvertToStatic=lpsConvertToStatic, learnedPortSecurityEntry=learnedPortSecurityEntry, lpsTrapSwitchSlice=lpsTrapSwitchSlice, lpsTrapSwitchIpAddr=lpsTrapSwitchIpAddr, lpsLearnTrapThreshold=lpsLearnTrapThreshold, lpsRowStatus=lpsRowStatus, learnedPortSecurityGlobGroup=learnedPortSecurityGlobGroup, alcatelIND1LearnedPortSecurityMIBObjects=alcatelIND1LearnedPortSecurityMIBObjects)
