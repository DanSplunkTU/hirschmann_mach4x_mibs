#
# PySNMP MIB module ALCATEL-IND1-EVB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-EVB-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:48:01 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1EvbMib, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1EvbMib")
TmnxPortID, TmnxEncapVal, TmnxServId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxPortID", "TmnxEncapVal", "TmnxServId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ieee8021BridgeEvbVSIID, ieee8021BridgeEvbVSIVlanId, ieee8021BridgeEvbVSIIDType, ieee8021BridgeEvbVSITypeVersion, ieee8021BridgeEvbVSIMvFormat, ieee8021BridgeEvbSbpPortNumber = mibBuilder.importSymbols("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIID", "ieee8021BridgeEvbVSIVlanId", "ieee8021BridgeEvbVSIIDType", "ieee8021BridgeEvbVSITypeVersion", "ieee8021BridgeEvbVSIMvFormat", "ieee8021BridgeEvbSbpPortNumber")
IEEE8021BridgePortNumber, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021BridgePortNumber")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, NotificationType, Counter32, IpAddress, ModuleIdentity, ObjectIdentity, iso, Gauge32, Counter64, Bits, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "iso", "Gauge32", "Counter64", "Bits", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1EVBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1))
alcatelIND1EVBMIB.setRevisions(('2011-07-11 00:00', '2011-07-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1EVBMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1EVBMIB.setLastUpdated('201107110000Z')
if mibBuilder.loadTexts: alcatelIND1EVBMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1EVBMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                      Alcatel-Lucent, Enterprise Solutions Division\n                    (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1EVBMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 Edge Virtual Bridge (EVB) Subsystem for OS10K Product Line.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 2011 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1EvbMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1))
if mibBuilder.loadTexts: alcatelIND1EvbMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EvbMIBObjects.setDescription(' Alcatel-Lucent EVB Subsystem Managed Objects.')
evbMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0))
evbMIBScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 1))
evbPortAutoMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evbPortAutoMode.setStatus('current')
if mibBuilder.loadTexts: evbPortAutoMode.setDescription(' Alcatel-Lucent EVB port auto detect mode.')
evbDefaultType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("vlanBridging", 1), ("serviceAccess", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evbDefaultType.setStatus('current')
if mibBuilder.loadTexts: evbDefaultType.setDescription(' Alcatel-Lucent EVB default port type.')
evbSapMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2))
evbVSISAPTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1), )
if mibBuilder.loadTexts: evbVSISAPTable.setStatus('current')
if mibBuilder.loadTexts: evbVSISAPTable.setDescription('A table that contains database of the active VSI on Service Access Point.')
evbVSISAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-EVB-MIB", "evbVSIPortNumber"), (0, "ALCATEL-IND1-EVB-MIB", "evbVSIID"), (0, "ALCATEL-IND1-EVB-MIB", "evbVSIVlanID"))
if mibBuilder.loadTexts: evbVSISAPEntry.setStatus('current')
if mibBuilder.loadTexts: evbVSISAPEntry.setDescription('A list of objects containing database of the VSI entries associated with\n             Service Access Points.')
evbVSIPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 1), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: evbVSIPortNumber.setStatus('current')
if mibBuilder.loadTexts: evbVSIPortNumber.setDescription('The evbVSIPortNumber is the Port Number for the SBP where \n             the VSI is accessed.')
evbVSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: evbVSIID.setStatus('current')
if mibBuilder.loadTexts: evbVSIID.setDescription('This object specifies the VSIID that uniquely identifies the VSI in the DCN.')
evbVSIVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: evbVSIVlanID.setStatus('current')
if mibBuilder.loadTexts: evbVSIVlanID.setDescription('The Vlan ID of the VSIID.\n             Multiple Vlan IDs can be assigned to one VSIID.\n             If GroupID is used, this Vlan ID is a locally defined C-VLAN ID.')
evbSAPPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evbSAPPortId.setStatus('current')
if mibBuilder.loadTexts: evbSAPPortId.setDescription('The evbSAPPortId is the access port where the EVB Service Access Point is accessed.')
evbSAPServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spb", 1), ("vpls", 2))).clone('spb')).setMaxAccess("readonly")
if mibBuilder.loadTexts: evbSAPServiceType.setStatus('current')
if mibBuilder.loadTexts: evbSAPServiceType.setDescription('The value of the label used to identify the SAP\n             on the access port specified by evbSAPPortId.')
evbSAPEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 6), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evbSAPEncapValue.setStatus('current')
if mibBuilder.loadTexts: evbSAPEncapValue.setDescription('The value of the label used to identify the SAP\n             on the access port specified by evbSAPPortId.')
evbSAPServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 1, 1, 7), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evbSAPServiceId.setStatus('current')
if mibBuilder.loadTexts: evbSAPServiceId.setDescription('This object is used to identify the Service of the EVB SAP.')
evbPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 2), )
if mibBuilder.loadTexts: evbPortModeTable.setStatus('current')
if mibBuilder.loadTexts: evbPortModeTable.setDescription('A table that contains Service Access Port Mode.')
evbPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-EVB-MIB", "evbPortId"))
if mibBuilder.loadTexts: evbPortModeEntry.setStatus('current')
if mibBuilder.loadTexts: evbPortModeEntry.setDescription('A list of objects containing Service Access Port Mode.')
evbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: evbPortId.setStatus('current')
if mibBuilder.loadTexts: evbPortId.setDescription('IfIndex uniquely identify this port table.')
evbPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("vlan", 1), ("access", 2))).clone('undefined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: evbPortMode.setStatus('current')
if mibBuilder.loadTexts: evbPortMode.setDescription('The EvbPortMode variable indicates if the interface on this port\n           is configured as a service access port or a vlan bridging.\n           An access port can be created manually (through CLI) or dynamically\n           (through requests from UNP or EVB).')
evbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 2, 2, 1, 3), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: evbRowStatus.setStatus('current')
if mibBuilder.loadTexts: evbRowStatus.setDescription('The status of this table entry.')
alcatelIND1EvbMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2))
if mibBuilder.loadTexts: alcatelIND1EvbMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EvbMIBConformance.setDescription(' Alcatel-Lucent EVB Subsystem Conformance Information.')
alcatelIND1EvbMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1EvbMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EvbMIBGroups.setDescription('Branch For ALU EVB MIB Subsystem Units Of Conformance.')
alcatelIND1EvbMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1EvbMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EvbMIBCompliances.setDescription('Branch For ALU EVB MIB Subsystem Compliance Statements.')
evbFailedCdcpTlvTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 1)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbPortId"))
if mibBuilder.loadTexts: evbFailedCdcpTlvTrap.setStatus('current')
if mibBuilder.loadTexts: evbFailedCdcpTlvTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbFailedEvbTlvTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 2)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbPortId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if mibBuilder.loadTexts: evbFailedEvbTlvTrap.setStatus('current')
if mibBuilder.loadTexts: evbFailedEvbTlvTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbUnknownVsiManagerTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 3)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbPortId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSbpPortNumber"))
if mibBuilder.loadTexts: evbUnknownVsiManagerTrap.setStatus('current')
if mibBuilder.loadTexts: evbUnknownVsiManagerTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbVdpAssocTlvTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 4)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbPortId"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbSbpPortNumber"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIID"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIIDType"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSITypeVersion"), ("IEEE8021-EVBB-MIB", "ieee8021BridgeEvbVSIMvFormat"))
if mibBuilder.loadTexts: evbVdpAssocTlvTrap.setStatus('current')
if mibBuilder.loadTexts: evbVdpAssocTlvTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbCdcpLldpExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 5))
if mibBuilder.loadTexts: evbCdcpLldpExpiredTrap.setStatus('current')
if mibBuilder.loadTexts: evbCdcpLldpExpiredTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbTlvExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 6))
if mibBuilder.loadTexts: evbTlvExpiredTrap.setStatus('current')
if mibBuilder.loadTexts: evbTlvExpiredTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
evbVdpKeepaliveExpiredTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 1, 0, 7))
if mibBuilder.loadTexts: evbVdpKeepaliveExpiredTrap.setStatus('current')
if mibBuilder.loadTexts: evbVdpKeepaliveExpiredTrap.setDescription('A Software Trouble report is sent by whatever application\n          encountering a problem during its execution and would\n          want to make the user aware of problem for maintenance purpose. ')
alcatelIND1EvbMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-EVB-MIB", "alaEvbModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1EvbMIBCompliance = alcatelIND1EvbMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EvbMIBCompliance.setDescription('Compliance statement for EVB.')
alaEvbModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbPortAutoMode"), ("ALCATEL-IND1-EVB-MIB", "evbDefaultType"), ("ALCATEL-IND1-EVB-MIB", "evbSAPEncapValue"), ("ALCATEL-IND1-EVB-MIB", "evbSAPPortId"), ("ALCATEL-IND1-EVB-MIB", "evbSAPServiceType"), ("ALCATEL-IND1-EVB-MIB", "evbSAPServiceId"), ("ALCATEL-IND1-EVB-MIB", "evbPortMode"), ("ALCATEL-IND1-EVB-MIB", "evbRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEvbModuleGroup = alaEvbModuleGroup.setStatus('current')
if mibBuilder.loadTexts: alaEvbModuleGroup.setDescription('Evb Control Modules Group.')
alaEvbNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 70, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-EVB-MIB", "evbFailedEvbTlvTrap"), ("ALCATEL-IND1-EVB-MIB", "evbFailedCdcpTlvTrap"), ("ALCATEL-IND1-EVB-MIB", "evbVdpAssocTlvTrap"), ("ALCATEL-IND1-EVB-MIB", "evbCdcpLldpExpiredTrap"), ("ALCATEL-IND1-EVB-MIB", "evbTlvExpiredTrap"), ("ALCATEL-IND1-EVB-MIB", "evbUnknownVsiManagerTrap"), ("ALCATEL-IND1-EVB-MIB", "evbVdpKeepaliveExpiredTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEvbNotificationsGroup = alaEvbNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaEvbNotificationsGroup.setDescription('Collection of Notifications for management of EVB.')
mibBuilder.exportSymbols("ALCATEL-IND1-EVB-MIB", evbPortMode=evbPortMode, evbVSIVlanID=evbVSIVlanID, alcatelIND1EvbMIBGroups=alcatelIND1EvbMIBGroups, evbVdpKeepaliveExpiredTrap=evbVdpKeepaliveExpiredTrap, evbSAPPortId=evbSAPPortId, evbSAPServiceId=evbSAPServiceId, alcatelIND1EvbMIBConformance=alcatelIND1EvbMIBConformance, alaEvbNotificationsGroup=alaEvbNotificationsGroup, evbVSISAPEntry=evbVSISAPEntry, alcatelIND1EvbMIBCompliances=alcatelIND1EvbMIBCompliances, evbVSISAPTable=evbVSISAPTable, evbMIBScalarObjects=evbMIBScalarObjects, evbFailedEvbTlvTrap=evbFailedEvbTlvTrap, alcatelIND1EVBMIB=alcatelIND1EVBMIB, evbVdpAssocTlvTrap=evbVdpAssocTlvTrap, evbVSIPortNumber=evbVSIPortNumber, evbMIBNotifications=evbMIBNotifications, evbRowStatus=evbRowStatus, evbPortModeEntry=evbPortModeEntry, alcatelIND1EvbMIBCompliance=alcatelIND1EvbMIBCompliance, alaEvbModuleGroup=alaEvbModuleGroup, evbUnknownVsiManagerTrap=evbUnknownVsiManagerTrap, evbSapMIB=evbSapMIB, alcatelIND1EvbMIBObjects=alcatelIND1EvbMIBObjects, evbPortId=evbPortId, evbVSIID=evbVSIID, evbCdcpLldpExpiredTrap=evbCdcpLldpExpiredTrap, evbPortAutoMode=evbPortAutoMode, PYSNMP_MODULE_ID=alcatelIND1EVBMIB, evbDefaultType=evbDefaultType, evbSAPEncapValue=evbSAPEncapValue, evbSAPServiceType=evbSAPServiceType, evbFailedCdcpTlvTrap=evbFailedCdcpTlvTrap, evbTlvExpiredTrap=evbTlvExpiredTrap, evbPortModeTable=evbPortModeTable)
