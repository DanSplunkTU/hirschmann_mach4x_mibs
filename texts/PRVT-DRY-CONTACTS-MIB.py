#
# PySNMP MIB module PRVT-DRY-CONTACTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-DRY-CONTACTS-MIB
# Produced by pysmi-1.1.3 at Sat Nov 20 21:32:53 2021
# On host fv-az121-977 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, Bits, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, NotificationType, IpAddress, ModuleIdentity, MibIdentifier, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "Bits", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "NotificationType", "IpAddress", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
prvtDryContactsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 112))
prvtDryContactsMIB.setRevisions(('2007-11-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtDryContactsMIB.setRevisionsDescriptions(('Compilation fixes',))
if mibBuilder.loadTexts: prvtDryContactsMIB.setLastUpdated('200711270000Z')
if mibBuilder.loadTexts: prvtDryContactsMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtDryContactsMIB.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtDryContactsMIB.setDescription('Initial version. This MIB provides external-alarm management and notifications')
dryContactsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 0))
dryContactsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1))
cfgTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1), )
if mibBuilder.loadTexts: cfgTable.setStatus('current')
if mibBuilder.loadTexts: cfgTable.setDescription('A table containing inputs configuration and statuses')
cfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1), ).setIndexNames((0, "PRVT-DRY-CONTACTS-MIB", "prvtAlarmID"))
if mibBuilder.loadTexts: cfgEntry.setStatus('current')
if mibBuilder.loadTexts: cfgEntry.setDescription('cfgEntry')
prvtAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtAlarmID.setStatus('current')
if mibBuilder.loadTexts: prvtAlarmID.setDescription('External and internal alarm index uniquely identifies this row.\nT-Metro 200 ES platform has four dry-contacts sensor inputs.\nT5C-XG platform has four dry-contact sensor inputs and two dry-contact sensor outputs. \nAn integer with supported range of values 1-6 for T5C-XG and 1-4 for T-Metro 200 ES. Index. Not-accessible')
prvtSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSensorType.setStatus('current')
if mibBuilder.loadTexts: prvtSensorType.setDescription('Sensor type. An enumeration with two values: input(1), output(2). \nT-Metro 200 ES platform has four dry-contacts sensor inputs.\nT5C-XG platform has four dry-contact sensor inputs and two dry-contact sensor outputs.\nRead-only.')
prvtName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtName.setStatus('current')
if mibBuilder.loadTexts: prvtName.setDescription('Name of alarm. An OCTET-STRING with max. 16 OCTETS.\nDefault value null string. Read-write')
prvtDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtDescription.setStatus('current')
if mibBuilder.loadTexts: prvtDescription.setDescription('Alarm description. An OCTET-STRING with max. 64 OCTETS.\nDefault value null string. Read-write')
prvtEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtEnableStatus.setStatus('current')
if mibBuilder.loadTexts: prvtEnableStatus.setDescription('Senging alarms status. An enumeration with two values: enabled(1), disabled(2).\nDefault value is disabled(2). Read-write')
prvtAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-alarm", 1), ("alarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtAlarmStatus.setDescription('Alarm status. An enumeration with two values: no-alarm(1), alarm(2).\nDefault value is no-alarm(1). Read-only.')
prvtAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("info", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: prvtAlarmSeverity.setDescription('Configured alarm severity. An enumeration with 4 values:\ninfo(1), minor(2), major(3) and critical(4).\nDefault value is info(1). Read-write')
prvtPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normally-opened", 1), ("normally-closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtPolarity.setStatus('current')
if mibBuilder.loadTexts: prvtPolarity.setDescription('Configured polarity.\nAn enumeration with 2 values: normally-opened(1), normally-closed(2).\nThis object is only for T-Metro 200 ES platform. \nDefault value is normally-opened(1). Read-write')
prvtLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLastChange.setStatus('current')
if mibBuilder.loadTexts: prvtLastChange.setDescription('The value of sysUpTime at the time of the last operational status change.\nTimeTicks. Read-only')
stateChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 112, 0, 1)).setObjects(("PRVT-DRY-CONTACTS-MIB", "prvtAlarmID"), ("PRVT-DRY-CONTACTS-MIB", "prvtSensorType"), ("PRVT-DRY-CONTACTS-MIB", "prvtName"), ("PRVT-DRY-CONTACTS-MIB", "prvtDescription"), ("PRVT-DRY-CONTACTS-MIB", "prvtAlarmStatus"), ("PRVT-DRY-CONTACTS-MIB", "prvtAlarmSeverity"))
if mibBuilder.loadTexts: stateChanged.setStatus('current')
if mibBuilder.loadTexts: stateChanged.setDescription('Send notification when operational status of the input changes')
mibBuilder.exportSymbols("PRVT-DRY-CONTACTS-MIB", dryContactsNotifications=dryContactsNotifications, cfgTable=cfgTable, prvtEnableStatus=prvtEnableStatus, cfgEntry=cfgEntry, prvtName=prvtName, prvtAlarmStatus=prvtAlarmStatus, prvtAlarmSeverity=prvtAlarmSeverity, PYSNMP_MODULE_ID=prvtDryContactsMIB, prvtPolarity=prvtPolarity, stateChanged=stateChanged, prvtSensorType=prvtSensorType, prvtAlarmID=prvtAlarmID, prvtDryContactsMIB=prvtDryContactsMIB, prvtDescription=prvtDescription, prvtLastChange=prvtLastChange, dryContactsObjects=dryContactsObjects)
