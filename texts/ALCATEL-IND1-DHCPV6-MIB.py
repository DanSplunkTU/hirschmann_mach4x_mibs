#
# PySNMP MIB module ALCATEL-IND1-DHCPV6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-DHCPV6-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:20:35 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Ipv6, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Ipv6")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ipv6IfIndex, = mibBuilder.importSymbols("IPV6-MIB", "ipv6IfIndex")
Ipv6Address, Ipv6IfIndexOrZero = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address", "Ipv6IfIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Gauge32, Counter32, TimeTicks, Unsigned32, Counter64, iso, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter32", "TimeTicks", "Unsigned32", "Counter64", "iso", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32")
TextualConvention, TruthValue, DisplayString, RowStatus, DateAndTime, PhysAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus", "DateAndTime", "PhysAddress", "TimeStamp")
alcatelIND1DHCPv6MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2))
alcatelIND1DHCPv6MIB.setRevisions(('2013-03-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1DHCPv6MIB.setRevisionsDescriptions(('The first version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1DHCPv6MIB.setLastUpdated('201303220000Z')
if mibBuilder.loadTexts: alcatelIND1DHCPv6MIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1DHCPv6MIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1DHCPv6MIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Propietary DHCPv6 MIB definitions\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n         or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 2013 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1DHCPv6MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1))
alaDHCPv6RelayConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 1))
alaDHCPv6RelayAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDHCPv6RelayAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayAdminStatus.setDescription('Global DHCPv6 administrative status.  This object provides a\n         means to globally enable or disable the DHCPv6 relay feature.\n         DHCPv6 Relay must still be enabled on individual interfaces\n         in order for relay operation to occur.')
alaDHCPv6SrvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 2))
alaDHCPv6SrvGlobalConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalConfigStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalConfigStatus.setDescription('This object is used to enable(1) or disable(2) DHCPv6 Server on the switch.')
alaDHCPv6SrvGlobalRestart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("restart", 2))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalRestart.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalRestart.setDescription('This object is used to restart(2) the DHCPv6 Server on the switch. Default value is\n            inactive(1) which user can not set.')
alaDHCPv6SrvGlobalClearStat = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalClearStat.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvGlobalClearStat.setDescription('Defines the global clear statistics control for DHCPv6 Server.\n                default(1) - default value for this object,\n                reset(2)   - indicates that all statistic related to DHCPv6\n                             server in the system should get cleared.')
alaDHCPv6RelayInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 3), )
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceTable.setDescription('Table controlling DHCPv6 Relay on IPv6 interfaces.\n\n        This table extends the corresponding IPv6 interface\n        entry in alaIPv6InterfaceTable.')
alaDHCPv6RelayInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 3, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"))
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceEntry.setDescription('An DHCPv6 relay interface entry.')
alaDHCPv6RelayInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayInterfaceAdminStatus.setDescription('DHCPv6 administrative status on the interface.')
alaDHCPv6RelayDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 4), )
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationTable.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationTable.setDescription('Table allowing the creation and removal of DHCPv6\n        Relay destinations for an interface.')
alaDHCPv6RelayDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 4, 1), ).setIndexNames((0, "IPV6-MIB", "ipv6IfIndex"), (0, "ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayDestinationAddressType"), (0, "ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayDestinationAddress"))
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationEntry.setDescription('A DHCPv6 relay destination entry.')
alaDHCPv6RelayDestinationAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationAddressType.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationAddressType.setDescription('The address type of a DHCPv6 relay destination.\n\t Only ipv6(2) or ipv6z(4) are allowed.')
alaDHCPv6RelayDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 4, 1, 2), InetAddress())
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationAddress.setDescription('The IPv6 address of a DHCPv6 relay destination.')
alaDHCPv6RelayDestinationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayDestinationRowStatus.setDescription('Used to control the addition and removal of DHCPv6\n        relay destinations.')
alaDHCPv6SrvLease = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5))
alaDHCPv6SrvLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1), )
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseTable.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseTable.setDescription('DHCPv6 server lease table.')
alaDHCPv6SrvLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseIpv6Address"))
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseEntry.setDescription('DHCPv6 server lease entry.')
alaDHCPv6SrvLeaseIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseIpv6Address.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseIpv6Address.setDescription('IPv6 address assigned to the client')
alaDHCPv6SrvLeaseLeaseGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseLeaseGrant.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseLeaseGrant.setDescription('Lease granted time for the client.')
alaDHCPv6SrvLeasePrefLeaseExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHCPv6SrvLeasePrefLeaseExpiry.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeasePrefLeaseExpiry.setDescription('Preferred Lease expiry of the client.')
alaDHCPv6SrvLeaseValidLeaseExpiry = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseValidLeaseExpiry.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseValidLeaseExpiry.setDescription('Valid Lease expiry of the client.')
alaDHCPv6SrvLeaseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("dynamic", 2), ("manual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseType.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseType.setDescription('Type of the lease.')
alcatelIND1DHCPv6MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 0))
alaDHCPv6SrvTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 6))
alaDHCPv6SrvLeaseUtilizationThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 0, 1)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseThresholdStatus"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvSubnetDescriptor"))
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseUtilizationThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseUtilizationThresholdTrap.setDescription('When the lease utilization in a subnet exceeds or deceeds threshold\n                value set by the application, a notification is sent to the Management Entity,\n                with the DHCPv6 Server lease utilization information.')
alaDHCPv6SrvLeaseThresholdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelow80Threshold", 1), ("crossedAbove80Threshold", 2), ("reached100Threshold", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseThresholdStatus.setDescription('This object specifies the threshold status of subnet utilization.')
alaDHCPv6SrvSubnetDescriptor = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 1, 6, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaDHCPv6SrvSubnetDescriptor.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvSubnetDescriptor.setDescription('This object specifies the subnet Descriptor. Denotes the IPv6 address')
alcatelIND1DHCPv6MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2))
alcatelIND1DHCPv6MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 1))
alcatelIND1DHCPv6MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 2))
alaDHCPv6Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 1, 1)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayGroup"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvGroup"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvNotificationsGroup"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseUtilizationThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHCPv6Compliance = alaDHCPv6Compliance.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6Compliance.setDescription('The compliance statement for switches implementing ALCATEL-IND1-DHCPV6-MIB.')
alaDHCPv6RelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 2, 1)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayAdminStatus"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayInterfaceAdminStatus"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6RelayDestinationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHCPv6RelayGroup = alaDHCPv6RelayGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6RelayGroup.setDescription('A collection of objects to support management of DHCPv6 Relay.')
alaDHCPv6SrvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 2, 2)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvGlobalConfigStatus"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvGlobalRestart"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvGlobalClearStat"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseLeaseGrant"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeasePrefLeaseExpiry"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseValidLeaseExpiry"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHCPv6SrvGroup = alaDHCPv6SrvGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvGroup.setDescription('A collection of objects to support management of DHCPv6 server.')
alaDHCPv6SrvNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 2, 3)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseUtilizationThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHCPv6SrvNotificationsGroup = alaDHCPv6SrvNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvNotificationsGroup.setDescription('Notifications for DHCPv6 server.')
alaDHCPv6SrvLeaseUtilizationThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 29, 2, 2, 2, 4)).setObjects(("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvLeaseThresholdStatus"), ("ALCATEL-IND1-DHCPV6-MIB", "alaDHCPv6SrvSubnetDescriptor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDHCPv6SrvLeaseUtilizationThresholdGroup = alaDHCPv6SrvLeaseUtilizationThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: alaDHCPv6SrvLeaseUtilizationThresholdGroup.setDescription('When the lease utilization in a subnet exceeds or deceeds threshold\n                value set by the application, a notification is sent to the Management Entity,\n                with the DHCPv6 Server lease utilization information.')
mibBuilder.exportSymbols("ALCATEL-IND1-DHCPV6-MIB", alaDHCPv6SrvLeaseEntry=alaDHCPv6SrvLeaseEntry, PYSNMP_MODULE_ID=alcatelIND1DHCPv6MIB, alcatelIND1DHCPv6MIBNotifications=alcatelIND1DHCPv6MIBNotifications, alaDHCPv6SrvLeaseUtilizationThresholdGroup=alaDHCPv6SrvLeaseUtilizationThresholdGroup, alaDHCPv6SrvLeaseLeaseGrant=alaDHCPv6SrvLeaseLeaseGrant, alaDHCPv6SrvLeaseTable=alaDHCPv6SrvLeaseTable, alaDHCPv6RelayInterfaceEntry=alaDHCPv6RelayInterfaceEntry, alaDHCPv6SrvSubnetDescriptor=alaDHCPv6SrvSubnetDescriptor, alaDHCPv6SrvLease=alaDHCPv6SrvLease, alaDHCPv6RelayGroup=alaDHCPv6RelayGroup, alaDHCPv6SrvGlobalClearStat=alaDHCPv6SrvGlobalClearStat, alaDHCPv6RelayConfig=alaDHCPv6RelayConfig, alaDHCPv6RelayAdminStatus=alaDHCPv6RelayAdminStatus, alaDHCPv6RelayDestinationRowStatus=alaDHCPv6RelayDestinationRowStatus, alaDHCPv6SrvLeaseThresholdStatus=alaDHCPv6SrvLeaseThresholdStatus, alaDHCPv6SrvLeaseType=alaDHCPv6SrvLeaseType, alaDHCPv6SrvGroup=alaDHCPv6SrvGroup, alaDHCPv6RelayDestinationAddress=alaDHCPv6RelayDestinationAddress, alcatelIND1DHCPv6MIBConformance=alcatelIND1DHCPv6MIBConformance, alaDHCPv6SrvLeaseValidLeaseExpiry=alaDHCPv6SrvLeaseValidLeaseExpiry, alcatelIND1DHCPv6MIBCompliances=alcatelIND1DHCPv6MIBCompliances, alaDHCPv6RelayInterfaceTable=alaDHCPv6RelayInterfaceTable, alaDHCPv6SrvNotificationsGroup=alaDHCPv6SrvNotificationsGroup, alcatelIND1DHCPv6MIBObjects=alcatelIND1DHCPv6MIBObjects, alaDHCPv6RelayDestinationAddressType=alaDHCPv6RelayDestinationAddressType, alaDHCPv6RelayDestinationEntry=alaDHCPv6RelayDestinationEntry, alcatelIND1DHCPv6MIB=alcatelIND1DHCPv6MIB, alaDHCPv6SrvLeaseIpv6Address=alaDHCPv6SrvLeaseIpv6Address, alaDHCPv6SrvTrapsObj=alaDHCPv6SrvTrapsObj, alcatelIND1DHCPv6MIBGroups=alcatelIND1DHCPv6MIBGroups, alaDHCPv6RelayDestinationTable=alaDHCPv6RelayDestinationTable, alaDHCPv6RelayInterfaceAdminStatus=alaDHCPv6RelayInterfaceAdminStatus, alaDHCPv6SrvGlobalConfigStatus=alaDHCPv6SrvGlobalConfigStatus, alaDHCPv6SrvConfig=alaDHCPv6SrvConfig, alaDHCPv6SrvLeaseUtilizationThresholdTrap=alaDHCPv6SrvLeaseUtilizationThresholdTrap, alaDHCPv6SrvLeasePrefLeaseExpiry=alaDHCPv6SrvLeasePrefLeaseExpiry, alaDHCPv6Compliance=alaDHCPv6Compliance, alaDHCPv6SrvGlobalRestart=alaDHCPv6SrvGlobalRestart)
