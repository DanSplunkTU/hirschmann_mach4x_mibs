#
# PySNMP MIB module PRVT-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SERV-MIB
# Produced by pysmi-1.1.3 at Tue Dec  7 14:17:53 2021
# On host fv-az33-388 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "serviceAccessSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Counter32, NotificationType, Unsigned32, ObjectIdentity, MibIdentifier, TimeTicks, Bits, ModuleIdentity, Integer32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Counter32", "NotificationType", "Unsigned32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Bits", "ModuleIdentity", "Integer32", "Gauge32")
TimeStamp, DisplayString, RowStatus, TextualConvention, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "MacAddress")
prvtServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 7, 2))
prvtServicesMIB.setRevisions(('2013-07-15 00:00', '2013-02-04 00:00', '2011-10-19 00:00', '2009-01-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtServicesMIB.setRevisionsDescriptions(('Added support for TLS ethertype', 'Update description for sapEncapValue.', 'Change serviceAdminStatus, sapAdminStatus, sdpAdminStatus\n         enumeration. Now down (1), up (2).', 'Sync to internal implementation',))
if mibBuilder.loadTexts: prvtServicesMIB.setLastUpdated('201307150000Z')
if mibBuilder.loadTexts: prvtServicesMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtServicesMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtServicesMIB.setDescription('This document is the SNMP MIB module to manage and provision\n         the various services of the system.')
prvtServicesMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0))
prvtServicesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1))
customerTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1), )
if mibBuilder.loadTexts: customerTable.setStatus('current')
if mibBuilder.loadTexts: customerTable.setDescription('A table that contains customer information.')
customerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "customerName"))
if mibBuilder.loadTexts: customerEntry.setStatus('current')
if mibBuilder.loadTexts: customerEntry.setDescription('Information about a specific customer.')
customerName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29)))
if mibBuilder.loadTexts: customerName.setStatus('current')
if mibBuilder.loadTexts: customerName.setDescription('The name of this customer.')
customerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customerRowStatus.setStatus('current')
if mibBuilder.loadTexts: customerRowStatus.setDescription('This object indicates the status of this row.')
customerContact = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customerContact.setStatus('current')
if mibBuilder.loadTexts: customerContact.setDescription('The name of the primary contact person for\n         this customer.')
customerPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: customerPhone.setStatus('current')
if mibBuilder.loadTexts: customerPhone.setDescription('The phone/pager number used to reach the\n         primary contact person.')
serviceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2), )
if mibBuilder.loadTexts: serviceTable.setStatus('current')
if mibBuilder.loadTexts: serviceTable.setDescription('A table that contains basic service information.')
serviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceEntry.setStatus('current')
if mibBuilder.loadTexts: serviceEntry.setDescription('Basic information about a specific service.')
serviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967294)))
if mibBuilder.loadTexts: serviceId.setStatus('current')
if mibBuilder.loadTexts: serviceId.setDescription('The service ID.')
serviceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceRowStatus.setDescription('This object indicates the status of this row. The\n         values supported during a set operation are \n         createAndWait(5), destroy(6), active(1), notInSertvice(2). \n         Service can not be deleted or changed to notInService if there are\n         SDPs/SAPs belonging to it. ')
serviceVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceVpnId.setStatus('current')
if mibBuilder.loadTexts: serviceVpnId.setDescription('This object specifies the ID used by Service Provider(SP). \n         It will have different format according to the type of \n         service. \n         This filed is mandatory. If all mandatory fields are \n         set, the row status object is automatically changed from notReady(3)\n         to notInService(2) state.\n         For TLS services must be the same as sdpBindVlanTag.')
serviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("vpws", 9), ("vplsPe", 10), ("vplsMtu", 11), ("dot1q", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceType.setStatus('current')
if mibBuilder.loadTexts: serviceType.setDescription('The service type: e.g. EtherPipe, TLS, etc. Currently only \n         vpls-pe(11), vpls-mtu(12), vpws-pe(9) and vpws-mtu(10) types \n         are supported. \n         This field is mandatory.')
serviceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceDescription.setStatus('current')
if mibBuilder.loadTexts: serviceDescription.setDescription('Generic information about this service.')
serviceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceMtu.setStatus('current')
if mibBuilder.loadTexts: serviceMtu.setDescription('Not supported object')
serviceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: serviceAdminStatus.setDescription('Administrative state of the service.')
serviceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceOperStatus.setStatus('current')
if mibBuilder.loadTexts: serviceOperStatus.setDescription('The operating state of this service.')
serviceNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceNumSaps.setStatus('current')
if mibBuilder.loadTexts: serviceNumSaps.setDescription('The number of SAPs defined on this service.')
serviceNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceNumSdps.setStatus('current')
if mibBuilder.loadTexts: serviceNumSdps.setDescription('The number of SDPs bound to this service.')
serviceLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: serviceLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n         most recent management-initiated change to\n         this service.')
serviceEnableSecureSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceEnableSecureSaps.setStatus('current')
if mibBuilder.loadTexts: serviceEnableSecureSaps.setDescription('Used to configure the SAPs to forward only traffic from the uplink ports.')
serviceRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceRevertTimer.setStatus('current')
if mibBuilder.loadTexts: serviceRevertTimer.setDescription('serviceRevertTimer')
servicePwRedundOperModeMesh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("independent", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: servicePwRedundOperModeMesh.setStatus('current')
if mibBuilder.loadTexts: servicePwRedundOperModeMesh.setDescription('servicePwRedundOperModeMesh')
servicePwRedundOperModeSpoke = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("independent", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: servicePwRedundOperModeSpoke.setStatus('current')
if mibBuilder.loadTexts: servicePwRedundOperModeSpoke.setDescription('servicePwRedundOperModeSpoke')
serviceCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceCustName.setStatus('current')
if mibBuilder.loadTexts: serviceCustName.setDescription('The name of the customer this service belongs to.')
serviceVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33024, 34984, 37120))).clone(namedValues=NamedValues(("vlan", 33024), ("dot1ad", 34984), ("qinq", 37120)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: serviceVlanEtherType.setDescription('The ethertype for service vlan.')
serviceBackupVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33024, 34984, 37120))).clone(namedValues=NamedValues(("vlan", 33024), ("dot1ad", 34984), ("qinq", 37120)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceBackupVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: serviceBackupVlanEtherType.setDescription('The ethertype for service backup vlan.')
serviceVlanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("replace", 0), ("add", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceVlanAction.setStatus('current')
if mibBuilder.loadTexts: serviceVlanAction.setDescription('Vlan action for vlan services')
sapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3), )
if mibBuilder.loadTexts: sapTable.setStatus('current')
if mibBuilder.loadTexts: sapTable.setDescription('A table that contains basic SAP information.')
sapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapEntry.setStatus('current')
if mibBuilder.loadTexts: sapEntry.setDescription('Information about a specific SAP.')
sapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: sapPortId.setStatus('current')
if mibBuilder.loadTexts: sapPortId.setDescription('The ID of the access port where this SAP\n         is defined.')
sapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: sapEncapValue.setStatus('current')
if mibBuilder.loadTexts: sapEncapValue.setDescription('The value of the label used to identify this\n         SAP on the access port specified by sapPortId. Value 4095\n         is used for unqualified SAP, value 4096 is used for untagged\n         SAP.')
sapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapRowStatus.setDescription('This object indicates the status of this row.\n         Saps can be deleted any time.')
sapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("vpws", 9), ("vplsPe", 10), ("vplsMtu", 11), ("dot1q", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapType.setStatus('current')
if mibBuilder.loadTexts: sapType.setDescription('This object indicates the type of service where\n         this SAP is defined.')
sapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapDescription.setStatus('current')
if mibBuilder.loadTexts: sapDescription.setDescription('Generic information about this SAP.')
sapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapAdminStatus.setDescription('Administrative state of the sap')
sapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("svcAdminDown", 5), ("portMtuTooSmall", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperStatus.setStatus('current')
if mibBuilder.loadTexts: sapOperStatus.setDescription('The operating state of this SAP, showing also the reason for the\n         current operation state\n         \n         Values ingressQosMismatch(3),egressQosMismatch(4),svcAdminDown(5) \n         and portMtuTooSmall(6) are not supported')
sapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n         most recent management-initiated change to\n         this SAP.')
sapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("portOperDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperFlags.setStatus('current')
if mibBuilder.loadTexts: sapOperFlags.setDescription('This object specifies all the conditions that\n         affect the operating status of this SAP.')
sapCustMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapCustMultSvcSiteName.setStatus('current')
if mibBuilder.loadTexts: sapCustMultSvcSiteName.setDescription('The value of this object, when not null, indicates\n         the Multi-Service Site this SAP is a member of. This\n         information is used to configure the ingress and\n         egress QoS schedulers for this SAP.')
sapIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosPolicyId.setDescription('The row index in the tSapIngressTable\n         corresponding to this ingress QoS\n         policy, or zero if no policy is specified.')
sapEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosPolicyId.setDescription('The row index in the tSapEgressTable\n         corresponding to this egress QoS policy,\n         or zero if no policy is specified.')
sapIngressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 14), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\n         is null. It indicates the ingress QoS scheduler for\n         this SAP.')
sapEgressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 15), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\n         is null. It indicates the egress QoS scheduler for\n         this SAP.')
sapLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qualified", 1), ("unqualified", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapLearnMode.setStatus('current')
if mibBuilder.loadTexts: sapLearnMode.setDescription('Sap learning mode. Currently supported as read-only.')
sapLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapLearnEnable.setStatus('current')
if mibBuilder.loadTexts: sapLearnEnable.setDescription('Sap learning enable.')
sapUntaggedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 18), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapUntaggedMode.setStatus('current')
if mibBuilder.loadTexts: sapUntaggedMode.setDescription('Sap untagged mode.')
sapProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapProfileName.setStatus('current')
if mibBuilder.loadTexts: sapProfileName.setDescription('Mac Learning profile name to apply.')
sapCurrentMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapCurrentMacCount.setStatus('current')
if mibBuilder.loadTexts: sapCurrentMacCount.setDescription('Current count of MAC Addresses\n         learnt on sapProfileName profile.')
sapMacLearningProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noViolation", 1), ("watermarkReached", 2), ("maxMacCountReached", 3), ("errorState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapMacLearningProfileState.setStatus('current')
if mibBuilder.loadTexts: sapMacLearningProfileState.setDescription('State of the secured entry.')
prvtSapEventPropagationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtSapEventPropagationProfile.setStatus('current')
if mibBuilder.loadTexts: prvtSapEventPropagationProfile.setDescription('Event propagation profile name, applied on this service SAP.')
prvtTlsSapEventPropagationProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 3, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtTlsSapEventPropagationProfile.setStatus('current')
if mibBuilder.loadTexts: prvtTlsSapEventPropagationProfile.setDescription('Event propagation profile name, applied on this service TLS SAP.')
sdpNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNextFreeId.setStatus('current')
if mibBuilder.loadTexts: sdpNextFreeId.setDescription('The next available value for sdpId.')
sdpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5), )
if mibBuilder.loadTexts: sdpTable.setStatus('current')
if mibBuilder.loadTexts: sdpTable.setDescription('A table that contains SDP information.\n         Available sdpId can be obtained from sdpNextFreeId.')
sdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceId"), (0, "PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpEntry.setStatus('current')
if mibBuilder.loadTexts: sdpEntry.setDescription('Information about a specific SDP.')
sdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: sdpId.setStatus('current')
if mibBuilder.loadTexts: sdpId.setDescription('SDP identifier.')
sdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpRowStatus.setDescription('This object indicates the status of this row. \n         The values supported during a set operation are \n         createAndWait(5), destroy(6), active(1), notInSertvice(2).')
sdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDelivery.setStatus('current')
if mibBuilder.loadTexts: sdpDelivery.setDescription('This object specifies the type of delivery used\n         by this SDP.\n         NOTE! Currently we support only mpls. The modification \n         of this obect will be rejected. ')
sdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpFarEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: sdpFarEndIpAddress.setDescription('This object specifies the IP address of the\n         remote end of the GRE or MPLS tunnel defined\n         by this SDP. \n         \n         This field is mandatory. If all mandatory fields are set, the \n         row status object is automatically changed from notReady(3)\n         to notInService(2) state.')
sdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 29))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpDescription.setStatus('current')
if mibBuilder.loadTexts: sdpDescription.setDescription('Generic information about this SDP.')
sdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLabelSignaling.setStatus('current')
if mibBuilder.loadTexts: sdpLabelSignaling.setDescription('This object specifies the signaling protocol\n         used to obtain the ingress and egress labels\n         used in frames transmitted and received on\n         this SDP. When the value of this object is\n         none(1) then the labels are manually assigned\n         at the time the SDP is configured. The\n         value of this object can only be changed while\n         the admin status of the SDP is down(2).\n         \n         This field is mandatory. If all mandatory fields are set, the \n         row status object is automatically changed from notReady(3)\n         to notInService(2) state')
sdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpAdminStatus.setDescription('Administrative state of the sdp.')
sdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("tunnelDown", 4), ("transportSelected", 5), ("supressed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: sdpOperStatus.setDescription('The operating state of this SDP. \n         1. Sdp is up and running.\n         2. Initial state. Entry is inactive.\n         3. Peers are ready to select transport.\n         4. There is no suitable transport.\n         5. SDP is not operational due to local/remote SAP down or remote SDP has no transport.\n         6. Sdp is up and ready to carry user traffic but it is not used at the moment (backup).')
sdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sdpLastMgmtChange.setDescription('The value of sysUpTime at the time of the\n         most recent management-initiated change to\n         this SDP.')
sdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLdpEnabled.setStatus('current')
if mibBuilder.loadTexts: sdpLdpEnabled.setDescription("When the value of this object is true(1)\n         the transport LSP's are signalled by LDP,\n         as opposed to being provisioned static or\n         RSVP-signalled LSP's. This object applies\n         only to MPLS SDP's.")
sdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 11), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("invalidEgressInterface", 3), ("noSystemIpAddress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperFlags.setStatus('current')
if mibBuilder.loadTexts: sdpOperFlags.setDescription('This object specifies all the conditions that\n         affect the operating status of this SDP.')
sdpAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminIngressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpAdminIngressLabel.setDescription('The static MPLS VC label used by the far-end device\n         to send packets to this device in this service via\n         this SDP.')
sdpAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminEgressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpAdminEgressLabel.setDescription('The static MPLS VC label used by this device to send\n         packets to the far-end device in this service via\n         this SDP.')
sdpOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 15), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpOutInterface.setStatus('current')
if mibBuilder.loadTexts: sdpOutInterface.setDescription('This object is valid only if the type of service is tls(3). \n         The ifIndex of the desired outbound interface for this SDP.\n         \n         This field is currently not supported. Its modification \n         will be rejected. \n         \n         The default value is 0')
sdpGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpGroupIdentifier.setStatus('current')
if mibBuilder.loadTexts: sdpGroupIdentifier.setDescription("This object is valid only if the type of service is tls(3). \n         The Group ID for this SDP. SDP's bound to the same service must have the same Group ID's.")
sdpTransportTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpTransportTunnelName.setStatus('current')
if mibBuilder.loadTexts: sdpTransportTunnelName.setDescription('Optional transport tunnel name. For the SDP to be operational an entry must exist in \n         mplsTunnelTable with this name.')
sdpVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("ethernetVlan", 4), ("ethernet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpVCType.setStatus('current')
if mibBuilder.loadTexts: sdpVCType.setDescription('VC Type of the service.')
sdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidType", 0), ("generic", 1), ("spoke", 2), ("mesh", 3), ("hub", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpType.setStatus('current')
if mibBuilder.loadTexts: sdpType.setDescription('The type of this SDP.\n         \n         Currently the only supported sdp types are spoke(2) and mesh(3)\n         \n         This field is mandatory. If serviceType is set to vpls-mtu(12) or vpws-mtu(10), \n         trying to set sdpType to mesh(3) will be rejected(Wring configuration). \n         If all mandatory fields are set, the row status object is automatically \n         changed from notReady(3) to notInService(2) state.')
sdpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9190))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpMtu.setStatus('current')
if mibBuilder.loadTexts: sdpMtu.setDescription('The largest frame size (in octets) that this\n         SDP can handle')
sdpBindVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpBindVlanTag.setStatus('current')
if mibBuilder.loadTexts: sdpBindVlanTag.setDescription('Outgoing vlan. For TLS services must be the same as serviceVpnId')
sdpLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpLearnEnable.setStatus('current')
if mibBuilder.loadTexts: sdpLearnEnable.setDescription('Sdp learn.')
sdpSecuredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpSecuredEnable.setStatus('current')
if mibBuilder.loadTexts: sdpSecuredEnable.setDescription('The Secured setting to manage split-horizon rules for the SDP.')
sdpSignalPwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpSignalPwStatus.setStatus('current')
if mibBuilder.loadTexts: sdpSignalPwStatus.setDescription('Sdp signal pw status.')
sdpPwRedundancyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 25), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpPwRedundancyEnable.setStatus('current')
if mibBuilder.loadTexts: sdpPwRedundancyEnable.setDescription('sdpPwRedundancyEnable')
sdpPwPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpPwPrecedence.setStatus('current')
if mibBuilder.loadTexts: sdpPwPrecedence.setDescription('Value of this object determines the role of\n         this sdp entry. The entry with highest sdpPwPrecedence acts as\n         primary, all other sdps are backup.')
sdpPwActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 27), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpPwActivate.setStatus('current')
if mibBuilder.loadTexts: sdpPwActivate.setDescription('sdpPwActivate')
sdpDynamicVcIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpDynamicVcIngressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpDynamicVcIngressLabel.setDescription('Sdp dynamic vc ingress label.')
sdpDynamicVcEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpDynamicVcEgressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpDynamicVcEgressLabel.setDescription('Sdp dynamic vc egress label.')
serviceMacAddressSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7), )
if mibBuilder.loadTexts: serviceMacAddressSapTable.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapTable.setDescription('A table that contains FDB entries per service and sap.')
serviceMacAddressSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceMacAddressSapServiceId"), (0, "PRVT-SERV-MIB", "serviceMacAddressSapMacAddress"), (0, "PRVT-SERV-MIB", "serviceMacAddressSapPortId"), (0, "PRVT-SERV-MIB", "serviceMacAddressSapEncapValue"))
if mibBuilder.loadTexts: serviceMacAddressSapEntry.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapEntry.setDescription('Information FDB entries per service and sap.')
serviceMacAddressSapServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: serviceMacAddressSapServiceId.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapServiceId.setDescription('Service.')
serviceMacAddressSapMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 2), MacAddress())
if mibBuilder.loadTexts: serviceMacAddressSapMacAddress.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapMacAddress.setDescription('Static MacAddress.')
serviceMacAddressSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: serviceMacAddressSapPortId.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapPortId.setDescription('Static MacAddress port id.')
serviceMacAddressSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: serviceMacAddressSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapEncapValue.setDescription('Static MacAddress encap value.')
serviceMacAddressSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceMacAddressSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapRowStatus.setDescription('Static MacAddress row status.')
serviceMacAddressSapPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 7, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceMacAddressSapPriority.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSapPriority.setDescription('Static MacAddress priority.')
serviceMacAddressSdpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8), )
if mibBuilder.loadTexts: serviceMacAddressSdpTable.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpTable.setDescription('A table that contains FDB entries per service and sdp.')
serviceMacAddressSdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "serviceMacAddressSdpServiceId"), (0, "PRVT-SERV-MIB", "serviceMacAddressSdpMacAddress"), (0, "PRVT-SERV-MIB", "serviceMacAddressSdpId"))
if mibBuilder.loadTexts: serviceMacAddressSdpEntry.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpEntry.setDescription('Information FDB entries per service and sdp.')
serviceMacAddressSdpServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: serviceMacAddressSdpServiceId.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpServiceId.setDescription('Service Id.')
serviceMacAddressSdpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1, 2), MacAddress())
if mibBuilder.loadTexts: serviceMacAddressSdpMacAddress.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpMacAddress.setDescription('Static MacAddress.')
serviceMacAddressSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: serviceMacAddressSdpId.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpId.setDescription('Static MacAddress sdp id.')
serviceMacAddressSdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceMacAddressSdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpRowStatus.setDescription('Static MacAddress row status.')
serviceMacAddressSdpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 1, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: serviceMacAddressSdpPriority.setStatus('current')
if mibBuilder.loadTexts: serviceMacAddressSdpPriority.setDescription('Static MacAddress priority.')
customerCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 1)).setObjects(("PRVT-SERV-MIB", "customerName"))
if mibBuilder.loadTexts: customerCreated.setStatus('current')
if mibBuilder.loadTexts: customerCreated.setDescription('This trap is sent when a new row is created\n         in the customerTable.')
customerDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 2)).setObjects(("PRVT-SERV-MIB", "customerName"))
if mibBuilder.loadTexts: customerDeleted.setStatus('current')
if mibBuilder.loadTexts: customerDeleted.setDescription('This trap is sent when an existing row is\n         deleted from the customerTable.')
serviceCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 3)).setObjects(("PRVT-SERV-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceCreated.setStatus('current')
if mibBuilder.loadTexts: serviceCreated.setDescription('This trap is sent when a new row is created\n         in the serviceTable.')
serviceDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 4)).setObjects(("PRVT-SERV-MIB", "serviceId"))
if mibBuilder.loadTexts: serviceDeleted.setStatus('current')
if mibBuilder.loadTexts: serviceDeleted.setDescription('This trap is sent when an existing row is\n         deleted from the serviceTable.')
sapCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 5)).setObjects(("PRVT-SERV-MIB", "serviceId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapCreated.setStatus('current')
if mibBuilder.loadTexts: sapCreated.setDescription('This trap is sent when a new row is created\n         in the sapTable.')
sapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 6)).setObjects(("PRVT-SERV-MIB", "serviceId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapDeleted.setStatus('current')
if mibBuilder.loadTexts: sapDeleted.setDescription('This trap is sent when an existing row is\n         deleted from the sapTable.')
sdpCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 7)).setObjects(("PRVT-SERV-MIB", "serviceId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpCreated.setStatus('current')
if mibBuilder.loadTexts: sdpCreated.setDescription('This trap is sent when a new row is created\n         in the sdpTable.')
sdpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 7, 2, 0, 8)).setObjects(("PRVT-SERV-MIB", "serviceId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpDeleted.setStatus('current')
if mibBuilder.loadTexts: sdpDeleted.setDescription('This trap is sent when an existing row is\n         deleted from the sdpTable.')
mibBuilder.exportSymbols("PRVT-SERV-MIB", serviceRevertTimer=serviceRevertTimer, customerEntry=customerEntry, serviceDescription=serviceDescription, sapProfileName=sapProfileName, sdpDeleted=sdpDeleted, sdpSecuredEnable=sdpSecuredEnable, sdpTransportTunnelName=sdpTransportTunnelName, prvtServicesMIBObjects=prvtServicesMIBObjects, sdpPwRedundancyEnable=sdpPwRedundancyEnable, serviceEntry=serviceEntry, sdpId=sdpId, serviceMacAddressSapServiceId=serviceMacAddressSapServiceId, serviceVlanEtherType=serviceVlanEtherType, customerPhone=customerPhone, servicePwRedundOperModeMesh=servicePwRedundOperModeMesh, sapOperStatus=sapOperStatus, sdpEntry=sdpEntry, serviceMacAddressSapEncapValue=serviceMacAddressSapEncapValue, prvtSapEventPropagationProfile=prvtSapEventPropagationProfile, serviceMacAddressSapEntry=serviceMacAddressSapEntry, serviceMacAddressSdpTable=serviceMacAddressSdpTable, sapCreated=sapCreated, sdpDelivery=sdpDelivery, serviceDeleted=serviceDeleted, serviceTable=serviceTable, serviceMacAddressSapMacAddress=serviceMacAddressSapMacAddress, sapDeleted=sapDeleted, sapLastMgmtChange=sapLastMgmtChange, sapEncapValue=sapEncapValue, serviceMacAddressSdpId=serviceMacAddressSdpId, serviceLastMgmtChange=serviceLastMgmtChange, customerCreated=customerCreated, prvtTlsSapEventPropagationProfile=prvtTlsSapEventPropagationProfile, sdpMtu=sdpMtu, sapType=sapType, serviceMacAddressSapPriority=serviceMacAddressSapPriority, serviceMacAddressSdpPriority=serviceMacAddressSdpPriority, sapCustMultSvcSiteName=sapCustMultSvcSiteName, sdpGroupIdentifier=sdpGroupIdentifier, sdpDescription=sdpDescription, sdpAdminStatus=sdpAdminStatus, prvtServicesMIBNotifications=prvtServicesMIBNotifications, sapRowStatus=sapRowStatus, serviceOperStatus=serviceOperStatus, sdpSignalPwStatus=sdpSignalPwStatus, sapPortId=sapPortId, customerDeleted=customerDeleted, serviceMacAddressSdpServiceId=serviceMacAddressSdpServiceId, sdpOutInterface=sdpOutInterface, sdpOperStatus=sdpOperStatus, serviceType=serviceType, sdpLdpEnabled=sdpLdpEnabled, sdpAdminIngressLabel=sdpAdminIngressLabel, serviceEnableSecureSaps=serviceEnableSecureSaps, serviceNumSaps=serviceNumSaps, sapLearnEnable=sapLearnEnable, sdpVCType=sdpVCType, serviceVlanAction=serviceVlanAction, sapOperFlags=sapOperFlags, sdpAdminEgressLabel=sdpAdminEgressLabel, sdpType=sdpType, sdpPwActivate=sdpPwActivate, servicePwRedundOperModeSpoke=servicePwRedundOperModeSpoke, sapEgressQosPolicyId=sapEgressQosPolicyId, sapCurrentMacCount=sapCurrentMacCount, sapMacLearningProfileState=sapMacLearningProfileState, sdpBindVlanTag=sdpBindVlanTag, serviceMacAddressSdpMacAddress=serviceMacAddressSdpMacAddress, sapLearnMode=sapLearnMode, sdpLearnEnable=sdpLearnEnable, serviceMtu=serviceMtu, prvtServicesMIB=prvtServicesMIB, serviceId=serviceId, sdpTable=sdpTable, serviceMacAddressSapRowStatus=serviceMacAddressSapRowStatus, serviceMacAddressSdpRowStatus=serviceMacAddressSdpRowStatus, customerTable=customerTable, sdpFarEndIpAddress=sdpFarEndIpAddress, sdpLabelSignaling=sdpLabelSignaling, sapEntry=sapEntry, customerName=customerName, serviceMacAddressSapPortId=serviceMacAddressSapPortId, serviceCustName=serviceCustName, serviceVpnId=serviceVpnId, serviceAdminStatus=serviceAdminStatus, serviceMacAddressSdpEntry=serviceMacAddressSdpEntry, sapIngressQosPolicyId=sapIngressQosPolicyId, sapUntaggedMode=sapUntaggedMode, sapEgressQosSchedulerPolicy=sapEgressQosSchedulerPolicy, serviceNumSdps=serviceNumSdps, customerRowStatus=customerRowStatus, sdpNextFreeId=sdpNextFreeId, sdpCreated=sdpCreated, serviceMacAddressSapTable=serviceMacAddressSapTable, sdpDynamicVcIngressLabel=sdpDynamicVcIngressLabel, sdpPwPrecedence=sdpPwPrecedence, serviceBackupVlanEtherType=serviceBackupVlanEtherType, customerContact=customerContact, sdpOperFlags=sdpOperFlags, sdpLastMgmtChange=sdpLastMgmtChange, sdpDynamicVcEgressLabel=sdpDynamicVcEgressLabel, PYSNMP_MODULE_ID=prvtServicesMIB, sapIngressQosSchedulerPolicy=sapIngressQosSchedulerPolicy, sdpRowStatus=sdpRowStatus, sapAdminStatus=sapAdminStatus, sapTable=sapTable, sapDescription=sapDescription, serviceCreated=serviceCreated, serviceRowStatus=serviceRowStatus)
