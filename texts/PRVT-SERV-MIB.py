#
# PySNMP MIB module PRVT-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-SERV-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 15:50:15 2021
# On host fv-az74-277 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
TSapEgressPolicyIdOrNone, TNetworkPolicyIdOrNone, TNamedItem, TSapIngressPolicyIdOrNone, TNamedItemOrEmpty, serviceAccessSwitch = mibBuilder.importSymbols("PRVT-QOS-MIB", "TSapEgressPolicyIdOrNone", "TNetworkPolicyIdOrNone", "TNamedItem", "TSapIngressPolicyIdOrNone", "TNamedItemOrEmpty", "serviceAccessSwitch")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Unsigned32, MibIdentifier, Gauge32, Counter32, iso, ModuleIdentity, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "MibIdentifier", "Gauge32", "Counter32", "iso", "ModuleIdentity", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "ObjectIdentity", "TimeTicks")
TimeStamp, TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
prvtServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 2))
prvtServicesMIB.setRevisions(('2009-08-07 00:00', '2009-03-26 00:00', '2009-03-24 00:00', '2009-02-17 00:00', '2008-10-09 00:00', '2008-04-10 00:00', '2008-03-06 00:00', '2008-01-11 00:00', '2008-01-09 00:00', '2008-01-07 00:00', '2007-06-28 00:00', '2006-09-02 00:00', '2006-07-02 00:00', '2006-02-04 00:00', '2005-11-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtServicesMIB.setRevisionsDescriptions(("Added prefix prvt to Services' traps.", 'Added object for Revert timer', 'Changed svcVPLSUplinkTable. Corrected various descriptions. Corrected types for some HQOS objects.', 'Removed references to undefined OBJECT-GROUPs.', 'Fixed the range of sdpGroupIdentifier.', 'changed svcVplsMode values. Added sapLearnMode.', 'changed description of svcAdminStatus.', 'changed sdpOperStatus values.', 'added sdpBindVlanTag.', 'Fixed the range of sdpGroupIdentifier.', 'Returned for backward compatibility svcMtu; Clarified few attributes descripton.', "Lots of changes:\n1. Index for the service table is changed.\n2. Few objects from the service tables are moved in sdp\n3. svcVCId is have now more generic usage. so it's name is changed to svcVPNId\n4. The descriptions for some objects are enhanced", 'Fixed the range of sdpGroupIdentifier.', 'Fixed the range of the svcMtu object and changed the description of svcRowStatus.', 'Initial version.',))
if mibBuilder.loadTexts: prvtServicesMIB.setLastUpdated('200908070000Z')
if mibBuilder.loadTexts: prvtServicesMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtServicesMIB.setContactInfo(' BATM/Telco Systems Support team\nEmail: \nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtServicesMIB.setDescription('This document is the SNMP MIB module to manage and provision\nthe various services of the T-Metro system.')
prvtTMServObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1))
prvtTMCustObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1))
prvtTMSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2))
prvtTMSapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3))
prvtTMSdpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4))
prvtTMServVPLSGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3))
prvtServNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2))
prvtCustNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1))
prvtSvcNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2))
prvtSapNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3))
prvtSdpNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4))
prvtCustTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0))
prvtSvcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0))
prvtSapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0))
prvtSdpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0))
prvtTMServConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3))
prvtTMCustConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1))
prvtTMSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2))
prvtTMSapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3))
prvtTMSdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4))
prvtTMTstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 5))
class ServiceAdminStatus(TextualConvention, Integer32):
    reference = 'Administrative Status'
    description = 'ServiceAdminStatus data type is an enumerated integer that\ndescribes the values used to identify the administrative\nstate of a service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class ServiceOperStatus(TextualConvention, Integer32):
    reference = 'Operational status'
    description = 'ServiceOperStatus data type is an enumerated integer that\ndescribes the values used to identify the current operational\nstate of a service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class ServObjName(TextualConvention, OctetString):
    description = 'ASCII string used to name various service\nobjects.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class ServObjDesc(TextualConvention, OctetString):
    description = 'ASCII string used to describe various service\nobjects.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class ServType(TextualConvention, Integer32):
    description = 'This textual convention is used to specify the\ntype of a given service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("vpws", 9), ("vpls-pe", 10), ("vpls-mtu", 11))

class VpnId(TextualConvention, Unsigned32):
    description = 'A number used to identify a VPN. In general\neach service corresponds to a single VPN, but\nunder some circumstances a VPN may be composed\nof multiple services.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4294967295), )
class SdpIdType(TextualConvention, Unsigned32):
    description = 'A 16-bit number used to identify a Service\nDistribution Point. This ID must be unique only\nwithin the ESR where it is defined. The value 0\nis used as the null ID.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 17407), )
class TMEncapVal(TextualConvention, Unsigned32):
    description = 'A valid Vlan ID in the range 1-4093, or 65535.'
    status = 'current'

class TSapEgrQueueId(TextualConvention, Unsigned32):
    description = 'The value used to uniquely identify a SAP egress queue.\nThe actual valid values are those defined in the given\nSAP egress QoS policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TSapIngQueueId(TextualConvention, Unsigned32):
    description = 'The value used to uniquely identify a SAP ingress queue.\nThe actual valid values are those defined in the given\nSAP ingress QoS policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

custNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNumEntries.setStatus('current')
if mibBuilder.loadTexts: custNumEntries.setDescription('The current number of customer records configured\nin this device.')
custInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2), )
if mibBuilder.loadTexts: custInfoTable.setStatus('current')
if mibBuilder.loadTexts: custInfoTable.setDescription('A table that contains customer information.')
custInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: custInfoEntry.setStatus('current')
if mibBuilder.loadTexts: custInfoEntry.setDescription('Information about a specific customer.')
custName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 1), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custName.setStatus('current')
if mibBuilder.loadTexts: custName.setDescription('The name of this customer.')
custRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custRowStatus.setStatus('current')
if mibBuilder.loadTexts: custRowStatus.setDescription('This object indicates the status of this row.')
custContact = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custContact.setStatus('current')
if mibBuilder.loadTexts: custContact.setDescription('The name of the primary contact person for\nthis customer.')
custPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custPhone.setStatus('current')
if mibBuilder.loadTexts: custPhone.setDescription('The phone/pager number used to reach the\nprimary contact person.')
custLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custLastMgmtChange.setDescription('The value of sysUpTime at the time of the\nmost recent management-initiated change to\nthis customer.')
custMultiServiceSiteTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3), )
if mibBuilder.loadTexts: custMultiServiceSiteTable.setStatus('current')
if mibBuilder.loadTexts: custMultiServiceSiteTable.setDescription('Customer-multi-service-site-table.')
custMultiServiceSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setDescription("Information about a specific customer's\nmulti-service site.")
custMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteName.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteName.setDescription('Customer-multi-service-site-name.')
custMultSvcSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setDescription('Customer-multi-service-site rowStatus.')
custMultSvcSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 3), ServObjDesc().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteDescription.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteDescription.setDescription("Generic information about this customer's\nMulti-Service Site.")
custMultSvcSiteIngressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 4), ServObjName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setDescription('The ingress QoS scheduler policy assigned\nto this Multi-Service Site.')
custMultSvcSiteEgressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 5), ServObjName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setDescription('The egress QoS scheduler policy assigned\nto this Multi-Service Site.')
custMultSvcSiteLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setDescription('The value of sysUpTime at the time of the\nmost recent management-initiated change to\nthis multi-service site.')
custMultiSvcSiteIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4), )
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsTable.setDescription('A table that contains ingress QoS scheduler\nstatistics for the customer multi service site.')
custMultiSvcSiteIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (1, "PRVT-SERV-MIB", "custIngQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngQosSchedStatsEntry.setDescription('Ingress statistics about a specific customer\nmulti service site ingress scheduler.')
custIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosSchedName.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedName.setDescription('The index of the ingress QoS scheduler of\nthis customer multi service site.')
custIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets, as\ndetermined by the customer multi service\nsite ingress scheduler policy.')
custIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets, as\ndetermined by the customer multi service\nsite ingress scheduler policy.')
custMultiSvcSiteEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsTable.setDescription('A table that contains egress QoS scheduler\nstatistics for the customer multi service site.')
custMultiSvcSiteEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (1, "PRVT-SERV-MIB", "custEgrQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrQosSchedStatsEntry.setDescription('Egress statistics about a specific customer\nmulti service site egress scheduler.')
custEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosSchedName.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedName.setDescription('The index of the egress QoS scheduler of\nthis customer multi service site.')
custEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets, as\ndetermined by the customer multi service\nsite egress scheduler policy.')
custEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets, as\ndetermined by the customer multi service\nsite egress scheduler policy.')
custIngQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6), )
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setDescription('The custIngQosPortIdSchedStatsTable contains ingress QoS scheduler\nstatistics for the customer multi service site.')
custIngQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (0, "PRVT-SERV-MIB", "custIngQosPortIdSchedName"), (0, "PRVT-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setDescription('Each entry represents the ingress statistics about a specific customer\nmulti service site ingress scheduler. Entries are created when \na scheduler policy is applied to an MSS.')
custIngQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setDescription('The value of custIngQosPortIdSchedName is used as an index \nof the ingress QoS scheduler of this customer multi service site.')
custIngQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setStatus('current')
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setDescription("The value of custIngQosAssignmentPortId is used as an index\nof the ingress QoS scheduler of this customer multi service site.\nWhen an MSS assignment is an aps/ccag/lag in 'link' mode, each \nmember-port of the aps/ccag/lag has its own scheduler. This object\nrefers to the portId of these member-ports.")
custIngQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setDescription('The value of custIngQosPortSchedStatsFwdPkts represents the\nnumber of forwarded packets, as determined by the customer multi service\nsite ingress scheduler policy.')
custIngQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setDescription('The value of custIngQosPortSchedStatsFwdOctets represents the\nnumber of forwarded octets, as determined by the customer multi service\nsite ingress scheduler policy.')
custEgrQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7), )
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setDescription('The custEgrQosPortIdSchedStatsTable contains egress QoS scheduler\nstatistics for the customer multi service site.')
custEgrQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "custMultSvcSiteName"), (0, "PRVT-SERV-MIB", "custEgrQosPortIdSchedName"), (0, "PRVT-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setDescription('Each row entry represents the egress statistics for a customer\nmulti-service-site egress scheduler. Entries are created when \na scheduler policy is applied to an MSS.')
custEgrQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setDescription('The value of custEgrQosPortIdSchedName is used as an index \nof the egress QoS scheduler of this customer multi service site.')
custEgrQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setStatus('current')
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setDescription("The value of custEgrQosAssignmentPortId is used as an index\nof the egress QoS scheduler of this customer multi service site.\nWhen an MSS assignment is an aps/ccag/lag in 'link' mode, each \nmember-port of the aps/ccag/lag has its own scheduler. This object\nrefers to the portId of these member-ports.")
custEgrQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setDescription('The value of custEgrQosPortSchedStatsFwdPkts represents the\nnumber of forwarded packets, as determined by the customer multi service\nsite egress scheduler policy.')
custEgrQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setDescription('The value of custEgrQosPortSchedStatsFwdOctets represents the\nnumber of forwarded octets, as determined by the customer multi service\nsite egress scheduler policy.')
prvtCustCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0, 1)).setObjects(("PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: prvtCustCreated.setStatus('current')
if mibBuilder.loadTexts: prvtCustCreated.setDescription('This trap is sent when a new row is created\nin the custInfoTable.')
prvtCustDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 1, 0, 2)).setObjects(("PRVT-SERV-MIB", "custName"))
if mibBuilder.loadTexts: prvtCustDeleted.setStatus('current')
if mibBuilder.loadTexts: prvtCustDeleted.setDescription('This trap is sent when an existing row is\ndeleted from the custInfoTable.')
svcNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumEntries.setStatus('current')
if mibBuilder.loadTexts: svcNumEntries.setDescription('The current number of services configured on\nthis node.')
svcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2), )
if mibBuilder.loadTexts: svcBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcBaseInfoTable.setDescription('A table that contains basic service information.')
svcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcBaseInfoEntry.setDescription('Basic information about a specific service.')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('current')
if mibBuilder.loadTexts: svcId.setDescription('The service ID.')
svcVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 2), VpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVpnId.setStatus('current')
if mibBuilder.loadTexts: svcVpnId.setDescription('This object specifies the ID used by Service Provider(SP). \nIt will have different format according to the type of \nservice. \nThis filed is mandatory. If all mandatory fields are \nset, the row status object is automatically changed from notReady(3)\nto notInService(2) state\n')
svcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcRowStatus.setDescription('This object indicates the status of this row. The\nvalues supported during a set operation are \ncreateAndWait(5), destroy(6), active(1), notInSertvice(2). \nService can be deleted any time. The transition between\nsvcRowStatus active(1) and notInService(2) states \nare rejected if svcAdminStatus is up(1). ')
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 4), ServType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcType.setStatus('current')
if mibBuilder.loadTexts: svcType.setDescription('The service type: e.g. EtherPipe, TLS, etc. Currently only \nvpls-pe(11), vpls-mtu(12), vpws-pe(9) and vpws-mtu(10) types \nare supported. \nThis field is mandatory. \nNote: For VPLS service, vpls-mtu is supported only.')
svcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDescription.setStatus('current')
if mibBuilder.loadTexts: svcDescription.setDescription('Generic information about this service.')
svcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMtu.setStatus('current')
if mibBuilder.loadTexts: svcMtu.setDescription('Not supported object')
svcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 7), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcAdminStatus.setDescription('The desired state of this service. \n1. The transition from down(2) state to up(1) state can \nbe done only if svcRowStatus is either active(1) or \nnotInSercvice(2). \n2. The transition from up(1) to down(2) state has to be \ndone in order to modify svcRowStatus object. ')
svcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 8), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperStatus.setStatus('current')
if mibBuilder.loadTexts: svcOperStatus.setDescription('The operating state of this service.')
svcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSaps.setStatus('current')
if mibBuilder.loadTexts: svcNumSaps.setDescription('The number of SAPs defined on this service.')
svcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSdps.setStatus('current')
if mibBuilder.loadTexts: svcNumSdps.setDescription('The number of SDPs bound to this service.')
svcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: svcLastMgmtChange.setDescription('The value of sysUpTime at the time of the\nmost recent management-initiated change to\nthis service.')
svcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: svcLastStatusChange.setDescription('The value of sysUpTime at the time of the\nmost recent operating status change to his\nservice.')
svcEnableSecureSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEnableSecureSaps.setStatus('current')
if mibBuilder.loadTexts: svcEnableSecureSaps.setDescription('Used to configure the SAPs to forward only traffic from the uplink ports.')
svcCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 14), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcCustName.setStatus('current')
if mibBuilder.loadTexts: svcCustName.setDescription('The name of the customer this service belongs to.')
svcRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRevertTimer.setStatus('current')
if mibBuilder.loadTexts: svcRevertTimer.setDescription('Delay before switching to primary pseudowire in seconds')
svcVplsMode = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("qualified", 1), ("unqualified", 2), ("enable", 3))).clone('unqualified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVplsMode.setStatus('current')
if mibBuilder.loadTexts: svcVplsMode.setDescription('This object is used to configure whether VPLS operates in \nqualified or unqualified mode. Qualified and unqualified are not supported,\nwhen having per port qualified/unqualified.')
svcVPLSUplinkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: svcVPLSUplinkTable.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkTable.setDescription('A table that contains information about the VPLS uplink ports.')
svcVPLSUplinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcVPLSUplinkPortID"))
if mibBuilder.loadTexts: svcVPLSUplinkEntry.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkEntry.setDescription('A particular VPLS uplink port.')
svcVPLSUplinkPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: svcVPLSUplinkPortID.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkPortID.setDescription('Unique uplink port index.')
svcVPLSUplinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcVPLSUplinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkIfIndex.setDescription('The ifIndex of the uplink port.')
svcVPLSUplinkNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 3), TNetworkPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkNetworkPolicy.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkNetworkPolicy.setDescription('The network scheduler policy applied to the port.')
svcVPLSUplinkNetworkQueueEgressPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkNetworkQueueEgressPolicy.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkNetworkQueueEgressPolicy.setDescription('The network egress queue applied to the port.')
svcVPLSUplinkShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcVPLSUplinkShaperProfile.setStatus('current')
if mibBuilder.loadTexts: svcVPLSUplinkShaperProfile.setDescription('The ID of the shaping profile applied to the port.\n0 indicates no shaping profile.')
prvtSvcCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: prvtSvcCreated.setStatus('current')
if mibBuilder.loadTexts: prvtSvcCreated.setDescription('This trap is sent when a new row is created\nin the svcBaseInfoTable.')
prvtSvcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: prvtSvcDeleted.setStatus('current')
if mibBuilder.loadTexts: prvtSvcDeleted.setDescription('This trap is sent when an existing row is\ndeleted from the svcBaseInfoTable.')
prvtSvcStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 2, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "svcVpnId"), ("PRVT-SERV-MIB", "svcAdminStatus"), ("PRVT-SERV-MIB", "svcOperStatus"))
if mibBuilder.loadTexts: prvtSvcStatusChanged.setStatus('current')
if mibBuilder.loadTexts: prvtSvcStatusChanged.setDescription('The scvStatusChanged notification is generated when\nthere is a change in the administrative or operating\nstatus of a service.')
sapNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapNumEntries.setStatus('current')
if mibBuilder.loadTexts: sapNumEntries.setDescription('The current number of SAPs configured in this\ndevice.')
sapBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2), )
if mibBuilder.loadTexts: sapBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: sapBaseInfoTable.setDescription('A table that contains basic SAP information.')
sapBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: sapBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sapBaseInfoEntry.setDescription('Information about a specific SAP.')
sapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapPortId.setStatus('current')
if mibBuilder.loadTexts: sapPortId.setDescription('The ID of the access port where this SAP\nis defined.')
sapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 2), TMEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEncapValue.setStatus('current')
if mibBuilder.loadTexts: sapEncapValue.setDescription('The value of the label used to identify this\nSAP on the access port specified by sapPortId.')
sapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapRowStatus.setStatus('current')
if mibBuilder.loadTexts: sapRowStatus.setDescription('This object indicates the status of this row. The\nvalues supported during a set operation are createAndGo(4) \nactive(1), notInService(2) and destroy(6).\nSaps can be deleted any time. The transition between\nsvcRowStatus active(1) and notInService(2) states \nare rejected if sapAdminStatus is up(1). \n')
sapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 4), ServType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapType.setStatus('current')
if mibBuilder.loadTexts: sapType.setDescription('This object indicates the type of service where\nthis SAP is defined.')
sapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sapDescription.setStatus('current')
if mibBuilder.loadTexts: sapDescription.setDescription('Generic information about this SAP.')
sapAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 6), ServiceAdminStatus().clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sapAdminStatus.setDescription('The desired state of this SAP. \n1. The value of this object depends on the value of svcAdminStatus \nfor the service this sap belongs to. If the sap is created and \nits service has svcAdminStatus set to down(2), its own admin status \nwill be down(2), otherwise sapAdminStatus will be up(1).\n2. If sapRowStatus is in notInService state, the sapAdminStatus \ntransition from down(2) to up(1) state will automaticaly change the \nvalue of the sapRowStatus object to active(1)')
sapOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("ingressQosMismatch", 3), ("egressQosMismatch", 4), ("svcAdminDown", 5), ("portMtuTooSmall", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperStatus.setStatus('current')
if mibBuilder.loadTexts: sapOperStatus.setDescription('The operating state of this SAP, showing also the reason for the\ncurrent operation state\n\nValues ingressQosMismatch(3),egressQosMismatch(4),svcAdminDown(5) \nand portMtuTooSmall(6) are not supported')
sapLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sapLastMgmtChange.setDescription('The value of sysUpTime at the time of the\nmost recent management-initiated change to\nthis SAP.')
sapOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 9), Bits().clone(namedValues=NamedValues(("sapAdminDown", 0), ("svcAdminDown", 1), ("portOperDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapOperFlags.setStatus('current')
if mibBuilder.loadTexts: sapOperFlags.setDescription('This object specifies all the conditions that\naffect the operating status of this SAP.')
sapCustMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapCustMultSvcSiteName.setStatus('current')
if mibBuilder.loadTexts: sapCustMultSvcSiteName.setDescription('The value of this object, when not null, indicates\nthe Multi-Service Site this SAP is a member of. This\ninformation is used to configure the ingress and\negress QoS schedulers for this SAP.')
sapIngressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 12), TSapIngressPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIngressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosPolicyId.setDescription('The row index in the hqosSapIngressTable\ncorresponding to this ingress QoS\npolicy, or zero if no policy is specified.')
sapEgressQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 13), TSapEgressPolicyIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapEgressQosPolicyId.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosPolicyId.setDescription('The row index in the hqosSapEgressTable\ncorresponding to this egress QoS policy,\nor zero if no policy is specified.')
sapIngressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 14), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapIngressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\nis null. It indicates the ingress QoS scheduler for\nthis SAP.')
sapEgressQosSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 15), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: sapEgressQosSchedulerPolicy.setDescription('This object can be set only when sapCustMultSvcSite\nis null. It indicates the egress QoS scheduler for\nthis SAP.')
sapLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qualified", 1), ("unqualified", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapLearnMode.setStatus('current')
if mibBuilder.loadTexts: sapLearnMode.setDescription('Sap learning mode. Currently supported as read-only.')
prvtSapCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: prvtSapCreated.setStatus('current')
if mibBuilder.loadTexts: prvtSapCreated.setDescription('This trap is sent when a new row is created\nin the sapBaseInfoTable.')
prvtSapDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"))
if mibBuilder.loadTexts: prvtSapDeleted.setStatus('current')
if mibBuilder.loadTexts: prvtSapDeleted.setDescription('This trap is sent when an existing row is\ndeleted from the sapBaseInfoTable.')
prvtSapStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 3, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"), ("PRVT-SERV-MIB", "sapAdminStatus"), ("PRVT-SERV-MIB", "sapOperStatus"))
if mibBuilder.loadTexts: prvtSapStatusChanged.setStatus('current')
if mibBuilder.loadTexts: prvtSapStatusChanged.setDescription('The sapStatusChanged notification is generated\nwhen there is a change in the administrative or\noperating status of an SAP.')
sapIngQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3), )
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsTable.setDescription('A table that contains ingress QoS queue SAP\nstatistics.')
sapIngQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SERV-MIB", "sapIngQosQueueId"))
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsEntry.setDescription("Ingress statistics about a specific SAP's\nQoS queue.")
sapIngQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 1), TSapIngQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueId.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueId.setDescription('The index of the ingress QoS queue of\nthis SAP.')
sapIngQosQueueStatsOfferedHiPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioPackets.setDescription('The number of high priority packets,\nas determined by the SAP ingress QoS\npolicy, offered by the service queue.')
sapIngQosQueueStatsOfferedLoPrioPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioPackets.setDescription('The number of low priority packets,\nas determined by the SAP ingress QoS\npolicy, offered by the service queue.')
sapIngQosQueueStatsOfferedHiPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedHiPrioOctets.setDescription('The number of high priority octets,\nas determined by the SAP ingress QoS\npolicy, offered by the service queue.')
sapIngQosQueueStatsOfferedLoPrioOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsOfferedLoPrioOctets.setDescription('The number of low priority octets,\nas determined by the SAP ingress QoS\npolicy, offered by the service queue.')
sapIngQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfPackets.setDescription('The number of in-profile packets\n(rate below CIR) forwarded by the\ningress service queue.')
sapIngQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n(rate above CIR) forwarded by the\ningress service queue.')
sapIngQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedInProfOctets.setDescription('The number of in-profile octets\n(rate below CIR) forwarded by the\ningress service queue.')
sapIngQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n(rate above CIR) forwarded by the\ningress service queue.')
sapIngQosQueueStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedOctets.setDescription('The number of octets\ndiscarded in the egress queue.')
sapIngQosQueueStatsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosQueueStatsDroppedPackets.setDescription('The number of in-profile packets\ndiscarded by the Ingess queue.')
sapIngQosCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 3, 1, 12), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosCustName.setStatus('current')
if mibBuilder.loadTexts: sapIngQosCustName.setDescription('The Customer Name of the site this SAP belongs to.')
sapEgrQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4), )
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsTable.setDescription('A table that contains egress QoS queue SAP\nstatistics.')
sapEgrQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (0, "PRVT-SERV-MIB", "sapEgrQosQueueId"))
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsEntry.setDescription("Egress statistics about a specific SAP's\nQoS queue.")
sapEgrQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 1), TSapEgrQueueId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueId.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueId.setDescription('The index of the egress QoS queue of\nthis SAP.')
sapEgrQosQueueStatsForwardedInProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfPackets.setDescription('The number of in-profile packets\n(rate below CIR) forwarded by the\negress queue.')
sapEgrQosQueueStatsForwardedOutProfPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfPackets.setDescription('The number of out-of-profile packets\n(rate above CIR) forwarded by the\negress queue.')
sapEgrQosQueueStatsForwardedInProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedInProfOctets.setDescription('The number of in-profile octets\n(rate below CIR) forwarded by the\negress queue.')
sapEgrQosQueueStatsForwardedOutProfOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsForwardedOutProfOctets.setDescription('The number of out-of-profile octets\n(rate above CIR) forwarded by the\negress queue.')
sapEgrQosQueueStatsDroppedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedOctets.setDescription('The number of octets\ndiscarded in the egress queue.')
sapEgrQosQueueStatsDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosQueueStatsDroppedPackets.setDescription('The number of in-profile packets\ndiscarded by the egress queue.')
sapEgrQosCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 4, 1, 8), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosCustName.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosCustName.setDescription('The Customer Name of the site this SAP belongs to.')
sapIngQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5), )
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsTable.setDescription('A table that contains ingress QoS queue SAP\nstatistics.')
sapIngQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (1, "PRVT-SERV-MIB", "sapIngQosSchedName"))
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsEntry.setDescription("Ingress statistics about a specific SAP's\nQoS queue.")
sapIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapIngQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedName.setDescription('The index of the ingress QoS scheduler of\nthis SAP.')
sapIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets, as\ndetermined by the SAP ingress scheduler\npolicy, offered by the Pchip to the\nQchip.')
sapIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets,as\ndetermined by the SAP ingress schduler\npolicy, offered by the Pchip to the\nQchip.')
sapIngQosSchedCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 5, 1, 4), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIngQosSchedCustName.setStatus('current')
if mibBuilder.loadTexts: sapIngQosSchedCustName.setDescription('The Customer Name of the site this SAP belongs to.')
sapEgrQosSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6), )
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsTable.setDescription('A table that contains ingress QoS queue SAP\nstatistics.')
sapEgrQosSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sapPortId"), (0, "PRVT-SERV-MIB", "sapEncapValue"), (1, "PRVT-SERV-MIB", "sapEgrQosSchedName"))
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsEntry.setDescription("Egress statistics about a specific SAP's\nQoS queue.")
sapEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: sapEgrQosSchedName.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedName.setDescription('The index of the egress QoS scheduler of\nthis SAP.')
sapEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedPackets.setDescription('The number of forwarded packets by the\negress Qchip, as determined by the SAP\negress scheduler policy.')
sapEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedStatsForwardedOctets.setDescription('The number of forwarded octets by the\negress Qchip, as determined by the SAP\negress scheduler policy.')
sapEgrQosSchedCustName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 3, 6, 1, 4), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapEgrQosSchedCustName.setStatus('current')
if mibBuilder.loadTexts: sapEgrQosSchedCustName.setDescription('The Customer Name of the site this SAP belongs to.')
sdpNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNumEntries.setStatus('current')
if mibBuilder.loadTexts: sdpNumEntries.setDescription('The current number of SDPs configured in this\ndevice.')
sdpNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 2), SdpIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpNextFreeId.setStatus('current')
if mibBuilder.loadTexts: sdpNextFreeId.setDescription('The next available value for sdpId.')
sdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3), )
if mibBuilder.loadTexts: sdpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sdpInfoTable.setDescription('A table that contains SDP information.')
sdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-SERV-MIB", "svcId"), (0, "PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: sdpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sdpInfoEntry.setDescription('Information about a specific SDP.')
sdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 1), SdpIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpId.setStatus('current')
if mibBuilder.loadTexts: sdpId.setDescription('SDP identifier.')
sdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdpRowStatus.setDescription('This object indicates the status of this row. \n1. The values supported during a set operation are \ncreateAndWait(5), destroy(6), active(1), notInSertvice(2). \nSdps can be deleted any time. The transition between\nactive(1) and notInService(2) states are rejected if \nsdpAdminStatus is up(1). \n')
sdpDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gre", 1), ("mpls", 2))).clone('mpls')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpDelivery.setStatus('current')
if mibBuilder.loadTexts: sdpDelivery.setDescription('This object specifies the type of delivery used\nby this SDP.\nNOTE! Currently we support only mpls. The modification \nof this obect will be rejected. ')
sdpFarEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpFarEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: sdpFarEndIpAddress.setDescription('This object specifies the IP address of the\nremote end of the GRE or MPLS tunnel defined\nby this SDP. \n\nThis field is mandatory. If all mandatory fields are set, the \nrow status object is automatically changed from notReady(3)\nto notInService(2) state.\n')
sdpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 5), ServObjDesc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpDescription.setStatus('current')
if mibBuilder.loadTexts: sdpDescription.setDescription('Generic information about this SDP.')
sdpLabelSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("tldp", 2))).clone('tldp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpLabelSignaling.setStatus('current')
if mibBuilder.loadTexts: sdpLabelSignaling.setDescription('This object specifies the signaling protocol\nused to obtain the ingress and egress labels\nused in frames transmitted and received on\nthis SDP. When the value of this object is\nnone(1) then the labels are manually assigned\nat the time the SDP is configured. The\nvalue of this object can only be changed while\nthe admin status of the SDP is down(2).\n\nThis field is mandatory. If all mandatory fields are set, the \nrow status object is automatically changed from notReady(3)\nto notInService(2) state\n')
sdpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 7), ServiceAdminStatus().clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sdpAdminStatus.setDescription('The desired state of this SDP.\n1. The value of this object depends on the value of svcAdminStatus. \nIt will be rejected to set sdpAdminStatus to up(1), when svcAdminStatus\nis set to down(2).\n2. If sdpRowStatus is in notInService state, the transition of sdpAdminStatus \nfrom down(2) to up(1) state will also automaticaly change the \nvalue of the sdpRowStatus object to active(1)\n')
sdpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("goingUp", 3), ("tunnelDown", 4), ("transportSelected", 5), ("supressed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperStatus.setStatus('current')
if mibBuilder.loadTexts: sdpOperStatus.setDescription('The operating state of this SDP. \n1. Sdp is up and running.\n2. Initial state. Entry is inactive.\n3. Peers are ready to select transport.\n4. There is no suitable transport.\n5. SDP is not operational due to local/remote SAP down or remote SDP has no transport.\n6. Sdp is up and ready to carry user traffic but it is not used at the moment (backup).\n')
sdpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: sdpLastMgmtChange.setDescription('The value of sysUpTime at the time of the\nmost recent management-initiated change to\nthis SDP.')
sdpLdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLdpEnabled.setStatus('current')
if mibBuilder.loadTexts: sdpLdpEnabled.setDescription("When the value of this object is true(1)\nthe transport LSP's are signalled by LDP,\nas opposed to being provisioned static or\nRSVP-signalled LSP's. This object applies\nonly to MPLS SDP's.")
sdpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 11), Bits().clone(namedValues=NamedValues(("sdpAdminDown", 0), ("signalingSessionDown", 1), ("transportTunnelDown", 2), ("invalidEgressInterface", 3), ("noSystemIpAddress", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperFlags.setStatus('current')
if mibBuilder.loadTexts: sdpOperFlags.setDescription('This object specifies all the conditions that\naffect the operating status of this SDP.')
sdpLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: sdpLastStatusChange.setDescription('The value of sysUpTime at the time of the\nmost recent operating status change to this\nSDP.')
sdpAdminIngressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2048, 18431), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminIngressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpAdminIngressLabel.setDescription('The static MPLS VC label used by the far-end device\nto send packets to this device in this service via\nthis SDP.')
sdpAdminEgressLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(16, 1048575), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpAdminEgressLabel.setStatus('current')
if mibBuilder.loadTexts: sdpAdminEgressLabel.setDescription('The static MPLS VC label used by this device to send\npackets to the far-end device in this service via\nthis SDP.')
sdpAdminIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpAdminIsBackup.setStatus('current')
if mibBuilder.loadTexts: sdpAdminIsBackup.setDescription('This object is used in administratively to specify the preferred primary or backup state of this SDP.\nA value of false means this is the primary SDP.\nThis field is mandatory if svcType is set to vpls-mtu(12) or vpws-mtu(10). \nThe sdpType must be set to spoke(2). If all mandatory fields are \nset, the row status object is automatically changed from notReady(3) to \nnotInService(2) state.')
sdpOperIsBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdpOperIsBackup.setStatus('current')
if mibBuilder.loadTexts: sdpOperIsBackup.setDescription('It represents the current operational state of this SDP as either active or backup. \nA value of false means this is the active SDP. A value of true means that this SDP is\nin backup suppressed state.')
sdpOutInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpOutInterface.setStatus('current')
if mibBuilder.loadTexts: sdpOutInterface.setDescription('This object is valid only if the type of service is tls(3). \nThe ifIndex of the desired outbound interface for this SDP.\n\nThis field is currently not supported. Its modification \nwill be rejected. \n\nThe default value is 0\n')
sdpGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpGroupIdentifier.setStatus('current')
if mibBuilder.loadTexts: sdpGroupIdentifier.setDescription("This object is valid only if the type of service is tls(3). \nThe Group ID for this SDP. SDP's bound to the same service must have the same Group ID's.")
sdpTransportTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpTransportTunnelName.setStatus('current')
if mibBuilder.loadTexts: sdpTransportTunnelName.setDescription('Optional transport tunnel name. For the SDP to be operational an entry must exist in \nmplsTunnelTable with this name.')
sdpVCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("ethernet-vlan", 4), ("ethernet", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpVCType.setStatus('current')
if mibBuilder.loadTexts: sdpVCType.setDescription('VC Type of the service.')
sdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalidType", 0), ("generic", 1), ("spoke", 2), ("mesh", 3), ("hub", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpType.setStatus('current')
if mibBuilder.loadTexts: sdpType.setDescription('The type of this SDP.\n\nCurrently the only supported sdp types are spoke(2) and mesh(3)\n\nThis field is mandatory. If svcType is set to vpls-mtu(12) or vpws-mtu(10), \ntrying to set sdpType to mesh(3) will be rejected(Wring configuration). \nIf all mandatory fields are set, the row status object is automatically \nchanged from notReady(3) to notInService(2) state.\n')
sdpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 9216))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpMtu.setStatus('current')
if mibBuilder.loadTexts: sdpMtu.setDescription('The largest frame size (in octets) that this\nSDP can handle')
sdpBindVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdpBindVlanTag.setStatus('current')
if mibBuilder.loadTexts: sdpBindVlanTag.setDescription('Outgoing vlan.')
sdpIsPwStatusSignalingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpIsPwStatusSignalingEnable.setStatus('current')
if mibBuilder.loadTexts: sdpIsPwStatusSignalingEnable.setDescription('Specifies if PW-status signalling is enabled per given SDP.')
sdpEpsAdminIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpEpsAdminIsPrimary.setStatus('current')
if mibBuilder.loadTexts: sdpEpsAdminIsPrimary.setDescription('Administrative primary status if the specified SDP. If set to true, the SDP is the primary-link of the protection.')
sdpEpsAdminIsSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 1, 4, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdpEpsAdminIsSecondary.setStatus('current')
if mibBuilder.loadTexts: sdpEpsAdminIsSecondary.setDescription('Administrative secondary status if the specified SDP. If set to true, the SDP is the secondary-link of the protection.')
prvtSdpCreated = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 1)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: prvtSdpCreated.setStatus('current')
if mibBuilder.loadTexts: prvtSdpCreated.setDescription('This trap is sent when a new row is created\nin the sdpInfoTable.')
prvtSdpDeleted = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 2)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"))
if mibBuilder.loadTexts: prvtSdpDeleted.setStatus('current')
if mibBuilder.loadTexts: prvtSdpDeleted.setDescription('This trap is sent when an existing row is\ndeleted from the sdpInfoTable.')
prvtSdpStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 2, 4, 0, 3)).setObjects(("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "sdpId"), ("PRVT-SERV-MIB", "sdpAdminStatus"), ("PRVT-SERV-MIB", "sdpOperStatus"))
if mibBuilder.loadTexts: prvtSdpStatusChanged.setStatus('current')
if mibBuilder.loadTexts: prvtSdpStatusChanged.setDescription('The sdpStatusChanged notification is generated\nwhen there is a change in the administrative or\noperating status of an SDP.')
prvtTMCustCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 1))
prvtTMCustGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 2))
prvtTMSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 1))
prvtTMSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2))
prvtTMSapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 1))
prvtTMSapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2))
prvtTMSdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 1))
prvtTMSdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 2))
prvtTMCustCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMCustGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMCustCompliance = prvtTMCustCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtTMCustCompliance.setDescription('The compliance statement for management of services customers\non T-Metro series systems.')
prvtTMSvcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSvcGlobalGroup"), ("PRVT-SERV-MIB", "prvtTMSvcNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcCompliance = prvtTMSvcCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtTMSvcCompliance.setDescription('The compliance statement for management of services\non T-Metro series systems.')
prvtTMSapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSapGlobalGroup"), ("PRVT-SERV-MIB", "prvtTMSapNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapCompliance = prvtTMSapCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtTMSapCompliance.setDescription('The compliance statement for management of services SAPs\non T-Metro series systems.')
prvtTMSdpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 1, 1)).setObjects(("PRVT-SERV-MIB", "prvtTMSdpGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSdpCompliance = prvtTMSdpCompliance.setStatus('current')
if mibBuilder.loadTexts: prvtTMSdpCompliance.setDescription('The compliance statement for management of services SDPs\non T-Metro series systems.')
prvtTMCustGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 1, 2, 1)).setObjects(("PRVT-SERV-MIB", "custNumEntries"), ("PRVT-SERV-MIB", "custName"), ("PRVT-SERV-MIB", "custRowStatus"), ("PRVT-SERV-MIB", "custContact"), ("PRVT-SERV-MIB", "custPhone"), ("PRVT-SERV-MIB", "custLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMCustGlobalGroup = prvtTMCustGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMCustGlobalGroup.setDescription('The group of objects supporting management of Services customers\ngeneral capabilities on T-Metro series systems.')
prvtTMSvcGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2, 1)).setObjects(("PRVT-SERV-MIB", "svcNumEntries"), ("PRVT-SERV-MIB", "svcId"), ("PRVT-SERV-MIB", "svcRowStatus"), ("PRVT-SERV-MIB", "svcType"), ("PRVT-SERV-MIB", "svcDescription"), ("PRVT-SERV-MIB", "svcAdminStatus"), ("PRVT-SERV-MIB", "svcOperStatus"), ("PRVT-SERV-MIB", "svcNumSaps"), ("PRVT-SERV-MIB", "svcNumSdps"), ("PRVT-SERV-MIB", "svcLastMgmtChange"), ("PRVT-SERV-MIB", "svcVpnId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcGlobalGroup = prvtTMSvcGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMSvcGlobalGroup.setDescription('The group of objects supporting management of Svc general\ncapabilities on T-Metro series systems.')
prvtTMSvcNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 2, 2, 2)).setObjects(("PRVT-SERV-MIB", "prvtSvcCreated"), ("PRVT-SERV-MIB", "prvtSvcDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSvcNotificationGroup = prvtTMSvcNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMSvcNotificationGroup.setDescription('The group of notifications supporting the Services\non T-Metro series systems.')
prvtTMSapGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2, 1)).setObjects(("PRVT-SERV-MIB", "sapNumEntries"), ("PRVT-SERV-MIB", "sapPortId"), ("PRVT-SERV-MIB", "sapEncapValue"), ("PRVT-SERV-MIB", "sapRowStatus"), ("PRVT-SERV-MIB", "sapType"), ("PRVT-SERV-MIB", "sapDescription"), ("PRVT-SERV-MIB", "sapAdminStatus"), ("PRVT-SERV-MIB", "sapOperStatus"), ("PRVT-SERV-MIB", "sapIngressQosPolicyId"), ("PRVT-SERV-MIB", "sapEgressQosPolicyId"), ("PRVT-SERV-MIB", "sapLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapGlobalGroup = prvtTMSapGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMSapGlobalGroup.setDescription('The group of objects supporting management of Services SAP general\ncapabilities on T-Metro series systems.')
prvtTMSapNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 3, 2, 2)).setObjects(("PRVT-SERV-MIB", "prvtSapStatusChanged"), ("PRVT-SERV-MIB", "prvtSapCreated"), ("PRVT-SERV-MIB", "prvtSapDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSapNotificationGroup = prvtTMSapNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMSapNotificationGroup.setDescription('The group of notifications supporting the Sap feature\non T-Metro series systems.')
prvtTMSdpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 7, 2, 3, 4, 2, 1)).setObjects(("PRVT-SERV-MIB", "sdpNumEntries"), ("PRVT-SERV-MIB", "sdpId"), ("PRVT-SERV-MIB", "sdpNextFreeId"), ("PRVT-SERV-MIB", "sdpRowStatus"), ("PRVT-SERV-MIB", "sdpDelivery"), ("PRVT-SERV-MIB", "sdpFarEndIpAddress"), ("PRVT-SERV-MIB", "sdpDescription"), ("PRVT-SERV-MIB", "sdpLabelSignaling"), ("PRVT-SERV-MIB", "sdpAdminStatus"), ("PRVT-SERV-MIB", "sdpOperStatus"), ("PRVT-SERV-MIB", "sdpLastMgmtChange"), ("PRVT-SERV-MIB", "sdpLdpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtTMSdpGlobalGroup = prvtTMSdpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: prvtTMSdpGlobalGroup.setDescription('The group of objects supporting management of Services SDP general\ncapabilities on T-Metro series systems.')
mibBuilder.exportSymbols("PRVT-SERV-MIB", sdpNextFreeId=sdpNextFreeId, sdpEpsAdminIsSecondary=sdpEpsAdminIsSecondary, prvtCustNotif=prvtCustNotif, ServiceOperStatus=ServiceOperStatus, prvtSvcNotif=prvtSvcNotif, custMultSvcSiteLastMgmtChange=custMultSvcSiteLastMgmtChange, custIngQosAssignmentPortId=custIngQosAssignmentPortId, svcVPLSUplinkNetworkQueueEgressPolicy=svcVPLSUplinkNetworkQueueEgressPolicy, sapIngQosSchedStatsForwardedOctets=sapIngQosSchedStatsForwardedOctets, sapNumEntries=sapNumEntries, prvtTMCustGroups=prvtTMCustGroups, custIngQosSchedStatsForwardedPackets=custIngQosSchedStatsForwardedPackets, SdpIdType=SdpIdType, prvtTMSvcConformance=prvtTMSvcConformance, svcVPLSUplinkEntry=svcVPLSUplinkEntry, custMultiSvcSiteIngQosSchedStatsEntry=custMultiSvcSiteIngQosSchedStatsEntry, sapPortId=sapPortId, sapEgrQosSchedStatsEntry=sapEgrQosSchedStatsEntry, prvtSvcStatusChanged=prvtSvcStatusChanged, prvtSdpStatusChanged=prvtSdpStatusChanged, prvtTMSapGlobalGroup=prvtTMSapGlobalGroup, svcType=svcType, svcVPLSUplinkShaperProfile=svcVPLSUplinkShaperProfile, custMultSvcSiteDescription=custMultSvcSiteDescription, sapEgrQosSchedStatsForwardedPackets=sapEgrQosSchedStatsForwardedPackets, TMEncapVal=TMEncapVal, sapIngQosQueueStatsOfferedHiPrioOctets=sapIngQosQueueStatsOfferedHiPrioOctets, sapIngQosSchedStatsEntry=sapIngQosSchedStatsEntry, prvtTMSdpCompliances=prvtTMSdpCompliances, prvtSdpCreated=prvtSdpCreated, prvtSapNotif=prvtSapNotif, sdpGroupIdentifier=sdpGroupIdentifier, svcNumEntries=svcNumEntries, prvtTMSapConformance=prvtTMSapConformance, svcVPLSUplinkTable=svcVPLSUplinkTable, sapIngQosQueueStatsForwardedOutProfPackets=sapIngQosQueueStatsForwardedOutProfPackets, prvtSapStatusChanged=prvtSapStatusChanged, prvtTMCustCompliances=prvtTMCustCompliances, prvtSvcDeleted=prvtSvcDeleted, sdpInfoTable=sdpInfoTable, svcRowStatus=svcRowStatus, sapIngQosQueueStatsForwardedOutProfOctets=sapIngQosQueueStatsForwardedOutProfOctets, custEgrQosPortIdSchedStatsTable=custEgrQosPortIdSchedStatsTable, sapEgrQosQueueStatsForwardedInProfOctets=sapEgrQosQueueStatsForwardedInProfOctets, prvtTMSapObjs=prvtTMSapObjs, sdpOperIsBackup=sdpOperIsBackup, custName=custName, prvtTMSapCompliance=prvtTMSapCompliance, custMultiSvcSiteEgrQosSchedStatsTable=custMultiSvcSiteEgrQosSchedStatsTable, prvtTMSvcNotificationGroup=prvtTMSvcNotificationGroup, custNumEntries=custNumEntries, sapDescription=sapDescription, custMultiSvcSiteIngQosSchedStatsTable=custMultiSvcSiteIngQosSchedStatsTable, prvtSvcTraps=prvtSvcTraps, svcNumSdps=svcNumSdps, svcNumSaps=svcNumSaps, sapIngQosSchedCustName=sapIngQosSchedCustName, svcOperStatus=svcOperStatus, sdpOutInterface=sdpOutInterface, sapEgrQosQueueStatsDroppedOctets=sapEgrQosQueueStatsDroppedOctets, prvtCustTraps=prvtCustTraps, sapRowStatus=sapRowStatus, sapEgrQosSchedName=sapEgrQosSchedName, svcVPLSUplinkIfIndex=svcVPLSUplinkIfIndex, prvtTMSapGroups=prvtTMSapGroups, sapCustMultSvcSiteName=sapCustMultSvcSiteName, sdpLastStatusChange=sdpLastStatusChange, sapLastMgmtChange=sapLastMgmtChange, custIngQosPortIdSchedName=custIngQosPortIdSchedName, sdpDescription=sdpDescription, ServType=ServType, custRowStatus=custRowStatus, prvtTMSdpCompliance=prvtTMSdpCompliance, prvtTMSdpConformance=prvtTMSdpConformance, svcVplsMode=svcVplsMode, custMultSvcSiteRowStatus=custMultSvcSiteRowStatus, custIngQosSchedStatsForwardedOctets=custIngQosSchedStatsForwardedOctets, prvtTMCustObjs=prvtTMCustObjs, custIngQosSchedName=custIngQosSchedName, sdpOperFlags=sdpOperFlags, sdpAdminIsBackup=sdpAdminIsBackup, sdpIsPwStatusSignalingEnable=sdpIsPwStatusSignalingEnable, prvtSdpDeleted=prvtSdpDeleted, TSapIngQueueId=TSapIngQueueId, prvtSapCreated=prvtSapCreated, custIngQosPortSchedFwdPkts=custIngQosPortSchedFwdPkts, prvtTMTstpConformance=prvtTMTstpConformance, sapEgrQosQueueStatsForwardedInProfPackets=sapEgrQosQueueStatsForwardedInProfPackets, sapIngQosSchedStatsForwardedPackets=sapIngQosSchedStatsForwardedPackets, prvtTMServVPLSGlobals=prvtTMServVPLSGlobals, custMultSvcSiteIngressSchedulerPolicy=custMultSvcSiteIngressSchedulerPolicy, custMultSvcSiteEgressSchedulerPolicy=custMultSvcSiteEgressSchedulerPolicy, custContact=custContact, svcVPLSUplinkNetworkPolicy=svcVPLSUplinkNetworkPolicy, sdpLdpEnabled=sdpLdpEnabled, sapEgrQosQueueStatsDroppedPackets=sapEgrQosQueueStatsDroppedPackets, custEgrQosSchedName=custEgrQosSchedName, prvtSapDeleted=prvtSapDeleted, svcDescription=svcDescription, sapIngQosSchedStatsTable=sapIngQosSchedStatsTable, sapEgrQosSchedStatsTable=sapEgrQosSchedStatsTable, custMultSvcSiteName=custMultSvcSiteName, prvtServNotifications=prvtServNotifications, sapEgrQosQueueStatsForwardedOutProfOctets=sapEgrQosQueueStatsForwardedOutProfOctets, custPhone=custPhone, sdpAdminIngressLabel=sdpAdminIngressLabel, custEgrQosSchedStatsForwardedOctets=custEgrQosSchedStatsForwardedOctets, sapEgrQosQueueId=sapEgrQosQueueId, custEgrQosPortIdSchedName=custEgrQosPortIdSchedName, custEgrQosPortIdSchedStatsEntry=custEgrQosPortIdSchedStatsEntry, custIngQosPortIdSchedStatsTable=custIngQosPortIdSchedStatsTable, custMultiSvcSiteEgrQosSchedStatsEntry=custMultiSvcSiteEgrQosSchedStatsEntry, custEgrQosAssignmentPortId=custEgrQosAssignmentPortId, sapIngQosQueueId=sapIngQosQueueId, sdpType=sdpType, svcEnableSecureSaps=svcEnableSecureSaps, prvtTMServConformance=prvtTMServConformance, custEgrQosSchedStatsForwardedPackets=custEgrQosSchedStatsForwardedPackets, prvtTMSdpGlobalGroup=prvtTMSdpGlobalGroup, prvtTMCustConformance=prvtTMCustConformance, prvtTMSdpObjs=prvtTMSdpObjs, sapIngQosQueueStatsDroppedPackets=sapIngQosQueueStatsDroppedPackets, sapOperFlags=sapOperFlags, svcRevertTimer=svcRevertTimer, sapOperStatus=sapOperStatus, TSapEgrQueueId=TSapEgrQueueId, prvtTMCustCompliance=prvtTMCustCompliance, prvtTMSapNotificationGroup=prvtTMSapNotificationGroup, sdpId=sdpId, prvtCustCreated=prvtCustCreated, sdpRowStatus=sdpRowStatus, svcId=svcId, svcVPLSUplinkPortID=svcVPLSUplinkPortID, prvtTMSvcCompliances=prvtTMSvcCompliances, sdpDelivery=sdpDelivery, sapEgressQosPolicyId=sapEgressQosPolicyId, sapEgrQosQueueStatsForwardedOutProfPackets=sapEgrQosQueueStatsForwardedOutProfPackets, sdpInfoEntry=sdpInfoEntry, svcLastMgmtChange=svcLastMgmtChange, sapIngQosQueueStatsTable=sapIngQosQueueStatsTable, sapEgrQosQueueStatsTable=sapEgrQosQueueStatsTable, sapAdminStatus=sapAdminStatus, custMultiServiceSiteTable=custMultiServiceSiteTable, svcLastStatusChange=svcLastStatusChange, prvtTMSvcGlobalGroup=prvtTMSvcGlobalGroup, prvtTMSvcObjs=prvtTMSvcObjs, sapEgressQosSchedulerPolicy=sapEgressQosSchedulerPolicy, sdpLastMgmtChange=sdpLastMgmtChange, sapIngQosQueueStatsEntry=sapIngQosQueueStatsEntry, prvtServicesMIB=prvtServicesMIB, sapEncapValue=sapEncapValue, prvtTMCustGlobalGroup=prvtTMCustGlobalGroup, prvtCustDeleted=prvtCustDeleted, svcCustName=svcCustName, sapIngQosQueueStatsOfferedHiPrioPackets=sapIngQosQueueStatsOfferedHiPrioPackets, PYSNMP_MODULE_ID=prvtServicesMIB, sdpTransportTunnelName=sdpTransportTunnelName, prvtSapTraps=prvtSapTraps, prvtSvcCreated=prvtSvcCreated, sapIngressQosPolicyId=sapIngressQosPolicyId, sapIngQosQueueStatsForwardedInProfPackets=sapIngQosQueueStatsForwardedInProfPackets, svcBaseInfoTable=svcBaseInfoTable, sdpBindVlanTag=sdpBindVlanTag, sapLearnMode=sapLearnMode, custIngQosPortIdSchedStatsEntry=custIngQosPortIdSchedStatsEntry, sapIngQosQueueStatsForwardedInProfOctets=sapIngQosQueueStatsForwardedInProfOctets, custIngQosPortSchedFwdOctets=custIngQosPortSchedFwdOctets, sdpAdminStatus=sdpAdminStatus, custInfoEntry=custInfoEntry, prvtTMServObjs=prvtTMServObjs, prvtSdpTraps=prvtSdpTraps, svcVpnId=svcVpnId, sapBaseInfoTable=sapBaseInfoTable, sapEgrQosSchedCustName=sapEgrQosSchedCustName, sapBaseInfoEntry=sapBaseInfoEntry, sapEgrQosQueueStatsEntry=sapEgrQosQueueStatsEntry, prvtTMSvcCompliance=prvtTMSvcCompliance, sapIngQosQueueStatsDroppedOctets=sapIngQosQueueStatsDroppedOctets, sapIngQosQueueStatsOfferedLoPrioPackets=sapIngQosQueueStatsOfferedLoPrioPackets, sapIngQosSchedName=sapIngQosSchedName, prvtSdpNotif=prvtSdpNotif, sapIngQosCustName=sapIngQosCustName, sdpLabelSignaling=sdpLabelSignaling, sdpOperStatus=sdpOperStatus, prvtTMSdpGroups=prvtTMSdpGroups, ServObjDesc=ServObjDesc, sapIngressQosSchedulerPolicy=sapIngressQosSchedulerPolicy, sdpVCType=sdpVCType, svcBaseInfoEntry=svcBaseInfoEntry, prvtTMSapCompliances=prvtTMSapCompliances, sapIngQosQueueStatsOfferedLoPrioOctets=sapIngQosQueueStatsOfferedLoPrioOctets, custLastMgmtChange=custLastMgmtChange, sdpAdminEgressLabel=sdpAdminEgressLabel, svcAdminStatus=svcAdminStatus, sapType=sapType, prvtTMSvcGroups=prvtTMSvcGroups, svcMtu=svcMtu, sapEgrQosSchedStatsForwardedOctets=sapEgrQosSchedStatsForwardedOctets, sdpMtu=sdpMtu, custMultiServiceSiteEntry=custMultiServiceSiteEntry, sdpEpsAdminIsPrimary=sdpEpsAdminIsPrimary, ServiceAdminStatus=ServiceAdminStatus, sapEgrQosCustName=sapEgrQosCustName, ServObjName=ServObjName, sdpFarEndIpAddress=sdpFarEndIpAddress, custInfoTable=custInfoTable, custEgrQosPortSchedFwdOctets=custEgrQosPortSchedFwdOctets, custEgrQosPortSchedFwdPkts=custEgrQosPortSchedFwdPkts, VpnId=VpnId, sdpNumEntries=sdpNumEntries)
