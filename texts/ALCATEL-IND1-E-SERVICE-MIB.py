#
# PySNMP MIB module ALCATEL-IND1-E-SERVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-E-SERVICE-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:11 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1eService, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1eService")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "Counter32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1EServiceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1))
if mibBuilder.loadTexts: alcatelIND1EServiceMIB.setLastUpdated('200705230000Z')
if mibBuilder.loadTexts: alcatelIND1EServiceMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1EServiceMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n                version of this document is used with the products in question:\n\n                                                   Alcatel-Lucent, Enterprise Solutions Division\n                                            (Formerly Alcatel Internetworking, Incorporated)\n                                                         26801 West Agoura Road\n                                                       Agoura Hills, CA  91301-5122\n                                                        United States Of America\n\n                Telephone:          North America       +1 800 995 2696\n                                                        Latin America   +1 877 919 9526\n                                Europe          +31 23 556 0100\n                                Asia            +65 394 7933\n                                All Other       +1 818 878 4507\n\n                Electronic Mail:        support@ind.alcatel.com\n                World Wide Web:         http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1EServiceMIB.setDescription('The parameters for configuration of the E-Service feature.\n\n                The right to make changes in specification and other information\n                contained in this document without prior notice is reserved.\n\n                No liability shall be assumed for any incidental, indirect, special, or\n                consequential damages whatsoever arising from or related to this\n                document or the information contained herein.\n\n                Vendors, end-users, and other interested parties are granted\n                non-exclusive license to use this specification in connection with\n                management of the products for which it is intended to be used.\n\n                               Copyright (C) 1995-2006 Alcatel-Lucent\n                                         ALL RIGHTS RESERVED WORLDWIDE')
class AlaEServiceUNIProfileProtocolTreatment(TextualConvention, Integer32):
    description = 'The behavior of the bridge in regards to the given protocols packets received on\n        the UNI. Tunnel (1) enables the packets to be tunneled across the provider\n        network.  Discard (2) causes the packets to be discarded and not enter\n        the provider network. Peer (3) means that on this port the bridge is to\n        participate in the protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tunnel", 1), ("drop", 2), ("peer", 3))

alcatelIND1eServiceMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1))
if mibBuilder.loadTexts: alcatelIND1eServiceMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1eServiceMIBObjects.setDescription('Branch For E-Service Managed Objects.')
alcatelIND1EServiceMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2))
if mibBuilder.loadTexts: alcatelIND1EServiceMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EServiceMIBConformance.setDescription('Branch For E-Service Conformance Information.')
alcatelIND1EServiceMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1EServiceMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EServiceMIBGroups.setDescription('Branch For E-Service Units Of Conformance.')
alcatelIND1EServiceMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1EServiceMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EServiceMIBCompliances.setDescription('Branch For E-Service Compliance Statements.')
alaEService = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1))
alaEServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 1))
alaEServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("legacyMode", 1), ("eServiceMode", 2))).clone('legacyMode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaEServiceMode.setStatus('current')
if mibBuilder.loadTexts: alaEServiceMode.setDescription('The current mode configured for Vlan Stacking and Layer 2 tunnel configuration.\n        legacyMode (1) indicates that the commands from AlcatelIND1VLANStacking.mib are\n        to be used. eServiceMode (2) indicates the commands from this MIB are to be used.')
alaEServiceSapProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaEServiceSapProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileTable.setDescription('A table that contains service profiles containing performance and control attributes.\n        An entry in this table is created when a new service profile is defined.')
alaEServiceSapProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1), ).setIndexNames((1, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileID"))
if mibBuilder.loadTexts: alaEServiceSapProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileEntry.setDescription('A E-Service Service Profile entry.')
alaEServiceSapProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaEServiceSapProfileID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileID.setDescription('A label given to uniquely identify this profile. Must be at least one character long.')
alaEServiceSapProfileCVLANTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stackSVLAN", 1), ("translate", 2), ("changeCVLAN", 3))).clone('stackSVLAN')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileCVLANTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileCVLANTreatment.setDescription('The type of VLAN stacking operation to be performed on a customer frame entering\n        this service.  Stack Svlan (1) indicates that the SVLAN is to be pre-pended on the\n        frame before any existing 802.1Q tag.  Translate (2) means to replace the existing\n        802.1Q tag with the SVLAN.  Change CVLAN (3) indicates that the customer tag is to\n        remain on the frame but its value is to be changed to the supplied value.')
alaEServiceSapProfileReplacementCVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileReplacementCVLAN.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileReplacementCVLAN.setDescription('The CVLAN ID to use when using the Change CVLAN treatment mode.')
alaEServiceSapProfilePriorityMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notAssigned", 0), ("mapInnerPtoOuterP", 1), ("mapInnerDscpToOuterP", 2), ("fixedP", 3))).clone('fixedP')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfilePriorityMapMode.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfilePriorityMapMode.setDescription('This object describes the source of the value for the priority field of the SVLAN\n        802.1Q tag when pre-pended to the customer data frame.NotAssigned(0), MapInnerPtoOuterP (1) uses\n        the priority field of the incoming frame when tagged to fill in the priority field\n        of the SVLAN tag. mapInnerDscpToOuterP (2) uses the frames priority bits in its IP\n        DSCP field to fill in the priority field of the SVLAN tag. FixedP (3) uses the\n        supplied FixedPriorityValue to fill in the SVLAN tag priority bits.')
alaEServiceSapProfileFixedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileFixedPriority.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileFixedPriority.setDescription('This object describes the value of the priority field of the 802.1Q SVLAN tag\n        pre-pended to customer data frames when the fixed priority mapping mode is selected.')
alaEServiceSapProfileIngressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileIngressBW.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileIngressBW.setDescription('This object describes this limit of ingress bandwidth for the traffic to which\n        this profile is applied. If 0, no bandwidth limit is applied.  This number represents\n        traffic in units of 1,000,000 bits per second. Note that all CVLAN that belong to this\n        SAP will share this aggregated limit.')
alaEServiceSapProfileBandwidthShare = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("shared", 1), ("notShared", 2))).clone('shared')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileBandwidthShare.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileBandwidthShare.setDescription('This object describes the use of the bandwidth limit in how it is applied across\n        multiple ports of the SAP. If set to notApplicable(0), the SAP is not used. If set\n        to Shared (1), all the ports that are part of the SAP will use aggregated\n        bandwidth, sharing some part of the bandwidth limit. If set to notShared (2),\n        each port will use its own bandwidth meter for this SAP. This value is not used\n        if ingressBandwidth is 0.')
alaEServiceSapProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileRowStatus.setDescription('The status of this table entry.')
alaEServiceSapProfileEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfileEgressBW.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileEgressBW.setDescription('This object describes this limit of egress bandwidth for each UNI\n        of the SAP to which this profile is applied. If 0, no bandwidth limit\n        is applied.  This number represents traffic in units of Megabits per\n        second. Note that all CVLAN that belong to this SAP will share this\n        aggregated limit.')
alaEServiceUNIProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaEServiceUNIProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileTable.setDescription('A table that contains service profiles containing performance and control attributes.\n        An entry in this table is created when a new service profile is defined.')
alaEServiceUNIProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1), ).setIndexNames((1, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileID"))
if mibBuilder.loadTexts: alaEServiceUNIProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileEntry.setDescription('A E-Service Service Profile entry.')
alaEServiceUNIProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: alaEServiceUNIProfileID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileID.setDescription('A label given to uniquely identify this profile. Must be at least one character long.')
alaEServiceUNIProfileStpBpduTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 2), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfileStpBpduTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileStpBpduTreatment.setDescription('This object describes the behavior of the bridge in regards to the spanning tree\n        protocol BPDU received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currnetly Peer is not supported for Spanning Tree')
alaEServiceUNIProfile8021xTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 3), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfile8021xTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfile8021xTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1x PDU\n        frames received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currnetly only drop is supported')
alaEServiceUNIProfile8021ABTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 4), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfile8021ABTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfile8021ABTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1AB PDU\n        frames received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently only drop is supported')
alaEServiceUNIProfile8023adTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 5), AlaEServiceUNIProfileProtocolTreatment().clone('peer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfile8023adTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfile8023adTreatment.setDescription('This object describes the behavior of the bridge in regards to the IEEE 802.1ad PDU\n        frames received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently only peer is supported')
alaEServiceUNIProfileGvrpTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 6), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfileGvrpTreatment.setStatus('deprecated')
if mibBuilder.loadTexts: alaEServiceUNIProfileGvrpTreatment.setDescription('This object describes the behavior of the bridge in regards to the GVRP PDU\n        frames received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for GVRP')
alaEServiceUNIProfileAmapTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 7), AlaEServiceUNIProfileProtocolTreatment().clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfileAmapTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileAmapTreatment.setDescription('This object describes the behavior of the bridge in regards to the Alcatel\n        propietary AMAP PDU frames received on the UNI. Tunnel (1) enables the PDU to\n        be tunneled across the provider network.  Discard (2) causes the PDU of the\n        protocol to be discarded and not enter the provider network. Peer (3) means\n        that on this port the bridge is to participate in the protocol.  Currently\n        drop is only supported')
alaEServiceUNIProfileMvrpTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 8), AlaEServiceUNIProfileProtocolTreatment().clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfileMvrpTreatment.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileMvrpTreatment.setDescription('This object describes the behavior of the bridge in regards to the MVRP PDU\n        frames received on the UNI. Tunnel (1) enables the PDU to be tunneled across\n        the provider network.  Discard (2) causes the PDU of the protocol to be discarded\n        and not enter the provider network. Peer (3) means that on this port the bridge\n        is to participate in the protocol.  Currently peer is not supported for MVRP')
alaEServiceUNIProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceUNIProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileRowStatus.setDescription('The status of this table entry.')
alaEServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaEServiceTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceTable.setDescription('A table that contains the services and their assigned SVLAN for the\n        E-Service feature.')
alaEServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4, 1), ).setIndexNames((1, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceID"))
if mibBuilder.loadTexts: alaEServiceEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceEntry.setDescription('The svlan/ipmvlan-port association.')
alaEServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaEServiceID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceID.setDescription('A label given to uniquely identify this Service. Must be at least one character long.')
alaEServiceSVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSVLAN.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSVLAN.setDescription('The SVLAN number of the SVLAN chosen to the be transport for this service.')
alaEServiceVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("svlan", 1), ("ipmvlan", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceVlanType.setStatus('current')
if mibBuilder.loadTexts: alaEServiceVlanType.setDescription('The type of the vlan this service is going to attach to. When creating the service,\n        the type should match the vlanId specified in the request.')
alaEServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceRowStatus.setDescription('The status of this table entry.  The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a service. When\n        creating or deleting the service, the user needs to provide both\n        the svlan and the vlantype objects.')
alaEServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5), )
if mibBuilder.loadTexts: alaEServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapTable.setDescription("A table that contains the Service Access Points (Sap) listed by ID.\n        This table is used to create, delete, and modify the SAP's profile")
alaEServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapID"))
if mibBuilder.loadTexts: alaEServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapEntry.setDescription('The list of SAP.')
alaEServiceSapID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaEServiceSapID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapID.setDescription('A Number given to uniquely identify the SAP.')
alaEServiceSapServiceID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapServiceID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapServiceID.setDescription('A label given to uniquely identify the Service this SAP is for. Must\n        be at least one character long.')
alaEServiceSapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapProfile.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfile.setDescription('The string identifying the SAP Profile this sap is to use. If specified, must match an existing\n        SAP Profile.')
alaEServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapRowStatus.setDescription('The status of this table entry. The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a sap. When\n        creating the sap, the user needs to provide the service name in\n        the same set request.')
alaEServiceSapCvlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6), )
if mibBuilder.loadTexts: alaEServiceSapCvlanTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanTable.setDescription('A table that contains the Service Access Points (Sap) where the CVLANs are bound\n        to their service.')
alaEServiceSapCvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapCvlanSapID"), (0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapCvlanCvlan"))
if mibBuilder.loadTexts: alaEServiceSapCvlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanEntry.setDescription('The CVLAN to Sap binding.')
alaEServiceSapCvlanSapID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaEServiceSapCvlanSapID.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanSapID.setDescription('A Number given to uniquely identify this SAP.')
alaEServiceSapCvlanCvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: alaEServiceSapCvlanCvlan.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanCvlan.setDescription('This object is the CVLAN ID that this binding is targeted at.  The CVLAN ID\n        may be 0, which indicates an all or untagged only mapping type.')
alaEServiceSapCvlanMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single", 1), ("all", 2), ("untaggedOnly", 3))).clone('single')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapCvlanMapType.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanMapType.setDescription('This object is the mapping type that defines what CVLANs are mapped into this service.\n        Multiple mappings can be defined for CVLAN to service, however only one all (2) or\n        untaggedOnly (3) mapping entry can be created per UNI.  A mapping type of Single (1)\n        denotes a specific CVLAN value to bind to the service. A mapping type of All (2)\n        denotes that all customer frames that do not map to any other SAP,\n        will be mapped into this service.  A mapping type of Untagged (3) denotes that only\n        the untagged frames will be mapped into this service.')
alaEServiceSapCvlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapCvlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanRowStatus.setDescription('The status of this table entry.  The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a SAP.')
alaEServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaEServicePortTable.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortTable.setDescription('A table that contains the ports used by the EService feature.  Both UNI and NNI\n        are listed here.')
alaEServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortID"))
if mibBuilder.loadTexts: alaEServicePortEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortEntry.setDescription('The list of ports being used by EService.')
alaEServicePortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaEServicePortID.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortID.setDescription('The IfIndex of this UNI or NNI Port.')
alaEServicePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("uni", 1), ("nni", 3))).clone('uni')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortType.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortType.setDescription('The type of port for Vlan Stacking operation. uni (1) represents a customer facing\n        port on which traffic may enter the E-Service.  nni (2) respresents a provider network\n        port over which the E-Service may be connected.')
alaEServicePortVendorTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 3), Integer32().clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortVendorTpid.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortVendorTpid.setDescription('he TPID for this port if type is NNI. It is used for the incoming data\n        traffic parsing and it is substituted to the 802.1Q standard Tpid for\n        the outgoing data traffic. This is used for compatibility with other vendor\n        equipment. The default value is the standard value 0x8100.')
alaEServicePortLegacyStpBpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortLegacyStpBpdu.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortLegacyStpBpdu.setDescription('The legacy STP BPDU treatment for this port if NNI. It defines the type of processing\n         applied to STP legacy BPDUs on network ports. Legacy BPDU refer to conventional/customer\n         BPDUs with MAC address 01:80:c2:00:00:00 and its processing on network ports can be\n         enabled/disabled by this object.By default the value is disabled i.e\n         provider MAC BPDU with MAC address 01:80:c2:00:00:08 would be processed at network ports.')
alaEServicePortLegacyGvrpPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortLegacyGvrpPdu.setStatus('deprecated')
if mibBuilder.loadTexts: alaEServicePortLegacyGvrpPdu.setDescription('The legacy GVRP PDU treatment for this port if NNI. It defines the type of processing\n         applied to GVRP PDUs on network ports. ')
alaEServicePortUniProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortUniProfile.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortUniProfile.setDescription('The label of an existing UNI profile that which contains various properties to be\n        applied to this port if UNI.')
alaEServicePortTransBridging = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortTransBridging.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortTransBridging.setDescription('The Transparent Bridging status for the nni Port.')
alaEServicePortLegacyMvrpPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortLegacyMvrpPdu.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortLegacyMvrpPdu.setDescription('The legacy MVRP PDU treatment for this port if NNI. It defines the type of processing\n         applied to MVRP PDUs on network ports. ')
alaEServicePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServicePortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortRowStatus.setDescription('The status of this table entry. The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a binding')
alaEServiceSapUniTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 8), )
if mibBuilder.loadTexts: alaEServiceSapUniTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniTable.setDescription('A table that contains the UNI that are bound to each SAP for classifying\n        traffic into each EService. Not that writing to this table may create\n        a new UNI.')
alaEServiceSapUniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapUniSap"), (0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapUniUni"))
if mibBuilder.loadTexts: alaEServiceSapUniEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniEntry.setDescription('The list of SAP-UNI bindings being used by EService.')
alaEServiceSapUniSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaEServiceSapUniSap.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniSap.setDescription('The SAP ID that is configured onto this port.')
alaEServiceSapUniUni = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 8, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaEServiceSapUniUni.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniUni.setDescription('The IfIndex of this UNI Port.')
alaEServiceSapUniRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceSapUniRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniRowStatus.setDescription('The status of this table entry. The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a binding')
alaEServiceNniSvlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9), )
if mibBuilder.loadTexts: alaEServiceNniSvlanTable.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanTable.setDescription('A table that contains the SVLANs bound to each NNI for use by the\n        EService feature.')
alaEServiceNniSvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceNniSvlanNni"), (0, "ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceNniSvlanSvlan"))
if mibBuilder.loadTexts: alaEServiceNniSvlanEntry.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanEntry.setDescription('The list of NNI-SVLAN bindings being used by EService.')
alaEServiceNniSvlanNni = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaEServiceNniSvlanNni.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanNni.setDescription('The IfIndex of this NNI Port.')
alaEServiceNniSvlanSvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094)))
if mibBuilder.loadTexts: alaEServiceNniSvlanSvlan.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanSvlan.setDescription('The SVLAN bound to this port. SVLAN cannot be 1.')
alaEServiceNniSvlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceNniSvlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanRowStatus.setDescription('The status of this table entry. The supported value for set are\n        createAndGo (4) and destroy(6), to add or remove a binding')
alaEServiceNniSvlanVpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp", 1), ("erp", 2))).clone('stp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaEServiceNniSvlanVpaType.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanVpaType.setDescription('The object is used to specify whether the VPA state is to\n        be controlled by an ERP or a STP. By default VPA state is\n        controlled by STP.')
alaEServiceGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 10))
alaEServiceGlobalTransBridging = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaEServiceGlobalTransBridging.setStatus('current')
if mibBuilder.loadTexts: alaEServiceGlobalTransBridging.setDescription('The global transparent bridging status.')
alcatelIND1EServiceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapUniGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapCvlanGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceNniSvlanGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceInfoGroup"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1EServiceMIBCompliance = alcatelIND1EServiceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1EServiceMIBCompliance.setDescription('Compliance statement for E-Service.')
alaEServiceSapProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileCVLANTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileReplacementCVLAN"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfilePriorityMapMode"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileFixedPriority"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileIngressBW"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileBandwidthShare"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileRowStatus"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfileEgressBW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceSapProfileGroup = alaEServiceSapProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapProfileGroup.setDescription('Collection of objects for management of E-Service Sap Profiles.')
alaEServiceUNIProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileStpBpduTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfile8021xTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfile8021ABTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfile8023adTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileGvrpTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileAmapTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileMvrpTreatment"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceUNIProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceUNIProfileGroup = alaEServiceUNIProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceUNIProfileGroup.setDescription('Collection of objects for management of EService UNI Profiles.')
alaEServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSVLAN"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceVlanType"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceGroup = alaEServiceGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceGroup.setDescription('Collection of objects for management of E-Services.')
alaEServiceSapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapServiceID"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapProfile"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceSapGroup = alaEServiceSapGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapGroup.setDescription('Collection of objects for management of E-Service SAPs.')
alaEServiceSapCvlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapCvlanMapType"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapCvlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceSapCvlanGroup = alaEServiceSapCvlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapCvlanGroup.setDescription('Collection of objects for management of E-Service SAP CVLAN bindings.')
alaEServicePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortType"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortVendorTpid"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortLegacyStpBpdu"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortLegacyGvrpPdu"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortUniProfile"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortTransBridging"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortLegacyMvrpPdu"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServicePortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServicePortGroup = alaEServicePortGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServicePortGroup.setDescription('Collection of objects for management of E-Service Ports.')
alaEServiceSapUniGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceSapUniRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceSapUniGroup = alaEServiceSapUniGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceSapUniGroup.setDescription('Collection of objects for management of E-Service SAP to UNI\n        Binding.')
alaEServiceNniSvlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceNniSvlanRowStatus"), ("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceNniSvlanVpaType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceNniSvlanGroup = alaEServiceNniSvlanGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceNniSvlanGroup.setDescription('Collection of objects for management of E-Service SVLAN to NNI\n        Binding.')
alaEServiceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceInfoGroup = alaEServiceInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceInfoGroup.setDescription('Collection of objects for management of E-Service Info\n        Binding.')
alaEServiceGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 50, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-E-SERVICE-MIB", "alaEServiceGlobalTransBridging"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaEServiceGlobalGroup = alaEServiceGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaEServiceGlobalGroup.setDescription('Collection of objects for management of E-Service global\n        configuration.')
mibBuilder.exportSymbols("ALCATEL-IND1-E-SERVICE-MIB", alaEServiceID=alaEServiceID, alaEServicePortLegacyStpBpdu=alaEServicePortLegacyStpBpdu, alaEServiceEntry=alaEServiceEntry, alaEServiceSapCvlanCvlan=alaEServiceSapCvlanCvlan, alaEServiceSapProfileBandwidthShare=alaEServiceSapProfileBandwidthShare, alaEServiceTable=alaEServiceTable, alaEServiceSapProfileGroup=alaEServiceSapProfileGroup, alaEServiceSapServiceID=alaEServiceSapServiceID, alaEServiceSapProfileReplacementCVLAN=alaEServiceSapProfileReplacementCVLAN, alaEServiceUNIProfileRowStatus=alaEServiceUNIProfileRowStatus, alcatelIND1EServiceMIBCompliance=alcatelIND1EServiceMIBCompliance, alaEServicePortTransBridging=alaEServicePortTransBridging, alaEServiceVlanType=alaEServiceVlanType, alaEServiceSapRowStatus=alaEServiceSapRowStatus, alaEServiceSapCvlanGroup=alaEServiceSapCvlanGroup, alaEServiceSapUniRowStatus=alaEServiceSapUniRowStatus, alaEServiceSapGroup=alaEServiceSapGroup, alaEServiceNniSvlanVpaType=alaEServiceNniSvlanVpaType, alaEServiceSapProfileID=alaEServiceSapProfileID, alaEServiceRowStatus=alaEServiceRowStatus, alaEServicePortGroup=alaEServicePortGroup, alaEServiceSapProfileEgressBW=alaEServiceSapProfileEgressBW, alaEServicePortTable=alaEServicePortTable, alaEServiceSapProfileCVLANTreatment=alaEServiceSapProfileCVLANTreatment, alaEServiceInfo=alaEServiceInfo, alaEServiceSapProfileRowStatus=alaEServiceSapProfileRowStatus, alaEServicePortLegacyMvrpPdu=alaEServicePortLegacyMvrpPdu, alaEServiceUNIProfileAmapTreatment=alaEServiceUNIProfileAmapTreatment, alaEServiceNniSvlanGroup=alaEServiceNniSvlanGroup, alaEServiceNniSvlanEntry=alaEServiceNniSvlanEntry, alaEServiceGlobals=alaEServiceGlobals, alaEServiceSapProfileIngressBW=alaEServiceSapProfileIngressBW, alaEServicePortType=alaEServicePortType, alaEServiceSapTable=alaEServiceSapTable, alaEServiceNniSvlanNni=alaEServiceNniSvlanNni, AlaEServiceUNIProfileProtocolTreatment=AlaEServiceUNIProfileProtocolTreatment, alaEServiceSapEntry=alaEServiceSapEntry, alcatelIND1eServiceMIBObjects=alcatelIND1eServiceMIBObjects, alaEServiceNniSvlanRowStatus=alaEServiceNniSvlanRowStatus, alaEServiceNniSvlanTable=alaEServiceNniSvlanTable, alaEServiceGlobalGroup=alaEServiceGlobalGroup, alcatelIND1EServiceMIBConformance=alcatelIND1EServiceMIBConformance, alaEServiceSapCvlanTable=alaEServiceSapCvlanTable, alaEServicePortLegacyGvrpPdu=alaEServicePortLegacyGvrpPdu, alaEServiceUNIProfileEntry=alaEServiceUNIProfileEntry, alaEServiceSapCvlanEntry=alaEServiceSapCvlanEntry, alaEServiceSapProfilePriorityMapMode=alaEServiceSapProfilePriorityMapMode, alcatelIND1EServiceMIB=alcatelIND1EServiceMIB, alaEServiceSapUniTable=alaEServiceSapUniTable, PYSNMP_MODULE_ID=alcatelIND1EServiceMIB, alaEService=alaEService, alaEServiceSapUniSap=alaEServiceSapUniSap, alaEServiceUNIProfile8021ABTreatment=alaEServiceUNIProfile8021ABTreatment, alaEServiceSapUniGroup=alaEServiceSapUniGroup, alaEServiceUNIProfile8021xTreatment=alaEServiceUNIProfile8021xTreatment, alaEServiceSapCvlanSapID=alaEServiceSapCvlanSapID, alaEServiceSVLAN=alaEServiceSVLAN, alaEServicePortRowStatus=alaEServicePortRowStatus, alaEServiceSapProfile=alaEServiceSapProfile, alaEServiceUNIProfileGroup=alaEServiceUNIProfileGroup, alcatelIND1EServiceMIBCompliances=alcatelIND1EServiceMIBCompliances, alaEServiceSapID=alaEServiceSapID, alaEServiceGroup=alaEServiceGroup, alaEServiceUNIProfileID=alaEServiceUNIProfileID, alaEServiceUNIProfileGvrpTreatment=alaEServiceUNIProfileGvrpTreatment, alaEServicePortUniProfile=alaEServicePortUniProfile, alaEServicePortEntry=alaEServicePortEntry, alaEServiceSapProfileFixedPriority=alaEServiceSapProfileFixedPriority, alaEServiceUNIProfile8023adTreatment=alaEServiceUNIProfile8023adTreatment, alaEServiceSapProfileTable=alaEServiceSapProfileTable, alaEServiceGlobalTransBridging=alaEServiceGlobalTransBridging, alaEServicePortID=alaEServicePortID, alaEServicePortVendorTpid=alaEServicePortVendorTpid, alcatelIND1EServiceMIBGroups=alcatelIND1EServiceMIBGroups, alaEServiceNniSvlanSvlan=alaEServiceNniSvlanSvlan, alaEServiceSapUniUni=alaEServiceSapUniUni, alaEServiceUNIProfileTable=alaEServiceUNIProfileTable, alaEServiceInfoGroup=alaEServiceInfoGroup, alaEServiceUNIProfileStpBpduTreatment=alaEServiceUNIProfileStpBpduTreatment, alaEServiceSapCvlanMapType=alaEServiceSapCvlanMapType, alaEServiceUNIProfileMvrpTreatment=alaEServiceUNIProfileMvrpTreatment, alaEServiceSapUniEntry=alaEServiceSapUniEntry, alaEServiceSapCvlanRowStatus=alaEServiceSapCvlanRowStatus, alaEServiceMode=alaEServiceMode, alaEServiceSapProfileEntry=alaEServiceSapProfileEntry)
