#
# PySNMP MIB module Juniper-IP-POLICY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/Juniper-IP-POLICY-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 17:19:22 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, ModuleIdentity, NotificationType, ObjectIdentity, Gauge32, iso, Counter64, Counter32, TimeTicks, Unsigned32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Gauge32", "iso", "Counter64", "Counter32", "TimeTicks", "Unsigned32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
juniIpPolicyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13))
juniIpPolicyMIB.setRevisions(('2007-01-25 08:34', '2006-07-25 04:13', '2006-01-10 14:21', '2004-02-05 14:21', '2003-02-05 14:21', '2003-02-04 22:30', '2002-01-03 15:06', '2000-07-20 00:00', '1998-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniIpPolicyMIB.setRevisionsDescriptions(('Changed the length of octet string for juniIpAspAccessExpression to\n         vary from 1 to 256.', 'Changed the length of octet string for juniIpCommunityListExpression to\n         vary from 1 to 256.', 'Added two more protocols to JuniIpRedistributeProtocol.', 'Added Policy-List under juniIpRouteMapClauseElemId.', 'Added IP route maps config support.', 'Replaced Unisphere names with Juniper names.\n         Fixed the index for the juniIpDynRedistributeTable.', 'Expanded MIB to include following tables:\n                     JuniIpAspAccessListTable\n                     JuniIpPrefixListTable\n                     JuniIpPrefixTreeTable\n                     JuniIpCommunityListTable\n                     JuniIpExtCommunityListTable\n                     JuniIpRedistributeTable\n                     JuniIpRouteMapTable\n         Expanded MIB to include a new textual convention:\n                     JuniIpPolicyExtendedCommunity', 'Added Named Access List support.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: juniIpPolicyMIB.setLastUpdated('200701250824Z')
if mibBuilder.loadTexts: juniIpPolicyMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniIpPolicyMIB.setContactInfo('       Juniper Networks, Inc.\n        Postal: 10 Technology Park Drive\n                Westford, MA  01886-3146\n                USA\n        Tel:    +1 978 589 5800\n        Email:  mib@Juniper.net')
if mibBuilder.loadTexts: juniIpPolicyMIB.setDescription('The IP Policy MIB for the Juniper Networks enterprise.')
class JuniIpPolicyName(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set.  See SNMPv2-TC.DisplayString\n        DESCRIPTION for a summary.'
    description = 'IP access list name.  Represents textual information taken from the NVT\n        ASCII character set.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class JuniIpPolicyPolicy(TextualConvention, Integer32):
    description = 'The set of IP policy actions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permit", 0), ("deny", 1))

class JuniIpDynRedistributeProtocol(TextualConvention, Integer32):
    description = 'The set of protocols choices used to configure to/from settings in an\n        IP Dynamic Route Redistribution element.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("ipRedistrProtocolIsis", 1), ("ipRedistrProtocolRip", 2), ("ipRedistrProtocolOspf", 3), ("ipRedistrProtocolStatic", 4), ("ipRedistrProtocolConnected", 5), ("ipRedistrProtocolBgp", 6), ("ipRedistrProtocolMBgp", 7), ("ipRedistrProtocolStaticLow", 8), ("ipRedistrProtocolOspfIntern", 9), ("ipRedistrProtocolOspfExtern", 10), ("ipRedistrProtocolDvmrp", 11), ("ipRedistrProtocolDvmrpAggregate", 12), ("ipRedistrProtocolHidden", 13), ("ipRedistrProtocolOwnerAccess", 14), ("ipRedistrProtocolOwnerAccessInternal", 15), ("ipRedistrProtocolOwnerDialout", 16), ("ipRedistrProtocolDefaultRoute", 17))

class JuniIpRedistributeProtocol(TextualConvention, Integer32):
    description = 'The set of protocols choices used to configure to/from settings in an\n        IP Redistribution element.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("ipRedistrProtocolStatic", 1), ("ipRedistrProtocolBgp", 2), ("ipRedistrProtocolMBgp", 3), ("ipRedistrProtocolOspf", 4), ("ipRedistrProtocolIsis", 5), ("ipRedistrProtocolRip", 6), ("ipRedistrProtocolConnected", 7), ("ipRedistrProtocolDefaultRoute", 8), ("ipRedistrProtocolAccess", 9), ("ipRedistrProtocolAccessInternal", 10), ("ipRedistrProtocolDvmrp", 11), ("ipRedistrProtocolDialout", 12), ("ipRedistrProtocolOspfM", 13), ("ipRedistrProtocolStaticMcast", 14), ("ipRedistrProtocolLdpUcast", 15))

class JuniIpPolicyAdminStatus(TextualConvention, Integer32):
    description = 'The administratively assigned management state for an IP route policy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("ipPolicyAdminStateDisable", 0), ("ipPolicyAdminStateEnable", 1))

class JuniIpPolicyExtendedCommunity(TextualConvention, OctetString):
    reference = 'RFC 854: NVT ASCII character set.'
    description = 'The extended community specification.  Represents textual information\n        taken from the NVT ASCII character set.  The format of the text string\n        is defined by either one of these choices:\n\n         In:\n             ASN::nn          where ASN is a 16 bit decimal number and\n                              nn is a 32 bit decimal number\n\n         Or:\n             IP-address::nn   where IP-address is in dotted decimal format\n                              and nn is a 16 bit decimal number\n         '
    status = 'current'
    displayHint = '22a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 22)

juniIpPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1))
juniIpAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1))
juniIpNamedAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2))
juniIpAspAccessList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3))
juniIpPrefixList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4))
juniIpPrefixTree = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5))
juniIpCommunityList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6))
juniIpRedistributeList = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7))
juniIpRouteMapTree = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8))
juniIpAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1), )
if mibBuilder.loadTexts: juniIpAccessListTable.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListTable.setDescription("This table contains entries for elements of IP access lists.  Entries\n        belonging to the same access list are ordered, and comparisons to those\n        entries are performed in that order until a match is detected.  If no\n        match is found, the default action is to 'deny'.")
juniIpAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpAccessListId"), (0, "Juniper-IP-POLICY-MIB", "juniIpAccessListElemId"))
if mibBuilder.loadTexts: juniIpAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
juniIpAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: juniIpAccessListId.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListId.setDescription('The number of the access list to which this entry belongs.')
juniIpAccessListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpAccessListElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListElemId.setDescription('The relative position of this entry within its access list.  Access\n        list entries are searched in this sequence (low to high values) until a\n        match is found.\n\n        NOTE:  The value zero is reserved for use with SET operations to perform\n        special-purpose table entry creations/deletions; see the DESCRIPTION of\n        juniIpAccessListRowStatus for details.\n\n        Get/GetNext/GetBulk retrievals never return an entry for which this\n        object is zero-valued.')
juniIpAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        Two configuration levels are defined, limited and full.  EARLY\n        IMPLEMENTATIONS MIGHT PROVIDE ONLY THE LIMITED LEVEL OF CONFIGURATION\n        CAPABILITY.\n\n        *** LIMITED ACCESS LIST CONFIGURATION LEVEL ***\n\n         1) RowStatus createAndGo/destroy operations directed to a target table\n            entry for which juniIpAccessListElemId is ZERO, have the following\n            special-purpose semantics:\n                createAndGo     Create an entry having the specified\n                                configuration and append it to the target list,\n                                i.e. assign it a value of juniIpAccessListElemId\n                                that is one greater than the current last\n                                element in the list.\n                destroy         Destroy the specified list and all of its\n                                constituent elements.\n\n         2) RowStatus createAndGo/destroy operations directed to a target table\n            entry for which juniIpAccessListElemId is NONZERO are disallowed.\n\n        *** FULL ACCESS LIST CONFIGURATION LEVEL ***\n\n        Permit conventional RowStatus-based management of table entries having a\n        nonzero value for juniIpAccessListElemId, IN ADDITION TO the special\n        RowStatus semantics applied to entries having a zero value for\n        juniIpAccessListElemId.\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n                juniIpAccessListRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n                The value of juniIpAccessListElemId is nonzero.\n\n        Once created, element attributes cannot be modified except by a\n        RowStatus destroy operation to delete the list element.')
juniIpAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 4), JuniIpPolicyPolicy().clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListAction.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListAction.setDescription('Specifies the disposition of an item that matches the comparison\n        criteria described by this entry.')
juniIpAccessListSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListSrc.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListSrc.setDescription('A source IP address.  A subject IP address is first masked with the\n        value of juniIpAccessListSrcMask, then the result is compared to this\n        value.  Setting both this object and its corresponding mask to 0.0.0.0\n        acts as a wildcard, matching any source IP address.')
juniIpAccessListSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListSrcMask.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListSrcMask.setDescription('The IP address mask to be applied to a subject source IP address before\n        comparing it to juniIpAccessListSrc.  Ones in the mask identify which\n        bits in the subject IP address are significant for the comparison.\n\n        To be considered valid, a nonzero value for this object must contain a\n        single contiguous string of ones, beginning with the most significant\n        bit of the mask.')
juniIpAccessListDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListDst.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListDst.setDescription('A destination IP address.  A subject IP address is first masked with\n        the value of juniIpAccessListDstMask, then the result is compared to\n        this value.  Setting both this object and its corresponding mask to\n        0.0.0.0 acts as a wildcard, matching any destination IP address.')
juniIpAccessListDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListDstMask.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListDstMask.setDescription('The IP address mask to be applied to a subject destination IP address\n        before comparing it to juniIpAccessListDst.  Ones in the mask identify\n        which bits in the IP address are significant for the comparison.\n\n        To be considered valid, a nonzero value for this object must contain a\n        single contiguous string of ones, beginning with the most significant\n        bit of the mask.')
juniIpAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAccessListProtocol.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListProtocol.setDescription('An IP Protocol value.  Nonzero values match a specific IP Protocol\n        value (e.g. 6 for TCP) carried in an IP packet; a value of zero acts as\n        a wildcard, matching any IP Protocol.')
juniIpNamedAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1), )
if mibBuilder.loadTexts: juniIpNamedAccessListTable.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListTable.setDescription("This table contains entries for elements of IP access lists.  Entries\n        belonging to the same access list are ordered, and comparisons to those\n        entries are performed in that order until a match is detected.  If no\n        match is found, the default action is to 'deny'.")
juniIpNamedAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpNamedAccessListName"), (0, "Juniper-IP-POLICY-MIB", "juniIpNamedAccessListElemId"))
if mibBuilder.loadTexts: juniIpNamedAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListEntry.setDescription('Each entry describes the characteristics of an IP access list element.')
juniIpNamedAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpNamedAccessListName.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListName.setDescription('The name of the access list to which this entry belongs.')
juniIpNamedAccessListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpNamedAccessListElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListElemId.setDescription('The relative position of this entry within its access list.  Access\n        list entries are searched in this sequence (low to high values) until a\n        match is found.\n\n        NOTE:  The value zero is reserved for use with SET operations to perform\n        special-purpose table entry creations/deletions; see the DESCRIPTION of\n        juniIpNamedAccessListRowStatus for details.\n\n        Get/GetNext/GetBulk retrievals never return an entry for which this\n        object is zero-valued.')
juniIpNamedAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        Two configuration levels are defined, limited and full.  EARLY\n        IMPLEMENTATIONS MIGHT PROVIDE ONLY THE LIMITED LEVEL OF CONFIGURATION\n        CAPABILITY.\n\n        *** LIMITED ACCESS LIST CONFIGURATION LEVEL ***\n\n         1) RowStatus createAndGo/destroy operations directed to a target table\n            entry for which juniIpNamedAccessListElemId is ZERO, have the\n            following special-purpose semantics:\n                createAndGo     Create an entry having the specified\n                                configuration and append it to the target list,\n                                i.e. assign it a value of\n                                juniIpNamedAccessListElemId that is one greater\n                                than the current last element in the list.\n                destroy         Destroy the specified list and all of its\n                                constituent elements.\n\n         2) RowStatus createAndGo/destroy operations directed to a target table\n            entry for which juniIpNamedAccessListElemId is NONZERO are\n            disallowed.\n\n        *** FULL ACCESS LIST CONFIGURATION LEVEL ***\n\n        Permit conventional RowStatus-based management of table entries having a\n        nonzero value for juniIpNamedAccessListElemId, IN ADDITION TO the\n        special RowStatus semantics applied to entries having a zero value for\n        juniIpNamedAccessListElemId.\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n                juniIpNamedAccessListRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n                The value of juniIpNamedAccessListElemId is nonzero.\n\n        Once created, element attributes cannot be modified except by a\n        RowStatus destroy operation to delete the list element.')
juniIpNamedAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 4), JuniIpPolicyPolicy().clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListAction.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListAction.setDescription('Specifies the disposition of an item that matches the comparison\n        criteria described by this entry.')
juniIpNamedAccessListSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListSrc.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListSrc.setDescription('A source IP address.  A subject IP address is first masked with the\n        value of juniIpNamedAccessListSrcMask, then the result is compared to\n        this value.  Setting both this object and its corresponding mask to\n        0.0.0.0 acts as a wildcard, matching any source IP address.')
juniIpNamedAccessListSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListSrcMask.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListSrcMask.setDescription('The IP address mask to be applied to a subject source IP address before\n        comparing it to juniIpNamedAccessListSrc.  Ones in the mask identify\n        which bits in the subject IP address are significant for the comparison.\n\n        To be considered valid, a nonzero value for this object must contain a\n        single contiguous string of ones, beginning with the most significant\n        bit of the mask.')
juniIpNamedAccessListDst = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListDst.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListDst.setDescription('A destination IP address.  A subject IP address is first masked with\n        the value of juniIpNamedAccessListDstMask, then the result is compared\n        to this value.  Setting both this object and its corresponding mask to\n        0.0.0.0 acts as a wildcard, matching any destination IP address.')
juniIpNamedAccessListDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListDstMask.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListDstMask.setDescription('The IP address mask to be applied to a subject destination IP address\n        before comparing it to juniIpNamedAccessListDst.  Ones in the mask\n        identify which bits in the IP address are significant for the\n        comparison.\n\n        To be considered valid, a nonzero value for this object must contain a\n        single contiguous string of ones, beginning with the most significant\n        bit of the mask.')
juniIpNamedAccessListProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpNamedAccessListProtocol.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListProtocol.setDescription('An IP Protocol value.  Nonzero values match a specific IP Protocol\n        value (e.g. 6 for TCP) carried in an IP packet; a value of zero acts as\n        a wildcard, matching any IP Protocol.')
juniIpAspAccessTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1), )
if mibBuilder.loadTexts: juniIpAspAccessTable.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessTable.setDescription('This table contains entries for elements of IP AS-Path access entries.')
juniIpAspAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpAspAccessName"), (0, "Juniper-IP-POLICY-MIB", "juniIpAspAccessElemId"))
if mibBuilder.loadTexts: juniIpAspAccessEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessEntry.setDescription('Each entry describes the characteristics of an IP AS-Path access\n        element.')
juniIpAspAccessName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpAspAccessName.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessName.setDescription('The name of the AS-Path Access List to which this entry belongs.')
juniIpAspAccessElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpAspAccessElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessElemId.setDescription('The element ID portion of the IP AS-Path for this entry.')
juniIpAspAccessCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpAspAccessCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or\n        dynamically via a management interface.  A true value for this object\n        indicates that this entry was created internally; false indicates\n        externally.')
juniIpAspAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 4), JuniIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAspAccessPolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessPolicy.setDescription('Indicates the action to take for this AS-Path access list.')
juniIpAspAccessExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAspAccessExpression.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessExpression.setDescription('The AS-Path access list expression for this entry.')
juniIpAspAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 3, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpAspAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpCommunityRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n            Once created, only certain attributes can be modified.')
juniIpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1), )
if mibBuilder.loadTexts: juniIpPrefixListTable.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListTable.setDescription("This table contains entries for elements of IP prefix lists.  Entries\n        belonging to the same prefix list are ordered, and comparisons to those\n        entries are performed in that order until a match is detected.  If no\n        match is found, the default action is to 'deny'.")
juniIpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpPrefixListName"), (0, "Juniper-IP-POLICY-MIB", "juniIpPrefixListElemId"), (0, "Juniper-IP-POLICY-MIB", "juniIpPrefixListIpAddress"), (0, "Juniper-IP-POLICY-MIB", "juniIpPrefixListLength"))
if mibBuilder.loadTexts: juniIpPrefixListEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListEntry.setDescription('Each entry describes the characteristics of an IP prefix list element.')
juniIpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpPrefixListName.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListName.setDescription('The name of the prefix list to which this entry belongs.')
juniIpPrefixListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpPrefixListElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListElemId.setDescription('The relative position of this entry within its prefix list.  Access\n        list entries are searched in this sequence (low to high values) until a\n        match is found.')
juniIpPrefixListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: juniIpPrefixListIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListIpAddress.setDescription('The IP Address portion of the IP List value for this entry.')
juniIpPrefixListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: juniIpPrefixListLength.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListLength.setDescription('The length portion of the IP List value for this entry.')
juniIpPrefixListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 5), JuniIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixListPolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListPolicy.setDescription('The IP Prefix list action to perform for this entry.')
juniIpPrefixListGeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixListGeValue.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListGeValue.setDescription('The minimum prefix length to apply to address.')
juniIpPrefixListLeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixListLeValue.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListLeValue.setDescription('The maximum prefix length to apply to address.')
juniIpPrefixListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixListDescription.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListDescription.setDescription('The administratively assigned description for this entry.')
juniIpPrefixListHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpPrefixListHitCount.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListHitCount.setDescription('The number of hits for this entry.')
juniIpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n\n            juniIpPrefixListRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n            The value of juniIpPrefixListElemId is nonzero.\n\n        Once created, only certain attributes can be modified.')
juniIpPrefixTreeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1), )
if mibBuilder.loadTexts: juniIpPrefixTreeTable.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeTable.setDescription("This table contains entries for elements of IP prefix trees.  Entries\n        belonging to the same prefix tree are ordered, and comparisons to those\n        entries are performed in that order until a match is detected.  If no\n        match is found, the default action is to 'deny'.")
juniIpPrefixTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpPrefixTreeName"), (0, "Juniper-IP-POLICY-MIB", "juniIpPrefixTreeIpAddress"), (0, "Juniper-IP-POLICY-MIB", "juniIpPrefixTreeLength"))
if mibBuilder.loadTexts: juniIpPrefixTreeEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeEntry.setDescription('Each entry describes the characteristics of an IP prefix tree element.')
juniIpPrefixTreeName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpPrefixTreeName.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeName.setDescription('The name of the prefix tree to which this entry belongs.')
juniIpPrefixTreeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: juniIpPrefixTreeIpAddress.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeIpAddress.setDescription('The IP Address portion of the IP Prefix value for this entry.')
juniIpPrefixTreeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: juniIpPrefixTreeLength.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeLength.setDescription('The length portion of the IP Prefix value for this entry.')
juniIpPrefixTreePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 4), JuniIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixTreePolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreePolicy.setDescription('The IP Prefix tree policy perform for this entry.')
juniIpPrefixTreeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixTreeDescription.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeDescription.setDescription('The administratively assigned description for this entry.')
juniIpPrefixTreeHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpPrefixTreeHitCount.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeHitCount.setDescription('The number of hits for this entry.')
juniIpPrefixTreeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpPrefixTreeRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpPrefixTreeRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n            The value of juniIpPrefixTreeIpAddress and juniIpPrefixTreeLength\n            are nonzero.\n\n        Once created, only certain attributes can be modified.')
juniIpCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1), )
if mibBuilder.loadTexts: juniIpCommunityListTable.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListTable.setDescription('This table contains entries for elements of IP Community Lists.\n        Entries belonging to the same Community List are ordered.  The table\n        supports standard and extended community lists.')
juniIpCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpCommunityListName"), (0, "Juniper-IP-POLICY-MIB", "juniIpCommunityListElemId"))
if mibBuilder.loadTexts: juniIpCommunityListEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListEntry.setDescription('Each entry describes the characteristics of an IP Community List\n        element.')
juniIpCommunityListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpCommunityListName.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListName.setDescription('The name of the Community List to which this entry belongs.')
juniIpCommunityListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpCommunityListElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListElemId.setDescription('The IP Address portion of the IP Prefix value for this entry.')
juniIpCommunityListCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpCommunityListCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or\n        dynamically via a management interface.  A true value for this object\n        indicates that this entry was created internally; false indicates\n        externally.')
juniIpCommunityListExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpCommunityListExtended.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListExtended.setDescription('Indicates whether this entry is a standard or extended Community List.\n        True indicates extended, false indicates standard')
juniIpCommunityListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 5), JuniIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpCommunityListPolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListPolicy.setDescription('Indicates the policy action to perform for this list.')
juniIpCommunityListExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpCommunityListExpression.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListExpression.setDescription('The community list expression for this entry.')
juniIpCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpCommunityListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpCommunityRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n            Once created, only certain attributes can be modified.')
juniIpExtCommunityListTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2), )
if mibBuilder.loadTexts: juniIpExtCommunityListTable.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListTable.setDescription('This table contains entries for Extended IP Community Lists.  Entries\n        belonging to the same Extended Community List are ordered.')
juniIpExtCommunityListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpExtCommunityListName"), (0, "Juniper-IP-POLICY-MIB", "juniIpExtCommunityListElemId"))
if mibBuilder.loadTexts: juniIpExtCommunityListEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListEntry.setDescription('Each entry describes the characteristics of an Extended IP Community\n        List element.')
juniIpExtCommunityListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpExtCommunityListName.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListName.setDescription('The name of the Extended Community List to which this entry belongs.')
juniIpExtCommunityListElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)))
if mibBuilder.loadTexts: juniIpExtCommunityListElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListElemId.setDescription('The element ID value for this entry.')
juniIpExtCommunityListCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpExtCommunityListCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or\n        dynamically via a management interface.  A true value for this object\n        indicates that this entry was created internally; false indicates\n        externally.')
juniIpExtCommunityListPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 4), JuniIpPolicyPolicy()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpExtCommunityListPolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListPolicy.setDescription('Indicates the policy action to perform for this list.')
juniIpExtCommunityListExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpExtCommunityListExpression.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListExpression.setDescription('The extended community list expression for this entry.')
juniIpExtCommunityListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 6, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpExtCommunityListRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpExtCommunityRowStatus\n\n        In addition, when creating an entry the following conditions must hold:\n\n            The value of juniIpExtCommunityListElemId is included in this table\n            as a key for future use.  It must be the value zero.\n\n        Once created, only certain attributes can be modified.')
juniIpDynRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1), )
if mibBuilder.loadTexts: juniIpDynRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: juniIpDynRedistributeTable.setDescription('This table contains entries for elements of IP Dynamic Route\n        Redistribution elements.')
juniIpDynRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpDynRedistributeToProtocol"))
if mibBuilder.loadTexts: juniIpDynRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpDynRedistributeEntry.setDescription('Each entry describes the characteristics of a dynamic IP Route\n        Redistribute element.')
juniIpDynRedistributeToProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 1), JuniIpDynRedistributeProtocol())
if mibBuilder.loadTexts: juniIpDynRedistributeToProtocol.setStatus('current')
if mibBuilder.loadTexts: juniIpDynRedistributeToProtocol.setDescription('Identifies the protocol associated with this Dynamic Route\n        Redistribution element that routes are redistributed to.')
juniIpDynRedistributeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 2), JuniIpPolicyAdminStatus().clone('ipPolicyAdminStateEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpDynRedistributeState.setStatus('current')
if mibBuilder.loadTexts: juniIpDynRedistributeState.setDescription('Indicates the enable/disable state of this redistribution element.')
juniIpDynRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpDynRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpDynRedistributeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpDynRedistributeRowStatus\n\n        Once created, only the juniIpDynRedistributeState object can be\n        modified.')
juniIpRedistributeTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2), )
if mibBuilder.loadTexts: juniIpRedistributeTable.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeTable.setDescription('This table contains entries for elements of IP Route Redistribution\n        elements.')
juniIpRedistributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpRedistributeToProtocol"), (0, "Juniper-IP-POLICY-MIB", "juniIpRedistributeFromProtocol"))
if mibBuilder.loadTexts: juniIpRedistributeEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeEntry.setDescription('Each entry describes the characteristics of an IP Route Redistribution\n        element.')
juniIpRedistributeToProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 1), JuniIpRedistributeProtocol())
if mibBuilder.loadTexts: juniIpRedistributeToProtocol.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeToProtocol.setDescription('Identifies the protocol for this element that routes are redistributed\n        to.')
juniIpRedistributeFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 2), JuniIpRedistributeProtocol())
if mibBuilder.loadTexts: juniIpRedistributeFromProtocol.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeFromProtocol.setDescription('Identifies the protocol for this element that routes are redistributed\n        from.')
juniIpRedistributeState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 3), JuniIpPolicyAdminStatus().clone('ipPolicyAdminStateEnable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRedistributeState.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeState.setDescription('Indicates the enable/disable state of this redistribution element.')
juniIpRedistributeRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 4), JuniIpPolicyName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRedistributeRouteMapName.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeRouteMapName.setDescription('Identifies the IP route-map associated with this IP Route\n        Redistribution element.')
juniIpRedistributeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 7, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRedistributeRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeRowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpRedistributeRowStatus\n            juniIpRedistributeRouteMapName\n\n        Once created, only the juniIpRedistributeState object can be modified.')
juniIpRouteMapTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1), )
if mibBuilder.loadTexts: juniIpRouteMapTable.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapTable.setDescription('This table contains entries for elements of IP Route Maps.')
juniIpRouteMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapName"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapSequenceNum"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapElemId"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapSubElemId"))
if mibBuilder.loadTexts: juniIpRouteMapEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapEntry.setDescription('Each entry describes the characteristics of an IP Route Map element.')
juniIpRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpRouteMapName.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapName.setDescription('The name of the route map to which this entry belongs.')
juniIpRouteMapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: juniIpRouteMapSequenceNum.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapSequenceNum.setDescription('The element ID value for this entry.')
juniIpRouteMapElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: juniIpRouteMapElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapElemId.setDescription('The element ID to which this entry belongs.')
juniIpRouteMapSubElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: juniIpRouteMapSubElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapSubElemId.setDescription('The sub-element ID to which this entry belongs.')
juniIpRouteMapCreatedInternally = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpRouteMapCreatedInternally.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapCreatedInternally.setDescription('Indicated whether this entry was created internally by the system, or\n        dynamically via a management interface.  A true value for this object\n        indicates that this entry was created internally; false indicates\n        externally.')
juniIpRouteMapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 6), JuniIpPolicyPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpRouteMapPolicy.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapPolicy.setDescription('Indicates the policy action performed by this element.')
juniIpRouteMapDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniIpRouteMapDisplay.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapDisplay.setDescription('Textual information taken from the NVT ASCII character set\n        (i.e. RFC1903 DisplayString), but with increased length.  The\n        information in this object is the series of set, match, and/or match &\n        set clauses for this route map.\n\n        It is assumed that the information conveyed in this object is used for\n        display purposes and in general, is not parsed.  The information in this\n        string is a concatentation of routemap clauses configured via the\n        systems non SNMP interface.')
juniIpRouteMapV2Table = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2), )
if mibBuilder.loadTexts: juniIpRouteMapV2Table.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2Table.setDescription('This table contains entries for route maps instances.')
juniIpRouteMapV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapV2Name"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapV2SequenceNum"))
if mibBuilder.loadTexts: juniIpRouteMapV2Entry.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2Entry.setDescription('Each entry is a specific instance of the Route Map.')
juniIpRouteMapV2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2, 1, 1), JuniIpPolicyName())
if mibBuilder.loadTexts: juniIpRouteMapV2Name.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2Name.setDescription('The name of the route map to which this instance entry belongs.')
juniIpRouteMapV2SequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: juniIpRouteMapV2SequenceNum.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2SequenceNum.setDescription('Multiple instances of the same route map can be created by assigning a\n        different sequence number to it.  Each instance is identified by the\n        route map name and the sequence number.  The value of the sequence\n        number associated with the particular route map instance determines the\n        order in which the routing protocol evaluates routes; the instance of\n        having lowest sequence number is evaluated first.  If the routes pass\n        all the match conditions specified in the lowest-numbered instance, and\n        if all set clause elements are successfully configured, then no other\n        instance of the route map is considered.  However, any routes that do\n        not pass all the match conditions are evaluated against the next\n        instance of the route map.')
juniIpRouteMapV2Policy = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2, 1, 3), JuniIpPolicyPolicy().clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRouteMapV2Policy.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2Policy.setDescription('Indicates the policy action performed by this route map instance.')
juniIpRouteMapV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRouteMapV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapV2RowStatus.setDescription('Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpRouteMapV2RowStatus\n\n        To delete an entry in this table, the following entry objects MUST be\n        explicitly configured:\n            juniIpRouteMapV2RowStatus\n\n        Once created, juniIpRouteMapV2Policy attribute can be modified.\n        To modify juniIpRouteMapV2Policy, set juniIpRouteMapV2RowStatus also.\n\n        Note: Match, match-set and set clause elements can be configured for a\n              specific instance of the route map.  First create the route map\n              instance to make use of the same to configure in the clause table.\n              Deletion of the route map instance will also delete all the clause\n              elements confgured for that instance as clause elements are\n              configured for that instance.')
juniIpRouteMapClauseTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3), )
if mibBuilder.loadTexts: juniIpRouteMapClauseTable.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseTable.setDescription('This table contains entries for instances of the route map clause\n        elements.')
juniIpRouteMapClauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1), ).setIndexNames((0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapV2Name"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapV2SequenceNum"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapClauseElemId"), (0, "Juniper-IP-POLICY-MIB", "juniIpRouteMapClauseSubElemId"))
if mibBuilder.loadTexts: juniIpRouteMapClauseEntry.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseEntry.setDescription('Each entry describes the characteristics of one route map clause\n        element instance.')
juniIpRouteMapClauseElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 220, 221, 222, 300))).clone(namedValues=NamedValues(("matchNotKnown", 0), ("matchAsPath", 1), ("matchCommunity", 2), ("matchExtendedCommunity", 3), ("matchDistance", 4), ("matchAccessList", 5), ("matchNextHop", 6), ("matchPrefixList", 7), ("matchNextHopPreList", 8), ("matchPrefixTree", 9), ("matchNextHopPreTree", 10), ("matchLevel", 11), ("matchMetric", 12), ("matchMetricType", 13), ("matchTag", 14), ("matchRouteType", 15), ("matchSource", 16), ("matchPolicyList", 17), ("setAsPath", 100), ("setAsPathCreateList", 101), ("setAutoTag", 102), ("setCommList", 103), ("setCommunityNone", 104), ("setCommunityAdd", 105), ("setCommunity", 106), ("setCommunityCreateListAdd", 107), ("setCommunityCreateList", 108), ("setExtendedCommunityCreateAdd", 109), ("setExtendedCommunityCreate", 110), ("setNextHop", 111), ("setNextHopPeerAddr", 112), ("setLocalPref", 113), ("setWeight", 114), ("setLevel", 115), ("setMetric", 116), ("setMetricType", 117), ("setTag", 118), ("setOrigin", 119), ("setRouteType", 220), ("setDampingCreate", 221), ("setDistance", 222), ("matchSetSummary", 300))))
if mibBuilder.loadTexts: juniIpRouteMapClauseElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseElemId.setDescription("The clause element selection option.  Select the appropriate element\n        option to configure each element instance of match, match-set and set\n        clauses.  For the complete configuration map table refer to the\n        juniIpRouteMapClauseRowStatus object's DESCRIPTION.")
juniIpRouteMapClauseSubElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: juniIpRouteMapClauseSubElemId.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseSubElemId.setDescription('The clause element sub ID used to distinguish specific instance of the\n        element.  This value is determined by choosing the next available by\n        walking the table.')
juniIpRouteMapClauseElemIdAddon = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 0), ("exact", 1), ("delete", 2), ("relativeNeg", 3), ("relativePos", 4), ("extCommRt", 5), ("extCommSoo", 6), ("interfaceValue", 7), ("ipAddress", 8))).clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRouteMapClauseElemIdAddon.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseElemIdAddon.setDescription("This represents clause element instance add-on option selected along\n        with the main option (juniIpRouteMapClauseElemId) whenever it applies.\n        For more information on how to map this object value to each value,\n        refer to the mapping table in the juniIpRouteMapClauseRowStatus object's\n        DESCRIPTION.")
juniIpRouteMapClauseElementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRouteMapClauseElementValue.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseElementValue.setDescription("This represents set, match-set and match clauses' different element\n        instance values in character string form.  Whatever may be the data type\n        of the attribute element instance value, it is always interpreted as a\n        set of characters for both configuration and display purposes.  It is up\n        to the user to know the element's data type mapping in order to input\n        the correct value while configuring.  Refer to the mapping table in the\n        juniIpRouteMapClauseRowStatus object descrption for detailed\n        information.")
juniIpRouteMapClauseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 1, 8, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: juniIpRouteMapClauseRowStatus.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapClauseRowStatus.setDescription("Controls creation/deletion of entries in this table according to the\n        RowStatus textual convention, constrained to support the following\n        values only:\n            createAndGo\n            destroy\n\n        To create/delete an entry in this table, the following entry objects\n        MUST be explicitly configured:\n            juniIpRouteMapClauseElementValue\n            juniIpRouteMapClauseRowStatus\n\n        Additional object juniIpRouteMapClauseElemIdAddon may become OPTIONAL\n        for some elements creation/deletion along with the above.  Refer the\n        mapping table below to determine which elements are required.\n\n        The table entry elements may not be modified.  Only create and delete\n        are allowed.\n\n        Note#1: Make sure route map(s) are created before configuring their\n                corresponding clause elements.\n        Note#2: The mapping table below is the extensive guide for the options,\n                values and ranges of the table objects\n                juniIpRouteMapClauseElemId, juniIpRouteMapClauseElemIdAddon and\n                juniIpRouteMapClauseElementValue.\n\n                Clause element configuration selection mapping table\n                ====================================================\n        ClauseElemId               ClauseElemIdAddon ClauseElementValue\n        ============               ================= ==================\n\n        matchAsPath                notApplicable     DisplayString (SIZE(1..32))\n        matchCommunity             exact/            DisplayString (SIZE(1..32))\n                                   notApplicable\n        matchExtendedCommunity     exact/            DisplayString (SIZE(1..32))\n                                   notApplicable\n\n        Note#3: At a given time only one can be configured for access list and\n                prefix-list/trees'.\n        matchAccessList            notApplicable     DisplayString (SIZE(1..32))\n        matchPrefixList            notApplicable     DisplayString (SIZE(1..32))\n        matchPrefixTree            notApplicable     DisplayString (SIZE(1..32))\n        matchNextHop               notApplicable     DisplayString (SIZE(1..32))\n        matchNextHopPreList        notApplicable     DisplayString (SIZE(1..32))\n        matchNextHopPreTree        notApplicable     DisplayString (SIZE(1..32))\n\n        Note#4: For matchLevel, matchMetricType and matchRouteType element\n                selection choose the exact case-sensitive string to set the\n                option.\n                Example: For matchLevel, option levelOne, levelOneAndTwo, etc.\n                         can be set.\n        matchLevel                 notApplicable     { levelOne,\n                                                       levelOneAndTwo,\n                                                       levelTwo,\n                                                       backbone,\n                                                       stubArea }\n        matchMetricType            notApplicable     { internal or typeOne,\n                                                       external or typeTwo }\n        matchRouteType             notApplicable     { external,\n                                                       internal,\n                                                       internalInter,\n                                                       internalIntra }\n\n        matchDistance              notApplicable     Integer32 (0..255)\n        matchMetric                notApplicable     Unsigned32\n        matchTag                   notApplicable     Unsigned32\n        matchPolicyList            notApplicable     DisplayString (SIZE(1..32))\n\n        setAsPath                  notApplicable     DisplayString (SIZE(1..32))\n        setCommunityAdd            notApplicable     DisplayString (SIZE(1..32))\n        setCommList                delete/           DisplayString (SIZE(1..32))\n                                   notApplicable\n        setCommunity               notApplicable     DisplayString (SIZE(1..32))\n\n        Note#5: For below elements selection choose the exact case-sensitive\n                string to set the option.\n                Example: For setOrigin, egp or igp or incomplete will be the\n                         valid options to select.\n        setAutoTag                 notApplicable     { autoTag }\n        setCommunityNone           notApplicable     { communityNone }\n\n        Note#6: setCommunityCreateList and setCommunityCreateListAdd will have\n                only one instance and all will be set in one instance of the\n                element (either setCommunityCreateList or\n                setCommunityCreateListAdd), i.e., all options and values will\n                aggregate in one SubElementId.\n        setCommunityCreateList     notApplicable     Unsigned32\n        setCommunityCreateListAdd  notApplicable     Unsigned32\n        setCommunityCreateList     notApplicable     { none,\n                                                       localAs,\n                                                       noAdvertise,\n                                                       noExport }\n        setCommunityCreateListAdd  notApplicable     { none,\n                                                       localAs,\n                                                       noAdvertise,\n                                                       noExport }\n\n        setLevel                  notApplicable      { backbone,\n                                                       levelOne,\n                                                       levelOneAndTwo,\n                                                       levelTwo,\n                                                       stubArea }\n        setRouteType              notApplicable      { external,\n                                                       internal,\n                                                       internalInter,\n                                                       internalIntra }\n        setNextHopPeerAddr        notApplicable      { peerAddress }\n        setMetricType             notApplicable      { external,\n                                                       internal }\n        setOrigin                 notApplicable      { egp,\n                                                       igp,\n                                                       incomplete }\n\n        setAsPathCreateList       notApplicable      Interger32 (1..65535)\n        setTag                    notApplicable      Unsigned32\n        setWeight                 notApplicable      Unsigned32\n        setDistance               notApplicable      Interger32 (1..255)\n        setLocalPref              notApplicable      Unsigned32\n        setMetric                 relativeNeg/       Unsigned32\n                                  relativePos/\n                                  notApplicable\n\n        Note#7: setExtendedCommunityCreate and setExtendedCommunityCreateAdd\n                will have only one instance and all will be set in one instance\n                of the element (either setExtendedCommunityCreate or\n                setExtendedCommunityCreateAdd) i.e. all options and values will\n                aggregate in one SubElementId.\n        setExtendedCommunityCreate extCommRt/        IPADDRESS:Unsigned32 or\n                                   notApplicable     IPADDRESS-in-ASN:Unsigned32\n        setExtendedCommunityCreate extCommSoo/       IPADDRESS:Unsigned32 or\n                                   notApplicable     IPADDRESS-in-ASN:Unsigned32\n        setExtendedCommunityCreateAdd extCommRt/     IPADDRESS:Unsigned32 or\n                                      notApplicable  IPADDRESS-in-ASN:Unsigned32\n        setExtendedCommunityCreateAdd extCommSoo/    IPADDRESS:Unsigned32\n                                      notApplicable  IPADDRESS-in-ASN:Unsigned32\n\n        Note#8: Damping element has only one instance at any given time.  It can\n                be deleted by just refering to the instance (elementID and\n                subElementId) without refering the exact value; i.e., while\n                deleting, values doesn't matter.\n        setDampingCreate          notApplicable\n                                 1. HalfLifeiTime-Interger32 (1..45)\n                                 2. RtSuppressTime-Interger32 (1..20000)\n                                 3. SuppressedRtReuseTime-Interger32 (1..20000)\n                                 4. MaxRtSuppressTime-Interger32 (1..255)\n                                 5. UnreachableRtHalfLifeTime-Interger32 (1..45)\n        Note#9: 1, 2, 3 and 4 values are MUST values to be specified (in\n                minutes) for route flap damping and 5th one is optional.  Format\n                for specifying the values are very rigid and strict.  Always\n                specify four MUST values.  The first value shouldn't be preceded\n                with space characters and last the value always should be\n                followed with one space character.  From first value to till\n                last value, all the values will be separated from each other by\n                one space character.\n\n        setNextHop                interfaceValue/    Unsigned32\n                                  notApplicable\n        setNextHop                ipAddress/         IPADDRESS\n                                  notApplicable ")
juniIpPolicyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4))
juniIpPolicyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1))
juniIpPolicyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2))
juniIpPolicyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 1)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAccessListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPolicyCompliance = juniIpPolicyCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpPolicyCompliance.setDescription('An obsolete compliance statement for entities that implement the\n        Juniper IP Policy MIB.  This statement became obsolete when support was\n        added for the IP Named Access List.')
juniIpPolicyCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 2)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPolicyCompliance2 = juniIpPolicyCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpPolicyCompliance2.setDescription('An obsolete compliance statement for entities that implement the\n        Juniper IP Policy MIB.  This statement became obsolete when support was\n        added for the IP ASP Access List, the IP Prefix List, the IP Prefix\n        Tree, the IP Community List, the IP Extended Community List, IP Dynamic\n        Route Redistribution, and the IP Route Map.')
juniIpPolicyCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 3)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpAspAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixTreeGroup"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpRedistributeGroup"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPolicyCompliance3 = juniIpPolicyCompliance3.setStatus('current')
if mibBuilder.loadTexts: juniIpPolicyCompliance3.setDescription('An obsolete compliance statement for entities that implement the\n        Juniper IP Policy MIB.  This statement became obsolete when support was\n        added for the IP Route Map configurations.')
juniIpPolicyCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 1, 4)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpAspAccessListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixTreeGroup"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListGroup"), ("Juniper-IP-POLICY-MIB", "juniIpRedistributeGroup"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPolicyCompliance4 = juniIpPolicyCompliance4.setStatus('current')
if mibBuilder.loadTexts: juniIpPolicyCompliance4.setDescription('The compliance statement for entities that implement the Juniper IP\n        Policy MIB.')
juniIpAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 1)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAccessListRowStatus"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListAction"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListSrc"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListSrcMask"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListDst"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListDstMask"), ("Juniper-IP-POLICY-MIB", "juniIpAccessListProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpAccessListGroup = juniIpAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpAccessListGroup.setDescription('A collection of objects for managing IP access list capabilities in a\n        Juniper product.')
juniIpNamedAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 2)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListRowStatus"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListAction"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListSrc"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListSrcMask"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListDst"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListDstMask"), ("Juniper-IP-POLICY-MIB", "juniIpNamedAccessListProtocol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpNamedAccessListGroup = juniIpNamedAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpNamedAccessListGroup.setDescription('A named collection of objects for managing IP access list capabilities\n        in a Juniper product.')
juniIpAspAccessListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 3)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpAspAccessCreatedInternally"), ("Juniper-IP-POLICY-MIB", "juniIpAspAccessPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpAspAccessExpression"), ("Juniper-IP-POLICY-MIB", "juniIpAspAccessRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpAspAccessListGroup = juniIpAspAccessListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpAspAccessListGroup.setDescription('A named collection of objects for managing AS-Path access list\n        capabilities in a Juniper product.')
juniIpPrefixListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 4)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpPrefixListPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListGeValue"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListLeValue"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListDescription"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListHitCount"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPrefixListGroup = juniIpPrefixListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixListGroup.setDescription('A named collection of objects for managing Prefix list capabilities in\n        a Juniper product.')
juniIpPrefixTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 5)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpPrefixTreePolicy"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixTreeDescription"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixTreeHitCount"), ("Juniper-IP-POLICY-MIB", "juniIpPrefixTreeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpPrefixTreeGroup = juniIpPrefixTreeGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpPrefixTreeGroup.setDescription('A named collection of objects for managing Prefix Tree capabilities in\n        a Juniper product.')
juniIpCommunityListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 6)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpCommunityListCreatedInternally"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListExtended"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListExpression"), ("Juniper-IP-POLICY-MIB", "juniIpCommunityListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpCommunityListGroup = juniIpCommunityListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpCommunityListGroup.setDescription('A named collection of objects for managing Community List capabilities\n        in a Juniper product.')
juniIpExtCommunityListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 7)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListCreatedInternally"), ("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListExpression"), ("Juniper-IP-POLICY-MIB", "juniIpExtCommunityListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpExtCommunityListGroup = juniIpExtCommunityListGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpExtCommunityListGroup.setDescription('A named collection of objects for managing Extended Community List\n        capabilities in a Juniper product.')
juniIpRedistributeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 8)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpDynRedistributeState"), ("Juniper-IP-POLICY-MIB", "juniIpDynRedistributeRowStatus"), ("Juniper-IP-POLICY-MIB", "juniIpRedistributeState"), ("Juniper-IP-POLICY-MIB", "juniIpRedistributeRouteMapName"), ("Juniper-IP-POLICY-MIB", "juniIpRedistributeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpRedistributeGroup = juniIpRedistributeGroup.setStatus('current')
if mibBuilder.loadTexts: juniIpRedistributeGroup.setDescription('A collection of objects for managing IP route redistribution list\n        capabilities in a Juniper product.')
juniIpRouteMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 9)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpRouteMapCreatedInternally"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpRouteMapGroup = juniIpRouteMapGroup.setStatus('obsolete')
if mibBuilder.loadTexts: juniIpRouteMapGroup.setDescription('A collection of objects for managing IP route map list capabilities in\n        a Juniper product.')
juniIpRouteMapGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 13, 4, 2, 10)).setObjects(("Juniper-IP-POLICY-MIB", "juniIpRouteMapCreatedInternally"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapPolicy"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapDisplay"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapV2Policy"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapV2RowStatus"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapClauseElemIdAddon"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapClauseElementValue"), ("Juniper-IP-POLICY-MIB", "juniIpRouteMapClauseRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniIpRouteMapGroup2 = juniIpRouteMapGroup2.setStatus('current')
if mibBuilder.loadTexts: juniIpRouteMapGroup2.setDescription('A collection of objects for managing IP route map list capabilities in\n        a Juniper product.')
mibBuilder.exportSymbols("Juniper-IP-POLICY-MIB", juniIpPolicyCompliance2=juniIpPolicyCompliance2, juniIpNamedAccessListSrcMask=juniIpNamedAccessListSrcMask, juniIpPolicyCompliance3=juniIpPolicyCompliance3, JuniIpDynRedistributeProtocol=JuniIpDynRedistributeProtocol, juniIpPolicyCompliance4=juniIpPolicyCompliance4, juniIpPolicyMIB=juniIpPolicyMIB, juniIpNamedAccessListDst=juniIpNamedAccessListDst, juniIpAspAccessEntry=juniIpAspAccessEntry, juniIpRouteMapEntry=juniIpRouteMapEntry, juniIpNamedAccessListName=juniIpNamedAccessListName, juniIpPrefixTreePolicy=juniIpPrefixTreePolicy, JuniIpPolicyExtendedCommunity=JuniIpPolicyExtendedCommunity, juniIpExtCommunityListRowStatus=juniIpExtCommunityListRowStatus, juniIpPolicyCompliance=juniIpPolicyCompliance, juniIpRouteMapGroup2=juniIpRouteMapGroup2, juniIpPrefixList=juniIpPrefixList, juniIpPrefixListTable=juniIpPrefixListTable, juniIpAspAccessListGroup=juniIpAspAccessListGroup, juniIpRedistributeEntry=juniIpRedistributeEntry, juniIpAspAccessName=juniIpAspAccessName, juniIpRedistributeList=juniIpRedistributeList, juniIpAccessListRowStatus=juniIpAccessListRowStatus, juniIpAspAccessCreatedInternally=juniIpAspAccessCreatedInternally, juniIpAccessListDstMask=juniIpAccessListDstMask, juniIpRouteMapGroup=juniIpRouteMapGroup, juniIpRouteMapPolicy=juniIpRouteMapPolicy, juniIpNamedAccessListElemId=juniIpNamedAccessListElemId, juniIpCommunityListCreatedInternally=juniIpCommunityListCreatedInternally, juniIpAccessListAction=juniIpAccessListAction, juniIpPolicyGroups=juniIpPolicyGroups, juniIpRouteMapElemId=juniIpRouteMapElemId, juniIpDynRedistributeToProtocol=juniIpDynRedistributeToProtocol, juniIpRouteMapV2RowStatus=juniIpRouteMapV2RowStatus, juniIpExtCommunityListCreatedInternally=juniIpExtCommunityListCreatedInternally, juniIpExtCommunityListGroup=juniIpExtCommunityListGroup, juniIpCommunityListGroup=juniIpCommunityListGroup, juniIpRouteMapTree=juniIpRouteMapTree, juniIpRouteMapClauseElemIdAddon=juniIpRouteMapClauseElemIdAddon, juniIpAccessListId=juniIpAccessListId, juniIpCommunityListExtended=juniIpCommunityListExtended, juniIpAccessListDst=juniIpAccessListDst, juniIpRouteMapClauseElemId=juniIpRouteMapClauseElemId, juniIpNamedAccessListSrc=juniIpNamedAccessListSrc, juniIpPolicyCompliances=juniIpPolicyCompliances, juniIpRouteMapClauseElementValue=juniIpRouteMapClauseElementValue, juniIpRedistributeRouteMapName=juniIpRedistributeRouteMapName, PYSNMP_MODULE_ID=juniIpPolicyMIB, juniIpPrefixTreeGroup=juniIpPrefixTreeGroup, juniIpPrefixListDescription=juniIpPrefixListDescription, juniIpPolicyObjects=juniIpPolicyObjects, juniIpAspAccessExpression=juniIpAspAccessExpression, juniIpRouteMapClauseEntry=juniIpRouteMapClauseEntry, juniIpDynRedistributeTable=juniIpDynRedistributeTable, juniIpNamedAccessListTable=juniIpNamedAccessListTable, juniIpRouteMapSubElemId=juniIpRouteMapSubElemId, juniIpPrefixListIpAddress=juniIpPrefixListIpAddress, juniIpDynRedistributeState=juniIpDynRedistributeState, juniIpPrefixTreeDescription=juniIpPrefixTreeDescription, JuniIpRedistributeProtocol=JuniIpRedistributeProtocol, juniIpAccessListTable=juniIpAccessListTable, juniIpRouteMapClauseTable=juniIpRouteMapClauseTable, juniIpRouteMapV2Name=juniIpRouteMapV2Name, juniIpAccessListElemId=juniIpAccessListElemId, juniIpAspAccessPolicy=juniIpAspAccessPolicy, juniIpPolicyConformance=juniIpPolicyConformance, juniIpNamedAccessListGroup=juniIpNamedAccessListGroup, juniIpNamedAccessListDstMask=juniIpNamedAccessListDstMask, juniIpAccessListSrcMask=juniIpAccessListSrcMask, juniIpRouteMapTable=juniIpRouteMapTable, juniIpAccessListEntry=juniIpAccessListEntry, juniIpCommunityListPolicy=juniIpCommunityListPolicy, juniIpPrefixListHitCount=juniIpPrefixListHitCount, juniIpPrefixListEntry=juniIpPrefixListEntry, juniIpPrefixListPolicy=juniIpPrefixListPolicy, juniIpRouteMapV2Entry=juniIpRouteMapV2Entry, juniIpPrefixListGeValue=juniIpPrefixListGeValue, juniIpPrefixTree=juniIpPrefixTree, juniIpAspAccessElemId=juniIpAspAccessElemId, juniIpCommunityList=juniIpCommunityList, juniIpPrefixListName=juniIpPrefixListName, juniIpPrefixTreeEntry=juniIpPrefixTreeEntry, juniIpPrefixTreeRowStatus=juniIpPrefixTreeRowStatus, juniIpExtCommunityListExpression=juniIpExtCommunityListExpression, JuniIpPolicyAdminStatus=JuniIpPolicyAdminStatus, juniIpPrefixListLeValue=juniIpPrefixListLeValue, juniIpAccessListGroup=juniIpAccessListGroup, juniIpCommunityListExpression=juniIpCommunityListExpression, juniIpNamedAccessListRowStatus=juniIpNamedAccessListRowStatus, juniIpRouteMapV2SequenceNum=juniIpRouteMapV2SequenceNum, juniIpCommunityListTable=juniIpCommunityListTable, juniIpAccessListProtocol=juniIpAccessListProtocol, juniIpExtCommunityListElemId=juniIpExtCommunityListElemId, juniIpCommunityListRowStatus=juniIpCommunityListRowStatus, juniIpRouteMapClauseSubElemId=juniIpRouteMapClauseSubElemId, juniIpRouteMapName=juniIpRouteMapName, JuniIpPolicyPolicy=JuniIpPolicyPolicy, juniIpRedistributeToProtocol=juniIpRedistributeToProtocol, juniIpPrefixTreeName=juniIpPrefixTreeName, juniIpRouteMapSequenceNum=juniIpRouteMapSequenceNum, juniIpRedistributeRowStatus=juniIpRedistributeRowStatus, juniIpCommunityListName=juniIpCommunityListName, JuniIpPolicyName=JuniIpPolicyName, juniIpPrefixTreeHitCount=juniIpPrefixTreeHitCount, juniIpCommunityListEntry=juniIpCommunityListEntry, juniIpAspAccessList=juniIpAspAccessList, juniIpAccessList=juniIpAccessList, juniIpCommunityListElemId=juniIpCommunityListElemId, juniIpRedistributeTable=juniIpRedistributeTable, juniIpPrefixTreeLength=juniIpPrefixTreeLength, juniIpDynRedistributeRowStatus=juniIpDynRedistributeRowStatus, juniIpPrefixListLength=juniIpPrefixListLength, juniIpNamedAccessListAction=juniIpNamedAccessListAction, juniIpExtCommunityListEntry=juniIpExtCommunityListEntry, juniIpRouteMapV2Policy=juniIpRouteMapV2Policy, juniIpRouteMapCreatedInternally=juniIpRouteMapCreatedInternally, juniIpExtCommunityListPolicy=juniIpExtCommunityListPolicy, juniIpExtCommunityListName=juniIpExtCommunityListName, juniIpAspAccessTable=juniIpAspAccessTable, juniIpAspAccessRowStatus=juniIpAspAccessRowStatus, juniIpAccessListSrc=juniIpAccessListSrc, juniIpPrefixListRowStatus=juniIpPrefixListRowStatus, juniIpRedistributeState=juniIpRedistributeState, juniIpNamedAccessList=juniIpNamedAccessList, juniIpNamedAccessListProtocol=juniIpNamedAccessListProtocol, juniIpNamedAccessListEntry=juniIpNamedAccessListEntry, juniIpPrefixTreeIpAddress=juniIpPrefixTreeIpAddress, juniIpExtCommunityListTable=juniIpExtCommunityListTable, juniIpRedistributeFromProtocol=juniIpRedistributeFromProtocol, juniIpRouteMapClauseRowStatus=juniIpRouteMapClauseRowStatus, juniIpDynRedistributeEntry=juniIpDynRedistributeEntry, juniIpRouteMapV2Table=juniIpRouteMapV2Table, juniIpRedistributeGroup=juniIpRedistributeGroup, juniIpPrefixTreeTable=juniIpPrefixTreeTable, juniIpRouteMapDisplay=juniIpRouteMapDisplay, juniIpPrefixListGroup=juniIpPrefixListGroup, juniIpPrefixListElemId=juniIpPrefixListElemId)
