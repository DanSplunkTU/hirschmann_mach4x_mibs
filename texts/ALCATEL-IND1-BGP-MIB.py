#
# PySNMP MIB module ALCATEL-IND1-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-BGP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:32:37 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Bgp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Bgp")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InetAutonomousSystemNumber, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAutonomousSystemNumber")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, TimeTicks, iso, Gauge32, Bits, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "TimeTicks", "iso", "Gauge32", "Bits", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "NotificationType")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
alcatelIND1BGPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1))
if mibBuilder.loadTexts: alcatelIND1BGPMIB.setLastUpdated('201010121800Z')
if mibBuilder.loadTexts: alcatelIND1BGPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1BGPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1BGPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 Configuration of BGP Protocol Parameters.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1BGPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1))
if mibBuilder.loadTexts: alcatelIND1BGPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1BGPMIBObjects.setDescription('Branch For Border Gateway Protocol (BGP) Subsystem Managed Objects.')
alcatelIND1BGPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2))
if mibBuilder.loadTexts: alcatelIND1BGPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1BGPMIBConformance.setDescription('Branch For Border Gateway Protocol (BGP) Subsystem Conformance Information.')
alcatelIND1BGPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1BGPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1BGPMIBGroups.setDescription('Branch For Border Gateway Protocol (BGP) Subsystem Units Of Conformance.')
alcatelIND1BGPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1BGPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1BGPMIBCompliances.setDescription('Branch For Border Gateway Protocol (BGP) Subsystem Compliance Statements.')
alaBgpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1))
alaBgpProtoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpProtoStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpProtoStatus.setDescription('The administrative status of BGP protocol.')
alaBgpAutonomousSystemNumber = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 2), InetAutonomousSystemNumber().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpAutonomousSystemNumber.setStatus('current')
if mibBuilder.loadTexts: alaBgpAutonomousSystemNumber.setDescription('The BGP Autonomous System (AS) Number.')
alaBgpRouterId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouterId.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouterId.setDescription('The configured BGP router ID.')
alaBgpIgpSynchStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpIgpSynchStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpIgpSynchStatus.setDescription('Enable/Disable IGP Synchronization for learned BGP prefixes.')
alaBgpMedAlways = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpMedAlways.setStatus('current')
if mibBuilder.loadTexts: alaBgpMedAlways.setDescription('Enable/Disable BGP Metric MULTI_EXIT_DISC comparison between\n                routes from different Autonomous Systems.')
alaBgpDefaultLocalPref = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDefaultLocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpDefaultLocalPref.setDescription('The default LOCAL_PREF to be applied to routes learnt from\n                 neighbouring autonomous system.')
alaBgpMissingMed = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("worst", 1), ("best", 2))).clone('worst')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpMissingMed.setStatus('current')
if mibBuilder.loadTexts: alaBgpMissingMed.setDescription('Specifies how to a missing med in a path attribute.')
alaBgpManualTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpManualTag.setStatus('current')
if mibBuilder.loadTexts: alaBgpManualTag.setDescription('Manual tag to be used for learned BGP routes. A value of 0 means no manual tagging.')
alaBgpConfedId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 9), InetAutonomousSystemNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpConfedId.setStatus('current')
if mibBuilder.loadTexts: alaBgpConfedId.setDescription('Confederation identifier. A value of 0 means this local speaker\n                 is not a member of any confederation')
alaBgpDampening = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampening.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampening.setDescription('Enable/Disable BGP route dampening')
alaBgpDampMaxFlapHistory = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampMaxFlapHistory.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampMaxFlapHistory.setDescription('The time in seconds the flap history of a route is retained.')
alaBgpFastExternalFailOver = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpFastExternalFailOver.setStatus('current')
if mibBuilder.loadTexts: alaBgpFastExternalFailOver.setDescription('Enable/Disable Resetting session immediately if a link to a\n                 directly connected  external peer is operationally down.')
alaBgpPeerChanges = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpPeerChanges.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerChanges.setDescription('Enable/Disable logging of peer state changes to the syslog.')
alaBgpVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpVersion.setStatus('current')
if mibBuilder.loadTexts: alaBgpVersion.setDescription('The BGP Version in use.')
alaBgpProtoOperState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpProtoOperState.setStatus('current')
if mibBuilder.loadTexts: alaBgpProtoOperState.setDescription('The BGP protocol operational state.')
alaBgpMaxPeers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpMaxPeers.setStatus('current')
if mibBuilder.loadTexts: alaBgpMaxPeers.setDescription('Maximum number of BGP peers supported.')
alaBgpNumActiveRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumActiveRoutes.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumActiveRoutes.setDescription('The number of active known routes in the BGP routing table')
alaBgpNumEstabExternalPeers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumEstabExternalPeers.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumEstabExternalPeers.setDescription('The number of External Peers that are in ESTABLISHED state.')
alaBgpNumEstabInternalPeers = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumEstabInternalPeers.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumEstabInternalPeers.setDescription('The number of Internal Peers that are in ESTABLISHED state.')
alaBgpNumPaths = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumPaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumPaths.setDescription('The total number of paths known to the system.')
alaBgpNumFeasiblePaths = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumFeasiblePaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumFeasiblePaths.setDescription('The total number of feasible paths known to the system.')
alaBgpNumDampenedPaths = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumDampenedPaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumDampenedPaths.setDescription('The total number of dampened paths known to the system.')
alaBgpNumIgpSyncWaitPaths = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumIgpSyncWaitPaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumIgpSyncWaitPaths.setDescription('The total number of paths learnt from internal peers that are\n                 waiting to be synchronized with IGP.')
alaBgpNumPolicyChgPaths = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNumPolicyChgPaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpNumPolicyChgPaths.setDescription('The total number of paths that are currently rejected but stored\n                 anticipating an inbound policy change for an external peer which\n                 is configured to accept dynamic policy changes.')
alaBgpMultiPath = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpMultiPath.setStatus('current')
if mibBuilder.loadTexts: alaBgpMultiPath.setDescription('Enable/Disable Equal-Cost MultiPaths')
alaBgpRouteReflection = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpRouteReflection.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteReflection.setDescription('Enable/Disable Route reflection')
alaBgpClusterId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 27), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpClusterId.setStatus('current')
if mibBuilder.loadTexts: alaBgpClusterId.setDescription('The local cluster id of this route reflection cluster.')
alaBgpDampeningClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampeningClear.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampeningClear.setDescription('Writing a value of clear into this variable will clear the\n                 dampening history.')
alaBgpDampCutOff = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampCutOff.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampCutOff.setDescription("When a route's figure of merit reaches this value, the route\n                 is considered damped.  This is a floating point value with 2 digit\n                 precision.  For example, a value of 3.5 is encoded as 350, a value\n                 of 0.9 is encoded as 90 ,a value of 9.45 is encoded as 945.")
alaBgpDampReuse = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampReuse.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampReuse.setDescription("When a route's figure of merit decays to this value, the route\n                 can be reused.  This is a floating point value with 2 digit precision.\n                 For example, a value of 3.5 is encoded as 350, a value of 0.9 is\n                 encoded as 90 , a value of 9.45 is encoded as 945.")
alaBgpDampCeil = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 9999)).clone(1600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampCeil.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampCeil.setDescription('The maximum value that the figure of merit of a route can attain.\n                 This is a floating point value with 2 digit precision.  For example,\n                 a value of 3.5 is encoded as 350, a value of 0.9 is encoded as 90,\n                 a value of 9.45 is encoded as 945.')
alaBgpAspathCompare = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpAspathCompare.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathCompare.setDescription('Specifies whether to include aspath comparison in route selection.')
alaBgpAsOriginInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpAsOriginInterval.setStatus('current')
if mibBuilder.loadTexts: alaBgpAsOriginInterval.setDescription('The minimum interval in seconds between successive updates\n                 advertising the networks belonging to the local autonomous system.')
alaBgpDampHalfLife = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampHalfLife.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampHalfLife.setDescription('The time in seconds in which the penalty to a flapping route\n                 decreases to half its initial value.')
alaBgpGracefulRestart = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpGracefulRestart.setStatus('current')
if mibBuilder.loadTexts: alaBgpGracefulRestart.setDescription('Enables BGP graceful restart capability.')
alaBgpRestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpRestartInterval.setStatus('current')
if mibBuilder.loadTexts: alaBgpRestartInterval.setDescription('Determines how long, in seconds, peering BGP routers are told to wait for this router\n                 to complete graceful restart and re-establish peering session. It is recommended\n                 that this value not be more than the configured Hold Time interval.')
alaBgpRestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notRestarting", 1), ("inProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRestartStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpRestartStatus.setDescription('Indicates whether the router is currently performing a graceful restart.')
alaBgpMultiProtocolIpv4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpMultiProtocolIpv4.setStatus('current')
if mibBuilder.loadTexts: alaBgpMultiProtocolIpv4.setDescription('Indicates whether IPv4 BGP4 capability is enabled.')
alaBgpMultiProtocolIpv6 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpMultiProtocolIpv6.setStatus('current')
if mibBuilder.loadTexts: alaBgpMultiProtocolIpv6.setDescription('Indicates whether IPv6 BGP4 capability is enabled.')
alaBgpBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpBfdStatus.setDescription('Enables/Disables interaction with BFD module for BGP protocol.')
alaBgpBfdAllNeighborStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpBfdAllNeighborStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpBfdAllNeighborStatus.setDescription('Enables/Disables reachability detection using BFD for all BGP Neighbors.')
alaBgpAsnFormat = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asplain", 1), ("asdot", 2))).clone('asplain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpAsnFormat.setStatus('current')
if mibBuilder.loadTexts: alaBgpAsnFormat.setDescription('Configures the display format to be used when displaying \n                 4-octet Autonomous System Numbers.  This configuration will\n                 change only the output format. The input format can still \n                 be in either mode.')
alaBgpClearAllNeighborStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpClearAllNeighborStats.setStatus('current')
if mibBuilder.loadTexts: alaBgpClearAllNeighborStats.setDescription('Setting a value of clear into this variable will clear the\n                 per peer statistics for all peers.')
alaBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2), )
if mibBuilder.loadTexts: alaBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerTable.setDescription('BGP IPv4 peer table.')
alaBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPeerAddr"))
if mibBuilder.loadTexts: alaBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerEntry.setDescription('BGP IPv4 Peer configuration entry.')
alaBgpPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerAddr.setDescription('Ip Address of the peer.')
alaBgpPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 2), InetAutonomousSystemNumber().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerAS.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerAS.setDescription('Autonomous system of the peer.')
alaBgpPeerPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerPassive.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerPassive.setDescription('Enable/Disable the peer passive status.  If enabled the peer\n                 will not initiate a transport connection.')
alaBgpPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerName.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerName.setDescription('A symbolic name for the neighbour.')
alaBgpPeerMultiHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerMultiHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerMultiHop.setDescription('If enabled the external peer is allowed to be multiple hops away.')
alaBgpPeerMaxPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerMaxPrefix.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerMaxPrefix.setDescription('The maximum prefixes to be accepted from this peer. If this maximum\n                is reached, the peer will be sent a NOTIFY message with a CEASE ecode.')
alaBgpPeerMaxPrefixWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerMaxPrefixWarnOnly.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerMaxPrefixWarnOnly.setDescription("If enabled, the operator will be warned when the peer reaches\n                 80% of the configured maximum prefixes. To see this message,\n                 BGP switch logging for type 'warnings' must be activated and level\n                 set to info.")
alaBgpPeerNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerNextHopSelf.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerNextHopSelf.setDescription('If enabled, nexthop processing in the updates sent to this\n                 peer is disabled and is set to the ip address of the interface\n                 attached to this peer.')
alaBgpPeerSoftReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerSoftReconfig.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerSoftReconfig.setDescription('Enable/Disable dynamic policy configurability on the connection\n                 to this peer.')
alaBgpPeerInSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerInSoftReset.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerInSoftReset.setDescription('Route refresh capability is Enabled/Disabled on the connection\n                 to this peer.')
alaBgpPeerIpv4Unicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerIpv4Unicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerIpv4Unicast.setDescription('Multiprotocol capability IPv4 Unicast is Enabled/Disabled on\n                 the connection to this peer .')
alaBgpPeerIpv4Multicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerIpv4Multicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerIpv4Multicast.setDescription('Multiprotocol capability IPv4 Multicast is Enabled/Disabled\n                 on the connection to this peer .')
alaBgpPeerRcvdRtRefreshMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRcvdRtRefreshMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRcvdRtRefreshMsgs.setDescription('The number of route refresh messages received from this peer.')
alaBgpPeerSentRtRefreshMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerSentRtRefreshMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerSentRtRefreshMsgs.setDescription('The number of route refresh messages sent to this peer.')
alaBgpPeerRouteMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerRouteMapOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRouteMapOut.setDescription('The name of the policy map to be applied to the updates sent\n                 to this peer. This is same as alaBgpPolicyRouteMapName.')
alaBgpPeerRouteMapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerRouteMapIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRouteMapIn.setDescription('The name of the policy map to be applied to the updates\n                 received from this peer. This is same as alaBgpPolicyRouteMapName.')
alaBgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLocalAddr.setDescription('Local Ip Address of this connection.')
alaBgpPeerLastDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userRequest", 1), ("connectionTimeout", 2), ("holdTimeout", 3), ("badMsg", 4), ("fsmUnexpectedEvent", 5), ("peerClosed", 6), ("peerNotify", 7), ("transportError", 8), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastDownReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastDownReason.setDescription('The general reason for termination of last established session\n                 with the peer since the protocol was operationally up.')
alaBgpPeerLastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastDownTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastDownTime.setDescription('The time elapsed since the BGP session with the peer was terminated.')
alaBgpPeerLastReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastReadTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastReadTime.setDescription('The time elapsed since we last read data from the peer.')
alaBgpPeerRcvdNotifyMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRcvdNotifyMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRcvdNotifyMsgs.setDescription('The Number of notification messages received from this peer.')
alaBgpPeerSentNotifyMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerSentNotifyMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerSentNotifyMsgs.setDescription('The Number of notification messages sent to this peer.')
alaBgpPeerLastSentNotifyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("msghdrNoSync", 1), ("msghdrBadLen", 2), ("msghdrBadType", 3), ("openUnsuppVersion", 4), ("openBadAs", 5), ("openBadId", 6), ("openUnsuppOption", 7), ("openAuthFail", 8), ("openBadHoldtime", 9), ("openUnsuppCapability", 10), ("updateMalformAttr", 11), ("updateUnsuppWknwnAttr", 12), ("updateMissingWknwnAttr", 13), ("updateBadAttrFlags", 14), ("updateBadAttrLen", 15), ("updateBadOrigin", 16), ("updateAsLoop", 17), ("updateBadNexthop", 18), ("updateBadOptAttr", 19), ("updateBadNet", 20), ("updateBadAspath", 21), ("holdTimeout", 22), ("fsmError", 23), ("ceaseMaxPrefixReached", 24), ("ceaseAdminShutdown", 25), ("ceasePeerDeconfigured", 26), ("ceaseAdminReset", 27), ("ceaseConnRejected", 28), ("ceaseOtherConfChange", 29), ("ceaseConnCollisionResolution", 30), ("ceaseOutOfResources", 31), ("none", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastSentNotifyReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastSentNotifyReason.setDescription('The last notification reason sent.')
alaBgpPeerLastRecvNotifyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("msghdrNoSync", 1), ("msghdrBadLen", 2), ("msghdrBadType", 3), ("openUnsuppVersion", 4), ("openBadAs", 5), ("openBadId", 6), ("openUnsuppOption", 7), ("openAuthFail", 8), ("openBadHoldtime", 9), ("openUnsuppCapability", 10), ("updateMalformAttr", 11), ("updateUnsuppWknwnAttr", 12), ("updateMissingWknwnAttr", 13), ("updateBadAttrFlags", 14), ("updateBadAttrLen", 15), ("updateBadOrigin", 16), ("updateAsLoop", 17), ("updateBadNexthop", 18), ("updateBadOptAttr", 19), ("updateBadNet", 20), ("updateBadAspath", 21), ("holdTimeout", 22), ("fsmError", 23), ("ceaseMaxPrefixReached", 24), ("ceaseAdminShutdown", 25), ("ceasePeerDeconfigured", 26), ("ceaseAdminReset", 27), ("ceaseConnRejected", 28), ("ceaseOtherConfChange", 29), ("ceaseConnCollisionResolution", 30), ("ceaseOutOfResources", 31), ("none", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastRecvNotifyReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastRecvNotifyReason.setDescription('The last notification reason received.')
alaBgpPeerRcvdPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRcvdPrefixes.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRcvdPrefixes.setDescription('The Number of prefixes received from this peer.')
alaBgpPeerDownTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerDownTransitions.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerDownTransitions.setDescription('The Number of times this peer session transitioned to IDLE state.')
alaBgpPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerType.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerType.setDescription('This indicates whether the peer belongs to the local autonomous\n                system(internal) or another autonmous system.')
alaBgpPeerClearCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerClearCounter.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerClearCounter.setDescription('Setting a value of clear into this variable will clear the\n                 per peer statistics.')
alaBgpPeerAutoReStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerAutoReStart.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerAutoReStart.setDescription('Enable/Disable the peer autostart status.  If enabled, the peer\n                 will be automatically restarted (if administratively enabled)\n                 after the transition to IDLE state.')
alaBgpPeerClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerClientStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerClientStatus.setDescription('If enabled this peer is a route reflection client.')
alaBgpPeerConfedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerConfedStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerConfedStatus.setDescription('If enabled this peer is a member of our confederation.')
alaBgpPeerRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerRemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRemovePrivateAs.setDescription('If enabled private as numbers are stripped out in the updates\n                 sent to this peer.')
alaBgpPeerTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerTTL.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerTTL.setDescription('TTL count for packets on this TCP connection.')
alaBgpPeerAspathListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerAspathListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerAspathListOut.setDescription('The name of the aspath-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpAspathMatchListId.')
alaBgpPeerAspathListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerAspathListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerAspathListIn.setDescription('The name of the aspath-list to be applied to the updates\n                 received from this peer. This is same as alaBgpAspathMatchListId.')
alaBgpPeerPrefixListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerPrefixListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerPrefixListOut.setDescription('The name of the prefix-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpPrefixMatchListId.')
alaBgpPeerPrefixListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerPrefixListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerPrefixListIn.setDescription('The name of the prefix-list to be applied to the updates\n                 received from this peer. This is same as alaBgpPrefixMatchListId.')
alaBgpPeerCommunityListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 38), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerCommunityListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerCommunityListOut.setDescription('The name of the community-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpCommunityMatchListId.')
alaBgpPeerCommunityListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 39), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerCommunityListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerCommunityListIn.setDescription('The name of the community-list to be applied to the updates\n                 received from this peer. This is same as alaBgpCommunityMatchListId.')
alaBgpPeerRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1))).clone('restart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerRestart.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRestart.setDescription('Setting a value of restart into this variable will restart the peer.')
alaBgpPeerDefaultOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerDefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerDefaultOriginate.setDescription('If enabled a default route is sent to this neighbour.')
alaBgpPeerReconfigureInBound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reconfigure", 1))).clone('reconfigure')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerReconfigureInBound.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerReconfigureInBound.setDescription('Setting a value of reconfigure into this variable will\n                 re-start inbound policy evaluation of the peer.')
alaBgpPeerReconfigureOutBound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reconfigure", 1))).clone('reconfigure')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerReconfigureOutBound.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerReconfigureOutBound.setDescription('Setting a value of reconfigure into this variable will re-start\n                 outbound policy evaluation of the peer.')
alaBgpPeerMD5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 44), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerMD5Key.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerMD5Key.setDescription('Value of the MD5 key used in TCP connection with the peer.\n                 This field is secured and returned value is non significant.')
alaBgpPeerMD5KeyEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerMD5KeyEncrypt.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerMD5KeyEncrypt.setDescription('Value of the MD5 key encrypted using 3DES algorithm.\n                 It is calculated from MD5 key value, and is used only to restore\n                 configuration on reboot.')
alaBgpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 46), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRowStatus.setDescription('Row status variable.')
alaBgpPeerUpTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerUpTransitions.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerUpTransitions.setDescription('The Number of times this peer session transitioned to ESTABLISHED state.')
alaBgpPeerLastWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 48), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastWriteTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastWriteTime.setDescription('The time elapsed since we last sent data to the peer.')
alaBgpPeerRcvdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRcvdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRcvdMsgs.setDescription('The Number of messages received from the peer.')
alaBgpPeerSentMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerSentMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerSentMsgs.setDescription('The Number of messages sent to the peer.')
alaBgpPeerRcvdUpdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRcvdUpdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRcvdUpdMsgs.setDescription('The Number of update messages received from the peer.')
alaBgpPeerSentUpdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerSentUpdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerSentUpdMsgs.setDescription('The Number of update messages sent to the peer.')
alaBgpPeerLastTransitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 53), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastTransitionTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastTransitionTime.setDescription('The time elapsed since the BGP session was operationally up or down to the peer.')
alaBgpPeerLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLastUpTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLastUpTime.setDescription('The time elapsed since the BGP session with the peer was established.')
alaBgpPeerBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 55), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerBgpId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerBgpId.setDescription('BGP Identifier of the peer.')
alaBgpPeerLocalIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 56), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLocalIntfName.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLocalIntfName.setDescription("The user defined name used to identify the local IP interface for this peer's TCP connection.")
alaBgpPeerRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRestartTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRestartTime.setDescription('The graceful restart time interval advertised by this peer. A value of 0 indicates\n                 that this peer is not capable of graceful restart, and has not advertised this capability.')
alaBgpPeerRestartState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("restarting", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRestartState.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRestartState.setDescription('Indicates whether the peer is currently performing a graceful restart.\n                 A value of none indicates that this peer is not capable of graceful restart.')
alaBgpPeerRestartFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPreserved", 1), ("preserved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerRestartFwdState.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerRestartFwdState.setDescription('Indicates whether the peer has preserved the forwarding state during\n                 the graceful restart. This value is defined only for a peer that has advertised\n                 graceful restart capability. For peers that are not capable of graceful restart,\n                 this value will be notPreserved.')
alaBgpPeerIpv6Unicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerIpv6Unicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerIpv6Unicast.setDescription('Indicates whether the peer has advertised Multiprotocol IPv6 Unicast capability\n                 in its BGP OPEN message.')
alaBgpPeerIpv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 61), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerIpv6NextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerIpv6NextHop.setDescription('The IPv6 nexthop for IPv6 routes advertised to this peer.')
alaBgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerLocalPort.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerLocalPort.setDescription("The local port number for this peer's TCP connection.")
alaBgpPeerTcpWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeerTcpWindowSize.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerTcpWindowSize.setDescription('The size of the socket buffers, in bytes, used for this TCP connection.')
alaBgpPeerActivateIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerActivateIpv6.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerActivateIpv6.setDescription('If enabled, the Multiprotocol IPv6 Unicast capability is advertised to\n                 this peer. If disabled, the capability is not advertised in the OPEN message.')
alaBgpPeerBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerBfdStatus.setDescription('Enables/Disables BFd for  a particular Peer.')
alaBgpPeerPrefix6ListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 66), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerPrefix6ListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerPrefix6ListOut.setDescription('The name of the prefix6-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpPrefix6MatchListId.')
alaBgpPeerPrefix6ListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 67), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerPrefix6ListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerPrefix6ListIn.setDescription('The name of the prefix6-list to be applied to the updates\n                 received from this peer. This is same as alaBgpPrefix6MatchListId.')
alaBgpPeerActivateIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeerActivateIpv4.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeerActivateIpv4.setDescription('If enabled, the Multiprotocol IPv4 Unicast capability is advertised to\n                 this peer. If disabled, the capability is not advertised in the OPEN message.')
alaBgpAggrTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3), )
if mibBuilder.loadTexts: alaBgpAggrTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrTable.setDescription('BGP Aggregate configuration table.')
alaBgpAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpAggrAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpAggrMask"))
if mibBuilder.loadTexts: alaBgpAggrEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrEntry.setDescription('BGP Aggregation entry.')
alaBgpAggrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAggrAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrAddr.setDescription('Aggregate address.')
alaBgpAggrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAggrMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrMask.setDescription('Aggregate Mask.')
alaBgpAggrSummarize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrSummarize.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrSummarize.setDescription('If enabled only aggregate is advertised.\n                 Otherwise more specific routes are also advertised.')
alaBgpAggrSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrSet.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrSet.setDescription('If enabled aggregate all aspaths.')
alaBgpAggrState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAggrState.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrState.setDescription('If active the aggregate is actively being advertised.')
alaBgpAggrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrMetric.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrMetric.setDescription('This specifies the MED to be used when advertising this\n                 aggregate to external peers. A value of 0 indicates not to send MED.')
alaBgpAggrLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrLocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrLocalPref.setDescription('This specifies the override default LOCAL PREF to be used when\n                 advertising this aggregate to internal peers. A value of 0\n                 indicates not to override the default.')
alaBgpAggrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrCommunity.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrCommunity.setDescription('The value to set the COMMUNITY attribute when advertising this aggregate.')
alaBgpAggrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 3, 1, 9), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAggrRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpAggrRowStatus.setDescription('Row status variable.')
alaBgpNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4), )
if mibBuilder.loadTexts: alaBgpNetworkTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkTable.setDescription('BGP Network configuration table.')
alaBgpNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpNetworkAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpNetworkMask"))
if mibBuilder.loadTexts: alaBgpNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkEntry.setDescription('BGP Network entry.')
alaBgpNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkAddr.setDescription('Aggregate address.')
alaBgpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetworkMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkMask.setDescription('Aggregate Mask.')
alaBgpNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetworkState.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkState.setDescription('Indicates whether the network is being actively advertised or not.')
alaBgpNetworkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetworkMetric.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkMetric.setDescription('This specifies the MED to be used when advertising this\n                 network to external peers. A value of 0 indicates not to send MED.')
alaBgpNetworkLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetworkLocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkLocalPref.setDescription('This specifies the override default LOCAL PREF to be used\n                 when advertising this network to internal peers. A value of 0\n                 indicates not to override the default.')
alaBgpNetworkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetworkCommunity.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkCommunity.setDescription('The value to set the COMMUNITY attribute when advertising this network.')
alaBgpNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 4, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetworkRowStatus.setDescription('Row status variable.')
alaBgpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5), )
if mibBuilder.loadTexts: alaBgpRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteTable.setDescription('BGP Routing table.')
alaBgpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpRouteAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpRouteMask"))
if mibBuilder.loadTexts: alaBgpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteEntry.setDescription('BGP Route entry.')
alaBgpRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteAddr.setDescription('Destination address.')
alaBgpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMask.setDescription('Destination Mask.')
alaBgpRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteState.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteState.setDescription('Indicates whether the route is being actively advertised or not.')
alaBgpRoutePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoutePaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoutePaths.setDescription('Number of total paths available to this destination.')
alaBgpRouteFeasiblePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteFeasiblePaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteFeasiblePaths.setDescription('Number of Feasible paths available to this destination.')
alaBgpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteNextHop.setDescription('The BGP Nexthop to reach this destination.')
alaBgpRouteIgpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIgpNextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIgpNextHop.setDescription('The IGP Nexthop to reach this destination.')
alaBgpRouteIsHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsHidden.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsHidden.setDescription('Indicates whether the route is hidden by an aggregate.')
alaBgpRouteIsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsAggregate.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsAggregate.setDescription('Indicates whether the route is an aggregate.')
alaBgpRouteIsAggregateContributor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsAggregateContributor.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsAggregateContributor.setDescription('Indicates whether the route is a contributor to an aggregate.')
alaBgpRouteAdvNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteAdvNeighbors.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteAdvNeighbors.setDescription('List of (addresses of) neighbours to whom this route has been\n                 advertised is encoded here.')
alaBgpRouteIsAggregateList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsAggregateList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsAggregateList.setDescription('Indicates whether the route is on an aggregate list.')
alaBgpRouteIsAggregateWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsAggregateWait.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsAggregateWait.setDescription('Indicates whether the route is an aggregate waiting for a contributor.')
alaBgpRouteIsOnEbgpChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsOnEbgpChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsOnEbgpChgList.setDescription('Indicates whether the route is placed on list of EBGP routes.')
alaBgpRouteIsOnIbgpClientChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsOnIbgpClientChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsOnIbgpClientChgList.setDescription('Indicates whether the route is placed on list of IBGP reflector-client routes.')
alaBgpRouteIsOnIbgpChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsOnIbgpChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsOnIbgpChgList.setDescription('Indicates whether the route is placed on list of IBGP non-reflector-client routes.')
alaBgpRouteIsOnLocalChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsOnLocalChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsOnLocalChgList.setDescription('Indicates whether the route is placed on list of local routes.')
alaBgpRouteIsOnDeleteList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsOnDeleteList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsOnDeleteList.setDescription('Indicates whether the route is placed on delete list.')
alaBgpRouteIsDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteIsDampened.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteIsDampened.setDescription('Indicates whether the route is being route flap dampened.')
alaBgpPathTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6), )
if mibBuilder.loadTexts: alaBgpPathTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathTable.setDescription('BGP Path table.')
alaBgpPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPathAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPathMask"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPathPeerAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPathSrcProto"))
if mibBuilder.loadTexts: alaBgpPathEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathEntry.setDescription('BGP path entry.')
alaBgpPathAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathAddr.setDescription('Destination address.')
alaBgpPathMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathMask.setDescription('Destination Mask.')
alaBgpPathPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathPeerAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathPeerAddr.setDescription("The IP address or the BGP Identifier of the peer who sent this path.\n                 For locally sourced routes, the value is 0.0.0.0. For peers with an\n                 IPv4 address, the value will be the peer's IPv4 address, and the\n                 value of alaBgpPathPeerInetType will be ipv4. For peers with\n                 an IPv6 address, the value will be the peer's BGP Identifier, and\n                 the value of alaBgpPathPeerInetType will be ipv6.")
alaBgpPathSrcProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("static", 3), ("directHost", 4), ("rip", 5), ("ospf", 6), ("isis", 7), ("ebgp", 9), ("ibgp", 10), ("aggregate", 11), ("network", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathSrcProto.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathSrcProto.setDescription('The protocol from which the path was learnt.')
alaBgpPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathWeight.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathWeight.setDescription('The weight assigned to this path.')
alaBgpPathPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathPref.setDescription('The degree of preference assigned to this path.')
alaBgpPathState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("best", 1), ("feasible", 2), ("policyWait", 3), ("unSynchronized", 4), ("dampened", 5), ("none", 6), ("stale", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathState.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathState.setDescription("Indicates the state of the path.  When path state is none it\n                 indicates that there are no paths to this prefix/len and the\n                 route is being purged from the system. Stale indicates that the\n                 peer that advertised this route's nexthop is in the process of\n                 graceful restart.")
alaBgpPathOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathOrigin.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathOrigin.setDescription('The ORIGIN attribute of the path.')
alaBgpPathNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathNextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathNextHop.setDescription('The NEXTHOP attribute of the path.')
alaBgpPathAs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathAs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathAs.setDescription('The sequence of AS path segments.\n                 Each AS path segment is represented by a triple <TYPE, LENGTH, VALUE>.\n                 The TYPE is a 1-octet field which has two possible values:\n                     (1) AS_SET      : unordered set of ASs a route in the UPDATE message\n                                       has traversed.\n                     (2) AS_SEQUENCE : ordered set of ASs a route in the UPDATE message\n                                       has traversed.\n                 The LENGTH is a 1-octet field containing the number of ASs in\n                  the value field.\n                 The VALUE field contains one or more AS numbers, each AS is\n                  represented in the octet string as a pair of octets according to\n                  the following algorithm:\n                       first-byte-of-pair  = ASNumber / 256;\n                       second-byte-of-pair = ASNumber & 255;.')
alaBgpPathLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathLocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathLocalPref.setDescription('The LOCAL_PREF attribute of the path.  A value of -1 indicates\n                 the absence of this attribute.')
alaBgpPathMed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathMed.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathMed.setDescription('The Multi Exit Disc. attribute of the path.  A value of 4294967295\n                 indicates the absence of this attribute.')
alaBgpPathAtomic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathAtomic.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathAtomic.setDescription('Indicates whether this path is generated without selecting a\n                 less specific route.')
alaBgpPathAggregatorAs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 14), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathAggregatorAs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathAggregatorAs.setDescription('The AS number of the last BGP4 speaker that performed route\n                 aggregation. A value of 0 indicates the absence of this attribute.')
alaBgpPathAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathAggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route\n                 aggregation. A value of 0.0.0.0 indicates the absence of this\n                 attribute.')
alaBgpPathCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathCommunity.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathCommunity.setDescription('The community attribute of the path. The communities are\n                 represented as series of 4 octet values.')
alaBgpPathUnknownAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathUnknownAttr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathUnknownAttr.setDescription('One or more path attributes not understood by this BGP4 speaker.\n                 Size of zero (0) indicates the absence of such attribute(s).\n                 Octets beyond the maximum size, if any, are not recorded by\n                 this object.')
alaBgpPathOriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathOriginatorId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathOriginatorId.setDescription('The Router Id of the BGP4 speaker that performed route reflection,\n                 if this is a reflected route in the local AS. A value of 0.0.0.0 indicates the\n                 absence of this attribute. Refer RFC 2796 (BGP Route Reflection), Section 7')
alaBgpPathClusterList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathClusterList.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathClusterList.setDescription('Sequence of Cluster Id values representing the reflection path that the route has passed,\n                 if this is a reflected route in the local AS. Size of zero (0) indicates the absence of\n                 this attribute. Refer RFC 2796 (BGP Route Reflection), Section 7')
alaBgpPathPeerInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathPeerInetType.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathPeerInetType.setDescription("Indicates whether the peer who sent this path has an IPv4 address or an\n                 IPv6 address.  If set to ipv4, the peer has an IPv4 address, and the value\n                 of alaBgpPathPeerAddr is the peer's IPv4 address. If set to ipv6, the peer\n                 has an IPv6 address, and the value of alaBgpPathPeerAddr is the peer's\n                 BGP Identifier. For locally sourced routes, the value is set to unknown.")
alaBgpPathPeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 6, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPathPeerName.setStatus('current')
if mibBuilder.loadTexts: alaBgpPathPeerName.setDescription("The symbolic name of the peer that sent this path. For paths\n                 corresponding to local or redistributed routes on this router, the\n                 value is set to 'none'.")
alaBgpDampTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7), )
if mibBuilder.loadTexts: alaBgpDampTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampTable.setDescription('BGP Dampened paths table.')
alaBgpDampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpDampAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpDampMask"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpDampPeerAddr"))
if mibBuilder.loadTexts: alaBgpDampEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampEntry.setDescription('BGP Network entry.')
alaBgpDampAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampAddr.setDescription('Destination address.')
alaBgpDampMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampMask.setDescription('Destination mask.')
alaBgpDampPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampPeerAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampPeerAddr.setDescription('Neighbour address.')
alaBgpDampFigureOfMerit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampFigureOfMerit.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampFigureOfMerit.setDescription('The figure of merit value.  This is a floating point value\n                 with 2 digit precision. For example, a value of 3.5 is encoded\n                 as 350, a value of 0.9 is encoded as 90, a value of 9.45 is\n                 encoded as 945.')
alaBgpDampFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampFlaps.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampFlaps.setDescription('The number of times this route has flapped.')
alaBgpDampDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampDuration.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampDuration.setDescription('Time in seconds since the flap was noticed.')
alaBgpDampLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampLastUpdateTime.setDescription('Time in seconds since this damp entry (figure of merit) was\n                 last updated.')
alaBgpDampReuseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpDampReuseTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampReuseTime.setDescription('Time in seconds until this route will be reused.')
alaBgpDampClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaBgpDampClear.setStatus('current')
if mibBuilder.loadTexts: alaBgpDampClear.setDescription('A value of clear will clear this damp history information.')
alaBgpPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8))
alaBgpRouteMapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaBgpRouteMapTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapTable.setDescription('BGP Policy RouteMap table.')
alaBgpRouteMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapName"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapInst"))
if mibBuilder.loadTexts: alaBgpRouteMapEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapEntry.setDescription('BGP Route Map Entry.')
alaBgpRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteMapName.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapName.setDescription('Name of the route map.')
alaBgpRouteMapInst = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRouteMapInst.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapInst.setDescription('Instance of this route map.')
alaBgpRouteMapAsPathMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapAsPathMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapAsPathMatchListId.setDescription('This is same as alaBgpAspathMatchListId.  It identifies the\n                 matching criteria list of Autonomous system paths. Empty quotes\n                 indicate no autonomous system paths matching criteria is to\n                 be applied.')
alaBgpRouteMapPrefixMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapPrefixMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapPrefixMatchListId.setDescription('This is same as alaBgpPrefixMatchListId.  It identifies the\n                 matching criteria list of prefixes. Empty quotes indicate no\n                 prefix matching criteria is to be applied.')
alaBgpRouteMapCommunityMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapCommunityMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapCommunityMatchListId.setDescription('This is same as alaBgpCommunityMatchListId.  It identifies the\n                 matching criteria list of communities. Empty quotes indicate no\n                 community matching criteria is to be applied.')
alaBgpRouteMapOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapOrigin.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapOrigin.setDescription('The value to set the origin of the routes matched by this\n                 RouteMap instance. A value of none means no origin is to be set.')
alaBgpRouteMapLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapLocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapLocalPref.setDescription('The value to set the LOCAL PREF attribute of the routes matched\n                 by this RouteMap instance. This value is added to/is subtracted\n                 from/replaces the LOCAL PREF attribute in conjunction with the\n                 associated value of alaBgpRouteMapLocalPrefMode.')
alaBgpRouteMapLocalPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inc", 2), ("dec", 3), ("rep", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapLocalPrefMode.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapLocalPrefMode.setDescription('This variable specifies how alaBgpRouteMapLocalPref is to be\n                 operated on an existing LPREF attribute of a route on which\n                 this RouteMap instance is applied to.')
alaBgpRouteMapMed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMed.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMed.setDescription('The value to set the MULTI EXIT DISC attribute of the routes\n                 matched by this RouteMap instance. This value is added to/is\n                 subtracted from/replaces the MULTI EXIT DISC attribute in\n                 conjunction with the associated value of alaBgpRouteMapMedMode.')
alaBgpRouteMapMedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inc", 2), ("dec", 3), ("rep", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMedMode.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMedMode.setDescription('This variable specifies how alaBgpRouteMapMed is to be operated\n                 on an existing MULTI EXIT DISC attribute of a route on which this\n                 RouteMap instance is applied to.')
alaBgpRouteMapAsPrepend = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapAsPrepend.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapAsPrepend.setDescription('The value to prepend to the AS_PATH attribute of the routes\n                 matched by this RouteMap instance. Empty quotes indicates no\n                 AS_PATH prepending is to be done.')
alaBgpRouteMapSetCommunityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("replace", 2))).clone('add')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapSetCommunityMode.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapSetCommunityMode.setDescription('Determines whether alaBgpRouteMapCommunity will be adding to\n                 or replacing the COMMUNITY attribute of the routes matched by\n                 this RouteMap instance.')
alaBgpRouteMapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapCommunity.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapCommunity.setDescription('The value to set the COMMUNITY attribute of the routes matched\n                 by this RouteMap instance.')
alaBgpRouteMapMatchAsRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchAsRegExp.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchAsRegExp.setDescription('AsPath regular expression matching primitive.')
alaBgpRouteMapMatchPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 15), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchPrefix.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchPrefix.setDescription('Prefix match primitive.')
alaBgpRouteMapMatchMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 16), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchMask.setDescription('Prefix match mask primitive')
alaBgpRouteMapMatchCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchCommunity.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchCommunity.setDescription('Community match primitive')
alaBgpRouteMapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapWeight.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapWeight.setDescription('This sets the weight for the incoming route. This parameter has\n                 no effect on outbound policy.')
alaBgpRouteMapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapAction.setDescription('This determines whether to allow a matching route to pass through.')
alaBgpRouteMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 20), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapRowStatus.setDescription('Row status variable')
alaBgpRouteMapPrefix6MatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapPrefix6MatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapPrefix6MatchListId.setDescription('This is same as alaBgpPrefix6MatchListId.  It identifies the\n                 matching criteria list of IPv6 prefixes. Empty quotes indicate no\n                 prefix matching criteria is to be applied.')
alaBgpRouteMapMatchPrefix6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 22), Ipv6Address().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchPrefix6.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchPrefix6.setDescription('IPv6 Prefix match primitive. A value of 0 indicates default route prefix.')
alaBgpRouteMapMatchMaskLength6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapMatchMaskLength6.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapMatchMaskLength6.setDescription('The length in bits of the IPv6 prefix being matched.  A value of 0 \n                 indicates default route prefix.')
alaBgpRouteMapCommunityStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 1, 1, 24), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpRouteMapCommunityStrip.setStatus('current')
if mibBuilder.loadTexts: alaBgpRouteMapCommunityStrip.setDescription('Community strip primitive')
alaBgpAspathMatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2), )
if mibBuilder.loadTexts: alaBgpAspathMatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListTable.setDescription('BGP Policy Aspath criteria matching table.')
alaBgpAspathMatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListRegExp"))
if mibBuilder.loadTexts: alaBgpAspathMatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListEntry.setDescription('Aspath matching entry .')
alaBgpAspathMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListId.setDescription('Identifier of this list of autonomous system path matching criteria.')
alaBgpAspathMatchListRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathMatchListRegExp.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListRegExp.setDescription('The regular expression identifying the autnomous system paths\n                 to be matched by this instance.')
alaBgpAspathMatchListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAspathMatchListPriority.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListPriority.setDescription('This determines the order in which the matching regular\n                 expressions are applied in the list identified by\n                 alaBgpAspathMatchListId.')
alaBgpAspathMatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAspathMatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpAspathMatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 5), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpAspathMatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListRowStatus.setDescription('Row status variable')
alaBgpAspathMatchListSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathMatchListSubIndex.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathMatchListSubIndex.setDescription('The primary index of this list.')
alaBgpPrefixMatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3), )
if mibBuilder.loadTexts: alaBgpPrefixMatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListTable.setDescription('BGP Policy prefix matching criteria table.')
alaBgpPrefixMatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListMask"))
if mibBuilder.loadTexts: alaBgpPrefixMatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListEntry.setDescription('BGP Prefix matching instance.')
alaBgpPrefixMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPrefixMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListId.setDescription('Identifier of this list of autonomous system path matching criteria.')
alaBgpPrefixMatchListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPrefixMatchListAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListAddr.setDescription('The address to be matched.')
alaBgpPrefixMatchListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPrefixMatchListMask.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListMask.setDescription('The mask to be matched.')
alaBgpPrefixMatchListGE = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefixMatchListGE.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListGE.setDescription('Specifies the minimum length of the mask to be matched. A value\n                 of 0 means this criteria is absent. The value of\n                 alaBgpPrefixMatchListGE must be > length of\n                 (alaBgpPrefixMatchListMask) and < alaBgpPrefixMatchListLE.')
alaBgpPrefixMatchListLE = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefixMatchListLE.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListLE.setDescription('Specifies the maximum length (inclusive) of the mask to be matched.\n                 A value of 0 means this criteria is absent. The value of\n                 alaBgpPrefixMatchListLE must be >= alaBgpPrefixMatchListGE\n                 and <= 32.')
alaBgpPrefixMatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefixMatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpPrefixMatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 3, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefixMatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefixMatchListRowStatus.setDescription('Row status variable')
alaBgpCommunityMatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4), )
if mibBuilder.loadTexts: alaBgpCommunityMatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListTable.setDescription('BGP Policy Community criteria matching table.')
alaBgpCommunityMatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListString"))
if mibBuilder.loadTexts: alaBgpCommunityMatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListEntry.setDescription('Community matching entry .')
alaBgpCommunityMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListId.setDescription('Identifier of this list of communities matching criteria.')
alaBgpCommunityMatchListString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityMatchListString.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListString.setDescription('The string identifying the communities to be matched by this instance.')
alaBgpCommunityMatchListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpCommunityMatchListPriority.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListPriority.setDescription('This determines the order in which the matching regular\n                 expressions are applied in the list identified by\n                 alaBgpCommunityMatchListId.')
alaBgpCommunityMatchListType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exact", 1), ("occur", 2))).clone('exact')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpCommunityMatchListType.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListType.setDescription('This determines the matching type.')
alaBgpCommunityMatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpCommunityMatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpCommunityMatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 6), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpCommunityMatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListRowStatus.setDescription('Row status variable.')
alaBgpCommunityMatchListSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityMatchListSubIndex.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityMatchListSubIndex.setDescription('The primary index of this list.')
alaBgpAspathPriMatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5), )
if mibBuilder.loadTexts: alaBgpAspathPriMatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListTable.setDescription('Priority sorted view of BGP Policy Aspath matching table.')
alaBgpAspathPriMatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListPriority"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListIntIdx"))
if mibBuilder.loadTexts: alaBgpAspathPriMatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListEntry.setDescription('Aspath matching entry .')
alaBgpAspathPriMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListId.setDescription('Identifier of this list of autonomous system path matching criteria.')
alaBgpAspathPriMatchListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListPriority.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListPriority.setDescription('This determines the order in which the matching regular\n                 expressions are applied in the list identified by\n                 alaBgpAspathPriMatchListId.')
alaBgpAspathPriMatchListIntIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListIntIdx.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListIntIdx.setDescription('This is the order in which the matching regular expressions\n                 are created in the list identified by alaBgpAspathPriMatchListId.')
alaBgpAspathPriMatchListRegExp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListRegExp.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListRegExp.setDescription('The regular expression identifying the autnomous system paths\n                 to be matched by this instance')
alaBgpAspathPriMatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpAspathPriMatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 5, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpAspathPriMatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpAspathPriMatchListRowStatus.setDescription('Row status variable.')
alaBgpCommunityPriMatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6), )
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListTable.setDescription('Priority sorted view of BGP Policy Community matching table.')
alaBgpCommunityPriMatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListPriority"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListIntIdx"))
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListEntry.setDescription('Community matching entry .')
alaBgpCommunityPriMatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListId.setDescription('Identifier of this list of communities matching criteria.')
alaBgpCommunityPriMatchListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListPriority.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListPriority.setDescription('This determines the order in which the matching regular\n                 expressions are applied in the list identified by\n                 alaBgpCommunityPriMatchListId.')
alaBgpCommunityPriMatchListIntIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListIntIdx.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListIntIdx.setDescription('This determines the order in which the matching regular\n                 expressions are created in the list identified by\n                 alaBgpCommunityPriMatchListId.')
alaBgpCommunityPriMatchListString = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListString.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListString.setDescription('The string identifying the communities to be matched by this instance.')
alaBgpCommunityPriMatchListType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exact", 1), ("occur", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListType.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListType.setDescription('This determines the matching type.')
alaBgpCommunityPriMatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpCommunityPriMatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 6, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpCommunityPriMatchListRowStatus.setDescription('Row status variable')
alaBgpPrefix6MatchListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7), )
if mibBuilder.loadTexts: alaBgpPrefix6MatchListTable.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListTable.setDescription('BGP Policy prefix6 matching criteria table.')
alaBgpPrefix6MatchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListAddr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListAddrLength"))
if mibBuilder.loadTexts: alaBgpPrefix6MatchListEntry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListEntry.setDescription('BGP Prefix6 matching instance.')
alaBgpPrefix6MatchListId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 70)))
if mibBuilder.loadTexts: alaBgpPrefix6MatchListId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListId.setDescription('Identifier of this list of autonomous system path matching criteria.')
alaBgpPrefix6MatchListAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 2), Ipv6Address())
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAddr.setDescription('The IPv6 Prefix to be matched. A value of 0 indicates default\n                 route prefix.')
alaBgpPrefix6MatchListAddrLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAddrLength.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAddrLength.setDescription('The length in bits of the IPv6 prefix being matched. A value of 0 indicates default\n                 route prefix.')
alaBgpPrefix6MatchListGE = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefix6MatchListGE.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListGE.setDescription('Specifies the minimum length of the mask to be matched. A value\n                 of 0 means this criteria is absent. The value of\n                 alaBgpPrefix6MatchListGE must be > length of\n                 (alaBgpPrefix6MatchListAddrLength) and < alaBgpPrefix6MatchListLE.')
alaBgpPrefix6MatchListLE = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefix6MatchListLE.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListLE.setDescription('Specifies the maximum length (inclusive) of the mask to be matched.\n                 A value of 0 means this criteria is absent. The value of\n                 alaBgpPrefix6MatchListLE must be >= alaBgpPrefix6MatchListGE and <= 128.')
alaBgpPrefix6MatchListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAction.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListAction.setDescription('This determines whether to accept or reject a matching route.')
alaBgpPrefix6MatchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 8, 7, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPrefix6MatchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListRowStatus.setDescription('Row status variable')
alaBgpNetwork6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9), )
if mibBuilder.loadTexts: alaBgpNetwork6Table.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6Table.setDescription('BGP Network6 configuration table.')
alaBgpNetwork6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6Addr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6MaskLen"))
if mibBuilder.loadTexts: alaBgpNetwork6Entry.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6Entry.setDescription('BGP Network6 entry.')
alaBgpNetwork6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 1), Ipv6Address().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetwork6Addr.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6Addr.setDescription('The IPv6 address of the BGP Network.')
alaBgpNetwork6MaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetwork6MaskLen.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6MaskLen.setDescription('The number of bits that are significant in the IPv6 address prefix of the BGP Network.')
alaBgpNetwork6State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpNetwork6State.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6State.setDescription('Indicates whether the network is being actively advertised or not.')
alaBgpNetwork6Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetwork6Metric.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6Metric.setDescription('This specifies the MED to be used when advertising this network to\n                 external peers. A value of 0 indicates not to send MED.')
alaBgpNetwork6LocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetwork6LocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6LocalPref.setDescription('This specifies the override default LOCAL PREF to be used when\n                 advertising this network to internal peers. A value of 0 indicates\n                 not to override the default.')
alaBgpNetwork6Community = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetwork6Community.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6Community.setDescription('The value to set the COMMUNITY attribute when advertising this network.')
alaBgpNetwork6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 9, 1, 7), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpNetwork6RowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpNetwork6RowStatus.setDescription('Row status variable.')
alaBgpRoute6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10), )
if mibBuilder.loadTexts: alaBgpRoute6Table.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6Table.setDescription('BGP IPv6 Routing table.')
alaBgpRoute6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpRoute6Addr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpRoute6MaskLen"))
if mibBuilder.loadTexts: alaBgpRoute6Entry.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6Entry.setDescription('BGP Route entry.')
alaBgpRoute6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6Addr.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6Addr.setDescription('Destination address.')
alaBgpRoute6MaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6MaskLen.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6MaskLen.setDescription('Destination address length.')
alaBgpRoute6State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6State.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6State.setDescription('Indicates whether the route is being actively advertised or not.')
alaBgpRoute6Paths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6Paths.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6Paths.setDescription('Number of total paths available to this destination.')
alaBgpRoute6FeasiblePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6FeasiblePaths.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6FeasiblePaths.setDescription('Number of Feasible paths available to this destination.')
alaBgpRoute6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 6), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6NextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6NextHop.setDescription('The BGP Nexthop to reach this destination.')
alaBgpRoute6IgpNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 7), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IgpNextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IgpNextHop.setDescription('The IGP Nexthop to reach this destination.')
alaBgpRoute6IsHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsHidden.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsHidden.setDescription('Indicates whether the route is hidden by an aggregate.')
alaBgpRoute6IsAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsAggregate.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsAggregate.setDescription('Indicates whether the route is an aggregate.')
alaBgpRoute6IsAggregateContributor = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateContributor.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateContributor.setDescription('Indicates whether the route is a contributor to an aggregate.')
alaBgpRoute6AdvNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6AdvNeighbors.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6AdvNeighbors.setDescription('List of (addresses of) neighbours to whom this route has been\n                 advertised is encoded here.')
alaBgpRoute6IsAggregateList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateList.setDescription('Indicates whether the route is on an aggregate list.')
alaBgpRoute6IsAggregateWait = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateWait.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsAggregateWait.setDescription('Indicates whether the route is an aggregate waiting for a contributor.')
alaBgpRoute6IsOnEbgpChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsOnEbgpChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsOnEbgpChgList.setDescription('Indicates whether the route is placed on list of EBGP routes.')
alaBgpRoute6IsOnIbgpClientChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsOnIbgpClientChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsOnIbgpClientChgList.setDescription('Indicates whether the route is placed on list of IBGP reflector-client routes.')
alaBgpRoute6IsOnIbgpChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsOnIbgpChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsOnIbgpChgList.setDescription('Indicates whether the route is placed on list of IBGP non-reflector-client routes.')
alaBgpRoute6IsOnLocalChgList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsOnLocalChgList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsOnLocalChgList.setDescription('Indicates whether the route is placed on list of local routes.')
alaBgpRoute6IsOnDeleteList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsOnDeleteList.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsOnDeleteList.setDescription('Indicates whether the route is placed on delete list.')
alaBgpRoute6IsDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpRoute6IsDampened.setStatus('current')
if mibBuilder.loadTexts: alaBgpRoute6IsDampened.setDescription('Indicates whether the route is being route flap dampened.')
alaBgpPath6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11), )
if mibBuilder.loadTexts: alaBgpPath6Table.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Table.setDescription('BGP Path table.')
alaBgpPath6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPath6Addr"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPath6MaskLen"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPath6PeerBgpId"), (0, "ALCATEL-IND1-BGP-MIB", "alaBgpPath6SrcProto"))
if mibBuilder.loadTexts: alaBgpPath6Entry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Entry.setDescription('BGP path6 entry.')
alaBgpPath6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Addr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Addr.setDescription('Destination address.')
alaBgpPath6MaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6MaskLen.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6MaskLen.setDescription('Destination address length.')
alaBgpPath6PeerBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6PeerBgpId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6PeerBgpId.setDescription('The BGP Identifier of the peer who sent this path. For locally\n                 sourced routes, the value is 0.0.0.0.')
alaBgpPath6SrcProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("static", 3), ("directHost", 4), ("rip", 5), ("ospf", 6), ("isis", 7), ("ebgp", 9), ("ibgp", 10), ("aggregate", 11), ("network", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6SrcProto.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6SrcProto.setDescription('The protocol from which the path was learnt.')
alaBgpPath6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Weight.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Weight.setDescription('The weight assigned to this path.')
alaBgpPath6Pref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Pref.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Pref.setDescription('The degree of preference assigned to this path.')
alaBgpPath6State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("best", 1), ("feasible", 2), ("policyWait", 3), ("unSynchronized", 4), ("dampened", 5), ("none", 6), ("stale", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6State.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6State.setDescription("Indicates the state of the path.  When path state is none it\n                 indicates that there are no paths to this prefix/len and the\n                 route is being purged from the system. Stale indicates that the\n                 peer that advertised this route's nexthop is in the process of\n                 graceful restart.")
alaBgpPath6Origin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Origin.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Origin.setDescription('The ORIGIN attribute of the path.')
alaBgpPath6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 9), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6NextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6NextHop.setDescription('The NEXTHOP attribute of the path.')
alaBgpPath6As = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6As.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6As.setDescription('The sequence of AS path segments.\n                 Each AS path segment is represented by a triple <TYPE, LENGTH, VALUE>.\n                 The TYPE is a 1-octet field which has two possible values:\n                     (1) AS_SET      : unordered set of ASs a route in the UPDATE message\n                                       has traversed.\n                     (2) AS_SEQUENCE : ordered set of ASs a route in the UPDATE message\n                                       has traversed.\n                 The LENGTH is a 1-octet field containing the number of ASs in\n                  the value field.\n                 The VALUE field contains one or more AS numbers, each AS is\n                  represented in the octet string as a pair of octets according to\n                  the following algorithm:\n                       first-byte-of-pair  = ASNumber / 256;\n                       second-byte-of-pair = ASNumber & 255;')
alaBgpPath6LocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6LocalPref.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6LocalPref.setDescription('The LOCAL_PREF attribute of the path.  A value of -1 indicates\n                 the absence of this attribute.')
alaBgpPath6Med = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Med.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Med.setDescription('The Multi Exit Disc. attribute of the path.  A value of 4294967295\n                 indicates the absence of this attribute.')
alaBgpPath6Atomic = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Atomic.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Atomic.setDescription('Indicates whether this path is generated without selecting a\n                 less specific route.')
alaBgpPath6AggregatorAs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 14), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6AggregatorAs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6AggregatorAs.setDescription('The AS number of the last BGP4 speaker that performed route\n                 aggregation. A value of 0 indicates the absence of this attribute.')
alaBgpPath6AggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6AggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6AggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route\n                 aggregation. A value of 0.0.0.0 indicates the absence of this\n                 attribute.')
alaBgpPath6Community = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6Community.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6Community.setDescription('The community attribute of the path. The communities are\n                 represented as series of 4 octet values.')
alaBgpPath6UnknownAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6UnknownAttr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6UnknownAttr.setDescription('One or more path attributes not understood by this BGP4 speaker.\n                 Size of zero (0) indicates the absence of such attribute(s).\n                 Octets beyond the maximum size, if any, are not recorded by\n                 this object.')
alaBgpPath6OriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6OriginatorId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6OriginatorId.setDescription('The Router Id of the BGP4 speaker that performed route reflection,\n                 if this is a reflected route in the local AS. A value of 0.0.0.0 indicates the\n                 absence of this attribute. Refer RFC 2796 (BGP Route Reflection), Section 7')
alaBgpPath6ClusterList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6ClusterList.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6ClusterList.setDescription('Sequence of Cluster Id values representing the reflection path that the route\n                 has passed, if this is a reflected route in the local AS. Size of zero (0)\n                 indicates the absence of this attribute.\n                 Refer RFC 2796 (BGP Route Reflection), Section 7')
alaBgpPath6PeerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 11, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPath6PeerName.setStatus('current')
if mibBuilder.loadTexts: alaBgpPath6PeerName.setDescription("The symbolic name of the peer that sent this path. For paths\n                 corresponding to local or redistributed routes on this router, the\n                 value is set to 'none'.")
alaBgpPeer6Table = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12), )
if mibBuilder.loadTexts: alaBgpPeer6Table.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Table.setDescription('BGP IPv6 peer table.')
alaBgpPeer6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Addr"))
if mibBuilder.loadTexts: alaBgpPeer6Entry.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Entry.setDescription('BGP IPv6 Peer configuration entry.')
alaBgpPeer6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6Addr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Addr.setDescription('Ipv6 Address of the peer.')
alaBgpPeer6AS = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 2), InetAutonomousSystemNumber().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6AS.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6AS.setDescription('Autonomous system of the peer.')
alaBgpPeer6Passive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Passive.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Passive.setDescription('Enable/Disable the peer passive status.  If enabled the peer\n                 will not initiate a transport connection.')
alaBgpPeer6Name = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Name.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Name.setDescription('A symbolic name for the neighbour.')
alaBgpPeer6MultiHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6MultiHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MultiHop.setDescription('If enabled the external peer is allowed to be multiple hops away.')
alaBgpPeer6MaxPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6MaxPrefix.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MaxPrefix.setDescription('The maximum prefixes to be accepted from this peer. If this maximum\n                 is reached, the peer will be sent a NOTIFY message with a CEASE ecode.')
alaBgpPeer6MaxPrefixWarnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6MaxPrefixWarnOnly.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MaxPrefixWarnOnly.setDescription("If enabled, the operator will be warned when the peer reaches\n                 80% of the configured maximum prefixes. To see this message,\n                 BGP switch logging for type 'warnings' must be activated and level\n                 set to info.")
alaBgpPeer6NextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6NextHopSelf.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6NextHopSelf.setDescription('If enabled, nexthop processing in the updates sent to this\n                 peer is disabled and is set to the IPv6 address of the interface\n                 attached to this peer.')
alaBgpPeer6SoftReconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6SoftReconfig.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6SoftReconfig.setDescription('Enable/Disable dynamic policy configurability on the connection\n                 to this peer.')
alaBgpPeer6InSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6InSoftReset.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6InSoftReset.setDescription('Route refresh capability is Enabled/Disabled on the connection\n                 to this peer.')
alaBgpPeer6Ipv4Unicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6Ipv4Unicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Ipv4Unicast.setDescription('Multiprotocol capability IPv4 Unicast is Enabled/Disabled on\n                 the connection to this peer .')
alaBgpPeer6Ipv4Multicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6Ipv4Multicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Ipv4Multicast.setDescription('Multiprotocol capability IPv4 Multicast is Enabled/Disabled\n                 on the connection to this peer .')
alaBgpPeer6RcvdRtRefreshMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RcvdRtRefreshMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RcvdRtRefreshMsgs.setDescription('The number of route refresh messages received from this peer.')
alaBgpPeer6SentRtRefreshMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6SentRtRefreshMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6SentRtRefreshMsgs.setDescription('The number of route refresh messages sent to this peer.')
alaBgpPeer6RouteMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6RouteMapOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RouteMapOut.setDescription('The name of the policy map to be applied to the updates sent to this peer.\n                 This is same as alaBgpPolicyRouteMapName.')
alaBgpPeer6RouteMapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6RouteMapIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RouteMapIn.setDescription('The name of the policy map to be applied to the updates received from\n                 this peer. This is same as alaBgpPolicyRouteMapName.')
alaBgpPeer6LocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 17), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6LocalAddr.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LocalAddr.setDescription('Local IPv6 address of this connection.')
alaBgpPeer6LastDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userRequest", 1), ("connectionTimeout", 2), ("holdTimeout", 3), ("badMsg", 4), ("fsmUnexpectedEvent", 5), ("peerClosed", 6), ("peerNotify", 7), ("transportError", 8), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastDownReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastDownReason.setDescription('The general reason for termination of last established session\n                 with the peer since the protocol was operationally up.')
alaBgpPeer6LastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastDownTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastDownTime.setDescription('The time elapsed since the BGP session with the peer was terminated.')
alaBgpPeer6LastReadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastReadTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastReadTime.setDescription('The time elapsed since we last read data from the peer.')
alaBgpPeer6RcvdNotifyMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RcvdNotifyMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RcvdNotifyMsgs.setDescription('The Number of notification messages received from this peer.')
alaBgpPeer6SentNotifyMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6SentNotifyMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6SentNotifyMsgs.setDescription('The Number of notification messages sent to this peer.')
alaBgpPeer6LastSentNotifyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("msghdrNoSync", 1), ("msghdrBadLen", 2), ("msghdrBadType", 3), ("openUnsuppVersion", 4), ("openBadAs", 5), ("openBadId", 6), ("openUnsuppOption", 7), ("openAuthFail", 8), ("openBadHoldtime", 9), ("openUnsuppCapability", 10), ("updateMalformAttr", 11), ("updateUnsuppWknwnAttr", 12), ("updateMissingWknwnAttr", 13), ("updateBadAttrFlags", 14), ("updateBadAttrLen", 15), ("updateBadOrigin", 16), ("updateAsLoop", 17), ("updateBadNexthop", 18), ("updateBadOptAttr", 19), ("updateBadNet", 20), ("updateBadAspath", 21), ("holdTimeout", 22), ("fsmError", 23), ("ceaseMaxPrefixReached", 24), ("ceaseAdminShutdown", 25), ("ceasePeerDeconfigured", 26), ("ceaseAdminReset", 27), ("ceaseConnRejected", 28), ("ceaseOtherConfChange", 29), ("ceaseConnCollisionResolution", 30), ("ceaseOutOfResources", 31), ("none", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastSentNotifyReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastSentNotifyReason.setDescription('The last notification reason sent.')
alaBgpPeer6LastRecvNotifyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("msghdrNoSync", 1), ("msghdrBadLen", 2), ("msghdrBadType", 3), ("openUnsuppVersion", 4), ("openBadAs", 5), ("openBadId", 6), ("openUnsuppOption", 7), ("openAuthFail", 8), ("openBadHoldtime", 9), ("openUnsuppCapability", 10), ("updateMalformAttr", 11), ("updateUnsuppWknwnAttr", 12), ("updateMissingWknwnAttr", 13), ("updateBadAttrFlags", 14), ("updateBadAttrLen", 15), ("updateBadOrigin", 16), ("updateAsLoop", 17), ("updateBadNexthop", 18), ("updateBadOptAttr", 19), ("updateBadNet", 20), ("updateBadAspath", 21), ("holdTimeout", 22), ("fsmError", 23), ("ceaseMaxPrefixReached", 24), ("ceaseAdminShutdown", 25), ("ceasePeerDeconfigured", 26), ("ceaseAdminReset", 27), ("ceaseConnRejected", 28), ("ceaseOtherConfChange", 29), ("ceaseConnCollisionResolution", 30), ("ceaseOutOfResources", 31), ("none", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastRecvNotifyReason.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastRecvNotifyReason.setDescription('The last notification reason received.')
alaBgpPeer6RcvdPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RcvdPrefixes.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RcvdPrefixes.setDescription('The Number of prefixes received from this peer.')
alaBgpPeer6DownTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6DownTransitions.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6DownTransitions.setDescription('The Number of times this peer session transitioned to IDLE state.')
alaBgpPeer6Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6Type.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Type.setDescription('This indicates whether the peer belongs to the local autonomous\n                 system(internal) or another autonomous system.')
alaBgpPeer6ClearCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1))).clone('clear')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ClearCounter.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ClearCounter.setDescription('Setting a value of clear into this variable will clear the\n                 per peer statistics.')
alaBgpPeer6AutoReStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6AutoReStart.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6AutoReStart.setDescription('Enable/Disable the peer autostart status.  If enabled, the peer\n                 will be automatically restarted (if administratively enabled)\n                 after the transition to IDLE state.')
alaBgpPeer6ClientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ClientStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ClientStatus.setDescription('If enabled this peer is a route reflection client.')
alaBgpPeer6ConfedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ConfedStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ConfedStatus.setDescription('If enabled this peer is a member of our confederation.')
alaBgpPeer6RemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6RemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RemovePrivateAs.setDescription('If enabled private as numbers are stripped out in the updates\n                 sent to this peer.')
alaBgpPeer6TTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6TTL.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6TTL.setDescription('TTL count for packets on this TCP connection.')
alaBgpPeer6AspathListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 34), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6AspathListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6AspathListOut.setDescription('The name of the aspath-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpAspathMatchListId.')
alaBgpPeer6AspathListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 35), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6AspathListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6AspathListIn.setDescription('The name of the aspath-list to be applied to the updates\n                 received from this peer. This is same as alaBgpAspathMatchListId.')
alaBgpPeer6PrefixListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 36), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6PrefixListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6PrefixListOut.setDescription('The name of the prefix-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpPrefixMatchListId.')
alaBgpPeer6PrefixListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 37), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6PrefixListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6PrefixListIn.setDescription('The name of the prefix-list to be applied to the updates\n                 received from this peer. This is same as alaBgpPrefixMatchListId.')
alaBgpPeer6CommunityListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 38), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6CommunityListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6CommunityListOut.setDescription('The name of the community-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpCommunityMatchListId.')
alaBgpPeer6CommunityListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 39), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6CommunityListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6CommunityListIn.setDescription('The name of the community-list to be applied to the updates\n                 received from this peer. This is same as alaBgpCommunityMatchListId.')
alaBgpPeer6Restart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1))).clone('restart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Restart.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Restart.setDescription('Setting a value of restart into this variable will restart the peer.')
alaBgpPeer6DefaultOriginate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6DefaultOriginate.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6DefaultOriginate.setDescription('If enabled a default route is sent to this neighbour.')
alaBgpPeer6ReconfigureInBound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reconfigure", 1))).clone('reconfigure')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ReconfigureInBound.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ReconfigureInBound.setDescription('Setting a value of reconfigure into this variable will\n                 re-start inbound policy evaluation of the peer.')
alaBgpPeer6ReconfigureOutBound = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reconfigure", 1))).clone('reconfigure')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ReconfigureOutBound.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ReconfigureOutBound.setDescription('Setting a value of reconfigure into this variable will re-start\n                 outbound policy evaluation of the peer.')
alaBgpPeer6MD5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 44), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6MD5Key.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MD5Key.setDescription('Value of the MD5 key used in TCP connection with the peer.\n                 This field is secured and returned value is non significant.')
alaBgpPeer6MD5KeyEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 45), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6MD5KeyEncrypt.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MD5KeyEncrypt.setDescription('Value of the MD5 key encrypted using 3DES algorithm.\n                 It is calculated from MD5 key value, and is used only to restore\n                 configuration on reboot.')
alaBgpPeer6RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 46), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6RowStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RowStatus.setDescription('Row status variable.')
alaBgpPeer6UpTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6UpTransitions.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6UpTransitions.setDescription('The Number of times this peer session transitioned to ESTABLISHED state.')
alaBgpPeer6LastWriteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 48), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastWriteTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastWriteTime.setDescription('The time elapsed since we last sent data to the peer.')
alaBgpPeer6RcvdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RcvdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RcvdMsgs.setDescription('The Number of messages received from the peer.')
alaBgpPeer6SentMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6SentMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6SentMsgs.setDescription('The Number of messages sent to the peer.')
alaBgpPeer6RcvdUpdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RcvdUpdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RcvdUpdMsgs.setDescription('The Number of update messages received from the peer.')
alaBgpPeer6SentUpdMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6SentUpdMsgs.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6SentUpdMsgs.setDescription('The Number of update messages sent to the peer.')
alaBgpPeer6LastTransitionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 53), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastTransitionTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastTransitionTime.setDescription('The time elapsed since the BGP session was operationally up or down to the peer.')
alaBgpPeer6LastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 54), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LastUpTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LastUpTime.setDescription('The time elapsed since the BGP session with the peer was established.')
alaBgpPeer6BgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 55), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6BgpId.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6BgpId.setDescription('BGP Identifier of the peer.')
alaBgpPeer6LocalIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 56), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6LocalIntfName.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LocalIntfName.setDescription("The user defined name used to identify the local IPv6 interface for this\n                 peer's TCP connection.")
alaBgpPeer6RestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RestartTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RestartTime.setDescription('The graceful restart time interval advertised by this peer. A value of 0 indicates\n                 that this peer is not capable of graceful restart, and has not advertised this capability.')
alaBgpPeer6RestartState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("restarting", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RestartState.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RestartState.setDescription('Indicates whether the peer is currently performing a graceful restart. A value of none\n                 indicates that this peer is not capable of graceful restart.')
alaBgpPeer6RestartFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPreserved", 1), ("preserved", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6RestartFwdState.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6RestartFwdState.setDescription('Indicates whether the peer has preserved the forwarding state during\n                 the graceful restart. This value is defined only for a peer that has advertised\n                 graceful restart capability. For peers that are not capable of graceful restart,\n                 this value will be notPreserved.')
alaBgpPeer6Ipv6Unicast = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6Ipv6Unicast.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Ipv6Unicast.setDescription('Indicates whether the peer has advertised Multiprotocol IPv6 Unicast capability\n                 in its BGP OPEN message.')
alaBgpPeer6HoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6HoldTime.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6HoldTime.setDescription('Time interval in seconds for the Hold Timer established with the peer.\n                 The value of this object is calculated by this BGP speaker by using the\n                 smaller of the value in alaBgpPeer6HoldTimeConfigured and the Hold Time\n                 received in the OPEN message. This value must be at lease three seconds\n                 if it is not zero (0) in which case the session has not been\n                 established with the peer, or, the value of alaBgpPeer6HoldTimeConfigured\n                 is zero (0).')
alaBgpPeer6KeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6KeepAlive.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6KeepAlive.setDescription('Time interval in seconds for the KeepAlive timer established with the peer.\n                 The value of this object is calculated by this BGP speaker such that,\n                 when compared with alaBgpPeer6HoldTime, it has the same proportion as what\n                 alaBgpPeer6KeepAliveConfigured has when compared with alaBgpPeer6HoldTimeConfigured.\n                 If the value of this object is zero (0), it indicates that the session\n                 has not been established with the peer, or, the value of\n                 alaBgpPeer6KeepAliveConfigured is zero (0).')
alaBgpPeer6ConnRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ConnRetryInterval.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ConnRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value\n                 for this timer is 120 seconds.')
alaBgpPeer6HoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6HoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6HoldTimeConfigured.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker\n                 with this peer. This value is placed in an OPEN message sent to this peer\n                 by this BGP speaker, and is compared with the Hold Time field in an OPEN\n                 message received from the peer when determining the Hold Time\n                 (alaBgpPeer6HoldTime) with the peer. This value must not be less than\n                 three seconds if it is not zero (0) in which case the Hold Time is NOT\n                 to be negotiated with the peer. The suggested value for this timer\n                 is 90 seconds.')
alaBgpPeer6KeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6KeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6KeepAliveConfigured.setDescription("Time interval in seconds for the KeepAlive timer configured for this BGP\n                 speaker with this peer. The value of this object will only determine the\n                 KEEPALIVE messages' frequency relative to the value specified in\n                 alaBgpPeer6HoldTimeConfigured; the actual time interval for the KEEPALIVE\n                 messages is indicated by alaBgpPeer6KeepAlive. A reasonable maximum value\n                 for this timer would be configured to be one third of that of\n                 alaBgpPeer6HoldTimeConfigured. If the value of this object is zero (0),\n                 no periodical KEEPALIVE messages are sent to the peer after the BGP\n                 connection has been established.  The suggested value for this timer\n                 is 30 seconds.")
alaBgpPeer6Ipv4NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 66), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Ipv4NextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Ipv4NextHop.setDescription('The IPv4 nexthop address to be used for IPv4 routes advertised to this peer.')
alaBgpPeer6Ipv6NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 67), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Ipv6NextHop.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Ipv6NextHop.setDescription('The IPv6 nexthop address to be used for IPv6 routes advertised to this peer.')
alaBgpPeer6AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6AdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6AdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start'\n                 will cause the BGP Start Event to be generated. A transition from 'start' to\n                 'stop' will cause the BGP Stop Event to be generated. This parameter can be\n                 used to restart BGP peer connections. Care should be used in providing\n                 write access to this object without adequate authentication.")
alaBgpPeer6State = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6State.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6State.setDescription('The BGP peer connection state.')
alaBgpPeer6LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6LocalPort.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6LocalPort.setDescription("The local port number for this peer's TCP connection.")
alaBgpPeer6TcpWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaBgpPeer6TcpWindowSize.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6TcpWindowSize.setDescription('The size of the socket buffers, in bytes, used for this TCP connection.')
alaBgpPeer6ActivateIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ActivateIpv6.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ActivateIpv6.setDescription('If enabled, the Multiprotocol IPv6 Unicast capability is advertised to\n                 this peer. If disabled, the capability is not advertised in the OPEN message.')
alaBgpPeer6MinRouteAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6MinRouteAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6MinRouteAdvertisementInterval.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer.')
alaBgpPeer6Prefix6ListOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 74), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Prefix6ListOut.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Prefix6ListOut.setDescription('The name of the prefix6-list to be applied to the updates\n                 sent to this peer. This is same as alaBgpPrefix6MatchListId.')
alaBgpPeer6Prefix6ListIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 75), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 70))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6Prefix6ListIn.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6Prefix6ListIn.setDescription('The name of the prefix6-list to be applied to the updates\n                 received from this peer. This is same as alaBgpPrefix6MatchListId.')
alaBgpPeer6ActivateIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6ActivateIpv4.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6ActivateIpv4.setDescription('If enabled, the Multiprotocol IPv4 Unicast capability is advertised to\n                 this peer. If disabled, the capability is not advertised in the OPEN message.')
alaBgpPeer6BfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 1, 12, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaBgpPeer6BfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaBgpPeer6BfdStatus.setDescription('Enables/Disables BFd for a particular Peer.')
alcatelIND1BGPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-BGP-MIB", "alabgpMIBGlobalsGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBPeerGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBAggrGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBNetworkGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBRouteGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBPathAttrGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBDampGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBRouteMapGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBAspathListGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBPrefixListGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBCommunityListGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBAspathPriListGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBCommunityPriListGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBNetwork6Group"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBRoute6Group"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBPath6AttrGroup"), ("ALCATEL-IND1-BGP-MIB", "alabgpMIBPeer6Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1BGPMIBCompliance = alcatelIND1BGPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1BGPMIBCompliance.setDescription('The compliance statement for entities which implement the BGP4 mib.')
alabgpMIBGlobalsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpProtoStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAutonomousSystemNumber"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouterId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpIgpSynchStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMedAlways"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDefaultLocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMissingMed"), ("ALCATEL-IND1-BGP-MIB", "alaBgpManualTag"), ("ALCATEL-IND1-BGP-MIB", "alaBgpConfedId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampening"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampHalfLife"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampMaxFlapHistory"), ("ALCATEL-IND1-BGP-MIB", "alaBgpFastExternalFailOver"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerChanges"), ("ALCATEL-IND1-BGP-MIB", "alaBgpVersion"), ("ALCATEL-IND1-BGP-MIB", "alaBgpProtoOperState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMaxPeers"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumActiveRoutes"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumEstabExternalPeers"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumEstabInternalPeers"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumPaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumFeasiblePaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumDampenedPaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumIgpSyncWaitPaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNumPolicyChgPaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMultiPath"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteReflection"), ("ALCATEL-IND1-BGP-MIB", "alaBgpClusterId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampeningClear"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampCutOff"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampReuse"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampCeil"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathCompare"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAsOriginInterval"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMultiProtocolIpv4"), ("ALCATEL-IND1-BGP-MIB", "alaBgpMultiProtocolIpv6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpBfdStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpBfdAllNeighborStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpGracefulRestart"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRestartInterval"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRestartStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAsnFormat"), ("ALCATEL-IND1-BGP-MIB", "alaBgpClearAllNeighborStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBGlobalsGroup = alabgpMIBGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBGlobalsGroup.setDescription('A collection of objects providing information on global BGP state.')
alabgpMIBPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPeerAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerAS"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPassive"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerName"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerMultiHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerMaxPrefix"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerMaxPrefixWarnOnly"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerNextHopSelf"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerSoftReconfig"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerInSoftReset"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv4Unicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv4Multicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRcvdRtRefreshMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerSentRtRefreshMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRouteMapOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRouteMapIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLocalAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastDownReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastDownTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastReadTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRcvdNotifyMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerSentNotifyMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastSentNotifyReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastRecvNotifyReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRcvdPrefixes"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerDownTransitions"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerType"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerAutoReStart"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerClientStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerConfedStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRemovePrivateAs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerClearCounter"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerTTL"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerAspathListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerAspathListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefixListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefixListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerCommunityListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerCommunityListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRestart"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerDefaultOriginate"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerReconfigureInBound"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerReconfigureOutBound"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerMD5Key"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerMD5KeyEncrypt"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRowStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerUpTransitions"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastWriteTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRcvdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerSentMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRcvdUpdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerSentUpdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv6Unicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv6NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLocalPort"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerTcpWindowSize"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerActivateIpv6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerBfdStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefix6ListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefix6ListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerActivateIpv4"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBPeerGroup = alabgpMIBPeerGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBPeerGroup.setDescription('A collection of objects for managing BGP peers.')
alabgpMIBAggrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpAggrAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrSummarize"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrSet"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrMetric"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrLocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrCommunity"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAggrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBAggrGroup = alabgpMIBAggrGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBAggrGroup.setDescription('A collection of objects for managing BGP aggregates.')
alabgpMIBNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkMetric"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkLocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkCommunity"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetworkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBNetworkGroup = alabgpMIBNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBNetworkGroup.setDescription('A collection of objects for managing BGP networks.')
alabgpMIBRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpRouteAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoutePaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteFeasiblePaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteNextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIgpNextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsHidden"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsAggregate"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsAggregateContributor"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteAdvNeighbors"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsAggregateList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsAggregateWait"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsOnEbgpChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsOnIbgpClientChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsOnIbgpChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsOnLocalChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsOnDeleteList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteIsDampened"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBRouteGroup = alabgpMIBRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBRouteGroup.setDescription('A collection of objects for managing BGP routes.')
alabgpMIBPathAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPathAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathPeerAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathSrcProto"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathWeight"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathOrigin"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathNextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathAs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathLocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathMed"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathAtomic"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathAggregatorAs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathAggregatorAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathCommunity"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathUnknownAttr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathOriginatorId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathClusterList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathPeerInetType"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPathPeerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBPathAttrGroup = alabgpMIBPathAttrGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBPathAttrGroup.setDescription('A collection of objects for managing BGP paths attributes.')
alabgpMIBDampGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpDampAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampPeerAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampFigureOfMerit"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampFlaps"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampDuration"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampLastUpdateTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampReuseTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpDampClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBDampGroup = alabgpMIBDampGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBDampGroup.setDescription('A collection of objects for managing BGP dampening.')
alabgpMIBRouteMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapName"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapInst"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapAsPathMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapPrefixMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapCommunityMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapOrigin"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapLocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapLocalPrefMode"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMed"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMedMode"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapAsPrepend"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapSetCommunityMode"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapCommunity"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchAsRegExp"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchPrefix"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchCommunity"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapWeight"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapRowStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapPrefix6MatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchPrefix6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapMatchMaskLength6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRouteMapCommunityStrip"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBRouteMapGroup = alabgpMIBRouteMapGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBRouteMapGroup.setDescription('A collection of objects for managing BGP route maps.')
alabgpMIBAspathListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListRegExp"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListPriority"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListRowStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathMatchListSubIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBAspathListGroup = alabgpMIBAspathListGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBAspathListGroup.setDescription('A collection of objects for managing BGP aspath lists.')
alabgpMIBPrefixListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListMask"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListGE"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListLE"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefixMatchListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBPrefixListGroup = alabgpMIBPrefixListGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBPrefixListGroup.setDescription('A collection of objects for managing BGP prefix lists.')
alabgpMIBCommunityListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListString"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListPriority"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListType"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListRowStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityMatchListSubIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBCommunityListGroup = alabgpMIBCommunityListGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBCommunityListGroup.setDescription('A collection of objects for managing BGP community lists.')
alabgpMIBAspathPriListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListPriority"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListIntIdx"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListRegExp"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpAspathPriMatchListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBAspathPriListGroup = alabgpMIBAspathPriListGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBAspathPriListGroup.setDescription('A collection of objects for managing BGP aspath lists by priority.')
alabgpMIBCommunityPriListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 13)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListPriority"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListIntIdx"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListString"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListType"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpCommunityPriMatchListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBCommunityPriListGroup = alabgpMIBCommunityPriListGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBCommunityPriListGroup.setDescription('A collection of objects for managing BGP community lists by priority.')
alabgpMIBNetwork6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 14)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6Addr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6MaskLen"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6State"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6Metric"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6LocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6Community"), ("ALCATEL-IND1-BGP-MIB", "alaBgpNetwork6RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBNetwork6Group = alabgpMIBNetwork6Group.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBNetwork6Group.setDescription('A collection of objects for managing BGP IPv6 networks.')
alabgpMIBRoute6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 15)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6Addr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6MaskLen"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6State"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6Paths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6FeasiblePaths"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IgpNextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsHidden"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsAggregate"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsAggregateContributor"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6AdvNeighbors"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsAggregateList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsAggregateWait"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsOnEbgpChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsOnIbgpClientChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsOnIbgpChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsOnLocalChgList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsOnDeleteList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpRoute6IsDampened"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBRoute6Group = alabgpMIBRoute6Group.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBRoute6Group.setDescription('A collection of objects for managing BGP routes.')
alabgpMIBPath6AttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 16)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Addr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6MaskLen"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6PeerBgpId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6SrcProto"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Weight"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Pref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6State"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Origin"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6As"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6LocalPref"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Med"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Atomic"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6AggregatorAs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6AggregatorAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6Community"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6UnknownAttr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6OriginatorId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6ClusterList"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPath6PeerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBPath6AttrGroup = alabgpMIBPath6AttrGroup.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBPath6AttrGroup.setDescription('A collection of objects for managing BGP paths attributes.')
alabgpMIBPeer6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 17)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Addr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6AS"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Passive"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Name"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MultiHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MaxPrefix"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MaxPrefixWarnOnly"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6NextHopSelf"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6SoftReconfig"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6InSoftReset"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Ipv4Unicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Ipv4Multicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RcvdRtRefreshMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6SentRtRefreshMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RouteMapOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RouteMapIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LocalAddr"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastDownReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastDownTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastReadTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RcvdNotifyMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6SentNotifyMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastSentNotifyReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastRecvNotifyReason"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RcvdPrefixes"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6DownTransitions"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Type"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6AutoReStart"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ClientStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ConfedStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RemovePrivateAs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ClearCounter"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6TTL"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6AspathListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6AspathListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6PrefixListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6PrefixListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6CommunityListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6CommunityListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Restart"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6DefaultOriginate"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ReconfigureInBound"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ReconfigureOutBound"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MD5Key"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MD5KeyEncrypt"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RowStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6UpTransitions"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastWriteTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RcvdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6SentMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RcvdUpdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6SentUpdMsgs"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Ipv6Unicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6HoldTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6KeepAlive"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ConnRetryInterval"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6HoldTimeConfigured"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6KeepAliveConfigured"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Ipv4NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Ipv6NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6AdminStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6State"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LocalPort"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6TcpWindowSize"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ActivateIpv6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6MinRouteAdvertisementInterval"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Prefix6ListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6Prefix6ListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6BgpId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastTransitionTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LastUpTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6LocalIntfName"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RestartFwdState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RestartState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6RestartTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerBgpId"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastTransitionTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLastUpTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLocalIntfName"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRestartTime"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRestartState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerRestartFwdState"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv6Unicast"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerIpv6NextHop"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerLocalPort"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerTcpWindowSize"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerActivateIpv6"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerBfdStatus"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefix6ListOut"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeerPrefix6ListIn"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6ActivateIpv4"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPeer6BfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alabgpMIBPeer6Group = alabgpMIBPeer6Group.setStatus('current')
if mibBuilder.loadTexts: alabgpMIBPeer6Group.setDescription('A collection of objects for managing BGP peers.')
alaBgpPrefix6MatchListEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 5, 1, 2, 1, 18)).setObjects(("ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListGE"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListLE"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListAction"), ("ALCATEL-IND1-BGP-MIB", "alaBgpPrefix6MatchListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaBgpPrefix6MatchListEntryGroup = alaBgpPrefix6MatchListEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaBgpPrefix6MatchListEntryGroup.setDescription('Identifier of this list of autonomous system path matching criteria.')
mibBuilder.exportSymbols("ALCATEL-IND1-BGP-MIB", alaBgpRoute6IsOnIbgpClientChgList=alaBgpRoute6IsOnIbgpClientChgList, alaBgpIgpSynchStatus=alaBgpIgpSynchStatus, alaBgpRouteMapName=alaBgpRouteMapName, alaBgpPeerBfdStatus=alaBgpPeerBfdStatus, alaBgpCommunityMatchListAction=alaBgpCommunityMatchListAction, alaBgpPeerLastSentNotifyReason=alaBgpPeerLastSentNotifyReason, alaBgpRestartStatus=alaBgpRestartStatus, alaBgpPeer6LastDownReason=alaBgpPeer6LastDownReason, alaBgpRouteIsOnDeleteList=alaBgpRouteIsOnDeleteList, alaBgpPeerType=alaBgpPeerType, alaBgpPeerRestartState=alaBgpPeerRestartState, alaBgpNetworkState=alaBgpNetworkState, alaBgpPeer6RestartFwdState=alaBgpPeer6RestartFwdState, alaBgpMedAlways=alaBgpMedAlways, alaBgpProtoOperState=alaBgpProtoOperState, alaBgpFastExternalFailOver=alaBgpFastExternalFailOver, alaBgpPeerRcvdMsgs=alaBgpPeerRcvdMsgs, alaBgpAspathMatchListRegExp=alaBgpAspathMatchListRegExp, alaBgpDampReuse=alaBgpDampReuse, alaBgpCommunityPriMatchListString=alaBgpCommunityPriMatchListString, alaBgpAspathPriMatchListRowStatus=alaBgpAspathPriMatchListRowStatus, alaBgpCommunityMatchListSubIndex=alaBgpCommunityMatchListSubIndex, alaBgpPeer6Ipv4NextHop=alaBgpPeer6Ipv4NextHop, alaBgpRoute6IsHidden=alaBgpRoute6IsHidden, alaBgpPeer6CommunityListIn=alaBgpPeer6CommunityListIn, alaBgpMultiProtocolIpv4=alaBgpMultiProtocolIpv4, alaBgpPrefix6MatchListId=alaBgpPrefix6MatchListId, alaBgpRouteMapSetCommunityMode=alaBgpRouteMapSetCommunityMode, alaBgpPeerTable=alaBgpPeerTable, alaBgpRouteIsAggregateWait=alaBgpRouteIsAggregateWait, alaBgpCommunityPriMatchListRowStatus=alaBgpCommunityPriMatchListRowStatus, alaBgpPeerPrefixListIn=alaBgpPeerPrefixListIn, alaBgpPeerIpv6Unicast=alaBgpPeerIpv6Unicast, alaBgpRouteMapCommunityMatchListId=alaBgpRouteMapCommunityMatchListId, alaBgpNetworkAddr=alaBgpNetworkAddr, alaBgpPath6Pref=alaBgpPath6Pref, alaBgpPathNextHop=alaBgpPathNextHop, alaBgpPeer6SoftReconfig=alaBgpPeer6SoftReconfig, alaBgpRoute6IgpNextHop=alaBgpRoute6IgpNextHop, alaBgpPeerClientStatus=alaBgpPeerClientStatus, alaBgpAggrMask=alaBgpAggrMask, alaBgpPeerTcpWindowSize=alaBgpPeerTcpWindowSize, alaBgpPathMask=alaBgpPathMask, alaBgpPath6Entry=alaBgpPath6Entry, alaBgpMaxPeers=alaBgpMaxPeers, alaBgpRoute6MaskLen=alaBgpRoute6MaskLen, alaBgpPeer6BfdStatus=alaBgpPeer6BfdStatus, alaBgpPrefix6MatchListEntryGroup=alaBgpPrefix6MatchListEntryGroup, alaBgpPath6PeerName=alaBgpPath6PeerName, alaBgpPeer6UpTransitions=alaBgpPeer6UpTransitions, alaBgpPeer6ActivateIpv6=alaBgpPeer6ActivateIpv6, alaBgpPeerRcvdNotifyMsgs=alaBgpPeerRcvdNotifyMsgs, alaBgpAspathMatchListTable=alaBgpAspathMatchListTable, alaBgpPathMed=alaBgpPathMed, alabgpMIBPeerGroup=alabgpMIBPeerGroup, alaBgpPolicy=alaBgpPolicy, alaBgpAggrEntry=alaBgpAggrEntry, alaBgpPathAddr=alaBgpPathAddr, alaBgpCommunityMatchListType=alaBgpCommunityMatchListType, alaBgpPath6Addr=alaBgpPath6Addr, alaBgpPeer6Type=alaBgpPeer6Type, alaBgpPeerAspathListOut=alaBgpPeerAspathListOut, alabgpMIBDampGroup=alabgpMIBDampGroup, alaBgpPeerConfedStatus=alaBgpPeerConfedStatus, alaBgpPeer6MD5Key=alaBgpPeer6MD5Key, alaBgpCommunityPriMatchListIntIdx=alaBgpCommunityPriMatchListIntIdx, alaBgpRouteMapPrefixMatchListId=alaBgpRouteMapPrefixMatchListId, alaBgpPeer6ConnRetryInterval=alaBgpPeer6ConnRetryInterval, alaBgpNetworkMetric=alaBgpNetworkMetric, alaBgpPeer6LastReadTime=alaBgpPeer6LastReadTime, alaBgpNetwork6Metric=alaBgpNetwork6Metric, alaBgpPath6Origin=alaBgpPath6Origin, alaBgpPeer6TcpWindowSize=alaBgpPeer6TcpWindowSize, alaBgpRouteMapMatchAsRegExp=alaBgpRouteMapMatchAsRegExp, alaBgpNumIgpSyncWaitPaths=alaBgpNumIgpSyncWaitPaths, alaBgpPeer6RcvdPrefixes=alaBgpPeer6RcvdPrefixes, alaBgpCommunityPriMatchListType=alaBgpCommunityPriMatchListType, alaBgpNumDampenedPaths=alaBgpNumDampenedPaths, alaBgpRouteState=alaBgpRouteState, alaBgpDampFigureOfMerit=alaBgpDampFigureOfMerit, alaBgpRoute6IsDampened=alaBgpRoute6IsDampened, alaBgpPath6State=alaBgpPath6State, alaBgpDefaultLocalPref=alaBgpDefaultLocalPref, alaBgpAspathMatchListRowStatus=alaBgpAspathMatchListRowStatus, alaBgpCommunityPriMatchListPriority=alaBgpCommunityPriMatchListPriority, alaBgpPathCommunity=alaBgpPathCommunity, alaBgpPeer6Prefix6ListIn=alaBgpPeer6Prefix6ListIn, alaBgpPeer6RcvdRtRefreshMsgs=alaBgpPeer6RcvdRtRefreshMsgs, alaBgpRouteMask=alaBgpRouteMask, alaBgpPeerActivateIpv4=alaBgpPeerActivateIpv4, alaBgpAspathMatchListEntry=alaBgpAspathMatchListEntry, alaBgpPrefixMatchListLE=alaBgpPrefixMatchListLE, alaBgpPeer6HoldTimeConfigured=alaBgpPeer6HoldTimeConfigured, alaBgpPeer6HoldTime=alaBgpPeer6HoldTime, alaBgpPeer6Prefix6ListOut=alaBgpPeer6Prefix6ListOut, alaBgpPeerSentNotifyMsgs=alaBgpPeerSentNotifyMsgs, alaBgpPeer6NextHopSelf=alaBgpPeer6NextHopSelf, alaBgpAggrState=alaBgpAggrState, alaBgpAggrTable=alaBgpAggrTable, alaBgpPeerSentRtRefreshMsgs=alaBgpPeerSentRtRefreshMsgs, alaBgpBfdStatus=alaBgpBfdStatus, alaBgpRouteIgpNextHop=alaBgpRouteIgpNextHop, alaBgpRoute6IsAggregate=alaBgpRoute6IsAggregate, alaBgpPrefix6MatchListTable=alaBgpPrefix6MatchListTable, alaBgpPeer6InSoftReset=alaBgpPeer6InSoftReset, alaBgpNumEstabExternalPeers=alaBgpNumEstabExternalPeers, alaBgpAsnFormat=alaBgpAsnFormat, alaBgpPeer6PrefixListIn=alaBgpPeer6PrefixListIn, alaBgpPeerChanges=alaBgpPeerChanges, alaBgpPeerLocalAddr=alaBgpPeerLocalAddr, alaBgpPeer6Restart=alaBgpPeer6Restart, alaBgpNetwork6MaskLen=alaBgpNetwork6MaskLen, alaBgpPeer6Ipv4Unicast=alaBgpPeer6Ipv4Unicast, alaBgpPathPeerAddr=alaBgpPathPeerAddr, alaBgpMultiPath=alaBgpMultiPath, alaBgpPeerRestartFwdState=alaBgpPeerRestartFwdState, alaBgpNetwork6LocalPref=alaBgpNetwork6LocalPref, alaBgpPeerRestartTime=alaBgpPeerRestartTime, alaBgpDampClear=alaBgpDampClear, alaBgpPeer6KeepAlive=alaBgpPeer6KeepAlive, alaBgpNumPaths=alaBgpNumPaths, alaBgpAspathPriMatchListEntry=alaBgpAspathPriMatchListEntry, alabgpMIBAspathListGroup=alabgpMIBAspathListGroup, alaBgpPrefix6MatchListAction=alaBgpPrefix6MatchListAction, alaBgpPeer6Passive=alaBgpPeer6Passive, alaBgpDampReuseTime=alaBgpDampReuseTime, alaBgpRouteMapCommunity=alaBgpRouteMapCommunity, alaBgpPrefixMatchListAction=alaBgpPrefixMatchListAction, alaBgpPeer6RcvdNotifyMsgs=alaBgpPeer6RcvdNotifyMsgs, alaBgpPeerPrefix6ListIn=alaBgpPeerPrefix6ListIn, alaBgpPeer6KeepAliveConfigured=alaBgpPeer6KeepAliveConfigured, alaBgpPeer6RestartTime=alaBgpPeer6RestartTime, alaBgpPathEntry=alaBgpPathEntry, alaBgpRouteIsAggregateList=alaBgpRouteIsAggregateList, alaBgpPrefixMatchListMask=alaBgpPrefixMatchListMask, alabgpMIBPrefixListGroup=alabgpMIBPrefixListGroup, alaBgpPeerLastWriteTime=alaBgpPeerLastWriteTime, alaBgpDampEntry=alaBgpDampEntry, alaBgpRouteMapMedMode=alaBgpRouteMapMedMode, alaBgpVersion=alaBgpVersion, alaBgpRouteIsOnEbgpChgList=alaBgpRouteIsOnEbgpChgList, alaBgpPeerActivateIpv6=alaBgpPeerActivateIpv6, alaBgpAspathPriMatchListRegExp=alaBgpAspathPriMatchListRegExp, alaBgpPath6Weight=alaBgpPath6Weight, alaBgpPeerIpv4Unicast=alaBgpPeerIpv4Unicast, alcatelIND1BGPMIBConformance=alcatelIND1BGPMIBConformance, alaBgpPeerLocalIntfName=alaBgpPeerLocalIntfName, alaBgpAspathCompare=alaBgpAspathCompare, alaBgpMultiProtocolIpv6=alaBgpMultiProtocolIpv6, alaBgpPeerAS=alaBgpPeerAS, alaBgpCommunityMatchListRowStatus=alaBgpCommunityMatchListRowStatus, alaBgpNetworkTable=alaBgpNetworkTable, alaBgpPath6AggregatorAs=alaBgpPath6AggregatorAs, alaBgpPeerIpv4Multicast=alaBgpPeerIpv4Multicast, alaBgpRouteNextHop=alaBgpRouteNextHop, alaBgpPeer6State=alaBgpPeer6State, alaBgpPathState=alaBgpPathState, alaBgpPath6AggregatorAddr=alaBgpPath6AggregatorAddr, alaBgpAspathMatchListAction=alaBgpAspathMatchListAction, alaBgpPeerUpTransitions=alaBgpPeerUpTransitions, alaBgpPathUnknownAttr=alaBgpPathUnknownAttr, alaBgpPeerMultiHop=alaBgpPeerMultiHop, alaBgpPeerLastDownTime=alaBgpPeerLastDownTime, alaBgpCommunityMatchListEntry=alaBgpCommunityMatchListEntry, alaBgpPeer6SentUpdMsgs=alaBgpPeer6SentUpdMsgs, alaBgpPeerRcvdRtRefreshMsgs=alaBgpPeerRcvdRtRefreshMsgs, alaBgpCommunityMatchListId=alaBgpCommunityMatchListId, alaBgpPathAs=alaBgpPathAs, alaBgpNumFeasiblePaths=alaBgpNumFeasiblePaths, alaBgpAggrAddr=alaBgpAggrAddr, alaBgpPeerMaxPrefixWarnOnly=alaBgpPeerMaxPrefixWarnOnly, alaBgpPeer6CommunityListOut=alaBgpPeer6CommunityListOut, alaBgpGlobal=alaBgpGlobal, alaBgpPathClusterList=alaBgpPathClusterList, alcatelIND1BGPMIBCompliance=alcatelIND1BGPMIBCompliance, alaBgpRouteMapTable=alaBgpRouteMapTable, alaBgpPeerMaxPrefix=alaBgpPeerMaxPrefix, alaBgpPeerMD5Key=alaBgpPeerMD5Key, alaBgpRouteMapEntry=alaBgpRouteMapEntry, alaBgpPeerSentUpdMsgs=alaBgpPeerSentUpdMsgs, alaBgpNetwork6State=alaBgpNetwork6State, alaBgpRoute6State=alaBgpRoute6State, alaBgpPeerRouteMapOut=alaBgpPeerRouteMapOut, alaBgpPeerInSoftReset=alaBgpPeerInSoftReset, alaBgpDampeningClear=alaBgpDampeningClear, alaBgpRouteAddr=alaBgpRouteAddr, alaBgpRouteIsDampened=alaBgpRouteIsDampened, alaBgpConfedId=alaBgpConfedId, alaBgpRouteMapMed=alaBgpRouteMapMed, alabgpMIBRoute6Group=alabgpMIBRoute6Group, alaBgpPathOriginatorId=alaBgpPathOriginatorId, alaBgpPeer6LocalAddr=alaBgpPeer6LocalAddr, alaBgpDampPeerAddr=alaBgpDampPeerAddr, alaBgpPeer6MultiHop=alaBgpPeer6MultiHop, alaBgpPeer6LocalIntfName=alaBgpPeer6LocalIntfName, alaBgpPeer6ReconfigureInBound=alaBgpPeer6ReconfigureInBound, alaBgpPeerTTL=alaBgpPeerTTL, alaBgpRoute6Entry=alaBgpRoute6Entry, alaBgpRoute6IsOnEbgpChgList=alaBgpRoute6IsOnEbgpChgList, alaBgpAspathMatchListSubIndex=alaBgpAspathMatchListSubIndex, alaBgpDampTable=alaBgpDampTable, alaBgpAspathPriMatchListPriority=alaBgpAspathPriMatchListPriority, alaBgpPeer6LocalPort=alaBgpPeer6LocalPort, alaBgpCommunityMatchListString=alaBgpCommunityMatchListString, alaBgpPathAtomic=alaBgpPathAtomic, alaBgpNumActiveRoutes=alaBgpNumActiveRoutes, alaBgpPathAggregatorAs=alaBgpPathAggregatorAs, alaBgpPrefixMatchListEntry=alaBgpPrefixMatchListEntry, alaBgpRouteMapAsPathMatchListId=alaBgpRouteMapAsPathMatchListId, alaBgpPeer6RcvdMsgs=alaBgpPeer6RcvdMsgs, alaBgpRouteMapMatchPrefix=alaBgpRouteMapMatchPrefix, alaBgpPathPeerName=alaBgpPathPeerName, alaBgpNetwork6Addr=alaBgpNetwork6Addr, alaBgpNetworkLocalPref=alaBgpNetworkLocalPref, alaBgpNetworkMask=alaBgpNetworkMask, alaBgpNetworkEntry=alaBgpNetworkEntry, alaBgpRouteFeasiblePaths=alaBgpRouteFeasiblePaths, alaBgpNetwork6Community=alaBgpNetwork6Community, alaBgpPeer6ReconfigureOutBound=alaBgpPeer6ReconfigureOutBound, alaBgpPeer6RouteMapOut=alaBgpPeer6RouteMapOut, alaBgpRouteMapMatchMask=alaBgpRouteMapMatchMask, alaBgpPeer6DownTransitions=alaBgpPeer6DownTransitions, alaBgpPrefix6MatchListRowStatus=alaBgpPrefix6MatchListRowStatus, alaBgpRouteTable=alaBgpRouteTable, alaBgpPeer6PrefixListOut=alaBgpPeer6PrefixListOut, alaBgpPeer6RouteMapIn=alaBgpPeer6RouteMapIn, alaBgpPathSrcProto=alaBgpPathSrcProto, alaBgpPrefix6MatchListLE=alaBgpPrefix6MatchListLE, alaBgpPeerRestart=alaBgpPeerRestart, alaBgpPeerDefaultOriginate=alaBgpPeerDefaultOriginate, alaBgpPath6NextHop=alaBgpPath6NextHop, alabgpMIBNetwork6Group=alabgpMIBNetwork6Group, alaBgpAggrCommunity=alaBgpAggrCommunity, alaBgpPeer6Table=alaBgpPeer6Table, alabgpMIBAspathPriListGroup=alabgpMIBAspathPriListGroup, alaBgpRouteMapMatchCommunity=alaBgpRouteMapMatchCommunity, alaBgpPath6OriginatorId=alaBgpPath6OriginatorId, alabgpMIBPeer6Group=alabgpMIBPeer6Group, alaBgpDampCutOff=alaBgpDampCutOff, alaBgpPeerReconfigureInBound=alaBgpPeerReconfigureInBound, alaBgpPeerSentMsgs=alaBgpPeerSentMsgs, alaBgpPath6UnknownAttr=alaBgpPath6UnknownAttr, alaBgpGracefulRestart=alaBgpGracefulRestart, alaBgpPeer6MinRouteAdvertisementInterval=alaBgpPeer6MinRouteAdvertisementInterval, alabgpMIBGlobalsGroup=alabgpMIBGlobalsGroup, alaBgpPeerAutoReStart=alaBgpPeerAutoReStart, alaBgpRouteMapLocalPref=alaBgpRouteMapLocalPref, alabgpMIBRouteMapGroup=alabgpMIBRouteMapGroup, alaBgpRoute6IsAggregateContributor=alaBgpRoute6IsAggregateContributor, alaBgpPath6MaskLen=alaBgpPath6MaskLen, alaBgpAspathPriMatchListIntIdx=alaBgpAspathPriMatchListIntIdx, alaBgpPeer6Ipv6Unicast=alaBgpPeer6Ipv6Unicast, alaBgpRouteMapMatchMaskLength6=alaBgpRouteMapMatchMaskLength6, alaBgpDampFlaps=alaBgpDampFlaps)
mibBuilder.exportSymbols("ALCATEL-IND1-BGP-MIB", alaBgpPeer6Name=alaBgpPeer6Name, alaBgpPath6SrcProto=alaBgpPath6SrcProto, alaBgpPeerLastReadTime=alaBgpPeerLastReadTime, alaBgpClearAllNeighborStats=alaBgpClearAllNeighborStats, alaBgpRouteIsAggregate=alaBgpRouteIsAggregate, alaBgpPathPeerInetType=alaBgpPathPeerInetType, alaBgpDampCeil=alaBgpDampCeil, alcatelIND1BGPMIBObjects=alcatelIND1BGPMIBObjects, alaBgpPathLocalPref=alaBgpPathLocalPref, alaBgpPeerName=alaBgpPeerName, alaBgpAggrMetric=alaBgpAggrMetric, alaBgpAspathMatchListId=alaBgpAspathMatchListId, alaBgpPathWeight=alaBgpPathWeight, alaBgpPeerIpv6NextHop=alaBgpPeerIpv6NextHop, alaBgpPeerDownTransitions=alaBgpPeerDownTransitions, alaBgpPath6Med=alaBgpPath6Med, alaBgpPrefix6MatchListAddr=alaBgpPrefix6MatchListAddr, alaBgpAggrRowStatus=alaBgpAggrRowStatus, alaBgpCommunityMatchListTable=alaBgpCommunityMatchListTable, alaBgpRoute6IsOnIbgpChgList=alaBgpRoute6IsOnIbgpChgList, alaBgpPeer6AspathListIn=alaBgpPeer6AspathListIn, alaBgpPeer6AS=alaBgpPeer6AS, alaBgpPeer6RcvdUpdMsgs=alaBgpPeer6RcvdUpdMsgs, alaBgpRouteMapAsPrepend=alaBgpRouteMapAsPrepend, alaBgpPeer6SentMsgs=alaBgpPeer6SentMsgs, alaBgpPeer6RowStatus=alaBgpPeer6RowStatus, alaBgpCommunityPriMatchListId=alaBgpCommunityPriMatchListId, alaBgpAggrSet=alaBgpAggrSet, alaBgpPeer6RemovePrivateAs=alaBgpPeer6RemovePrivateAs, alaBgpDampening=alaBgpDampening, alaBgpRouteAdvNeighbors=alaBgpRouteAdvNeighbors, alaBgpRouteMapInst=alaBgpRouteMapInst, alaBgpDampDuration=alaBgpDampDuration, alaBgpRoute6AdvNeighbors=alaBgpRoute6AdvNeighbors, alaBgpAggrLocalPref=alaBgpAggrLocalPref, alaBgpRouteMapPrefix6MatchListId=alaBgpRouteMapPrefix6MatchListId, alaBgpRouteMapCommunityStrip=alaBgpRouteMapCommunityStrip, alaBgpRouteMapOrigin=alaBgpRouteMapOrigin, alcatelIND1BGPMIB=alcatelIND1BGPMIB, alaBgpPathOrigin=alaBgpPathOrigin, alaBgpRoute6FeasiblePaths=alaBgpRoute6FeasiblePaths, alaBgpPath6Community=alaBgpPath6Community, alaBgpPeerPrefix6ListOut=alaBgpPeerPrefix6ListOut, alaBgpPath6Table=alaBgpPath6Table, alaBgpPeerCommunityListOut=alaBgpPeerCommunityListOut, alcatelIND1BGPMIBGroups=alcatelIND1BGPMIBGroups, alaBgpNetwork6RowStatus=alaBgpNetwork6RowStatus, alaBgpPeerRowStatus=alaBgpPeerRowStatus, alaBgpManualTag=alaBgpManualTag, alaBgpRouterId=alaBgpRouterId, alaBgpAspathMatchListPriority=alaBgpAspathMatchListPriority, alaBgpPeer6AutoReStart=alaBgpPeer6AutoReStart, alaBgpRoutePaths=alaBgpRoutePaths, alaBgpDampAddr=alaBgpDampAddr, alaBgpPath6Atomic=alaBgpPath6Atomic, alaBgpPrefix6MatchListEntry=alaBgpPrefix6MatchListEntry, alaBgpRouteIsAggregateContributor=alaBgpRouteIsAggregateContributor, alabgpMIBPathAttrGroup=alabgpMIBPathAttrGroup, alaBgpPeer6TTL=alaBgpPeer6TTL, alaBgpRoute6Paths=alaBgpRoute6Paths, alaBgpPeer6ClientStatus=alaBgpPeer6ClientStatus, alaBgpProtoStatus=alaBgpProtoStatus, alabgpMIBNetworkGroup=alabgpMIBNetworkGroup, alaBgpPathTable=alaBgpPathTable, alaBgpRoute6IsAggregateList=alaBgpRoute6IsAggregateList, alaBgpPeer6LastUpTime=alaBgpPeer6LastUpTime, alaBgpPeerRemovePrivateAs=alaBgpPeerRemovePrivateAs, alaBgpRouteMapRowStatus=alaBgpRouteMapRowStatus, alaBgpDampLastUpdateTime=alaBgpDampLastUpdateTime, alaBgpCommunityMatchListPriority=alaBgpCommunityMatchListPriority, alaBgpPeer6AspathListOut=alaBgpPeer6AspathListOut, alaBgpPeerNextHopSelf=alaBgpPeerNextHopSelf, alabgpMIBCommunityPriListGroup=alabgpMIBCommunityPriListGroup, alaBgpCommunityPriMatchListAction=alaBgpCommunityPriMatchListAction, alabgpMIBCommunityListGroup=alabgpMIBCommunityListGroup, alabgpMIBAggrGroup=alabgpMIBAggrGroup, alaBgpDampMaxFlapHistory=alaBgpDampMaxFlapHistory, alaBgpPrefixMatchListGE=alaBgpPrefixMatchListGE, alaBgpRouteIsOnIbgpChgList=alaBgpRouteIsOnIbgpChgList, alaBgpAspathPriMatchListId=alaBgpAspathPriMatchListId, alaBgpPathPref=alaBgpPathPref, alaBgpCommunityPriMatchListEntry=alaBgpCommunityPriMatchListEntry, alaBgpAspathPriMatchListAction=alaBgpAspathPriMatchListAction, alaBgpPeerLocalPort=alaBgpPeerLocalPort, alaBgpNetworkRowStatus=alaBgpNetworkRowStatus, alaBgpRouteEntry=alaBgpRouteEntry, alaBgpPeer6LastSentNotifyReason=alaBgpPeer6LastSentNotifyReason, alcatelIND1BGPMIBCompliances=alcatelIND1BGPMIBCompliances, alaBgpPeerClearCounter=alaBgpPeerClearCounter, alaBgpNetworkCommunity=alaBgpNetworkCommunity, alaBgpDampMask=alaBgpDampMask, alaBgpPeer6LastRecvNotifyReason=alaBgpPeer6LastRecvNotifyReason, alaBgpPeerPrefixListOut=alaBgpPeerPrefixListOut, alaBgpPeer6SentNotifyMsgs=alaBgpPeer6SentNotifyMsgs, alaBgpPeer6MD5KeyEncrypt=alaBgpPeer6MD5KeyEncrypt, alaBgpRouteIsHidden=alaBgpRouteIsHidden, alaBgpPeer6ActivateIpv4=alaBgpPeer6ActivateIpv4, alabgpMIBRouteGroup=alabgpMIBRouteGroup, alaBgpPeerMD5KeyEncrypt=alaBgpPeerMD5KeyEncrypt, alaBgpClusterId=alaBgpClusterId, alaBgpPeer6Ipv6NextHop=alaBgpPeer6Ipv6NextHop, alaBgpPeerRcvdPrefixes=alaBgpPeerRcvdPrefixes, alaBgpPeerAddr=alaBgpPeerAddr, alaBgpAsOriginInterval=alaBgpAsOriginInterval, alaBgpPeerLastTransitionTime=alaBgpPeerLastTransitionTime, alaBgpRoute6IsAggregateWait=alaBgpRoute6IsAggregateWait, alaBgpPrefixMatchListAddr=alaBgpPrefixMatchListAddr, alaBgpPeer6RestartState=alaBgpPeer6RestartState, alaBgpRoute6IsOnDeleteList=alaBgpRoute6IsOnDeleteList, alaBgpAggrSummarize=alaBgpAggrSummarize, alaBgpPeerPassive=alaBgpPeerPassive, alaBgpPrefix6MatchListGE=alaBgpPrefix6MatchListGE, alaBgpAutonomousSystemNumber=alaBgpAutonomousSystemNumber, alaBgpNumEstabInternalPeers=alaBgpNumEstabInternalPeers, alaBgpRouteIsOnLocalChgList=alaBgpRouteIsOnLocalChgList, PYSNMP_MODULE_ID=alcatelIND1BGPMIB, alaBgpPath6PeerBgpId=alaBgpPath6PeerBgpId, alaBgpPeerLastDownReason=alaBgpPeerLastDownReason, alaBgpRouteMapAction=alaBgpRouteMapAction, alaBgpPeerBgpId=alaBgpPeerBgpId, alaBgpPeerRcvdUpdMsgs=alaBgpPeerRcvdUpdMsgs, alaBgpMissingMed=alaBgpMissingMed, alaBgpPeerCommunityListIn=alaBgpPeerCommunityListIn, alaBgpRoute6Table=alaBgpRoute6Table, alaBgpPeer6ConfedStatus=alaBgpPeer6ConfedStatus, alaBgpPeer6LastDownTime=alaBgpPeer6LastDownTime, alaBgpRouteMapMatchPrefix6=alaBgpRouteMapMatchPrefix6, alaBgpBfdAllNeighborStatus=alaBgpBfdAllNeighborStatus, alaBgpPeer6DefaultOriginate=alaBgpPeer6DefaultOriginate, alaBgpPeerLastUpTime=alaBgpPeerLastUpTime, alaBgpPeer6Entry=alaBgpPeer6Entry, alaBgpCommunityPriMatchListTable=alaBgpCommunityPriMatchListTable, alaBgpPeer6ClearCounter=alaBgpPeer6ClearCounter, alaBgpPeerSoftReconfig=alaBgpPeerSoftReconfig, alaBgpPathAggregatorAddr=alaBgpPathAggregatorAddr, alaBgpRouteReflection=alaBgpRouteReflection, alaBgpPeerLastRecvNotifyReason=alaBgpPeerLastRecvNotifyReason, alaBgpRoute6NextHop=alaBgpRoute6NextHop, alaBgpPath6ClusterList=alaBgpPath6ClusterList, alaBgpPrefix6MatchListAddrLength=alaBgpPrefix6MatchListAddrLength, alabgpMIBPath6AttrGroup=alabgpMIBPath6AttrGroup, alaBgpPath6LocalPref=alaBgpPath6LocalPref, alaBgpPeer6SentRtRefreshMsgs=alaBgpPeer6SentRtRefreshMsgs, alaBgpRouteMapLocalPrefMode=alaBgpRouteMapLocalPrefMode, alaBgpNumPolicyChgPaths=alaBgpNumPolicyChgPaths, alaBgpPeer6LastTransitionTime=alaBgpPeer6LastTransitionTime, alaBgpPath6As=alaBgpPath6As, alaBgpRoute6Addr=alaBgpRoute6Addr, alaBgpRouteIsOnIbgpClientChgList=alaBgpRouteIsOnIbgpClientChgList, alaBgpRoute6IsOnLocalChgList=alaBgpRoute6IsOnLocalChgList, alaBgpRouteMapWeight=alaBgpRouteMapWeight, alaBgpNetwork6Entry=alaBgpNetwork6Entry, alaBgpPrefixMatchListId=alaBgpPrefixMatchListId, alaBgpRestartInterval=alaBgpRestartInterval, alaBgpPeer6BgpId=alaBgpPeer6BgpId, alaBgpPeer6AdminStatus=alaBgpPeer6AdminStatus, alaBgpPeer6MaxPrefix=alaBgpPeer6MaxPrefix, alaBgpPeer6MaxPrefixWarnOnly=alaBgpPeer6MaxPrefixWarnOnly, alaBgpPeer6LastWriteTime=alaBgpPeer6LastWriteTime, alaBgpAspathPriMatchListTable=alaBgpAspathPriMatchListTable, alaBgpPeerReconfigureOutBound=alaBgpPeerReconfigureOutBound, alaBgpPeer6Addr=alaBgpPeer6Addr, alaBgpPeer6Ipv4Multicast=alaBgpPeer6Ipv4Multicast, alaBgpPrefixMatchListRowStatus=alaBgpPrefixMatchListRowStatus, alaBgpPeerRouteMapIn=alaBgpPeerRouteMapIn, alaBgpDampHalfLife=alaBgpDampHalfLife, alaBgpPeerAspathListIn=alaBgpPeerAspathListIn, alaBgpNetwork6Table=alaBgpNetwork6Table, alaBgpPeerEntry=alaBgpPeerEntry, alaBgpPrefixMatchListTable=alaBgpPrefixMatchListTable)
