#
# PySNMP MIB module ALCATEL-IND1-QCN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-QCN-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:20:35 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1QcnMib, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1QcnMib")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibIdentifier, Gauge32, Counter32, TimeTicks, Unsigned32, Counter64, iso, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter32", "TimeTicks", "Unsigned32", "Counter64", "iso", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
alcatelIND1QcnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1))
alcatelIND1QcnMIB.setRevisions(('2011-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1QcnMIB.setRevisionsDescriptions(('Capability Manager is used to set system wide limitation.',))
if mibBuilder.loadTexts: alcatelIND1QcnMIB.setLastUpdated('201109010000Z')
if mibBuilder.loadTexts: alcatelIND1QcnMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1QcnMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n         Telephone:              North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n         Electronic Mail:         support@ind.alcatel.com\n             World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n             File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1QcnMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line\n        System Capability Manager, to allow for system control and limitation setting, of\n        different, features through out the system.\n        Capability manager is a centralized process which provides hardware information and\n        capability to other processes. To optimize the system performance , certain features\n        may be configured to a lower than the hardware limit through capability manager.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2011 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1QcnMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1))
if mibBuilder.loadTexts: alcatelIND1QcnMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1QcnMIBObjects.setDescription('Branch For QCN Subsystem Managed Objects.')
alcatelIND1QcnMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2))
if mibBuilder.loadTexts: alcatelIND1QcnMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1QcnMIBConformance.setDescription('Branch For QCN Subsystem Conformance Information.')
alcatelIND1QcnMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1QcnMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1QcnMIBGroups.setDescription('Branch For QCN Subsystem Units Of Conformance.')
alcatelIND1QcnMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1QcnMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1QcnMIBCompliances.setDescription('Branch For QCN Subsystem Compliance Statements.')
alaQcnConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1))
alaQcnConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 2))
alaQcnGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaQcnGlobalTable.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalTable.setDescription('A table of QCN global configuration.')
alaQcnGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-QCN-MIB", "alaQcnGlobalCompId"))
if mibBuilder.loadTexts: alaQcnGlobalEntry.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalEntry.setDescription('A QCN global Entry.')
alaQcnGlobalCompId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alaQcnGlobalCompId.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalCompId.setDescription('Comp Id is the index to this table.')
alaQcnGlobalCNMVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQcnGlobalCNMVlanTag.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalCNMVlanTag.setDescription('When set, the vlan tag overrides the incoming vlan id and forces\n         CNMs to be transmitted in that vlan.')
alaQcnGlobalCID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQcnGlobalCID.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalCID.setDescription('Sets the Congestion Point ID sent as part of the Congestion\n         Notification Message.')
alaQcnPortInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaQcnPortInstanceTable.setStatus('current')
if mibBuilder.loadTexts: alaQcnPortInstanceTable.setDescription('A table of DCP Port Instances.')
alaQcnPortInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-QCN-MIB", "alaQcnPIIfIndex"), (0, "ALCATEL-IND1-QCN-MIB", "alaQcnPIPriority"))
if mibBuilder.loadTexts: alaQcnPortInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: alaQcnPortInstanceEntry.setDescription('A DCP Port Instance Entry.')
alaQcnPIIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaQcnPIIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaQcnPIIfIndex.setDescription('IfIndex of this port.')
alaQcnPIPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alaQcnPIPriority.setStatus('current')
if mibBuilder.loadTexts: alaQcnPIPriority.setDescription('Priority identifier of this port.')
alaQcnPIPriorityReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1, 3), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQcnPIPriorityReset.setStatus('current')
if mibBuilder.loadTexts: alaQcnPIPriorityReset.setDescription('Set to true to reset the priority configuration to the global default.')
alaQcnPICncpStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1, 4), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQcnPICncpStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaQcnPICncpStatsClear.setDescription('Set to true to clear the cncp statistics for this port\n         priority.  Will do nothing if stats are disabled.')
alaQcnPICncpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 1, 1, 2, 1, 5), TruthValue().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaQcnPICncpReset.setStatus('current')
if mibBuilder.loadTexts: alaQcnPICncpReset.setDescription('Set to true to reset the cncp configuration to the global default for\n         this port priority.')
alcatelIND1QcnMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-QCN-MIB", "alaQcnGlobalGroup"), ("ALCATEL-IND1-QCN-MIB", "alaQcnPortInstanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1QcnMIBCompliance = alcatelIND1QcnMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1QcnMIBCompliance.setDescription('Compliance statement for QCN Subsystem.')
alaQcnGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-QCN-MIB", "alaQcnGlobalCNMVlanTag"), ("ALCATEL-IND1-QCN-MIB", "alaQcnGlobalCID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQcnGlobalGroup = alaQcnGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaQcnGlobalGroup.setDescription('Collection of Global QCN Configuration for management of QCN.')
alaQcnPortInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 71, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-QCN-MIB", "alaQcnPIPriorityReset"), ("ALCATEL-IND1-QCN-MIB", "alaQcnPICncpStatsClear"), ("ALCATEL-IND1-QCN-MIB", "alaQcnPICncpReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaQcnPortInstanceGroup = alaQcnPortInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaQcnPortInstanceGroup.setDescription('Collection of QCN Port level Configuration for management of QCN.')
mibBuilder.exportSymbols("ALCATEL-IND1-QCN-MIB", alaQcnConfig=alaQcnConfig, alaQcnPortInstanceTable=alaQcnPortInstanceTable, alaQcnGlobalEntry=alaQcnGlobalEntry, alaQcnGlobalCNMVlanTag=alaQcnGlobalCNMVlanTag, alcatelIND1QcnMIBObjects=alcatelIND1QcnMIBObjects, alaQcnConformance=alaQcnConformance, alaQcnGlobalCompId=alaQcnGlobalCompId, alaQcnPortInstanceGroup=alaQcnPortInstanceGroup, alcatelIND1QcnMIBCompliances=alcatelIND1QcnMIBCompliances, alaQcnPIPriorityReset=alaQcnPIPriorityReset, alcatelIND1QcnMIB=alcatelIND1QcnMIB, alaQcnPortInstanceEntry=alaQcnPortInstanceEntry, PYSNMP_MODULE_ID=alcatelIND1QcnMIB, alaQcnGlobalGroup=alaQcnGlobalGroup, alcatelIND1QcnMIBGroups=alcatelIND1QcnMIBGroups, alaQcnPIPriority=alaQcnPIPriority, alaQcnGlobalTable=alaQcnGlobalTable, alcatelIND1QcnMIBConformance=alcatelIND1QcnMIBConformance, alaQcnPICncpStatsClear=alaQcnPICncpStatsClear, alaQcnPICncpReset=alaQcnPICncpReset, alcatelIND1QcnMIBCompliance=alcatelIND1QcnMIBCompliance, alaQcnGlobalCID=alaQcnGlobalCID, alaQcnPIIfIndex=alaQcnPIIfIndex)
