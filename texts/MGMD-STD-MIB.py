#
# PySNMP MIB module MGMD-STD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/MGMD-STD-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:23:43 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, ModuleIdentity, iso, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Unsigned32, TimeTicks, NotificationType, ObjectIdentity, Bits, Integer32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "iso", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Unsigned32", "TimeTicks", "NotificationType", "ObjectIdentity", "Bits", "Integer32", "MibIdentifier", "Gauge32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
mgmdStdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 185))
mgmdStdMIB.setRevisions(('2009-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mgmdStdMIB.setRevisionsDescriptions(('This MIB obsoletes both RFC 2933 and RFC 3019.',))
if mibBuilder.loadTexts: mgmdStdMIB.setLastUpdated('200903300000Z')
if mibBuilder.loadTexts: mgmdStdMIB.setOrganization('INTERNET ENGINEERING TASK FORCE MULTICAST and\n    ANYCAST GROUP MEMBERSHIP Working\n        Group.\n        www:   http://www.ietf.org/html.charters/magma-charter.html\n        EMail: magma@ietf.org')
if mibBuilder.loadTexts: mgmdStdMIB.setContactInfo('Julian Chesterfield\n        University of Cambridge,\n        Computer Laboratory,\n        15 JJ Thompson Avenue,\n        Cambridge,\n        CB3 0FD\n        UK\n\n        EMail: julian.chesterfield@cl.cam.ac.uk')
if mibBuilder.loadTexts: mgmdStdMIB.setDescription("The MIB module for MGMD management.\n        A new version of MGMD combining RFC 2933 and RFC 3019.\n        Includes IGMPv3 and MLDv2 source filtering changes.\n\n        Copyright (c) 2009 IETF Trust and the persons\n        identified as authors of the code.  All rights reserved.\n\n        Redistribution and use in source and binary forms, with or\n        without modification, are permitted provided that the\n        following conditions are met:\n\n        - Redistributions of source code must retain the above copyright\n          notice, this list of conditions and the following disclaimer.\n\n        - Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n        - Neither the name of Internet Society, IETF or IETF Trust,\n          nor the names of specific contributors, may be used to endorse\n          or promote products derived from this software without\n          specific prior written permission.\n\n        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n        CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n        INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n        MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n        DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n        CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n        SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n        NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n        HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n        OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n        EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n        This version of this MIB module is part of RFC 5519;\n        see the RFC itself for full legal notices.")
mgmdMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 185, 1))
mgmdHostInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 1), )
if mibBuilder.loadTexts: mgmdHostInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which\n             IGMP or MLD is enabled.')
mgmdHostInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 1, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdHostInterfaceIfIndex"), (0, "MGMD-STD-MIB", "mgmdHostInterfaceQuerierType"))
if mibBuilder.loadTexts: mgmdHostInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on\n            which IGMP or MLD is enabled.')
mgmdHostInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mgmdHostInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP or MLD is\n             enabled.  The table is indexed by the ifIndex value and the\n             InetAddressType to allow for interfaces that may be\n             configured in both IPv4 and IPv6 modes.')
mgmdHostInterfaceQuerierType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdHostInterfaceQuerierType.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceQuerierType.setDescription('The address type of this interface.  This entry along with\n             the ifIndex value acts as an index to the mgmdHostInterface\n             table.  A physical interface may be configured in multiple\n             modes concurrently, e.g., in IPv4 and IPv6 modes connected\n             to the same interface; however, the traffic is considered\n             to be logically separate.')
mgmdHostInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostInterfaceQuerier.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceQuerier.setDescription('The address of the IGMP or MLD Querier on the IP subnet to\n             which this interface is attached.  The InetAddressType,\n             e.g., IPv4 or IPv6, is identified by the\n             mgmdHostInterfaceQuerierType variable in the\n             mgmdHostInterface table.')
mgmdHostInterfaceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdHostInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceStatus.setDescription('The activation of a row enables the host side of IGMP or\n            MLD on the interface.  The destruction of a row disables\n            the host side of IGMP or MLD on the interface.')
mgmdHostInterfaceVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdHostInterfaceVersion.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion.setDescription('The maximum version of MGMD that the host can run on\n            this interface.  A value of 1 is only applicable for IPv4,\n            and indicates that the host only supports IGMPv1 on the\n            interface.  A value of 2 indicates that the host also\n            supports IGMPv2 (for IPv4) or MLDv1 (for IPv6).  A value of\n            3 indicates that the host also supports IGMPv3 (for IPv4)\n            or MLDv2 (for IPv6).')
mgmdHostInterfaceVersion1QuerierTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostInterfaceVersion1QuerierTimer.setReference('RFC 2236, Section 4 and RFC 3376, Section 7.2.1')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion1QuerierTimer.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion1QuerierTimer.setDescription('The time remaining until the host assumes that there are\n            no IGMPv1 routers present on the interface.  While this is\n            non-zero, the host will reply to all queries with version 1\n            membership reports.  This variable applies to IGMPv2 or 3\n            hosts that are forced to run in v1 for compatibility with\n            v1 routers present on the interface.  This object may only\n            be present when the corresponding value of\n            mgmdHostInterfaceQuerierType is ipv4.')
mgmdHostInterfaceVersion2QuerierTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostInterfaceVersion2QuerierTimer.setReference('RFC 3376, Section 7.2.1 and RFC 3810, Section 8.2.1')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion2QuerierTimer.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion2QuerierTimer.setDescription('The time remaining until the host assumes that there are\n            no MGMDv2 routers present on the interface.  While this is\n            non-zero, the host will reply to all queries with version 1\n            or 2 membership reports.  This variable applies to MGMDv3\n            hosts that are forced to run in v2 for compatibility with\n            v2 hosts or routers present on the interface.')
mgmdHostInterfaceVersion3Robustness = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 1, 1, 8), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdHostInterfaceVersion3Robustness.setReference('RFC 3376, Section 8.1 and RFC 3810, Section 9.14.1')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion3Robustness.setStatus('current')
if mibBuilder.loadTexts: mgmdHostInterfaceVersion3Robustness.setDescription('The robustness variable utilised by an MGMDv3 host in\n            sending state-change reports for multicast routers.  To\n            ensure the state-change report is not missed, the host\n            retransmits the state-change report\n            [mgmdHostInterfaceVersion3Robustness - 1] times.  The\n            variable must be a non-zero value.')
mgmdRouterInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 2), )
if mibBuilder.loadTexts: mgmdRouterInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which\n            IGMP or MLD is enabled.')
mgmdRouterInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 2, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdRouterInterfaceIfIndex"), (0, "MGMD-STD-MIB", "mgmdRouterInterfaceQuerierType"))
if mibBuilder.loadTexts: mgmdRouterInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on\n            which IGMP or MLD is enabled.')
mgmdRouterInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mgmdRouterInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP or MLD\n            is enabled.  The table is indexed by the ifIndex value and\n            the InetAddressType to allow for interfaces that may be\n            configured in both IPv4 and IPv6 modes.')
mgmdRouterInterfaceQuerierType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierType.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierType.setDescription('The address type of this interface.  This entry along with\n            the ifIndex value acts as the index to the\n            mgmdRouterInterface table.  A physical interface may be\n            configured in multiple modes concurrently, e.g., in IPv4\n            and IPv6 modes connected to the same interface; however,\n            the traffic is considered to be logically separate.')
mgmdRouterInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerier.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerier.setDescription('The address of the IGMP or MLD Querier on the IP subnet to\n            which this interface is attached.  The InetAddressType,\n            e.g., IPv4 or IPv6, is identified by the\n            mgmdRouterInterfaceQuerierType variable in the\n            mgmdRouterInterface table.')
mgmdRouterInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744)).clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQueryInterval.setDescription('The frequency at which IGMP or MLD Host-Query packets are\n            transmitted on this interface.')
mgmdRouterInterfaceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceStatus.setDescription('The activation of a row enables the router side of IGMP or\n            MLD on the interface.  The destruction of a row disables\n            the router side of IGMP or MLD on the interface.')
mgmdRouterInterfaceVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceVersion.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceVersion.setDescription('The version of MGMD that is running on this interface.\n            Value 1 applies to IGMPv1 routers only.  Value 2 applies\n            to IGMPv2 and MLDv1 routers, and value 3 applies to IGMPv3\n            and MLDv2 routers.\n\n            This object can be used to configure a router capable of\n            running either version.  For IGMP and MLD to function\n            correctly, all routers on a LAN must be configured to run\n            the same version on that LAN.')
mgmdRouterInterfaceQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceQueryMaxResponseTime.setReference('RFC 3810, Section 9.3')
if mibBuilder.loadTexts: mgmdRouterInterfaceQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQueryMaxResponseTime.setDescription('The maximum query response interval advertised in MGMDv2\n            or IGMPv3 queries on this interface.')
mgmdRouterInterfaceQuerierUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierUpTime.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierUpTime.setDescription('The time since mgmdRouterInterfaceQuerier was last\n            changed.')
mgmdRouterInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierExpiryTime.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceQuerierExpiryTime.setDescription('The amount of time remaining before the Other Querier\n            Present Timer expires.  If the local system is the querier,\n            the value of this object is zero.')
mgmdRouterInterfaceWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceWrongVersionQueries.setDescription('The number of general queries received whose IGMP or MLD\n            version does not match the equivalent\n            mgmdRouterInterfaceVersion, over the lifetime of the row\n            entry.  Both IGMP and MLD require that all routers on a LAN\n            be configured to run the same version.  Thus, if any general\n            queries are received with the wrong version, this indicates\n            a configuration error.')
mgmdRouterInterfaceJoins = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceJoins.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceJoins.setDescription('The number of times a group membership has been added on\n            this interface, that is, the number of times an entry for\n            this interface has been added to the Cache Table.  This\n            object can give an indication of the amount of activity\n            between samples over time.')
mgmdRouterInterfaceProxyIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceProxyIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceProxyIfIndex.setDescription('Some devices implement a form of IGMP or MLD proxying\n            whereby memberships learned on the interface represented by\n            this row cause Host Membership Reports to be sent on the\n            interface whose ifIndex value is given by this object.\n            Such a device would implement the mgmdV2RouterBaseMIBGroup\n            only on its router interfaces (those interfaces with\n            non-zero mgmdRouterInterfaceProxyIfIndex).  Typically, the\n            value of this object is 0, indicating that no proxying is\n            being done.')
mgmdRouterInterfaceGroups = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceGroups.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceGroups.setDescription('The current number of entries for this interface in the\n            mgmdRouterCacheTable.')
mgmdRouterInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceRobustness.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceRobustness.setDescription('The Robustness Variable allows tuning for the expected\n            packet loss on a subnet.  If a subnet is expected to be\n            lossy, the Robustness Variable may be increased.  IGMP and\n            MLD are robust to (Robustness Variable-1) packet losses.')
mgmdRouterInterfaceLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744)).clone(10)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mgmdRouterInterfaceLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceLastMemberQueryInterval.setDescription('The Last Member Query Interval is the Max Query Response\n            Interval inserted into group-specific queries sent in\n            response to leave group messages, and is also the amount\n            of time between group-specific query messages.  This value\n            may be tuned to modify the leave latency of the network.  A\n            reduced value results in reduced time to detect the loss of\n            the last member of a group.  The value of this object is\n            irrelevant if mgmdRouterInterfaceVersion is 1.')
mgmdRouterInterfaceLastMemberQueryCount = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceLastMemberQueryCount.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceLastMemberQueryCount.setDescription('Represents the number of group-specific and group-and-\n            source-specific queries sent by the router before it assumes\n            there are no local members.')
mgmdRouterInterfaceStartupQueryCount = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceStartupQueryCount.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceStartupQueryCount.setDescription('Represents the number of Queries sent out on startup,\n            separated by the Startup Query Interval.')
mgmdRouterInterfaceStartupQueryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31744))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterInterfaceStartupQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterInterfaceStartupQueryInterval.setDescription('This variable represents the interval between General\n            Queries sent by a Querier on startup.')
mgmdHostCacheTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 3), )
if mibBuilder.loadTexts: mgmdHostCacheTable.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheTable.setDescription('The (conceptual) table listing the IP multicast groups for\n             which the host is a member on a particular interface.')
mgmdHostCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 3, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdHostCacheAddressType"), (0, "MGMD-STD-MIB", "mgmdHostCacheAddress"), (0, "MGMD-STD-MIB", "mgmdHostCacheIfIndex"))
if mibBuilder.loadTexts: mgmdHostCacheEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheEntry.setDescription('An entry (conceptual row) in the mgmdHostCacheTable.')
mgmdHostCacheAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdHostCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheAddressType.setDescription('The address type of the mgmdHostCacheTable entry.  This\n            value applies to both the mgmdHostCacheAddress and the\n            mgmdHostCacheLastReporter entries.')
mgmdHostCacheAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdHostCacheAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheAddress.setDescription('The IP multicast group address for which this entry\n            contains information.  The InetAddressType, e.g., IPv4 or\n            IPv6, is identified by the mgmdHostCacheAddressType variable\n            in the mgmdHostCache table.')
mgmdHostCacheIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: mgmdHostCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheIfIndex.setDescription('The interface for which this entry contains information\n            for an IP multicast group address.')
mgmdHostCacheUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheUpTime.setDescription('The time elapsed since this entry was created.')
mgmdHostCacheLastReporter = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostCacheLastReporter.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheLastReporter.setDescription('The IP address of the source of the last membership report\n            received for this IP multicast group address on this\n            interface.  If no membership report has been received, this\n            object has a value of 0.  The InetAddressType, e.g., IPv4 or\n            IPv6, is identified by the mgmdHostCacheAddressType variable\n            in the mgmdHostCache table.')
mgmdHostCacheSourceFilterMode = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostCacheSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: mgmdHostCacheSourceFilterMode.setDescription('The state in which the interface is currently set.  The\n            value indicates the relevance of the corresponding source\n            list entries in the mgmdHostSecListTable for MGMDv3\n            interfaces.')
mgmdRouterCacheTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 4), )
if mibBuilder.loadTexts: mgmdRouterCacheTable.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheTable.setDescription('The (conceptual) table listing the IP multicast groups for\n            which there are members on a particular router interface.')
mgmdRouterCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 4, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdRouterCacheAddressType"), (0, "MGMD-STD-MIB", "mgmdRouterCacheAddress"), (0, "MGMD-STD-MIB", "mgmdRouterCacheIfIndex"))
if mibBuilder.loadTexts: mgmdRouterCacheEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheEntry.setDescription('An entry (conceptual row) in the mgmdRouterCacheTable.')
mgmdRouterCacheAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdRouterCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheAddressType.setDescription('The address type of the mgmdRouterCacheTable entry.  This\n            value applies to both the mgmdRouterCacheAddress and the\n            mgmdRouterCacheLastReporter entries.')
mgmdRouterCacheAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdRouterCacheAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheAddress.setDescription('The IP multicast group address for which this entry\n            contains information.  The InetAddressType, e.g., IPv4 or\n            IPv6, is identified by the mgmdRouterCacheAddressType\n            variable in the mgmdRouterCache table.')
mgmdRouterCacheIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: mgmdRouterCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheIfIndex.setDescription('The interface for which this entry contains information\n            for an IP multicast group address.')
mgmdRouterCacheLastReporter = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheLastReporter.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheLastReporter.setDescription('The IP address of the source of the last membership report\n            received for this IP multicast group address on this\n            interface.  If no membership report has been received, this\n            object has the value 0.  The InetAddressType, e.g., IPv4 or\n            IPv6, is identified by the mgmdRouterCacheAddressType\n            variable in the mgmdRouterCache table.')
mgmdRouterCacheUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheUpTime.setDescription('The time elapsed since this entry was created.')
mgmdRouterCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheExpiryTime.setDescription('This value represents the time remaining before the Group\n            Membership Interval state expires.  The value must always be\n            greater than or equal to 1.')
mgmdRouterCacheExcludeModeExpiryTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheExcludeModeExpiryTimer.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheExcludeModeExpiryTimer.setDescription('This value is applicable only to MGMDv3-compatible nodes\n            and represents the time remaining before the interface\n            EXCLUDE state expires and the interface state transitions\n            to INCLUDE mode.  This value can never be greater than\n            mgmdRouterCacheExpiryTime.')
mgmdRouterCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheVersion1HostTimer.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheVersion1HostTimer.setDescription('The time remaining until the local router will assume that\n            there are no longer any MGMD version 1 members on the IP\n            subnet attached to this interface.  This entry only applies\n            to IGMPv1 hosts, and is not implemented for MLD.  Upon\n            hearing any MGMDv1 Membership Report (IGMPv1 only), this\n            value is reset to the group membership timer.  While this\n            time remaining is non-zero, the local router ignores any\n            MGMDv2 Leave messages (IGMPv2 only) for this group that it\n            receives on this interface.')
mgmdRouterCacheVersion2HostTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheVersion2HostTimer.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheVersion2HostTimer.setDescription('The time remaining until the local router will assume that\n            there are no longer any MGMD version 2 members on the IP\n            subnet attached to this interface.  This entry applies to\n            both IGMP and MLD hosts.  Upon hearing any MGMDv2 Membership\n            Report, this value is reset to the group membership timer.\n            Assuming no MGMDv1 hosts have been detected, the local\n            router does not ignore any MGMDv2 Leave messages for this\n            group that it receives on this interface.')
mgmdRouterCacheSourceFilterMode = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterCacheSourceFilterMode.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterCacheSourceFilterMode.setDescription('The current cache state, applicable to MGMDv3-compatible\n            nodes.  The value indicates whether the state is INCLUDE or\n            EXCLUDE.')
mgmdInverseHostCacheTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 5), )
if mibBuilder.loadTexts: mgmdInverseHostCacheTable.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseHostCacheTable.setDescription('The (conceptual) table listing the interfaces that are\n            members of a particular group.  This is an inverse lookup\n            table for entries in the mgmdHostCacheTable.')
mgmdInverseHostCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 5, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdInverseHostCacheIfIndex"), (0, "MGMD-STD-MIB", "mgmdInverseHostCacheAddressType"), (0, "MGMD-STD-MIB", "mgmdInverseHostCacheAddress"))
if mibBuilder.loadTexts: mgmdInverseHostCacheEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseHostCacheEntry.setDescription('An entry (conceptual row) in the\n            mgmdInverseHostCacheTable.')
mgmdInverseHostCacheIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mgmdInverseHostCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseHostCacheIfIndex.setDescription('The interface for which this entry contains information.')
mgmdInverseHostCacheAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 5, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdInverseHostCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseHostCacheAddressType.setDescription('The address type of the mgmdInverseHostCacheTable entry.')
mgmdInverseHostCacheAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 5, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdInverseHostCacheAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseHostCacheAddress.setDescription('The IP multicast group address for which this entry\n            contains information about an interface.  The\n            InetAddressType, e.g., IPv4 or IPv6, is identified by the\n            mgmdInverseHostCacheAddressType variable in the\n            mgmdInverseHostCache table.')
mgmdInverseRouterCacheTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 6), )
if mibBuilder.loadTexts: mgmdInverseRouterCacheTable.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseRouterCacheTable.setDescription('The (conceptual) table listing the interfaces that\n            are members of a particular group.  This is an inverse\n            lookup table for entries in the mgmdRouterCacheTable.')
mgmdInverseRouterCacheEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 6, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdInverseRouterCacheIfIndex"), (0, "MGMD-STD-MIB", "mgmdInverseRouterCacheAddressType"), (0, "MGMD-STD-MIB", "mgmdInverseRouterCacheAddress"))
if mibBuilder.loadTexts: mgmdInverseRouterCacheEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseRouterCacheEntry.setDescription('An entry (conceptual row) in the\n            mgmdInverseRouterCacheTable.')
mgmdInverseRouterCacheIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mgmdInverseRouterCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseRouterCacheIfIndex.setDescription('The interface for which this entry contains information\n            for an IP multicast group address.')
mgmdInverseRouterCacheAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 6, 1, 2), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdInverseRouterCacheAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseRouterCacheAddressType.setDescription('The address type of the mgmdInverseRouterCacheTable entry.')
mgmdInverseRouterCacheAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 6, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdInverseRouterCacheAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdInverseRouterCacheAddress.setDescription('The IP multicast group address for which this entry\n            contains information.  The InetAddressType, e.g., IPv4 or\n            IPv6, is identified by the mgmdInverseRouterCacheAddressType\n            variable in the mgmdInverseRouterCache table.')
mgmdHostSrcListTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 7), )
if mibBuilder.loadTexts: mgmdHostSrcListTable.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListTable.setDescription('The (conceptual) table listing the Source List entries\n             corresponding to each interface and multicast group pair\n             on a host.')
mgmdHostSrcListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 7, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdHostSrcListAddressType"), (0, "MGMD-STD-MIB", "mgmdHostSrcListAddress"), (0, "MGMD-STD-MIB", "mgmdHostSrcListIfIndex"), (0, "MGMD-STD-MIB", "mgmdHostSrcListHostAddress"))
if mibBuilder.loadTexts: mgmdHostSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListEntry.setDescription('An entry (conceptual row) in the mgmdHostSrcListTable.')
mgmdHostSrcListAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 7, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdHostSrcListAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListAddressType.setDescription('The address type of the InetAddress variables in this\n            table.  This value applies to the mgmdHostSrcListHostAddress\n            and mgmdHostSrcListAddress entries.')
mgmdHostSrcListAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 7, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdHostSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListAddress.setDescription('The IP multicast group address for which this entry\n            contains information.')
mgmdHostSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 7, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: mgmdHostSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListIfIndex.setDescription('The interface for which this entry contains information\n            for an IP multicast group address.')
mgmdHostSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 7, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdHostSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListHostAddress.setDescription('The host address to which this entry corresponds.  The\n            mgmdHostCacheSourceFilterMode value for this group address\n            and interface indicates whether this host address is\n            included or excluded.')
mgmdHostSrcListExpire = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 7, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdHostSrcListExpire.setStatus('current')
if mibBuilder.loadTexts: mgmdHostSrcListExpire.setDescription('This value indicates the relevance of the SrcList entry,\n            whereby a non-zero value indicates this is an INCLUDE state\n            value, and a zero value indicates this to be an EXCLUDE\n            state value.')
mgmdRouterSrcListTable = MibTable((1, 3, 6, 1, 2, 1, 185, 1, 8), )
if mibBuilder.loadTexts: mgmdRouterSrcListTable.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListTable.setDescription('The (conceptual) table listing the Source List entries\n            corresponding to each interface and multicast group pair on\n            a Router.')
mgmdRouterSrcListEntry = MibTableRow((1, 3, 6, 1, 2, 1, 185, 1, 8, 1), ).setIndexNames((0, "MGMD-STD-MIB", "mgmdRouterSrcListAddressType"), (0, "MGMD-STD-MIB", "mgmdRouterSrcListAddress"), (0, "MGMD-STD-MIB", "mgmdRouterSrcListIfIndex"), (0, "MGMD-STD-MIB", "mgmdRouterSrcListHostAddress"))
if mibBuilder.loadTexts: mgmdRouterSrcListEntry.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListEntry.setDescription('An entry (conceptual row) in the mgmdRouterSrcListTable.')
mgmdRouterSrcListAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 8, 1, 1), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: mgmdRouterSrcListAddressType.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListAddressType.setDescription('The address type of the InetAddress variables in this\n            table.  This value applies to the\n            mgmdRouterSrcListHostAddress and mgmdRouterSrcListAddress\n            entries.')
mgmdRouterSrcListAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 8, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdRouterSrcListAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListAddress.setDescription('The IP multicast group address for which this entry\n            contains information.')
mgmdRouterSrcListIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 8, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: mgmdRouterSrcListIfIndex.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListIfIndex.setDescription('The interface for which this entry contains information\n            for an IP multicast group address.')
mgmdRouterSrcListHostAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 8, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: mgmdRouterSrcListHostAddress.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListHostAddress.setDescription('The host address to which this entry corresponds.  The\n            mgmdRouterCacheSourceFilterMode value for this group address\n            and interface indicates whether this host address is\n            included or excluded.')
mgmdRouterSrcListExpire = MibTableColumn((1, 3, 6, 1, 2, 1, 185, 1, 8, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmdRouterSrcListExpire.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterSrcListExpire.setDescription('This value indicates the relevance of the SrcList entry,\n            whereby a non-zero value indicates this is an INCLUDE state\n            value, and a zero value indicates this to be an EXCLUDE\n            state value.')
mgmdMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 185, 2))
mgmdMIBCompliance = MibIdentifier((1, 3, 6, 1, 2, 1, 185, 2, 1))
mgmdMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 185, 2, 2))
mgmdIgmpV1HostReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 1)).setObjects(("MGMD-STD-MIB", "mgmdHostBaseMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV1HostReadMIBCompliance = mgmdIgmpV1HostReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV1HostReadMIBCompliance.setDescription('A read-only compliance statement for hosts running IGMPv1\n            [RFC1112] and implementing the MGMD MIB.  IGMPv1 hosts must\n            support the IPv4 address type.')
mgmdIgmpV1RouterReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 2)).setObjects(("MGMD-STD-MIB", "mgmdRouterBaseMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV1RouterReadMIBCompliance = mgmdIgmpV1RouterReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV1RouterReadMIBCompliance.setDescription('A read-only compliance statement for routers running\n            IGMPv1 [RFC1112] and implementing the MGMD MIB.  IGMPv1\n            routers only support the IPv4 address type.\n\n            Non-accessible index objects that only need IPv4\n            support are:\n\n            OBJECT mgmdRouterCacheAddressType\n            SYNTAX InetAddressType { ipv4(1) }\n\n            OBJECT mgmdRouterCacheAddress\n            SYNTAX InetAddress (SIZE(4))\n\n            OBJECT mgmdRouterInterfaceQuerierType\n            SYNTAX InetAddressType { ipv4(1) }\n\n            OBJECT mgmdInverseRouterCacheAddressType\n            SYNTAX InetAddressType { ipv4(1) }\n            ')
mgmdIgmpV1RouterWriteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 3)).setObjects(("MGMD-STD-MIB", "mgmdRouterBaseMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV1RouterWriteMIBCompliance = mgmdIgmpV1RouterWriteMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV1RouterWriteMIBCompliance.setDescription('A read-create compliance statement for routers running\n            IGMPv1 [RFC1112] and implementing the MGMD MIB.  IGMPv1\n            routers only support the IPv4 address type.\n\n            Non-accessible index objects that only need IPv4\n            support are:\n\n            OBJECT mgmdRouterCacheAddressType\n            SYNTAX InetAddressType { ipv4(1) }\n\n            OBJECT mgmdRouterCacheAddress\n            SYNTAX InetAddress (SIZE(4))\n\n            OBJECT mgmdRouterInterfaceQuerierType\n            SYNTAX InetAddressType { ipv4(1) }\n\n            OBJECT mgmdInverseRouterCacheAddressType\n            SYNTAX InetAddressType { ipv4(1) }\n            ')
mgmdIgmpV2MldV1HostReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 4)).setObjects(("MGMD-STD-MIB", "mgmdHostBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2HostMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV2MldV1HostReadMIBCompliance = mgmdIgmpV2MldV1HostReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV2MldV1HostReadMIBCompliance.setDescription('A read-only compliance statement for hosts running IGMPv2\n            [RFC2236] or MLDv1 [RFC2710] and implementing the MGMD\n            MIB.  IGMPv2 hosts only support the IPv4 address type and\n            MLDv1 hosts only support the IPv6 address type.')
mgmdIgmpV2MldV1HostWriteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 5)).setObjects(("MGMD-STD-MIB", "mgmdHostBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2HostMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV2MldV1HostWriteMIBCompliance = mgmdIgmpV2MldV1HostWriteMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV2MldV1HostWriteMIBCompliance.setDescription('A read-create compliance statement for hosts running\n            IGMPv2 [RFC2236] or MLDv1 [RFC2710] and implementing\n            the MGMD MIB.  IGMPv2 hosts only support the IPv4 address\n            type and MLDv1 hosts only support the IPv6 address type.')
mgmdIgmpV2MldV1RouterReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 6)).setObjects(("MGMD-STD-MIB", "mgmdRouterBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2RouterBaseMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV2MldV1RouterReadMIBCompliance = mgmdIgmpV2MldV1RouterReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV2MldV1RouterReadMIBCompliance.setDescription('A read-only compliance statement for routers running\n            IGMPv2 [RFC2236] or MLDv1 [RFC2710] and implementing\n            the MGMD MIB.  IGMPv2 routers only support the IPv4\n            address type and MLDv1 routers only support the IPv6\n            address type.')
mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 7)).setObjects(("MGMD-STD-MIB", "mgmdRouterBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2RouterBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2ProxyMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance = mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance.setDescription('A read-create compliance statement for routers running\n            IGMPv2 [RFC2236], IGMPv3 [RFC3376], MLDv1 [RFC2710], or\n            MLDv2 [RFC3810] and implementing the MGMD MIB.  IGMPv2 and\n            IGMPv3 routers only support the IPv4 address type, while\n            MLDv1 and MLDv2 routers only support the IPv6 address type.')
mgmdIgmpV3MldV2HostReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 8)).setObjects(("MGMD-STD-MIB", "mgmdHostBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2HostMIBGroup"), ("MGMD-STD-MIB", "mgmdV3HostMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV3MldV2HostReadMIBCompliance = mgmdIgmpV3MldV2HostReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV3MldV2HostReadMIBCompliance.setDescription('The compliance statement for hosts running IGMPv3\n            [RFC3376] or MLDv2 [RFC3810] and implementing the\n            MGMD MIB.  IGMPv3 hosts only support the IPv4 address\n            type and MLDv2 hosts only support the IPv6 address type.')
mgmdIgmpV3MldV2HostWriteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 9)).setObjects(("MGMD-STD-MIB", "mgmdHostBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2HostMIBGroup"), ("MGMD-STD-MIB", "mgmdV3HostMIBGroup"), ("MGMD-STD-MIB", "mgmdHostExtendedMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV3MldV2HostWriteMIBCompliance = mgmdIgmpV3MldV2HostWriteMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV3MldV2HostWriteMIBCompliance.setDescription('The compliance statement for hosts running IGMPv3\n            [RFC3376] or MLDv2 [RFC3810] and implementing the\n            MGMD MIB.  IGMPv3 hosts only support the IPv4 address\n            type and MLDv2 hosts only support the IPv6 address type.')
mgmdIgmpV3MldV2RouterReadMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 185, 2, 1, 10)).setObjects(("MGMD-STD-MIB", "mgmdRouterBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV2RouterBaseMIBGroup"), ("MGMD-STD-MIB", "mgmdV3RouterMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdIgmpV3MldV2RouterReadMIBCompliance = mgmdIgmpV3MldV2RouterReadMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mgmdIgmpV3MldV2RouterReadMIBCompliance.setDescription('A read-only compliance statement for routers running\n            IGMPv3 [RFC3376] or MLDv2 [RFC3810] and implementing\n            the MGMD MIB.  IGMPv3 routers only support the IPv4\n            address type and MLDv2 routers only support the IPv6\n            address type.')
mgmdHostBaseMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 1)).setObjects(("MGMD-STD-MIB", "mgmdHostInterfaceStatus"), ("MGMD-STD-MIB", "mgmdHostInterfaceVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdHostBaseMIBGroup = mgmdHostBaseMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdHostBaseMIBGroup.setDescription('The basic collection of objects providing management of\n            MGMD version 1, 2, or 3 for hosts.')
mgmdRouterBaseMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 2)).setObjects(("MGMD-STD-MIB", "mgmdRouterInterfaceStatus"), ("MGMD-STD-MIB", "mgmdRouterInterfaceQueryInterval"), ("MGMD-STD-MIB", "mgmdRouterCacheUpTime"), ("MGMD-STD-MIB", "mgmdRouterCacheExpiryTime"), ("MGMD-STD-MIB", "mgmdRouterInterfaceVersion"), ("MGMD-STD-MIB", "mgmdRouterInterfaceJoins"), ("MGMD-STD-MIB", "mgmdRouterInterfaceGroups"), ("MGMD-STD-MIB", "mgmdRouterCacheLastReporter"), ("MGMD-STD-MIB", "mgmdRouterInterfaceQuerierUpTime"), ("MGMD-STD-MIB", "mgmdRouterInterfaceQuerierExpiryTime"), ("MGMD-STD-MIB", "mgmdRouterInterfaceQuerier"), ("MGMD-STD-MIB", "mgmdInverseRouterCacheAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdRouterBaseMIBGroup = mgmdRouterBaseMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdRouterBaseMIBGroup.setDescription('The basic collection of objects providing management of\n            MGMD version 1, 2, or 3 for routers.')
mgmdV2HostMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 3)).setObjects(("MGMD-STD-MIB", "mgmdHostInterfaceVersion1QuerierTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdV2HostMIBGroup = mgmdV2HostMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdV2HostMIBGroup.setDescription('A collection of additional read-only objects for management\n            of IGMP version 2 in hosts for MGMD version 2 compliance.')
mgmdHostExtendedMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 4)).setObjects(("MGMD-STD-MIB", "mgmdHostCacheLastReporter"), ("MGMD-STD-MIB", "mgmdHostCacheUpTime"), ("MGMD-STD-MIB", "mgmdHostInterfaceQuerier"), ("MGMD-STD-MIB", "mgmdInverseHostCacheAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdHostExtendedMIBGroup = mgmdHostExtendedMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdHostExtendedMIBGroup.setDescription('A collection of optional objects for MGMD hosts.')
mgmdV2RouterBaseMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 5)).setObjects(("MGMD-STD-MIB", "mgmdRouterInterfaceWrongVersionQueries"), ("MGMD-STD-MIB", "mgmdRouterInterfaceLastMemberQueryCount"), ("MGMD-STD-MIB", "mgmdRouterInterfaceStartupQueryCount"), ("MGMD-STD-MIB", "mgmdRouterInterfaceStartupQueryInterval"), ("MGMD-STD-MIB", "mgmdRouterCacheVersion1HostTimer"), ("MGMD-STD-MIB", "mgmdRouterInterfaceQueryMaxResponseTime"), ("MGMD-STD-MIB", "mgmdRouterInterfaceRobustness"), ("MGMD-STD-MIB", "mgmdRouterInterfaceLastMemberQueryInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdV2RouterBaseMIBGroup = mgmdV2RouterBaseMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdV2RouterBaseMIBGroup.setDescription('A collection of additional read-only objects for\n            management of MGMD version 2 in routers.')
mgmdV2ProxyMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 6)).setObjects(("MGMD-STD-MIB", "mgmdRouterInterfaceProxyIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdV2ProxyMIBGroup = mgmdV2ProxyMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdV2ProxyMIBGroup.setDescription('A collection of additional read-create objects for\n            management of MGMD proxy devices.')
mgmdV3HostMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 7)).setObjects(("MGMD-STD-MIB", "mgmdHostInterfaceVersion2QuerierTimer"), ("MGMD-STD-MIB", "mgmdHostCacheSourceFilterMode"), ("MGMD-STD-MIB", "mgmdHostInterfaceVersion3Robustness"), ("MGMD-STD-MIB", "mgmdHostSrcListExpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdV3HostMIBGroup = mgmdV3HostMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdV3HostMIBGroup.setDescription('A collection of additional objects for\n            management of MGMD version 3 in hosts.')
mgmdV3RouterMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 185, 2, 2, 8)).setObjects(("MGMD-STD-MIB", "mgmdRouterCacheSourceFilterMode"), ("MGMD-STD-MIB", "mgmdRouterCacheVersion2HostTimer"), ("MGMD-STD-MIB", "mgmdRouterCacheExcludeModeExpiryTimer"), ("MGMD-STD-MIB", "mgmdRouterSrcListExpire"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mgmdV3RouterMIBGroup = mgmdV3RouterMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mgmdV3RouterMIBGroup.setDescription('A collection of additional read-only objects for\n            management of MGMD version 3 in routers.')
mibBuilder.exportSymbols("MGMD-STD-MIB", mgmdHostInterfaceVersion=mgmdHostInterfaceVersion, mgmdV3RouterMIBGroup=mgmdV3RouterMIBGroup, mgmdStdMIB=mgmdStdMIB, mgmdHostInterfaceStatus=mgmdHostInterfaceStatus, mgmdMIBConformance=mgmdMIBConformance, mgmdRouterSrcListExpire=mgmdRouterSrcListExpire, mgmdV2ProxyMIBGroup=mgmdV2ProxyMIBGroup, mgmdHostInterfaceEntry=mgmdHostInterfaceEntry, mgmdRouterCacheExpiryTime=mgmdRouterCacheExpiryTime, mgmdHostCacheIfIndex=mgmdHostCacheIfIndex, mgmdRouterSrcListTable=mgmdRouterSrcListTable, mgmdIgmpV2MldV1RouterReadMIBCompliance=mgmdIgmpV2MldV1RouterReadMIBCompliance, mgmdRouterCacheVersion2HostTimer=mgmdRouterCacheVersion2HostTimer, mgmdRouterInterfaceQuerierExpiryTime=mgmdRouterInterfaceQuerierExpiryTime, mgmdRouterCacheAddress=mgmdRouterCacheAddress, mgmdRouterInterfaceGroups=mgmdRouterInterfaceGroups, mgmdInverseHostCacheTable=mgmdInverseHostCacheTable, mgmdIgmpV3MldV2RouterReadMIBCompliance=mgmdIgmpV3MldV2RouterReadMIBCompliance, mgmdV2RouterBaseMIBGroup=mgmdV2RouterBaseMIBGroup, mgmdRouterSrcListEntry=mgmdRouterSrcListEntry, mgmdRouterCacheSourceFilterMode=mgmdRouterCacheSourceFilterMode, mgmdRouterInterfaceRobustness=mgmdRouterInterfaceRobustness, mgmdInverseRouterCacheAddressType=mgmdInverseRouterCacheAddressType, mgmdHostInterfaceVersion1QuerierTimer=mgmdHostInterfaceVersion1QuerierTimer, PYSNMP_MODULE_ID=mgmdStdMIB, mgmdRouterInterfaceQueryInterval=mgmdRouterInterfaceQueryInterval, mgmdRouterSrcListAddressType=mgmdRouterSrcListAddressType, mgmdMIBCompliance=mgmdMIBCompliance, mgmdRouterCacheTable=mgmdRouterCacheTable, mgmdInverseHostCacheIfIndex=mgmdInverseHostCacheIfIndex, mgmdRouterSrcListHostAddress=mgmdRouterSrcListHostAddress, mgmdHostSrcListIfIndex=mgmdHostSrcListIfIndex, mgmdRouterInterfaceStartupQueryCount=mgmdRouterInterfaceStartupQueryCount, mgmdInverseRouterCacheIfIndex=mgmdInverseRouterCacheIfIndex, mgmdHostCacheAddressType=mgmdHostCacheAddressType, mgmdInverseHostCacheEntry=mgmdInverseHostCacheEntry, mgmdInverseRouterCacheEntry=mgmdInverseRouterCacheEntry, mgmdRouterCacheVersion1HostTimer=mgmdRouterCacheVersion1HostTimer, mgmdIgmpV1HostReadMIBCompliance=mgmdIgmpV1HostReadMIBCompliance, mgmdRouterCacheExcludeModeExpiryTimer=mgmdRouterCacheExcludeModeExpiryTimer, mgmdRouterInterfaceJoins=mgmdRouterInterfaceJoins, mgmdRouterCacheLastReporter=mgmdRouterCacheLastReporter, mgmdRouterSrcListIfIndex=mgmdRouterSrcListIfIndex, mgmdIgmpV3MldV2HostReadMIBCompliance=mgmdIgmpV3MldV2HostReadMIBCompliance, mgmdRouterCacheIfIndex=mgmdRouterCacheIfIndex, mgmdHostCacheUpTime=mgmdHostCacheUpTime, mgmdRouterSrcListAddress=mgmdRouterSrcListAddress, mgmdHostInterfaceIfIndex=mgmdHostInterfaceIfIndex, mgmdHostInterfaceTable=mgmdHostInterfaceTable, mgmdInverseRouterCacheAddress=mgmdInverseRouterCacheAddress, mgmdIgmpV2MldV1HostReadMIBCompliance=mgmdIgmpV2MldV1HostReadMIBCompliance, mgmdRouterInterfaceTable=mgmdRouterInterfaceTable, mgmdRouterInterfaceQuerierUpTime=mgmdRouterInterfaceQuerierUpTime, mgmdHostSrcListAddressType=mgmdHostSrcListAddressType, mgmdHostCacheSourceFilterMode=mgmdHostCacheSourceFilterMode, mgmdRouterInterfaceIfIndex=mgmdRouterInterfaceIfIndex, mgmdInverseRouterCacheTable=mgmdInverseRouterCacheTable, mgmdRouterBaseMIBGroup=mgmdRouterBaseMIBGroup, mgmdHostSrcListEntry=mgmdHostSrcListEntry, mgmdRouterInterfaceQueryMaxResponseTime=mgmdRouterInterfaceQueryMaxResponseTime, mgmdHostCacheLastReporter=mgmdHostCacheLastReporter, mgmdHostExtendedMIBGroup=mgmdHostExtendedMIBGroup, mgmdRouterInterfaceQuerierType=mgmdRouterInterfaceQuerierType, mgmdHostSrcListExpire=mgmdHostSrcListExpire, mgmdIgmpV1RouterWriteMIBCompliance=mgmdIgmpV1RouterWriteMIBCompliance, mgmdRouterCacheUpTime=mgmdRouterCacheUpTime, mgmdHostInterfaceVersion3Robustness=mgmdHostInterfaceVersion3Robustness, mgmdHostInterfaceVersion2QuerierTimer=mgmdHostInterfaceVersion2QuerierTimer, mgmdInverseHostCacheAddressType=mgmdInverseHostCacheAddressType, mgmdHostInterfaceQuerier=mgmdHostInterfaceQuerier, mgmdRouterCacheAddressType=mgmdRouterCacheAddressType, mgmdRouterInterfaceQuerier=mgmdRouterInterfaceQuerier, mgmdHostInterfaceQuerierType=mgmdHostInterfaceQuerierType, mgmdHostCacheAddress=mgmdHostCacheAddress, mgmdIgmpV2MldV1HostWriteMIBCompliance=mgmdIgmpV2MldV1HostWriteMIBCompliance, mgmdRouterInterfaceEntry=mgmdRouterInterfaceEntry, mgmdHostCacheTable=mgmdHostCacheTable, mgmdMIBGroups=mgmdMIBGroups, mgmdRouterInterfaceLastMemberQueryCount=mgmdRouterInterfaceLastMemberQueryCount, mgmdRouterInterfaceLastMemberQueryInterval=mgmdRouterInterfaceLastMemberQueryInterval, mgmdRouterInterfaceStartupQueryInterval=mgmdRouterInterfaceStartupQueryInterval, mgmdRouterCacheEntry=mgmdRouterCacheEntry, mgmdHostSrcListHostAddress=mgmdHostSrcListHostAddress, mgmdInverseHostCacheAddress=mgmdInverseHostCacheAddress, mgmdRouterInterfaceVersion=mgmdRouterInterfaceVersion, mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance=mgmdIgmpV2V3MldV1V2RouterWriteMIBCompliance, mgmdHostSrcListAddress=mgmdHostSrcListAddress, mgmdIgmpV1RouterReadMIBCompliance=mgmdIgmpV1RouterReadMIBCompliance, mgmdHostSrcListTable=mgmdHostSrcListTable, mgmdIgmpV3MldV2HostWriteMIBCompliance=mgmdIgmpV3MldV2HostWriteMIBCompliance, mgmdV2HostMIBGroup=mgmdV2HostMIBGroup, mgmdV3HostMIBGroup=mgmdV3HostMIBGroup, mgmdRouterInterfaceWrongVersionQueries=mgmdRouterInterfaceWrongVersionQueries, mgmdRouterInterfaceProxyIfIndex=mgmdRouterInterfaceProxyIfIndex, mgmdMIBObjects=mgmdMIBObjects, mgmdHostBaseMIBGroup=mgmdHostBaseMIBGroup, mgmdHostCacheEntry=mgmdHostCacheEntry, mgmdRouterInterfaceStatus=mgmdRouterInterfaceStatus)
