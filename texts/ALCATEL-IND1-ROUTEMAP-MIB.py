#
# PySNMP MIB module ALCATEL-IND1-ROUTEMAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-ROUTEMAP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:11 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Iprm, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Iprm")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "Counter32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1RouteMapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3))
alcatelIND1RouteMapMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1RouteMapMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1RouteMapMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1RouteMapMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1RouteMapMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1RouteMapMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for\n             the configuration of IP Route Maps global configuration\n             parameters.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, or\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2006 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1RouteMapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1))
alaRouteMapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1))
class AlaRouteMapType(TextualConvention, Integer32):
    description = 'The set of Route Map Match and Route Map Set Elements.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 129, 130, 131, 132, 133, 134, 135, 136))
    namedValues = NamedValues(("matchIpAccesList", 1), ("matchIpAddress", 2), ("matchIpNextHopAccessList", 3), ("matchIpNextHopAddress", 4), ("matchIpv6AccessList", 5), ("matchIpv6Address", 6), ("matchIpv6nExtHopAccessList", 7), ("matchIpv6NextHopAddress", 8), ("matchTag", 9), ("matchIpv4Interface", 10), ("matchIpv6Interface", 11), ("matchMetric", 12), ("matchRouteType", 13), ("matchProtocol", 14), ("matchName", 15), ("setMetric", 129), ("setMetricType", 130), ("setTag", 131), ("setCommunity", 132), ("setLocalPreference", 133), ("setLevel", 134), ("setIpNexthop", 135), ("setIpv6Nexthop", 136))

class AlaRouteMapAction(TextualConvention, Integer32):
    description = 'Determines whether a Route Map or Access List address\n         should be permitted or denied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("permit", 1), ("deny", 2))

class AlaRouteMapRedistControl(TextualConvention, Integer32):
    description = 'allSubnets matches all subnets of this prefix. noSubnets\n         only matches the exact prefix. aggregate matches all subnets\n         of the prefix, but only redistributes the prefix.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("allSubnets", 1), ("noSubnets", 2), ("aggregate", 3))

alaRouteMapRedistProtoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: alaRouteMapRedistProtoTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistProtoTable.setDescription('Protocol based configuration for route redistribution.')
alaRouteMapRedistProtoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistSrcProtoId"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistDestProtoId"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistRouteMapIndex"))
if mibBuilder.loadTexts: alaRouteMapRedistProtoEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistProtoEntry.setDescription('Identifies the source protocol and Route Map to be matched\n         for route redistribution. If the route matches one of the source\n         protocols Route Maps, and the Route Map is of type permit, then\n         the route will be redistributed to the destination protocol.')
alaRouteMapRedistSrcProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("static", 3), ("rip", 4), ("ospf", 5), ("bgp", 6), ("ripng", 7), ("ospfv3", 8), ("bgp6", 9), ("isis", 10), ("isis6", 11), ("import", 12))).clone('other'))
if mibBuilder.loadTexts: alaRouteMapRedistSrcProtoId.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistSrcProtoId.setDescription('The source protocol of the route to be redistributed.')
alaRouteMapRedistDestProtoId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("rip", 1), ("ospf", 2), ("bgp", 3), ("ripng", 4), ("ospfv3", 5), ("bgp6", 6), ("isis", 7), ("isis6", 8))))
if mibBuilder.loadTexts: alaRouteMapRedistDestProtoId.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistDestProtoId.setDescription('The protocol that a route is distributed into.')
alaRouteMapRedistRouteMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaRouteMapRedistRouteMapIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistRouteMapIndex.setDescription('Index indicating Route Map to use for redistribution match.\n         In the destroy case the value 0 indicates all route-maps.')
alaRouteMapRedistStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapRedistStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistStatus.setDescription('Enable or disable the reditribution of routes into\n         the specified protocol.')
alaRouteMapRedistAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRouteMapRedistAddressType.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistAddressType.setDescription('The address family of the source and destination protocols.\n         The set is constrained to ipv4 and ipv6.')
alaRouteMapRedistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapRedistRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRedistRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaRouteMapAccessListNameTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: alaRouteMapAccessListNameTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListNameTable.setDescription('Table containing Access List name to Access List bindings.')
alaRouteMapAccessListNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListName"))
if mibBuilder.loadTexts: alaRouteMapAccessListNameEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListNameEntry.setDescription('Each entry binds an Access List Name to an Access List index.')
alaRouteMapAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: alaRouteMapAccessListName.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListName.setDescription('The name of an Access List.')
alaRouteMapAccessListNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRouteMapAccessListNameIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListNameIndex.setDescription('The index associated with the Access List name.')
alaRouteMapAccessListNameAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapAccessListNameAddressType.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListNameAddressType.setDescription('The type of address in this Access List. The set is\n         constrained to ipv4 and ipv6.')
alaRouteMapAccessListNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapAccessListNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListNameRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaRouteMapAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: alaRouteMapAccessListTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListTable.setDescription('This table contains all Access Lists configured on the switch.')
alaRouteMapAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListIndex"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListAddressType"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListAddress"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListPrefixLength"))
if mibBuilder.loadTexts: alaRouteMapAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListEntry.setDescription('Each entry identifies an IPv4 or IPv6 address or subnet to\n         match for route redistribution.')
alaRouteMapAccessListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: alaRouteMapAccessListIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListIndex.setDescription('The index associated with the Access List name.')
alaRouteMapAccessListAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 2), InetAddressType())
if mibBuilder.loadTexts: alaRouteMapAccessListAddressType.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListAddressType.setDescription('The type of address in this Access List Table Entry.\n         The set is constrained to ipv4 and ipv6.')
alaRouteMapAccessListAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 3), InetAddress())
if mibBuilder.loadTexts: alaRouteMapAccessListAddress.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListAddress.setDescription('The IPv4 or IPv6 address associated with this access list entry.\n         The type is identified by alaRouteMapAccessListAddressType.')
alaRouteMapAccessListPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaRouteMapAccessListPrefixLength.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListPrefixLength.setDescription('The prefix length in bits of the IPv4 or IPv6 address\n         associated with this Access List entry. The maximum\n         for IPv4 is 32.')
alaRouteMapAccessListRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 5), AlaRouteMapRedistControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapAccessListRedistControl.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListRedistControl.setDescription('Controls how a route is matched and redistributed.\n         allSubnets matches all subnets of the prefix. noSubnets\n         only matches the exact prefix. aggregate matches all subnets\n         of the prefix, but only redistributes the prefix.')
alaRouteMapAccessListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 6), AlaRouteMapAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapAccessListAction.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListAction.setDescription('Controls whether an address should be redistributed or\n         denied, if an Access list entry is matched.')
alaRouteMapAccessListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapAccessListRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapAccessListRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaRouteMapNameTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 4), )
if mibBuilder.loadTexts: alaRouteMapNameTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapNameTable.setDescription('Table containing Route Map name to Route Map index bindings.')
alaRouteMapNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapName"))
if mibBuilder.loadTexts: alaRouteMapNameEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapNameEntry.setDescription('Each entry binds a Route Map Name to a Route Map index.')
alaRouteMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: alaRouteMapName.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapName.setDescription('The name of a Route Map.')
alaRouteMapNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRouteMapNameIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapNameIndex.setDescription('The index associated with the Route Map name.')
alaRouteMapNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapNameRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaRouteMapSequenceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5), )
if mibBuilder.loadTexts: alaRouteMapSequenceTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceTable.setDescription('Table binds a sequence to a Route Map.')
alaRouteMapSequenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapSequenceIndex"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapSequenceNumber"))
if mibBuilder.loadTexts: alaRouteMapSequenceEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceEntry.setDescription('Each entry binds a Route Map and a Sequence.')
alaRouteMapSequenceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaRouteMapSequenceIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceIndex.setDescription('A Route Map Index.')
alaRouteMapSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50))
if mibBuilder.loadTexts: alaRouteMapSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceNumber.setDescription('The Sequence Number indicating the position of sequences\n         with the same Route Map index.')
alaRouteMapSequenceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5, 1, 3), AlaRouteMapAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapSequenceAction.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceAction.setDescription('Controls whether a sequence, if matched, should be redistributed or\n         denied.')
alaRouteMapSequenceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapSequenceRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequenceRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alaRouteMapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6), )
if mibBuilder.loadTexts: alaRouteMapTable.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapTable.setDescription('Protocol based configuration for route redistribution.')
alaRouteMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapIndex"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapSequence"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapType"), (0, "ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapValue"))
if mibBuilder.loadTexts: alaRouteMapEntry.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapEntry.setDescription('Each entry describes a match or set clause in a Route Map.')
alaRouteMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaRouteMapIndex.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapIndex.setDescription('The index associated with the Route Map name.')
alaRouteMapSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50))
if mibBuilder.loadTexts: alaRouteMapSequence.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapSequence.setDescription('Route Maps are linked together using sequence numbers.\n         All Route Maps with the same index and with different\n         sequence numbers are linked together and processed in\n         order of increasing sequence number.')
alaRouteMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1, 3), AlaRouteMapType())
if mibBuilder.loadTexts: alaRouteMapType.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapType.setDescription('The type of match or set command in this entry. Route Map\n         rows with the same Route Map Name, Sequence Number and\n         Match/Set Type form a group. An entry within the group is\n         uniquely identified by this Route Map Table object. Any\n         match within the group is considered a successful match\n         for the entire group, and matching will continue with the\n         next group.')
alaRouteMapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: alaRouteMapValue.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapValue.setDescription('The string following the match or set keyword in a\n         Route Map CLI command.')
alaRouteMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRouteMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapRowStatus.setDescription('Controls creation and deletion of Row Status entries.')
alcatelIND1RouteMapMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 2))
alcatelIND1RouteMapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 2, 1))
alcatelIND1RouteMapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 2, 2))
alaRouteMapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 2, 1, 1)).setObjects(("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRouteMapCompliance = alaRouteMapCompliance.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapCompliance.setDescription('The compliance statement for routers running Route Maps\n            and implementing the ALCATEL-IND1-ROUTEMAP MIB.')
alaRouteMapConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 2, 3, 2, 2, 1)).setObjects(("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListNameIndex"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListNameAddressType"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListNameRowStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListRedistControl"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistAddressType"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistRowStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRedistStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListAction"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapAccessListRowStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapNameIndex"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapNameRowStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapSequenceAction"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapSequenceRowStatus"), ("ALCATEL-IND1-ROUTEMAP-MIB", "alaRouteMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRouteMapConfigMIBGroup = alaRouteMapConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaRouteMapConfigMIBGroup.setDescription('A collection of objects to support management of global\n            configuration parameters of the Route Map Module.')
mibBuilder.exportSymbols("ALCATEL-IND1-ROUTEMAP-MIB", alaRouteMapSequenceNumber=alaRouteMapSequenceNumber, alaRouteMapAccessListAddress=alaRouteMapAccessListAddress, alaRouteMapRedistProtoTable=alaRouteMapRedistProtoTable, alaRouteMapRedistRowStatus=alaRouteMapRedistRowStatus, alaRouteMapSequenceRowStatus=alaRouteMapSequenceRowStatus, alaRouteMapSequenceAction=alaRouteMapSequenceAction, alaRouteMapIndex=alaRouteMapIndex, alaRouteMapAccessListAction=alaRouteMapAccessListAction, alaRouteMapType=alaRouteMapType, alcatelIND1RouteMapMIBGroups=alcatelIND1RouteMapMIBGroups, alaRouteMapAccessListNameRowStatus=alaRouteMapAccessListNameRowStatus, alaRouteMapAccessListTable=alaRouteMapAccessListTable, alaRouteMapConfig=alaRouteMapConfig, alaRouteMapNameIndex=alaRouteMapNameIndex, alaRouteMapAccessListName=alaRouteMapAccessListName, alaRouteMapAccessListIndex=alaRouteMapAccessListIndex, alaRouteMapName=alaRouteMapName, alaRouteMapRowStatus=alaRouteMapRowStatus, alaRouteMapTable=alaRouteMapTable, alaRouteMapConfigMIBGroup=alaRouteMapConfigMIBGroup, alaRouteMapValue=alaRouteMapValue, alcatelIND1RouteMapMIBObjects=alcatelIND1RouteMapMIBObjects, alaRouteMapRedistDestProtoId=alaRouteMapRedistDestProtoId, alaRouteMapAccessListAddressType=alaRouteMapAccessListAddressType, alcatelIND1RouteMapMIB=alcatelIND1RouteMapMIB, alaRouteMapAccessListNameEntry=alaRouteMapAccessListNameEntry, alaRouteMapAccessListNameTable=alaRouteMapAccessListNameTable, alaRouteMapAccessListNameIndex=alaRouteMapAccessListNameIndex, alaRouteMapRedistStatus=alaRouteMapRedistStatus, alaRouteMapAccessListNameAddressType=alaRouteMapAccessListNameAddressType, alaRouteMapNameTable=alaRouteMapNameTable, alcatelIND1RouteMapMIBConformance=alcatelIND1RouteMapMIBConformance, alcatelIND1RouteMapMIBCompliances=alcatelIND1RouteMapMIBCompliances, alaRouteMapRedistProtoEntry=alaRouteMapRedistProtoEntry, alaRouteMapAccessListRedistControl=alaRouteMapAccessListRedistControl, alaRouteMapCompliance=alaRouteMapCompliance, AlaRouteMapRedistControl=AlaRouteMapRedistControl, alaRouteMapRedistAddressType=alaRouteMapRedistAddressType, alaRouteMapAccessListEntry=alaRouteMapAccessListEntry, alaRouteMapRedistRouteMapIndex=alaRouteMapRedistRouteMapIndex, alaRouteMapAccessListRowStatus=alaRouteMapAccessListRowStatus, alaRouteMapSequenceEntry=alaRouteMapSequenceEntry, alaRouteMapSequenceIndex=alaRouteMapSequenceIndex, AlaRouteMapAction=AlaRouteMapAction, PYSNMP_MODULE_ID=alcatelIND1RouteMapMIB, alaRouteMapNameRowStatus=alaRouteMapNameRowStatus, alaRouteMapSequenceTable=alaRouteMapSequenceTable, alaRouteMapEntry=alaRouteMapEntry, alaRouteMapSequence=alaRouteMapSequence, alaRouteMapRedistSrcProtoId=alaRouteMapRedistSrcProtoId, AlaRouteMapType=AlaRouteMapType, alaRouteMapNameEntry=alaRouteMapNameEntry, alaRouteMapAccessListPrefixLength=alaRouteMapAccessListPrefixLength)
