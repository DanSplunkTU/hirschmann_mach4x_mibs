#
# PySNMP MIB module ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:12 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Vfc, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Vfc")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, Integer32, Counter64, Counter32, Bits, Gauge32, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Integer32", "Counter64", "Counter32", "Bits", "Gauge32", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "IpAddress", "ModuleIdentity")
TextualConvention, DateAndTime, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "RowStatus", "DisplayString")
alcatelIND1VfcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1))
alcatelIND1VfcMIB.setRevisions(('2010-03-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VfcMIB.setRevisionsDescriptions(('Capability Manager is used to set system wide limitation.',))
if mibBuilder.loadTexts: alcatelIND1VfcMIB.setLastUpdated('201003150000Z')
if mibBuilder.loadTexts: alcatelIND1VfcMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VfcMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VfcMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 System Capability Manager, to allow for system control and limitation setting, of\n                 different, features through out the system.\n                 Capability manager is a centralized process which provides hardware information and\n                 capability to other processes. To optimize the system performance , certain features\n                 may be configured to a lower than the hardware limit through capability manager.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2009 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1VfcMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1))
if mibBuilder.loadTexts: alcatelIND1VfcMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VfcMIBObjects.setDescription('Branch For Virtual Flow Control Subsystem Managed Objects.')
alcatelIND1VfcMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2))
if mibBuilder.loadTexts: alcatelIND1VfcMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VfcMIBConformance.setDescription('Branch For VFC Subsystem Conformance Information.')
alcatelIND1VfcMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1VfcMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VfcMIBGroups.setDescription('Branch For VFC Subsystem Units Of Conformance.')
alcatelIND1VfcMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1VfcMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VfcMIBCompliances.setDescription('Branch For VFC Subsystem Compliance Statements.')
alaVfcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1))
alaVfcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 2))
class VfcEnableState(TextualConvention, Integer32):
    description = 'Administrative state of a VFC entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class VfcBwLimitType(TextualConvention, Integer32):
    description = 'Units of traffic shaping lower and upper limit.  If a percentage is specified\n         the granularity of the limit value is 1Mb.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mbits", 1), ("percentage", 2))

class VfcProfileType(TextualConvention, Integer32):
    description = 'Type of profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("wredProfile", 1), ("qsetProfile", 2), ("qProfile", 3))

class VfcQueueType(TextualConvention, Integer32):
    description = 'QoS characteristics of queue. SApecified in RFC 3289 as Differentiated Services Code Point values.'
    status = 'current'

class VfcQsetAction(TextualConvention, Integer32):
    description = 'Action on Qset.\n\n        TC deprecated; actions on Qset are done by modifying the QSI table.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("default", 0), ("override", 1), ("detach", 2), ("revert", 3))

class VfcQsapList(TextualConvention, OctetString):
    description = 'Each group of four octets in this string specify\n                     a 32-bit Qsap Id.  The Qsap Ids are stored in network\n                     byte order; i.e. octet N corresponds to the most\n                     significant 8 bits of the Qsap ID, and octet N+3 correspond\n                     to the least significant 8 bits. Four octets with a value of 0xFF\n                     indicate that all Qsaps have been retrieved.  The list is\n                     large enough to hold up to 32 Qsap Ids.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class VfcQsapType(TextualConvention, Integer32):
    description = 'Type of Qsap.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("all", 1), ("slot", 2), ("slotport", 3), ("lag", 4), ("ipif", 5), ("lsp", 6), ("sbind", 7), ("sap", 8))

class VfcSchedulingMethod(TextualConvention, Integer32):
    description = 'Algorithm used by scheduler for related object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("strictPriority", 1), ("queueSpecified", 2))

class VfcWfqMode(TextualConvention, Integer32):
    description = 'WFQ Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("werr", 1), ("wrr", 2))

class VfcProfileMode(TextualConvention, Integer32):
    description = 'Configured mode of the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nonDcb", 1), ("dcb", 2))

alaVfcWREDProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaVfcWREDProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcWREDProfileTable.setDescription('A table of WRED profiles.')
alaVfcWREDProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPId"))
if mibBuilder.loadTexts: alaVfcWREDProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcWREDProfileEntry.setDescription('A WRED profile entry.')
alaVfcWRPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaVfcWRPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPId.setDescription('Identifier of WRED profile.')
alaVfcWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 2), VfcEnableState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVfcWRPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcWRPAdminState.setDescription('Administrative state of WRED profile.  Setting this variable to\n                 disabled disables all Qsets and queues which use it.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcWRPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPName.setDescription('Name of WRED profile.')
alaVfcWRPGreenMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPGreenMinThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPGreenMinThreshold.setDescription('Minimum threshold (percentage of queue size).')
alaVfcWRPGreenMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPGreenMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPGreenMaxThreshold.setDescription('Maximum threshold (percentage of queue size).')
alaVfcWRPGreenMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPGreenMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPGreenMaxDropProbability.setDescription('Maximum probability of a packet being dropped (percent).')
alaVfcWRPGreenGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPGreenGain.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPGreenGain.setDescription('Burst smoothing factor used for EWMA calculations.')
alaVfcWRPYellowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPYellowMinThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPYellowMinThreshold.setDescription('Minimum threshold (percentage of queue size).')
alaVfcWRPYellowMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPYellowMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPYellowMaxThreshold.setDescription('Maximum threshold (percentage of queue size).')
alaVfcWRPYellowMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPYellowMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPYellowMaxDropProbability.setDescription('Maximum probability of a packet being dropped (percent).')
alaVfcWRPYellowGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPYellowGain.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPYellowGain.setDescription('Burst smoothing factor used for EWMA calculations.')
alaVfcWRPRedMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPRedMinThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPRedMinThreshold.setDescription('Minimum threshold (percentage of queue size).')
alaVfcWRPRedMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPRedMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPRedMaxThreshold.setDescription('Maximum threshold (percentage of queue size).')
alaVfcWRPRedMaxDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPRedMaxDropProbability.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPRedMaxDropProbability.setDescription('Maximum probability of a packet being dropped (percent).')
alaVfcWRPRedGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPRedGain.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPRedGain.setDescription('Burst smoothing factor used for EWMA calculations.')
alaVfcWRPStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 16), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPStatsAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcWRPStatsAdmin.setDescription('Statistics collection state.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcWRPAttachmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPAttachmentCount.setDescription('Number of queues and/or qsets using this profile.')
alaVfcWRPMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPMTU.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPMTU.setDescription('MTU for this profile.')
alaVfcWRPLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPLastChange.setDescription('Time of most recent change to this entry.')
alaVfcWRPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 1, 1, 20), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcWRPRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVfcWRPRowStatus.setDescription('alaVfcWRPRowStatus controls the creation and deletion of\n                 rows in the alaVfcWREDProfileTable.')
alaVfcQsetProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaVfcQsetProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetProfileTable.setDescription('A table of Qset profiles.')
alaVfcQsetProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPId"))
if mibBuilder.loadTexts: alaVfcQsetProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetProfileEntry.setDescription('A Qset profile entry.')
alaVfcQSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaVfcQSPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPId.setDescription('Identifier of Qset profile.')
alaVfcQSPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 2), VfcEnableState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQSPAdminState.setDescription('Administrative state of Qset profile.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPName.setDescription('Name of Qset profile.')
alaVfcQSPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPType.setDescription('Type of Qset profile.')
alaVfcQSPTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPTemplateId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPTemplateId.setDescription('Identifier of Qset profile used as a template for this Qset profile.')
alaVfcQSPTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPTemplateName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPTemplateName.setDescription('Name of Qset profile used as a template for this Qset profile.')
alaVfcQSPBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 7), VfcBwLimitType().clone('percentage')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPBandwidthLimitType.setDescription('Specifies the units used for input bandwidth limit, alaVfcQSPBandwidthLimitValue.')
alaVfcQSPBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPBandwidthLimitValue.setDescription('Limit to be enforced on input traffic.  Units are specified by alaVfcQSPBandwidthLimitType.')
alaVfcQSPQueueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 9), Unsigned32().clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPQueueCount.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPQueueCount.setDescription('Number of queues for this Qset.  Legal values are 1,4, or 8.')
alaVfcQSPWRPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPWRPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPWRPId.setDescription('Identifier of WRED profile to be used for this Qset.')
alaVfcQSPWRPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPWRPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPWRPName.setDescription('Name of WRED profile to be used for this Qset.')
alaVfcQSPWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 12), VfcEnableState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVfcQSPWRPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQSPWRPAdminState.setDescription('Administrative state of Qset Profile WRED profile.  Setting this variable to\n                 disabled disables it for all objects using this QSP.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQSPSchedulingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 13), VfcSchedulingMethod().clone('strictPriority')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPSchedulingMethod.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPSchedulingMethod.setDescription('Input scheduling method used by this Qset.')
alaVfcQSPStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 14), VfcEnableState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVfcQSPStatsAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQSPStatsAdmin.setDescription('If set to enable, collect statistics for queues in this Qset.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQSPAttachmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPAttachmentCount.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPAttachmentCount.setDescription('Number of Qsaps attached to this profile.')
alaVfcQSPLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPLastChange.setDescription('Time of most recent change to this entry.')
alaVfcQSPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 2, 1, 17), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSPRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSPRowStatus.setDescription('alaVfcQSPRowStatus controls the creation and deletion of\n                 rows in the alaVfcQsetProfileTable.')
alaVfcQsetInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaVfcQsetInstanceTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetInstanceTable.setDescription('A table of Qset instances.')
alaVfcQsetInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetId"))
if mibBuilder.loadTexts: alaVfcQsetInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetInstanceEntry.setDescription('A Qset entry.')
alaVfcQsetId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaVfcQsetId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetId.setDescription('Identifier of this Qset instance.')
alaVfcQsetQsapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetQsapId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetQsapId.setDescription('Identifier of default Qset Instance attached to this Qset.')
alaVfcQsetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 3), VfcEnableState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetAdminState.setDescription('Administrative state of Qset.  Setting this variable to\n                 disabled disables all queues using this Qset.\n\n                 Object deprecated since it does not affect VFC traffic behavior.\n                 Use interfaces commands to disable traffic flow.')
alaVfcQsetOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 4), VfcEnableState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetOperState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetOperState.setDescription('Operational state of Qset instance.\n\n                 Object deprecated as a result of deprecating alaVfcQsetAdminState')
alaVfcQsetQSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetQSPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetQSPId.setDescription('Identifier of Qset profile used by this Qset.\n                 Can only be set to (1..8). Setting this will change the\n                 port mode to NDCB. When reading can return value (1..128)\n                 when port mode is DCB.')
alaVfcQsetQSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetQSPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetQSPName.setDescription('Name of Qset profile used by this Qset.\n                 Setting this will change the port mode to NDCB.')
alaVfcQsetOperBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 7), VfcBwLimitType().clone('percentage')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetOperBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetOperBandwidthLimitType.setDescription('Specifies the units of bandwidth limit currently in use.')
alaVfcQsetOperBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetOperBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetOperBandwidthLimitValue.setDescription('Current limit enforced on input traffic.  Units are specified by alaVfcQsetOperBandwidthLimitType.')
alaVfcQsetBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 9), VfcBwLimitType().clone('percentage')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetBandwidthLimitType.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetBandwidthLimitType.setDescription('Specifies the units used for input bandwidth limit, alaVfcQsetBandwidthLimitValue.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPBandwidthLimitType instead.')
alaVfcQsetBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetBandwidthLimitValue.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetBandwidthLimitValue.setDescription('Limit to be enforced on input traffic.  Units are specified by alaVfcQsetBandwidthLimitType.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPBandwidthLimitValue instead.')
alaVfcQsetQueueCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 11), Unsigned32().clone(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetQueueCount.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetQueueCount.setDescription('Number of queues for this Qset.  Legal values are 1,4, or 8.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPQueueCount instead.')
alaVfcQsetWRPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetWRPId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetWRPId.setDescription('Identifier of WRED profile to be used for this Qset.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPWRPId instead.')
alaVfcQsetWRPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetWRPName.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetWRPName.setDescription('Name of WRED profile to be used for this Qset.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPWRPName instead.')
alaVfcQsetWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 14), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetWRPAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetWRPAdminState.setDescription('Administrative state of Qset WRED profile.  Setting this variable to\n                 disabled disables the WRED profile for all objects using this Qset.')
alaVfcQsetWRPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 15), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetWRPOperState.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetWRPOperState.setDescription('Operational state of Qset WRED profile.  Setting this variable to\n                 disabled disables the WRED profile for all objects using this Qset.')
alaVfcQsetSchedulingMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 16), VfcSchedulingMethod().clone('strictPriority')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetSchedulingMethod.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsetSchedulingMethod.setDescription('Input scheduling method used by this Qset.\n\n                Object deprecated because it is a duplicate. Use alaVfcQSPSchedulingMethod instead.')
alaVfcQsetStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 17), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetStatsAdmin.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetStatsAdmin.setDescription('If set to enable, collect statistics for queues in this Qset.')
alaVfcQsetStatsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 18), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetStatsOper.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetStatsOper.setDescription('If set to enable, collecting statistics for queues in this Qset.')
alaVfcQsetLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetLastChange.setDescription('Time of most recent change to this entry.')
alaVfcQsetStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 20), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetStatsClear.setDescription('If set to enable, reset statistics for queues in this Qset.')
alaVfcQsetStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsetStatsInterval.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetStatsInterval.setDescription('The stats gathering time interval.')
alaVfcQsetMisconfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 22), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetMisconfigured.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetMisconfigured.setDescription('If set to enable, DCB configuration could not be applied.\n                 Default VFC behavior has been configured instead.')
alaVfcQsetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 3, 1, 23), VfcProfileMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsetMode.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetMode.setDescription('Specifies the operating mode on the qsi.\n                 QSI mode can be non-dcb or dcb.')
alaVfcQProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaVfcQProfileTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQProfileTable.setDescription('A table of Queue profiles.')
alaVfcQProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPQSPId"), (0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPQId"))
if mibBuilder.loadTexts: alaVfcQProfileEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQProfileEntry.setDescription('A QProfile entry.')
alaVfcQPQSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaVfcQPQSPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPQSPId.setDescription('Identifier of Qset associated with this Queue Profile.')
alaVfcQPQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaVfcQPQId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPQId.setDescription('Identifier of queue associated with this Queue Profile.')
alaVfcQPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 3), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQPAdminState.setDescription('Administrative state of Queue profile.  Setting this variable to\n                 disabled disables the queue profile for all objects using this Queue profile.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQPWRPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPWRPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPWRPId.setDescription('Identifier of associated WRED profile.')
alaVfcQPWRPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPWRPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPWRPName.setDescription('Name of associated WRED profile.')
alaVfcQPWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 6), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPWRPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQPWRPAdminState.setDescription('Administrative state of Qset WRED profile.  Setting this variable to\n                 disabled disables the WRED profile for all objects using this Queue profile.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQPQSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPQSPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPQSPName.setDescription('Name of Qset instance.')
alaVfcQPTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPTrafficClass.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPTrafficClass.setDescription('Traffic class of the queue.')
alaVfcQPQType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 9), VfcQueueType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPQType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPQType.setDescription('Type of the queue.')
alaVfcQPCIRBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 10), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPCIRBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPCIRBandwidthLimitType.setDescription('Type of CIR bandwidth Limit to be applied to queue traffic.')
alaVfcQPCIRBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPCIRBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPCIRBandwidthLimitValue.setDescription('CIR limit to be applied to queue traffic.')
alaVfcQPPIRBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 12), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPPIRBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPPIRBandwidthLimitType.setDescription('Type of PIR bandwidth Limit to be applied to queue traffic.')
alaVfcQPPIRBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPPIRBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPPIRBandwidthLimitValue.setDescription('PIR limit to be applied to queue traffic.')
alaVfcQPStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 14), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPStatsAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQPStatsAdmin.setDescription('If set to enable, collect statistics for queues in this QP.\n\n                Object deprecated in effort to simplify VFC.')
alaVfcQPCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPCbs.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPCbs.setDescription('Cbs value.')
alaVfcQPMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPMbs.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPMbs.setDescription('Mbs value.')
alaVfcQPLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPLastChange.setDescription('Time of most recent change to this entry.')
alaVfcQPWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPWfqWeight.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPWfqWeight.setDescription('WFQ Weight.')
alaVfcQPWfqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 4, 1, 19), VfcWfqMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQPWfqMode.setStatus('current')
if mibBuilder.loadTexts: alaVfcQPWfqMode.setDescription('WFQ Mode.')
alaVfcQInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5), )
if mibBuilder.loadTexts: alaVfcQInstanceTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceTable.setDescription('A table of Queue instances.')
alaVfcQInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceQsiId"), (0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceQId"))
if mibBuilder.loadTexts: alaVfcQInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceEntry.setDescription('A QInstance entry.')
alaVfcQInstanceQsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaVfcQInstanceQsiId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceQsiId.setDescription('Identifier of Qset associated with this QInstance.')
alaVfcQInstanceQId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: alaVfcQInstanceQId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceQId.setDescription('Identifier of queue associated with this QInstance.')
alaVfcQInstanceQsapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceQsapId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceQsapId.setDescription('Identifier of Qsap associated with this QInstance.\n\n                Object deprecated because it is a duplicate. Use alaVfcQsetQsapId instead.')
alaVfcQInstanceQSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceQSPId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceQSPId.setDescription('Identifier of Qset associated with this QInstance.\n\n                Object deprecated because it is a duplicate. Use alaVfcQsetQSPId instead.')
alaVfcQInstanceQSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceQSPName.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceQSPName.setDescription('Name of Qset profile associated with with QInstance.\n\n                Object deprecated because it is a duplicate. Use alaVfcQsetQSPName instead.')
alaVfcQInstanceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 6), VfcEnableState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQInstanceAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceAdminState.setDescription('Administrative state of this QInstance.  Setting this variable to\n                 disabled disables this queue.\n\n                 Object deprecated as a result of deprecating alaVfcQsetAdminState.')
alaVfcQInstanceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 7), VfcEnableState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceOperState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceOperState.setDescription('Operational state of this QInstance.\n\n                 Object deprecated as a result of deprecating alaVfcQsetAdminState.')
alaVfcQInstanceWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 8), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQInstanceWRPAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceWRPAdminState.setDescription('Administrative state of Qset WRED profile.  Setting this variable to\n                 disabled disables the WRED profile for this Queue.')
alaVfcQInstanceWRPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 9), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceWRPOperState.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceWRPOperState.setDescription('Operational state of Qset WRED profile.')
alaVfcQInstanceWRPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceWRPId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceWRPId.setDescription('Associated WRED Profile.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPWRPId instead.')
alaVfcQInstanceWRPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceWRPName.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceWRPName.setDescription('Name of Associated WRED Profile.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPWRPName instead.')
alaVfcQInstanceCIRBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 12), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceCIRBandwidthLimitType.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceCIRBandwidthLimitType.setDescription('Type of CIR bandwidth Limit currently applied to queue traffic.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPCIRBandwidthLimitType instead.')
alaVfcQInstanceCIRBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceCIRBandwidthLimitValue.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceCIRBandwidthLimitValue.setDescription('CIR limit currently applied to queue traffic.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPCIRBandwidthLimitValue instead.')
alaVfcQInstancePIRBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 14), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePIRBandwidthLimitType.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstancePIRBandwidthLimitType.setDescription('Type of PIR bandwidth Limit currently applied to queue traffic.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPPIRBandwidthLimitType instead.')
alaVfcQInstancePIRBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePIRBandwidthLimitValue.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstancePIRBandwidthLimitValue.setDescription('PIR limit currently applied to queue traffic.\n\n                Object deprecated because it is a duplicate. Use alaVfcQPPIRBandwidthLimitValue instead.')
alaVfcQInstanceCIROperationalBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 16), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceCIROperationalBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceCIROperationalBandwidthLimitType.setDescription('Type of CIR bandwidth Limit currently applied to queue traffic.')
alaVfcQInstanceCIROperationalBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceCIROperationalBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceCIROperationalBandwidthLimitValue.setDescription('CIR limit currently applied to queue traffic.')
alaVfcQInstancePIROperationalBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 18), VfcBwLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePIROperationalBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstancePIROperationalBandwidthLimitType.setDescription('Type of PIR bandwidth Limit currently applied to queue traffic.')
alaVfcQInstancePIROperationalBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePIROperationalBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstancePIROperationalBandwidthLimitValue.setDescription('PIR limit currently applied to queue traffic.')
alaVfcQInstanceStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 20), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQInstanceStatsAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceStatsAdmin.setDescription('Administrative state of statistics.\n                 Deprecated - queue stats changes not allowed.')
alaVfcQInstanceStatsOper = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 21), VfcEnableState().clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceStatsOper.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceStatsOper.setDescription('Operational state of statistics.\n                 Deprecated - queue stats changes not allowed.')
alaVfcQInstancePacketsEnqueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePacketsEnqueued.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstancePacketsEnqueued.setDescription('Scheduler packet enqueued count.')
alaVfcQInstanceBytesEnqueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceBytesEnqueued.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceBytesEnqueued.setDescription('Scheduler byte enqueued count.')
alaVfcQInstancePacketsDequeued = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePacketsDequeued.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstancePacketsDequeued.setDescription('Scheduler packet dequeued count.\n\n                Deprecated for lack of HW support.')
alaVfcQInstanceBytesDequeued = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceBytesDequeued.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceBytesDequeued.setDescription('Scheduler byte dequeued count.\n\n                Deprecated for lack of HW support.')
alaVfcQInstancePacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstancePacketsDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstancePacketsDropped.setDescription('Non-WRED dropped packet count.')
alaVfcQInstanceBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceBytesDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceBytesDropped.setDescription('Non-WRED dropped byte count.')
alaVfcQInstanceGreenPacketsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceGreenPacketsAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceGreenPacketsAccepted.setDescription('WRED green accepted packet count.')
alaVfcQInstanceGreenBytesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceGreenBytesAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceGreenBytesAccepted.setDescription('WRED green accepted byte count.')
alaVfcQInstanceGreenPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceGreenPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceGreenPacketsDropped.setDescription('WRED green dropped packet count.')
alaVfcQInstanceGreenBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceGreenBytesDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceGreenBytesDropped.setDescription('WRED green dropped byte count.')
alaVfcQInstanceYellowPacketsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceYellowPacketsAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceYellowPacketsAccepted.setDescription('WRED yellow accepted packet count.')
alaVfcQInstanceYellowBytesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceYellowBytesAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceYellowBytesAccepted.setDescription('WRED yellow accepted byte count.')
alaVfcQInstanceYellowPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceYellowPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceYellowPacketsDropped.setDescription('WRED yellow dropped packet count.')
alaVfcQInstanceYellowBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceYellowBytesDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceYellowBytesDropped.setDescription('WRED yellow dropped byte count.')
alaVfcQInstanceRedPacketsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceRedPacketsAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceRedPacketsAccepted.setDescription('WRED red accepted packet count.')
alaVfcQInstanceRedBytesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceRedBytesAccepted.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceRedBytesAccepted.setDescription('WRED red accepted byte count.')
alaVfcQInstanceRedPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceRedPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceRedPacketsDropped.setDescription('WRED red dropped packet count.')
alaVfcQInstanceRedBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceRedBytesDropped.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceRedBytesDropped.setDescription('WRED red dropped byte count.')
alaVfcQInstanceLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 40), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQInstanceLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceLastChange.setDescription('Time of most recent change to this entry.')
alaVfcQInstanceStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 5, 1, 41), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQInstanceStatsClear.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQInstanceStatsClear.setDescription('Operational state of statistics.\n                 Deprecated - queue stats changes not allowed.')
alaVfcQsapTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6), )
if mibBuilder.loadTexts: alaVfcQsapTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapTable.setDescription('A table of Qsaps.')
alaVfcQsapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapId"))
if mibBuilder.loadTexts: alaVfcQsapEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapEntry.setDescription('A Qsap entry.')
alaVfcQsapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaVfcQsapId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapId.setDescription('Identifier of this Qsap.')
alaVfcQsapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 2), VfcEnableState().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapAdminState.setDescription('Administrative state of this Qsap.\n\n                 Object deprecated as a result of deprecating alaVfcQsetAdminState.')
alaVfcQsapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 3), VfcQsapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapType.setDescription('Type of this Qsap.')
alaVfcQsapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapValue.setDescription('Value of this Qsap.  The meaning of this object depends on the value of object alaVfcQsapType.')
alaVfcQsapQSPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapQSPId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapQSPId.setDescription('Identifier of Qset associated with this Qsap.\n\n                Deprecated since value can be accessed through the QSI. Use alaVfcQsetQSPId instead.')
alaVfcQsapQSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapQSPName.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapQSPName.setDescription('Name of Qset associated with this Qsap.\n\n                Deprecated since value can be accessed through the QSI. Use alaVfcQsetQSPName instead.')
alaVfcQsapWRPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 7), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapWRPAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapWRPAdminState.setDescription('Administrative state of WRED.\n\n                Deprecated since value can be accessed through the QSI. Use alaVfcQsetWRPAdminState instead.')
alaVfcQsapStatsAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 8), VfcEnableState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapStatsAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapStatsAdmin.setDescription('Administrative state of statistics.\n\n                Deprecated since value can be accessed through the QSI. Use alaVfcQsetStatsAdmin instead.')
alaVfcQsapBandwidthLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 9), VfcBwLimitType().clone('percentage')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapBandwidthLimitType.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapBandwidthLimitType.setDescription('Specifies the units used for input bandwidth limit, alaVfcQSPBandwidthLimitValue.')
alaVfcQsapBandwidthLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapBandwidthLimitValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapBandwidthLimitValue.setDescription('Limit to be enforced on input traffic.  Units are specified by alaVfcQSPBandwidthLimitType.')
alaVfcQsapClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapClearStats.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapClearStats.setDescription('Used to Clear all Statistics counters.\n                By default, this object contains zero value.\n\n                Deprecated since value can be accessed through the QSI. Use alaVfcQsetStatsClear instead.')
alaVfcQsapQpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapQpId.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapQpId.setDescription('Used to Clear Queue Statistics counters.\n                By default, this object contains zero value.\n\n                Value used to identify the QI modify. Deprecated since QI\n                can be modified using the QI table.')
alaVfcQsapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 13), VfcQsetAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcQsapAction.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcQsapAction.setDescription('Action to be performed on the Qsap.\n\n                TC deprecated; actions on Qset are done by modifying the QSI table.')
alaVfcQsapLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapLastChange.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapLastChange.setDescription('Time of most recent change to this entry.')
alaVfcQsapParent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQsapParent.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapParent.setDescription('Parent ID.')
alaVfcProfileIndexLookupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaVfcProfileIndexLookupTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileIndexLookupTable.setDescription("This table provides the index of a profile entry given it's name.")
alaVfcProfileIndexLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileType"), (1, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileName"))
if mibBuilder.loadTexts: alaVfcProfileIndexLookupEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileIndexLookupEntry.setDescription('A  profile entry.')
alaVfcProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 7, 1, 1), VfcProfileType())
if mibBuilder.loadTexts: alaVfcProfileType.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileType.setDescription('Type of  profile.')
alaVfcProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaVfcProfileName.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileName.setDescription('Name of  profile.')
alaVfcProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcProfileId.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileId.setDescription('Identifier of  profile.')
alaVfcProfileQsapLookupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8), )
if mibBuilder.loadTexts: alaVfcProfileQsapLookupTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupTable.setDescription('Repeated Get Next requests on this table return lists of\n                 Qsaps used by a profile.')
alaVfcProfileQsapLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileQsapLookupType"), (0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileQsapLookupId"), (0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileQsapLookupValue"))
if mibBuilder.loadTexts: alaVfcProfileQsapLookupEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupEntry.setDescription('A  profile qsap lookup entry.')
alaVfcProfileQsapLookupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8, 1, 1), VfcProfileType())
if mibBuilder.loadTexts: alaVfcProfileQsapLookupType.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupType.setDescription('Type of  profile.')
alaVfcProfileQsapLookupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: alaVfcProfileQsapLookupId.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupId.setDescription('Identifier of  profile.')
alaVfcProfileQsapLookupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaVfcProfileQsapLookupValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupValue.setDescription('Identifier of last Qsap returned.')
alaVfcProfileQsapLookupList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 8, 1, 4), VfcQsapList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcProfileQsapLookupList.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupList.setDescription('A list of Qsaps using this profile.')
alaVfcQSIQsapLookupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 9), )
if mibBuilder.loadTexts: alaVfcQSIQsapLookupTable.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupTable.setDescription('Repeated Get Next requests on this table return lists of\n                 Qsaps used by a Qset Instance.')
alaVfcQSIQsapLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSIQsapLookupQsetId"), (0, "ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSIQsapLookupValue"))
if mibBuilder.loadTexts: alaVfcQSIQsapLookupEntry.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupEntry.setDescription('A Qset instance lookup entry.')
alaVfcQSIQsapLookupQsetId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: alaVfcQSIQsapLookupQsetId.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupQsetId.setDescription('Identifier of Qset profile used by this Qset.')
alaVfcQSIQsapLookupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: alaVfcQSIQsapLookupValue.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupValue.setDescription('Identifier of last Qsap returned.')
alaVfcQSIQsapLookupList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 9, 1, 3), VfcQsapList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcQSIQsapLookupList.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupList.setDescription('A list of Qsaps using this Qset instance.')
alaVfcStatisticsCollectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcStatisticsCollectionInterval.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcStatisticsCollectionInterval.setDescription('This object specifies the frequency of statistics collection.\n                 Units are minutes.\n\n                Deprecated since value can be modified per port using the QSI table.\n                Use alaVfcQsetStatsInterval instead.')
alaVfcStatisticsCollectionDuration = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVfcStatisticsCollectionDuration.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcStatisticsCollectionDuration.setDescription('This object specifies the duration of statistics collection.\n                 Each time the value of this object is changed, statistics are\n                 collected for the time specified for each entity which has statistics\n                 collection enabled.  Setting this object to zero stops all statistics\n                 collection.  Units are minutes.\n\n                Deprecated due to lack of HW support.')
alaVfcSystemDefaultQsetQSPId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcSystemDefaultQsetQSPId.setStatus('current')
if mibBuilder.loadTexts: alaVfcSystemDefaultQsetQSPId.setDescription('Identifier of Qset profile.')
alaVfcSystemDefaultQsetQSPName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVfcSystemDefaultQsetQSPName.setStatus('current')
if mibBuilder.loadTexts: alaVfcSystemDefaultQsetQSPName.setDescription('Name of Qset profile.')
alcatelIND1VfcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWREDProfileGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetProfileGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetInstanceGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQProfileGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileIndexLookupGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileQsapLookupGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSIQsapLookupGroup"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1VfcMIBCompliance = alcatelIND1VfcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1VfcMIBCompliance.setDescription('Compliance statement for VFC Subsystem.')
alaVfcWREDProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPGreenMinThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPGreenMaxThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPGreenMaxDropProbability"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPGreenGain"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPYellowMinThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPYellowMaxThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPYellowMaxDropProbability"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPYellowGain"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPRedMinThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPRedMaxThreshold"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPRedMaxDropProbability"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPRedGain"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPAttachmentCount"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPMTU"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcWRPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcWREDProfileGroup = alaVfcWREDProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcWREDProfileGroup.setDescription('Collection of WRED Profile for management of VFC.')
alaVfcQsetProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPTemplateId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPTemplateName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPQueueCount"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPWRPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPWRPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPSchedulingMethod"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPAttachmentCount"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQsetProfileGroup = alaVfcQsetProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetProfileGroup.setDescription('Collection of Qset Profile for management of VFC.')
alaVfcQsetInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetQsapId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetOperState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetQSPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetQSPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetOperBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetOperBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetQueueCount"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetWRPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetWRPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetWRPOperState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetSchedulingMethod"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetStatsOper"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetStatsClear"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetStatsInterval"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetMisconfigured"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsetMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQsetInstanceGroup = alaVfcQsetInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsetInstanceGroup.setDescription('Collection of Qset Instance for management of VFC.')
alaVfcQProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPWRPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPWRPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPQSPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPTrafficClass"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPQType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPCIRBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPCIRBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPPIRBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPPIRBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPCbs"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPMbs"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPWfqWeight"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQPWfqMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQProfileGroup = alaVfcQProfileGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQProfileGroup.setDescription('Collection of Q Profile for management of VFC.')
alaVfcQInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceQsapId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceQSPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceQSPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceOperState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceWRPOperState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceWRPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceWRPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceCIRBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceCIRBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePIRBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePIRBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceCIROperationalBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceCIROperationalBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePIROperationalBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePIROperationalBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceStatsOper"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePacketsEnqueued"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceBytesEnqueued"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePacketsDequeued"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceBytesDequeued"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstancePacketsDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceBytesDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceGreenPacketsAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceGreenBytesAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceGreenPacketsDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceGreenBytesDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceYellowPacketsAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceYellowBytesAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceYellowPacketsDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceYellowBytesDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceRedPacketsAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceRedBytesAccepted"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceRedPacketsDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceRedBytesDropped"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQInstanceStatsClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQInstanceGroup = alaVfcQInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQInstanceGroup.setDescription('Collection of Q Instance for management of VFC.')
alaVfcQsapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapQSPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapQSPName"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapWRPAdminState"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapStatsAdmin"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapBandwidthLimitType"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapBandwidthLimitValue"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapClearStats"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapQpId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapAction"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapLastChange"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQsapParent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQsapGroup = alaVfcQsapGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQsapGroup.setDescription('Collection of Q SAP Profile for management of VFC.')
alaVfcProfileIndexLookupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcProfileIndexLookupGroup = alaVfcProfileIndexLookupGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileIndexLookupGroup.setDescription('Collection of Profile Index Lookup Profile for management of VFC.')
alaVfcProfileQsapLookupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcProfileQsapLookupList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcProfileQsapLookupGroup = alaVfcProfileQsapLookupGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcProfileQsapLookupGroup.setDescription('Collection of Profile Qsap Lookup for management of VFC.')
alaVfcQSIQsapLookupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcQSIQsapLookupList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcQSIQsapLookupGroup = alaVfcQSIQsapLookupGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcQSIQsapLookupGroup.setDescription('Collection of QSI Qsap Lookup for management of VFC.')
alaVfcStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcStatisticsCollectionInterval"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcStatisticsCollectionDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcStatsGroup = alaVfcStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: alaVfcStatsGroup.setDescription('Collection of Statistics Configuration Objects for management of VFC.\n\n            Deprecated since all objects in this group have been deprecated.')
alaVfcSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 61, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcSystemDefaultQsetQSPId"), ("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", "alaVfcSystemDefaultQsetQSPName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVfcSystemGroup = alaVfcSystemGroup.setStatus('current')
if mibBuilder.loadTexts: alaVfcSystemGroup.setDescription('Collection of system QSet instance Objects.')
mibBuilder.exportSymbols("ALCATEL-IND1-VIRTUAL-FLOW-CONTROL-MIB", alaVfcQInstanceAdminState=alaVfcQInstanceAdminState, VfcBwLimitType=VfcBwLimitType, alaVfcSystemDefaultQsetQSPId=alaVfcSystemDefaultQsetQSPId, alaVfcQsetStatsInterval=alaVfcQsetStatsInterval, alaVfcWRPRedGain=alaVfcWRPRedGain, alaVfcQsetAdminState=alaVfcQsetAdminState, alaVfcProfileQsapLookupValue=alaVfcProfileQsapLookupValue, alaVfcQsetLastChange=alaVfcQsetLastChange, alaVfcQInstanceYellowPacketsDropped=alaVfcQInstanceYellowPacketsDropped, alaVfcQInstanceYellowBytesAccepted=alaVfcQInstanceYellowBytesAccepted, alaVfcWRPAdminState=alaVfcWRPAdminState, alaVfcQsapGroup=alaVfcQsapGroup, alaVfcWRPGreenGain=alaVfcWRPGreenGain, alaVfcQInstanceCIRBandwidthLimitType=alaVfcQInstanceCIRBandwidthLimitType, alaVfcQsetBandwidthLimitValue=alaVfcQsetBandwidthLimitValue, alaVfcQsetQSPId=alaVfcQsetQSPId, alaVfcQSIQsapLookupTable=alaVfcQSIQsapLookupTable, alaVfcQsetMode=alaVfcQsetMode, VfcQueueType=VfcQueueType, alaVfcQsapId=alaVfcQsapId, alaVfcQsetInstanceTable=alaVfcQsetInstanceTable, alaVfcQPQSPName=alaVfcQPQSPName, alaVfcWRPId=alaVfcWRPId, alaVfcQPMbs=alaVfcQPMbs, VfcQsapType=VfcQsapType, alaVfcQSPAttachmentCount=alaVfcQSPAttachmentCount, alaVfcQsapQSPName=alaVfcQsapQSPName, alaVfcWRPLastChange=alaVfcWRPLastChange, alaVfcWRPYellowMinThreshold=alaVfcWRPYellowMinThreshold, alcatelIND1VfcMIBGroups=alcatelIND1VfcMIBGroups, alaVfcQPQId=alaVfcQPQId, alaVfcQsetStatsAdmin=alaVfcQsetStatsAdmin, alaVfcQInstanceEntry=alaVfcQInstanceEntry, alaVfcWRPStatsAdmin=alaVfcWRPStatsAdmin, alaVfcProfileIndexLookupGroup=alaVfcProfileIndexLookupGroup, alaVfcProfileIndexLookupTable=alaVfcProfileIndexLookupTable, alaVfcQInstancePIRBandwidthLimitValue=alaVfcQInstancePIRBandwidthLimitValue, alaVfcQSPWRPName=alaVfcQSPWRPName, alaVfcWRPYellowMaxDropProbability=alaVfcWRPYellowMaxDropProbability, alaVfcQsapBandwidthLimitValue=alaVfcQsapBandwidthLimitValue, alaVfcQSIQsapLookupList=alaVfcQSIQsapLookupList, alaVfcQPPIRBandwidthLimitType=alaVfcQPPIRBandwidthLimitType, alaVfcQInstanceQsiId=alaVfcQInstanceQsiId, alaVfcQProfileTable=alaVfcQProfileTable, alaVfcQInstanceStatsClear=alaVfcQInstanceStatsClear, alaVfcProfileIndexLookupEntry=alaVfcProfileIndexLookupEntry, alaVfcQInstancePacketsEnqueued=alaVfcQInstancePacketsEnqueued, alaVfcQInstanceYellowBytesDropped=alaVfcQInstanceYellowBytesDropped, alaVfcQsapWRPAdminState=alaVfcQsapWRPAdminState, alaVfcQsetOperBandwidthLimitValue=alaVfcQsetOperBandwidthLimitValue, alaVfcQPWRPAdminState=alaVfcQPWRPAdminState, alaVfcQInstanceRedPacketsAccepted=alaVfcQInstanceRedPacketsAccepted, alaVfcWRPGreenMaxDropProbability=alaVfcWRPGreenMaxDropProbability, alaVfcQsetWRPName=alaVfcQsetWRPName, alaVfcWRPGreenMinThreshold=alaVfcWRPGreenMinThreshold, alaVfcQsetStatsOper=alaVfcQsetStatsOper, alaVfcQPCIRBandwidthLimitType=alaVfcQPCIRBandwidthLimitType, alaVfcQInstanceGreenPacketsDropped=alaVfcQInstanceGreenPacketsDropped, alaVfcQInstancePIROperationalBandwidthLimitType=alaVfcQInstancePIROperationalBandwidthLimitType, alaVfcQInstanceBytesDequeued=alaVfcQInstanceBytesDequeued, alaVfcProfileQsapLookupList=alaVfcProfileQsapLookupList, VfcEnableState=VfcEnableState, alaVfcQInstanceGreenBytesAccepted=alaVfcQInstanceGreenBytesAccepted, alaVfcWRPName=alaVfcWRPName, alaVfcProfileQsapLookupGroup=alaVfcProfileQsapLookupGroup, alaVfcProfileType=alaVfcProfileType, alaVfcWRPRedMaxDropProbability=alaVfcWRPRedMaxDropProbability, alaVfcQInstanceWRPOperState=alaVfcQInstanceWRPOperState, alcatelIND1VfcMIBCompliance=alcatelIND1VfcMIBCompliance, VfcProfileMode=VfcProfileMode, alaVfcQsapType=alaVfcQsapType, alaVfcStatisticsCollectionDuration=alaVfcStatisticsCollectionDuration, alaVfcQInstancePIROperationalBandwidthLimitValue=alaVfcQInstancePIROperationalBandwidthLimitValue, alaVfcProfileQsapLookupId=alaVfcProfileQsapLookupId, alaVfcWREDProfileGroup=alaVfcWREDProfileGroup, alaVfcQsapQpId=alaVfcQsapQpId, VfcQsapList=VfcQsapList, alaVfcProfileQsapLookupType=alaVfcProfileQsapLookupType, alaVfcQSPType=alaVfcQSPType, alaVfcQSPId=alaVfcQSPId, alaVfcQInstanceCIROperationalBandwidthLimitValue=alaVfcQInstanceCIROperationalBandwidthLimitValue, alaVfcQSPRowStatus=alaVfcQSPRowStatus, alaVfcQPCIRBandwidthLimitValue=alaVfcQPCIRBandwidthLimitValue, alaVfcQInstanceQsapId=alaVfcQInstanceQsapId, alaVfcQInstanceRedBytesAccepted=alaVfcQInstanceRedBytesAccepted, VfcQsetAction=VfcQsetAction, alaVfcWRPRowStatus=alaVfcWRPRowStatus, alaVfcQsapTable=alaVfcQsapTable, alaVfcStatisticsCollectionInterval=alaVfcStatisticsCollectionInterval, alaVfcQsetProfileTable=alaVfcQsetProfileTable, alaVfcQInstancePIRBandwidthLimitType=alaVfcQInstancePIRBandwidthLimitType, alaVfcQPWRPId=alaVfcQPWRPId, alaVfcQsetInstanceEntry=alaVfcQsetInstanceEntry, alaVfcQsetQueueCount=alaVfcQsetQueueCount, alaVfcProfileQsapLookupTable=alaVfcProfileQsapLookupTable, alaVfcQProfileEntry=alaVfcQProfileEntry, alaVfcQInstanceBytesDropped=alaVfcQInstanceBytesDropped, alaVfcQsapStatsAdmin=alaVfcQsapStatsAdmin, alaVfcWRPYellowGain=alaVfcWRPYellowGain, alaVfcSystemGroup=alaVfcSystemGroup, alaVfcQInstanceStatsOper=alaVfcQInstanceStatsOper, alaVfcWREDProfileEntry=alaVfcWREDProfileEntry, alaVfcQPAdminState=alaVfcQPAdminState, alaVfcQInstanceStatsAdmin=alaVfcQInstanceStatsAdmin, PYSNMP_MODULE_ID=alcatelIND1VfcMIB, alaVfcWRPYellowMaxThreshold=alaVfcWRPYellowMaxThreshold, alaVfcQSPTemplateId=alaVfcQSPTemplateId, alaVfcQPStatsAdmin=alaVfcQPStatsAdmin, alaVfcQInstanceWRPId=alaVfcQInstanceWRPId, alaVfcQPTrafficClass=alaVfcQPTrafficClass, alaVfcQInstanceWRPAdminState=alaVfcQInstanceWRPAdminState, alaVfcQsetSchedulingMethod=alaVfcQsetSchedulingMethod, alaVfcConfig=alaVfcConfig, alaVfcQsapAction=alaVfcQsapAction, alaVfcQSIQsapLookupQsetId=alaVfcQSIQsapLookupQsetId, alaVfcQPCbs=alaVfcQPCbs, alaVfcQSPSchedulingMethod=alaVfcQSPSchedulingMethod, alaVfcQsapClearStats=alaVfcQsapClearStats, alaVfcQInstancePacketsDequeued=alaVfcQInstancePacketsDequeued, VfcSchedulingMethod=VfcSchedulingMethod, alaVfcQSIQsapLookupGroup=alaVfcQSIQsapLookupGroup, alaVfcQsetProfileEntry=alaVfcQsetProfileEntry, alaVfcQInstanceGroup=alaVfcQInstanceGroup, alaVfcProfileName=alaVfcProfileName, alaVfcQsetOperState=alaVfcQsetOperState, alaVfcQsetOperBandwidthLimitType=alaVfcQsetOperBandwidthLimitType, alaVfcWRPAttachmentCount=alaVfcWRPAttachmentCount, alaVfcQsetId=alaVfcQsetId, alaVfcQInstanceQSPId=alaVfcQInstanceQSPId, alaVfcQsapQSPId=alaVfcQsapQSPId, alaVfcQSIQsapLookupValue=alaVfcQSIQsapLookupValue, alaVfcWRPGreenMaxThreshold=alaVfcWRPGreenMaxThreshold, alaVfcWRPRedMinThreshold=alaVfcWRPRedMinThreshold, alaVfcQInstanceWRPName=alaVfcQInstanceWRPName, alaVfcQsapLastChange=alaVfcQsapLastChange, alaVfcQProfileGroup=alaVfcQProfileGroup, alaVfcQsetWRPId=alaVfcQsetWRPId, alaVfcQsetProfileGroup=alaVfcQsetProfileGroup, alaVfcQsetWRPAdminState=alaVfcQsetWRPAdminState, alaVfcQsetWRPOperState=alaVfcQsetWRPOperState, alaVfcQSPName=alaVfcQSPName, alaVfcQsapAdminState=alaVfcQsapAdminState, VfcWfqMode=VfcWfqMode, alaVfcQPWfqWeight=alaVfcQPWfqWeight, alaVfcQsetStatsClear=alaVfcQsetStatsClear, alaVfcQInstanceQId=alaVfcQInstanceQId, alaVfcQPPIRBandwidthLimitValue=alaVfcQPPIRBandwidthLimitValue, alaVfcQsetInstanceGroup=alaVfcQsetInstanceGroup, alaVfcQSPStatsAdmin=alaVfcQSPStatsAdmin, alaVfcQInstancePacketsDropped=alaVfcQInstancePacketsDropped, alaVfcSystemDefaultQsetQSPName=alaVfcSystemDefaultQsetQSPName, alaVfcQsetQsapId=alaVfcQsetQsapId, alcatelIND1VfcMIB=alcatelIND1VfcMIB, alaVfcWREDProfileTable=alaVfcWREDProfileTable, alaVfcQSPQueueCount=alaVfcQSPQueueCount, alaVfcQInstanceBytesEnqueued=alaVfcQInstanceBytesEnqueued, alaVfcQInstanceGreenPacketsAccepted=alaVfcQInstanceGreenPacketsAccepted, alaVfcQSPWRPAdminState=alaVfcQSPWRPAdminState, alaVfcQSPLastChange=alaVfcQSPLastChange, alcatelIND1VfcMIBCompliances=alcatelIND1VfcMIBCompliances, alaVfcQsapParent=alaVfcQsapParent, alaVfcQInstanceLastChange=alaVfcQInstanceLastChange, alaVfcQInstanceTable=alaVfcQInstanceTable, alaVfcQPQSPId=alaVfcQPQSPId, alaVfcQInstanceQSPName=alaVfcQInstanceQSPName, alaVfcQSPWRPId=alaVfcQSPWRPId, alaVfcQInstanceRedPacketsDropped=alaVfcQInstanceRedPacketsDropped, alaVfcQsetBandwidthLimitType=alaVfcQsetBandwidthLimitType, alaVfcQInstanceRedBytesDropped=alaVfcQInstanceRedBytesDropped, alaVfcQInstanceCIRBandwidthLimitValue=alaVfcQInstanceCIRBandwidthLimitValue, alaVfcQPWRPName=alaVfcQPWRPName, alaVfcWRPMTU=alaVfcWRPMTU, alaVfcQSPTemplateName=alaVfcQSPTemplateName, alaVfcQPWfqMode=alaVfcQPWfqMode, alaVfcQSPBandwidthLimitValue=alaVfcQSPBandwidthLimitValue, alaVfcQInstanceCIROperationalBandwidthLimitType=alaVfcQInstanceCIROperationalBandwidthLimitType, alaVfcQPLastChange=alaVfcQPLastChange, alaVfcQsapBandwidthLimitType=alaVfcQsapBandwidthLimitType, alaVfcProfileQsapLookupEntry=alaVfcProfileQsapLookupEntry, alaVfcQPQType=alaVfcQPQType, alaVfcQsapEntry=alaVfcQsapEntry, alaVfcQSIQsapLookupEntry=alaVfcQSIQsapLookupEntry, alaVfcQSPBandwidthLimitType=alaVfcQSPBandwidthLimitType, alaVfcQsetQSPName=alaVfcQsetQSPName, alcatelIND1VfcMIBConformance=alcatelIND1VfcMIBConformance, alaVfcQsapValue=alaVfcQsapValue, alaVfcProfileId=alaVfcProfileId, alaVfcQInstanceGreenBytesDropped=alaVfcQInstanceGreenBytesDropped, alaVfcQInstanceOperState=alaVfcQInstanceOperState, alaVfcQsetMisconfigured=alaVfcQsetMisconfigured, alaVfcConformance=alaVfcConformance, alaVfcWRPRedMaxThreshold=alaVfcWRPRedMaxThreshold, alaVfcQSPAdminState=alaVfcQSPAdminState, alaVfcStatsGroup=alaVfcStatsGroup, alaVfcQInstanceYellowPacketsAccepted=alaVfcQInstanceYellowPacketsAccepted, alcatelIND1VfcMIBObjects=alcatelIND1VfcMIBObjects, VfcProfileType=VfcProfileType)
