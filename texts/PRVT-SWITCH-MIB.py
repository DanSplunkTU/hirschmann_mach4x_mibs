#
# PySNMP MIB module PRVT-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SWITCH-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:22:12 2021
# On host fv-az121-73 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
prvt_products, = mibBuilder.importSymbols("PRVT-VENDORDEF-MIB", "prvt-products")
dot1qTpFdbStatus, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qTpFdbStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, IpAddress, NotificationType, MibIdentifier, Integer32, Counter32, Counter64, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "IpAddress", "NotificationType", "MibIdentifier", "Integer32", "Counter32", "Counter64", "Bits", "ModuleIdentity")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
prvtSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 5, 100))
prvtSwitchMIB.setRevisions(('2015-08-03 00:00', '2015-07-15 00:00', '2015-06-23 00:00', '2015-02-22 00:00', '2014-12-30 00:00', '2014-09-18 00:00', '2014-08-27 00:00', '2014-04-01 00:00', '2014-03-27 00:00', '2014-03-12 00:00', '2014-01-27 00:00', '2014-01-20 00:00', '2014-01-07 00:00', '2013-11-20 00:00', '2013-09-19 00:00', '2013-09-12 00:00', '2012-07-31 00:00', '2012-04-19 00:00', '2012-04-10 00:00', '2009-11-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSwitchMIB.setRevisionsDescriptions(('add prvtDuplicatedMACAddressAlarm,unauthorizedAccessViaCLI', 'add tMarc3306', 'add tatca510b', 'add tMarc3308', 'add tatca510', 'add tMarc3348s2', 'add cMetro-100', 'add m10GBASECXSMSFPPLUS (75),m10GBASECXMMSFPPLUS (76)', 'add m10GBaseZXSMSFPPLUS (67),m10GBaseZXMMSFPPLUS (68),\n         m10GBaseXDSMSFPPLUS (69), m10GBaseXDMMSFPPLUS (70),\n         m10GBaseLXSMSFPPLUS (71), m10GBaseLXMMSFPPLUS (72),\n         m10GBaseDWDMSMSFPPLUS (73), m10GBaseDWDMMMSFPPLUS (74)', 'add tMetro8064S, tMarc334SH', 'add tMarc3312SCH', 'add tMarc3312WD, tMarc3348WD', 'add tMarc3348WDB', 'add tMarc3312WDB', 'configL2IfaceEthertype', 'configL2IfaceMacAddress', 'configL2IfaceSelfFilterEnable', 'SFP transciever details.', 'clearInterfaceFdbTable, clearInterfaceFdbTableStatus.', 'Initial version.',))
if mibBuilder.loadTexts: prvtSwitchMIB.setLastUpdated('201508030000Z')
if mibBuilder.loadTexts: prvtSwitchMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSwitchMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSwitchMIB.setDescription('The switch MIB module for managing internal switch parameters')
switch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5))
prvtSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0))
sys = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1))
sysProductsOids = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1))
tMetro7224 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10000))
tVendorDev0001 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10001))
tMetro7124S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10002))
tMetro5324T = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10003))
tMarc3208SH = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10004))
tMarc3312SC = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10005))
tMarc3348S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10006))
tMarc3312WDB = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10007))
tMarc3348WDB = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10008))
tMarc3312WD = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10009))
tMarc3348WD = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10010))
tMarc3312SCH = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10011))
tMarc3348SH = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10012))
tMarc3348S2 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10013))
tMarc3308 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10014))
tMarc3306 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 10015))
tVendorDev0002 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 11003))
tVendorDev0003 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 11004))
tVendorDev0004 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 11005))
thub4 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 20004))
tatca401 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 20005))
tatca510 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 20006))
tatca510b = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 20007))
tm8000 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 40000))
tm8001 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 40001))
tMetro8064S = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 40002))
cMetro100 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 1, 40003))
sysManufacturingTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2), )
if mibBuilder.loadTexts: sysManufacturingTable.setStatus('current')
if mibBuilder.loadTexts: sysManufacturingTable.setDescription('sysManufacturing details per module')
sysManufacturingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "moduleId"))
if mibBuilder.loadTexts: sysManufacturingEntry.setStatus('current')
if mibBuilder.loadTexts: sysManufacturingEntry.setDescription('Entry in sysManufacturingTable')
moduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("mainboard", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot8", 9), ("slot9", 10))))
if mibBuilder.loadTexts: moduleId.setStatus('current')
if mibBuilder.loadTexts: moduleId.setDescription('Board id')
moduleSysSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: moduleSysSerialNumber.setDescription("This is the device's serial number, which is entered during the manufacturing process.")
moduleSysAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysAssemblyNumber.setStatus('current')
if mibBuilder.loadTexts: moduleSysAssemblyNumber.setDescription('Specifies the equipment assembly number')
moduleSysHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysHwRevision.setStatus('current')
if mibBuilder.loadTexts: moduleSysHwRevision.setDescription('Specifies the HW revision')
moduleSysHwSubRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysHwSubRevision.setStatus('current')
if mibBuilder.loadTexts: moduleSysHwSubRevision.setDescription('Specifies the HW sub-revision')
moduleSysPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysPartNumber.setStatus('current')
if mibBuilder.loadTexts: moduleSysPartNumber.setDescription('Specifies the equipment part number')
moduleSysCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysCLEI.setStatus('current')
if mibBuilder.loadTexts: moduleSysCLEI.setDescription('Specifies the common language equipment identification')
moduleSysManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: moduleSysManufacturingDate.setDescription('Specifies the manufacturing date')
moduleSysBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: moduleSysBaseMacAddress.setDescription('Base MAC address of the module')
moduleSysFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSysFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: moduleSysFirmwareVersion.setDescription('Firmware version of the module')
sysManufacturing = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3))
sysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sysSerialNumber.setDescription("This is the device's serial number, which is entered during the manufacturing process.")
sysAssemblyNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAssemblyNumber.setStatus('current')
if mibBuilder.loadTexts: sysAssemblyNumber.setDescription('Specifies the equipment assembly number')
sysPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPartNumber.setStatus('current')
if mibBuilder.loadTexts: sysPartNumber.setDescription('Specifies the equipment part number')
sysCLEI = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCLEI.setStatus('current')
if mibBuilder.loadTexts: sysCLEI.setDescription('Specifies the common language equipment identification')
sysHwRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHwRevision.setStatus('current')
if mibBuilder.loadTexts: sysHwRevision.setDescription('Specifies the HW revision')
sysManufacturingDate = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: sysManufacturingDate.setDescription('Specifies the manufacturing date')
sysHwSubRevision = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHwSubRevision.setStatus('current')
if mibBuilder.loadTexts: sysHwSubRevision.setDescription('Specifies the HW sub-revision')
sysBaseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: sysBaseMacAddress.setDescription('Base MAC address of the device')
sysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 1, 3, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sysFirmwareVersion.setDescription('Firmware version')
config = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2))
configL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2))
configL2IfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1), )
if mibBuilder.loadTexts: configL2IfaceTable.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceTable.setDescription('A list of Interfaces and their properties')
configL2IfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-MIB", "configL2IfaceUnit"), (0, "PRVT-SWITCH-MIB", "configL2IfaceSlot"), (0, "PRVT-SWITCH-MIB", "configL2IfacePort"))
if mibBuilder.loadTexts: configL2IfaceEntry.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceEntry.setDescription('An index of interfaces.')
configL2IfaceUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: configL2IfaceUnit.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceUnit.setDescription('An index that uniquely identifies a unit in the\n         Interface Table.')
configL2IfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: configL2IfaceSlot.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceSlot.setDescription('An index that uniquely identifies a slot within the unit\n         in the Interface Table.')
configL2IfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: configL2IfacePort.setStatus('current')
if mibBuilder.loadTexts: configL2IfacePort.setDescription('An index that uniquely identifies a port within the slot\n         in the Interface Table.')
configL2IfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceEnable.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceEnable.setDescription('The desired state of the interface.')
configL2IfaceDefaultVID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceDefaultVID.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceDefaultVID.setDescription('This object sets the default VLAN ID according to 802.1Q.')
configL2IfaceDuplexModeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("full", 2), ("half", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceDuplexModeSet.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceDuplexModeSet.setDescription('The duplex mode for the interface. If the port type does NOT support\n         the default of autonegotiate (1), then the application will\n         initialize the port to a valid value (e.g., full (2)).')
configL2IfaceSpeedSet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 10, 100, 1000, 10000, 40000))).clone(namedValues=NamedValues(("auto", 0), ("unknown", 1), ("speed10", 10), ("speed100", 100), ("speed1000", 1000), ("speed10000", 10000), ("speed40000", 40000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceSpeedSet.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceSpeedSet.setDescription('The desired speed and duplex mode for the interface. If the selected\n         control is not available for the interface, a value of illegal (99)\n         is returned. If the port type does NOT support the\n         default of autonegotiate (1), then the application will\n         initialize the port to a valid value (e.g., 1000 (3)).\n         Note that not all controls are available for all interfaces.\n         For example, only 1000 (4) is available for Gigabit\n         Ethernet interfaces.')
configL2IfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 12288))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceMtu.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceMtu.setDescription('The Maximum Transmission Unit (in octets) of the interface.')
configL2IfaceFlowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceFlowEnable.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceFlowEnable.setDescription('The desired flow mode for the interface.\n         Note that not all controls are available for all interfaces.')
configL2IfaceSelfFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceSelfFilterEnable.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceSelfFilterEnable.setDescription('Deny packets received on this port to be switched back\n         the same port/trunk. Default is false.')
configL2IfaceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configL2IfaceMacAddress.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceMacAddress.setDescription('Self MAC adress per port.')
configL2IfaceEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33024, 34984, 37120))).clone(namedValues=NamedValues(("vlan", 33024), ("dot1ad", 34984), ("qinq", 37120)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configL2IfaceEthertype.setStatus('current')
if mibBuilder.loadTexts: configL2IfaceEthertype.setDescription('The ethertype of the interface.')
reportsL2IfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2), )
if mibBuilder.loadTexts: reportsL2IfaceTable.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceTable.setDescription('A list of Interfaces and their properties')
reportsL2IfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: reportsL2IfaceEntry.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceEntry.setDescription('An index of interfaces.')
reportsL2IfaceMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76))).clone(namedValues=NamedValues(("notInstalled", 1), ("unknown", 2), ("m1000BaseCXMMSFP", 3), ("m1000BaseCXSMSFP", 4), ("m1000BaseTSFPCOPPERMR", 5), ("m1000BaseTSFPCOPPERSR", 6), ("m1000BaseTSFPCOPPERSRWOPHY", 7), ("m1000BaseTSFCOPPERDISABLED", 8), ("m1000BaseBXSMSFP", 9), ("m1000BaseBXMMSFP", 10), ("m1000BasePXSMSFP", 11), ("m1000BasePXMMSFP", 12), ("m1000BaseDWDMSMSFP", 13), ("m1000BaseDWDMMMSFP", 14), ("m1000BaseSXMMSFP", 15), ("m1000BaseSXSMSFP", 16), ("m1000BaseLXSMSFP", 17), ("m1000BaseLXMMSFP", 18), ("m1000BaseXDSMSFP", 19), ("m1000BaseXDMMSFP", 20), ("m1000BaseZXSMSFP", 21), ("m1000BaseZXMMSFP", 22), ("m1000BaseEXSMSFP", 23), ("m1000BaseEXMMSFP", 24), ("m1000BaseXWDMSMSFP", 25), ("m1000BaseXWDMMMSFP", 26), ("m100BaseBXSMSFP", 27), ("m100BaseBXMMSFP", 28), ("m100BasePXSMSFP", 29), ("m100BasePXMMSFP", 30), ("m100BaseFXSMSFP", 31), ("m100BaseFXMMSFP", 32), ("m100BaseSXSMSFP", 33), ("m100BaseSXMMSFP", 34), ("m100BaseLXSMSFP", 35), ("m100BaseLXMMSFP", 36), ("m100BaseXDSMSFP", 37), ("m100BaseXDMMSFP", 38), ("m100BaseZXSMSFP", 39), ("m100BaseZXMMSFP", 40), ("m100BaseEXSMSFP", 41), ("m100BaseEXMMSFP", 42), ("m100BaseXWDMSMSFP", 43), ("m100BaseXWDMMMSFP", 44), ("m10GBaseSRMMXFP", 45), ("m10GBaseLRMMXFP", 46), ("m10GBaseLRMMMXFP", 47), ("m10GBaseLRSMXFP", 48), ("m10GBaseSRSMXFP", 49), ("m10GBaseLRMSMXFP", 50), ("m10GBaseSXMMXFP", 51), ("m10GBaseSXSMXFP", 52), ("m10GBaseLXMMXFP", 53), ("m10GBaseLXSMXFP", 54), ("m10GBaseXDSMXFP", 55), ("m10GBaseXDMMXFP", 56), ("m10GBaseZXSMXFP", 57), ("m10GBaseZXMMXFP", 58), ("m10GBaseEXSMXFP", 59), ("m10GBaseEXMMXFP", 60), ("m10GBaseXWDMSMXFP", 61), ("m10GBaseXWDMMMXFP", 62), ("m10GBaseSXSMSFPPLUS", 63), ("m10GBaseSXMMSFPPLUS", 64), ("m40GBaseQSFPSPI", 65), ("rj45", 66), ("m10GBaseZXSMSFPPLUS", 67), ("m10GBaseZXMMSFPPLUS", 68), ("m10GBaseXDSMSFPPLUS", 69), ("m10GBaseXDMMSFPPLUS", 70), ("m10GBaseLXSMSFPPLUS", 71), ("m10GBaseLXMMSFPPLUS", 72), ("m10GBaseDWDMSMSFPPLUS", 73), ("m10GBaseDWDMMMSFPPLUS", 74), ("m10GBASECXSMSFPPLUS", 75), ("m10GBASECXMMSFPPLUS", 76)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaType.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaType.setDescription('Installed media type')
reportsL2IfaceOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("full", 2), ("half", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceOperDuplex.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceOperDuplex.setDescription('Operational duplex on the interface')
reportsL2IfaceOperDual = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dualPort", 1), ("singlePort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceOperDual.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceOperDual.setDescription('Indicate whether interface is a dual combo port')
reportsL2IfaceOperActive = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copperActive", 1), ("fiberActive", 2), ("notRelevent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceOperActive.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceOperActive.setDescription('Information for the active copper/fiber port in case of dual port')
reportsL2IfaceMediaTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("gbic", 2), ("soldered", 3), ("sfp", 4), ("xbi", 5), ("xenpak", 6), ("xfp", 7), ("xff", 8), ("xfpE", 9), ("xpak", 10), ("x2", 11), ("dwdmSFP", 12), ("qsfp", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaTxType.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaTxType.setDescription('Media tranceiver type')
reportsL2IfaceMediaConType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("sc", 2), ("fcS1Copper", 3), ("fcS2Copper", 4), ("bncTNC", 5), ("fcCoaxial", 6), ("fiberJack", 7), ("lc", 8), ("mtRJ", 9), ("mu", 10), ("sg", 11), ("opticalPigtail", 12), ("mpoParalelOptic", 13), ("hssdcII", 14), ("copperPigtail", 15), ("rj45", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaConType.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaConType.setDescription('Media connector type')
reportsL2IfaceMediaLengthSMF = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthSMF.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthSMF.setDescription('Media length of the single mode fiber')
reportsL2IfaceMediaLength50UM = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaLength50UM.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaLength50UM.setDescription('Media length of 50um fiber')
reportsL2IfaceMediaLength62UM = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaLength62UM.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaLength62UM.setDescription('Media length of 62.5um fiber')
reportsL2IfaceMediaLengthCu = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthCu.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthCu.setDescription('Media length of copper')
reportsL2IfaceMediaLengthOM3 = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthOM3.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaLengthOM3.setDescription('Media length of 50um OM3 fiber')
reportsL2IfaceMediaEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("eUnknown", 1), ("e8b10b", 2), ("e4b5b", 3), ("eNRZ", 4), ("eManchester", 5), ("eSONETScrambled", 6), ("e64b66b", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaEncoding.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaEncoding.setDescription('Media encoding')
reportsL2IfaceMediaVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorID.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorID.setDescription('Media vendor IEEE company ID')
reportsL2IfaceMediaVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorName.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorName.setDescription('Media vendor name (ASCII)')
reportsL2IfaceMediaVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorSN.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorSN.setDescription('Media serial number provided by the vendor (ASCII)')
reportsL2IfaceMediaVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorPN.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorPN.setDescription('Media part number provided by the vendor (ASCII)')
reportsL2IfaceMediaVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorRev.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorRev.setDescription('Media revision level for part number provided by vendor (ASCII)')
reportsL2IfaceMediaVendorManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaVendorManufacturingDate.setDescription('Media manufacturing date provided by the vendor (ASCII)')
reportsL2IfaceMediaDiagnDDM = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnDDM.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnDDM.setDescription('Media Digital Diagnostic Monitoring')
reportsL2IfaceMediaDiagnIntCal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnIntCal.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnIntCal.setDescription('Media diagnostic internal calibration')
reportsL2IfaceMediaDiagnExtCal = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnExtCal.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnExtCal.setDescription('Media diagnostic external calibration')
reportsL2IfaceMediaDiagnAPM = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnAPM.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnAPM.setDescription('Media diagnostic avgerage power measurement')
reportsL2IfaceMediaDiagnACR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnACR.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaDiagnACR.setDescription('Media diagnostic address change')
reportsL2IfaceMediaBitrateNom = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateNom.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateNom.setDescription('Media nominal bitrate')
reportsL2IfaceMediaBitrateMin = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateMin.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateMin.setDescription('Media minimum bitrate in percent below the nominal')
reportsL2IfaceMediaBitrateMax = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateMax.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaBitrateMax.setDescription('Media maximum bitrate in percent above the nominal')
reportsL2IfaceMediaCompatSonet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("rsb1", 2), ("rsb2", 3), ("srOC192", 4), ("lrOC48", 5), ("irOC48", 6), ("srOC48", 7), ("lrSMOC12", 8), ("irSMOC12", 9), ("srOC12", 10), ("lrSMOC3", 11), ("irSMOC3", 12), ("srOC3", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatSonet.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatSonet.setDescription('Media Sonet compatibility')
reportsL2IfaceMediaCompatEth = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("basePX", 2), ("baseBX10", 3), ("m100BaseFX", 4), ("m100BaseLXLX10", 5), ("m1000BaseT", 6), ("m1000BaseCX", 7), ("m1000BaseLX", 8), ("m1000BaseSX", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatEth.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatEth.setDescription('Media Ethernet compatibility')
reportsL2IfaceMediaCompatInfiniband = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("c1XSX", 2), ("c1XLX", 3), ("c1XCopperActive", 4), ("c1XCopperPassive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatInfiniband.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatInfiniband.setDescription('Media InfiniBand compatibility')
reportsL2IfaceMediaCompatEscon = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("smf", 2), ("mmf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatEscon.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatEscon.setDescription('Media ESCON compatibility')
reportsL2IfaceMediaCompat10G = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("baseLRM", 2), ("baseLR", 3), ("baseSR", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompat10G.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompat10G.setDescription('Media 10G Ethernet compatibility')
reportsL2IfaceMediaCompatFbrChLen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("veryLong", 2), ("long", 3), ("medium", 4), ("intermediate", 5), ("short", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChLen.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChLen.setDescription('Media Fibre Channel link length')
reportsL2IfaceMediaCompatFbrChTech = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("sa", 2), ("lc", 3), ("elInter", 4), ("elIntra", 5), ("sn", 6), ("sl", 7), ("ll", 8), ("copperActive", 9), ("copperPassive", 10), ("copperFCBaseT", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChTech.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChTech.setDescription('Media Fibre Channel transmitter technology')
reportsL2IfaceMediaCompatFbrChMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("twistedAxialPair", 2), ("twistedPair", 3), ("miniatureCoax", 4), ("videoCoax", 5), ("multiMode62point5um", 6), ("multiMode50um", 7), ("singleMode", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChMedia.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChMedia.setDescription('Media Fibre Channel transmission media')
reportsL2IfaceMediaCompatFbrChSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("fbrUnknwon", 1), ("fbr100", 2), ("fbr200", 3), ("fbr400", 4), ("fbr800", 5), ("fbr1200", 6), ("fbr1600", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChSpeed.setStatus('current')
if mibBuilder.loadTexts: reportsL2IfaceMediaCompatFbrChSpeed.setDescription('Media Fibre Channel speed, in MBps')
clearInterfaceFdbTable = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearInterfaceFdbTable.setStatus('current')
if mibBuilder.loadTexts: clearInterfaceFdbTable.setDescription("Clear fdb table for interface given as argument.\n         Both notations - SNMP and CLI are accepted - for example\n         can be set either to 1/1/1 or 1101.\n         If port notation can't be recognized ( not ifIndex or CLI notation ),\n         then whole fdb table is cleared.\n         Get requests over this object will return noSuchInstance.")
clearInterfaceFdbTableStatus = MibScalar((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 2, 2, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clearInterfaceFdbTableStatus.setStatus('current')
if mibBuilder.loadTexts: clearInterfaceFdbTableStatus.setDescription('Return code from last operation over clearInterfaceFdbTable.')
ipSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6))
mpls = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3))
routingProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 4))
serviceAccessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7))
software = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 111))
portSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: portSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: portSecurityViolation.setDescription('The port security violation notification\n         indicates that a port security violation\n         has been detected, e.g more MAC adresses\n         have been learned on that port than the\n         number allowed.')
sfpPlugged = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sfpPlugged.setStatus('current')
if mibBuilder.loadTexts: sfpPlugged.setDescription('sfp plugged')
sfpUnPlugged = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sfpUnPlugged.setStatus('current')
if mibBuilder.loadTexts: sfpUnPlugged.setDescription('sfp unplugged')
hardwareLicenseNotInstalled = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 4))
if mibBuilder.loadTexts: hardwareLicenseNotInstalled.setStatus('current')
if mibBuilder.loadTexts: hardwareLicenseNotInstalled.setDescription('Hardware license not installed. \n         Some ports will not function normally.')
mplsMgmtTaskCrashed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 5))
if mibBuilder.loadTexts: mplsMgmtTaskCrashed.setStatus('current')
if mibBuilder.loadTexts: mplsMgmtTaskCrashed.setDescription('mpls_mgmt task crashed.')
mplsLdbHwTaskCrashed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 6))
if mibBuilder.loadTexts: mplsLdbHwTaskCrashed.setStatus('current')
if mibBuilder.loadTexts: mplsLdbHwTaskCrashed.setDescription('mpls_ldb_hw task crashed.')
mplsLdbFrwdTaskCrashed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 7))
if mibBuilder.loadTexts: mplsLdbFrwdTaskCrashed.setStatus('current')
if mibBuilder.loadTexts: mplsLdbFrwdTaskCrashed.setDescription('mpls_ldb_frwd task crashed.')
mplsStackTaskCrashed = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 8))
if mibBuilder.loadTexts: mplsStackTaskCrashed.setStatus('current')
if mibBuilder.loadTexts: mplsStackTaskCrashed.setDescription('mpls_stack task crashed.')
prvtDuplicatedMACAddressAlarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 9)).setObjects(("Q-BRIDGE-MIB", "dot1qTpFdbStatus"))
if mibBuilder.loadTexts: prvtDuplicatedMACAddressAlarm.setStatus('current')
if mibBuilder.loadTexts: prvtDuplicatedMACAddressAlarm.setDescription('This notification is sent by the agent when a duplicated MAC is recived.')
unauthenticatedAccessViaCLI = NotificationType((1, 3, 6, 1, 4, 1, 738, 10, 5, 100, 0, 10))
if mibBuilder.loadTexts: unauthenticatedAccessViaCLI.setStatus('current')
if mibBuilder.loadTexts: unauthenticatedAccessViaCLI.setDescription('The unauthenticatedAccessViaCLI notification indicates that \n         the last attempt to login to the device via CLI cannot \n         be authenticated.')
mibBuilder.exportSymbols("PRVT-SWITCH-MIB", reportsL2IfaceMediaDiagnAPM=reportsL2IfaceMediaDiagnAPM, reportsL2IfaceOperDual=reportsL2IfaceOperDual, reportsL2IfaceMediaLengthCu=reportsL2IfaceMediaLengthCu, moduleSysFirmwareVersion=moduleSysFirmwareVersion, reportsL2IfaceMediaCompatFbrChSpeed=reportsL2IfaceMediaCompatFbrChSpeed, mplsStackTaskCrashed=mplsStackTaskCrashed, tMarc3312WDB=tMarc3312WDB, thub4=thub4, reportsL2IfaceOperDuplex=reportsL2IfaceOperDuplex, tatca510=tatca510, sfpUnPlugged=sfpUnPlugged, moduleSysHwSubRevision=moduleSysHwSubRevision, reportsL2IfaceMediaType=reportsL2IfaceMediaType, sysManufacturingTable=sysManufacturingTable, hardwareLicenseNotInstalled=hardwareLicenseNotInstalled, reportsL2IfaceMediaCompatEth=reportsL2IfaceMediaCompatEth, reportsL2IfaceMediaCompatFbrChMedia=reportsL2IfaceMediaCompatFbrChMedia, configL2IfaceFlowEnable=configL2IfaceFlowEnable, reportsL2IfaceMediaBitrateMax=reportsL2IfaceMediaBitrateMax, tMarc3348S2=tMarc3348S2, reportsL2IfaceMediaConType=reportsL2IfaceMediaConType, tVendorDev0002=tVendorDev0002, mpls=mpls, reportsL2IfaceMediaVendorID=reportsL2IfaceMediaVendorID, reportsL2IfaceMediaLength62UM=reportsL2IfaceMediaLength62UM, reportsL2IfaceMediaVendorName=reportsL2IfaceMediaVendorName, routingProtocols=routingProtocols, configL2IfaceSlot=configL2IfaceSlot, reportsL2IfaceEntry=reportsL2IfaceEntry, reportsL2IfaceMediaVendorPN=reportsL2IfaceMediaVendorPN, unauthenticatedAccessViaCLI=unauthenticatedAccessViaCLI, configL2IfaceEntry=configL2IfaceEntry, tMarc3208SH=tMarc3208SH, reportsL2IfaceMediaDiagnIntCal=reportsL2IfaceMediaDiagnIntCal, tMarc3312SCH=tMarc3312SCH, reportsL2IfaceMediaCompatSonet=reportsL2IfaceMediaCompatSonet, config=config, tMarc3306=tMarc3306, tMetro5324T=tMetro5324T, tMarc3348S=tMarc3348S, moduleSysCLEI=moduleSysCLEI, configL2IfaceDuplexModeSet=configL2IfaceDuplexModeSet, prvtDuplicatedMACAddressAlarm=prvtDuplicatedMACAddressAlarm, sysAssemblyNumber=sysAssemblyNumber, configL2IfaceTable=configL2IfaceTable, configL2IfaceSelfFilterEnable=configL2IfaceSelfFilterEnable, sysFirmwareVersion=sysFirmwareVersion, configL2IfaceSpeedSet=configL2IfaceSpeedSet, reportsL2IfaceMediaBitrateMin=reportsL2IfaceMediaBitrateMin, sys=sys, tVendorDev0003=tVendorDev0003, reportsL2IfaceMediaCompatInfiniband=reportsL2IfaceMediaCompatInfiniband, reportsL2IfaceMediaCompat10G=reportsL2IfaceMediaCompat10G, moduleSysManufacturingDate=moduleSysManufacturingDate, reportsL2IfaceOperActive=reportsL2IfaceOperActive, prvtSwitchMIB=prvtSwitchMIB, serviceAccessSwitch=serviceAccessSwitch, prvtSwitchNotifications=prvtSwitchNotifications, tMetro7224=tMetro7224, tMetro7124S=tMetro7124S, moduleSysSerialNumber=moduleSysSerialNumber, portSecurityViolation=portSecurityViolation, tMarc3312WD=tMarc3312WD, moduleSysAssemblyNumber=moduleSysAssemblyNumber, tVendorDev0001=tVendorDev0001, reportsL2IfaceMediaLength50UM=reportsL2IfaceMediaLength50UM, reportsL2IfaceMediaCompatEscon=reportsL2IfaceMediaCompatEscon, configL2IfaceEthertype=configL2IfaceEthertype, tMarc3348SH=tMarc3348SH, sysManufacturingEntry=sysManufacturingEntry, tMarc3348WDB=tMarc3348WDB, sysSerialNumber=sysSerialNumber, configL2IfaceMacAddress=configL2IfaceMacAddress, reportsL2IfaceMediaVendorSN=reportsL2IfaceMediaVendorSN, clearInterfaceFdbTableStatus=clearInterfaceFdbTableStatus, reportsL2IfaceMediaLengthOM3=reportsL2IfaceMediaLengthOM3, moduleSysHwRevision=moduleSysHwRevision, ipSwitch=ipSwitch, reportsL2IfaceMediaCompatFbrChLen=reportsL2IfaceMediaCompatFbrChLen, reportsL2IfaceMediaEncoding=reportsL2IfaceMediaEncoding, reportsL2IfaceMediaCompatFbrChTech=reportsL2IfaceMediaCompatFbrChTech, reportsL2IfaceMediaDiagnExtCal=reportsL2IfaceMediaDiagnExtCal, tMarc3348WD=tMarc3348WD, reportsL2IfaceMediaVendorManufacturingDate=reportsL2IfaceMediaVendorManufacturingDate, switch=switch, configL2=configL2, software=software, sysCLEI=sysCLEI, reportsL2IfaceMediaDiagnDDM=reportsL2IfaceMediaDiagnDDM, tMarc3308=tMarc3308, reportsL2IfaceMediaTxType=reportsL2IfaceMediaTxType, sysProductsOids=sysProductsOids, clearInterfaceFdbTable=clearInterfaceFdbTable, tMetro8064S=tMetro8064S, sysManufacturingDate=sysManufacturingDate, moduleSysBaseMacAddress=moduleSysBaseMacAddress, mplsMgmtTaskCrashed=mplsMgmtTaskCrashed, reportsL2IfaceMediaBitrateNom=reportsL2IfaceMediaBitrateNom, moduleSysPartNumber=moduleSysPartNumber, configL2IfaceDefaultVID=configL2IfaceDefaultVID, tm8000=tm8000, sysPartNumber=sysPartNumber, reportsL2IfaceMediaVendorRev=reportsL2IfaceMediaVendorRev, tMarc3312SC=tMarc3312SC, reportsL2IfaceMediaDiagnACR=reportsL2IfaceMediaDiagnACR, reportsL2IfaceMediaLengthSMF=reportsL2IfaceMediaLengthSMF, configL2IfaceEnable=configL2IfaceEnable, configL2IfaceMtu=configL2IfaceMtu, mplsLdbFrwdTaskCrashed=mplsLdbFrwdTaskCrashed, tVendorDev0004=tVendorDev0004, moduleId=moduleId, sfpPlugged=sfpPlugged, sysBaseMacAddress=sysBaseMacAddress, tatca510b=tatca510b, cMetro100=cMetro100, mplsLdbHwTaskCrashed=mplsLdbHwTaskCrashed, configL2IfaceUnit=configL2IfaceUnit, reportsL2IfaceTable=reportsL2IfaceTable, sysManufacturing=sysManufacturing, sysHwSubRevision=sysHwSubRevision, configL2IfacePort=configL2IfacePort, PYSNMP_MODULE_ID=prvtSwitchMIB, tatca401=tatca401, sysHwRevision=sysHwRevision, tm8001=tm8001)
