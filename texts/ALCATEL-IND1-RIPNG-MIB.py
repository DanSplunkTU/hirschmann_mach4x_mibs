#
# PySNMP MIB module ALCATEL-IND1-RIPNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-RIPNG-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:32:36 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1Ripng, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1Ripng")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Ipv6AddressPrefix, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, TimeTicks, iso, Bits, Gauge32, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "TimeTicks", "iso", "Bits", "Gauge32", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "NotificationType")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
alcatelIND1RIPNGMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1))
alcatelIND1RIPNGMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1RIPNGMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1RIPNGMIB.setLastUpdated('201010260000Z')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIB.setContactInfo(' Please consult with Customer Service to ensure the most appropriate\n                  version of this document is used with the products in question:\n\n                            Alcatel-Lucent, Enterprise Solutions Division\n                           (Formerly Alcatel Internetworking, Incorporated)\n                                   26801 West Agoura Road\n                                Agoura Hills, CA  91301-5122\n                                  United States Of America\n\n                Telephone:               North America  +1 800 995 2696\n                                         Latin America  +1 877 919 9526\n                                         Europe         +31 23 556 0100\n                                         Asia           +65 394 7933\n                                         All Other      +1 818 878 4507\n\n                Electronic Mail:         support@ind.alcatel.com\n                World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n                File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n                 Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                     For the Birds Of Prey Product Line\n                     Configuration Of Global RIPNG Configuration Parameters.\n\n                 The right to make changes in specification and other information\n                 contained in this document without prior notice is reserved.\n\n                 No liability shall be assumed for any incidental, indirect, special, or\n                 consequential damages whatsoever arising from or related to this\n                 document or the information contained herein.\n\n                 Vendors, end-users, and other interested parties are granted\n                 non-exclusive license to use this specification in connection with\n                 management of the products for which it is intended to be used.\n\n                             Copyright (C) 1995-2007 Alcatel-Lucent\n                                 ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1RIPNGMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1))
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBObjects.setDescription('Branch for Routing Information Protocol (RIPNG)\n             Subsystem Managed Objects.')
alcatelIND1RIPNGMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2))
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBConformance.setDescription('Branch for Routing Information Protocol (RIPNG)\n             Subsystem Conformance Information.')
alcatelIND1RIPNGMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBGroups.setDescription('Branch for Routing Information Protocol (RIPNG)\n             Subsystem Units Of Conformance.')
alcatelIND1RIPNGMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPNGMIBCompliances.setDescription('Branch for Routing Information Protocol (RIPNG)\n             Subsystem Compliance Statements.')
alaProtocolRipng = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1))
alaRipngProtoStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngProtoStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipngProtoStatus.setDescription('Global administration status of RIPng.')
alaRipngUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: alaRipngUpdateInterval.setDescription('Interval (in seconds) that RIPng routing updates will\n                        be sent out.  The value must be less than or equal to\n                        one-third the the invalid timer and greater or equal\n                        to two times the jitter value.')
alaRipngInvalidTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 360)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngInvalidTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipngInvalidTimer.setDescription('Time in seconds that a route will remain active\n                        in RIB before being moved to the invalid state.\n                        The value must be at least three times the\n                        update interval.  The defined range of 1 to 360\n                        allows backwards compatibility with older devices\n                        which do not enforce the three-times constraint.\n                        For newer devices which enforce the three-times\n                        constraint with the update interval, the\n                        minimum allowed value of the invalid timer\n                        is 3.')
alaRipngHolddownTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngHolddownTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipngHolddownTimer.setDescription('Time to keep a route in the holddown state.')
alaRipngGarbageTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngGarbageTimer.setStatus('current')
if mibBuilder.loadTexts: alaRipngGarbageTimer.setDescription('Time to keep a route before garbage collection.')
alaRipngRouteCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteCount.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteCount.setDescription('The number of network routes in RIPng routing table.')
alaRipngGlobalRouteTag = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngGlobalRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipngGlobalRouteTag.setDescription('The route tag that will be added to all RIPng entries')
alaRipngTriggeredSends = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("onlyupdated", 2), ("off", 3))).clone('onlyupdated')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngTriggeredSends.setStatus('current')
if mibBuilder.loadTexts: alaRipngTriggeredSends.setDescription('Controls whether trigged updates contain entire RIB\n                        or just changes.')
alaRipngJitter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngJitter.setStatus('current')
if mibBuilder.loadTexts: alaRipngJitter.setDescription('Jitter to use when sending updates. The value\n                        must be less than one-half the update interval.')
alaRipngPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRipngPort.setStatus('current')
if mibBuilder.loadTexts: alaRipngPort.setDescription('Port to send/receive packets on.')
alaRipngInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11), )
if mibBuilder.loadTexts: alaRipngInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceTable.setDescription('RIPng interfaces.')
alaRipngInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceIndex"))
if mibBuilder.loadTexts: alaRipngInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceEntry.setDescription('Each individual interface.')
alaRipngInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaRipngInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceIndex.setDescription('IPv6 index of this interface.')
alaRipngInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRipngInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceStatus.setDescription('Create/delete RIPng interfaces.')
alaRipngInterfaceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRipngInterfaceMetric.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceMetric.setDescription('Metric used on this interface.')
alaRipngInterfaceRecvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRipngInterfaceRecvStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceRecvStatus.setDescription('Controls whether or not to recv updates on this intf.')
alaRipngInterfaceSendStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRipngInterfaceSendStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceSendStatus.setDescription('Controls whether or not to send updates on this intf.')
alaRipngInterfaceHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("onlysplit", 2), ("poison", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRipngInterfaceHorizon.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceHorizon.setDescription('Controls use of split horizon on this interface.')
alaRipngInterfacePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngInterfacePacketsSent.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfacePacketsSent.setDescription('# of packets sent on this interface.')
alaRipngInterfacePacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngInterfacePacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfacePacketsRcvd.setDescription('# of packets received on this interface.')
alaRipngInterfaceMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngInterfaceMTU.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceMTU.setDescription('Max Transfer size of RIPng packets on this interface')
alaRipngInterfaceNextUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 11, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngInterfaceNextUpdate.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceNextUpdate.setDescription('Seconds remaining for the next update on this interface')
alaRipngPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15), )
if mibBuilder.loadTexts: alaRipngPeerTable.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerTable.setDescription('RIPng peers.')
alaRipngPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1), ).setIndexNames((0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerAddress"), (0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerIndex"))
if mibBuilder.loadTexts: alaRipngPeerEntry.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerEntry.setDescription('Each individual peer.')
alaRipngPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: alaRipngPeerAddress.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerAddress.setDescription('Address of peer.')
alaRipngPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: alaRipngPeerIndex.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerIndex.setDescription('IPv6 index of the interface on which this peer is seen')
alaRipngPeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngPeerLastUpdate.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerLastUpdate.setDescription('Last Update received.')
alaRipngPeerNumUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngPeerNumUpdates.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerNumUpdates.setDescription('Total # of updates received from this peer.')
alaRipngPeerNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngPeerNumRoutes.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerNumRoutes.setDescription('Total # of routes received from this peer.')
alaRipngPeerBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngPeerBadPackets.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerBadPackets.setDescription('Total # of bad packets received.')
alaRipngPeerBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngPeerBadRoutes.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerBadRoutes.setDescription('Total # of bad routes received.')
alaRipngRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16), )
if mibBuilder.loadTexts: alaRipngRouteTable.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteTable.setDescription('Ripng routing table which contains the routes.')
alaRipngRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngRoutePrefix"), (0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngRoutePrefixLen"), (0, "ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteNextHop"))
if mibBuilder.loadTexts: alaRipngRouteEntry.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteEntry.setDescription('Ripng routing table which contains the network routes')
alaRipngRoutePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: alaRipngRoutePrefix.setStatus('current')
if mibBuilder.loadTexts: alaRipngRoutePrefix.setDescription('The destination IP address of this route.')
alaRipngRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: alaRipngRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: alaRipngRoutePrefixLen.setDescription('The prefix length for this route.')
alaRipngRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: alaRipngRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteNextHop.setDescription('The address of the next hop to reach this route.')
alaRipngRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("rip", 2), ("redist", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteType.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteType.setDescription('The type of route.')
alaRipngRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteAge.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteAge.setDescription('The number of seconds  since  this route was last\n                        updated  or otherwise determined to be correct.')
alaRipngRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteTag.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteTag.setDescription('The associated route tag')
alaRipngRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteMetric.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteMetric.setDescription('The routing  metric  for  this  route.')
alaRipngRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteStatus.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteStatus.setDescription("Indicates whether the route has been installed\n                         into the IP Route Manager's fib.")
alaRipngRouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("garbage", 2), ("holddown", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteFlags.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteFlags.setDescription('The assocated flags for this route.')
alaRipngRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 1, 1, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRipngRouteIndex.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteIndex.setDescription('IPv6 index of the interface on which the route gateway\n                         can be reached')
alcatelIND1RIPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "alaRipngGlobalGroup"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceGroup"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerGroup"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RIPMIBCompliance = alcatelIND1RIPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPMIBCompliance.setDescription('Compliance statement for RIPng subsystem.')
alaRipngGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "alaRipngProtoStatus"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngUpdateInterval"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInvalidTimer"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngHolddownTimer"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngGarbageTimer"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteCount"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngGlobalRouteTag"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngTriggeredSends"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngJitter"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipngGlobalGroup = alaRipngGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipngGlobalGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alaRipngInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceStatus"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceMetric"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceRecvStatus"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceSendStatus"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceHorizon"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfacePacketsSent"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfacePacketsRcvd"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceMTU"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngInterfaceNextUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipngInterfaceGroup = alaRipngInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipngInterfaceGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alaRipngPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerLastUpdate"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerNumUpdates"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerNumRoutes"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerBadPackets"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngPeerBadRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipngPeerGroup = alaRipngPeerGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipngPeerGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alaRipngRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteType"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteAge"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteTag"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteMetric"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteStatus"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteFlags"), ("ALCATEL-IND1-RIPNG-MIB", "alaRipngRouteIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRipngRouteGroup = alaRipngRouteGroup.setStatus('current')
if mibBuilder.loadTexts: alaRipngRouteGroup.setDescription('Collection of Miscellaneous objects for management of RIP.')
alcatelIND1RIPNGTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 3))
alcatelIND1RIPNGTrapsRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 3, 0))
ripngRouteMaxLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 3, 0, 1))
if mibBuilder.loadTexts: ripngRouteMaxLimitReached.setStatus('current')
if mibBuilder.loadTexts: ripngRouteMaxLimitReached.setDescription(' This notification is generated as RIPng database reached supported maximum entries.\n             RIPng will discard any new updates.')
alcatelIND1RIPNGTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 12, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-RIPNG-MIB", "ripngRouteMaxLimitReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RIPNGTrapsGroup = alcatelIND1RIPNGTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RIPNGTrapsGroup.setDescription('Collection of RIPNG Trap Objects.')
mibBuilder.exportSymbols("ALCATEL-IND1-RIPNG-MIB", alaRipngInterfacePacketsSent=alaRipngInterfacePacketsSent, alcatelIND1RIPNGTrapsRoot=alcatelIND1RIPNGTrapsRoot, alcatelIND1RIPNGMIB=alcatelIND1RIPNGMIB, alaRipngGlobalRouteTag=alaRipngGlobalRouteTag, PYSNMP_MODULE_ID=alcatelIND1RIPNGMIB, alaRipngInterfacePacketsRcvd=alaRipngInterfacePacketsRcvd, alaRipngPeerGroup=alaRipngPeerGroup, alaRipngPort=alaRipngPort, alcatelIND1RIPNGMIBGroups=alcatelIND1RIPNGMIBGroups, alaRipngInterfaceTable=alaRipngInterfaceTable, alaRipngRoutePrefix=alaRipngRoutePrefix, alaRipngRouteIndex=alaRipngRouteIndex, alaRipngPeerLastUpdate=alaRipngPeerLastUpdate, alaRipngRouteAge=alaRipngRouteAge, alaRipngRouteTable=alaRipngRouteTable, alaRipngUpdateInterval=alaRipngUpdateInterval, alaRipngTriggeredSends=alaRipngTriggeredSends, alaRipngInterfaceMTU=alaRipngInterfaceMTU, alaRipngPeerEntry=alaRipngPeerEntry, alaRipngPeerIndex=alaRipngPeerIndex, alaRipngRouteMetric=alaRipngRouteMetric, alaRipngInterfaceRecvStatus=alaRipngInterfaceRecvStatus, ripngRouteMaxLimitReached=ripngRouteMaxLimitReached, alaRipngPeerAddress=alaRipngPeerAddress, alcatelIND1RIPNGMIBObjects=alcatelIND1RIPNGMIBObjects, alaRipngPeerTable=alaRipngPeerTable, alaRipngInterfaceMetric=alaRipngInterfaceMetric, alaRipngGlobalGroup=alaRipngGlobalGroup, alaRipngHolddownTimer=alaRipngHolddownTimer, alaRipngRouteNextHop=alaRipngRouteNextHop, alaRipngInvalidTimer=alaRipngInvalidTimer, alaRipngRouteGroup=alaRipngRouteGroup, alaRipngGarbageTimer=alaRipngGarbageTimer, alcatelIND1RIPNGMIBConformance=alcatelIND1RIPNGMIBConformance, alaRipngInterfaceNextUpdate=alaRipngInterfaceNextUpdate, alaRipngRouteTag=alaRipngRouteTag, alaProtocolRipng=alaProtocolRipng, alcatelIND1RIPMIBCompliance=alcatelIND1RIPMIBCompliance, alcatelIND1RIPNGTrapsGroup=alcatelIND1RIPNGTrapsGroup, alaRipngRoutePrefixLen=alaRipngRoutePrefixLen, alaRipngRouteFlags=alaRipngRouteFlags, alaRipngProtoStatus=alaRipngProtoStatus, alaRipngInterfaceHorizon=alaRipngInterfaceHorizon, alcatelIND1RIPNGTraps=alcatelIND1RIPNGTraps, alaRipngInterfaceEntry=alaRipngInterfaceEntry, alaRipngPeerNumRoutes=alaRipngPeerNumRoutes, alaRipngInterfaceGroup=alaRipngInterfaceGroup, alaRipngRouteType=alaRipngRouteType, alaRipngPeerNumUpdates=alaRipngPeerNumUpdates, alaRipngJitter=alaRipngJitter, alaRipngInterfaceSendStatus=alaRipngInterfaceSendStatus, alaRipngPeerBadRoutes=alaRipngPeerBadRoutes, alaRipngRouteEntry=alaRipngRouteEntry, alaRipngRouteStatus=alaRipngRouteStatus, alaRipngInterfaceStatus=alaRipngInterfaceStatus, alcatelIND1RIPNGMIBCompliances=alcatelIND1RIPNGMIBCompliances, alaRipngInterfaceIndex=alaRipngInterfaceIndex, alaRipngPeerBadPackets=alaRipngPeerBadPackets, alaRipngRouteCount=alaRipngRouteCount)
