#
# PySNMP MIB module ALCATEL-IND1-SLB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-SLB-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 00:33:46 2022
# On host fv-az77-763 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Slb, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Slb")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibIdentifier, TimeTicks, ModuleIdentity, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Integer32, Counter32, Gauge32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "TimeTicks", "ModuleIdentity", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Integer32", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType")
DisplayString, RowStatus, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "MacAddress")
alcatelIND1SLBMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1))
alcatelIND1SLBMIB.setRevisions(('2010-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1SLBMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.',))
if mibBuilder.loadTexts: alcatelIND1SLBMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1SLBMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1SLBMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n        version of this document is used with the products in question:\n\n                   Alcatel-Lucent, Enterprise Solutions Division\n                  (Formerly Alcatel Internetworking, Incorporated)\n                          26801 West Agoura Road\n                       Agoura Hills, CA  91301-5122\n                         United States Of America\n\n       Telephone:               North America  +1 800 995 2696\n                                Latin America  +1 877 919 9526\n                                Europe         +31 23 556 0100\n                                Asia           +65 394 7933\n                                All Other      +1 818 878 4507\n\n       Electronic Mail:         support@ind.alcatel.com\n       World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n       File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1SLBMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n            For the Birds Of Prey Product Line\n            Configuration and monitoring of the Server Load Balancing feature\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                    Copyright (C) 1995-2007 Alcatel-Lucent\n                        ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1SLBMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 0))
if mibBuilder.loadTexts: alcatelIND1SLBMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBNotifications.setDescription('Branch For SLB MIB Subsystem Notifications.')
alcatelIND1SLBMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1))
if mibBuilder.loadTexts: alcatelIND1SLBMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBObjects.setDescription('Branch for server load balancing application objects')
alcatelIND1SLBMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2))
if mibBuilder.loadTexts: alcatelIND1SLBMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBConformance.setDescription('Branch for server load balancing application conformance information')
alcatelIND1SLBMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1SLBMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBGroups.setDescription('Branch for server load balancing application units of conformance')
alcatelIND1SLBMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1SLBMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBCompliances.setDescription('Branch for server load balancing application compliance statements')
class SlbAdminState(TextualConvention, Integer32):
    description = "The administrative state of various SLB entities\n                'disable' : The entity has been disabled.\n                'enable'  : The entity is enabled so it can participate\n                            in the load balancing activity."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disable", 1), ("enable", 2))

class SlbOperState(TextualConvention, Integer32):
    description = "The operational state of various SLB entities\n                'outOfService' : The entity is out of service.\n                'inService'    : The entity operates properly."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("outOfService", 1), ("inService", 2))

class SlbRedirectAlgorithm(TextualConvention, Integer32):
    description = "The load-balancing algorithm being used on a\n                cluster to distribute load evenly among real servers.\n                'roundRobin' load-balancing delivers connections evenly\n                amongst real servers while 'serverFailover' gives new\n                connections to the real server only when the previous\n                has failed."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("roundRobin", 1), ("serverFailover", 2))

class SlbHashSelector(TextualConvention, Integer32):
    description = 'The hashing algorithm to use when distributing \n                the packets across the server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("useEcmp", 1), ("dip", 2), ("sip", 3), ("sipAndDip", 4), ("sipDipL4sportL4dport", 5), ("dipSipL4dportL4sport", 6), ("sipL4sport", 7), ("dipL4dport", 8))

class SlbServerOperState(TextualConvention, Integer32):
    description = "The server operational state represents the state of a\n                real server being load-balanced by SLB.\n                'inService'  : Server is in use as a destination\n                               for SLB client connections.\n                'linkDown'   : The link by which the server can be\n                               reached has failed, so the server\n                               is considered out of service.\n                'noAnswer'   : The server has not answered to a sequence\n                               of ping retries, so the server\n                               is considered out of service.\n                'disabled'   : Server has been disabled by the admin\n                               status, so the server is considered\n                               out of service.\n                'retrying'   : The server is currently being tested\n                               for a number of retries. It is still\n                               considered in service.\n                'discovery'  : The server is currently being tested to\n                               get its MAC address. The server is considered\n                               out of service."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("inService", 1), ("linkDown", 2), ("noAnswer", 3), ("disabled", 4), ("retrying", 5), ("discovery", 6))

slbFeature = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 1))
slbAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 1, 1), SlbAdminState().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbAdminStatus.setDescription('The administrative status of the SLB feature.\n                It allows to turn on/off the feature')
slbOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 1, 2), SlbOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperStatus.setStatus('current')
if mibBuilder.loadTexts: slbOperStatus.setDescription("The operational status of the SLB feature.\n                'inService'    means that at least one cluster of\n                               servers is inService.\n                'outOfService' means that all of defined clusters\n                               of servers are outOfService.")
slbClustersCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbClustersCount.setStatus('current')
if mibBuilder.loadTexts: slbClustersCount.setDescription('The number of configured clusters.')
slbResetStatistics = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSignificant", 0), ("resetSlbStats", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbResetStatistics.setStatus('current')
if mibBuilder.loadTexts: slbResetStatistics.setDescription('Resets the SLB statistics.')
slbClusters = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2))
slbClusterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: slbClusterTable.setStatus('current')
if mibBuilder.loadTexts: slbClusterTable.setDescription("This is a table of clusters, each of which is a\n                group of real servers to be used by SLB for load\n                balancing.  Columnar objects can be modified when the\n                row is 'active'.  Rows can be created and destroyed.\n                Entries are added to this table via\n                slbClusterRowStatus in accordance with the\n                RowStatus convention.")
slbClusterTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SLB-MIB", "slbClusterName"))
if mibBuilder.loadTexts: slbClusterTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbClusterTableEntry.setDescription('Information about a particular Cluster.')
slbClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 23)))
if mibBuilder.loadTexts: slbClusterName.setStatus('current')
if mibBuilder.loadTexts: slbClusterName.setDescription('The name of the cluster.')
slbClusterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 2), SlbAdminState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbClusterAdminStatus.setDescription('The administrative state of the cluster.')
slbClusterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 3), SlbOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbClusterOperStatus.setStatus('current')
if mibBuilder.loadTexts: slbClusterOperStatus.setDescription('The operational state of the cluster.')
slbClusterVIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterVIP.setStatus('current')
if mibBuilder.loadTexts: slbClusterVIP.setDescription('The Virtual IP address for that cluster.')
slbClusterPingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterPingPeriod.setStatus('current')
if mibBuilder.loadTexts: slbClusterPingPeriod.setDescription('The ping period to check health of servers.')
slbClusterPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterPingTimeout.setStatus('current')
if mibBuilder.loadTexts: slbClusterPingTimeout.setDescription('The timeout used to wait for ping answers.')
slbClusterPingRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterPingRetries.setStatus('current')
if mibBuilder.loadTexts: slbClusterPingRetries.setDescription('The number of ping retries before deciding\n                 that a server is OutOfService.')
slbClusterRedirectAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 8), SlbRedirectAlgorithm().clone('roundRobin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterRedirectAlgorithm.setStatus('current')
if mibBuilder.loadTexts: slbClusterRedirectAlgorithm.setDescription('The load balancing algorithm in use\n                               by the cluster.')
slbClusterIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(1200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterIdleTimer.setStatus('current')
if mibBuilder.loadTexts: slbClusterIdleTimer.setDescription('The maximum delay with no activity a client is\n                 kept attached to a real server.')
slbClusterNumberOfServers = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbClusterNumberOfServers.setStatus('current')
if mibBuilder.loadTexts: slbClusterNumberOfServers.setDescription('The number of real servers in this cluster.')
slbClusterNewFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbClusterNewFlows.setStatus('current')
if mibBuilder.loadTexts: slbClusterNewFlows.setDescription('The number of flows balanced for this cluster.')
slbClusterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbClusterRowStatus.setDescription('The object is used by a management station to create\n                or delete the row entry in slbClusterTable following\n                the RowStatus textual convention.')
slbClusterProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterProbeName.setStatus('current')
if mibBuilder.loadTexts: slbClusterProbeName.setDescription("The name of the cluster's probe.")
slbClusterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbClusterPackets.setStatus('current')
if mibBuilder.loadTexts: slbClusterPackets.setDescription('The number of packets passed for this cluster.')
slbClusterCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterCondition.setStatus('current')
if mibBuilder.loadTexts: slbClusterCondition.setDescription('The Condition name rule.\n                 Mutually exclusive with VIP')
slbClusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l3", 1), ("l2", 2))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterType.setStatus('current')
if mibBuilder.loadTexts: slbClusterType.setDescription('The type of load balancing.  l3 - routed, l2flows -\n                                               distribute bridged flows')
slbClusterHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 2, 1, 1, 17), SlbHashSelector().clone('useEcmp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbClusterHashType.setStatus('current')
if mibBuilder.loadTexts: slbClusterHashType.setDescription('The load balancing hashing algorithm\n                               by the cluster.')
slbServers = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3))
slbServerTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1), )
if mibBuilder.loadTexts: slbServerTable.setStatus('current')
if mibBuilder.loadTexts: slbServerTable.setDescription("A table of real servers.  Columnar objects can be\n                modified when the row is 'active'.  Rows can be created\n                and destroyed.  Entries are added to this table via\n                slbServerRowStatus in accordance with the RowStatus\n                convention.")
slbServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SLB-MIB", "slbServerClusterName"), (0, "ALCATEL-IND1-SLB-MIB", "slbServerIpAddress"))
if mibBuilder.loadTexts: slbServerTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbServerTableEntry.setDescription('Information about a particular real server in a\n                particular cluster.')
slbServerClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 23)))
if mibBuilder.loadTexts: slbServerClusterName.setStatus('current')
if mibBuilder.loadTexts: slbServerClusterName.setDescription("The server's cluster name.")
slbServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: slbServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbServerIpAddress.setDescription('The IP address of real server.')
slbServerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 3), SlbAdminState().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbServerAdminStatus.setDescription('The administrative status of the server.')
slbServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 4), SlbServerOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: slbServerOperStatus.setDescription('The operational status of the server.')
slbServerAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerAdminWeight.setStatus('current')
if mibBuilder.loadTexts: slbServerAdminWeight.setDescription('The Administrative weight of the real server used\n                by the load-balancing algorithms.  A weight of zero\n                indicates that no new connections will be assigned\n                to this real server.\n                Higher weight values indicate to the load-balancing\n                algorithms a higher availability of this real server\n                to accept more work.')
slbServerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerUpTime.setStatus('current')
if mibBuilder.loadTexts: slbServerUpTime.setDescription('The server availibility in %')
slbServerLastRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 7), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerLastRTT.setStatus('current')
if mibBuilder.loadTexts: slbServerLastRTT.setDescription('The last valid round trip time measured\n                 by ping.')
slbServerPingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerPingFails.setStatus('current')
if mibBuilder.loadTexts: slbServerPingFails.setDescription('The number of pings that have failed on\n                 this server.')
slbServerPortDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerPortDown.setStatus('current')
if mibBuilder.loadTexts: slbServerPortDown.setDescription('The number of down events received at server port.')
slbServerFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerFlows.setStatus('current')
if mibBuilder.loadTexts: slbServerFlows.setDescription('The number of flows directed to this server.')
slbServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbServerRowStatus.setDescription('The object used by a management station to create\n                or delete the row entry in slbServerTable following the\n                RowStatus textual convention.')
slbServerProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbServerProbeName.setStatus('current')
if mibBuilder.loadTexts: slbServerProbeName.setDescription("The server's probe name.")
slbServerProbeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 3, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbServerProbeStatus.setStatus('current')
if mibBuilder.loadTexts: slbServerProbeStatus.setDescription('The status from doing a probe.')
slbProbes = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4))
slbProbeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1), )
if mibBuilder.loadTexts: slbProbeTable.setStatus('current')
if mibBuilder.loadTexts: slbProbeTable.setDescription("This is a table of probes, each of which can be\n                used in either the server or cluster tables to\n                define the method that the will be used to determine\n                the status of servers.\n                Columnar objects can be modified when the\n                row is 'active'.  Rows can be created and destroyed.\n                Entries are added to this table via\n                slbProbeRowStatus in accordance with the\n                RowStatus convention.")
slbProbeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SLB-MIB", "slbProbeName"))
if mibBuilder.loadTexts: slbProbeTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbProbeTableEntry.setDescription('Information about a particular Probe.')
slbProbeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 23)))
if mibBuilder.loadTexts: slbProbeName.setStatus('current')
if mibBuilder.loadTexts: slbProbeName.setDescription('The name of the probe.')
slbProbeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ping", 1), ("http", 2), ("https", 3), ("udp", 4), ("tcp", 5), ("ftp", 6), ("smtp", 7), ("pop", 8), ("pops", 9), ("imap", 10), ("imaps", 11), ("nntp", 12))).clone('ping')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeMethod.setStatus('current')
if mibBuilder.loadTexts: slbProbeMethod.setDescription('The probe method used to check the health of servers.')
slbProbePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbePeriod.setStatus('current')
if mibBuilder.loadTexts: slbProbePeriod.setDescription('The probe period to check health of servers.')
slbProbeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000)).clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeTimeout.setStatus('current')
if mibBuilder.loadTexts: slbProbeTimeout.setDescription('The timeout used to wait for probe answers.')
slbProbeRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeRetries.setStatus('current')
if mibBuilder.loadTexts: slbProbeRetries.setDescription('The number of probe retries before deciding\n                 that a server is OutOfService.')
slbProbePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbePort.setStatus('current')
if mibBuilder.loadTexts: slbProbePort.setDescription('The TCP/UDP port the probe should\n                be sent on.')
slbProbeExpect = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeExpect.setStatus('current')
if mibBuilder.loadTexts: slbProbeExpect.setDescription('An ASCII string used to compare a response from\n                a server to verify the health of the server.')
slbProbeSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeSSL.setStatus('current')
if mibBuilder.loadTexts: slbProbeSSL.setDescription('Indicates if a TCP/UDP probe uses SSL.')
slbProbeSend = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeSend.setStatus('current')
if mibBuilder.loadTexts: slbProbeSend.setDescription('An ASCII string sent to a server to invoke a\n                response from a server to verify the health of\n                the server.')
slbProbeHttpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 10), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeHttpStatus.setStatus('current')
if mibBuilder.loadTexts: slbProbeHttpStatus.setDescription('The expected status returned from an HTTP GET to\n                verify the health of the server.')
slbProbeHttpUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeHttpUrl.setStatus('current')
if mibBuilder.loadTexts: slbProbeHttpUrl.setDescription('A URL sent to a server for an HTTP GET to verify\n                the health of the server.')
slbProbeHttpUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeHttpUsername.setStatus('current')
if mibBuilder.loadTexts: slbProbeHttpUsername.setDescription('An ASCII string sent to a server as credentials for\n                an HTTP GET to verify the health of the server.')
slbProbeHttpPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeHttpPassword.setStatus('current')
if mibBuilder.loadTexts: slbProbeHttpPassword.setDescription('An ASCII string sent to a server as credentials for\n                an HTTP GET to verify the health of the server.  This\n                string will be encrypted so it will not display readable.')
slbProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 4, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbProbeRowStatus.setStatus('current')
if mibBuilder.loadTexts: slbProbeRowStatus.setDescription('The object is used by a management station to create\n                or delete the row entry in slbProbeTable following\n                the RowStatus textual convention.')
slbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5))
slbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 1), )
if mibBuilder.loadTexts: slbStatsTable.setStatus('current')
if mibBuilder.loadTexts: slbStatsTable.setDescription('Contains the counters statistics for SLB NI entries')
slbStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-SLB-MIB", "slbStatsClusterName"), (0, "ALCATEL-IND1-SLB-MIB", "slbStatsIndex"))
if mibBuilder.loadTexts: slbStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatsTableEntry.setDescription('Cluster statistics table.')
slbStatsClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 23)))
if mibBuilder.loadTexts: slbStatsClusterName.setStatus('current')
if mibBuilder.loadTexts: slbStatsClusterName.setDescription('The name of the cluster.')
slbStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)))
if mibBuilder.loadTexts: slbStatsIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatsIndex.setDescription('The sequence number for cluster statistics counter.')
slbStatsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsCounter.setStatus('current')
if mibBuilder.loadTexts: slbStatsCounter.setDescription('The statistics counter.')
slbStatsQual = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 6))
slbStatsQualTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2), )
if mibBuilder.loadTexts: slbStatsQualTable.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualTable.setDescription('The description for the statistics counter.  Describes the\n                                                                qualification parameters on the counter.')
slbStatsQualTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-SLB-MIB", "slbStatsClusterName"), (0, "ALCATEL-IND1-SLB-MIB", "slbStatsIndex"), (0, "ALCATEL-IND1-SLB-MIB", "slbStatsQualType"))
if mibBuilder.loadTexts: slbStatsQualTableEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualTableEntry.setDescription('Information about a particular counter.')
slbStatsQualType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("dstIp", 1), ("srcIp", 2), ("srcPort", 3), ("srcPortGroup", 4), ("srcVlan", 5), ("ipProtocol", 6), ("dstIpPort", 7), ("srcIpPort", 8), ("dstIpTcpPort", 9), ("srcIpTcpPort", 10), ("dstIpUdpPort", 11), ("srcIpUdpPort", 12), ("srcMac", 13), ("dstMac", 14), ("d8021p", 15), ("ethertype", 16), ("icmpType", 17), ("icmpCode", 18), ("tcpFlags", 19), ("tos", 20), ("dstPort", 21), ("dstPortGroup", 22))))
if mibBuilder.loadTexts: slbStatsQualType.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualType.setDescription('The qualification parameter.')
slbStatsQualDataIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataIp.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataIp.setDescription('The IP Address of the qualifier.')
slbStatsQualDataIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataIpMask.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataIpMask.setDescription('The IP Address Mask of the qualifier.')
slbStatsQualDataSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataSlot.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataSlot.setDescription('The Slot of the qualifier.')
slbStatsQualDataStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataStartPort.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataStartPort.setDescription('The Start Port of the qualifier.')
slbStatsQualDataEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataEndPort.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataEndPort.setDescription('The End Port of the qualifier.')
slbStatsQualDataIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataIpProtocol.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataIpProtocol.setDescription('The IP Protocol of the qualifier.')
slbStatsQualDataVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataVlan.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataVlan.setDescription('The VLAN of the qualifier.')
slbStatsQualDataL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataL4Port.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataL4Port.setDescription('The L4 Port of the qualifier.')
slbStatsQualDataMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataMac.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataMac.setDescription('The MAC Address of the qualifier.')
slbStatsQualDataMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataMacMask.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataMacMask.setDescription('The MAC Address Mask of the qualifier.')
slbStatsQualDataEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataEthertype.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataEthertype.setDescription('The Ethertype of the qualifier.')
slbStatsQualDataIcmpData = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataIcmpData.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataIcmpData.setDescription('The ICMP code or type of the qualifier.')
slbStatsQualDataTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataTcpFlags.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataTcpFlags.setDescription('The TCP flag/mask/<any|all> of the qualifier.')
slbStatsQualDataTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualDataTos.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualDataTos.setDescription('The TOS/mask of the qualifier.')
slbStatsQualData8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatsQualData8021p.setStatus('current')
if mibBuilder.loadTexts: slbStatsQualData8021p.setDescription('The 802.1p of the qualifier.')
slbTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7))
slbTrapException = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 0, 1)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbTrapInfoException"))
if mibBuilder.loadTexts: slbTrapException.setStatus('current')
if mibBuilder.loadTexts: slbTrapException.setDescription('Software exception in SLB module.')
slbTrapConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 0, 2)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbTrapInfoEntityGroup"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoClusterName"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoServerIpAddr"))
if mibBuilder.loadTexts: slbTrapConfigChanged.setStatus('current')
if mibBuilder.loadTexts: slbTrapConfigChanged.setDescription('A change occured in SLB configuration.')
slbTrapOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 0, 3)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbTrapInfoEntityGroup"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoOperStatus"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoClusterName"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoServerIpAddr"))
if mibBuilder.loadTexts: slbTrapOperStatus.setStatus('current')
if mibBuilder.loadTexts: slbTrapOperStatus.setDescription('A change occured in the operational status of a slb entity.')
slbTrapInfoClusterName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTrapInfoClusterName.setStatus('current')
if mibBuilder.loadTexts: slbTrapInfoClusterName.setDescription('The name of a cluster.')
slbTrapInfoOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7, 2), SlbOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTrapInfoOperStatus.setStatus('current')
if mibBuilder.loadTexts: slbTrapInfoOperStatus.setDescription('The operational status of slb, cluster or\n                               server.')
slbTrapInfoServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTrapInfoServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbTrapInfoServerIpAddr.setDescription('The IP address of a server.')
slbTrapInfoEntityGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slb", 1), ("cluster", 2), ("server", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTrapInfoEntityGroup.setStatus('current')
if mibBuilder.loadTexts: slbTrapInfoEntityGroup.setDescription('The entity group inside slb management.')
slbTrapInfoException = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbTrapInfoException.setStatus('current')
if mibBuilder.loadTexts: slbTrapInfoException.setDescription('A number identifying the sofware exception.')
alcatelIND1SLBMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbFeatureGroup"), ("ALCATEL-IND1-SLB-MIB", "slbClustersGroup"), ("ALCATEL-IND1-SLB-MIB", "slbServersGroup"), ("ALCATEL-IND1-SLB-MIB", "slbProbesGroup"), ("ALCATEL-IND1-SLB-MIB", "slbTrapsGroup"), ("ALCATEL-IND1-SLB-MIB", "slbTrapsObjGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1SLBMIBCompliance = alcatelIND1SLBMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1SLBMIBCompliance.setDescription('Compliance statement for Server Load Balancing.')
slbFeatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbAdminStatus"), ("ALCATEL-IND1-SLB-MIB", "slbOperStatus"), ("ALCATEL-IND1-SLB-MIB", "slbClustersCount"), ("ALCATEL-IND1-SLB-MIB", "slbResetStatistics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbFeatureGroup = slbFeatureGroup.setStatus('current')
if mibBuilder.loadTexts: slbFeatureGroup.setDescription('Collection of objects for management of Server Load Balancing')
slbClustersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbClusterAdminStatus"), ("ALCATEL-IND1-SLB-MIB", "slbClusterOperStatus"), ("ALCATEL-IND1-SLB-MIB", "slbClusterVIP"), ("ALCATEL-IND1-SLB-MIB", "slbClusterPingPeriod"), ("ALCATEL-IND1-SLB-MIB", "slbClusterPingTimeout"), ("ALCATEL-IND1-SLB-MIB", "slbClusterPingRetries"), ("ALCATEL-IND1-SLB-MIB", "slbClusterRedirectAlgorithm"), ("ALCATEL-IND1-SLB-MIB", "slbClusterIdleTimer"), ("ALCATEL-IND1-SLB-MIB", "slbClusterNumberOfServers"), ("ALCATEL-IND1-SLB-MIB", "slbClusterNewFlows"), ("ALCATEL-IND1-SLB-MIB", "slbClusterRowStatus"), ("ALCATEL-IND1-SLB-MIB", "slbClusterProbeName"), ("ALCATEL-IND1-SLB-MIB", "slbClusterPackets"), ("ALCATEL-IND1-SLB-MIB", "slbClusterCondition"), ("ALCATEL-IND1-SLB-MIB", "slbClusterType"), ("ALCATEL-IND1-SLB-MIB", "slbClusterHashType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbClustersGroup = slbClustersGroup.setStatus('current')
if mibBuilder.loadTexts: slbClustersGroup.setDescription('Collection of objects for management of Server Load Balancing clusters')
slbServersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbServerAdminStatus"), ("ALCATEL-IND1-SLB-MIB", "slbServerOperStatus"), ("ALCATEL-IND1-SLB-MIB", "slbServerAdminWeight"), ("ALCATEL-IND1-SLB-MIB", "slbServerUpTime"), ("ALCATEL-IND1-SLB-MIB", "slbServerLastRTT"), ("ALCATEL-IND1-SLB-MIB", "slbServerPingFails"), ("ALCATEL-IND1-SLB-MIB", "slbServerFlows"), ("ALCATEL-IND1-SLB-MIB", "slbServerRowStatus"), ("ALCATEL-IND1-SLB-MIB", "slbServerProbeName"), ("ALCATEL-IND1-SLB-MIB", "slbServerProbeStatus"), ("ALCATEL-IND1-SLB-MIB", "slbServerPortDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbServersGroup = slbServersGroup.setStatus('current')
if mibBuilder.loadTexts: slbServersGroup.setDescription('Collection of objects for management of Server Load Balancing servers')
slbTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbTrapException"), ("ALCATEL-IND1-SLB-MIB", "slbTrapConfigChanged"), ("ALCATEL-IND1-SLB-MIB", "slbTrapOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbTrapsGroup = slbTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: slbTrapsGroup.setDescription('Collection of traps for management of Server Load Balancing')
slbProbesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbProbeMethod"), ("ALCATEL-IND1-SLB-MIB", "slbProbePeriod"), ("ALCATEL-IND1-SLB-MIB", "slbProbeTimeout"), ("ALCATEL-IND1-SLB-MIB", "slbProbeRetries"), ("ALCATEL-IND1-SLB-MIB", "slbProbePort"), ("ALCATEL-IND1-SLB-MIB", "slbProbeExpect"), ("ALCATEL-IND1-SLB-MIB", "slbProbeSend"), ("ALCATEL-IND1-SLB-MIB", "slbProbeSSL"), ("ALCATEL-IND1-SLB-MIB", "slbProbeHttpStatus"), ("ALCATEL-IND1-SLB-MIB", "slbProbeHttpUrl"), ("ALCATEL-IND1-SLB-MIB", "slbProbeHttpUsername"), ("ALCATEL-IND1-SLB-MIB", "slbProbeHttpPassword"), ("ALCATEL-IND1-SLB-MIB", "slbProbeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbProbesGroup = slbProbesGroup.setStatus('current')
if mibBuilder.loadTexts: slbProbesGroup.setDescription('Collection of objects for management of Server Load Balancing probes')
slbStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbStatsCounter"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataIp"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataIpMask"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataSlot"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataStartPort"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataEndPort"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataVlan"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataL4Port"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataMac"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataEthertype"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataIcmpData"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataTcpFlags"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataTos"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualData8021p"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataIpProtocol"), ("ALCATEL-IND1-SLB-MIB", "slbStatsQualDataMacMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbStatsGroup = slbStatsGroup.setStatus('current')
if mibBuilder.loadTexts: slbStatsGroup.setDescription('Collection of objects for management of Server Load Balancing probes')
slbTrapsObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 20, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-SLB-MIB", "slbTrapInfoClusterName"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoEntityGroup"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoException"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoOperStatus"), ("ALCATEL-IND1-SLB-MIB", "slbTrapInfoServerIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    slbTrapsObjGroup = slbTrapsObjGroup.setStatus('current')
if mibBuilder.loadTexts: slbTrapsObjGroup.setDescription('Traps description.')
mibBuilder.exportSymbols("ALCATEL-IND1-SLB-MIB", slbClusterVIP=slbClusterVIP, slbProbeTable=slbProbeTable, slbServerAdminWeight=slbServerAdminWeight, slbServerFlows=slbServerFlows, slbStatsQual=slbStatsQual, slbClusterPingPeriod=slbClusterPingPeriod, SlbServerOperState=SlbServerOperState, alcatelIND1SLBMIBCompliances=alcatelIND1SLBMIBCompliances, slbProbePeriod=slbProbePeriod, slbStatsQualDataEthertype=slbStatsQualDataEthertype, slbClusterOperStatus=slbClusterOperStatus, SlbOperState=SlbOperState, slbTrapsGroup=slbTrapsGroup, SlbRedirectAlgorithm=SlbRedirectAlgorithm, slbStatsQualDataIcmpData=slbStatsQualDataIcmpData, slbProbeHttpStatus=slbProbeHttpStatus, SlbAdminState=SlbAdminState, slbProbeTimeout=slbProbeTimeout, slbStatsQualDataStartPort=slbStatsQualDataStartPort, slbProbeRowStatus=slbProbeRowStatus, slbStatsQualDataMacMask=slbStatsQualDataMacMask, slbStatsQualTable=slbStatsQualTable, alcatelIND1SLBMIBCompliance=alcatelIND1SLBMIBCompliance, slbProbeHttpPassword=slbProbeHttpPassword, slbStatsQualDataSlot=slbStatsQualDataSlot, slbProbeRetries=slbProbeRetries, slbClusterTable=slbClusterTable, slbServerProbeStatus=slbServerProbeStatus, slbStats=slbStats, slbFeatureGroup=slbFeatureGroup, slbServerTable=slbServerTable, slbServerIpAddress=slbServerIpAddress, slbClusterCondition=slbClusterCondition, slbClusterPingTimeout=slbClusterPingTimeout, alcatelIND1SLBMIB=alcatelIND1SLBMIB, slbStatsQualDataMac=slbStatsQualDataMac, slbServerUpTime=slbServerUpTime, slbProbeExpect=slbProbeExpect, PYSNMP_MODULE_ID=alcatelIND1SLBMIB, alcatelIND1SLBMIBGroups=alcatelIND1SLBMIBGroups, slbStatsIndex=slbStatsIndex, slbTrapInfoServerIpAddr=slbTrapInfoServerIpAddr, slbProbeHttpUrl=slbProbeHttpUrl, slbTrapInfoOperStatus=slbTrapInfoOperStatus, slbProbeName=slbProbeName, slbTrapConfigChanged=slbTrapConfigChanged, slbStatsQualTableEntry=slbStatsQualTableEntry, slbResetStatistics=slbResetStatistics, slbStatsQualDataTos=slbStatsQualDataTos, slbStatsClusterName=slbStatsClusterName, slbClusterNewFlows=slbClusterNewFlows, slbStatsQualData8021p=slbStatsQualData8021p, slbClusterHashType=slbClusterHashType, slbClustersGroup=slbClustersGroup, slbProbeSSL=slbProbeSSL, slbServerOperStatus=slbServerOperStatus, slbStatsQualDataIp=slbStatsQualDataIp, slbClusterProbeName=slbClusterProbeName, slbClusterTableEntry=slbClusterTableEntry, slbClusterIdleTimer=slbClusterIdleTimer, slbStatsQualDataIpProtocol=slbStatsQualDataIpProtocol, slbStatsQualType=slbStatsQualType, slbClusterRedirectAlgorithm=slbClusterRedirectAlgorithm, slbAdminStatus=slbAdminStatus, SlbHashSelector=SlbHashSelector, slbServerClusterName=slbServerClusterName, slbClusterType=slbClusterType, slbStatsQualDataTcpFlags=slbStatsQualDataTcpFlags, slbClusterNumberOfServers=slbClusterNumberOfServers, slbServerLastRTT=slbServerLastRTT, slbServerTableEntry=slbServerTableEntry, slbServerRowStatus=slbServerRowStatus, slbClusterPingRetries=slbClusterPingRetries, slbClusterPackets=slbClusterPackets, slbOperStatus=slbOperStatus, slbClusterRowStatus=slbClusterRowStatus, slbServers=slbServers, slbProbes=slbProbes, slbTrapInfoEntityGroup=slbTrapInfoEntityGroup, alcatelIND1SLBMIBNotifications=alcatelIND1SLBMIBNotifications, slbStatsTable=slbStatsTable, slbServerPortDown=slbServerPortDown, slbServerProbeName=slbServerProbeName, slbFeature=slbFeature, slbTrapOperStatus=slbTrapOperStatus, slbTrapInfoClusterName=slbTrapInfoClusterName, slbProbesGroup=slbProbesGroup, slbServersGroup=slbServersGroup, slbStatsQualDataL4Port=slbStatsQualDataL4Port, slbTrapsObjGroup=slbTrapsObjGroup, slbServerPingFails=slbServerPingFails, slbStatsQualDataEndPort=slbStatsQualDataEndPort, slbTrapException=slbTrapException, slbTrapInfoException=slbTrapInfoException, slbClusters=slbClusters, slbProbeSend=slbProbeSend, slbTrapsObj=slbTrapsObj, slbStatsTableEntry=slbStatsTableEntry, slbProbeTableEntry=slbProbeTableEntry, alcatelIND1SLBMIBObjects=alcatelIND1SLBMIBObjects, slbProbeHttpUsername=slbProbeHttpUsername, slbStatsQualDataIpMask=slbStatsQualDataIpMask, slbProbeMethod=slbProbeMethod, slbClusterName=slbClusterName, slbStatsGroup=slbStatsGroup, slbStatsCounter=slbStatsCounter, slbClustersCount=slbClustersCount, slbProbePort=slbProbePort, alcatelIND1SLBMIBConformance=alcatelIND1SLBMIBConformance, slbStatsQualDataVlan=slbStatsQualDataVlan, slbServerAdminStatus=slbServerAdminStatus, slbClusterAdminStatus=slbClusterAdminStatus)
