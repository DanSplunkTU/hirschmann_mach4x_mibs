#
# PySNMP MIB module ALCATEL-IND1-HEALTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-HEALTH-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Health, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Health")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Integer32, ModuleIdentity, Counter64, Unsigned32, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Integer32", "ModuleIdentity", "Counter64", "Unsigned32", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alcatelIND1HealthMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1))
alcatelIND1HealthMonitorMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'Addressing discrepancies with Alcatel Standard.',))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Health Monitoring for dissemination of resource consumption information.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1HealthMonitorMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 0))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBNotifications.setDescription('Branch For Health Monitor MIB Subsystem Notifications.')
alcatelIND1HealthMonitorMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBObjects.setDescription('Branch For Health Montor Subsystem Managed Objects.')
alcatelIND1HealthMonitorMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBConformance.setDescription('Branch For Health Montor Subsystem Managed Objects.')
alcatelIND1HealthMonitorMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBGroups.setDescription('Branch For Health Montor Subsystem Managed Objects.')
alcatelIND1HealthMonitorMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBCompliances.setDescription('Branch For Health Montor Subsystem Managed Objects.')
healthModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1))
healthModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1), )
if mibBuilder.loadTexts: healthModuleTable.setStatus('current')
if mibBuilder.loadTexts: healthModuleTable.setDescription('A list of installed modules in this chassis.')
healthModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-HEALTH-MIB", "healthModuleSlot"))
if mibBuilder.loadTexts: healthModuleEntry.setStatus('current')
if mibBuilder.loadTexts: healthModuleEntry.setDescription("A module entry containing objects for a module in a specific 'slot'.")
healthModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7016)))
if mibBuilder.loadTexts: healthModuleSlot.setStatus('current')
if mibBuilder.loadTexts: healthModuleSlot.setDescription('The slot number for the chassis. Slot 0 is\n                 reserved for CMM and slots 1 to 16 are for\n                 NIs in those slots')
healthModuleRx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRx1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRx1MinAvg.setDescription('Average module-level input utilization over the\n                 last minute (percent).')
healthModuleRx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRx1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRx1HrAvg.setDescription('Average module-level input utilization over the\n                 last hour (percent).')
healthModuleRx1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRx1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRx1DayAvg.setDescription('Maximum one-minute module-level input utilization over the\n                 last hour (percent).')
healthModuleRxTx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTx1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRxTx1MinAvg.setDescription('Average module-level i/o utilization over the\n                 last minute (percent).')
healthModuleRxTx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTx1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRxTx1HrAvg.setDescription('Average module-level i/o utilization over the\n                 last hour (percent).')
healthModuleRxTx1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTx1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleRxTx1DayAvg.setDescription('Maximum one-minute module-level i/o utilization over the\n                 last hour (percent).')
healthModuleMemory1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleMemory1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleMemory1MinAvg.setDescription('Average module-level memory utilization over the\n                 last minute (percent).')
healthModuleMemory1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleMemory1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleMemory1HrAvg.setDescription('Average module-level memory utilization over the\n                 last hour (percent).')
healthModuleMemory1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleMemory1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleMemory1DayAvg.setDescription('Maximum one-minute module-level memory utilization over the\n                 last hour (percent).')
healthModuleCpu1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCpu1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleCpu1MinAvg.setDescription('Average module-level CPU utilization over the\n                 last minute (percent).')
healthModuleCpu1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCpu1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleCpu1HrAvg.setDescription('Average module-level CPU utilization over the\n                 last hour (percent).')
healthModuleCpu1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCpu1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthModuleCpu1DayAvg.setDescription('Maximum one-minute module-level CPU utilization over the\n                 last hour (percent).')
healthModuleChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleChassisId.setStatus('current')
if mibBuilder.loadTexts: healthModuleChassisId.setDescription('This is a configuraion for chassis id.\n\t         (0) if no chassis id been applied\n\t         (1..8) configure VC valid chassis id')
healthModuleCpuLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleCpuLatest.setStatus('current')
if mibBuilder.loadTexts: healthModuleCpuLatest.setDescription('Current CPU utilization (percent).')
healthModuleMemoryLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleMemoryLatest.setStatus('current')
if mibBuilder.loadTexts: healthModuleMemoryLatest.setDescription('Current memory utilization (percent).')
healthModuleRxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxLatest.setStatus('current')
if mibBuilder.loadTexts: healthModuleRxLatest.setDescription('Current input utilization (percent).')
healthModuleRxTxLatest = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthModuleRxTxLatest.setStatus('current')
if mibBuilder.loadTexts: healthModuleRxTxLatest.setDescription('Current i/o utilization (percent).')
healthPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2))
healthPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1), )
if mibBuilder.loadTexts: healthPortTable.setStatus('current')
if mibBuilder.loadTexts: healthPortTable.setDescription('A list of Physical Port health instances.')
healthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-HEALTH-MIB", "healthPortIfIndex"))
if mibBuilder.loadTexts: healthPortEntry.setStatus('current')
if mibBuilder.loadTexts: healthPortEntry.setDescription('A Physical Port health entry.')
healthPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: healthPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: healthPortIfIndex.setDescription('The ifIndex representing any physical port in\n                 the system.')
healthPortRx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRx1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRx1MinAvg.setDescription('Average port-level input utilization over the\n                 last minute (percent).')
healthPortRx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRx1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRx1HrAvg.setDescription('Average port-level input utilization over the\n                 last hour (percent).')
healthPortRx1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRx1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRx1DayAvg.setDescription('Maximum one-minute port-level input utilization over the\n                 last hour (percent).')
healthPortRxTx1MinAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTx1MinAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRxTx1MinAvg.setDescription('Average port-level i/o utilization over the\n                 last minute (percent).')
healthPortRxTx1HrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTx1HrAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRxTx1HrAvg.setDescription('Average port-level i/o utilization over the\n                 last hour (percent).')
healthPortRxTx1DayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthPortRxTx1DayAvg.setStatus('current')
if mibBuilder.loadTexts: healthPortRxTx1DayAvg.setDescription('Maximum one-minute port-level i/o utilization over the\n                 last hour (percent).')
healthControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 3))
healthSamplingInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthSamplingInterval.setStatus('current')
if mibBuilder.loadTexts: healthSamplingInterval.setDescription('Time interval between consecutive samples of resources.\n                  Units are seconds.  Legal values are:10,12,15,20,30.')
healthThreshInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4))
healthThreshRxLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshRxLimit.setStatus('current')
if mibBuilder.loadTexts: healthThreshRxLimit.setDescription('Device input threshold value.  Units are percent.')
healthThreshRxTxLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshRxTxLimit.setStatus('current')
if mibBuilder.loadTexts: healthThreshRxTxLimit.setDescription('Device input/output threshold value.  Units are percent.')
healthThreshMemoryLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshMemoryLimit.setStatus('current')
if mibBuilder.loadTexts: healthThreshMemoryLimit.setDescription('Device memory threshold value.  Units are percent.')
healthThreshCpuLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshCpuLimit.setStatus('current')
if mibBuilder.loadTexts: healthThreshCpuLimit.setDescription('Device Cpu threshold value.  Units are percent.')
healthThreshFlashLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: healthThreshFlashLimit.setStatus('current')
if mibBuilder.loadTexts: healthThreshFlashLimit.setDescription('Device Flash threshold value.  Units are percent.')
healthTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5))
healthMonRxStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelowThreshold", 1), ("noChange", 2), ("crossedAboveThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthMonRxStatus.setStatus('current')
if mibBuilder.loadTexts: healthMonRxStatus.setDescription('Rx threshold status.')
healthMonRxTxStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelowThreshold", 1), ("noChange", 2), ("crossedAboveThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthMonRxTxStatus.setStatus('current')
if mibBuilder.loadTexts: healthMonRxTxStatus.setDescription('RxTx threshold status.')
healthMonMemoryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelowThreshold", 1), ("noChange", 2), ("crossedAboveThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthMonMemoryStatus.setStatus('current')
if mibBuilder.loadTexts: healthMonMemoryStatus.setDescription('Memory threshold status.')
healthMonCpuStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelowThreshold", 1), ("noChange", 2), ("crossedAboveThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthMonCpuStatus.setStatus('current')
if mibBuilder.loadTexts: healthMonCpuStatus.setDescription('CPU threshold status.')
healthMonFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("crossedBelowThreshold", 1), ("noChange", 2), ("crossedAboveThreshold", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: healthMonFlashStatus.setStatus('current')
if mibBuilder.loadTexts: healthMonFlashStatus.setDescription('Flash threshold status.')
healthMonModuleTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 0, 1)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthModuleSlot"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonRxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonRxTxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonMemoryStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonCpuStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleChassisId"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleCpuLatest"))
if mibBuilder.loadTexts: healthMonModuleTrap.setStatus('current')
if mibBuilder.loadTexts: healthMonModuleTrap.setDescription('Module-level rising/falling threshold crossing trap.\n\t \tThis trap applies to NI slots.')
healthMonPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 0, 2)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthPortIfIndex"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonRxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonRxTxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleChassisId"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleSlot"))
if mibBuilder.loadTexts: healthMonPortTrap.setStatus('current')
if mibBuilder.loadTexts: healthMonPortTrap.setDescription('Port-level rising/falling threshold crossing trap.')
healthMonCmmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 0, 3)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthMonMemoryStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonCpuStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonFlashStatus"))
if mibBuilder.loadTexts: healthMonCmmTrap.setStatus('current')
if mibBuilder.loadTexts: healthMonCmmTrap.setDescription('Module-level rising/falling threshold crossing trap.\n\t \tThis trap applies to NI slots.')
alcatelIND1HealthMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthModuleGroup"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortGroup"), ("ALCATEL-IND1-HEALTH-MIB", "healthControlGroup"), ("ALCATEL-IND1-HEALTH-MIB", "healthThreshGroup"), ("ALCATEL-IND1-HEALTH-MIB", "healthTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1HealthMonitorMIBCompliance = alcatelIND1HealthMonitorMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HealthMonitorMIBCompliance.setDescription('Compliance statement for Health Monitoring.')
healthModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthModuleRx1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRx1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRx1DayAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRxTx1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRxTx1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRxTx1DayAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleMemory1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleMemory1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleMemory1DayAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleCpu1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleCpu1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleCpu1DayAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleChassisId"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleCpuLatest"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleMemoryLatest"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRxLatest"), ("ALCATEL-IND1-HEALTH-MIB", "healthModuleRxTxLatest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthModuleGroup = healthModuleGroup.setStatus('current')
if mibBuilder.loadTexts: healthModuleGroup.setDescription('Collection of slot-level health monitoring objects.')
healthPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthPortRx1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortRx1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortRx1DayAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortRxTx1MinAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortRxTx1HrAvg"), ("ALCATEL-IND1-HEALTH-MIB", "healthPortRxTx1DayAvg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthPortGroup = healthPortGroup.setStatus('current')
if mibBuilder.loadTexts: healthPortGroup.setDescription('Collection of port-level health monitoring objects.')
healthControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthSamplingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthControlGroup = healthControlGroup.setStatus('current')
if mibBuilder.loadTexts: healthControlGroup.setDescription('Collection of objects which control operation of resource utilization sampling.')
healthThreshGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthThreshRxLimit"), ("ALCATEL-IND1-HEALTH-MIB", "healthThreshRxTxLimit"), ("ALCATEL-IND1-HEALTH-MIB", "healthThreshMemoryLimit"), ("ALCATEL-IND1-HEALTH-MIB", "healthThreshCpuLimit"), ("ALCATEL-IND1-HEALTH-MIB", "healthThreshFlashLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthThreshGroup = healthThreshGroup.setStatus('current')
if mibBuilder.loadTexts: healthThreshGroup.setDescription('Collection of threshold objects.')
healthTrapObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthMonRxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonRxTxStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonMemoryStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonCpuStatus"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonFlashStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthTrapObjectsGroup = healthTrapObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: healthTrapObjectsGroup.setDescription('Collection of objects which appear only in traps.')
healthTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 16, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-HEALTH-MIB", "healthMonModuleTrap"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonPortTrap"), ("ALCATEL-IND1-HEALTH-MIB", "healthMonCmmTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    healthTrapsGroup = healthTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: healthTrapsGroup.setDescription('Collection of Traps for health monitoring.')
mibBuilder.exportSymbols("ALCATEL-IND1-HEALTH-MIB", healthModuleRxLatest=healthModuleRxLatest, healthModuleRx1HrAvg=healthModuleRx1HrAvg, healthPortRx1DayAvg=healthPortRx1DayAvg, healthPortRxTx1HrAvg=healthPortRxTx1HrAvg, healthModuleCpu1MinAvg=healthModuleCpu1MinAvg, healthThreshFlashLimit=healthThreshFlashLimit, healthThreshMemoryLimit=healthThreshMemoryLimit, healthThreshRxLimit=healthThreshRxLimit, healthModuleRxTx1HrAvg=healthModuleRxTx1HrAvg, alcatelIND1HealthMonitorMIB=alcatelIND1HealthMonitorMIB, alcatelIND1HealthMonitorMIBCompliance=alcatelIND1HealthMonitorMIBCompliance, healthPortRxTx1MinAvg=healthPortRxTx1MinAvg, healthPortGroup=healthPortGroup, healthMonModuleTrap=healthMonModuleTrap, healthThreshCpuLimit=healthThreshCpuLimit, healthModuleMemory1MinAvg=healthModuleMemory1MinAvg, healthMonPortTrap=healthMonPortTrap, healthMonCpuStatus=healthMonCpuStatus, healthModuleInfo=healthModuleInfo, healthModuleRxTx1DayAvg=healthModuleRxTx1DayAvg, alcatelIND1HealthMonitorMIBNotifications=alcatelIND1HealthMonitorMIBNotifications, healthModuleMemoryLatest=healthModuleMemoryLatest, healthThreshGroup=healthThreshGroup, PYSNMP_MODULE_ID=alcatelIND1HealthMonitorMIB, healthModuleRx1MinAvg=healthModuleRx1MinAvg, healthModuleRx1DayAvg=healthModuleRx1DayAvg, healthModuleMemory1DayAvg=healthModuleMemory1DayAvg, healthPortInfo=healthPortInfo, healthThreshRxTxLimit=healthThreshRxTxLimit, healthModuleCpu1HrAvg=healthModuleCpu1HrAvg, healthMonRxStatus=healthMonRxStatus, healthMonMemoryStatus=healthMonMemoryStatus, healthModuleMemory1HrAvg=healthModuleMemory1HrAvg, healthTrapsGroup=healthTrapsGroup, alcatelIND1HealthMonitorMIBConformance=alcatelIND1HealthMonitorMIBConformance, healthModuleChassisId=healthModuleChassisId, healthPortRxTx1DayAvg=healthPortRxTx1DayAvg, healthSamplingInterval=healthSamplingInterval, alcatelIND1HealthMonitorMIBGroups=alcatelIND1HealthMonitorMIBGroups, healthModuleCpu1DayAvg=healthModuleCpu1DayAvg, healthTrapInfo=healthTrapInfo, healthModuleGroup=healthModuleGroup, healthMonRxTxStatus=healthMonRxTxStatus, healthTrapObjectsGroup=healthTrapObjectsGroup, healthModuleCpuLatest=healthModuleCpuLatest, healthModuleRxTx1MinAvg=healthModuleRxTx1MinAvg, healthModuleEntry=healthModuleEntry, healthPortRx1HrAvg=healthPortRx1HrAvg, healthControlGroup=healthControlGroup, alcatelIND1HealthMonitorMIBCompliances=alcatelIND1HealthMonitorMIBCompliances, healthModuleRxTxLatest=healthModuleRxTxLatest, healthPortIfIndex=healthPortIfIndex, healthPortRx1MinAvg=healthPortRx1MinAvg, healthThreshInfo=healthThreshInfo, healthMonFlashStatus=healthMonFlashStatus, healthMonCmmTrap=healthMonCmmTrap, healthPortTable=healthPortTable, healthPortEntry=healthPortEntry, alcatelIND1HealthMonitorMIBObjects=alcatelIND1HealthMonitorMIBObjects, healthModuleTable=healthModuleTable, healthModuleSlot=healthModuleSlot, healthControlInfo=healthControlInfo)
