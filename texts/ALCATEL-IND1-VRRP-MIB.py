#
# PySNMP MIB module ALCATEL-IND1-VRRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-VRRP-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:12 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Vrrp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Vrrp")
alaVrrp3OperVrId, alaVrrp3OperIpVersion, alaVrrp3OperEntry = mibBuilder.importSymbols("ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVrId", "alaVrrp3OperIpVersion", "alaVrrp3OperEntry")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Gauge32, Unsigned32, Counter32, Counter64, Bits, ObjectIdentity, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Unsigned32", "Counter32", "Counter64", "Bits", "ObjectIdentity", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
vrrpOperVrId, vrrpOperEntry = mibBuilder.importSymbols("VRRP-MIB", "vrrpOperVrId", "vrrpOperEntry")
alcatelIND1VRRPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1))
alcatelIND1VRRPMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1VRRPMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1VRRPMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1VRRPMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1VRRPMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1VRRPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             Propietary VRRP MIB definitions\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special,\n         or consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2007 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1VRRPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1))
class AlaVrTrackId(TextualConvention, Integer32):
    description = 'A number that serves to uniquely identify a tracking policy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class AlaVrGroupId(TextualConvention, Integer32):
    description = 'A number that serves to uniquely identify a virtual router group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

alaVRRPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 1))
alaVrrpTracking = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2))
alaVrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3))
alaVRRPv2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4))
alaVrrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5))
alaVRRPStartDelay = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPStartDelay.setStatus('current')
if mibBuilder.loadTexts: alaVRRPStartDelay.setDescription("Once VRRP's initial configuration is complete at startup, this\n        object specifies the number of seconds VRRP will delay before\n        leaving the initialize state.  This delay is to allow external\n        protocols (spanning tree, OSPF, etc.) time to converge so that\n        when a VRRP virtual router becomes master it will be able to\n        forward traffic.")
alaVrrpBfdStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVrrpBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpBfdStatus.setDescription('Enable or disable the BFD for VRRP.')
alaVRRPDefaultInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPDefaultInterval.setStatus('current')
if mibBuilder.loadTexts: alaVRRPDefaultInterval.setDescription('The VRRP Router default time interval, in seconds, between\n         sending advertisement messages.')
alaVRRPDefaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: alaVRRPDefaultPriority.setDescription('This object specifies the VRRP Router default priority to be used for the\n         virtual router master election process. Higher values imply\n         higher priority.')
alaVRRPDefaultPreemptMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPDefaultPreemptMode.setStatus('current')
if mibBuilder.loadTexts: alaVRRPDefaultPreemptMode.setDescription('The VRRP Router default preempt mode. Controls whether a higher\n          priority virtual router will preempt a lower priority master.')
alaVRRPAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allEnable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVRRPAdminState.setDescription('This object is used to force a change in to the vrrpOperAdminState\n         of virtual routers in the vrrpOperTable.  Setting a value of allEnable will\n         cause the vrrpOperAdminState of each entry in the table to be set to up.\n         Setting a value of enable will set the vrrpOperAdminState to up but\n         only for the set of virtual routers whose vrrpOperAdminState was down\n         by default (as occurs when the virtual router instance is created) or due\n         to a previous set command of the alaVRRPAdminState to disable.\n         Setting a value of disable will cause the vrrpOperAdminState of each\n         entry in the table to be set to down.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVRRPSetParam = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("interval", 3), ("priority", 4), ("preempt", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPSetParam.setStatus('current')
if mibBuilder.loadTexts: alaVRRPSetParam.setDescription('This object is used to force the virtual routers in the vrrpOperTable\n         to revert to the default parameter values specified in\n         alaVRRPDefaultInterval,  alaVRRPDefaultPriority, and\n         alaVRRPDefaultPreemptMode.  Unless alaVRRPOverride is set to true only\n         virtual routers previously configured with default parameter values\n         are modified.  Parameters can be modified individually with the\n         interval, priority, and preempt values, or collectively with the all\n         value.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVRRPOverride = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaVRRPOverride.setStatus('current')
if mibBuilder.loadTexts: alaVRRPOverride.setDescription('This object is used in combination with the alaVRRPSetParam object\n         to force all virtual routers in the vrrpOperTable to revert to the default\n         values specified in alaVRRPDefaultInterval,  alaVRRPDefaultPriority,\n         and alaVRRPDefaultPreemptMode.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVrrpTrackTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaVrrpTrackTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackTable.setDescription("VRRP Tracking Policy table, which consists of a sequence\n        (i.e., one or more conceptual rows) of 'vrrpTrackEntry' items.")
alaVrrpTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackId"))
if mibBuilder.loadTexts: alaVrrpTrackEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntry.setDescription("An entry in the vrrpTrackTable containing the operational\n          characteristics of a VRRP tracking policy.\n\n          Rows in the table cannot be modified unless the value\n          of `vrrpTrackAdminState' is `disabled'.")
alaVrrpTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 1), AlaVrTrackId())
if mibBuilder.loadTexts: alaVrrpTrackId.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackId.setDescription('This object contains the Tracking Policy Identifier (TRACKID).')
alaVrrpTrackState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrpTrackState.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackState.setDescription('The conditional state of the tracking policy entity.')
alaVrrpTrackAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackAdminState.setDescription('This object will enable/disable the tracking policy function.')
alaVrrpTrackEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("port", 2), ("ipaddress", 3), ("interface", 4), ("ipv6Interface", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrpTrackEntityType.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityType.setDescription('This object specifies the tracking policy entity type\n          currently in use.')
alaVrrpTrackEntityPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackEntityPort.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityPort.setDescription('This object contains the Tracking Policy Entity. A port\n         ifIndex or 0 if not significant.\n\n         The alaVrrpTrackEntityPort, alaVrrpTrackEntityInterface,\n         alaVrrpTrackEntityIpv6Interface, and alaVrrpTrackEntityIpAddr\n         are mutually exclusive of one another. The last one set is\n         the valid one and identifies the entity type.')
alaVrrpTrackPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackPriority.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackPriority.setDescription("This object specifies the value by which the priority of virtual\n        routers associated with the tracking policy will be decremented\n        when the tracked entity's operational state transitions from up to\n        down, or will be incremented when the tracked entity's operational\n        state transitions from down to up.")
alaVrrpTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackRowStatus.setDescription("The row status variable, used in accordance to installation\n         and removal conventions for conceptual rows.\n\n         To create a row in this table, a manager sets this object\n         to either createAndGo(4) or createAndWait(5). Until instances\n         of all corresponding columns are appropriately configured,\n         the value of the corresponding instance of the\n         `vrrpTrackRowStatus' column will be read as notReady(3).\n\n         In particular, a newly created row cannot be made active(1)\n         until (minimally) the corresponding instances of\n         `vrrpTrackId', and either one of : alaVrrpTrackEntityPort,\n         or alaVrrpTrackEntityInterface\n         have been set.")
alaVrrpTrackEntityInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackEntityInterface.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityInterface.setDescription('This object contains the Tracking Policy Entity. An interface.\n\n         The alaVrrpTrackEntityPort, alaVrrpTrackEntityInterface,\n         alaVrrpTrackEntityIpv6Interface, and alaVrrpTrackEntityIpAddr\n         are mutually exclusive of one another. The last one set is\n         the valid one and identifies the entity type.')
alaVrrpTrackEntityIpv6Interface = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackEntityIpv6Interface.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityIpv6Interface.setDescription('This object contains the Tracking Policy Entity. An Ipv6\n         interface.\n\n         The alaVrrpTrackEntityPort, alaVrrpTrackEntityInterface,\n         alaVrrpTrackEntityIpv6Interface, and alaVrrpTrackEntityIpAddr\n         are mutually exclusive of one another. The last one set is\n         the valid one and identifies the entity type.')
alaVrrpTrackEntityIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 12), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackEntityIpAddrType.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityIpAddrType.setDescription('This object contains the Tracking Policy Entity IP Address\n         type.')
alaVrrpTrackEntityIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 13), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackEntityIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackEntityIpAddr.setDescription('This object contains the Tracking Policy Entity. An\n         IPv4 for or IPv6 Address based on alaVrrpTrackEntityIpAddrType.\n\n         The alaVrrpTrackEntityPort, alaVrrpTrackEntityInterface,\n         alaVrrpTrackEntityIpv6Interface, and alaVrrpTrackEntityIpAddr\n         are mutually exclusive of one another. The last one set is\n         the valid one and identifies the entity type.')
alaVrrpTrackBfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpTrackBfdStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackBfdStatus.setDescription('Enables BFD for a VRRP track.')
alaVrrpAssoTrackTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alaVrrpAssoTrackTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoTrackTable.setDescription('The table of tracking policies associated with this virtual router.')
alaVrrpAssoTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"), (0, "ALCATEL-IND1-VRRP-MIB", "alaVrrpAssoTrackId"))
if mibBuilder.loadTexts: alaVrrpAssoTrackEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoTrackEntry.setDescription("An entry in the table contains a tracking policy id that is\n        associated with a virtual router. The number of rows for\n        a given ifIndex and VrId will equal the number of tracking\n        policies associated with the virtual router (equivalent to alaVrrpTrackCount').\n        Rows in the table cannot be modified unless the value of\n        `vrrpOperAdminState' is `disabled' and the 'vrrpOperState' has transitioned to `initialize'.")
alaVrrpAssoTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 2, 1, 1), AlaVrTrackId())
if mibBuilder.loadTexts: alaVrrpAssoTrackId.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoTrackId.setDescription('The identifier of the tracking policy the virtual router is\n         responsible for monitoring.')
alaVrrpAssoTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpAssoTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoTrackRowStatus.setDescription('The row status variable, used according to installation\n         and removal conventions for conceptual rows. Setting this\n         object to active(1) or createAndGo(4) results in the\n         addition of an associated tracking policy for a virtual router.\n         Destroying the entry or setting it to notInService(2)\n         removes the associated tracking policy from the virtual router.\n         The use of other values is implementation-dependent.')
alaVrrpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaVrrpGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupTable.setDescription("VRRP Group table, which consists of a sequence (i.e., one\n            or more conceptual rows) of 'vrrpGroupEntry' items.")
alaVrrpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupId"))
if mibBuilder.loadTexts: alaVrrpGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupEntry.setDescription('An entry in the vrrpGroupTable containing the\n          characteristics of a VRRP group.')
alaVrrpGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 1), AlaVrGroupId())
if mibBuilder.loadTexts: alaVrrpGroupId.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupId.setDescription('This object contains the Tracking Policy Identifier (GROUPID).')
alaVrrpGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupInterval.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupInterval.setDescription('The VRRP Group time interval, in seconds, between\n         sending advertisement messages.')
alaVrrpGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupPriority.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupPriority.setDescription('This object specifies the VRRP Group priority to be used for the\n         virtual router master election process. Higher values imply\n         higher priority.')
alaVrrpGroupPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupPreemptMode.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupPreemptMode.setDescription('The VRRP Group preempt mode. Controls whether a higher\n          priority virtual router will preempt a lower priority master.')
alaVrrpGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allEnable", 1), ("enable", 2), ("disable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupAdminState.setDescription('This object is used to force a change in to the vrrpOperAdminState\n         of virtual routers in the corresponding alaVRRPAssoGroupTable\n         entry.  Setting a value of allEnable will cause the vrrpOperAdminState\n         of each vrrpOperEntry to be set to up.  Setting a value of enable will\n         set the vrrpOperAdminState to up but only for the set of virtual routers\n         in the group whose vrrpOperAdminState was down by default (as\n         occurs when the virtual router instance is created) or due to a previous\n         set command of the alaVrrpGroupAdminState or alaVRRPAdminState\n         to disable.  Setting a value of disable will cause the vrrpOperAdminState\n        of each entry in the table to be set to down.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVrrpGroupSetParam = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("interval", 3), ("priority", 4), ("preempt", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupSetParam.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupSetParam.setDescription('This object is used to force the virtual routers in the corresponding\n         alaVRRPAssoGroupTable to revert to the group parameter values\n         specified in alaVrrpGroupInterval,  alaVrrpGroupPriority,\n         and alaVrrpGroupPreemptMode.  Unless alaVrrpGroupOverride is set to\n         true only virtual routers previously configured with default\n         or group parameter values are modified.  Parameters can be modified\n         individually with the interval, priority, and preempt values, or\n         collectively with the all value.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVrrpGroupOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupOverride.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupOverride.setDescription('This object is used in combination with the alaVrrpGroupSetParam object\n         to force all virtual routers in the corresponding alaVrrpAssoGroupTable\n         to revert to the group parameter values specified in alaVrrpGroupInterval,\n         alaVrrpGroupPriority, and alaVrrpGroupPreemptMode.\n\n         This object is of little value when read but will return the last value\n         to which it was set.')
alaVrrpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupRowStatus.setDescription("The row status variable, used in accordance to installation\n         and removal conventions for conceptual rows.\n\n         To create a row in this table, a manager sets this object\n         to either createAndGo(4) or createAndWait(5). Until instances\n         of all corresponding columns are appropriately configured,\n         the value of the corresponding instance of the\n         `alaVrrpGroupRowStatus' column will be read as notReady(3).\n\n         In particular, a newly created row cannot be made active(1)\n         until (minimally) the corresponding instance of `alaVrrpGroupId'\n         has been set.")
alaVrrpAssoGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 2), )
if mibBuilder.loadTexts: alaVrrpAssoGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoGroupTable.setDescription('The table of virtual routers associated with this group.')
alaVrrpAssoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupId"), (0, "IF-MIB", "ifIndex"), (0, "VRRP-MIB", "vrrpOperVrId"))
if mibBuilder.loadTexts: alaVrrpAssoGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoGroupEntry.setDescription('An entry in the table contains a virtual router id that is\n        associated with a virtual router group.')
alaVrrpAssoGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 5, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrpAssoGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoGroupRowStatus.setDescription('The row status variable, used according to installation\n         and removal conventions for conceptual rows. Setting this\n         object to active(1) or createAndGo(4) results in the\n         addition of an associated virtual router for a group.\n         Destroying the entry or setting it to notInService(2)\n         removes the associated virtual router from the group.\n         The use of other values is implementation-dependent.')
alaVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaVrrpOperTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrpOperTable.setDescription('Table of virtual router configuration info.')
alaVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 1, 1), )
vrrpOperEntry.registerAugmentions(("ALCATEL-IND1-VRRP-MIB", "alaVrrpOperEntry"))
alaVrrpOperEntry.setIndexNames(*vrrpOperEntry.getIndexNames())
if mibBuilder.loadTexts: alaVrrpOperEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrpOperEntry.setDescription('An entry in the table, config information\n         about a given virtual router.')
alaVrrpCurrentPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrpCurrentPriority.setStatus('current')
if mibBuilder.loadTexts: alaVrrpCurrentPriority.setDescription("This object specifies the priority currently used for the\n         virtual router master election process. Higher values imply\n         higher priority.\n\n         A priority of '0', although not settable, is sent by\n         the master router to indicate that this router has ceased\n         to participate in VRRP and a backup virtual router should\n         transition  to become a new master.\n\n         A priority of 255 is used for the router that owns the\n         associated IP address(es).")
alaVrrpTrackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrpTrackCount.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackCount.setDescription('The number of tracking policies associated with a virtual router.')
alaVrrpGroupIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrpGroupIdent.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupIdent.setDescription('The VRRP group to which this virtual router belongs.  A value of\n          zero indicates that the virtual router is not affiliated with any group.')
alaVrrp3AssoTrackTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 3), )
if mibBuilder.loadTexts: alaVrrp3AssoTrackTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoTrackTable.setDescription('The table of tracking policies associated with this virtual router.')
alaVrrp3AssoTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperIpVersion"), (0, "ALCATEL-IND1-VRRP3-MIB", "alaVrrp3OperVrId"), (0, "IF-MIB", "ifIndex"), (0, "ALCATEL-IND1-VRRP-MIB", "alaVrrp3AssoTrackId"))
if mibBuilder.loadTexts: alaVrrp3AssoTrackEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoTrackEntry.setDescription("An entry in the table contains a tracking policy id that is\n        associated with a virtual router. The number of rows for\n        a given IP Version, VrId, and ifIndex will equal the number of tracking\n        policies associated with the virtual router (equivalent to alaVrrp3TrackCount').\n        Rows in the table cannot be modified unless the value of\n        `alaVrrp3OperAdminState' is `disabled' and the 'alaVrrp3OperState' has transitioned to `initialize'.")
alaVrrp3AssoTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 3, 1, 1), AlaVrTrackId())
if mibBuilder.loadTexts: alaVrrp3AssoTrackId.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoTrackId.setDescription('The identifier of the tracking policy the virtual router is\n         responsible for monitoring.')
alaVrrp3AssoTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaVrrp3AssoTrackRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoTrackRowStatus.setDescription('The row status variable, used according to installation\n         and removal conventions for conceptual rows. Setting this\n         object to active(1) or createAndGo(4) results in the\n         addition of an associated tracking policy for a virtual router.\n         Destroying the entry or setting it to notInService(2)\n         removes the associated tracking policy from the virtual router.\n         The use of other values is implementation-dependent.')
alaVrrp3OperExTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 2), )
if mibBuilder.loadTexts: alaVrrp3OperExTable.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperExTable.setDescription('Table of virtual router configuration info.')
alaVrrp3OperExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 2, 1), )
alaVrrp3OperEntry.registerAugmentions(("ALCATEL-IND1-VRRP-MIB", "alaVrrp3OperExEntry"))
alaVrrp3OperExEntry.setIndexNames(*alaVrrp3OperEntry.getIndexNames())
if mibBuilder.loadTexts: alaVrrp3OperExEntry.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperExEntry.setDescription('An entry in the table, config information\n         about a given virtual router.')
alaVrrp3CurrentPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3CurrentPriority.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3CurrentPriority.setDescription("This object specifies the priority currently used for the\n         virtual router master election process. Higher values imply\n         higher priority.\n\n         A priority of '0', although not settable, is sent by\n         the master router to indicate that this router has ceased\n         to participate in VRRP and a backup virtual router should\n         transition  to become a new master.\n\n         A priority of 255 is used for the router that owns the\n         associated IP address(es).")
alaVrrp3TrackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3TrackCount.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3TrackCount.setDescription('The number of tracking policies associated with a virtual router.')
alaVrrp3GroupIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVrrp3GroupIdent.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3GroupIdent.setDescription('The VRRP group to which this virtual router belongs.  A value of\n          zero indicates that the virtual router is not affiliated with any group.')
alcatelIND1VRRPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2))
alcatelIND1VRRPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 1))
alcatelIND1VRRPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2))
alaVRRPCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVRRPConfigGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPv2ConfigGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrp3AssoTrackTableGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrp3OperExEntryGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpAssoGroupEntryGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpOperEntryGroup"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVRRPCompliance = alaVRRPCompliance.setStatus('current')
if mibBuilder.loadTexts: alaVRRPCompliance.setDescription('The compliance statement for switches with Alcatel VRRP and\n        implementing ALCATEL-IND1-VRRP-MIB.')
alaVRRPConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVRRPStartDelay"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpBfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVRRPConfigGroup = alaVRRPConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaVRRPConfigGroup.setDescription('A collection of objects to support management of Alcatel VRRP.')
alaVRRPv2ConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVRRPAdminState"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPDefaultInterval"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPDefaultPreemptMode"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPDefaultPriority"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPOverride"), ("ALCATEL-IND1-VRRP-MIB", "alaVRRPSetParam"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVRRPv2ConfigGroup = alaVRRPv2ConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaVRRPv2ConfigGroup.setDescription('A collection of objects to support management of Alcatel VRRP')
alaVrrp3AssoTrackTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrp3AssoTrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3AssoTrackTableGroup = alaVrrp3AssoTrackTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3AssoTrackTableGroup.setDescription('The table of tracking policies associated with this virtual router.')
alaVrrp3OperExEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrp3CurrentPriority"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrp3GroupIdent"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrp3TrackCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrp3OperExEntryGroup = alaVrrp3OperExEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrp3OperExEntryGroup.setDescription('Table of virtual router configuration info.')
alaVrrpAssoGroupEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrpAssoGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrpAssoGroupEntryGroup = alaVrrpAssoGroupEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoGroupEntryGroup.setDescription('The table of virtual routers associated with this group.')
alaVrrpAssoTrackEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrpAssoTrackRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrpAssoTrackEntryGroup = alaVrrpAssoTrackEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrpAssoTrackEntryGroup.setDescription('The table of tracking policies associated with this virtual router.')
alaVrrpOperEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrpCurrentPriority"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackCount"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupIdent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrpOperEntryGroup = alaVrrpOperEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrpOperEntryGroup.setDescription('Config information about a given virtual router.')
alaVrrpGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupInterval"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupPriority"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupPreemptMode"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupAdminState"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupSetParam"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupOverride"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrpGroupTableGroup = alaVrrpGroupTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrpGroupTableGroup.setDescription('VRRP Group table objects with attributes of VRRP Group.')
alaVrrpTrackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 28, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackState"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackAdminState"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityType"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityPort"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackPriority"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackRowStatus"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityInterface"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityIpv6Interface"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityIpAddrType"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackEntityIpAddr"), ("ALCATEL-IND1-VRRP-MIB", "alaVrrpTrackBfdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVrrpTrackGroup = alaVrrpTrackGroup.setStatus('current')
if mibBuilder.loadTexts: alaVrrpTrackGroup.setDescription('VRRP Tracking Policy objects.')
mibBuilder.exportSymbols("ALCATEL-IND1-VRRP-MIB", alaVrrp3AssoTrackId=alaVrrp3AssoTrackId, alaVrrpTrackEntityPort=alaVrrpTrackEntityPort, alaVrrpAssoGroupRowStatus=alaVrrpAssoGroupRowStatus, alaVrrp3AssoTrackTable=alaVrrp3AssoTrackTable, alaVrrpAssoGroupTable=alaVrrpAssoGroupTable, alaVrrpTrackRowStatus=alaVrrpTrackRowStatus, alaVrrpTrackId=alaVrrpTrackId, alaVrrpAssoTrackTable=alaVrrpAssoTrackTable, alaVrrpAssoTrackEntry=alaVrrpAssoTrackEntry, alaVrrp3AssoTrackRowStatus=alaVrrp3AssoTrackRowStatus, alaVrrpCurrentPriority=alaVrrpCurrentPriority, alaVrrpTrackState=alaVrrpTrackState, alaVrrpTrackEntityInterface=alaVrrpTrackEntityInterface, alaVrrpAssoTrackId=alaVrrpAssoTrackId, alaVrrpGroupEntry=alaVrrpGroupEntry, AlaVrGroupId=AlaVrGroupId, alaVrrpTrackEntityType=alaVrrpTrackEntityType, alaVRRPStartDelay=alaVRRPStartDelay, alcatelIND1VRRPMIBConformance=alcatelIND1VRRPMIBConformance, alaVrrpGroup=alaVrrpGroup, alaVrrpAssoGroupEntryGroup=alaVrrpAssoGroupEntryGroup, alaVrrpTrackGroup=alaVrrpTrackGroup, alaVrrp3GroupIdent=alaVrrp3GroupIdent, PYSNMP_MODULE_ID=alcatelIND1VRRPMIB, alaVRRPConfigGroup=alaVRRPConfigGroup, alaVrrpTrackCount=alaVrrpTrackCount, alaVrrpOperEntryGroup=alaVrrpOperEntryGroup, alcatelIND1VRRPMIBObjects=alcatelIND1VRRPMIBObjects, alaVrrp3AssoTrackEntry=alaVrrp3AssoTrackEntry, alaVrrpAssoTrackEntryGroup=alaVrrpAssoTrackEntryGroup, alaVrrpGroupId=alaVrrpGroupId, alaVrrp3TrackCount=alaVrrp3TrackCount, alaVRRPDefaultPreemptMode=alaVRRPDefaultPreemptMode, alcatelIND1VRRPMIBGroups=alcatelIND1VRRPMIBGroups, alaVrrpGroupPriority=alaVrrpGroupPriority, alaVrrpGroupPreemptMode=alaVrrpGroupPreemptMode, alaVrrpAssoTrackRowStatus=alaVrrpAssoTrackRowStatus, alaVrrpGroupIdent=alaVrrpGroupIdent, alaVrrpGroupSetParam=alaVrrpGroupSetParam, alaVrrpGroupInterval=alaVrrpGroupInterval, alaVRRPv2ConfigGroup=alaVRRPv2ConfigGroup, alaVrrpTrackBfdStatus=alaVrrpTrackBfdStatus, alaVRRPv2Config=alaVRRPv2Config, alaVrrp3CurrentPriority=alaVrrp3CurrentPriority, alaVRRPDefaultInterval=alaVRRPDefaultInterval, AlaVrTrackId=AlaVrTrackId, alaVrrpTrackEntityIpAddrType=alaVrrpTrackEntityIpAddrType, alaVrrpGroupTable=alaVrrpGroupTable, alaVrrpOperTable=alaVrrpOperTable, alaVrrpGroupRowStatus=alaVrrpGroupRowStatus, alaVrrpTrackEntityIpv6Interface=alaVrrpTrackEntityIpv6Interface, alaVrrp3OperExEntry=alaVrrp3OperExEntry, alaVRRPConfig=alaVRRPConfig, alaVRRPAdminState=alaVRRPAdminState, alaVRRPSetParam=alaVRRPSetParam, alcatelIND1VRRPMIBCompliances=alcatelIND1VRRPMIBCompliances, alaVrrp3AssoTrackTableGroup=alaVrrp3AssoTrackTableGroup, alaVrrp3OperExEntryGroup=alaVrrp3OperExEntryGroup, alaVrrpTrackPriority=alaVrrpTrackPriority, alaVrrpTracking=alaVrrpTracking, alaVRRPDefaultPriority=alaVRRPDefaultPriority, alaVrrpGroupAdminState=alaVrrpGroupAdminState, alaVrrpOperEntry=alaVrrpOperEntry, alaVrrpGroupTableGroup=alaVrrpGroupTableGroup, alcatelIND1VRRPMIB=alcatelIND1VRRPMIB, alaVrrpBfdStatus=alaVrrpBfdStatus, alaVRRPOverride=alaVRRPOverride, alaVrrpTrackAdminState=alaVrrpTrackAdminState, alaVrrpOperations=alaVrrpOperations, alaVrrpGroupOverride=alaVrrpGroupOverride, alaVrrpTrackEntry=alaVrrpTrackEntry, alaVrrp3OperExTable=alaVrrp3OperExTable, alaVrrpTrackEntityIpAddr=alaVrrpTrackEntityIpAddr, alaVrrpAssoGroupEntry=alaVrrpAssoGroupEntry, alaVrrpTrackTable=alaVrrpTrackTable, alaVRRPCompliance=alaVRRPCompliance)
