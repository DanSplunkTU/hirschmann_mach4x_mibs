#
# PySNMP MIB module ALCATEL-IND1-MULTI-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-MULTI-CHASSIS-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 15:33:31 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1MultiChassisManager, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1MultiChassisManager")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibIdentifier, Unsigned32, iso, Counter32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Integer32, ModuleIdentity, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Unsigned32", "iso", "Counter32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32")
TruthValue, RowStatus, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "TextualConvention", "DisplayString")
alcatelIND1MultiChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1))
alcatelIND1MultiChassisMIB.setRevisions(('2009-11-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setRevisionsDescriptions(('Addressing discrepancies with Alcatel Standard.',))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setLastUpdated('200911100000Z')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        etwork Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the Chassis Supervision\n        Chassis MIB\n        for managing physical chassis objects not covered in the IETF\n        Entity MIB (rfc 2737).\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1MultiChassisMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBNotifications.setDescription('Branch For Multi-Chassis manager MIB\n            Subsystem Managed Objects.')
alcatelIND1MultiChassisMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBObjects.setDescription('Branch For Multi-Chassis manager MIB\n            Subsystem Managed Objects.')
alcatelIND1MultiChassisMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBConformance.setDescription('Branch For Chassis Supervision Multiple Chassis MIB\n            Subsystem Conformance Information.')
alcatelIND1MultiChassisMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBGroups.setDescription('Branch For Chassis Supervision Multiple Chassis MIB\n            Subsystem Units Of Conformance.')
alcatelIND1MultiChassisMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBCompliances.setDescription('Branch For Chassis Supervision Multiple Chassis MIB\n            Subsystem Compliance Statements.')
class MultiChassisId(TextualConvention, Integer32):
    description = 'Multiple Chassis identifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

class MultiChassisLinkIfIndex(TextualConvention, Integer32):
    description = 'Virtual Fabric Link Id.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(40000128))
    namedValues = NamedValues(("link0", 40000128))

class MultiChassisConsistency(TextualConvention, Integer32):
    description = 'Multi-chassis parameter consistency status. \n                         inconsis(0): able to compare but not consistent \n                         consis(1): able to compare and consistent\n                         na(2): not able to compare since peer chassis is not connected yet  \n                         disabeled(3):  not able to compare because of standalone mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("inconsistent", 0), ("consistent", 1), ("na", 2), ("disabled", 3))

class MultiChassisLocaleType(TextualConvention, Integer32):
    description = 'Multiple Chassis locale type identifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("local", 1), ("peer", 2))

class MultiChassisGroup(TextualConvention, Integer32):
    description = 'Multiple Chassis group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class MultiChassisType(TextualConvention, Integer32):
    description = 'Virtual-chassis chassis type: \n                        invalid(0): Only support Rushmore and Tor for now\n                        rushmore(1): OS10k\n                        tor(2): OS6900\n                         '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("rushmore", 1), ("tor", 2))

multiChassisConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1))
multiChassisConfigChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 1), MultiChassisId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigChassisId.setStatus('current')
if mibBuilder.loadTexts: multiChassisConfigChassisId.setDescription('Chassis identifier globally unique within a multi-chassis  domain,\n         which is a set of two chassis configured to operate together\n         providing multi-chassis services. When the value of this object\n         is equal to 0, the chassis operates in stand-alone mode, whereas\n         when the value of this object is equal to 1 or 2 the chassis is\n         capable of operating in a multi-chassis system.')
multiChassisConfigHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: multiChassisConfigHelloInterval.setDescription('Time interval, in seconds, at which hello messages will be sent to the peer.')
multiChassisConfigIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(4094)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigIpcVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisConfigIpcVlan.setDescription('VLAN used for IPC communication')
multiChassisConfigChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 1, 4), MultiChassisGroup()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisConfigChassisGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisConfigChassisGroup.setDescription('Multi-chassis chassis group configuration')
multiChassisOperation = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2))
multiChassisOperChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisId.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperChassisId.setDescription('Chassis identifier globally unique within a multi-chassis  domain,\n         which is a set of two chassis configured to operate together\n         providing multi-chassis services. When the value of this object\n         is equal to 0, the chassis operates in stand-alone mode, whereas\n         when the value of this object is equal to 1 or 2 the chassis is\n         capable of operating in a multi-chassis system.')
multiChassisOperChassisRole = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unassigned", 0), ("primary", 1), ("secondary", 2), ("inconsistent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisRole.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperChassisRole.setDescription('Multi-Chassis chassis role')
multiChassisOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("up", 1), ("inconsistent", 2), ("standalone", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperStatus.setDescription('Operational status of the multi-chassis feature as follows:\n                - up:   the chassis is running in multi-chassis mode and\n                        this feature is operational.\n                - down: the chassis is running in multi-chassis mode, but\n                        this feature is not operational. By default,\n                        a chassis running in multi-chassis mode will be\n                        in this state initially.\n                - inconsistent: the chassis is running in multi-chassis\n                        mode, but this feature is in a suspended state due\n                        to inconsistencies in one or more of the global\n                        mandatory consistency parameters.\n                - standalone: the chassis is running in stand-alone mode\n                        wherein the multi-chassis feature is not operational.')
multiChassisOperHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperHelloInterval.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperHelloInterval.setDescription('Time interval, in seconds, at which hello messages will be sent to the peer.')
multiChassisOperIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperIpcVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperIpcVlan.setDescription('VLAN used for IPC communication')
multiChassisOperChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 6), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperChassisGroup.setDescription('Multi-chassis operational chassis group')
multiChassisOperChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 2, 7), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisOperChassisType.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperChassisType.setDescription('Multi-chassis operational chassis type')
multiChassisLinkTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3), )
if mibBuilder.loadTexts: multiChassisLinkTable.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkTable.setDescription('Multiple Chassis Virtual Fabric Link Table')
multiChassisLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkIfIndex"))
if mibBuilder.loadTexts: multiChassisLinkEntry.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkEntry.setDescription('Multiple Chassis Virtual Fabric Link Table Entry')
multiChassisLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 1), MultiChassisLinkIfIndex())
if mibBuilder.loadTexts: multiChassisLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkIfIndex.setDescription('Virtual Fabric Link Interface IfIndex')
multiChassisLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkAdminStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkAdminStatus.setDescription('Virtual Fabric Link Admin Status')
multiChassisLinkOperDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkOperDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkOperDefaultVlan.setDescription('Virtual Fabric Link default vlan')
multiChassisLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkOperStatus.setDescription('Virtual Fabric Link Operational Status')
multiChassisLinkPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkPrimaryPort.setDescription('Virtual Fabric Link primary Port ifindex')
multiChassisLinkActivePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkActivePortNum.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkActivePortNum.setDescription('Number of active member ports of participating on the Virtual Fabric Link.')
multiChassisLinkConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkConfigPortNum.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkConfigPortNum.setDescription('Number of ports configured as members of the Virtual Fabric Link.')
multiChassisLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkRowStatus.setDescription('Virtual Fabric Link RowStatus for creationh and deletion')
multiChassisLinkMemberPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4), )
if mibBuilder.loadTexts: multiChassisLinkMemberPortTable.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortTable.setDescription('Virtual Fabric Link Member Port Table.')
multiChassisLinkMemberPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortLinkIfIndex"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortIfindex"))
if mibBuilder.loadTexts: multiChassisLinkMemberPortEntry.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortEntry.setDescription('Virtual Fabric Link Member Port Table Entry.')
multiChassisLinkMemberPortLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 1), MultiChassisLinkIfIndex())
if mibBuilder.loadTexts: multiChassisLinkMemberPortLinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortLinkIfIndex.setDescription('Virtual Fabric Link Interface IfIndex')
multiChassisLinkMemberPortIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkMemberPortIfindex.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortIfindex.setDescription('Virtual Fabric Link Member Port ifIndex.')
multiChassisLinkMemberPortIsPrimay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkMemberPortIsPrimay.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortIsPrimay.setDescription('To determine if this Virtual Fabric Link Member Port is primary or not')
multiChassisLinkMemberOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkMemberOperStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberOperStatus.setDescription('Virtual Fabric Link Member Port operational status')
multiChassisLinkMemberPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: multiChassisLinkMemberPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortRowStatus.setDescription('Virtual Fabric Link Member Port RowStatus for creation and deletion')
multiChassisLoopDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5))
multiChassisLoopDetectionAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionAdminStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionAdminStatus.setDescription('Enable/disable multi-chassis loop detection')
multiChassisLoopDetectionTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitInterval.setDescription('multi-chassis loop detection transmit-interval ')
multiChassisLoopDetectionTransmitCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitCount.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionTransmitCount.setDescription('multi-chassis loop detection transmit count ')
multiChassisLoopDetectionCount = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionCount.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionCount.setDescription('multi-chassis loop detection count ')
multiChassisLoopDetectionPortDownList = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLoopDetectionPortDownList.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionPortDownList.setDescription('multi-chassis loop detection port down ifIndex list. Each Ifindex\n        will be displayed in a seperated by comas. (maximum 16 port) ')
multiChassisLoopDetectionClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonClear", 0), ("clear", 1))).clone('nonClear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiChassisLoopDetectionClear.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionClear.setDescription('Clear multi-chassis loop detection statistics')
multiChassisGlobalConsistency = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6))
multiChassisLocalChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 1), MultiChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisId.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalChassisId.setDescription('Chassis identifier globally unique within a multi-chassis  domain,\n         which is a set of two chassis configured to operate together\n         providing multi-chassis services')
multiChassisPeerChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 2), MultiChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisId.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerChassisId.setDescription('Chassis identifier globally unique within a multi-chassis  domain,\n         which is a set of two chassis configured to operate together\n         providing multi-chassis services')
multiChassisIdConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 3), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisIdConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisIdConsistency.setDescription('Indicate chassis id consistency within multi-chassis')
multiChassisLocalHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalHelloInterval.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalHelloInterval.setDescription('Time interval, in seconds, local time interval at which hello messages will be sent to the peer.')
multiChassisPeerHelloInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerHelloInterval.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerHelloInterval.setDescription('Time interval, in seconds, peer time interval at which hello messages will be sent to the local.')
multiChassisHelloIntervalConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 6), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisHelloIntervalConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisHelloIntervalConsistency.setDescription('Indicate Hello Interval consistency within multi-chassis')
multiChassisLocalIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalIpcVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalIpcVlan.setDescription('Local VLAN used for IPC communication.')
multiChassisPeerIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerIpcVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerIpcVlan.setDescription('Peer VLAN used for IPC communication.')
multiChassisIpcVlanConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 9), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisIpcVlanConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisIpcVlanConsistency.setDescription('Indicate Ipc Vlan consistency within multi-chassis')
multiChassisLocalStpPathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thrityTwoBit", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalStpPathCostMode.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalStpPathCostMode.setDescription('Local stp path cost mode within multi-chassis')
multiChassisPeerStpPathCostMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("thrityTwoBit", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerStpPathCostMode.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerStpPathCostMode.setDescription('Peer stp path cost mode within multi-chassis')
multiChassisStpPathCostModeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 12), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsistency.setDescription('Indicate stp path cost mode consistency within multi-chassis')
multiChassisLocalStpMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flat", 1), ("onePerVlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalStpMode.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalStpMode.setDescription('Local stp mode within multi-chassis')
multiChassisPeerStpMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("flat", 1), ("onePerVlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerStpMode.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerStpMode.setDescription('Peer stp mode within multi-chassis')
multiChassisStpModeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 15), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpModeConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpModeConsistency.setDescription('Indicate stp mode consistency within multi-chassis')
multiChassisLocalChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 16), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalChassisGroup.setDescription('Local chassis group')
multiChassisPeerChassisGroup = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 17), MultiChassisGroup()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerChassisGroup.setDescription('Peer chassis group')
multiChassisGroupConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 18), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisGroupConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisGroupConsistency.setDescription('Indicate chassis group consistency within multi-chassis')
multiChassisLocalChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 19), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLocalChassisType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLocalChassisType.setDescription('Local chassis type')
multiChassisPeerChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 20), MultiChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisPeerChassisType.setStatus('current')
if mibBuilder.loadTexts: multiChassisPeerChassisType.setDescription('Peer chassis type')
multiChassisTypeConsistency = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 6, 21), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTypeConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisTypeConsistency.setDescription('Indicate chassis type consistency within multi-chassis')
multiChassisLinkaggConsistencyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7), )
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyTable.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyTable.setDescription('Multiple Chassis linkagg consistency table')
multiChassisLinkaggConsistencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyAggIndex"))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyEntry.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyEntry.setDescription('Multiple Chassis linkagg consistency table Entry')
multiChassisLinkaggConsistencyAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyAggIndex.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyAggIndex.setDescription('Multiple Chassis linkagg consistency table Aggregated Interface IfIndex')
multiChassisLinkaggConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 2), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistency.setDescription('Indicate linkagg consistency within multi-chassis')
multiChassisLinkaggLocalAggType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2), ("mcStatic", 3), ("mcLacp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggType.setDescription('Local linkagg type within multi-chassis')
multiChassisLinkaggPeerAggType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("static", 1), ("lacp", 2), ("mcStatic", 3), ("mcLacp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggType.setDescription('Peer linkagg type within multi-chassis')
multiChassisLinkaggAggTypeConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 5), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggTypeConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggAggTypeConsistency.setDescription('Indicate linkagg agg type consistency within multi-chassis')
multiChassisLinkaggLocalDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalDefaultVlan.setDescription('Local linkagg default vlan within multi-chassis')
multiChassisLinkaggPeerDefaultVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerDefaultVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerDefaultVlan.setDescription('Peer linkagg default vlan within multi-chassis')
multiChassisLinkaggDefaultVlanConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 8), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggDefaultVlanConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggDefaultVlanConsistency.setDescription('Indicate linkagg default vlan consistency within multi-chassis')
multiChassisLinkaggLocalVlanListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalVlanListConfigured.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalVlanListConfigured.setDescription('Indicated whether local linkagg vlan list is configured within multi-chassis')
multiChassisLinkaggPeerVlanListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerVlanListConfigured.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerVlanListConfigured.setDescription('Indicated whether Peer linkagg vlan list is configured within multi-chassis')
multiChassisLinkaggVlanListConfiguredConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 11), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggVlanListConfiguredConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggVlanListConfiguredConsistency.setDescription('Indicate linkagg vlan list configured consistency within multi-chassis')
multiChassisLinkaggLocalAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemID.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemID.setDescription('Local aggregated actor system ID within multi-chassis')
multiChassisLinkaggPeerAggActorSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemID.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemID.setDescription('Peer aggregated actor system ID within multi-chassis')
multiChassisLinkaggAggActorSystemIDConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 14), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemIDConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemIDConsistency.setDescription('Indicate aggregated actor system ID consistency within multi-chassis')
multiChassisLinkaggLocalAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalAggActorSystemPriority.setDescription('local aggregated actor system priority within multi-chassis')
multiChassisLinkaggPeerAggActorSystemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemPriority.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerAggActorSystemPriority.setDescription('Peer aggregated actor system priority within multi-chassis')
multiChassisLinkaggAggActorSystemPriorityConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 17), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemPriorityConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggAggActorSystemPriorityConsistency.setDescription('Indicate aggregated actor system priority consistency within multi-chassis')
multiChassisLinkaggLocalExist = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalExist.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalExist.setDescription('To determine if this local mclag does exist')
multiChassisLinkaggPeerExist = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerExist.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerExist.setDescription('To determine if this peer mclag does exist')
multiChassisLinkaggAggAllConsistency = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 20), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggAggAllConsistency.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggAggAllConsistency.setDescription('Indicate all consistencies within multi-chassis linkagg')
multiChassisLinkaggLocalListVlanSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggLocalListVlanSize.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggLocalListVlanSize.setDescription('Size of multi-chassis linkagg local vlan list')
multiChassisLinkaggPeerListVlanSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 7, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggPeerListVlanSize.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggPeerListVlanSize.setDescription('Size of multi-chassis linkagg Peer vlan list')
multiChassisTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8))
multiChassisTrapIpcVlan = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapIpcVlan.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapIpcVlan.setDescription('Indicate multi-chassis ipc-vlan')
multiChassisTrapStpBlockingVlanList = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapStpBlockingVlanList.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapStpBlockingVlanList.setDescription('The STP status for some Vlans on the VFLink is in\n        blocking state. This shows the first 16 vlan list. And Each Vlan\n        will be displayed in a seperated by comas. (maximum 16 vlan)')
multiChassisTrapFailure = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapFailure.setDescription('Indicate multi-chassis failure')
multiChassisTrapVFL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 4), MultiChassisLinkIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapVFL.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapVFL.setDescription('Indicate multi-chassis VFL ifIndex')
multiChassisTrapVFLMemberPort = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapVFLMemberPort.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapVFLMemberPort.setDescription('Indicate multi-chassis VFL member port ifIndex')
multiChassisTrapDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplexMode", 1), ("speed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapDiagnostic.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapDiagnostic.setDescription('Indicates why a port configured as virtual-fabric member is unable to join the virtual-fabric link')
multiChassisStpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forwarding", 0), ("blocking", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisStpStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpStatus.setDescription('Indicates STP stauts for VFL link')
multiChassisTrapRecovered = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("recovered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisTrapRecovered.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapRecovered.setDescription('Indicates that the system has recovered from a multi-chassis failure')
multiChassisLinkaggConsistencyVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9), )
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanTable.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanTable.setDescription('Multiple Chassis linkagg consistency vlan table')
multiChassisLinkaggConsistencyVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanAggIndex"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanId"), (0, "ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanLocaleType"))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanEntry.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanEntry.setDescription('Multiple Chassis linkagg consistency table vlan Entry')
multiChassisLinkaggConsistencyVlanAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAggIndex.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAggIndex.setDescription('Multiple Chassis linkagg vlan consistency table Aggregated Interface IfIndex.')
multiChassisLinkaggConsistencyVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanId.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanId.setDescription('Indicate vlan entry within this Multiple Chassis linkagg consistency')
multiChassisLinkaggConsistencyVlanLocaleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 3), MultiChassisLocaleType())
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanLocaleType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanLocaleType.setDescription('Indicate localeType: local or peer for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalid", 0), ("service", 1), ("multicastEnt", 2), ("multicastService", 3), ("dynamic", 4), ("standard", 5), ("ipc", 6), ("vipVlan", 7), ("erpVlan", 8), ("mtpVlan", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanType.setDescription('Indicate vlan type for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAdminStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanAdminStatus.setDescription('Indicate vlan administrative status for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanOperStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanOperStatus.setDescription('Indicate vlan operating status for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanIpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIpEnable.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIpEnable.setDescription('Indicates if any IP routers are configured on this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 10222))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanMtu.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanMtu.setDescription('Indicates whether the mac learning is enabled or disabled on this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanSrcLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanSrcLearningStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanSrcLearningStatus.setDescription('Indicates whether the mac learning is enabled or disabled on this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanVpaType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("cfgDefault", 1), ("qTagged", 2), ("dynamic", 3), ("vstkDoubleTag", 4), ("vstkTranslate", 5), ("forbidden", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaType.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaType.setDescription('Indicates vpa type for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanVpaState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 0), ("blocking", 1), ("inactive", 2), ("invalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaState.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVpaState.setDescription('Indicates vpa state for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanVRF = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVRF.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanVRF.setDescription('Indicates VRF num for this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanIcmpRedirectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIcmpRedirectStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanIcmpRedirectStatus.setDescription('Indicates icmp redirect status within this Multiple Chassis linkagg consistency vlan entry.')
multiChassisLinkaggConsistencyVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 1, 9, 1, 14), MultiChassisConsistency()).setMaxAccess("readonly")
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanStatus.setDescription('Indicate consistency status of this mult-chassis linkagg: local vlan entry vs peer vlan entry')
multiChassisIpcVlanDown = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"))
if mibBuilder.loadTexts: multiChassisIpcVlanDown.setStatus('deprecated')
if mibBuilder.loadTexts: multiChassisIpcVlanDown.setDescription('Trap indicating the the operational status for the multi-chassis\n                communication vlan: up => down. (This trap is no longer supported.)')
multiChassisIpcVlanUp = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 2)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"))
if mibBuilder.loadTexts: multiChassisIpcVlanUp.setStatus('deprecated')
if mibBuilder.loadTexts: multiChassisIpcVlanUp.setDescription('Trap indicating the the operational status for the multi-chassis\n                communication vlan: down => up. (This trap is no longer supported.)')
multiChassisMisconfigurationFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 3)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisMisconfigurationFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisMisconfigurationFailure.setDescription('Multi-chassis misconfiguration possibly due to inconsistent chassis Id, hello-interval or ipc vlan.')
multiChassisHelloIntervalConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 4)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisHelloIntervalConsisFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisHelloIntervalConsisFailure.setDescription('Trap indicating inconsistency between local and peer hello interval.')
multiChassisStpModeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 5)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisStpModeConsisFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpModeConsisFailure.setDescription('Trap indicating inconsistency between local and peer spanning tree path cost mode.')
multiChassisStpPathCostModeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 6)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsisFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpPathCostModeConsisFailure.setDescription('Trap indicating the STP path cost mode consistency Falure.')
multiChassisVflinkStatusConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 7)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisVflinkStatusConsisFailure.setStatus('deprecated')
if mibBuilder.loadTexts: multiChassisVflinkStatusConsisFailure.setDescription('Trap indicating the MCM vflink status consistency Falure. (This trap is no longer supported.)')
multiChassisStpBlockingStatus = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 8)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapStpBlockingVlanList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpStatus"))
if mibBuilder.loadTexts: multiChassisStpBlockingStatus.setStatus('current')
if mibBuilder.loadTexts: multiChassisStpBlockingStatus.setDescription('Trap indicating the MCM The STP status on the VFLink is in blocking state or back to forwarding. \n               (Only VFL ifindex and Stp status will be provided. Vlan list info is not supported and will be retured as null string)')
multiChassisLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 9)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisLoopDetected.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetected.setDescription('Trap indicating the a loop has been detected over the multi-chassis aggregates.')
multiChassisHelloTimeout = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 10)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisHelloTimeout.setStatus('current')
if mibBuilder.loadTexts: multiChassisHelloTimeout.setDescription('Trap indicating that hello timeout has been detected.')
multiChassisVflinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 11)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisVflinkDown.setStatus('current')
if mibBuilder.loadTexts: multiChassisVflinkDown.setDescription('Trap indicating that the VFL link is down.')
multiChassisVFLMemberJoinFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 12)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFLMemberPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapDiagnostic"))
if mibBuilder.loadTexts: multiChassisVFLMemberJoinFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisVFLMemberJoinFailure.setDescription('Indicates a port configured as virtual-fabric member is unable to join the virtual-fabric link.')
multiChassisGroupConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 13)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisGroupConsisFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisGroupConsisFailure.setDescription('Trap indicating inconsistency between local and peer chassis group.')
multiChassisTypeConsisFailure = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 14)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"))
if mibBuilder.loadTexts: multiChassisTypeConsisFailure.setStatus('current')
if mibBuilder.loadTexts: multiChassisTypeConsisFailure.setDescription('Trap indicating inconsistency between local and peer chassis type.')
multiChassisConsisFailureRecovered = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 0, 15)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapRecovered"))
if mibBuilder.loadTexts: multiChassisConsisFailureRecovered.setStatus('current')
if mibBuilder.loadTexts: multiChassisConsisFailureRecovered.setDescription('Trap indicating that the system has recovered from a multi-chassis inconsistency between the local and peer switches.')
alcatelIND1MultiChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperationGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGlobalConsistencyGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MultiChassisMIBCompliance = alcatelIND1MultiChassisMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MultiChassisMIBCompliance.setDescription('Compliance statement for Multi-Chassis Supervision.')
multiChassisConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConfigChassisGroup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisConfigGroup = multiChassisConfigGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisConfigGroup.setDescription('Chassis Supervision Multi-Chassis Config Group.')
multiChassisOperationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisRole"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisOperChassisType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisOperationGroup = multiChassisOperationGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisOperationGroup.setDescription('Chassis Supervision Multi-Chassis Operation Group.')
multiChassisLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkOperDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkPrimaryPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkActivePortNum"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkConfigPortNum"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkGroup = multiChassisLinkGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkGroup.setDescription('Chassis Supervision Multi-Chassis Link Group.')
multiChassisLinkMemberPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortIsPrimay"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkMemberPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkMemberPortGroup = multiChassisLinkMemberPortGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkMemberPortGroup.setDescription('Chassis Supervision Multi-Chassis Link Member Port Group.')
multiChassisLoopDetectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionTransmitInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionTransmitCount"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionCount"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionPortDownList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetectionClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLoopDetectionGroup = multiChassisLoopDetectionGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLoopDetectionGroup.setDescription('Chassis Supervision Multi-Chassis loop detection Group.')
multiChassisGlobalConsistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisId"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIdConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerHelloInterval"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloIntervalConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalStpPathCostMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerStpPathCostMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpPathCostModeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalStpMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerStpMode"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpModeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisGroup"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGroupConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLocalChassisType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisPeerChassisType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTypeConsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisGlobalConsistencyGroup = multiChassisGlobalConsistencyGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisGlobalConsistencyGroup.setDescription('Chassis Supervision Multi-Chassis glocal consistency Group.')
multiChassisLinkaggConsistencyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggTypeConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerDefaultVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggDefaultVlanConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalVlanListConfigured"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerVlanListConfigured"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggVlanListConfiguredConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggActorSystemID"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggActorSystemID"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggActorSystemIDConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalAggActorSystemPriority"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerAggActorSystemPriority"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggActorSystemPriorityConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalExist"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerExist"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggAggAllConsistency"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggLocalListVlanSize"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggPeerListVlanSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkaggConsistencyGroup = multiChassisLinkaggConsistencyGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyGroup.setDescription('Chassis Supervision Multi-Chassis linkagg consistency Group.')
multiChassisTrapInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapIpcVlan"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapStpBlockingVlanList"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFL"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapVFLMemberPort"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapDiagnostic"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTrapRecovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisTrapInfoGroup = multiChassisTrapInfoGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapInfoGroup.setDescription('Chassis Supervision Multi-Chassis trap info Group.')
multiChassisTrapOBJGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanDown"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisIpcVlanUp"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisMisconfigurationFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloIntervalConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpModeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpPathCostModeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVflinkStatusConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisStpBlockingStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLoopDetected"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisHelloTimeout"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVflinkDown"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisVFLMemberJoinFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisGroupConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisTypeConsisFailure"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisConsisFailureRecovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisTrapOBJGroup = multiChassisTrapOBJGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisTrapOBJGroup.setDescription('Chassis Supervision Multi-Chassis trap object Group.')
multiChassisLinkaggConsistencyVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 55, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanAdminStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanOperStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanIpEnable"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanMtu"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanSrcLearningStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVpaType"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVpaState"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanVRF"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanIcmpRedirectStatus"), ("ALCATEL-IND1-MULTI-CHASSIS-MIB", "multiChassisLinkaggConsistencyVlanStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    multiChassisLinkaggConsistencyVlanGroup = multiChassisLinkaggConsistencyVlanGroup.setStatus('current')
if mibBuilder.loadTexts: multiChassisLinkaggConsistencyVlanGroup.setDescription('Chassis Supervision Multi-Chassis linkagg consistency vlan Group.')
mibBuilder.exportSymbols("ALCATEL-IND1-MULTI-CHASSIS-MIB", multiChassisIpcVlanDown=multiChassisIpcVlanDown, multiChassisVFLMemberJoinFailure=multiChassisVFLMemberJoinFailure, multiChassisLoopDetected=multiChassisLoopDetected, multiChassisOperChassisRole=multiChassisOperChassisRole, multiChassisLinkTable=multiChassisLinkTable, multiChassisPeerStpPathCostMode=multiChassisPeerStpPathCostMode, multiChassisLinkRowStatus=multiChassisLinkRowStatus, multiChassisLocalChassisId=multiChassisLocalChassisId, multiChassisPeerHelloInterval=multiChassisPeerHelloInterval, multiChassisLinkIfIndex=multiChassisLinkIfIndex, multiChassisOperChassisId=multiChassisOperChassisId, multiChassisLinkaggConsistencyVlanType=multiChassisLinkaggConsistencyVlanType, multiChassisTrapIpcVlan=multiChassisTrapIpcVlan, multiChassisLinkaggConsistency=multiChassisLinkaggConsistency, multiChassisTrapDiagnostic=multiChassisTrapDiagnostic, multiChassisLinkMemberPortTable=multiChassisLinkMemberPortTable, multiChassisLinkaggConsistencyVlanAggIndex=multiChassisLinkaggConsistencyVlanAggIndex, multiChassisTrapFailure=multiChassisTrapFailure, alcatelIND1MultiChassisMIBCompliance=alcatelIND1MultiChassisMIBCompliance, multiChassisOperationGroup=multiChassisOperationGroup, multiChassisLinkaggLocalAggType=multiChassisLinkaggLocalAggType, multiChassisLinkAdminStatus=multiChassisLinkAdminStatus, multiChassisLocalStpMode=multiChassisLocalStpMode, multiChassisLinkOperDefaultVlan=multiChassisLinkOperDefaultVlan, multiChassisGroupConsisFailure=multiChassisGroupConsisFailure, multiChassisLoopDetectionTransmitInterval=multiChassisLoopDetectionTransmitInterval, MultiChassisGroup=MultiChassisGroup, multiChassisLinkaggAggActorSystemIDConsistency=multiChassisLinkaggAggActorSystemIDConsistency, multiChassisTrapStpBlockingVlanList=multiChassisTrapStpBlockingVlanList, multiChassisLoopDetectionAdminStatus=multiChassisLoopDetectionAdminStatus, multiChassisLinkMemberOperStatus=multiChassisLinkMemberOperStatus, multiChassisLinkaggPeerDefaultVlan=multiChassisLinkaggPeerDefaultVlan, multiChassisLinkMemberPortRowStatus=multiChassisLinkMemberPortRowStatus, multiChassisLinkaggConsistencyVlanOperStatus=multiChassisLinkaggConsistencyVlanOperStatus, multiChassisLoopDetectionTransmitCount=multiChassisLoopDetectionTransmitCount, alcatelIND1MultiChassisMIBGroups=alcatelIND1MultiChassisMIBGroups, multiChassisLinkMemberPortIfindex=multiChassisLinkMemberPortIfindex, multiChassisPeerChassisGroup=multiChassisPeerChassisGroup, multiChassisLinkaggConsistencyVlanStatus=multiChassisLinkaggConsistencyVlanStatus, alcatelIND1MultiChassisMIB=alcatelIND1MultiChassisMIB, multiChassisPeerChassisType=multiChassisPeerChassisType, multiChassisLinkEntry=multiChassisLinkEntry, multiChassisConsisFailureRecovered=multiChassisConsisFailureRecovered, MultiChassisId=MultiChassisId, multiChassisLinkaggConsistencyVlanMtu=multiChassisLinkaggConsistencyVlanMtu, alcatelIND1MultiChassisMIBNotifications=alcatelIND1MultiChassisMIBNotifications, multiChassisHelloIntervalConsistency=multiChassisHelloIntervalConsistency, multiChassisOperStatus=multiChassisOperStatus, multiChassisLinkMemberPortGroup=multiChassisLinkMemberPortGroup, multiChassisLinkaggPeerAggType=multiChassisLinkaggPeerAggType, multiChassisLinkaggAggActorSystemPriorityConsistency=multiChassisLinkaggAggActorSystemPriorityConsistency, multiChassisConfigGroup=multiChassisConfigGroup, multiChassisLinkaggConsistencyVlanVRF=multiChassisLinkaggConsistencyVlanVRF, multiChassisLinkaggConsistencyVlanIcmpRedirectStatus=multiChassisLinkaggConsistencyVlanIcmpRedirectStatus, multiChassisVflinkStatusConsisFailure=multiChassisVflinkStatusConsisFailure, multiChassisOperation=multiChassisOperation, multiChassisLinkPrimaryPort=multiChassisLinkPrimaryPort, multiChassisLinkaggPeerExist=multiChassisLinkaggPeerExist, multiChassisStpPathCostModeConsisFailure=multiChassisStpPathCostModeConsisFailure, multiChassisPeerIpcVlan=multiChassisPeerIpcVlan, multiChassisVflinkDown=multiChassisVflinkDown, multiChassisLinkGroup=multiChassisLinkGroup, multiChassisConfigChassisGroup=multiChassisConfigChassisGroup, multiChassisConfig=multiChassisConfig, multiChassisIpcVlanConsistency=multiChassisIpcVlanConsistency, multiChassisLinkaggConsistencyAggIndex=multiChassisLinkaggConsistencyAggIndex, multiChassisLinkaggVlanListConfiguredConsistency=multiChassisLinkaggVlanListConfiguredConsistency, multiChassisStpModeConsisFailure=multiChassisStpModeConsisFailure, multiChassisLinkMemberPortLinkIfIndex=multiChassisLinkMemberPortLinkIfIndex, multiChassisLinkaggConsistencyVlanGroup=multiChassisLinkaggConsistencyVlanGroup, MultiChassisLocaleType=MultiChassisLocaleType, multiChassisLinkMemberPortEntry=multiChassisLinkMemberPortEntry, multiChassisLinkaggConsistencyVlanTable=multiChassisLinkaggConsistencyVlanTable, multiChassisPeerChassisId=multiChassisPeerChassisId, multiChassisLoopDetection=multiChassisLoopDetection, multiChassisOperHelloInterval=multiChassisOperHelloInterval, multiChassisTypeConsisFailure=multiChassisTypeConsisFailure, multiChassisLinkaggConsistencyVlanLocaleType=multiChassisLinkaggConsistencyVlanLocaleType, multiChassisLinkConfigPortNum=multiChassisLinkConfigPortNum, alcatelIND1MultiChassisMIBObjects=alcatelIND1MultiChassisMIBObjects, multiChassisGroupConsistency=multiChassisGroupConsistency, multiChassisLinkaggConsistencyEntry=multiChassisLinkaggConsistencyEntry, multiChassisGlobalConsistencyGroup=multiChassisGlobalConsistencyGroup, multiChassisLinkaggLocalDefaultVlan=multiChassisLinkaggLocalDefaultVlan, multiChassisStpModeConsistency=multiChassisStpModeConsistency, multiChassisLinkActivePortNum=multiChassisLinkActivePortNum, multiChassisLocalIpcVlan=multiChassisLocalIpcVlan, multiChassisLinkaggPeerAggActorSystemPriority=multiChassisLinkaggPeerAggActorSystemPriority, multiChassisLinkaggConsistencyVlanEntry=multiChassisLinkaggConsistencyVlanEntry, multiChassisOperChassisType=multiChassisOperChassisType, multiChassisLocalHelloInterval=multiChassisLocalHelloInterval, multiChassisLinkaggLocalExist=multiChassisLinkaggLocalExist, multiChassisTypeConsistency=multiChassisTypeConsistency, multiChassisLinkaggDefaultVlanConsistency=multiChassisLinkaggDefaultVlanConsistency, multiChassisConfigIpcVlan=multiChassisConfigIpcVlan, multiChassisMisconfigurationFailure=multiChassisMisconfigurationFailure, multiChassisLinkaggAggTypeConsistency=multiChassisLinkaggAggTypeConsistency, multiChassisLinkaggConsistencyVlanVpaType=multiChassisLinkaggConsistencyVlanVpaType, multiChassisLocalStpPathCostMode=multiChassisLocalStpPathCostMode, multiChassisLinkaggConsistencyVlanId=multiChassisLinkaggConsistencyVlanId, multiChassisLoopDetectionCount=multiChassisLoopDetectionCount, multiChassisLoopDetectionClear=multiChassisLoopDetectionClear, multiChassisStpStatus=multiChassisStpStatus, multiChassisTrapInfoGroup=multiChassisTrapInfoGroup, multiChassisLocalChassisGroup=multiChassisLocalChassisGroup, multiChassisConfigChassisId=multiChassisConfigChassisId, multiChassisLoopDetectionPortDownList=multiChassisLoopDetectionPortDownList, multiChassisStpPathCostModeConsistency=multiChassisStpPathCostModeConsistency, multiChassisLinkaggLocalListVlanSize=multiChassisLinkaggLocalListVlanSize, multiChassisLinkaggPeerAggActorSystemID=multiChassisLinkaggPeerAggActorSystemID, multiChassisLinkaggPeerListVlanSize=multiChassisLinkaggPeerListVlanSize, multiChassisOperChassisGroup=multiChassisOperChassisGroup, multiChassisLinkaggConsistencyVlanAdminStatus=multiChassisLinkaggConsistencyVlanAdminStatus, multiChassisTrapVFL=multiChassisTrapVFL, multiChassisLinkaggConsistencyVlanVpaState=multiChassisLinkaggConsistencyVlanVpaState, multiChassisConfigHelloInterval=multiChassisConfigHelloInterval, multiChassisLinkOperStatus=multiChassisLinkOperStatus, alcatelIND1MultiChassisMIBCompliances=alcatelIND1MultiChassisMIBCompliances, MultiChassisConsistency=MultiChassisConsistency, multiChassisPeerStpMode=multiChassisPeerStpMode, multiChassisLinkaggConsistencyGroup=multiChassisLinkaggConsistencyGroup, multiChassisIpcVlanUp=multiChassisIpcVlanUp, multiChassisLinkaggConsistencyTable=multiChassisLinkaggConsistencyTable, multiChassisLinkaggAggAllConsistency=multiChassisLinkaggAggAllConsistency, multiChassisLinkMemberPortIsPrimay=multiChassisLinkMemberPortIsPrimay, multiChassisGlobalConsistency=multiChassisGlobalConsistency, PYSNMP_MODULE_ID=alcatelIND1MultiChassisMIB, multiChassisHelloTimeout=multiChassisHelloTimeout, multiChassisTrapOBJGroup=multiChassisTrapOBJGroup, MultiChassisLinkIfIndex=MultiChassisLinkIfIndex, multiChassisTrapRecovered=multiChassisTrapRecovered, multiChassisLinkaggLocalAggActorSystemPriority=multiChassisLinkaggLocalAggActorSystemPriority, multiChassisLinkaggConsistencyVlanIpEnable=multiChassisLinkaggConsistencyVlanIpEnable, multiChassisLoopDetectionGroup=multiChassisLoopDetectionGroup, multiChassisLinkaggLocalAggActorSystemID=multiChassisLinkaggLocalAggActorSystemID, multiChassisLinkaggLocalVlanListConfigured=multiChassisLinkaggLocalVlanListConfigured, multiChassisTrapInfo=multiChassisTrapInfo, multiChassisHelloIntervalConsisFailure=multiChassisHelloIntervalConsisFailure, multiChassisStpBlockingStatus=multiChassisStpBlockingStatus, multiChassisLinkaggPeerVlanListConfigured=multiChassisLinkaggPeerVlanListConfigured, multiChassisTrapVFLMemberPort=multiChassisTrapVFLMemberPort, multiChassisIdConsistency=multiChassisIdConsistency, MultiChassisType=MultiChassisType, multiChassisOperIpcVlan=multiChassisOperIpcVlan, multiChassisLinkaggConsistencyVlanSrcLearningStatus=multiChassisLinkaggConsistencyVlanSrcLearningStatus, alcatelIND1MultiChassisMIBConformance=alcatelIND1MultiChassisMIBConformance, multiChassisLocalChassisType=multiChassisLocalChassisType)
