#
# PySNMP MIB module DOCS-QOS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-QOS3-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 17:04:53 2022
# On host fv-az39-968 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
DscpOrAny, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny")
Dsid, ChannelList, ChSetId, AttributeMask, ChId, AttrAggrRuleMask = mibBuilder.importSymbols("DOCS-IF3-MIB", "Dsid", "ChannelList", "ChSetId", "AttributeMask", "ChId", "AttrAggrRuleMask")
DocsL2vpnIfList, = mibBuilder.importSymbols("DOCS-L2VPN-MIB", "DocsL2vpnIfList")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Bits, NotificationType, ObjectIdentity, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Counter32, Gauge32, MibIdentifier, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "NotificationType", "ObjectIdentity", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Counter32", "Gauge32", "MibIdentifier", "Integer32", "iso")
StorageType, RowStatus, DisplayString, TruthValue, MacAddress, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TruthValue", "MacAddress", "TimeStamp", "TextualConvention")
docsQos3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21))
docsQos3Mib.setRevisions(('2007-08-03 00:00', '2007-05-18 00:00', '2006-12-07 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsQos3Mib.setRevisionsDescriptions(('Revised Version includes ECN OSSIv3.0-N-07.0480-3\n        and published as I04', 'Revised Version includes ECNs\n        OSSIv3.0-N-07.0445-3 \n        OSSIv3.0-N-07.0437-4 \n        OSSIv3.0-N-07.0412-2 \n        OSSIv3.0-N-07.0410-4 \n        and published as I03', 'Initial version, published as part of the CableLabs\n        OSSIv3.0 specification CM-SP-OSSIv3.0-I01-061207 \n        Copyright 1999-2007 Cable Television Laboratories, Inc. \n        All rights reserved.',))
if mibBuilder.loadTexts: docsQos3Mib.setLastUpdated('200708030000Z')
if mibBuilder.loadTexts: docsQos3Mib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: docsQos3Mib.setContactInfo('Postal: Cable Television Laboratories, Inc.\n            858 Coal Creek Circle \n            Louisville, Colorado 80027-9750 \n            U.S.A. \n            Phone: +1 303-661-9100 \n            Fax:   +1 303-661-9199 \n            E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsQos3Mib.setDescription('This MIB module contains the management objects for the\n        management of QOS for channel bonding.')
class IfDirection(TextualConvention, Integer32):
    description = 'Indicates a direction on an RF MAC interface.\n        The value downstream(1) is from Cable Modem \n        Termination System to Cable Modem. \n\n        The value upstream(2) is from Cable Modem to \n        Cable Modem Termination System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("downstream", 1), ("upstream", 2))

class DOCSQOS3BitRate(TextualConvention, Unsigned32):
    description = 'The rate of traffic in unit of bits per second.\n        Used to specify traffic rate for QOS.'
    status = 'current'
    displayHint = 'd'

class SchedulingType(TextualConvention, Integer32):
    description = 'The scheduling service provided by a CMTS for an\n        upstream Service Flow.  If the parameter is omitted \n        from an upstream QOS Parameter Set, this object \n        takes the value of bestEffort (2).  This parameter \n        must be reported as undefined (1) for downstream \n        QOS Parameter Sets.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("undefined", 1), ("bestEffort", 2), ("nonRealTimePollingService", 3), ("realTimePollingService", 4), ("unsolictedGrantServiceWithAD", 5), ("unsolictedGrantService", 6))

docsQos3MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1))
docsQos3PktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1), )
if mibBuilder.loadTexts: docsQos3PktClassTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flows and  \n        Classifiers section.')
if mibBuilder.loadTexts: docsQos3PktClassTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassTable.setDescription('This object describes the packet classification\n        configured on the CM or CMTS. \n        The model is that a packet either received as input from \n        an interface or transmitted for output on an interface \n        may be compared against an ordered list of rules \n        pertaining to the packet contents.  Each rule is an instance \n        of this object.  A matching rule provides a Service \n        Flow ID to which the packet is classified. \n        All rules need to match for a packet to match a classifier. \n\n        The attibutes in this row correspond to a set of Classifier \n        Encoding parameters in a DOCSIS MAC management \n        message.  The BitMap attribute indicates which particular \n        parameters were present in the classifier as \n        signaled in the DOCSIS message. \n        If the referenced parameter was not present in the signaled \n        Classifier, the corresponding attribute in \n        this instance reports a value as specified by that attribute \n        description.')
docsQos3PktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3PktClassEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassEntry.setDescription('The conceptual row of docsQos3PktClassTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow of this classifier.')
docsQos3PktClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQos3PktClassId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Classifier  \n        Identifier section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassId.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassId.setDescription('This key indicates the assigned identifier to the\n        packet classifier instance by the CMTS, which is unique \n        per Service Flow. \n        For UDCs this corresponds to the Service Flow Reference \n        of the classifier.')
docsQos3PktClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDirection.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassDirection.setDescription('This attribute indicates the direction to which the\n        classifier is applied.')
docsQos3PktClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassPriority.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Rule Priority  \n        section in the Common Radio Frequency Interface Encodings \n        Annex.')
if mibBuilder.loadTexts: docsQos3PktClassPriority.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassPriority.setDescription('This attribute specifies the order of evaluation\n        of the classifiers. \n        The higher the value, the higher the priority. \n        The value of 0 is used as default in provisioned Service \n        Flows Classifiers. \n        The default value of 64 is used for dynamic Service Flow \n        Classifiers. \n\n        If the referenced parameter is not present in a classifier, \n        this attribute reports the default \n        value as defined above.')
docsQos3PktClassIpTosLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosLow.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Type of  \n        Service Range and Mask and IPv6 Traffic Class Range and  \n        Mask sections in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpTosLow.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpTosLow.setDescription('This attribute indicates the low value of a range of\n        TOS byte values. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0. \n\n        The IP TOS octet, as originally defined in RFC 791, has \n        been superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit \n        Congestion Notification Field (ECN field, RFC 3168). \n        This object is defined as an 8-bit octet as per the DOCSIS \n        Specification for packet classification.')
docsQos3PktClassIpTosHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosHigh.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Type of  \n        Service Range and Mask and IPv6 Traffic Class Range and  \n        Mask sections in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpTosHigh.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpTosHigh.setDescription('This attribute indicates the 8-bit high value of a\n        range of TOS byte values. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0. \n        The IP TOS octet as originally defined in RFC 791 has been \n        superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit Congestion \n        Notification Field (ECN field, RFC 3168). \n        This object is defined as an 8-bit octet as defined by \n        the DOCSIS Specification for packet classification.')
docsQos3PktClassIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpTosMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Type of  \n        Service Range and Mask and IPv6 Traffic Class Range and  \n        Mask sections in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpTosMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpTosMask.setDescription('This attribute indicates the mask value is bitwise\n        ANDed with TOS byte in an IP packet, and this value is \n        used for range checking of TosLow and TosHigh. \n\n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0. \n\n        The IP TOS octet as originally defined in RFC 791 has been \n        superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit Congestion \n        Notification Field (ECN field, RFC 3168). \n        This object is defined as an 8-bit octet per the DOCSIS \n        Specification for packet classification.')
docsQos3PktClassIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 258))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpProtocol.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IP Protocol and  \n        IPv6 Next Header Type sections in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpProtocol.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpProtocol.setDescription('This attribute indicates the value of the IP Protocol\n        field required for IP packets to match this rule. \n\n        The value 256 matches traffic with any IP Protocol value. \n        The value 257 by convention matches both TCP and \n        UDP. \n        If the referenced parameter is not present in a classifier, \n        this attibute reports the value of 258.')
docsQos3PktClassIpSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpSourceAddr.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Source Address \n        and IPv6 Source Address sections in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpSourceAddr.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpSourceAddr.setDescription("This attribute specifies the value of the IP Source\n        Address required for packets to match this rule. \n        An IP packet matches the rule when the packet IP Source \n        Address bitwise ANDed with the InetSourceMask value \n        equals the InetSourceAddr value. \n        The address type of this object is specified by InetAddressType. \n\n        If the referenced parameter is not present in a classifier, \n        this object reports the value of '00000000'H.")
docsQos3PktClassIpSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpSourceMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Source Mask \n        and IPv6 Source Prefix Length (bits) sections in the Common Radio \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpSourceMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpSourceMask.setDescription("This attribute specifies which bits of a packet's\n        IP Source Address are compared to match this rule. \n        An IP packet matches the rule when the packet source address \n        bitwise ANDed with the InetSourceMask value \n        equals the docsIetfQosIpPktClassInetSourceAddr \n        value. \n        The address type of this attribute is specified by InetAddressType. \n\n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 'FFFFFFFF'H.")
docsQos3PktClassIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpDestAddr.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Destination  \n        Address and IPv6 Destination Address sections in the Common \n        Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpDestAddr.setDescription("This attribute specifies the value of the IP Destination\n        Address required for packets to match this rule. \n\n        An IP packet matches the rule when the packet IP Destination \n        Address bitwise ANDed with the InetDestMask \n        value equals the InetDestAddr value. \n        The address type of this attribute is specified by  \n        InetAddressType. \n\n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of '00000000'H.")
docsQos3PktClassIpDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpDestMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv4 Destination \n        Mask and IPv6 Destination Prefix Length (bits) sections in \n        the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassIpDestMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpDestMask.setDescription("This attribute specifies which bits of a packet's\n        IP Destination Address are compared to match this rule. \n\n        An IP packet matches the rule when the packet destination \n        address bitwise ANDed with the InetDestMask value \n        equals the docsIetfQosIpPktClassInetDestAddr \n        value. \n        The address type of this attribute is specified by InetAddressType. \n\n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 'FFFFFFFF'H.")
docsQos3PktClassSourcePortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourcePortStart.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, TCP/UDP Source \n        Port Start section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassSourcePortStart.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassSourcePortStart.setDescription('This attribute specifies the low-end inclusive range\n        of TCP/UDP source port numbers to which a packet \n        is compared.  This attribute is irrelevant for non-TCP/UDP \n        IP packets. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0.')
docsQos3PktClassSourcePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourcePortEnd.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, TCP/UDP Source \n        Port End section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassSourcePortEnd.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassSourcePortEnd.setDescription('This attribute specifies the high-end inclusive\n        range of TCP/UDP source port numbers to which a packet \n        is compared.  This attribute is irrelevant for non-TCP/UDP \n        IP packets. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 65535.')
docsQos3PktClassDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestPortStart.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, TCP/UDP \n        Destination Port Start section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassDestPortStart.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassDestPortStart.setDescription('This attribute specifies the low-end inclusive  range\n        of TCP/UDP destination port numbers to which a packet \n        is compared. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0.')
docsQos3PktClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 15), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestPortEnd.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, TCP/UDP Destination \n        Port End section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassDestPortEnd.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassDestPortEnd.setDescription('This attribute specifies the high-end inclusive\n        range of TCP/UDP destination port numbers to which a \n        packet is compared. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 65535.')
docsQos3PktClassDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestMacAddr.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Destination MAC  \n        Address section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassDestMacAddr.setDescription("An Ethernet packet matches an entry when its destination\n        MAC address bitwise ANDed with DestMacMask equals \n        the value of DestMacAddr. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of '000000000000'H.")
docsQos3PktClassDestMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassDestMacMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Destination  \n        MAC Address section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassDestMacMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassDestMacMask.setDescription("An Ethernet packet matches an entry when its destination\n        MAC address bitwise ANDed with DestMacMask equals \n        the value of DestMacAddr. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of '000000000000'H.")
docsQos3PktClassSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassSourceMacAddr.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Source MAC  \n        Address section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassSourceMacAddr.setDescription("An Ethernet packet matches this entry when its source\n        MAC address equals the value of this attribute. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 'FFFFFFFFFFFF'")
docsQos3PktClassEnetProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethertype", 1), ("dsap", 2), ("mac", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocolType.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803,  \n        Ethertype/DSAP/MacType section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocolType.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocolType.setDescription("This attribute indicates the format of the layer 3\n        protocol ID in the Ethernet packet.  A value of 'none' \n        means that the rule does not use the layer 3 protocol type \n        as a matching criteria. \n        A value of 'ethertype' means that the rule applies only \n        to frames that contain an EtherType value.  Ethertype \n        values are contained in packets using the Dec-Intel-Xerox \n        (DIX) encapsulation or the RFC1042 Sub-Network \n        Access Protocol (SNAP) encapsulation formats. \n\n        A value of 'dsap' means that the rule applies only to frames \n        using the IEEE802.3 encapsulation format with \n        a Destination Service Access Point (DSAP) other than \n        0xAA (which is reserved for SNAP). \n\n        A value of 'mac' means that the rule applies only to MAC \n        management messages for MAC management messages. \n\n        A value of 'all' means that the rule matches all Ethernet \n        packets. \n        If the Ethernet frame contains an 802.1P/Q Tag header \n        (i.e., EtherType 0x8100), this attribute applies \n        to the embedded EtherType field within the 802.1P/Q \n        header. \n        If the referenced parameter is not present in a classifier, \n        this attribute reports the value of 0.")
docsQos3PktClassEnetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocol.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803,  \n        Ethertype/DSAP/MacType section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocol.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassEnetProtocol.setDescription("If EnetProtocolType is 'none', this attribute is\n        ignored when considering whether a packet matches the \n        current rule. \n        If EnetProtocolType is 'ethertype', this attribute \n        gives the 16-bit value of the EtherType that the packet \n        must match in order to match the rule. \n        If EnetProtocolType is 'dsap', the lower 8 bits of this \n        attribute's value must match the DSAP byte of the packet \n        in order to match the rule. \n        If EnetProtocolType is 'mac', the lower 8 bits of this \n        attribute's value represent a \n        lower bound (inclusive) of MAC management message type \n        codes matched, and the upper 8 bits represent the \n        upper bound (inclusive) of matched MAC message type \n        codes.  Certain message type codes are excluded from \n        matching, as specified in the reference. \n        If the Ethernet frame contains an 802.1P/Q Tag header \n        (i.e., EtherType 0x8100), this attribute applies \n        to the embedded EtherType field within the 802.1P/Q \n        header. \n        If the referenced parameter is not present in the classifier, \n        the value of this attribute is reported as 0.")
docsQos3PktClassUserPriLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassUserPriLow.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IEEE 802.1P  \n        User_Priority section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassUserPriLow.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassUserPriLow.setDescription('This attribute applies only to Ethernet frames using\n        the 802.1P/Q tag header (indicated with EtherType \n        0x8100).  Such frames include a 16-bit Tag that contains \n        a 3-bit Priority field and a 12-bit VLAN number. \n\n        Tagged Ethernet packets must have a 3-bit Priority field \n        within the range of PriLow to PriHigh in order to \n        match this rule.  \n        If the referenced parameter is not present in the classifier, \n        the value of this attribute is reported as 0.')
docsQos3PktClassUserPriHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassUserPriHigh.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IEEE 802.1P  \n        User_Priority section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassUserPriHigh.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassUserPriHigh.setDescription('This attribute applies only to Ethernet frames using\n        the 802.1P/Qtag header (indicated with EtherType \n        0x8100).  Such frames include a 16-bit Tag that contains \n        a 3-bit Priority field and a 12-bit VLAN number. \n\n        Tagged Ethernet packets must have a 3-bit Priority field \n        within the range of PriLow to \n        PriHigh in order to match this rule. \n        If the referenced parameter is not present in the classifier, \n        the value of this attribute is reported as 7.')
docsQos3PktClassVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassVlanId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IEEE 802.1Q VLAN_ID \n        section in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassVlanId.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassVlanId.setDescription('This attribute applies only to Ethernet frames\n        using the 802.1P/Q tag header.  \n        Tagged packets must have a VLAN Identifier that matches \n        the value in order to match the rule. \n        If the referenced parameter is not present in the classifier, \n        the value of this attribute is reported as 0.')
docsQos3PktClassState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassState.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Classifier  \n        Activation State section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassState.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassState.setDescription("This attribute indicates whether or not the classifier\n        is enabled to classify packets to a Service Flow. \n\n        If the referenced parameter is not present in the classifier, \n        the value of this attribute is reported as 'true'.")
docsQos3PktClassPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassPkts.setDescription("This attribute counts the number of packets that have\n        been classified using this entry. This includes \n        all packets delivered to a Service Flow maximum rate \n        policing function, whether or not that function drops \n        the packets. \n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for the same ifIndex that  \n        indexes this attribute.")
docsQos3PktClassBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 27), Bits().clone(namedValues=NamedValues(("rulePriority", 0), ("activationState", 1), ("ipTos", 2), ("ipProtocol", 3), ("ipSourceAddr", 4), ("ipSourceMask", 5), ("ipDestAddr", 6), ("ipDestMask", 7), ("sourcePortStart", 8), ("sourcePortEnd", 9), ("destPortStart", 10), ("destPortEnd", 11), ("destMac", 12), ("sourceMac", 13), ("ethertype", 14), ("userPri", 15), ("vlanId", 16), ("flowLabel", 17), ("cmInterfaceMask", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassBitMap.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassBitMap.setDescription("This attribute indicates which parameter encodings\n        were actually present in the DOCSIS packet classifier \n        encoding signaled in the DOCSIS message that created \n        or modified the classifier.  Note that Dynamic \n        Service Change messages have replace semantics, so \n        that all non-default parameters must be present whether \n        the classifier is being created or changed. \n        A bit of this attribute is set to 1 if the parameter indicated \n        by the comment was present in the classifier encoding, \n        and to 0 otherwise. \n        Note that BITS are encoded most significant bit first, \n        so that if, for example, bits 6 and 7 are set, this attribute \n        is encoded as the octet string '030000'H.")
docsQos3PktClassIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassIpAddrType.setDescription("This attribute indicates the type of the Internet\n        address for InetSourceAddr, InetSourceMask, InetDestAddr, \n        and InetDestMask. \n        If the referenced parameter is not present in a classifier, \n        this object reports the value of 'ipv4'.")
docsQos3PktClassFlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassFlowLabel.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IPv6 Flow Label \n        section in the Common Radio Frequency Interface Encodings \n        Annex.')
if mibBuilder.loadTexts: docsQos3PktClassFlowLabel.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassFlowLabel.setDescription('This attribute represents the Flow Label field in\n        the IPv6 header to be matched by the classifier. \n        The value zero indicates that the Flow Label is not specified \n        as part of the classifier and is not matched against \n        the packets.')
docsQos3PktClassCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 1, 1, 30), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PktClassCmInterfaceMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, CM Interface \n        Mask (CMIM) Encoding section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PktClassCmInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PktClassCmInterfaceMask.setDescription('This attribute represents a bit-mask of the CM in-bound\n        interfaces to which this classifer applies. \n        This attribute only applies to QOS upstream Classifiers \n        and upstream Drop Classifiers. For QOS downstream \n        classifiers this object reports the zero-length \n        string.')
docsQos3ParamSetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2), )
if mibBuilder.loadTexts: docsQos3ParamSetTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow  \n        Encodings section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetTable.setDescription('This object describes the set of QOS parameters defined\n        in a managed device. \n        DOCSIS 1.0 COS service profiles are not represented \n        in this object. \n        Each row corresponds to a DOCSIS QOS Parameter Set as \n        signaled via DOCSIS MAC management messages.Each attribute \n        of an instance of this object corresponds to \n        one or part of oneService Flow Encoding. \n        The BitMap attribute indicates which particular parameters \n        were signaled in the original registration \n        or dynamic service request message that created the \n        QOS Parameter Set. \n        In many cases, even if a QOS Parameter Set parameter was \n        not signaled, the DOCSIS specification calls for \n        a default value to be used.  That default value is reported \n        as the value of the corresponding attribute in this \n        object instance. \n\n        Many attributes are not applicable, depending on the \n        Service Flow direction, upstream scheduling type \n        or Service Flow bonding configuration.  The attribute \n        value reported in this case is specified by those attributes \n        descriptions.')
docsQos3ParamSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ParamSetType"), (0, "DOCS-QOS3-MIB", "docsQos3ParamSetServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ParamSetEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetEntry.setDescription('The conceptual row of docsQos3ParamSetTable.\n        The ifIndex key corresponds to the MAC Domain interface of the \n        service flow of this Qos Param Set.')
docsQos3ParamSetServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetServiceClassName.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Class Name \n        section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetServiceClassName.setDescription('This attribute represents the Service Class Name\n        from which the parameter set values were derived. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute returns the  \n        zero-length string.')
docsQos3ParamSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetPriority.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Traffic Priority \n        section in the Common Radio Frequency Interface Encodings \n        Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetPriority.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetPriority.setDescription('This attribute represents the relative priority\n        of a Service Flow. Higher numbers indicate higher priority. \n\n        This priority should only be used to differentiate Service \n        Flow from identical parameter sets. \n        This attribute returns 0 if the referenced parameter \n        is not present in the corresponding DOCSIS QOS Parameter \n        Set or if the parameter is not applicable.')
docsQos3ParamSetMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 6), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficRate.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Sustained \n        Traffic Rate section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficRate.setDescription('This attribute represents the maximum sustained\n        traffic rate allowed for this Service Flow in bits/sec. \n        It counts all MAC frame data PDUs from the bytes following \n        the MAC header HCS to the end of the CRC. The number \n        of bytes forwarded is limited during any time interval. \n        The value 0 means no maximum traffic rate is enforced. \n        This attribute applies to both upstream and \n        downstream Service Flows. \n        This attribute returns 0 if the referenced parameter \n        is not present in the corresponding DOCSIS QOS Parameter \n        Set, or if the parameter is not applicable.')
docsQos3ParamSetMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 7), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficBurst.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Traffic \n        Burst section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficBurst.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTrafficBurst.setDescription("This attribute specifies the token bucket size in\n        bytes for this parameter set. The value is calculated \n        from the byte following the MAC header HCS to  the end \n        of the CRC. This object is applied in conjunction with \n        MaxTrafficRate to calculate maximum sustained traffic \n        rate. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute \n        returns 3044 for scheduling types 'bestEffort', 'nonRealTimePollingService' \n        and 'realTimePollingService'. \n\n        If this parameter is not applicable, it is reported as \n        0.")
docsQos3ParamSetMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 8), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedRate.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Minimum Reserved \n        Traffic Rate section of the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedRate.setDescription('This attribute specifies the guaranteed minimum\n        rate in bits/sec for this parameter set. The value is \n        calculated from the byte following the MAC header HCS \n        to the end of the CRC. The value of 0 indicates that no \n        bandwidth is reserved. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute \n        returns 0. If the parameter is not applicable, it is \n        reported as 0.')
docsQos3ParamSetMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedPkt.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Assumed Minimum \n        Reserved Rate Packet Size, in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedPkt.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMinReservedPkt.setDescription('This attribute specifies an assumed minimum packet\n        size in bytes for which the MinReservedRate will be \n        provided. The value is calculated from the byte following \n        the MAC header HCS to the end of the CRC. If the referenced \n        parameter is omitted from a DOCSIS QOS parameter \n        set, the used and reported value is CMTS implementation \n        and the CM reports a value of 0. If the referenced \n        parameter is not applicable to the direction or \n        scheduling type of the Service Flow, both CMTS and CM \n        report the value 0.')
docsQos3ParamSetActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetActiveTimeout.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Timeout for Active \n        QoS Parameters section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetActiveTimeout.setDescription('This attribute specifies the maximum duration in\n        seconds that resources remain unused on an active service \n        flow before the CMTS signals that both the active \n        and admitted parameter sets are null. The value 0 signifies \n        an infinite amount of time.  \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute \n        returns 0.')
docsQos3ParamSetAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAdmittedTimeout.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Timeout for Admitted \n        QoS Parameters section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetAdmittedTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetAdmittedTimeout.setDescription('This attribute specifies the maximum duration in\n        seconds that resources remain in admitted state before \n        resources must be released. The value of 0 signifies \n        an infinite amount  of time. If the referenced parameter \n        is not present in the corresponding DOCSIS QOS \n        Parameter Set, this attribute returns 200.')
docsQos3ParamSetMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxConcatBurst.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Concatenated \n        Burst section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxConcatBurst.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxConcatBurst.setDescription("This attribute specifies the maximum concatenated\n        burst in bytes that an upstream Service Flow is allowed. \n\n        The value is calculated from the FC byte of the Concatenation \n        MAC Header to the last CRC byte of the last concatenated \n        MAC frame, inclusive.  The value of 0 specifies \n        no maximum burst. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute \n        returns the value of 1522 for scheduling types 'bestEffort', \n        'nonRealTimePollingService', and  'realTimePollingService'. \n        If the parameter is not applicable, \n        it is reported as 0.")
docsQos3ParamSetSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 13), SchedulingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetSchedulingType.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow  \n        Scheduling Type section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetSchedulingType.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetSchedulingType.setDescription("This attribute specifies the upstream scheduling\n        service used for upstream Service Flow.  \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set of an upstream Service \n        Flow, this attribute returns the value of 'bestEffort'. \n        For QOS parameter sets of downstream Service \n        Flows, this attribute's value is reported as 'undefined'.")
docsQos3ParamSetNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetNomPollInterval.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Polling Interval \n        section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetNomPollInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetNomPollInterval.setDescription("This attribute specifies the nominal interval in\n        microseconds between successive unicast request opportunities \n        on an upstream Service Flow. \n        This attribute applies only to upstream Service Flows \n        with SchedulingType of value 'nonRealTimePollingService', \n        'realTimePollingService', and 'unsolictedGrantServiceWithAD'. \n        The parameter is mandatory \n        for 'realTimePollingService'. If the parameter \n        is omitted with 'nonRealTimePollingService', \n        the CMTS uses an implementation-dependent value. If \n        the parameter is omitted with 'unsolictedGrantServiceWithAD(5)' \n        the CMTS uses the value of the Nominal \n        Grant Interval parameter. In all cases, the CMTS reports \n        the value it is using when the parameter is applicable. \n        The CM reports the signaled parameter value \n        if it was signaled. Otherwise, it returns 0. \n        If the referenced parameter is not applicable to the \n        direction or scheduling type of the corresponding DOCSIS \n        QOS Parameter Set, both CMTS and CM report this \n        attribute's value as 0.")
docsQos3ParamSetTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 15), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTolPollJitter.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Tolerated Poll \n        Jitter section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetTolPollJitter.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetTolPollJitter.setDescription("This attribute specifies the maximum amount of time\n        in microseconds that the unicast request interval \n        may be delayed from the nominal periodic schedule on \n        an upstream Service Flow. This parameter is applicable \n        only to upstream Service Flows with a SchedulingType \n        of 'realTimePollingService' or 'unsolictedGrantServiceWithAD'. \n\n        If the referenced parameter is applicable but not present \n        in the corresponding DOCSIS QOS Parameter Set, \n        the CMTS uses an implementation-dependent value and \n        reports the value it is using. The CM reports a value \n        of 0 in this case. \n        If the parameter is not applicable to the direction or \n        upstream scheduling type of the Service Flow, both \n        CMTS and CM report this attribute's value as 0.")
docsQos3ParamSetUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetUnsolicitGrantSize.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Unsolicited \n        Grant Size section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetUnsolicitGrantSize.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetUnsolicitGrantSize.setDescription("This attribute specifies the unsolicited grant size\n        in bytes. The grant size includes the entire MAC frame \n        data PDU from the Frame Control byte to the end of \n        the MAC frame. \n        The referenced parameter is applicable only for upstream \n        flows with a SchedulingType of  'unsolicitedGrantServicewithAD' \n        or 'unsolicitedGrantService', \n        and it is mandatory when applicable. Both CMTS and \n        CM report the signaled value of the parameter in this \n        case. \n        If the referenced parameter is not applicable to the \n        direction or scheduling type of the corresponding DOCSIS \n        QOS Parameter Set, both CMTS and CM report this \n        attribute's value as 0.")
docsQos3ParamSetNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 17), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetNomGrantInterval.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Nominal Grant \n        Interval section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetNomGrantInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetNomGrantInterval.setDescription("This attribute specifies the nominal interval in\n        microseconds between successive data grant opportunities \n        on an upstream Service Flow. \n        The referenced parameter is applicable only for upstream \n        flows with a SchedulingType of 'unsolicitedGrantServicewithAD' \n        or 'unsolicitedGrantService(6)', \n        and it is mandatory when applicable. Both CMTS \n        and CM report the signaled value of the parameter in this \n        case. \n        If the referenced parameter is not applicable to the \n        direction or scheduling type of the corresponding DOCSIS \n        QOS Parameter Set, both CMTS and CM report this \n        attribute's value as 0.")
docsQos3ParamSetTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 18), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTolGrantJitter.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Tolerated Grant \n        Jitter section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetTolGrantJitter.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetTolGrantJitter.setDescription("This attribute specifies the maximum amount of time\n        in microseconds that the transmission opportunities \n        may be delayed from the nominal periodic schedule. \n        The referenced parameter is applicable only for \n        upstream flows with a SchedulingType of 'unsolicitedGrantServicewithAD' \n        or 'unsolicitedGrantService(6)', \n        and it is mandatory when applicable. Both CMTS \n        and CM report the signaled value of the parameter \n        in this case.  \n        If the referenced parameter is not applicable to the \n        direction or scheduling type of the corresponding DOCSIS \n        QOS Parameter Set, both CMTS and CM report this \n        attribute's value as 0.")
docsQos3ParamSetGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetGrantsPerInterval.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Grants per  \n        Interval section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetGrantsPerInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetGrantsPerInterval.setDescription("This attribute specifies the number of data grants\n        per Nominal Grant Interval (NomGrantInterval). The \n        referenced parameter is applicable only for upstream \n        flows with a SchedulingType of 'unsolicitedGrantServicewithAD' \n        or 'unsolicitedGrantService', \n        and it is mandatory when applicable. Both CMTS and CM \n        report the signaled value of the parameter in this case. \n\n        If the referenced parameter is not applicable to the \n        direction or scheduling type of the corresponding DOCSIS \n        QOS Parameter Set, both CMTS and CM report this \n        attribute's value as 0.")
docsQos3ParamSetTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTosAndMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IP Type Of Service \n        (DSCP) Overwrite section in the Common Radio Frequency  \n        Interface Encodings Annex; [RFC 3168]; [RFC 3260]; \n        [RFC 2460]; [RFC 791].')
if mibBuilder.loadTexts: docsQos3ParamSetTosAndMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetTosAndMask.setDescription("This attribute specifies the AND mask for the IP TOS\n        byte for overwriting an IPv4 packet's TOS value or IPv6 \n        packet's Traffic Class value. The IP packet TOS byte \n        is bitwise ANDed with TosAndMask, then the result \n        is bitwise ORed with TosORMask and the result is written \n        to the IP packet TOS byte. \n        A value of 'FF'H for TosAndMask and a value of '00'H for \n        TosOrMask means that the IP Packet TOS byte is not overwritten. \n\n        This combination is reported if the referenced parameter \n        is not present in a QOS Parameter Set. \n        The IP TOS octet as originally defined in RFC 791 has been \n        superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit Congestion \n        Notification Field (ECN field, RFC 3168). \n        The IPv6 Traffic Class octet RFC 2460 is consistent with \n        that new definition. \n        Network operators SHOULD avoid specifying values of \n        TosAndMask and TosORMask that would result in the modification \n        of the ECN bits. \n        In particular, operators should not use values of TosAndMask \n        that have either of the least-significant \n        two bits set to 0. Similarly, operators should not use \n        values of TosORMask that have either of the least-significant \n        two bits set to 1. \n        Even though this attribute is only enforced by the CMTS, \n        the CM reports the value as signaled in the referenced \n        parameter.")
docsQos3ParamSetTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetTosOrMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, IP Type Of Service \n        (DSCP) Overwrite section in the Common Radio Frequency  \n        Interface Encodings Annex; [RFC 3168]; [RFC 3260]; \n        [RFC 2460]; [RFC 791].')
if mibBuilder.loadTexts: docsQos3ParamSetTosOrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetTosOrMask.setDescription('This attribute specifies the OR mask for the IPv4 TOS\n        value or IPv6 Traffic Class value. See the description \n        of TosAndMask for further details.  \n        The IP TOS octet, as originally defined in RFC 791 has \n        been superseded by the 6-bit Differentiated Services \n        Field (DSField, RFC 3260) and the 2-bit Explicit Congestion \n        Notification Field (ECN field, RFC 3168). \n        The IPv6 Traffic Class octet RFC 2460 is consistent \n        with that new definition. \n        Network operators SHOULD avoid specifying values of \n        TosAndMask and TosORMask that would result in the modification \n        of the ECN bits.')
docsQos3ParamSetMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 22), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxLatency.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Downstream \n        Latency section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxLatency.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxLatency.setDescription('This attribute specifies the maximum latency between\n        the reception of a packet by the CMTS on its NSI and \n        the forwarding of the packet to the RF interface. A value \n        of 0 signifies no maximum latency is enforced. This \n        attribute only applies to downstream Service Flows. \n\n        If the referenced parameter is not present in the corresponding \n        downstream DOCSIS QOS Parameter Set, this \n        attribute returns 0. This parameter is not applicable \n        to upstream DOCSIS QOS Parameter Sets, so its value \n        is reported as 0 in that case.')
docsQos3ParamSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("admitted", 2), ("provisioned", 3))))
if mibBuilder.loadTexts: docsQos3ParamSetType.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow \n        Scheduling Type section in the Common Radio Frequency  \n        Interface Encodings Annex; [RFC 4323].')
if mibBuilder.loadTexts: docsQos3ParamSetType.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetType.setDescription("This key represents the QoS Parameter Set Type of the\n        Service Flow. \n        The following values are defined:  \n        'active'  \n        Indicates the Active QOS parameter set, describing \n        the service currently being provided by the DOCSIS MAC \n        domain to the service flow.  \n        'admitted'  \n        Indicates the Admitted QOS Parameter Set, describing \n        services reserved by the DOCSIS MAC domain for use \n        by the service flow.  \n        'provisioned'  \n        Indicates the QOS Parameter Set defined in the DOCSIS \n        CM Configuration file for the service flow.")
docsQos3ParamSetRequestPolicyOct = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetRequestPolicyOct.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Request/  \n        Transmission Policy section in the Common Radio Frequency  \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetRequestPolicyOct.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetRequestPolicyOct.setDescription("This attribute specifies which transmit interval\n        opportunities the CM omits for upstream transmission \n        requests and packet transmissions. This object \n        takes its default value for downstream Service Flows. \n        Unless otherwise indicated, a bit value of 1 means \n        that a CM must not use that opportunity for upstream transmission. \n\n        The format of this string enumerated the bits from 0 to \n        31 from left to right, for example bit 0 corresponds \n        to the left most bit of the fourth octet. (octets numbered \n        from right to left). The bit positions are defined \n        as follows: \n           'broadcastReqOpp' \n               all CMs broadcast request opportunities \n           'priorityReqMulticastReq'  \n               priority request multicast request opportunities \n           'reqDataForReq'  \n               request/data opportunities for requests \n           'reqDataForData'  \n               request/data opportunities for data  \n           'piggybackReqWithData'  \n               piggyback requests with data \n           'concatenateData' \n               concatenate data \n           'fragmentData' \n               fragment data \n           'suppressPayloadHeaders'  \n               suppress payload headers \n           'dropPktsExceedUGSize' \n               A value of 1 means that the service flow must drop \n               packets that do not fit in the Unsolicited Grant size. \n\n        If the referenced parameter is not present in a QOS Parameter \n        Set, the value of this object is reported as '00000000'H.")
docsQos3ParamSetBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 25), Bits().clone(namedValues=NamedValues(("trafficPriority", 0), ("maxTrafficRate", 1), ("maxTrafficBurst", 2), ("minReservedRate", 3), ("minReservedPkt", 4), ("activeTimeout", 5), ("admittedTimeout", 6), ("maxConcatBurst", 7), ("schedulingType", 8), ("requestPolicy", 9), ("nomPollInterval", 10), ("tolPollJitter", 11), ("unsolicitGrantSize", 12), ("nomGrantInterval", 13), ("tolGrantJitter", 14), ("grantsPerInterval", 15), ("tosOverwrite", 16), ("maxLatency", 17), ("requiredAttrMask", 18), ("forbiddenAttrMask", 19), ("attrAggrMask", 20), ("applicationId", 21), ("multipCntnReqWindow", 22), ("multipBytesReq", 23), ("maxReqPerSidCluster", 24), ("maxOutstandingBytesPerSidCluster", 25), ("maxTotalBytesReqPerSidCluster", 26), ("maximumTimeInSidCluster", 27), ("peakTrafficRate", 28), ("dsResequencing", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetBitMap.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow  \n        Encodings section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetBitMap.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetBitMap.setDescription("This attribute indicates the set of QOS Parameter\n        Set parameters actually signaled in the DOCSIS registration \n        or dynamic service request message that created \n        or modified the QOS Parameter Set. A bit is set to \n        1 when the associated parameter is present in the original \n        request as follows: \n         'trafficPriority'  Traffic Priority \n         'maxTrafficRate'  Maximum Sustained Traffic Rate \n\n         'maxTrafficBurst'  Maximum Traffic Burst \n         'minReservedRate'  Minimum Reserved Traffic Rate \n\n         'minReservedPkt'  Assumed Minimum Reserved Rate Packet \n        Size \n         'activeTimeout'  Timeout for Active QoS Parameters \n\n         'admittedTimeout'  Timeout for Admitted QoS Parameters \n\n         'maxConcatBurst'  Maximum Concatenated Burst \n         'schedulingType'  Service Flow Scheduling Type \n         'requestPolicy'  Request/Transmission Policy \n         'nomPollInterval'  Nominal Polling Interval \n         'tolPollJitter'  Tolerated Poll Jitter \n         'unsolicitGrantSize'  Unsolicited Grant Size \n         'nomGrantInterval'  Nominal Grant Interval \n         'tolGrantJitter'  Tolerated Grant Jitter \n         'grantsPerInterval'  Grants per Interval \n         'tosOverwrite'  IP Type of Service (DSCP) Overwrite \n         'maxLatency'  Maximum Downstream Latency \n         'requiredAttrMask'  Service Flow Required Attribute \n                              Mask \n         'forbiddenAttrMask  Service Flow Forbidden Attribute \n                              Mask \n         'attrAggrMask'  Service Flow Attribute Aggregation \n                          Mask \n         'applicationId'  Application Identifier \n         'multipCntnReqWindow'  Multiplier to Contention \n                                 Request Backoff Window \n         'multipBytesReq'  Multiplier to Number of Bytes Requested \n         'maxReqPerSidCluster'  Maximum Requests per SID Cluster \n         'maxOutstandingBytesPerSidCluster'  Maximum Outstanding \n                                              Bytes per SID Cluster \n         'maxTotalBytesReqPerSidCluster'  Maximum Total \n                                           Bytes Requested per SID \n                                           Cluster \n         'maximumTimeInSidCluster'  Maximum Time in the SID Cluster \n         'peakTrafficRate'  Downstream Peak Traffic Rate \n         'dsResequencing'    Downstream Resequencing \n\n        Note that when Service Class names are expanded, the \n        registration or dynamic response message may contain \n        parameters expanded by the CMTS based on a stored service \n        class. These expanded parameters are not indicated \n        by a 1 bit in this attribute. \n        Note that even though some QOS Parameter Set parameters \n        may not be signaled in a message (so that the parameter's \n        bit in this object is 0), the DOCSIS specification \n        requires that default values be used. These default \n        values are reported as the corresponding attribute.")
docsQos3ParamSetServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3ParamSetServiceFlowId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service \n        Identifier section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetServiceFlowId.setDescription('This key represents the Service Flow ID for the service\n        flow.')
docsQos3ParamSetRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 27), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetRequiredAttrMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow Required  \n        Attribute Mask section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetRequiredAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetRequiredAttrMask.setDescription("This attribute specifies the Required Attribute\n        Mask to compare with the Provisioned Required Attributes \n        when selecting the bonding groups for the service \n        flow.          \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute returns '00000000'H.")
docsQos3ParamSetForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 28), AttributeMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetForbiddenAttrMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow Forbidden \n        Attribute Mask section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetForbiddenAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetForbiddenAttrMask.setDescription("This attribute specifies the Forbidden Attribute\n        Mask to compare with the Provisioned Forbidden Attributes \n        when selecting the bonding groups for the service \n        flow. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute returns '00000000'H.")
docsQos3ParamSetAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 29), AttrAggrRuleMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAttrAggrRuleMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow  \n        Attribute Aggregation Mask section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetAttrAggrRuleMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetAttrAggrRuleMask.setDescription("This attribute specifies the Attribute Aggregation\n        Mask to compare the Service Flow Required and Forbidden \n        Attributes with the CMTS dynamically-created \n        bonding group when selecting the bonding groups for \n        the service flow. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute returns '00000000'H.")
docsQos3ParamSetAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetAppId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Application  \n        Identifier section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetAppId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetAppId.setDescription('This attribute represents the Application Identifier\n        associated with the service flow for purposes beyond the  \n        scope of this specification. \n        If the referenced parameter is not present in the corresponding \n        DOCSIS QOS Parameter Set, this attribute returns 0.')
docsQos3ParamSetMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12))).setUnits('eighths').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierContentionReqWindow.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Multiplier to \n        Contention Request Backoff Window section in the Common \n        Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierContentionReqWindow.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierContentionReqWindow.setDescription('This attribute specifies the multiplier to be applied by a\n        CM when performing contention request backoff for data requests. \n        This attribute only applies to upstream Service Flows in 3.0  \n        operation. If the referenced parameter is not present in the \n        upstream DOCSIS QOS Parameter Set or is not applicable, this  \n        attribute returns 8.')
docsQos3ParamSetMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierBytesReq.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Multiplier \n        to Number of Bytes Requested section in the Common  \n        Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierBytesReq.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMultiplierBytesReq.setDescription('This attribute specifies the assumed bandwidth request\n        multiplier. This attribute only applies to upstream Service  \n        Flows in 3.0 operation. If the referenced parameter is not \n        present in the upstream DOCSIS QOS Parameter Set, or is not \n        applicable, this attribute returns 4.')
docsQos3ParamSetMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 33), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxReqPerSidCluster.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n             Specification CM-SP-MULPIv3.0-I05-070803, Maximum Requests \n        per SID Cluster section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxReqPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxReqPerSidCluster.setDescription('This attribute specifies the maximum number of requests\n        that a CM can make within a given SID Cluster before it must \n        switch to a different SID Cluster to make further requests. \n        A value of 0 indicates there is no limit.  \n\n        This attribute only applies to upstream Service Flows in 3.0 \n        operation, in other cases it is reported as 0. If the  \n        referenced parameter is not present in the DOCSIS QOS  \n        Parameter Set, this attribute returns 0.')
docsQos3ParamSetMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxOutstandingBytesPerSidCluster.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum  \n        Outstanding Bytes per SID Cluster section in the Common \n        Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxOutstandingBytesPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxOutstandingBytesPerSidCluster.setDescription('This attribute specifies the maximum number of bytes\n        for which a CM can have requests outstanding on a given \n        SID Cluster. If defined number of bytes are outstanding  \n        and further requests are required, the CM must switch to \n        a different SID Cluster if one is available. A value of 0 \n        indicates there is no limit. \n\n        This attribute only applies to upstream Service Flows in 3.0 \n        operation, in other cases it is reported as 0.  \n        If the referenced parameter is not present in the DOCSIS QOS \n        Parameter Set, this attribute returns 0.')
docsQos3ParamSetMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 35), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTotBytesReqPerSidCluster.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Total Bytes \n        Requested per SID Cluster section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTotBytesReqPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTotBytesReqPerSidCluster.setDescription('This attribute specifies the maximum total number of bytes\n        a CM can have requested using a given SID Cluster before it \n        must switch to a different SID Cluster to make further  \n        requests. A value of 0 indicates there is no limit.  \n\n        This attribute only applies to upstream Service Flows in 3.0 \n        operation, in other cases it is reported as 0.  \n        If the referenced parameter is not present in the DOCSIS QOS \n        Parameter Set, this attribute returns 0.')
docsQos3ParamSetMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetMaxTimeInSidCluster.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Maximum Time in \n        the SID Cluster section in the Common Radio Frequency  \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTimeInSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetMaxTimeInSidCluster.setDescription('This attribute specifies the maximum time in milliseconds\n        that a CM may use a particular SID Cluster before it must \n        switch to a different SID Cluster to make further requests. \n        A value of 0 indicates there is no limit. \n\n        This attribute only applies to upstream Service Flows in 3.0 \n        operation, in other cases it is reported as 0.  \n        If the referenced parameter is not present in the DOCSIS QOS  \n        Parameter Set, this attribute returns 0.')
docsQos3ParamSetPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 37), Unsigned32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetPeakTrafficRate.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Downstream \n        Peak Traffic Rage section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetPeakTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetPeakTrafficRate.setDescription("This attribute specifies the rate parameter 'P' of a\n        token-bucket-based peak rate limiter for packets of a  \n        downstream service flow. A value of 0 signifies no  \n        Downstream Peak Traffic Rate is enforced. \n\n        This attribute only applies to downstream Service Flows. \n        If the referenced parameter is not present in the  \n        corresponding downstream DOCSIS QOS Parameter Set,  \n        this attribute returns 0. \n        This parameter is not applicable to upstream DOCSIS QOS \n        Parameter Sets, so its value is reported as 0 in that case.")
docsQos3ParamSetDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resequencingDsid", 0), ("noResequencingDsid", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ParamSetDsResequencing.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Downstream \n        Peak Traffic Rage section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ParamSetDsResequencing.setStatus('current')
if mibBuilder.loadTexts: docsQos3ParamSetDsResequencing.setDescription("This attribute specifies if a resequending DSID need to be\n        allocated to the service flow.  \n        The value 'resequencingDsid'  indicates that a resequencing DSID \n        is required if the service flow is assigned to a downstream \n        bonding group. \n        The value 'noResequencingDsid' indicates no resequencing DSID \n        is associated with the service flow. \n\n        This attribute only applies to downstream Service Flows in 3.0  \n        operation. If the referenced parameter is not present in the \n        corresponding downstream DOCSIS QOS Parameter Set, this  \n        attribute returns 0. This parameter is not applicable to  \n        upstream DOCSIS QOS Parameter Sets, so its value is reported \n        as 0 in that case.")
docsQos3ServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3), )
if mibBuilder.loadTexts: docsQos3ServiceFlowTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803,  Service  \n        lows and Classifiers section.')
if mibBuilder.loadTexts: docsQos3ServiceFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowTable.setDescription('This object describes the set of DOCSIS-QOS Service\n        Flows in a managed device.')
docsQos3ServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowEntry.setDescription('The conceptual row of docsQos3ServiceFlowTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of this service flow.')
docsQos3ServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsQos3ServiceFlowId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow  \n        Identifier section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowId.setDescription('This key represents an identifier assigned to a Service\n        Flow by CMTS within a MAC Domain. \n        The value 0 is used only for the purpose of reporting instances \n        of the PktClass object pertaining UDCs and \n        not used for association of QOS classifiers to service \n        flows.')
docsQos3ServiceFlowSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowSID.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service  \n        Identifier section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ServiceFlowSID.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSID.setDescription('Service Identifier (SID) assigned to an admitted\n        or active Service Flow.  This attribute \n        reports a value of 0 if a Service ID is not associated with \n        the Service Flow.  Only active \n        or admitted upstream Service Flows will have a Service \n        ID (SID).')
docsQos3ServiceFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 7), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowDirection.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowDirection.setDescription('This attribute represents the direction of the Service\n        Flow.')
docsQos3ServiceFlowPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPrimary.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowPrimary.setDescription('This attribute reflects whether Service Flow is the\n        primary \n        or a secondary Service Flow.')
docsQos3ServiceFlowParamSetTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 9), Bits().clone(namedValues=NamedValues(("active", 0), ("admitted", 1), ("provisioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowParamSetTypeStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service  \n        Flow Section.')
if mibBuilder.loadTexts: docsQos3ServiceFlowParamSetTypeStatus.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowParamSetTypeStatus.setDescription("This attribute represents the status of the service\n        flow based on the admission state. \n        'active' bit set to '1' indicates that the service flow \n        is active and that the corresponding QOS ParamSet \n        is stored in the CMTS. \n        'admitted' bit set to '1' indicates that the service \n        flow resources were reserved  and that the corresponding \n        QOS ParamSet is stored in the CMTS. \n        'provisioned' bit set to '1' indicates that the service \n        flow was defined in the CM config file and that the \n        corresponding QOS ParamSet is stored in the CMTS.")
docsQos3ServiceFlowChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 10), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowChSetId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowChSetId.setDescription('This attribute represents the Channel Set Id associated\n        with the service flow.')
docsQos3ServiceFlowAttrAssignSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowAttrAssignSuccess.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Flow \n        section.')
if mibBuilder.loadTexts: docsQos3ServiceFlowAttrAssignSuccess.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowAttrAssignSuccess.setDescription("If set to 'true', this attribute indicates that the\n        current channel set associated with the service flow \n        meets the Required and Forbidden Attribute Mask encodings.")
docsQos3ServiceFlowDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 3, 1, 12), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowDsid.setDescription('This attribute indicates the DSID associated with\n        the downstream service flow. downstream service flows \n        without a DSID or upstream Service Flows report \n        the value zero.')
docsQos3ServiceFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4), )
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsTable.setDescription('This object describes statistics associated with\n        the  Service Flows in a managed device.')
docsQos3ServiceFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowStatsEntry.setDescription('The conceptual row of docsQos3ServiceFlowStatsTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow.')
docsQos3ServiceFlowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowPkts.setDescription("For outgoing Service Flows, this attribute counts\n        the number of Packet Data PDUs forwarded to this Service \n        Flow.  For incoming upstream CMTS service flows, \n        this attribute counts the number of Packet Data PDUs \n        actually received on the Service Flow identified by \n        the SID for which the packet was scheduled.  CMs not classifying \n        downstream packets may report this attribute's \n        value as 0 for downstream Service Flows.  This \n        attribute does not count MAC-specific management \n        messages. \n\n        Particularly for UGS flows, packets sent on the primary \n        Service Flow in violation of the UGS grant size should \n        be counted only by the instance of this attribute \n        that is associated with the primary service flow. \n\n        Unclassified upstream user data packets (i.e., non- \n        MAC-management) forwarded to the primary upstream \n        Service Flow should be counted by the instance of this \n        attribute that is associated with the primary service \n        flow. \n\n        This attribute does include packets counted by  \n        ServiceFlowPolicedDelayPkts, but does not include packets \n        counted by ServiceFlowPolicedDropPkts and  \n        ServiceFlowPHSUnknowns. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3ServiceFlowOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowOctets.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowOctets.setDescription("This attribute indicates the count of the number of\n        octets from the byte after the MAC header HCS to the end \n        of the CRC for all packets counted in the ServiceFlowPkts \n        attribute for this row.  Note that this counts \n        the octets after payload header suppression and before \n        payload header expansion have been applied. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3ServiceFlowTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeCreated.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeCreated.setDescription('This attribute indicates the value of sysUpTime when\n        the service flow was created.')
docsQos3ServiceFlowTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeActive.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowTimeActive.setDescription("This attribute indicates the number of seconds that\n        the service flow has been active. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3ServiceFlowPHSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPHSUnknowns.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowPHSUnknowns.setDescription("For incoming upstream CMTS service flows, this attribute\n        counts the number of packets received with an \n        unknown payload header suppression index. \n        The service flow is identified by the SID for which the \n        packet was scheduled. \n        On a CM, only this attribute's instance for the primary \n        downstream service flow counts packets received \n        with an unknown payload header suppression index.  All \n        other downstream service flows on CM report this attributes \n        value as 0. \n        All outgoing service flows report this attribute's \n        value as 0. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3ServiceFlowPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDropPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDropPkts.setDescription("For outgoing service flows, this attribute counts\n        the number of Packet Data PDUs classified to this service \n        flow dropped due to: \n        (1) implementation-dependent excessive delay while \n        enforcing the Maximum Sustained Traffic Rate; or \n\n        (2) UGS packets dropped due to exceeding the Unsolicited \n        Grant Size with a Request/Transmission policy \n        that requires such packets to be dropped. \n\n        Classified packets dropped due to other reasons must \n        be counted in ifOutDiscards for the interface of this \n        service flow.  This attribute reports 0 for incoming \n        service flows. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3ServiceFlowPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 4, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDelayPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowPolicedDelayPkts.setDescription("This attribute counts only outgoing packets delayed\n        in order to maintain the Maximum Sustained Traffic \n        Rate.  This attribute will always report a value of \n        0 for UGS flows because the Maximum Sustained Traffic \n        Rate does not apply.  This attribute is 0 for incoming \n        service flows. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3UpstreamStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5), )
if mibBuilder.loadTexts: docsQos3UpstreamStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpstreamStatsTable.setDescription('This object describes statistics associated with\n        upstream service flows.  All counted frames must be \n        received without a Frame Check Sequence (FCS) error.')
docsQos3UpstreamStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3SID"))
if mibBuilder.loadTexts: docsQos3UpstreamStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpstreamStatsEntry.setDescription('The conceptual row of docsQos3UpstreamStatsTable.\n        The ifIndex key corresponds to the upstream logical channel  \n        interface of the service flow.')
docsQos3SID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsQos3SID.setStatus('current')
if mibBuilder.loadTexts: docsQos3SID.setDescription('This key identifies a service ID for an admitted\n        or active upstream service flow.')
docsQos3UpstreamFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 2), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamFragments.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpstreamFragments.setDescription("This attribure indicates the number of fragmentation\n        headers received on an upstream service flow, regardless \n        of whether the fragment was correctly reassembled \n        into a valid packet. \n\n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3UpstreamFragDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 3), Counter32()).setUnits('fragments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamFragDiscards.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpstreamFragDiscards.setDescription("This attribute indicates the number of upstream fragments\n        discarded and not assembled into a valid upstream \n        packet.  \n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3UpstreamConcatBursts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 5, 1, 4), Counter32()).setUnits('headers').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpstreamConcatBursts.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpstreamConcatBursts.setDescription("This attribute indicates the number of concatenation\n        headers received on an upstream service flow. \n        This counter's last discontinuity is the  \n        ifCounterDiscontinuityTime for of the associated MAC Domain \n        interface index.")
docsQos3DynamicServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6), )
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsTable.setDescription('This object describes statistics associated with\n        the Dynamic Service Flows, Dynamic Channel Changes \n        and Dynamic Bonding Changes in a managed device within \n        a MAC Domain. \n        For each MAC Domain there are two instances for the for \n        the upstream and downstream \n        direction. \n        On the CMTS, the downstream direction instance indicates \n        messages transmitted or transactions originated \n        by the CMTS.  The upstream direction intance indicates \n        messages received or transaction originated \n        by the CM. \n        On the CM, the downstream direction instance indicates \n        messages received or transactions originated by \n        the CMTS.  The upstream direction instance indicates \n        messages transmitted by the CM or transactions originated \n        by the CM.')
docsQos3DynamicServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3IfDirection"))
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicServiceStatsEntry.setDescription('The conceptual row of docsQos3DynamicServiceStatsTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow.')
docsQos3IfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsQos3IfDirection.setStatus('current')
if mibBuilder.loadTexts: docsQos3IfDirection.setDescription('This attribute indicates the interface direction\n        for the instance the statistics are collected.')
docsQos3DSAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSAReqs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Addition section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSAReqs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSAReqs.setDescription('This attribute indicates the number of Dynamic Service\n        Addition Requests, including retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DSARsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSARsps.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Addition section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSARsps.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSARsps.setDescription('The number of Dynamic Service Addition Responses,\n        including retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DSAAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSAAcks.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Addition section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSAAcks.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSAAcks.setDescription('The number of Dynamic Service Addition Acknowledgements,\n        including retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain  \n        interface index.')
docsQos3DSCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCReqs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Change section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSCReqs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSCReqs.setDescription('The number of Dynamic Service Change Requests, including\n        retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DSCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCRsps.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Change section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSCRsps.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSCRsps.setDescription('The number of Dynamic Service Change Responses, including\n        retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DSCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSCAcks.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Change section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSCAcks.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSCAcks.setDescription('The number of Dynamic Service Change Acknowledgements,\n        including retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DSDReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSDReqs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Delete section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSDReqs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSDReqs.setDescription('The number of Dynamic Service Delete Requests, including\n        retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain  \n        interface index.')
docsQos3DSDRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DSDRsps.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Delete section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DSDRsps.setStatus('current')
if mibBuilder.loadTexts: docsQos3DSDRsps.setDescription('The number of Dynamic Service Delete Responses, including\n        retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DynamicAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicAdds.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Addition section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicAdds.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicAdds.setDescription('The number of successful Dynamic Service Addition\n        transactions. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DynamicAddFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicAddFails.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Addition section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicAddFails.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicAddFails.setDescription('The number of failed Dynamic Service Addition transactions.\n\n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DynamicChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicChanges.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Change section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicChanges.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicChanges.setDescription('The number of successful Dynamic Service Change transactions.\n\n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DynamicChangeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicChangeFails.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Change section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicChangeFails.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicChangeFails.setDescription('The number of failed Dynamic Service Change transactions.\n\n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain  \n        interface index.')
docsQos3DynamicDeletes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicDeletes.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Delete section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicDeletes.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicDeletes.setDescription('The number of successful Dynamic Service Delete transactions.\n\n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DynamicDeleteFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DynamicDeleteFails.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Service \n        Delete section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DynamicDeleteFails.setStatus('current')
if mibBuilder.loadTexts: docsQos3DynamicDeleteFails.setDescription('The number of failed Dynamic Service Delete transactions.\n\n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCReqs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCReqs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCReqs.setDescription('The number of Dynamic Channel Change Request messages\n        traversing an interface.  This count is nonzero \n        only on downstream direction rows. This count should \n        include the number of retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRsps.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCRsps.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCRsps.setDescription('The number of Dynamic Channel Change Response messages\n        traversing an interface. This count is nonzero \n        only on upstream direction rows.  This count should \n        include the number of retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCAcks.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCAcks.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCAcks.setDescription('The number of Dynamic Channel Change Acknowledgement\n        messages traversing an interface.  This count is \n        nonzero only on downstream direction rows. This count \n        should include the number of retries. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCs.setDescription('The number of successful Dynamic Channel Change transactions.\n        This count is nonzero only on downstream \n        direction rows. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCFails.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCFails.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCFails.setDescription('The number of failed Dynamic Channel Change transactions.\n        This count is nonzero only on downstream direction \n        rows. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and at \n        other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DCCRspDeparts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRspDeparts.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCRspDeparts.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCRspDeparts.setDescription('This attribute contains the number of Dynamic Channel\n        Change Response (depart) messages. It only applies \n        to upstream direction. Discontinuities in the \n        value of this counter can occur at reinitialization \n        of the managed system, and at other times as indicated \n        by the value of ifCounterDiscontinuityTime of the \n        associated MAC Domain interface index.')
docsQos3DCCRspArrives = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DCCRspArrives.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Downstream \n        and/or Upstream Channel Changes section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DCCRspArrives.setStatus('current')
if mibBuilder.loadTexts: docsQos3DCCRspArrives.setDescription('This attribute contains the number of Dynamic Channel\n        Change Response (arrive) messages and should include \n        retries. It only applies to the upstream direction. \n        Discontinuities in the value of this counter \n        can occur at reinitialization of the managed system, \n        and at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DbcReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcReqs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcReqs.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcReqs.setDescription('This attribute contains the number of Dynamic Bonding\n        Change Requests, including retries. It only applies \n        to the upstream direction. Discontinuities in \n        the value of this counter can occur at reinitialization \n        of the managed system, and at other times as indicated \n        by the value of ifCounterDiscontinuityTime of \n        the associated MAC Domain interface index.')
docsQos3DbcRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcRsps.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcRsps.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcRsps.setDescription('This attribute contains the number of Dynamic Bonding\n        Change Responses, including retries. It only applies \n        to the upstream direction. Discontinuities \n        in the value of this counter can occur at reinitialization \n        of the managed system, and at other times as indicated \n        by the value of ifCounterDiscontinuityTime \n        of the associated MAC Domain interface index.')
docsQos3DbcAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcAcks.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcAcks.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcAcks.setDescription('This attribute contains the number of Dynamic Bonding\n        Change Acknowledgements, including retries. \n        It only applies to the downstream direction. Discontinuities \n        in the value of this counter can occur at reinitialization \n        of the managed system, and at other times \n        as indicated by the value of ifCounterDiscontinuityTime \n        of the associated MAC Domain interface index.')
docsQos3DbcSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcSuccesses.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcSuccesses.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcSuccesses.setDescription('This attribute contains the number of fully successful\n        Dynamic Bonding Change transactions. It only \n        applies to the downstream direction and does not include \n        DBC transactions that result in Partial Service. \n        Discontinuities in the value of this counter can occur \n        at reinitialization of the managed system, and \n        at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3DbcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcFails.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcFails.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcFails.setDescription('This attribute contains the number of failed Dynamic\n        Bonding Change transactions. It only applies to \n        the downstream direction. Note that Partial Service \n        is not considered a failed transaction. Discontinuities \n        in the value of this counter can occur at reinitialization \n        of the managed system, and at other times \n        as indicated by the value of ifCounterDiscontinuityTime \n        of the associated MAC Domain interface index.')
docsQos3DbcPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 6, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3DbcPartial.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Dynamic Bonding \n        Change (DBC) section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3DbcPartial.setStatus('current')
if mibBuilder.loadTexts: docsQos3DbcPartial.setDescription('This attribute contains the number of unsuccessful\n        Dynamic Bonding Change transactions that result \n        in Partial Service. IT only applies to the downstream \n        direction. Discontinuities in the value of this counter \n        can occur at reinitialization of the managed system, \n        and at other times as indicated by the value of \n        ifCounterDiscontinuityTime of the associated MAC \n        Domain interface index.')
docsQos3ServiceFlowLogTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7), )
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTable.setDescription('This object contains a log of the disconnected Service\n        Flows in a managed device.')
docsQos3ServiceFlowLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowLogIndex"))
if mibBuilder.loadTexts: docsQos3ServiceFlowLogEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogEntry.setDescription('The conceptual row of docsQos3ServiceFlowLogTable.')
docsQos3ServiceFlowLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIndex.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIndex.setDescription('This key indicates an unique index for a logged service\n        flow.')
docsQos3ServiceFlowLogIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogIfIndex.setDescription('This attribute indicates the MAC Domain Interface\n        index where the service flow was present.')
docsQos3ServiceFlowLogSFID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogSFID.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogSFID.setDescription('This attribute indicates the identifier assigned\n        to the service flow.')
docsQos3ServiceFlowLogCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogCmMac.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogCmMac.setDescription('This attribute indicates the MAC address of the cable\n        modem associated with the service flow.')
docsQos3ServiceFlowLogPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPkts.setDescription('This attribute indicates the final value of the Pkts\n        attribute in the ServiceFlowStats object for the \n        service flow.')
docsQos3ServiceFlowLogOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogOctets.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogOctets.setDescription('This attribute indicates the final value of the Pkts\n        attribute in the ServiceFlowStats object for the \n        service flow.')
docsQos3ServiceFlowLogTimeDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeDeleted.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeDeleted.setDescription('This attribute indicates the value of sysUpTime when\n        the service flow was deleted.')
docsQos3ServiceFlowLogTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeCreated.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeCreated.setDescription('This attribute indicates the value of sysUpTime when\n        the service flow was created.')
docsQos3ServiceFlowLogTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeActive.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogTimeActive.setDescription('This attribute indicates the total time that the service\n        flow was active.')
docsQos3ServiceFlowLogDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogDirection.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogDirection.setDescription('This attribute indicates the value of Service Flow\n        direction for the service flow.')
docsQos3ServiceFlowLogPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPrimary.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPrimary.setDescription("If set to 'true', this attribute indicates that the\n        Service Flow in the log was a Primary Service Flow, otherwise, \n        a Secondary Service Flow.")
docsQos3ServiceFlowLogServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogServiceClassName.setDescription('This attribute indicates the value of ServiceClassName\n        for the provisioned QOS Parameter Set of the service \n        flow.')
docsQos3ServiceFlowLogPolicedDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDropPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDropPkts.setDescription('This attribute indicates the final value of PolicedDropPkts\n        attribute of the ServiceFlowStats object \n        for the service flow.')
docsQos3ServiceFlowLogPolicedDelayPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDelayPkts.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogPolicedDelayPkts.setDescription('This attribute indicates the final value of PolicedDelayPkts\n        attribute of the ServiceFlowStats object \n        for the service flow.')
docsQos3ServiceFlowLogControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsQos3ServiceFlowLogControl.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowLogControl.setDescription("This attribute when set to 'destroy' removes this\n        instance from the object. \n        Reading this attribute returns the value 'active'.")
docsQos3ServiceClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8), )
if mibBuilder.loadTexts: docsQos3ServiceClassTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassTable.setDescription('This object describes a provisioned service class\n        on a CMTS. \n        Each object instance defines a template for certain \n        DOCSIS QOS Parameter Set values.  When a CM creates or \n        modifies an Admitted QOS Parameter Set for a Service \n        Flow, it may reference a Service Class Name instead of \n        providing explicit QOS Parameter \n        Set values.  In this case, the CMTS populates the QOS Parameter \n        Set with the applicable \n        corresponding values from the named Service Class. \n        Subsequent changes to a Service Class row do not affect \n        the QOS Parameter Set values of any service flows already \n        admitted.  \n        A service class template applies to only a single direction, \n        as indicated in the ServiceClassDirection \n        attribute.')
docsQos3ServiceClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3ServiceClassName"))
if mibBuilder.loadTexts: docsQos3ServiceClassEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassEntry.setDescription('The conceptual row of docsQos3ServiceClassTable.')
docsQos3ServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: docsQos3ServiceClassName.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Service Class \n        Name section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ServiceClassName.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassName.setDescription('This key indicates the Service Class Name associated\n        with this object instance.  DOCSIS specifies \n        that the maximum size is 16 ASCII characters including \n        a terminating zero.  The terminating zero is not \n        represented in this SnmpAdminString syntax attribute.')
docsQos3ServiceClassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassStatus.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassStatus.setDescription('The conceptual row status of this object.')
docsQos3ServiceClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassPriority.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassPriority.setDescription('This attribute is the template for the Priority attribute\n        of the QoS Parameter Set.')
docsQos3ServiceClassMaxTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 5), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficRate.setDescription('This attribute is the template for the MaxTrafficRate\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxTrafficBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 6), Unsigned32().clone(3044)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficBurst.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTrafficBurst.setDescription('This attribute is the template for the MaxTrafficBurst\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMinReservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 7), DOCSQOS3BitRate()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedRate.setDescription('This attribute is the template for the MinReservedRate\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMinReservedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedPkt.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMinReservedPkt.setDescription('This attribute is the template for the MinReservedPkt\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxConcatBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1522)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxConcatBurst.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxConcatBurst.setDescription('This attribute is the template for the MaxConcatBurst\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassNomPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 10), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassNomPollInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassNomPollInterval.setDescription('This attribute is the template for the NomPollInterval\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassTolPollJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 11), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTolPollJitter.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassTolPollJitter.setDescription('This attribute is the template for the TolPolJitter\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassUnsolicitGrantSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassUnsolicitGrantSize.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassUnsolicitGrantSize.setDescription('This attribute is the template for the UnsolicitGrantSize\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassNomGrantInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 13), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassNomGrantInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassNomGrantInterval.setDescription('This attribute is the template for the NomGrantInterval\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassTolGrantJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 14), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTolGrantJitter.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassTolGrantJitter.setDescription('This attribute is the template for the TolGrantJitter\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassGrantsPerInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setUnits('dataGrants').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassGrantsPerInterval.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassGrantsPerInterval.setDescription('This attribute is the template for the GrantsPerInterval\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 16), Unsigned32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxLatency.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxLatency.setDescription('This attribute is the template for the MaxLatency\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassActiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassActiveTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassActiveTimeout.setDescription('This attribute is the template for the ActiveTimeout\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassAdmittedTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(200)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAdmittedTimeout.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassAdmittedTimeout.setDescription('This attribute is the template for the AddmitedTimeout\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 19), SchedulingType().clone('bestEffort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassSchedulingType.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassSchedulingType.setDescription('This attribute is the template for the SchedulingType\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassRequestPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassRequestPolicy.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassRequestPolicy.setDescription('This attribute is the template for the ReqPolicyOct\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassTosAndMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTosAndMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassTosAndMask.setDescription('This attribute is the template for the TosAndMask\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassTosOrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassTosOrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassTosOrMask.setDescription('This attribute is the template for the TosOrMask attribute\n        of the QoS Parameter Set.')
docsQos3ServiceClassDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 23), IfDirection().clone('upstream')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDirection.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassDirection.setDescription('This attribute is the template for the Direction attribute\n        of the QoS Parameter Set.')
docsQos3ServiceClassStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 24), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassStorageType.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassStorageType.setDescription("This attribute defines whether this row is kept in\n        volatile storage and lost upon reboot or whether \n        it is backed up by non-volatile or permanent storage. \n        'permanent' entries need not allow writable access to \n        any instance attribute.")
docsQos3ServiceClassDSCPOverwrite = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 25), DscpOrAny().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDSCPOverwrite.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassDSCPOverwrite.setDescription("This attribute allows the overwrite of the DSCP field\n        per RFC 3260. \n        If this attribute is -1, then the corresponding TosAndMask \n        value is set to be 'FF'H and TosOrMask is set to \n        '00'H.  Otherwise, this attribute is in the range of                     \n        0..63, \n        and the corresponding TosAndMask value is '03'H \n        and TosOrMaskvalue is this attribute value shifted \n        left by two bit positions.")
docsQos3ServiceClassRequiredAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 26), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassRequiredAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassRequiredAttrMask.setDescription('This attribute is the template for the RequiredAttrMask\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassForbiddenAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 27), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassForbiddenAttrMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassForbiddenAttrMask.setDescription('This attribute is the template for the ForbiddenAttrMask\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassAttrAggrRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 28), AttrAggrRuleMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAttrAggrRuleMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassAttrAggrRuleMask.setDescription('This attribute is the template for the AttrAggregationMask\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 29), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassAppId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassAppId.setDescription('This attribute is the template for the AppId attribute\n        of the QoS Parameter Set.')
docsQos3ServiceClassMultiplierContentionReqWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 12)).clone(8)).setUnits('eighths').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierContentionReqWindow.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierContentionReqWindow.setDescription('This attribute is the template for the MultiplierContentionReqWindow\n        attribute of the QoS Parameter \n        Set.')
docsQos3ServiceClassMultiplierBytesReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), )).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierBytesReq.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMultiplierBytesReq.setDescription('This attribute is the template for the MultiplierBytesReq\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('requests').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxReqPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxReqPerSidCluster.setDescription('This attribute is the template for the MaxReqPerSidCluster\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxOutstandingBytesPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 33), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxOutstandingBytesPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxOutstandingBytesPerSidCluster.setDescription('This attribute is the template for the MaxOutstandingBytesPerSidCluster\n        attribute of the QoS Parameter \n        Set.')
docsQos3ServiceClassMaxTotBytesReqPerSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 34), Unsigned32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTotBytesReqPerSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTotBytesReqPerSidCluster.setDescription('This attribute is the template for the MaxTotBytesReqPerSidCluster\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassMaxTimeInSidCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTimeInSidCluster.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassMaxTimeInSidCluster.setDescription('This attribute is the template for the MaxTimeInSidCluster\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassPeakTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 36), Unsigned32()).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassPeakTrafficRate.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassPeakTrafficRate.setDescription('This attribute is the template for the PeakTrafficRate\n        attribute of the QoS Parameter Set.')
docsQos3ServiceClassDsResequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resequencingDsid", 0), ("noResequencingDsid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3ServiceClassDsResequencing.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceClassDsResequencing.setDescription('This attribute is the template for the DsResequencing\n        attribute of the QoS Parameter Set.')
docsQos3PHSTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10), )
if mibBuilder.loadTexts: docsQos3PHSTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header \n        Suppression section in the Common Radio Frequency Interface \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSTable.setDescription('This object describes the set of payload header suppression\n        of Service Flows.')
docsQos3PHSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3PHSEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSEntry.setDescription('The conceptual row of docsQos3PHSTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow of the classifier that includes this \n        PHS rule.')
docsQos3PHSField = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSField.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header \n        Suppression Field (PHSF) section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSField.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSField.setDescription('This attribute indicates the Payload Header suppression\n        field defines the bytes of the header that must \n        be suppressed/restored by the sending/receiving \n        device. \n        The number of octets in this attribute should be the same \n        as the value of PHSSize.')
docsQos3PHSMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSMask.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header  \n        Suppression Mask (PHSM) section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSMask.setDescription("This attribute defines the bit mask that is used in\n        combination with the PHSField.  It defines which bytes \n        in the header must be suppressed/restored by the sending \n        or receiving device. \n\n        Each bit of this bit mask corresponds to a byte in the PHSField, \n        with the least \n        significant bit corresponding to the first byte of the \n        PHSField. \n\n        Each bit of the bit mask specifies whether the corresponding \n        byte should be suppressed in the packet.  A bit \n        value of '1' indicates that the byte should be suppressed \n        by the sending device and restored by the receiving \n        device. \n        A bit value of '0' indicates that the byte should not be \n        suppressed by the sending device or restored by the \n        receiving device. \n        If the bit mask does not contain a bit for each byte in the \n        PHSField, then the bit mask is extended with bit values \n        of '1' to be the necessary length.")
docsQos3PHSSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSSize.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header Suppression \n        Size (PHSS) section in the Common Radio Frequency Interface  \n        Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSSize.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSSize.setDescription('This attribute specifies the number of bytes in the\n        header to be suppressed  and restored. \n        The value of this attribute matches the numberof bytes \n        in the Field attribute.')
docsQos3PHSVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSVerify.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header \n        Suppression Verification (PHSV) section in the Common Radio \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSVerify.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSVerify.setDescription("If 'true', this attribute indicates that the sender\n        must verify that the PHS Field \n        is the same as the content in the packet to be suppressed.")
docsQos3PHSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3PHSIndex.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Payload Header  \n        Suppression Index (PHSI) section in the Common Radio  \n        Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3PHSIndex.setStatus('current')
if mibBuilder.loadTexts: docsQos3PHSIndex.setDescription('This attribute uniquely references the PHS rule for\n        a given service flow.')
docsQos3CmtsMacToSrvFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11), )
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowTable.setDescription('This object provides the mapping of unicast service\n        flows with the cable modem the service flows belongs \n        to.')
docsQos3CmtsMacToSrvFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmtsCmMac"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsServiceFlowId"))
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsMacToSrvFlowEntry.setDescription('The conceptual row of docsQos3CmtsMacToSrvFlowTable.')
docsQos3CmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsQos3CmtsCmMac.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsCmMac.setDescription('This key represents the MAC address for the referenced\n        CM.')
docsQos3CmtsServiceFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: docsQos3CmtsServiceFlowId.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsServiceFlowId.setDescription('This key represents the identifier of the Service\n        Flow.')
docsQos3CmtsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 11, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsIfIndex.setDescription('This attribute represents the interface index of\n        the MAC domain of the Service Flow and where the CableModem \n        is registered.')
docsQos3ServiceFlowSidClusterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12), )
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803,  Service Flow SID \n        Cluster Assignments section in the Common Radio Frequency \n        Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterTable.setDescription('This object defines the SID clusters associated with\n        an upstream service flow.')
docsQos3ServiceFlowSidClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterId"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterUcid"))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterEntry.setDescription('The conceptual row of docsQos3ServiceFlowSidClusterTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow.')
docsQos3ServiceFlowSidClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterId.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, SID Cluster ID \n        section in the Common Radio Frequency Interface Encodings \n        Annex.')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterId.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterId.setDescription('This key represents the SID Cluster ID of the SID Cluster.')
docsQos3ServiceFlowSidClusterUcid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 2), ChId().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterUcid.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterUcid.setDescription('This key represents the upstream Channel ID mapped\n        to the corresponding SID.')
docsQos3ServiceFlowSidClusterSid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterSid.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowSidClusterSid.setDescription('This attribute represents the SID assigned to the\n        upstream channel in this SID Cluster.')
docsQos3GrpServiceFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13), )
if mibBuilder.loadTexts: docsQos3GrpServiceFlowTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, QoS Support \n        for Joined IP Multicast Traffic section.')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowTable.setDescription('This object provides extensions to the service flow\n        information for Group Service Flows (GSFs).')
docsQos3GrpServiceFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3GrpServiceFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowEntry.setDescription('The conceptual row of docsQos3GrpServiceFlowTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the group service flow.')
docsQos3GrpServiceFlowIsDef = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowIsDef.setReference('DOCSIS 3.0 Operations Support System Interface Specification \n        CM-SP-OSSIv3.0-I04-070803, Multicast Requirements Annex.')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowIsDef.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowIsDef.setDescription('This attribute indicates whether the GSF QOS Parameter\n        Set corresponds to the Default Group Service Flow.')
docsQos3GrpServiceFlowQosConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowQosConfigId.setReference('DOCSIS 3.0 Operations Support System Interface Specification \n        CM-SP-OSSIv3.0-I04-070803, Multicast Requirements Annex.')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowQosConfigId.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowQosConfigId.setDescription('This attribute indicates the Group QoS Configuration\n        (GQC) identifier used of the creation of this GSF. \n        The value zero indicates that the Service Flow is using \n        the default service flow.')
docsQos3GrpServiceFlowNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpServiceFlowNumSess.setReference('DOCSIS 3.0 Operations Support System Interface Specification \n        CM-SP-OSSIv3.0-I04-070803, Multicast Requirements Annex.')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowNumSess.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpServiceFlowNumSess.setDescription('This attribute indicates the number of sessions that\n        are configured in an aggregated Service Flow.  If \n        this is a single session replication, the value of this \n        attribute is 1.')
docsQos3GrpPktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14), )
if mibBuilder.loadTexts: docsQos3GrpPktClassTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, QoS Support for  \n        Joined IP Multicast Traffic section.')
if mibBuilder.loadTexts: docsQos3GrpPktClassTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpPktClassTable.setDescription('This object provides additional packet classification\n        information for Group Classifier References \n        (GCRs) in a Group Service Flow (GSF).')
docsQos3GrpPktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQos3PktClassId"))
if mibBuilder.loadTexts: docsQos3GrpPktClassEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpPktClassEntry.setDescription('The conceptual row of docsQos3GrpPktClassTable.\n        The ifIndex key corresponds to the MAC Domain interface of the  \n        service flow of this group classifier.')
docsQos3GrpPktClassGrpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3GrpPktClassGrpConfigId.setReference('DOCSIS 3.0 Operations Support System Interface Specification \n        CM-SP-OSSIv3.0-I04-070803, Multicast Requirements Annex.')
if mibBuilder.loadTexts: docsQos3GrpPktClassGrpConfigId.setStatus('current')
if mibBuilder.loadTexts: docsQos3GrpPktClassGrpConfigId.setDescription('This attribute indicates the GC identifier used of\n        the creation of this GSF.')
docsQos3UpChCounterExtTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15), )
if mibBuilder.loadTexts: docsQos3UpChCounterExtTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Channel  \n        Bonding section.')
if mibBuilder.loadTexts: docsQos3UpChCounterExtTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpChCounterExtTable.setDescription('This object provides extensions for service flow\n        statistics for fragmentation for channel bonding.')
docsQos3UpChCounterExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsQos3UpChCounterExtEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpChCounterExtEntry.setDescription('The conceptual row of docsQos3UpChCounterExtTable.\n        The ifIndex key corresponds to the upstream Channel Interface \n        of the service flow.')
docsQos3UpChCounterExtSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtValids.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream and \n        Downstream Common Aspects section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtValids.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtValids.setDescription('This attribute represents the total number segments\n        processed on this channel. Discontinuities in the \n        value of this counter can occur at reinitialization \n        of the managed system, and at other times as indicated \n        by the value of ifCounterDiscontinuityTime of the \n        associated MAC Domain interface index.')
docsQos3UpChCounterExtSgmtDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 15, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtDiscards.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Continuous  \n        Concatenation and Fragmentation section;[RFC 2863].')
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtDiscards.setStatus('current')
if mibBuilder.loadTexts: docsQos3UpChCounterExtSgmtDiscards.setDescription('This attribute represents the total number of discarded\n        segments on this channel due to segment HCS problems. \n        Discontinuities in the value of this counter \n        can occur at reinitialization of the managed system, \n        and at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3ServiceFlowCcfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16), )
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Continuous  \n        Concatenation and Fragmentation section.')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsTable.setDescription("This object provides upstream service flow statistics\n        for Continous Concatenation and Fragmentation \n        (CCF). \n        The CMTS MAY not instantate this object for service flows \n        that do not use CCF or return the zero value on individual \n        counter's statistics.")
docsQos3ServiceFlowCcfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsEntry.setDescription('The conceptual row of docsQos3ServiceFlowCcfStatsTable.\n        The ifIndex key corresponds to the MAC Domain interface  \n        of the service flow.')
docsQos3ServiceFlowCcfStatsSgmtValids = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 1), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtValids.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Continuous  \n        Concatenation and Fragmentation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtValids.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtValids.setDescription('This attribute contains the number of segments counted\n        on this service flow regardless of whether the \n        fragment was correctly reassembled into valid packets. \n        Discontinuities in the value of this counter can \n        occur at reinitialization of the managed system, and \n        at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3ServiceFlowCcfStatsSgmtLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 16, 1, 2), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtLost.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Continuous \n        Concatenation and Fragmentation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtLost.setStatus('current')
if mibBuilder.loadTexts: docsQos3ServiceFlowCcfStatsSgmtLost.setDescription('This attribute counts the number of segments which\n        the CMTS segment reassembly function determines were \n        lost. Discontinuities in the value of this counter \n        can occur at reinitialization of the managed system, \n        and at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3CmServiceUsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17), )
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream Data  \n        Transmission section.')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTable.setDescription('This object defines DOCSIS MAC services primitive\n        statistics of upstream service flows. In pre-3.0 DOCSIS \n        devices this statistics exists per SID for either \n        Cos or Qos services in the SNMP table docsIfCmServiceTable. \n\n        A 3.0 CM with CoS configuration (DOCSIS 1.0 mode) reports \n        the statistics defined in the SNMP table docsIfCmServiceTable. \n        A 3.0 CM with QoS configuration reports \n        this object regardless of whether Multiple Transmit \n        Channel is enabled or disabled.')
docsQos3CmServiceUsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3ServiceFlowId"))
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsEntry.setDescription('The conceptual row of docsQos3CmServiceUsStatsTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the service flow.')
docsQos3CmServiceUsStatsTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 1), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsImmed.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream  \n        Bandwidth Allocation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsImmed.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsImmed.setDescription('This attribute contains the number of upstream mini-slots\n        which have been used to transmit data PDUs in \n        immediate (contention) mode. This includes only those \n        PDUs that are presumed to have arrived at the head-end \n        (i.e., those which were explicitly acknowledged.) \n        It does not include retransmission attempts or \n        mini-slots used by Requests.  Discontinuities in the \n        value of this counter can occur at reinitialization \n        of the managed system, and at other times as indicated \n        by the value of ifCounterDiscontinuityTime of the \n        associated MAC Domain interface index.')
docsQos3CmServiceUsStatsTxSlotsDed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 2), Counter32()).setUnits('mini-slots').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsDed.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream Data \n        Transmission section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsDed.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxSlotsDed.setDescription('This attribute contains the number of upstream mini-slots\n        which have been used to transmit data PDUs in \n        dedicated mode (i.e., as a result of a unicast Data Grant). \n        Discontinuities in the value of this counter \n        can occur at reinitialization of the managed system, \n        and at other times as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated MAC Domain \n        interface index.')
docsQos3CmServiceUsStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 3), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxRetries.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream Bandwidth \n        Allocation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxRetries.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxRetries.setDescription('This attribute contains the number of attempts to\n        transmit data PDUs containing requests for acknowledgment \n        that did not result in acknowledgment. Discontinuities \n        in the value of this counter can occur at \n        reinitialization of the managed system, and at other \n        times as indicated by the value of ifCounterDiscontinuityTime \n        for the associated MAC Domain interface \n        index.')
docsQos3CmServiceUsStatsTxExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxExceededs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream Bandwidth \n        Allocation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxExceededs.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsTxExceededs.setDescription('This attribute contains the number of attempts to\n        transmit bandwidth requests which did not result in \n        acknowledgment. Discontinuities in the value of this \n        counter can occur at reinitialization of the managed \n        system, and at other times as indicated by the value \n        of ifCounterDiscontinuityTime of the associated \n        MAC Domain interface index.')
docsQos3CmServiceUsStatsRqRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 5), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqRetries.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream  \n        Bandwidth Allocation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqRetries.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqRetries.setDescription('This attribute contains the number of attempts to\n        transmit bandwidth requests which did not result in \n        acknowledgment. Discontinuities in the value of this \n        counter can occur at reinitialization of the managed \n        system, and at other times as indicated by the value \n        of ifCounterDiscontinuityTime of the associated \n        MAC Domain interface index.')
docsQos3CmServiceUsStatsRqExceededs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 6), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqExceededs.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream Bandwidth \n        Allocation section; [RFC 2863].')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqExceededs.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsRqExceededs.setDescription('This attribute contains the number of requests for\n        bandwidth which failed due to excessive retries without \n        acknowledgment. Discontinuities in the value \n        of this counter can occur at reinitialization of the \n        managed system, and at other times as indicated by the \n        value of ifCounterDiscontinuityTime of the associated \n        MAC Domain interface index.')
docsQos3CmServiceUsStatsSgmts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 17, 1, 7), Counter32()).setUnits('segments').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsSgmts.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Upstream and \n        Downstream Common Aspects section; RFC 2863.')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsSgmts.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmServiceUsStatsSgmts.setDescription('This attribute contains the number of segments sent\n        on this service flow. Discontinuities in the value \n        of this counter can occur at reinitialization of the \n        managed system, and at other times as indicated by the \n        value of ifCounterDiscontinuityTime of the associated \n        MAC Domain interface index.')
docsQos3CmtsDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18), )
if mibBuilder.loadTexts: docsQos3CmtsDsidTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidTable.setDescription('This object describes DSID information stored in\n        the CMTS. \n        The CMTS reports the current status of existing DSIDs. \n        When a DSID is created during the registration process \n        or a DBC transaction, a corresponding object instance \n        is created.   If a DSID is deleted or changed via \n        a DBC message the corresponding object instance is deleted \n        or updated respectively.')
docsQos3CmtsDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmtsDsidEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidEntry.setDescription('The conceptual row of docsQos3CmtsDsidTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the DSID.')
docsQos3CmtsDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmtsDsidDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidDsid.setDescription('This key represents the DSID.')
docsQos3CmtsDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1), ("multicastReplication", 2), ("bonding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidUsage.setReference('DOCSIS 3.0 Operations Support System Interface Specification \n        CM-SP-OSSIv3.0-I04-070803, Multicast Requirements Annex. \n        DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, DSID Encodings section \n        in the Common Radio Frequency Interface Encodings Annex.')
if mibBuilder.loadTexts: docsQos3CmtsDsidUsage.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidUsage.setDescription("This attribute indicates the properties of the DSID.\n        The bits are defined as follows: \n        'resequencing' This bit is set to 1 for a Resequencing \n        DSID. \n        'multicastCapable'  This bit is set to 1 for a DSID that \n        is capable of transporting multicast traffic (i.e., \n        the DSID has multicast forwarding attributes).   \n        'multicastReplication' This bit is set to 1 for a DSID \n        that is used for transporting a multicast replication \n        (i.e. there is a corresponding instance of the MulticastRepl \n        object). \n        'bonding' This bit is set to a 1 for a DSID that is associated \n        with a bonding group.")
docsQos3CmtsDsidDsChSet = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 3), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidDsChSet.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidDsChSet.setDescription('This attribute represents the Downstream Channel\n        Set over which the DSID is being resequenced.')
docsQos3CmtsDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWaitTime.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWaitTime.setDescription('This attribute represents the DSID Resequencing\n        Wait Time that is used for this DSID. This attribute is \n        only valid when the Usage attribute has the resequencing \n        bit set to 1. This attribute returns a value of 0 \n        when the Usage attribute has the resequencing bit set \n        to 0.')
docsQos3CmtsDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWarnThrshld.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidReseqWarnThrshld.setDescription('This attribute represents the DSID Resequencing\n        Warning Threshold that is used for this DSID. The value \n        of 0 indicates that the threshold warnings are disabled. \n        This attribute is only valid when the Usage attribute \n        has the resequencing bit set to 1. This attribute \n        returns a value of 0 when the Usage attribute has \n        the resequencing bit set to 0.')
docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng.setDescription('This attribute represents the hold-off timer for\n        reporting Out-of-Range Events via the CM-STATUS MAC \n        Management message. This attribute is only valid when \n        the Usage attribute has the resequencing bit set \n        to 1. This attribute returns a value of 0 when the Usage \n        attribute has the resequencing bit set to 0.')
docsQos3CmtsDsidCurrentSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 18, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDsidCurrentSeqNum.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDsidCurrentSeqNum.setDescription('This attribute reports the value of the most recent\n        sequence number assigned by the CMTS for this DSID. \n        This attribute is only valid when the Usage attribute \n        has the resequencing bit set to 1. This attribute returns \n        a value of 0 when the Usage attribute has the resequencing \n        bit set to 0.')
docsQos3CmtsDebugDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19), )
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidTable.setDescription('The CMTS Debug DSID object contains the control of\n        DSID debug statistics reporting  \n        An instance in this object defines the DSID and MAC domain \n        to which the CmtsDebugDsidStats collects statistics \n        for the downstream channel associated with that \n        DSID and MAC Domain. The deletion of an instance stops \n        the reporting of statistics for the specified DSID. \n\n        This object supports instance creation and deletion. \n\n        The CMTS MUST support at least one instance of this object.')
docsQos3CmtsDebugDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidEntry.setDescription('The conceptual row of docsQos3CmtsDebugDsidTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the DSID.')
docsQos3CmtsDebugDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidDsid.setDescription('This attribute represents the DSID value to be debugged,\n        identified by the IfIndex attribute of this object.')
docsQos3CmtsDebugDsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidRowStatus.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidRowStatus.setDescription('The conceptual row status of this object.')
docsQos3CmtsDebugDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20), )
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsTable.setDescription('The CMTS Debug DSID Stats object describes statistics\n        at the CMTS for the forwarding of DSID-labeled downstream \n        packets. \n        The CMTS creates an instance for every combination of \n        MAC Domain, DSID value, and downstream channel on which \n        packets labeled with that DSID are transmitted. \n        The CMTS does not delete such instances while the corresponding \n        CmtsDebug object control instance exists.')
docsQos3CmtsDebugDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidDsid"), (0, "DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsIfIndex"))
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsEntry.setDescription('The conceptual row of docsQos3CmtsDebugDsidStatsTable.\n        The ifIndex key corresponds to the MAC Domain interface \n        of the DSID.')
docsQos3CmtsDebugDsidStatsDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsIfIndex.setDescription('This key represents an interface index of a downstream\n        channel that belongs to the DSID')
docsQos3CmtsDebugDsidStatsDsidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidPackets.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidPackets.setDescription('This attribute is a counter which contains the number\n        of packets transmitted by the CMTS which are labeled \n        with the DSID on the downstream channel. Discontinuities in \n        the value of this counter can occur as indicated by the value \n        of ifCounterDiscontinuityTime of the associated Downstream \n        interface index.')
docsQos3CmtsDebugDsidStatsDsidOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 20, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidOctets.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsDebugDsidStatsDsidOctets.setDescription('This attribute counts the number of bytes transmitted\n        by the CMTS which are labeled with the DSID on the \n        downstream interface. Discontinuities in the value of \n        this counter can occur as indicated by the value of  \n        ifCounterDiscontinuityTime of the associated Downstream \n        interface index.')
docsQos3CmDsidTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21), )
if mibBuilder.loadTexts: docsQos3CmDsidTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidTable.setDescription('When a DSID is created, during the registration process\n        or a DBC transaction,. The CM reports the current \n        status of existing DSID, for example, if a DSID  is deleted \n        or changed via DBC messages the corresponding \n        object instance is deleted or updated respectively.')
docsQos3CmDsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQos3CmDsidDsid"))
if mibBuilder.loadTexts: docsQos3CmDsidEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidEntry.setDescription('The conceptual row of docsQos3CmDsidTable\n        The ifIndex key corresponds to the MAC Domain interface \n        of the DSID.')
docsQos3CmDsidDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidDsid.setDescription('This key represents the DSID.')
docsQos3CmDsidUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 2), Bits().clone(namedValues=NamedValues(("resequencing", 0), ("multicastCapable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidUsage.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidUsage.setDescription("This attribute indicates the properties of the DSID.\n        The bits are defined as follows: \n        'resequencing' :  This bit is set to 1 for a Resequencing \n        DSID. \n        'multicastCapable' :  This bit is set to 1 for a DSID that \n        is capable of transporting multicast traffic (e.g., \n        the DSID has multicast forwarding attributes).")
docsQos3CmDsidNumReseqChs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidNumReseqChs.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidNumReseqChs.setDescription('This attribute represents the number of channels\n        in the downstream resequencing channel list for this \n        DSID.')
docsQos3CmDsidReseqChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 4), ChannelList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqChList.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidReseqChList.setDescription('This attribute represents the Downstream Channel\n        Set over which the DSID is being resequenced.')
docsQos3CmDsidReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqWaitTime.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidReseqWaitTime.setDescription('This attribute represents the DSID Resequencing\n        Wait Time that is used for this DSID. This attribute is \n        only valid when the Usage attribute has the resequencing \n        bit set to 1. This attribute returns a value of 0 \n        when the Usage attribute has the resequencing bit set \n        to 0.')
docsQos3CmDsidReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 179))).setUnits('hundredMicroseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidReseqWarnThrshld.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidReseqWarnThrshld.setDescription('This attribute represents the DSID Resequencing\n        Warning Threshold that is used for this DSID. The value \n        of 0 indicates that the threshold warnings are disabled. \n        This attribute is only valid when the Usage attribute \n        has the resequencing bit set to 1. This attribute \n        returns a value of 0 when the Usage attribute has \n        the resequencing bit set to 0.')
docsQos3CmDsidStatusHldoffTimerSeqOutOfRng = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('20milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatusHldoffTimerSeqOutOfRng.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatusHldoffTimerSeqOutOfRng.setDescription('This attribute represents the hold-off timer for\n        reporting Out-of-Range Events via the CM-STATUS MAC \n        Management message. This attribute is only valid when \n        the Usage attribute has the resequencing bit set \n        to 1. This attribute returns a value of 0 when the Usage \n        attribute has the resequencing bit set to 0.')
docsQos3CmDsidOutOfRangeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidOutOfRangeDiscards.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidOutOfRangeDiscards.setDescription('This attribute represents the current count of out-of-range\n        packets discarded by the CM for a given resequencing context  \n        since an in-range packet was received.  When this count exceeds \n        1000 and more than two minutes have elapsed since an in-range  \n        packet was received, the CM will reacquire sequence numbers for \n        this resequencing context.')
docsQos3CmDsidNextExpectedSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidNextExpectedSeqNum.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidNextExpectedSeqNum.setDescription('This attribute represents the Next Expected Packet\n        Sequence Number for a given resequencing context. \n        This attribute is only valid when the Usage attribute \n        has the resequencing bit set to 1. This attribute returns \n        a value of 0 when the Usage attribute has the resequencing \n        bit set to 0.')
docsQos3CmDsidCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 10), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidCmInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidCmInterfaceMask.setDescription('This attribute represents the bitmap of the interfaces\n        communicated to the CM in a Multicast DSID encoding.')
docsQos3CmDsidFwdCmInterfaceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 21, 1, 11), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidFwdCmInterfaceMask.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidFwdCmInterfaceMask.setDescription('This attribute represents the bitmap of the interfaces\n        to which the CM forwards multicast traffic: a logical \n        OR of interfaces identified in CmInterfaceMask \n        and interfaces associated with the client MAC addresses \n        identified in the docsDevCmDsidMac instances \n        for this DSID.')
docsQos3CmDsidStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22), )
if mibBuilder.loadTexts: docsQos3CmDsidStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsTable.setDescription('This object defines a set of statistics the CM collects\n        per Dsid.')
docsQos3CmDsidStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmDsidStatsDsid"))
if mibBuilder.loadTexts: docsQos3CmDsidStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsEntry.setDescription('The conceptual row of docsQos3CmDsidStatsTable.')
docsQos3CmDsidStatsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidStatsDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsDsid.setDescription('This key represents the interface index of the MAC\n        Domain associated with the DSID.')
docsQos3CmDsidStatsSeqNumMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsSeqNumMissing.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Downstream  \n        Sequencing section.')
if mibBuilder.loadTexts: docsQos3CmDsidStatsSeqNumMissing.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsSeqNumMissing.setDescription('This attribute counts the number of times the Next Expected\n        Packet Sequence Number is declared lost. In this case one or \n        more data packets are lost. This is generally caused by  \n        downstream packet loss.')
docsQos3CmDsidStatsSkewThreshExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsSkewThreshExceeds.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Skew Requirements \n        section.')
if mibBuilder.loadTexts: docsQos3CmDsidStatsSkewThreshExceeds.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsSkewThreshExceeds.setDescription('This attribute counts in-range sequenced packets\n        which were successfully received by the CM after a wait \n        time longer than the Resequencing Warning Threshold.')
docsQos3CmDsidStatsOutOfRangePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsOutOfRangePackets.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, Receive Channels \n        section.')
if mibBuilder.loadTexts: docsQos3CmDsidStatsOutOfRangePackets.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsOutOfRangePackets.setDescription('This attribute counts the number of packets Counter\n        received in a DSID reassembly context where the sequence \n        number which is out of range.')
docsQos3CmDsidStatsNumPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 22, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidStatsNumPackets.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidStatsNumPackets.setDescription('This attribute counts the total number of data packets\n        of a DSID context forwarded for further processing.')
docsQos3CmDsidClientTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23), )
if mibBuilder.loadTexts: docsQos3CmDsidClientTable.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface \n        Specification CM-SP-MULPIv3.0-I05-070803, DSID Encodings \n        section in the Common Radio Frequency Interface Encodings \n        Annex.')
if mibBuilder.loadTexts: docsQos3CmDsidClientTable.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidClientTable.setDescription('This object contains the client MAC addresses that\n        the CMTS requests that the CM uses to replicate Multicast \n        DSIDs during registration or during a DBC transaction. \n\n        When a DSID is created that includes client MAC addresses, \n        or when client MAC addresses are added to a DSID, \n        new rows are created to indicate the added client MAC \n        addresses. When a Client MAC address is deleted from \n        a DSID, the corresponding row is deleted.  When a DSID \n        is deleted, all corresponding rows are deleted, too.')
docsQos3CmDsidClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1), ).setIndexNames((0, "DOCS-QOS3-MIB", "docsQos3CmDsidClientDsid"), (0, "DOCS-QOS3-MIB", "docsQos3CmDsidClientClientMacId"))
if mibBuilder.loadTexts: docsQos3CmDsidClientEntry.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidClientEntry.setDescription('The conceptual row of docsQos3CmDsidClientTable.')
docsQos3CmDsidClientDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 1), Dsid())
if mibBuilder.loadTexts: docsQos3CmDsidClientDsid.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidClientDsid.setDescription('This key defines the DSID that the client MAC addresses\n        are associated with.')
docsQos3CmDsidClientClientMacId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacId.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacId.setDescription('This key defines a uniquely identified Client Mac\n        Addresses associated with the DSID.')
docsQos3CmDsidClientClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 1, 23, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacAddr.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmDsidClientClientMacAddr.setDescription('This attribute defines a client MAC address to which\n        Multicast traffic labeled with this DSID should be \n        forwarded.')
docsQos3MibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2))
docsQos3MibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1))
docsQos3MibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2))
docsQos3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 1, 1)).setObjects(("DOCS-QOS3-MIB", "docsQos3BaseGroup"), ("DOCS-QOS3-MIB", "docsQos3CmtsGroup"), ("DOCS-QOS3-MIB", "docsQos3CmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3Compliance = docsQos3Compliance.setStatus('current')
if mibBuilder.loadTexts: docsQos3Compliance.setDescription('The compliance statement of managed objects common for Cable Modem\n        Termination Sytems (CMTS) and Cable Modems (CM).')
docsQos3BaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 1)).setObjects(("DOCS-QOS3-MIB", "docsQos3PktClassDirection"), ("DOCS-QOS3-MIB", "docsQos3PktClassPriority"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosLow"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosHigh"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpTosMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpProtocol"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpSourceAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpSourceMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpDestAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpDestMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourcePortStart"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourcePortEnd"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestPortStart"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestPortEnd"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestMacAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassDestMacMask"), ("DOCS-QOS3-MIB", "docsQos3PktClassSourceMacAddr"), ("DOCS-QOS3-MIB", "docsQos3PktClassEnetProtocolType"), ("DOCS-QOS3-MIB", "docsQos3PktClassEnetProtocol"), ("DOCS-QOS3-MIB", "docsQos3PktClassUserPriLow"), ("DOCS-QOS3-MIB", "docsQos3PktClassUserPriHigh"), ("DOCS-QOS3-MIB", "docsQos3PktClassVlanId"), ("DOCS-QOS3-MIB", "docsQos3PktClassState"), ("DOCS-QOS3-MIB", "docsQos3PktClassPkts"), ("DOCS-QOS3-MIB", "docsQos3PktClassBitMap"), ("DOCS-QOS3-MIB", "docsQos3PktClassIpAddrType"), ("DOCS-QOS3-MIB", "docsQos3PktClassFlowLabel"), ("DOCS-QOS3-MIB", "docsQos3PktClassCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetServiceClassName"), ("DOCS-QOS3-MIB", "docsQos3ParamSetPriority"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMinReservedRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQos3ParamSetActiveTimeout"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQos3ParamSetSchedulingType"), ("DOCS-QOS3-MIB", "docsQos3ParamSetNomPollInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTolPollJitter"), ("DOCS-QOS3-MIB", "docsQos3ParamSetUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQos3ParamSetNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQos3ParamSetGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTosAndMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetTosOrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxLatency"), ("DOCS-QOS3-MIB", "docsQos3ParamSetRequestPolicyOct"), ("DOCS-QOS3-MIB", "docsQos3ParamSetRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQos3ParamSetAppId"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ParamSetPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ParamSetDsResequencing"), ("DOCS-QOS3-MIB", "docsQos3ParamSetBitMap"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowSID"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPrimary"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowParamSetTypeStatus"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowChSetId"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowAttrAssignSuccess"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowDsid"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowOctets"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowTimeCreated"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowTimeActive"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPHSUnknowns"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQos3DSAReqs"), ("DOCS-QOS3-MIB", "docsQos3DSARsps"), ("DOCS-QOS3-MIB", "docsQos3DSAAcks"), ("DOCS-QOS3-MIB", "docsQos3DSCReqs"), ("DOCS-QOS3-MIB", "docsQos3DSCRsps"), ("DOCS-QOS3-MIB", "docsQos3DSCAcks"), ("DOCS-QOS3-MIB", "docsQos3DSDReqs"), ("DOCS-QOS3-MIB", "docsQos3DSDRsps"), ("DOCS-QOS3-MIB", "docsQos3DynamicAdds"), ("DOCS-QOS3-MIB", "docsQos3DynamicAddFails"), ("DOCS-QOS3-MIB", "docsQos3DynamicChanges"), ("DOCS-QOS3-MIB", "docsQos3DynamicChangeFails"), ("DOCS-QOS3-MIB", "docsQos3DynamicDeletes"), ("DOCS-QOS3-MIB", "docsQos3DynamicDeleteFails"), ("DOCS-QOS3-MIB", "docsQos3DCCReqs"), ("DOCS-QOS3-MIB", "docsQos3DCCRsps"), ("DOCS-QOS3-MIB", "docsQos3DCCAcks"), ("DOCS-QOS3-MIB", "docsQos3DCCs"), ("DOCS-QOS3-MIB", "docsQos3DCCFails"), ("DOCS-QOS3-MIB", "docsQos3DCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQos3DCCRspArrives"), ("DOCS-QOS3-MIB", "docsQos3DCCRspDeparts"), ("DOCS-QOS3-MIB", "docsQos3DCCRspArrives"), ("DOCS-QOS3-MIB", "docsQos3DbcReqs"), ("DOCS-QOS3-MIB", "docsQos3DbcRsps"), ("DOCS-QOS3-MIB", "docsQos3DbcAcks"), ("DOCS-QOS3-MIB", "docsQos3DbcSuccesses"), ("DOCS-QOS3-MIB", "docsQos3DbcFails"), ("DOCS-QOS3-MIB", "docsQos3DbcPartial"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowSidClusterSid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3BaseGroup = docsQos3BaseGroup.setStatus('current')
if mibBuilder.loadTexts: docsQos3BaseGroup.setDescription('Group of objects implemented in both CM and CMTS.')
docsQos3CmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 2)).setObjects(("DOCS-QOS3-MIB", "docsQos3UpstreamFragments"), ("DOCS-QOS3-MIB", "docsQos3UpstreamFragDiscards"), ("DOCS-QOS3-MIB", "docsQos3UpstreamConcatBursts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogIfIndex"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogSFID"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogCmMac"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogOctets"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeDeleted"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeCreated"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogTimeActive"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPrimary"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogServiceClassName"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPolicedDropPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogPolicedDelayPkts"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowLogControl"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassStatus"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassPriority"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTrafficBurst"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMinReservedRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMinReservedPkt"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxConcatBurst"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassNomPollInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTolPollJitter"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassUnsolicitGrantSize"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassNomGrantInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTolGrantJitter"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassGrantsPerInterval"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxLatency"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassActiveTimeout"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAdmittedTimeout"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassSchedulingType"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassRequestPolicy"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTosAndMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassTosOrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDirection"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassStorageType"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDSCPOverwrite"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassRequiredAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassForbiddenAttrMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAttrAggrRuleMask"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassAppId"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMultiplierContentionReqWindow"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMultiplierBytesReq"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxOutstandingBytesPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTotBytesReqPerSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassMaxTimeInSidCluster"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassPeakTrafficRate"), ("DOCS-QOS3-MIB", "docsQos3ServiceClassDsResequencing"), ("DOCS-QOS3-MIB", "docsQos3CmtsIfIndex"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowIsDef"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowQosConfigId"), ("DOCS-QOS3-MIB", "docsQos3GrpServiceFlowNumSess"), ("DOCS-QOS3-MIB", "docsQos3GrpPktClassGrpConfigId"), ("DOCS-QOS3-MIB", "docsQos3UpChCounterExtSgmtValids"), ("DOCS-QOS3-MIB", "docsQos3UpChCounterExtSgmtDiscards"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowCcfStatsSgmtValids"), ("DOCS-QOS3-MIB", "docsQos3ServiceFlowCcfStatsSgmtLost"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidUsage"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidDsChSet"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQos3CmtsDsidCurrentSeqNum"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidRowStatus"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsidPackets"), ("DOCS-QOS3-MIB", "docsQos3CmtsDebugDsidStatsDsidOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3CmtsGroup = docsQos3CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmtsGroup.setDescription('Group of objects implemented in the CMTS only.')
docsQos3CmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 21, 2, 2, 3)).setObjects(("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxSlotsImmed"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxSlotsDed"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxRetries"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsTxExceededs"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsRqRetries"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsRqExceededs"), ("DOCS-QOS3-MIB", "docsQos3CmServiceUsStatsSgmts"), ("DOCS-QOS3-MIB", "docsQos3CmDsidUsage"), ("DOCS-QOS3-MIB", "docsQos3CmDsidNumReseqChs"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqChList"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqWaitTime"), ("DOCS-QOS3-MIB", "docsQos3CmDsidReseqWarnThrshld"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatusHldoffTimerSeqOutOfRng"), ("DOCS-QOS3-MIB", "docsQos3CmDsidOutOfRangeDiscards"), ("DOCS-QOS3-MIB", "docsQos3CmDsidNextExpectedSeqNum"), ("DOCS-QOS3-MIB", "docsQos3CmDsidCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3CmDsidFwdCmInterfaceMask"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsSeqNumMissing"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsSkewThreshExceeds"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsOutOfRangePackets"), ("DOCS-QOS3-MIB", "docsQos3CmDsidStatsNumPackets"), ("DOCS-QOS3-MIB", "docsQos3CmDsidClientClientMacAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsQos3CmGroup = docsQos3CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsQos3CmGroup.setDescription('Group of objects implemented in the CM only.')
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQos3ServiceFlowPolicedDropPkts=docsQos3ServiceFlowPolicedDropPkts, docsQos3ParamSetNomGrantInterval=docsQos3ParamSetNomGrantInterval, docsQos3ServiceFlowLogControl=docsQos3ServiceFlowLogControl, docsQos3ServiceClassRequiredAttrMask=docsQos3ServiceClassRequiredAttrMask, docsQos3ParamSetMultiplierBytesReq=docsQos3ParamSetMultiplierBytesReq, docsQos3PHSSize=docsQos3PHSSize, docsQos3ServiceClassMinReservedRate=docsQos3ServiceClassMinReservedRate, docsQos3DCCReqs=docsQos3DCCReqs, docsQos3ServiceClassActiveTimeout=docsQos3ServiceClassActiveTimeout, IfDirection=IfDirection, docsQos3ParamSetType=docsQos3ParamSetType, docsQos3ServiceClassMaxReqPerSidCluster=docsQos3ServiceClassMaxReqPerSidCluster, docsQos3CmDsidNextExpectedSeqNum=docsQos3CmDsidNextExpectedSeqNum, docsQos3DCCRspDeparts=docsQos3DCCRspDeparts, docsQos3PHSIndex=docsQos3PHSIndex, docsQos3ServiceFlowSidClusterSid=docsQos3ServiceFlowSidClusterSid, docsQos3CmtsDsidEntry=docsQos3CmtsDsidEntry, docsQos3CmServiceUsStatsRqExceededs=docsQos3CmServiceUsStatsRqExceededs, docsQos3ServiceClassMaxLatency=docsQos3ServiceClassMaxLatency, docsQos3PHSField=docsQos3PHSField, docsQos3ParamSetUnsolicitGrantSize=docsQos3ParamSetUnsolicitGrantSize, docsQos3DynamicDeleteFails=docsQos3DynamicDeleteFails, docsQos3PktClassIpSourceMask=docsQos3PktClassIpSourceMask, docsQos3PktClassEnetProtocol=docsQos3PktClassEnetProtocol, docsQos3DbcFails=docsQos3DbcFails, docsQos3ServiceFlowSidClusterId=docsQos3ServiceFlowSidClusterId, docsQos3PktClassFlowLabel=docsQos3PktClassFlowLabel, docsQos3CmDsidStatusHldoffTimerSeqOutOfRng=docsQos3CmDsidStatusHldoffTimerSeqOutOfRng, docsQos3CmDsidStatsNumPackets=docsQos3CmDsidStatsNumPackets, docsQos3ServiceFlowLogCmMac=docsQos3ServiceFlowLogCmMac, docsQos3CmDsidStatsSeqNumMissing=docsQos3CmDsidStatsSeqNumMissing, docsQos3PktClassIpProtocol=docsQos3PktClassIpProtocol, docsQos3ParamSetSchedulingType=docsQos3ParamSetSchedulingType, docsQos3DynamicAdds=docsQos3DynamicAdds, docsQos3ParamSetDsResequencing=docsQos3ParamSetDsResequencing, docsQos3ServiceClassStatus=docsQos3ServiceClassStatus, docsQos3DynamicChanges=docsQos3DynamicChanges, docsQos3ServiceFlowLogSFID=docsQos3ServiceFlowLogSFID, docsQos3UpChCounterExtTable=docsQos3UpChCounterExtTable, docsQos3ServiceFlowAttrAssignSuccess=docsQos3ServiceFlowAttrAssignSuccess, docsQos3PktClassIpTosHigh=docsQos3PktClassIpTosHigh, docsQos3ServiceClassEntry=docsQos3ServiceClassEntry, docsQos3CmDsidStatsSkewThreshExceeds=docsQos3CmDsidStatsSkewThreshExceeds, docsQos3GrpPktClassEntry=docsQos3GrpPktClassEntry, docsQos3UpChCounterExtSgmtValids=docsQos3UpChCounterExtSgmtValids, docsQos3CmtsGroup=docsQos3CmtsGroup, docsQos3ParamSetPeakTrafficRate=docsQos3ParamSetPeakTrafficRate, docsQos3CmtsMacToSrvFlowTable=docsQos3CmtsMacToSrvFlowTable, docsQos3CmtsServiceFlowId=docsQos3CmtsServiceFlowId, docsQos3ServiceClassMultiplierBytesReq=docsQos3ServiceClassMultiplierBytesReq, docsQos3ParamSetTable=docsQos3ParamSetTable, docsQos3PktClassIpAddrType=docsQos3PktClassIpAddrType, docsQos3ServiceFlowLogTable=docsQos3ServiceFlowLogTable, docsQos3CmDsidStatsTable=docsQos3CmDsidStatsTable, docsQos3PktClassDestPortStart=docsQos3PktClassDestPortStart, docsQos3UpChCounterExtSgmtDiscards=docsQos3UpChCounterExtSgmtDiscards, docsQos3ServiceFlowEntry=docsQos3ServiceFlowEntry, docsQos3ParamSetServiceClassName=docsQos3ParamSetServiceClassName, docsQos3ServiceClassAdmittedTimeout=docsQos3ServiceClassAdmittedTimeout, docsQos3ParamSetPriority=docsQos3ParamSetPriority, docsQos3ServiceClassTolGrantJitter=docsQos3ServiceClassTolGrantJitter, docsQos3PktClassSourcePortEnd=docsQos3PktClassSourcePortEnd, docsQos3ParamSetMaxTrafficRate=docsQos3ParamSetMaxTrafficRate, docsQos3ServiceFlowParamSetTypeStatus=docsQos3ServiceFlowParamSetTypeStatus, docsQos3UpstreamFragDiscards=docsQos3UpstreamFragDiscards, docsQos3DSAAcks=docsQos3DSAAcks, docsQos3ServiceFlowSidClusterTable=docsQos3ServiceFlowSidClusterTable, docsQos3ServiceClassTolPollJitter=docsQos3ServiceClassTolPollJitter, docsQos3ServiceFlowCcfStatsSgmtLost=docsQos3ServiceFlowCcfStatsSgmtLost, docsQos3BaseGroup=docsQos3BaseGroup, docsQos3PktClassSourceMacAddr=docsQos3PktClassSourceMacAddr, docsQos3CmtsDebugDsidDsid=docsQos3CmtsDebugDsidDsid, docsQos3ServiceClassPriority=docsQos3ServiceClassPriority, docsQos3CmtsDsidTable=docsQos3CmtsDsidTable, docsQos3ServiceFlowCcfStatsEntry=docsQos3ServiceFlowCcfStatsEntry, docsQos3ParamSetServiceFlowId=docsQos3ParamSetServiceFlowId, docsQos3CmDsidFwdCmInterfaceMask=docsQos3CmDsidFwdCmInterfaceMask, docsQos3ServiceClassGrantsPerInterval=docsQos3ServiceClassGrantsPerInterval, docsQos3CmtsDebugDsidStatsDsidOctets=docsQos3CmtsDebugDsidStatsDsidOctets, docsQos3ServiceFlowPolicedDelayPkts=docsQos3ServiceFlowPolicedDelayPkts, docsQos3PktClassEnetProtocolType=docsQos3PktClassEnetProtocolType, docsQos3ServiceFlowSidClusterEntry=docsQos3ServiceFlowSidClusterEntry, docsQos3ServiceFlowLogPolicedDropPkts=docsQos3ServiceFlowLogPolicedDropPkts, docsQos3ServiceFlowCcfStatsSgmtValids=docsQos3ServiceFlowCcfStatsSgmtValids, docsQos3ParamSetAttrAggrRuleMask=docsQos3ParamSetAttrAggrRuleMask, docsQos3PktClassUserPriLow=docsQos3PktClassUserPriLow, docsQos3ParamSetRequiredAttrMask=docsQos3ParamSetRequiredAttrMask, docsQos3CmtsDebugDsidTable=docsQos3CmtsDebugDsidTable, docsQos3ServiceFlowCcfStatsTable=docsQos3ServiceFlowCcfStatsTable, docsQos3PktClassSourcePortStart=docsQos3PktClassSourcePortStart, docsQos3ServiceFlowId=docsQos3ServiceFlowId, docsQos3ServiceClassSchedulingType=docsQos3ServiceClassSchedulingType, docsQos3ServiceFlowSidClusterUcid=docsQos3ServiceFlowSidClusterUcid, docsQos3GrpServiceFlowNumSess=docsQos3GrpServiceFlowNumSess, docsQos3CmtsDebugDsidStatsDsIfIndex=docsQos3CmtsDebugDsidStatsDsIfIndex, docsQos3CmDsidClientTable=docsQos3CmDsidClientTable, docsQos3ServiceFlowLogPrimary=docsQos3ServiceFlowLogPrimary, docsQos3CmDsidTable=docsQos3CmDsidTable, docsQos3ServiceClassAppId=docsQos3ServiceClassAppId, docsQos3ParamSetMinReservedPkt=docsQos3ParamSetMinReservedPkt, docsQos3ServiceFlowDirection=docsQos3ServiceFlowDirection, docsQos3ParamSetMinReservedRate=docsQos3ParamSetMinReservedRate, docsQos3UpstreamStatsEntry=docsQos3UpstreamStatsEntry, docsQos3DSCRsps=docsQos3DSCRsps, docsQos3ParamSetTosAndMask=docsQos3ParamSetTosAndMask, docsQos3PktClassIpDestMask=docsQos3PktClassIpDestMask, docsQos3ParamSetMaxTrafficBurst=docsQos3ParamSetMaxTrafficBurst, docsQos3CmDsidReseqWarnThrshld=docsQos3CmDsidReseqWarnThrshld, docsQos3ParamSetMultiplierContentionReqWindow=docsQos3ParamSetMultiplierContentionReqWindow, docsQos3ParamSetMaxReqPerSidCluster=docsQos3ParamSetMaxReqPerSidCluster, docsQos3ServiceClassName=docsQos3ServiceClassName, docsQos3CmGroup=docsQos3CmGroup, docsQos3DSCReqs=docsQos3DSCReqs, docsQos3GrpServiceFlowEntry=docsQos3GrpServiceFlowEntry, docsQos3DSDReqs=docsQos3DSDReqs, docsQos3MibGroups=docsQos3MibGroups, docsQos3ServiceClassDirection=docsQos3ServiceClassDirection, docsQos3GrpPktClassTable=docsQos3GrpPktClassTable, docsQos3ParamSetEntry=docsQos3ParamSetEntry, docsQos3DCCRsps=docsQos3DCCRsps, docsQos3PktClassDirection=docsQos3PktClassDirection, docsQos3ServiceFlowPkts=docsQos3ServiceFlowPkts, docsQos3ServiceFlowChSetId=docsQos3ServiceFlowChSetId, docsQos3CmtsDsidCurrentSeqNum=docsQos3CmtsDsidCurrentSeqNum, docsQos3ServiceClassDsResequencing=docsQos3ServiceClassDsResequencing, docsQos3PktClassIpDestAddr=docsQos3PktClassIpDestAddr, docsQos3Mib=docsQos3Mib, docsQos3ParamSetAppId=docsQos3ParamSetAppId, docsQos3ServiceFlowLogServiceClassName=docsQos3ServiceFlowLogServiceClassName, docsQos3ParamSetMaxOutstandingBytesPerSidCluster=docsQos3ParamSetMaxOutstandingBytesPerSidCluster, docsQos3ParamSetMaxTimeInSidCluster=docsQos3ParamSetMaxTimeInSidCluster, docsQos3ServiceClassTable=docsQos3ServiceClassTable, docsQos3ServiceClassMaxConcatBurst=docsQos3ServiceClassMaxConcatBurst, docsQos3ServiceFlowTimeActive=docsQos3ServiceFlowTimeActive, docsQos3ParamSetNomPollInterval=docsQos3ParamSetNomPollInterval, docsQos3PktClassDestMacAddr=docsQos3PktClassDestMacAddr, docsQos3CmDsidStatsDsid=docsQos3CmDsidStatsDsid, docsQos3CmtsDebugDsidRowStatus=docsQos3CmtsDebugDsidRowStatus, docsQos3ParamSetMaxLatency=docsQos3ParamSetMaxLatency, docsQos3ServiceClassUnsolicitGrantSize=docsQos3ServiceClassUnsolicitGrantSize, docsQos3CmDsidClientClientMacAddr=docsQos3CmDsidClientClientMacAddr, docsQos3MibCompliances=docsQos3MibCompliances, docsQos3ServiceClassNomPollInterval=docsQos3ServiceClassNomPollInterval, docsQos3CmtsDebugDsidEntry=docsQos3CmtsDebugDsidEntry, docsQos3PktClassVlanId=docsQos3PktClassVlanId, docsQos3PktClassIpSourceAddr=docsQos3PktClassIpSourceAddr, docsQos3PktClassUserPriHigh=docsQos3PktClassUserPriHigh, docsQos3CmDsidCmInterfaceMask=docsQos3CmDsidCmInterfaceMask, docsQos3CmDsidStatsOutOfRangePackets=docsQos3CmDsidStatsOutOfRangePackets, docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng=docsQos3CmtsDsidStatusHldoffTimerSeqOutOfRng, SchedulingType=SchedulingType, docsQos3DCCs=docsQos3DCCs, docsQos3PktClassIpTosMask=docsQos3PktClassIpTosMask, docsQos3DCCFails=docsQos3DCCFails, docsQos3DSAReqs=docsQos3DSAReqs, docsQos3ServiceFlowLogTimeCreated=docsQos3ServiceFlowLogTimeCreated, docsQos3ServiceClassTosAndMask=docsQos3ServiceClassTosAndMask, docsQos3PktClassEntry=docsQos3PktClassEntry, docsQos3ServiceFlowLogOctets=docsQos3ServiceFlowLogOctets, docsQos3PHSTable=docsQos3PHSTable, DOCSQOS3BitRate=DOCSQOS3BitRate, docsQos3UpstreamConcatBursts=docsQos3UpstreamConcatBursts, docsQos3ServiceClassMaxOutstandingBytesPerSidCluster=docsQos3ServiceClassMaxOutstandingBytesPerSidCluster, docsQos3CmServiceUsStatsEntry=docsQos3CmServiceUsStatsEntry, docsQos3CmDsidDsid=docsQos3CmDsidDsid, docsQos3CmtsDebugDsidStatsTable=docsQos3CmtsDebugDsidStatsTable, docsQos3DynamicServiceStatsTable=docsQos3DynamicServiceStatsTable, docsQos3PktClassDestMacMask=docsQos3PktClassDestMacMask, docsQos3ServiceClassMaxTrafficRate=docsQos3ServiceClassMaxTrafficRate, docsQos3ServiceFlowStatsEntry=docsQos3ServiceFlowStatsEntry, docsQos3ServiceClassMaxTrafficBurst=docsQos3ServiceClassMaxTrafficBurst, docsQos3ServiceClassNomGrantInterval=docsQos3ServiceClassNomGrantInterval, docsQos3ServiceFlowPrimary=docsQos3ServiceFlowPrimary, docsQos3DynamicAddFails=docsQos3DynamicAddFails, docsQos3ServiceClassRequestPolicy=docsQos3ServiceClassRequestPolicy, docsQos3ServiceFlowLogIndex=docsQos3ServiceFlowLogIndex, docsQos3CmServiceUsStatsTxRetries=docsQos3CmServiceUsStatsTxRetries, docsQos3CmDsidUsage=docsQos3CmDsidUsage, docsQos3DbcSuccesses=docsQos3DbcSuccesses, docsQos3ServiceFlowOctets=docsQos3ServiceFlowOctets, docsQos3CmServiceUsStatsTxSlotsImmed=docsQos3CmServiceUsStatsTxSlotsImmed, docsQos3DynamicDeletes=docsQos3DynamicDeletes, docsQos3GrpServiceFlowTable=docsQos3GrpServiceFlowTable, docsQos3PHSMask=docsQos3PHSMask, docsQos3ServiceFlowStatsTable=docsQos3ServiceFlowStatsTable, docsQos3DynamicServiceStatsEntry=docsQos3DynamicServiceStatsEntry, docsQos3ServiceFlowPHSUnknowns=docsQos3ServiceFlowPHSUnknowns, docsQos3ServiceClassStorageType=docsQos3ServiceClassStorageType, docsQos3IfDirection=docsQos3IfDirection, docsQos3ParamSetBitMap=docsQos3ParamSetBitMap, docsQos3DbcReqs=docsQos3DbcReqs, docsQos3PktClassTable=docsQos3PktClassTable, docsQos3ServiceFlowLogPkts=docsQos3ServiceFlowLogPkts, docsQos3DSCAcks=docsQos3DSCAcks, docsQos3ServiceFlowLogDirection=docsQos3ServiceFlowLogDirection, docsQos3ServiceClassForbiddenAttrMask=docsQos3ServiceClassForbiddenAttrMask, docsQos3CmtsDsidDsChSet=docsQos3CmtsDsidDsChSet, docsQos3ServiceClassTosOrMask=docsQos3ServiceClassTosOrMask, docsQos3CmDsidClientEntry=docsQos3CmDsidClientEntry, docsQos3CmDsidClientDsid=docsQos3CmDsidClientDsid, docsQos3ServiceFlowLogTimeDeleted=docsQos3ServiceFlowLogTimeDeleted, docsQos3ServiceClassMaxTimeInSidCluster=docsQos3ServiceClassMaxTimeInSidCluster, docsQos3PktClassState=docsQos3PktClassState, docsQos3CmDsidReseqWaitTime=docsQos3CmDsidReseqWaitTime, docsQos3CmDsidStatsEntry=docsQos3CmDsidStatsEntry, docsQos3MibConformance=docsQos3MibConformance, PYSNMP_MODULE_ID=docsQos3Mib, docsQos3ServiceClassAttrAggrRuleMask=docsQos3ServiceClassAttrAggrRuleMask, docsQos3DSDRsps=docsQos3DSDRsps, docsQos3ServiceFlowDsid=docsQos3ServiceFlowDsid, docsQos3CmtsDebugDsidStatsDsidPackets=docsQos3CmtsDebugDsidStatsDsidPackets, docsQos3ParamSetTosOrMask=docsQos3ParamSetTosOrMask, docsQos3DCCAcks=docsQos3DCCAcks, docsQos3GrpServiceFlowIsDef=docsQos3GrpServiceFlowIsDef, docsQos3MibObjects=docsQos3MibObjects, docsQos3DbcAcks=docsQos3DbcAcks, docsQos3CmtsDsidReseqWaitTime=docsQos3CmtsDsidReseqWaitTime, docsQos3PktClassIpTosLow=docsQos3PktClassIpTosLow, docsQos3ParamSetTolPollJitter=docsQos3ParamSetTolPollJitter, docsQos3CmtsDsidReseqWarnThrshld=docsQos3CmtsDsidReseqWarnThrshld, docsQos3ParamSetAdmittedTimeout=docsQos3ParamSetAdmittedTimeout, docsQos3CmtsDsidDsid=docsQos3CmtsDsidDsid, docsQos3ParamSetMaxConcatBurst=docsQos3ParamSetMaxConcatBurst, docsQos3DynamicChangeFails=docsQos3DynamicChangeFails, docsQos3PktClassDestPortEnd=docsQos3PktClassDestPortEnd, docsQos3UpstreamStatsTable=docsQos3UpstreamStatsTable, docsQos3CmtsCmMac=docsQos3CmtsCmMac, docsQos3CmServiceUsStatsTxExceededs=docsQos3CmServiceUsStatsTxExceededs, docsQos3DSARsps=docsQos3DSARsps, docsQos3ServiceClassMaxTotBytesReqPerSidCluster=docsQos3ServiceClassMaxTotBytesReqPerSidCluster, docsQos3ParamSetGrantsPerInterval=docsQos3ParamSetGrantsPerInterval, docsQos3PktClassBitMap=docsQos3PktClassBitMap, docsQos3CmDsidOutOfRangeDiscards=docsQos3CmDsidOutOfRangeDiscards, docsQos3PktClassCmInterfaceMask=docsQos3PktClassCmInterfaceMask, docsQos3CmtsMacToSrvFlowEntry=docsQos3CmtsMacToSrvFlowEntry, docsQos3ServiceFlowLogIfIndex=docsQos3ServiceFlowLogIfIndex, docsQos3PHSEntry=docsQos3PHSEntry, docsQos3ServiceFlowLogTimeActive=docsQos3ServiceFlowLogTimeActive, docsQos3ServiceFlowTable=docsQos3ServiceFlowTable, docsQos3UpstreamFragments=docsQos3UpstreamFragments, docsQos3CmtsDebugDsidStatsEntry=docsQos3CmtsDebugDsidStatsEntry, docsQos3CmServiceUsStatsRqRetries=docsQos3CmServiceUsStatsRqRetries, docsQos3ServiceClassMultiplierContentionReqWindow=docsQos3ServiceClassMultiplierContentionReqWindow, docsQos3CmtsDsidUsage=docsQos3CmtsDsidUsage, docsQos3CmDsidReseqChList=docsQos3CmDsidReseqChList, docsQos3DbcPartial=docsQos3DbcPartial, docsQos3ParamSetTolGrantJitter=docsQos3ParamSetTolGrantJitter, docsQos3PktClassPriority=docsQos3PktClassPriority, docsQos3PHSVerify=docsQos3PHSVerify, docsQos3DCCRspArrives=docsQos3DCCRspArrives, docsQos3CmtsIfIndex=docsQos3CmtsIfIndex, docsQos3ServiceFlowTimeCreated=docsQos3ServiceFlowTimeCreated, docsQos3CmServiceUsStatsTxSlotsDed=docsQos3CmServiceUsStatsTxSlotsDed, docsQos3ServiceFlowLogPolicedDelayPkts=docsQos3ServiceFlowLogPolicedDelayPkts)
mibBuilder.exportSymbols("DOCS-QOS3-MIB", docsQos3CmDsidEntry=docsQos3CmDsidEntry, docsQos3GrpPktClassGrpConfigId=docsQos3GrpPktClassGrpConfigId, docsQos3ServiceClassPeakTrafficRate=docsQos3ServiceClassPeakTrafficRate, docsQos3ServiceFlowLogEntry=docsQos3ServiceFlowLogEntry, docsQos3PktClassId=docsQos3PktClassId, docsQos3DbcRsps=docsQos3DbcRsps, docsQos3CmServiceUsStatsTable=docsQos3CmServiceUsStatsTable, docsQos3ServiceClassDSCPOverwrite=docsQos3ServiceClassDSCPOverwrite, docsQos3ServiceFlowSID=docsQos3ServiceFlowSID, docsQos3CmServiceUsStatsSgmts=docsQos3CmServiceUsStatsSgmts, docsQos3ParamSetMaxTotBytesReqPerSidCluster=docsQos3ParamSetMaxTotBytesReqPerSidCluster, docsQos3ParamSetRequestPolicyOct=docsQos3ParamSetRequestPolicyOct, docsQos3UpChCounterExtEntry=docsQos3UpChCounterExtEntry, docsQos3ParamSetForbiddenAttrMask=docsQos3ParamSetForbiddenAttrMask, docsQos3PktClassPkts=docsQos3PktClassPkts, docsQos3GrpServiceFlowQosConfigId=docsQos3GrpServiceFlowQosConfigId, docsQos3CmDsidNumReseqChs=docsQos3CmDsidNumReseqChs, docsQos3Compliance=docsQos3Compliance, docsQos3SID=docsQos3SID, docsQos3ServiceClassMinReservedPkt=docsQos3ServiceClassMinReservedPkt, docsQos3ParamSetActiveTimeout=docsQos3ParamSetActiveTimeout, docsQos3CmDsidClientClientMacId=docsQos3CmDsidClientClientMacId)
