#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-SERV-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-TIMETRA-SERV-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:32:37 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
TFilterID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TFilterID")
tmnxSRObjs, timetraSRMIBModules, tmnxSRNotifyPrefix, tmnxSRConfs = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "tmnxSRObjs", "timetraSRMIBModules", "tmnxSRNotifyPrefix", "tmnxSRConfs")
tSchedulerPolicyName, tVirtualSchedulerName = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName", "tVirtualSchedulerName")
TmnxCustId, TmnxManagedRouteStatus, ServiceAdminStatus, TPortSchedulerPIR, TmnxServId, TPolicyStatementNameOrEmpty, TmnxPortID, TmnxEnabledDisabled, TmnxActionType, TmnxEncapVal, TmnxVPNRouteDistinguisher, TNamedItemOrEmpty, TNamedItem, TmnxAncpStringOrZero, ServiceOperStatus, TCIRRate, TmnxVRtrIDOrZero, SdpBindId, QTag, TPIRRate = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxCustId", "TmnxManagedRouteStatus", "ServiceAdminStatus", "TPortSchedulerPIR", "TmnxServId", "TPolicyStatementNameOrEmpty", "TmnxPortID", "TmnxEnabledDisabled", "TmnxActionType", "TmnxEncapVal", "TmnxVPNRouteDistinguisher", "TNamedItemOrEmpty", "TNamedItem", "TmnxAncpStringOrZero", "ServiceOperStatus", "TCIRRate", "TmnxVRtrIDOrZero", "SdpBindId", "QTag", "TPIRRate")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, TimeTicks, iso, Gauge32, Bits, Counter32, ObjectIdentity, MibIdentifier, ModuleIdentity, Integer32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "TimeTicks", "iso", "Gauge32", "Bits", "Counter32", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "NotificationType")
RowStatus, TextualConvention, TruthValue, TimeStamp, DateAndTime, RowPointer, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "TruthValue", "TimeStamp", "DateAndTime", "RowPointer", "DisplayString", "MacAddress")
timetraServicesMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 4))
timetraServicesMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraServicesMIBModule.setRevisionsDescriptions(('Rev 6.0                01 Jan 2008 00:00\n                     6.0 release of the TIMETRA-SERV-MIB.', 'Rev 5.0                01 Jan 2007 00:00\n                     5.0 release of the TIMETRA-SERV-MIB.', 'Rev 4.0                28 Feb 2006 00:00\n                     4.0 release of the TIMETRA-SERV-MIB.', 'Rev 3.0                31 Aug 2005 00:00\n                     3.0 release of the TIMETRA-SERV-MIB.', 'Rev 2.1                24 Jan 2005 00:00\n                     2.1 release of the TIMETRA-SERV-MIB.', 'Rev 2.0                15 Jan 2004 00:00\n                     2.0 release of the TIMETRA-SERV-MIB.', 'Rev 1.2                15 Aug 2003 00:00\n                     1.2 release of the TIMETRA-SERV-MIB.', 'Rev 1.0                20 Jan 2003 00:00\n                     1.0 Release of the TIMETRA-SERV-MIB.', 'Rev 0.1                14 Aug 2000 00:00\n                     Initial version of the TIMETRA-SERV-MIB.',))
if mibBuilder.loadTexts: timetraServicesMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraServicesMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraServicesMIBModule.setContactInfo('Alcatel 7x50 Support\n         Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraServicesMIBModule.setDescription("This  document  is the SNMP MIB module to manage and provision\n        the various services of the Alcatel 7x50 SR system.\n\n        Copyright  2003-2008 Alcatel-Lucent. All rights reserved. Reproduction\n        of  this  document  is  authorized  on  the  condition that the\n        foregoing copyright notice is included.\n\n        This   SNMP   MIB  module  (Specification)  embodies  Alcatel's\n        proprietary  intellectual  property.  Alcatel retains all title\n        and ownership in the Specification, including any revisions.\n\n        Alcatel  grants  all interested parties a non-exclusive license\n        to  use and distribute an unmodified copy of this Specification\n        in  connection with management of Alcatel products, and without\n        fee,  provided  this copyright notice and license appear on all\n        copies.\n\n        This  Specification  is  supplied `as is', and Alcatel makes no\n        warranty,  either express or implied, as to the use, operation,\n        condition, or performance of the Specification.")
tmnxServObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4))
tmnxCustObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1))
tmnxSvcObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2))
tmnxTstpNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5))
tmnxSvcNotifyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6))
tmnxServConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4))
tmnxCustConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1))
tmnxSvcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2))
tmnxTstpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5))
tmnxServNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4))
custTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1))
custTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0))
svcTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2))
svcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0))
tstpTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5))
tstpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0))
class ServObjName(TextualConvention, OctetString):
    description = 'ASCII string used to name various service\n                     objects.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class ServObjDesc(TextualConvention, OctetString):
    description = 'ASCII string used to describe various service\n                     objects.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 80)

class ServObjLongDesc(TextualConvention, OctetString):
    description = 'Long ASCII string used to describe various service\n                     objects.'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 160)

class ServType(TextualConvention, Integer32):
    description = 'This textual convention is used to specify the\n                     type of a given service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 0), ("epipe", 1), ("p3pipe", 2), ("tls", 3), ("vprn", 4), ("ies", 5), ("mirror", 6), ("apipe", 7), ("fpipe", 8), ("ipipe", 9), ("cpipe", 10))

class VpnId(TextualConvention, Unsigned32):
    description = 'A number used to identify a VPN. In general\n                     each service corresponds to a single VPN, but\n                     under some circumstances a VPN may be composed\n                     of multiple services.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class SdpId(TextualConvention, Unsigned32):
    description = 'A 16-bit number used to identify a Service\n                     Distribution Point. This ID must be unique only\n                     within the ESR where it is defined. The value 0\n                     is used as the null ID.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 17407), )
class SdpTemplateId(TextualConvention, Unsigned32):
    description = 'A number used to uniquely identify a template \n                     for the creation of a Service Distribution Point.\n                     The value 0 is used as the null ID.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class PWTemplateId(TextualConvention, Unsigned32):
    description = 'A number used to uniquely identify an pseudowire (PW)\n                     template for the creation of a Service Distribution\n                     Point. The value 0 is used as the null ID.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 2147483647), )
class SdpBindTlsBpduTranslation(TextualConvention, Integer32):
    description = "This textual convention is used to specify whether\n                     received L2 Protocol Tunnel pdu's are translated\n                     before being sent out on a port or sap."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("auto", 1), ("disabled", 2), ("pvst", 3), ("stp", 4), ("cdp", 5), ("vtp", 6))

class TlsLimitMacMoveLevel(TextualConvention, Integer32):
    description = 'This textual convention is used to specify the hierarchy\n                     in which spoke-SDPs are blocked when a MAC-move limit is\n                     exceeded. When a MAC is moving among multiple SAPs or\n                     spoke-SDPs, the SAP bind or spoke-SDP bind with the\n                     lower level is blocked first. (tertiary is the lowest)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("primary", 1), ("secondary", 2), ("tertiary", 3))

class TlsLimitMacMove(TextualConvention, Integer32):
    description = "This textual convention is used to specify the behavior\n                     when the re-learn rate specified by svcTlsMacMoveMaxRate\n                     is exceeded.\n\n                     A value of 'blockable' specifies that the agent will\n                     monitor the MAC relearn rate on a SAP or SDP Bind and\n                     it will block it when the re-learn rate specified by\n                     svcTlsMacMoveMaxRate is exceeded. A value of 'nonBlockable'\n                     specifies that the  SAP or SDP Bind will not be blocked,\n                     and another blockable SAP or SDP Bind will be blocked\n                     instead."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("blockable", 1), ("nonBlockable", 2))

class SdpBindVcType(TextualConvention, Integer32):
    description = "This textual convention is used to specify the type of\n                     virtual circuit (VC) associated with the SDP binding.\n                     The value 'vpls' is no longer supported."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("undef", 1), ("ether", 2), ("vlan", 4), ("mirror", 5), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("ipipe", 11), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17))

class StpExceptionCondition(TextualConvention, Integer32):
    description = 'This textual convention is used to specify an\n                     STP exception condition encountered on an\n                     interface\n                     - none : no exception condition found.\n                     - oneWayCommuniation : The neighbor RSTP peer on this link\n                                            is not able to detect our presence.\n                     - downstreamLoopDetected : A loop is detected on this\n                       link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("oneWayCommuniation", 2), ("downstreamLoopDetected", 3))

class LspIdList(TextualConvention, OctetString):
    description = 'Each group of four octets in this string specify\n                     a 32-bit LSP ID, which corresponds to the\n                     vRtrMplsLspIndex of the given MPLS LSP. The LSP\n                     IDs are stored in network byte order; i.e. octet\n                     N corresponds to the most significant 8 bits of\n                     the LSP ID, and octet N+3 correspond to the least\n                     significant 8 bits. The list is terminated by the\n                     null LSP ID. The LSP IDs in this list are not\n                     required to be sorted in any specific order. The\n                     list is large enough to hold up to 16 LSP IDs,\n                     plus the null terminator.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 68)

class BridgeId(TextualConvention, OctetString):
    description = 'The Bridge-Identifier used by the Spanning Tree\n                     Protocol to uniquely identify a bridge. The first\n                     two octets represent the bridge priority (in big\n                     endian format) while the remaining six octets\n                     represent the main MAC address of the bridge.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class TSapIngQueueId(TextualConvention, Unsigned32):
    description = 'The value used to uniquely identify a SAP ingress queue.\n                     The actual valid values are those defined in the given\n                     SAP ingress QoS policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 32)

class TSapEgrQueueId(TextualConvention, Unsigned32):
    description = 'The value used to uniquely identify a SAP egress queue.\n                     The actual valid values are those defined in the given\n                     SAP egress QoS policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 8)

class TStpPortState(TextualConvention, Integer32):
    description = 'The value used to specify the port state as defined\n                     by application of the Spanning Tree Protocol. This\n                     state controls what action a port takes on reception\n                     of a frame.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7))

class StpPortRole(TextualConvention, Integer32):
    description = 'the stp portrole defined by the Rapid Spanning Tree\n                     Protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("master", 0), ("root", 1), ("designated", 2), ("alternate", 3), ("backup", 4), ("disabled", 5))

class StpProtocol(TextualConvention, Integer32):
    description = 'indicates all possible version of the stp protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("stp", 1), ("rstp", 2), ("mstp", 3))

class MfibLocation(TextualConvention, Integer32):
    description = "MfibLocation represents the type of local 'interface':\n                     -'sap': sap interface\n                     -'sdp': mesh-sdp or spoke-sdp interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sap", 1), ("sdp", 2))

class MfibGrpSrcFwdOrBlk(TextualConvention, Integer32):
    description = 'MfibGrpSrcFwdOrBlk describes whether traffic for the\n                     related source-group is to be forwarded or blocked.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("forward", 1), ("block", 2))

class MvplsPruneState(TextualConvention, Integer32):
    description = 'Managed VPLS (mVPLS): state of a SAP or spoke-SDP in a\n                     user VPLS (uVPLS).\n                     - notApplicable :\n                       the SAP or spoke SDP of a uVPLS is not managed by a SAP\n                       or spoke SDP of a mVPLS.\n                     - notPruned:\n                       the SAP or spoke SDP of a uVPLS is managed by a mVPLS,\n                       but the link is not pruned.\n                     -pruned\n                       the SAP or spoke SDP of a uVPLS is managed by a mVPLS,\n                       but the link is pruned as a result of an STP decision\n                       taken in the STP instance running in the mVPLS.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("notPruned", 2), ("pruned", 3))

class TQosQueueAttribute(TextualConvention, Bits):
    description = 'Indicates attributes of a QoS queue'
    status = 'current'
    namedValues = NamedValues(("cbs", 0), ("cir", 1), ("cirAdaptRule", 2), ("mbs", 3), ("pir", 4), ("pirAdaptRule", 5), ("hiPrioOnly", 6), ("avgOverhead", 7))

class TVirtSchedAttribute(TextualConvention, Bits):
    description = 'Indicates attributes of a virtual scheduler'
    status = 'current'
    namedValues = NamedValues(("cir", 0), ("pir", 1), ("summedCir", 2))

class MstiInstanceId(TextualConvention, Unsigned32):
    description = 'indicates all possible multiple spanning tree instances,\n                     not including the CIST.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4094)

class MstiInstanceIdOrZero(TextualConvention, Unsigned32):
    description = "indicates all possible multiple spanning tree instances,\n                     including the CIST (for which case the value '0' is \n                     reserved)."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4094)

class DhcpLseStateInfoOrigin(TextualConvention, Integer32):
    description = 'Indicates the originator of the provided information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 0), ("dhcp", 1), ("radius", 2), ("retailerRadius", 3), ("retailerDhcp", 4), ("default", 5))

class IAIDType(TextualConvention, Integer32):
    description = 'Indicates the type of the addresses that are associated\n                     with the Identity Association ID (IAID)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("undefined", 0), ("temporary", 1), ("non-temporary", 2), ("prefix", 3))

class TdmOptionsSigPkts(TextualConvention, Integer32):
    description = "Encodes support for the cpipe circuit emulation (CE)\n                     application signaling packets:\n                     - 'noSigPkts' :\n                       for a cpipe that does not use signalling packets.\n                     - 'dataPkts' :\n                       for a cpipe carrying TDM data packets and expecting CE\n                       application signalling packets in a separate cpipe.\n                     - 'sigPkts' :\n                       for a cpipe carrying CE application signalling packets\n                       with the data packets in a separate cpipe.\n                     - 'dataAndSigPkts' :\n                       for a cpipe carrying TDM data and CE application\n                       signalling on the same cpipe."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noSigPkts", 0), ("dataPkts", 1), ("sigPkts", 2), ("dataAndSigPkts", 3))

class TdmOptionsCasTrunkFraming(TextualConvention, Integer32):
    description = "Encodes the CEM SAPs CAS trunk framing type:\n                     - 'noCas' :\n                       for all CEM SAPs except 'nxDS0WithCas'.\n                     - 'e1Trunk' :\n                       for a 'nxDS0WithCas' SAP with E1 trunk.\n                     - 't1EsfTrunk' :\n                       for a 'nxDS0WithCas' SAP with T1 ESF trunk.\n                     - 't1SfTrunk' :\n                       for a 'nxDS0WithCas' SAP with T1 SF trunk."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noCas", 0), ("e1Trunk", 1), ("t1EsfTrunk", 2), ("t1SfTrunk", 3))

class CemSapReportAlarm(TextualConvention, Bits):
    description = 'The CemSapReportAlarm data type indicates the type of CEM SAP alarm:\n         strayPkts     - receiving stray packets.\n         malformedPkts - detecting malformed packets.\n         pktLoss       - experiencing packet loss.\n         bfrOverrun    - experiencing jitter buffer overrun.\n         bfrUnderrun   - experiencing jitter buffer underrun.\n         rmtPktLoss    - remote packet loss indication.\n         rmtFault      - remote TDM fault indication.\n         rmtRdi        - remote RDI indication.'
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5), ("rmtPktLoss", 6), ("rmtFault", 7), ("rmtRdi", 8))

class CemSapEcid(TextualConvention, Unsigned32):
    description = 'The Emulated Circuit Identifier (ECID) is a 20 bit\n                     unsigned binary field containing an identifier for the\n                     circuit being emulated.  ECIDs have local significance\n                     only and are associated with a specific MAC address.\n                     Therefore the SAP can have a different ECID for each\n                     direction.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 1048575)

class SdpBFHundredthsOfPercent(TextualConvention, Integer32):
    description = 'The percentage of total SDP bandwidth reserved for SDP bindings \n         with two decimal places accuracy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10000)

class SdpBindBandwidth(TextualConvention, Unsigned32):
    description = 'The required SDP binding bandwidth, in kbps.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class L2ptProtocols(TextualConvention, Bits):
    description = "The L2ptProtocols indicates which L2 protocols should have their tunnels\n         terminated when 'L2ptTermination' is enabled.\n         stp           - spanning tree protocols stp/mstp/pvst/rstp\n         cdp           - cisco discovery protocol\n         vtp           - virtual trunk protocol\n         dtp           - dynamic trunking protocol     \n         pagp          - port aggregation protocol\n         udld          - unidirectional link detection"
    status = 'current'
    namedValues = NamedValues(("stp", 0), ("cdp", 1), ("vtp", 2), ("dtp", 3), ("pagp", 4), ("udld", 5))

class SvcISID(TextualConvention, Integer32):
    description = 'The SvcISID specifies a 24 bit (0..16777215) service instance\n        identifier for the service. As part of the Provider Backbone Bridging\n        frames, it is used at the destination PE as a demultiplexor field.\n\n        The value of -1 is used to indicate the value of this object is\n        un-specified.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 16777215), )
class L2RouteOrigin(TextualConvention, Integer32):
    description = 'The L2RouteOrigin indicates the source from which an L2 route\n         was learned.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("manual", 1), ("bgp-l2vpn", 2), ("radius", 3))

class ConfigStatus(TextualConvention, Integer32):
    description = 'The ConfigStatus indicates the status of the configuration for\n         the purpose of notifications.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("created", 1), ("modified", 2), ("deleted", 3))

custNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNumEntries.setStatus('current')
if mibBuilder.loadTexts: custNumEntries.setDescription('The value of the object custNumEntries indicates the\n                     current number of customer records configured in this\n                     device.')
custNextFreeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 2), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custNextFreeId.setStatus('current')
if mibBuilder.loadTexts: custNextFreeId.setDescription('The value of the object custNextFreeId indicates the next\n                     available value for custId, the index for the\n                     custInfoTable.')
custInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3), )
if mibBuilder.loadTexts: custInfoTable.setStatus('current')
if mibBuilder.loadTexts: custInfoTable.setDescription('A table that contains customer information. There\n                     is an entry in this table corresponding to the\n                     default customer. This entry cannot be edited or\n                     deleted, and it is used as the default customer\n                     for newly created services.')
custInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custInfoEntry.setStatus('current')
if mibBuilder.loadTexts: custInfoEntry.setDescription('Information about a specific customer.')
custId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 1), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custId.setStatus('current')
if mibBuilder.loadTexts: custId.setDescription('Customer identifier. This ID must be unique\n                     within a service domain.')
custRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custRowStatus.setStatus('current')
if mibBuilder.loadTexts: custRowStatus.setDescription('The value of the object  custRowStatus specifies the\n                     status of this row.')
custDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custDescription.setStatus('current')
if mibBuilder.loadTexts: custDescription.setDescription('The value of the object custDescription specifies\n                     optional, generic information about this customer\n                     in a displayable format.')
custContact = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custContact.setStatus('current')
if mibBuilder.loadTexts: custContact.setDescription('The value of the object custContact specifies the name of\n                     the primary contact person for this customer.')
custPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custPhone.setStatus('current')
if mibBuilder.loadTexts: custPhone.setDescription('The value of the object custPhone specifies the\n                     phone/pager number used to reach the primary contact\n                     person.')
custLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custLastMgmtChange.setDescription('The value of the object custLastMgmtChange indicates the\n                     value of the object sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this customer.')
custMultiServiceSiteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4), )
if mibBuilder.loadTexts: custMultiServiceSiteTable.setStatus('current')
if mibBuilder.loadTexts: custMultiServiceSiteTable.setDescription('')
custMultiServiceSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiServiceSiteEntry.setDescription("Information about a specific customer's\n                     multi-service site.")
custMultSvcSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 1), TNamedItem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteName.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteName.setDescription('')
custMultSvcSiteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteRowStatus.setDescription('The value of the object  custMultSvcSiteRowStatus\n                     specifies the status of this row.')
custMultSvcSiteDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteDescription.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteDescription.setDescription("The value of the object custMultSvcSiteDescription\n                     specifies option, generic information about this\n                     customer's Multi-Service Site.")
custMultSvcSiteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("card", 2))).clone('port')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteScope.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteScope.setDescription("The value of the object custMultSvcSiteScope specifies\n                     the scope of the ingress and egress QoS scheduler policies\n                     assigned to this Multi-Service Site. When the value is\n                    'port' all the SAPs that are members of this\n                     Multi-Service Site must be defined on the same port.\n                     Similarly for the case of'card'.")
custMultSvcSiteAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteAssignment.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteAssignment.setDescription('The value of the object custMultSvcSiteAssignment\n                     specifies the port ID, MDA, or card number, where\n                     the SAPs that are members of this Multi-\n                     Service Site are defined.')
custMultSvcSiteIngressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 6), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteIngressSchedulerPolicy.setDescription('The value of the object\n                     custMultSvcSiteIngressSchedulerPolicy specifies the\n                     ingress QoS scheduler policy assigned to this\n                     Multi-Service Site.')
custMultSvcSiteEgressSchedulerPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 7), ServObjName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteEgressSchedulerPolicy.setDescription('The value of the object\n                     custMultSvcSiteEgressSchedulerPolicy specifies the egress\n                     QoS scheduler policy assigned to this Multi-Service Site.')
custMultSvcSiteLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteLastMgmtChange.setDescription('The value of the object custMultSvcSiteLastMgmtChange\n                     indicates the value of sysUpTime at the time of the\n                     most recent management-initiated change to\n                     this multi-service site.')
custMultSvcSiteTodSuite = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteTodSuite.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteTodSuite.setDescription('The value of the object custMultSvcSiteTodSuite specifies\n                     the Time of Day (ToD) suite to be applied on this\n                     multi-service site. An empty string indicates that no ToD\n                     suite is applied on this multi-service Site.\n                     A set request will only be allowed, if the indicated suite\n                     is defined is TIMETRA-SCHEDULER-MIB::tmnxTodSuiteTable.\n                     Using a suite the values of\n                     custMultSvcSiteIngressSchedulerPolicy and\n                     custMultSvcSiteEgressSchedulerPolicy can be time based\n                     manipulated.')
custMultSvcSiteCurrentIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 10), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentIngrSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteCurrentIngrSchedPlcy.setDescription('The value of the object\n                     custMultSvcSiteCurrentIngrSchedPlcy indicates the Ingress\n                     QoS scheduler on this multi-service Site, or zero if none\n                     is currently active.\n                     The active policy may deviate from\n                     custMultSvcSiteIngressSchedulerPolicy\n                     in case it is overruled by a ToD-suite policy defined on\n                     this multi-service site.')
custMultSvcSiteCurrentEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 11), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteCurrentEgrSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteCurrentEgrSchedPlcy.setDescription('The value of the object custMultSvcSiteCurrentEgrSchedPlcy\n                     indicates the Egress QoS scheduler on this SAP, or zero if\n                     none is currently active.\n                     The active policy may deviate from the\n                     sapEgressQosSchedulerPolicy in case it is overruled by a\n                     ToD-suite policy defined on this multi-service site.')
custMultSvcSiteEgressAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 12), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteEgressAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteEgressAggRateLimit.setDescription("The value of the object custMultSvcSiteEgressAggRateLimit\n                     specifies the maximum total rate of all egress queues for\n                     this multi-service site. The value '-1' means that there\n                     is no limit.")
custMultSvcSiteIntendedIngrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 13), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedIngrSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteIntendedIngrSchedPlcy.setDescription('The value of the object custMultSvcSiteIntendedIngrSchedPlcy\n                     indicates  indicates the Ingress QoS scheduler on this\n                     multi-service Site that should be applied.\n                     If it deviates from custMultSvcSiteCurrentIngrSchedPlcy,\n                     this  means that there was a problem when trying to\n                     activate this filter. It can only deviate when using\n                     tod-suites for the SAP. When the tod-suites decides that\n                     a new filter must be applied, it will try to do this.\n                     If it fails, the current and intended field are\n                     not equal.')
custMultSvcSiteIntendedEgrSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 14), ServObjName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMultSvcSiteIntendedEgrSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteIntendedEgrSchedPlcy.setDescription('The value of the object custMultSvcSiteIntendedEgrSchedPlcy\n                     indicates  indicates the Egress QoS scheduler on this\n                     multi-service Site that should be applied.\n                     If it deviates from custMultSvcSiteCurrentEgrSchedPlcy,\n                     this  means that there was a problem when trying to\n                     activate this filter. It can only deviate when using\n                     tod-suites for the SAP. When the tod-suites decides that\n                     a new filter must be applied, it will try to do this.\n                     If it fails, the current and intended field are\n                     not equal.')
custMultSvcSiteFrameBasedAccnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 4, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMultSvcSiteFrameBasedAccnt.setStatus('current')
if mibBuilder.loadTexts: custMultSvcSiteFrameBasedAccnt.setDescription("The value of custMultSvcSiteFrameBasedAccnt specifies whether\n         to use frame-based accounting when evaluating \n         custMultSvcSiteEgressAggRateLimit for the egress queues for\n         this multi-service site.\n\n         If the value is 'false', the default packet-based accounting\n         method will be used.")
custMultiSvcSiteIngStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5), )
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsTable.setDescription('A table that contains ingress QoS scheduler\n                     statistics for the customer multi service site.')
custMultiSvcSiteIngStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngStatsEntry.setDescription('Ingress statistics about a specific customer\n                     multi service site ingress scheduler.')
custIngQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosSchedName.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedName.setDescription('The index of the ingress QoS scheduler of\n                     this customer multi service site.')
custIngQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedPackets.setDescription('The value of the object\n                     custIngQosSchedStatsForwardedPackets indicates the number\n                     of forwarded packets, as determined by the customer\n                     multi service site ingress scheduler policy.')
custIngQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: custIngQosSchedStatsForwardedOctets.setDescription('The value of the object\n                     custIngQosSchedStatsForwardedOctets indicates the number\n                     of forwarded octets, as determined by the customer\n                     multi service site ingress scheduler policy.')
custMultiSvcSiteEgrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsTable.setDescription('A table that contains egress QoS scheduler\n                     statistics for the customer multi service site.')
custMultiSvcSiteEgrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrStatsEntry.setDescription('Egress statistics about a specific customer\n                     multi service site egress scheduler.')
custEgrQosSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosSchedName.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedName.setDescription('The index of the egress QoS scheduler of\n                     this customer multi service site.')
custEgrQosSchedStatsForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedPackets.setDescription('The value of the object\n                     custEgrQosSchedStatsForwardedPackets indicates number of\n                     forwarded packets, as determined by the customer\n                     multi service site egress scheduler policy.')
custEgrQosSchedStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosSchedStatsForwardedOctets.setDescription('The value of the object\n                     custEgrQosSchedStatsForwardedOctets indicates the number\n                     of forwarded octets, as determined by the customer\n                     multi service site egress scheduler policy.')
custIngQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7), )
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsTable.setDescription('The custIngQosPortIdSchedStatsTable contains ingress QoS scheduler\n         statistics for the customer multi service site.')
custIngQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortIdSchedName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosAssignmentPortId"))
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedStatsEntry.setDescription('Each entry represents the ingress statistics about a specific customer\n         multi service site ingress scheduler. Entries are created when\n         a scheduler policy is applied to an MSS.')
custIngQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortIdSchedName.setDescription('The value of custIngQosPortIdSchedName is used as an index\n         of the ingress QoS scheduler of this customer multi service site.')
custIngQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setStatus('current')
if mibBuilder.loadTexts: custIngQosAssignmentPortId.setDescription("The value of custIngQosAssignmentPortId is used as an index\n         of the ingress QoS scheduler of this customer multi service site.\n         When an MSS assignment is an aps/ccag/lag in 'link' mode, each\n         member-port of the aps/ccag/lag has its own scheduler. This object\n         refers to the TmnxPortID of these member-ports.")
custIngQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortSchedFwdPkts.setDescription('The value of custIngQosPortSchedFwdPkts indicates the\n         number of forwarded packets, as determined by the customer\n         multi service site ingress scheduler policy.')
custIngQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: custIngQosPortSchedFwdOctets.setDescription('The value of custIngQosPortSchedFwdOctets indicates the\n         number of forwarded octets, as determined by the customer\n         multi service site ingress scheduler policy.')
custEgrQosPortIdSchedStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8), )
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsTable.setDescription('The custEgrQosPortIdSchedStatsTable contains egress QoS scheduler\n         statistics for the customer multi service site.')
custEgrQosPortIdSchedStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortIdSchedName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosAssignmentPortId"))
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedStatsEntry.setDescription('Each row entry represents the egress statistics for a customer\n         multi-service-site egress scheduler. Entries are created when\n         a scheduler policy is applied to an MSS.')
custEgrQosPortIdSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortIdSchedName.setDescription('The value of custEgrQosPortIdSchedName is used as an index\n         of the egress QoS scheduler of this customer multi service site.')
custEgrQosAssignmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setStatus('current')
if mibBuilder.loadTexts: custEgrQosAssignmentPortId.setDescription("The value of custEgrQosAssignmentPortId is used as an index\n         of the egress QoS scheduler of this customer multi service site.\n         When an MSS assignment is an aps/ccag/lag in 'link' mode, each\n         member-port of the aps/ccag/lag has its own scheduler. This object\n         refers to the TmnxPortID of these member-ports.")
custEgrQosPortSchedFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortSchedFwdPkts.setDescription('The value of custEgrQosPortSchedFwdPkts indicates the\n         number of forwarded packets, as determined by the customer\n         multi service site egress scheduler policy.')
custEgrQosPortSchedFwdOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setStatus('current')
if mibBuilder.loadTexts: custEgrQosPortSchedFwdOctets.setDescription('The value of custEgrQosPortSchedFwdOctets indicates the\n         number of forwarded octets, as determined by the customer\n         multi service site egress scheduler policy.')
custMssIngQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9), )
if mibBuilder.loadTexts: custMssIngQosSchedInfoTable.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSchedInfoTable.setDescription('A table that contains ingress QoS scheduler\n                     statistics for the customer multi service site.')
custMssIngQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSName"))
if mibBuilder.loadTexts: custMssIngQosSchedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSchedInfoEntry.setDescription('Ingress statistics about a specific customer\n                     multi service site ingress scheduler.')
custMssIngQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssIngQosSName.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSName.setDescription('The value of custMssIngQosSName indicates the name of\n                     the virtual scheduler whose parameters are to be\n                     overridden.')
custMssIngQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSRowStatus.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSRowStatus.setDescription('The value of custMssIngQosSRowStatus controls the\n                     creation and deletion of rows in this table.')
custMssIngQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssIngQosSLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSLastMgmtChange.setDescription('The value of custMssIngQosSLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
custMssIngQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSOverrideFlags.setDescription("The value of custMssIngQosSOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this virtual scheduler. Clearing a\n                     given flag will return the corresponding overridden\n                     attribute to the value defined on the SAP's ingress\n                     scheduler policy.")
custMssIngQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSPIR.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSPIR.setDescription('The value of custMssIngQosSPIR specifies the desired\n                     PIR value for this virtual scheduler.')
custMssIngQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSCIR.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSCIR.setDescription('The value of custMssIngQosSCIR specifies the desired\n                     CIR value for this virtual scheduler.')
custMssIngQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 9, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssIngQosSSummedCIR.setStatus('current')
if mibBuilder.loadTexts: custMssIngQosSSummedCIR.setDescription("The value of custMssIngQosSSummedCIR specifies if the CIR\n                     should be used as the summed CIR values of the children\n                     schedulers or queues. If set to 'true', the applicable\n                     scheduler CIR (custMssIngQosSCIR) loses its meaning.")
custMssEgrQosSchedInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10), )
if mibBuilder.loadTexts: custMssEgrQosSchedInfoTable.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSchedInfoTable.setDescription('A table that contains egress QoS scheduler\n                     statistics for the customer multi service site.')
custMssEgrQosSchedInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSName"))
if mibBuilder.loadTexts: custMssEgrQosSchedInfoEntry.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSchedInfoEntry.setDescription('Egrress statistics about a specific customer\n                     multi service site egress scheduler.')
custMssEgrQosSName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: custMssEgrQosSName.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSName.setDescription('The value of custMssEgrQosSName indicates the name of\n                     the virtual scheduler whose parameters are to be\n                     overridden.')
custMssEgrQosSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSRowStatus.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSRowStatus.setDescription('The value of custMssEgrQosSRowStatus controls the\n                     creation and deletion of rows in this table.')
custMssEgrQosSLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custMssEgrQosSLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSLastMgmtChange.setDescription('The value of custMssEgrQosSLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
custMssEgrQosSOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 4), TVirtSchedAttribute()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSOverrideFlags.setDescription("The value of custMssEgrQosSOverrideFlags specifies the\n                     set of attributes whose values have been overridden\n                     via management on this virtual scheduler. Clearing a\n                     given flag will return the corresponding overridden\n                     attribute to the value defined on the SAP's ingress\n                     scheduler policy.")
custMssEgrQosSPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 5), TPIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSPIR.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSPIR.setDescription('The value of custMssEgrQosSPIR specifies the desired\n                     PIR value for this virtual scheduler.')
custMssEgrQosSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 6), TCIRRate().clone(-1)).setUnits('kilo bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSCIR.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSCIR.setDescription('The value of custMssEgrQosSCIR specifies the desired\n                     CIR value for this virtual scheduler.')
custMssEgrQosSSummedCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 10, 1, 7), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: custMssEgrQosSSummedCIR.setStatus('current')
if mibBuilder.loadTexts: custMssEgrQosSSummedCIR.setDescription("The value of custMssEgrQosSSummedCIR specifies if the CIR\n                     should be used as the summed CIR values of the children\n                     schedulers or queues. If set to 'true', the applicable\n                     scheduler CIR (custMssEgrQosSCIR) loses its meaning.")
custMultiSvcSiteIngSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsTable.setDescription('A table that contains ingress QoS scheduler\n                     statistics for the customer multi service site, organized\n                     by scheduler policy.')
custMultiSvcSiteIngSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyStatsEntry.setDescription('Ingress statistics about a specific customer\n                     multi service site egress scheduler. Entries are created \n                     when a scheduler policy of a MSS is replaced with another \n                     one due to Time-Of-Day policies.')
custIngSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdPkt.setDescription('The value of the object\n                     custIngSchedPlcyStatsFwdPkt indicates \n                     the number of forwarded packets, as determined by the \n                     customer multi service site ingress scheduler policy.')
custIngSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: custIngSchedPlcyStatsFwdOct.setDescription('The value of the object\n                     custIngSchedPlcyStatsFwdOct indicates \n                     the number of forwarded octets, as determined by the \n                     customer multi service site ingress scheduler policy.')
custMultiSvcSiteEgrSchedPlcyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsTable.setDescription('A table that contains egress QoS scheduler\n                     statistics for the customer multi service site, organized\n                     by scheduler policy.')
custMultiSvcSiteEgrSchedPlcyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (1, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyStatsEntry.setDescription('Egress statistics about a specific customer\n                     multi service site egress scheduler. Entries are created \n                     when a scheduler policy of a MSS is replaced with another \n                     one due to Time-Of-Day policies.')
custEgrSchedPlcyStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdPkt.setDescription('The value of the object\n                     custEgrSchedPlcyStatsFwdPkt indicates \n                     the number of forwarded packets, as determined by \n                     the customer multi service site egress scheduler policy.')
custEgrSchedPlcyStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 12, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: custEgrSchedPlcyStatsFwdOct.setDescription('The value of the object\n                     custEgrSchedPlcyStatsFwdOct indicates \n                     the number of forwarded octets, as determined by \n                     the customer multi service site egress scheduler policy.')
custMultiSvcSiteIngSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13), )
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsTable.setDescription('The custMultiSvcSiteIngSchedPlcyPortStatsTable contains \n         ingress QoS scheduler statistics for the customer multi service site,\n         organized by scheduler policy.')
custMultiSvcSiteIngSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteIngSchedPlcyPortStatsEntry.setDescription('Each entry represents the ingress statistics about a specific customer\n         multi service site ingress scheduler. Entries are created when\n         a scheduler policy of a MSS is replaced with another one due\n         to Time-Of-Day policies.')
custIngSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsPort.setStatus('current')
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsPort.setDescription("The value of custIngSchedPlcyPortStatsPort is used as \n         an index of the ingress QoS scheduler of this customer multi service \n         site.\n         When an MSS assignment is an aps/ccag/lag in 'link' mode, each\n         member-port of the aps/ccag/lag has its own scheduler. This object\n         refers to the TmnxPortID of these member-ports.")
custIngSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdPkt.setDescription('The value of custIngSchedPlcyPortStatsFwdPkt indicates the\n         number of forwarded packets, as determined by the customer\n         multi service site ingress scheduler policy.')
custIngSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 13, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: custIngSchedPlcyPortStatsFwdOct.setDescription('The value of custIngSchedPlcyPortStatsFwdOct indicates the\n         number of forwarded octets, as determined by the customer\n         multi service site ingress scheduler policy.')
custMultiSvcSiteEgrSchedPlcyPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14), )
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsTable.setDescription('The custMultiSvcSiteEgrSchedPlcyPortStatsTable contains \n         egress QoS scheduler statistics for the customer multi service site,\n         organized by scheduler policy.')
custMultiSvcSiteEgrSchedPlcyPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tSchedulerPolicyName"), (0, "ALCATEL-IND1-TIMETRA-QOS-MIB", "tVirtualSchedulerName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsPort"))
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: custMultiSvcSiteEgrSchedPlcyPortStatsEntry.setDescription('Each entry represents the egress statistics about a specific customer\n         multi service site egress scheduler. Entries are created when\n         a scheduler policy of a MSS is replaced with another one due\n         to Time-Of-Day policies.')
custEgrSchedPlcyPortStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsPort.setStatus('current')
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsPort.setDescription("The value of custEgrSchedPlcyPortStatsPort is used as \n         an index of the egress QoS scheduler of this customer multi service \n         site.\n         When an MSS assignment is an aps/ccag/lag in 'link' mode, each\n         member-port of the aps/ccag/lag has its own scheduler. This object\n         refers to the TmnxPortID of these member-ports.")
custEgrSchedPlcyPortStatsFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdPkt.setStatus('current')
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdPkt.setDescription('The value of custEgrSchedPlcyPortStatsFwdPkt indicates the\n         number of forwarded packets, as determined by the customer\n         multi service site egress scheduler policy.')
custEgrSchedPlcyPortStatsFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 1, 14, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdOct.setStatus('current')
if mibBuilder.loadTexts: custEgrSchedPlcyPortStatsFwdOct.setDescription('The value of custEgrSchedPlcyPortStatsFwdOct indicates the\n         number of forwarded octets, as determined by the customer\n         multi service site egress scheduler policy.')
custCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custCreated.setStatus('obsolete')
if mibBuilder.loadTexts: custCreated.setDescription('The trap custCreated is sent when a new row is created\n                     in the custInfoTable.')
custDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"))
if mibBuilder.loadTexts: custDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: custDeleted.setDescription('The trap custDeleted is sent when an existing row is\n                     deleted from the custInfoTable.')
custMultSvcSiteCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteCreated.setStatus('obsolete')
if mibBuilder.loadTexts: custMultSvcSiteCreated.setDescription('The trap custMultSvcSiteCreated is sent when a new row is\n                     created in the custMultiServiceSiteTable.')
custMultSvcSiteDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 1, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"))
if mibBuilder.loadTexts: custMultSvcSiteDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: custMultSvcSiteDeleted.setDescription('The trap custMultSvcSiteDeleted is sent when an existing\n                     row is deleted from the custMultiServiceSiteTable.')
svcNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumEntries.setStatus('current')
if mibBuilder.loadTexts: svcNumEntries.setDescription('The current number of services configured on this node.')
svcBaseInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2), )
if mibBuilder.loadTexts: svcBaseInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcBaseInfoTable.setDescription('A table that contains basic service information.')
svcBaseInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcBaseInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcBaseInfoEntry.setDescription('Basic information about a specific service.')
svcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 1), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcId.setStatus('current')
if mibBuilder.loadTexts: svcId.setDescription('The value of the object svcId specifies the\n                     Service identifier. This value should be unique within the\n                     service domain.')
svcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcRowStatus.setDescription("This value of the object  svcRowStatus specifies the\n                     status of this row.\n\n                     To delete an entry from this table, the corresponding\n                     service must be administratively down, have no SAP's\n                     defined on it, and have no SDP bindings.\n\n                     For svcType 'vprn', the service can be associated\n                     with a routing instance by specifying svcVRouterId\n                     during the creation of the service.\n\n                     The value of the object svcVplsType specifies the VPLS\n                     service type. The value of this object must be specified\n                     when the row is created and cannot be changed while the\n                     svcRowStatus is 'active'.")
svcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 3), ServType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcType.setStatus('current')
if mibBuilder.loadTexts: svcType.setDescription("The value of the object svcType specifies the service\n                     type: e.g. epipe, tls, etc. The value of this object\n                     must be specified when the row is created and cannot be\n                     changed while the row status is 'active'.")
svcCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 4), TmnxCustId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcCustId.setStatus('current')
if mibBuilder.loadTexts: svcCustId.setDescription("The value of the object svcCustId specifies the ID of the\n                     customer who owns this service.\n                     The value of this object must be specified when the row is\n                     created and cannot be changed while the row status is\n                     'active'.")
svcIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 5), TmnxEnabledDisabled()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcIpRouting.setStatus('current')
if mibBuilder.loadTexts: svcIpRouting.setDescription("The value of the object svcIpRouting specifies, for a\n                     'tls' service, whether IP routing is enabled.\n                     For 'epipe', 'p3pipe', 'apipe', 'fpipe', 'ipipe'\n                     and 'cpipe' services, this object cannot be set and has\n                     the value 'disabled', whereas for 'vprn' and 'ies'\n                     services the value is 'enabled' and cannot be set either.\n                     For 'tls' services the value of this object must be\n                     specified when the row is created and cannot be changed\n                     while the row status is 'active'.")
svcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 6), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDescription.setStatus('current')
if mibBuilder.loadTexts: svcDescription.setDescription('The value of the object svcDescription specifiers an\n                     optional, generic information about this service.')
svcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9194))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMtu.setStatus('current')
if mibBuilder.loadTexts: svcMtu.setDescription('The value of the object svcMtu specifies the largest frame\n                     size (in octets) that this service can handle.\n                     The default value of this object depends on the service\n                     type:\n                     1514 octets for epipe, p3pipe and tls, 1508 for apipe\n                     and fpipe, and 1500 octets for vprn, ipipe and ies, 1514\n                     octets for cpipe.')
svcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 8), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcAdminStatus.setDescription('The value of the object svcAdminStatus specifies the\n                     desired state of this service.')
svcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 9), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcOperStatus.setStatus('current')
if mibBuilder.loadTexts: svcOperStatus.setDescription("The value of the object svcOperStatus indicates the\n                     operating state of this service. The requirements for a\n                     service to be operationally up depend on the service type:\n\n                     epipe, p3pipe, apipe, fpipe, ipipe and cpipe services are\n                     'up' when the service is administratively up and either\n                     both SAP's or a SAP and a spoke SDP Bind are operationally\n                     up.\n\n                     tls services are 'up' when the service is\n                     administratively up and either at least two SAP's or\n                     spoke SDP Bind's, or one SAP or spoke SDP Bind and\n                     at least one mesh SDP Bind are operationally up.\n\n                     vprn and ies services are 'up' when the service is\n                     administratively up and at least one interface is\n                     operationally up.")
svcNumSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSaps.setStatus('current')
if mibBuilder.loadTexts: svcNumSaps.setDescription('The value of the object svcNumSaps indicates the number of\n                     SAPs defined on this service.')
svcNumSdps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcNumSdps.setStatus('current')
if mibBuilder.loadTexts: svcNumSdps.setDescription('The value of the object svcNumSdps indicates the number of\n                     SDPs bound to this service.')
svcLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: svcLastMgmtChange.setDescription('The value of of the object svcLastMgmtChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     management-initiated change to this service.')
svcDefMeshVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcDefMeshVcId.setStatus('current')
if mibBuilder.loadTexts: svcDefMeshVcId.setDescription('The value of the object svcDefMeshVcId specifies, only in\n                     services that accept mesh SDP bindings, the VC ID portion\n                     of the sdpBindId index of each mesh SDP binding defined in\n                     the service. The default value of this object is equal to\n                     the service ID.')
svcVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 14), VpnId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVpnId.setStatus('current')
if mibBuilder.loadTexts: svcVpnId.setDescription('The value of the object  svcVpnId specifies the VPN ID\n                     assigned to this service.  The value of this object can\n                     be specified only when the row is created. If the value is\n                     not specified, it defaults to the service ID.')
svcVRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 15), TmnxVRtrIDOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVRouterId.setStatus('current')
if mibBuilder.loadTexts: svcVRouterId.setDescription('The value of the object svcVRouterId specifies, for a IES\n                     or VPRN service the associated virtual router instance\n                     where its interfaces are defined.\n\n                     This object has a special significance for the VPRN\n                     service as it can be used to associate the service to a\n                     specific virtual router instance.\n\n                     If no routing instance is specified or a value of zero (0)\n                     is specified, the agent will assign the vRtrID index value\n                     that would have been returned by the vRtrNextVRtrID object\n                     in the ALCATEL-IND1-TIMETRA-VRTR-MIB. The agent supports an SNMP SET\n                     operation to the svcVRouterId object only during\n                     row creation.')
svcAutoBind = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("gre", 2), ("ldp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcAutoBind.setStatus('current')
if mibBuilder.loadTexts: svcAutoBind.setDescription('The value of the object svcAutoBind specifies, for a VPRN\n                     service, the type of lookup to be used by the routing\n                     instance if no SDP to the destination exists.')
svcLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: svcLastStatusChange.setDescription('The value of the object svcLastStatusChange indicates the\n                     value of sysUpTime at the time of the most recent\n                     operating status change to his service.')
svcVllType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("undef", 1), ("atmSdu", 6), ("atmCell", 7), ("atmVcc", 8), ("atmVpc", 9), ("frDlci", 10), ("satopE1", 12), ("satopT1", 13), ("satopE3", 14), ("satopT3", 15), ("cesopsn", 16), ("cesopsnCas", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVllType.setStatus('current')
if mibBuilder.loadTexts: svcVllType.setDescription("The value of the object svcVllType specifies, for a apipe,\n                     fpipe or cpipe service, the type of pseudo-wire to be\n                     signalled for the service.  The default for this object\n                     depends on the service type:\n                     'atmSdu' for apipes, 'frDlci' for fpipes, satopE1 for\n                     cpipes, and 'undef' for all other service types.")
svcMgmtVpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcMgmtVpls.setStatus('current')
if mibBuilder.loadTexts: svcMgmtVpls.setDescription("The value of the object svcMgmtVpls specifies, only if\n                    svcType = 'tls' whether or not the service is a management\n                    vpls.\n                    If set to false the service is acting as a regular VPLS\n                    service. If set to true, the service is  acting  as  a\n                    management  VPLS  service. This implies that RSTP will\n                    always be enabled, and that the  conclusions of this RSTP\n                    can be associated to different (regular) VPLSs.\n                    The value of this object cannot be changed after creation.")
svcRadiusDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscovery.setStatus('current')
if mibBuilder.loadTexts: svcRadiusDiscovery.setDescription('The value of the object svcRadiusDiscovery specifies whether RADIUS\n         auto-discovery is enabled on this service.')
svcRadiusUserNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("vpn-id", 1), ("router-distinguisher", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserNameType.setStatus('current')
if mibBuilder.loadTexts: svcRadiusUserNameType.setDescription("The value of the object svcRadiusUserNameType specifies whether RADIUS\n         user name is vpn-id or router-distinguisher.  By default, the \n         value of this object is 'none'.  \n         \n         svcRadiusUserNameType and svcRadiusUserName, which indicates the \n         RADIUS username, must be set together in the same SNMP request \n         PDU if svcRadiusUserNameType is vpn-id or router-distinguisher or\n         else the set request will fail with an inconsistentValue error.")
svcRadiusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusUserName.setStatus('current')
if mibBuilder.loadTexts: svcRadiusUserName.setDescription('The value of the object svcRadiusUserName specifies the  RADIUS\n         user name.  svcRadiusUserNameType specifies the type of the \n         username and has to be set along with svcRadiusUserName when \n         svcRadiusUserName can either be a vpn-id or a router-distinguisher.')
svcVcSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVcSwitching.setStatus('current')
if mibBuilder.loadTexts: svcVcSwitching.setDescription('The value of the object svcVcSwitching specifies if the PW \n         switching signalling is used for the Spokes configured under the \n         service.  \n         This object can only be specified when the row is created.')
svcRadiusPEDiscPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 24), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusPEDiscPolicy.setStatus('current')
if mibBuilder.loadTexts: svcRadiusPEDiscPolicy.setDescription('The value of the object svcRadiusPEDiscPolicy specifies the \n         RADIUS PE Discovery Policy name. ')
svcRadiusDiscoveryShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 25), ServiceAdminStatus().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcRadiusDiscoveryShutdown.setStatus('current')
if mibBuilder.loadTexts: svcRadiusDiscoveryShutdown.setDescription("The value of svcRadiusDiscoveryShutdown specifies the desired \n       administrative state for the RADIUS auto-discovery server. When \n       the server is 'down' the operational state of the server is\n       disabled.  \n\n       By default, state of the RADIUS auto-discovery server is 'down'.")
svcVplsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bVpls", 2), ("iVpls", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcVplsType.setStatus('current')
if mibBuilder.loadTexts: svcVplsType.setDescription("Backbone VPLS ('bVpls') refers to the B-Component instance\n                     of the Provider Backbone Bridging (PBB/IEEE 802.1ah)\n                     feature. It represents the Multi-point tunneling component\n                     that multiplexes multiple Customer VPNs (ISIDs) together.\n                     It is similar to a regular VPLS instance that operates\n                     on the Backbone MAC addresses.\n\n                     ISID VPLS ('iVpls') or I-VPLS refers to the I-Component\n                     instance of the Provider Backbone Bridging (PBB/IEEE\n                     802.1ah) feature. It identifies the specific VPN entity\n                     associated to a customer Multipoint (ELAN) service. It is\n                     similar to a regular VPLS instance that operates on the\n                     Customer MAC addresses.\n\n                     The value of the object svcVplsType specifies the VPLS\n                     service type. The value of this object must be specified\n                     when the row is created and cannot be changed while the\n                     svcRowStatus is 'active'.")
svcTlsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3), )
if mibBuilder.loadTexts: svcTlsInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcTlsInfoTable.setDescription('A table that contains TLS service information.')
svcTlsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcTlsInfoEntry.setDescription('TLS specific information about a service.')
svcTlsMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 1), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacLearning.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacLearning.setDescription('The value of the object svcTlsMacLearning specifies\n                     whether the MAC learning process is enabled in this TLS.')
svcTlsDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 2), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsDiscardUnknownDest.setStatus('current')
if mibBuilder.loadTexts: svcTlsDiscardUnknownDest.setDescription('The value of the object svcTlsDiscardUnknownDest\n                     specifies whether frames received with an unknown\n                     destination MAC are discarded in this TLS.')
svcTlsFdbTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 196607)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableSize.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbTableSize.setDescription("The value of the object svcTlsFdbTableSize specifies the\n                     maximum number of learned and static entries allowed in\n                     the FDB of this service. When the value of\n                     ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisOperMode is not 'c', the\n                     maximum value of svcTlsFdbTableSize is '131071'.")
svcTlsFdbNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumEntries.setDescription('The value of the object svcTlsFdbNumEntries indicates the\n                     current number of entries in the FDB of this service.')
svcTlsFdbNumStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumStaticEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumStaticEntries.setDescription('The value of the object svcTlsFdbNumStaticEntries\n                     indicates the current number of static entries in the FDB\n                     of this service.')
svcTlsFdbLocalAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbLocalAgeTime.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbLocalAgeTime.setDescription('The value of the object svcTlsFdbLocalAgeTime specifies\n                     the number of seconds used to age out TLS FDB entries\n                     learned on local SAPs.')
svcTlsFdbRemoteAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbRemoteAgeTime.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbRemoteAgeTime.setDescription('The value of the object svcTlsFdbRemoteAgeTime specifies\n                     the number of seconds used to age out TLS FDB entries\n                     learned on an SDP. These entries correspond to MAC\n                     addresses learned on remote SAPs.')
svcTlsStpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 8), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpAdminStatus.setDescription('The value of the object svcTlsStpAdminStatus specifies the\n                     administrative state of the Spanning Tree Protocol\n                     instance associated with this service.')
svcTlsStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpPriority.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpPriority.setDescription("The value of the object  svcTlsStpPriority specifies\n                     the priority of the Spanning Tree Protocol instance\n                     associated with this service.\n                     It is used as the highest 4 bits of the Bridge ID\n                     included in the Configuration BPDU's generated by\n                     this bridge.\n                     The svcTlsStpPriority can only take-on values which\n                     multiples of 4096 (4k). If a value is specified which\n                     is not a multiple of 4K, then this value will be\n                     replaced by the closest multiple of 4K which is lower\n                     then the value entered.")
svcTlsStpBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeAddress.setDescription("The value of the  object svcTlsStpBridgeAddress indicates\n                     the MAC address used to identify this bridge in the\n                     network. It is used as the last six octets of the\n                     Bridge ID included in the Configuration BPDU's generated\n                     by this bridge. The most significant 38 bits of the bridge\n                     address are taken from the base MAC address of the\n                     device, while the least significant 10 bits are\n                     based on the corresponding TLS instance ID.")
svcTlsStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpTimeSinceTopologyChange.setDescription('The value of the object svcTlsStpTimeSinceTopologyChange\n                     indicates the time (in hundredths of a second) since the\n                     last time a topology change was detected by the Spanning\n                     Tree Protocol instance associated with this service.')
svcTlsStpTopologyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChanges.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpTopologyChanges.setDescription('The value of the object svcTlsStpTopologyChanges indicates\n                     the total number of topology changes detected by the\n                     Spanning Tree Protocol instance associated with this\n                     service since the management entity was last reset or\n                     initialized.')
svcTlsStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 13), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpDesignatedRoot.setDescription('The value of the object svcTlsStpDesignatedRoot indicates\n                     the bridge identifier of the root of the spanning tree as\n                     determined by the Spanning Tree Protocol instance\n                     associated with this service. This value is used as the\n                     Root Identifier parameter in all Configuration BPDUs\n                     originated by this node.')
svcTlsStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootCost.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpRootCost.setDescription('The value of the object svcTlsStpRootCost indicates the\n                     cost of the path to the root bridge as seen from this\n                     bridge.')
svcTlsStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpRootPort.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpRootPort.setDescription('The value of the object svcTlsStpRootPort indicates the\n                     port number of the port which offers the lowest cost path\n                     from this bridge to the root bridge.')
svcTlsStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpMaxAge.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpMaxAge.setDescription('The value of the object svcTlsStpMaxAge indicates the\n                     maximum age of Spanning Tree Protocol information learned\n                     from the network on any port before it is discarded. This\n                     is the actual value that this bridge is currently using.')
svcTlsStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHelloTime.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpHelloTime.setDescription('The value of the object svcTlsStpHelloTime indicates the\n                     amount of time between the transmission of Configuration\n                     BPDUs. This is the actual value that this bridge is\n                     currently using.')
svcTlsStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpHoldTime.setStatus('obsolete')
if mibBuilder.loadTexts: svcTlsStpHoldTime.setDescription('The value of the object svcTlsStpHoldTime indicates the\n                     interval length during which no more than two\n                     Configuration BPDUs shall be transmitted by this bridge.\n                     This object is no longer used. It is replaced by the\n                     object svcTlsStpHoldCount.\n                     This object was made obsolete in the 3.0 release.')
svcTlsStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpForwardDelay.setDescription('The value of the object svcTlsStpForwardDelay indicates\n                     how fast a port changes its state when moving towards the\n                     Forwarding state. The value determines how long the port\n                     stays in each of the Listening and Learning states, which\n                     precede the Forwarding state. This value is also used to\n                     age all dynamic entries in the Forwarding Database when a\n                     topology change has been detected and is underway. This is\n                     the actual value that this bridge is currently using.')
svcTlsStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeMaxAge.setDescription("The value of the object svcTlsStpBridgeMaxAge specifies\n                     the value that all bridges should use for 'MaxAge' when this\n                     bridge is acting as the root bridge.")
svcTlsStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeHelloTime.setDescription("The value of the object svcTlsStpBridgeHelloTime specifies\n                     the value that all bridges should use for 'HelloTime' when\n                     this bridge is acting as the root bridge.")
svcTlsStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeForwardDelay.setDescription("The value of the object svcTlsStpBridgeForwardDelay\n                     specifies the value that all bridges should use for\n                     'ForwardDelay' when this bridge is acting as the root\n                     bridge.")
svcTlsStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpOperStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpOperStatus.setDescription('The value of the object  svcTlsStpOperStatus indicates the\n                     operating status of the Spanning Tree Protocol instance\n                     associated with this service.')
svcTlsStpVirtualRootBridgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVirtualRootBridgeStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpVirtualRootBridgeStatus.setDescription("The value of the object  svcTlsStpVirtualRootBridgeStatus\n                     indicates the operating status of the  Virtual Root Bridge\n                     of the Spanning Tree Protocol instance associated with\n                     this service. The status of the Virtual Root Bridge is\n                    'up' when there is connectivity to the core: i.e. one or\n                     more SDP's in this service are operationally up.")
svcTlsMacAgeing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 32), TmnxEnabledDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacAgeing.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacAgeing.setDescription('The value of the object svcTlsMacAgeing specifies whether\n                     the MAC aging process is enabled in this TLS.')
svcTlsStpTopologyChangeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpTopologyChangeActive.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpTopologyChangeActive.setDescription("The value of the object svcTlsStpTopologyChangeActive\n                     indicates, when set to 'true', that a topology change is\n                     currently in progress.")
svcTlsFdbTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullHighWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbTableFullHighWatermark.setDescription('The value of the object svcTlsFdbTableFullHighWatermark\n                     specifies the utilization of the FDB table of this TLS\n                     service at which a table full alarm will be raised\n                     by the agent.')
svcTlsFdbTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsFdbTableFullLowWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbTableFullLowWatermark.setDescription('The value of the object svcTlsFdbTableFullLowWatermark\n                     specifies the utilization of the FDB table of this TLS\n                     service at which a table full alarm will be raised\n                     by the agent.')
svcTlsVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 36), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsVpnId.setStatus('current')
if mibBuilder.loadTexts: svcTlsVpnId.setDescription('The value of the object svcTlsVpnId indicates the VPN ID\n                     of the associated TLS service.')
svcTlsCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 37), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsCustId.setStatus('current')
if mibBuilder.loadTexts: svcTlsCustId.setDescription('The vakue of the object svcTlsCustId indicates the\n                     Customer ID of the associated TLS service.')
svcTlsStpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rstp", 2), ("compDot1w", 3), ("dot1w", 4), ("mstp", 5), ("pmstp", 6))).clone('rstp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpVersion.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpVersion.setDescription("The value of the object svcTlsStpVersion specifies the\n                     version of Spanning Tree Protocol the bridge is currently\n                     running.\n\n                     The value 'rstp' corresponds to  the Rapid Spanning\n                     Tree Protocol specified in IEEE 802.1D/D4-2003.\n\n                     The value 'compDot1w' corresponds to the mode where the\n                     Rapid Spanning Tree is backward compatible with IEEE\n                     802.1w.\n\n                     The value 'dot1w' corresponds to  the Rapid Spanning\n                     Tree Protocol fully conformant to IEEE 802.1w.\n\n                     The value 'mstp' corresponds to the Multiple Spanning\n                     Tree Protocol specified in IEEE 802.1Q-REV/D3.0-04/2005.\n                     \n                     The value 'pmstp' corresponds to Provider MSTP protocol\n                     compliant with IEEE-802.1ad-2005.\n\n                     New values may be defined as future versions of the\n                     protocol become available.")
svcTlsStpHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: svcTlsStpHoldCount.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpHoldCount.setDescription("The value of the object svcTlsStpHoldCount specifies the\n                     maximum number of BPDUs that are transmitted in any\n                     'HelloTime' interval.\n                     The value used by the bridge to limit the maximum\n                     transmission rate of BPDUs.")
svcTlsStpPrimaryBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 40), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpPrimaryBridge.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpPrimaryBridge.setDescription('The value of the object svcTlsStpPrimaryBridge indicates\n                     the BridgeId of the bridge that acts as the primary bridge,\n                     being the gateway from the core mesh towards the root\n                     bridge.')
svcTlsStpBridgeInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpBridgeInstanceId.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeInstanceId.setDescription("The value of the object svcTlsStpBridgeInstanceId\n                     indicates a 12 bit value chosen by the the system. It is\n                     part of the STP bridge Id, which consists of 8 octets:\n                     - 4 highest bits of octet 1:\n                         the bridge priority (ref svcTlsStpPriority)\n                     - 12 bits (4 lowest bits of octet 1 + 8 bits of octet 2):\n                         bridge instance Id (this object!).\n                     - 6 octets: bridge MAC addess\n                         ref svcTlsStpBridgeAddress\n                     The value is set to 0 if svcTlsStpOperStatus is not 'up'.")
svcTlsStpVcpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 42), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpVcpOperProtocol.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpVcpOperProtocol.setDescription('The value of the object svcTlsStpVcpOperProtocol indicates\n                     whether stp, rstp or mstp is running on this VCP.\n                     If the protocol is not enabled on this VCP, the value\n                     notApplicable is returned.')
svcTlsMacMoveMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveMaxRate.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacMoveMaxRate.setDescription("The value of the object svcTlsMacMoveMaxRate specifies the\n                     maximum rate at which MAC's can be re-learned in this TLS\n                     service, before the SAP where the moving MAC was last seen\n                     is automatically disabled in order to protect the system\n                     against undetected loops or duplicate MAC's.\n                     The rate is computed as the maximum number of re-learns\n                     allowed in a 5 second interval: e.g. the default rate\n                     of 2 re-learns per second corresponds to 10 re-learns\n                     in a 5 second period.")
svcTlsMacMoveRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveRetryTimeout.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacMoveRetryTimeout.setDescription('The value of the object  svcTlsMacMoveRetryTimeout\n                     specifies the time in seconds to wait before a SAP that\n                     has been disabled after exceeding the maximum re-learn\n                     rate is re-enabled.\n\n                     A value of zero indicates that the SAP will not be\n                     automatically re-enabled after being disabled. If after\n                     the SAP is re-enabled it is disabled again, the effective\n                     retry timeout is doubled in order to avoid thrashing.\n                     \n                     An inconsistentValue error is returned if the value of this\n                     object is set to less than fie times the value of \n                     svcTlsSecPortsCumulativeFactor.')
svcTlsMacMoveAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 45), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacMoveAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacMoveAdminStatus.setDescription('The value of the object svcTlsMacMoveAdminStatus\n                     specifies the administrative state of the\n                     MAC movement feature associated with this service.')
svcTlsMacRelearnOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMacRelearnOnly.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacRelearnOnly.setDescription("The value of the object svcTlsMacRelearnOnly indicates\n                     when set to 'true' that either the FDB table of this TLS\n                     service is full, or that the maximum system-wide number of\n                     MAC's supported by the agent has been reached, and thus\n                     MAC learning is temporary disabled, and only MAC re-learns\n                     can take place.")
svcTlsMfibTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableSize.setStatus('current')
if mibBuilder.loadTexts: svcTlsMfibTableSize.setDescription('The value of the object  svcTlsMfibTableSize specifies the\n                     maximum number of entries allowed in the MFIB table of\n                     this service. If the value is 0, then there is no limit.')
svcTlsMfibTableFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullHighWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsMfibTableFullHighWatermark.setDescription('The value of the object svcTlsMfibTableFullHighWatermark\n                     specifies the utilization of the MFIB table of this TLS\n                     service at which a table full alarm will be raised by the\n                     agent.')
svcTlsMfibTableFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMfibTableFullLowWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsMfibTableFullLowWatermark.setDescription('The value of the object svcTlsMfibTableFullLowWatermark\n                     specifies utilization of the MFIB table of this TLS\n                     service at which a table full alarm will be cleared by the\n                     agent.')
svcTlsMacFlushOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 50), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMacFlushOnFail.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacFlushOnFail.setDescription('The value of the object svcTlsMacFlushOnFail specifies\n                     whether a special mac-flush is sent when a\n                     port or sap becomes operational down.')
svcTlsStpRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionName.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpRegionName.setDescription('The value of the object svcTlsStpRegionName specifies\n                     the MSTP region name. Together with region revision and\n                     VLAN-to-instance assignment it defines the MSTP region.')
svcTlsStpRegionRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpRegionRevision.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpRegionRevision.setDescription('The value of the object svcTlsStpRegionRevision specifies\n                     the MSTP region revision number. Together with region\n                     name and VLAN-to-instance assignment it defines the MSTP\n                     region.')
svcTlsStpBridgeMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsStpBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpBridgeMaxHops.setDescription("The value of the object svcTlsStpBridgeMaxHops specifies\n                     the maximum number of hops (known as 'MaxHops' in 802.1Q).")
svcTlsStpCistRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 54), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpCistRegionalRoot.setDescription('The value of the object svcTlsStpCistRegionalRoot\n                     indicates the bridge identifier of the regional root of\n                     the CIST spanning tree as determined by the Spanning Tree\n                     Protocol instance associated with this service. This value\n                     is used as the CIST Regional Root Identifier parameter in\n                     all MSTP BPDUs originated by this node.')
svcTlsStpCistIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistIntRootCost.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpCistIntRootCost.setDescription('The value of the object svcTlsStpCistIntRootCost indicates\n                     the cost of the path to the CIST regional root bridge\n                     as seen from this bridge.')
svcTlsStpCistRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRemainingHopCount.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpCistRemainingHopCount.setDescription('The value of the object svcTlsStpCistRemainingHopCount\n                     specifies the remaining number of hops.')
svcTlsStpCistRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsStpCistRegionalRootPort.setStatus('current')
if mibBuilder.loadTexts: svcTlsStpCistRegionalRootPort.setDescription('The value of the object svcTlsStpCistRegionalRootPort\n                     indicates the port number of the port which offers the\n                     lowest cost path from this bridge to the regional root\n                     bridge.')
svcTlsFdbNumLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumLearnedEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumLearnedEntries.setDescription('The value of the object svcTlsFdbNumLearnedEntries\n                     indicates the current number of learned entries in the FDB\n                     of this service.')
svcTlsFdbNumOamEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumOamEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumOamEntries.setDescription('The value of the object svcTlsFdbNumOamEntries\n                     indicates the current number of OAM entries in the FDB\n                     of this service.')
svcTlsFdbNumDhcpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumDhcpEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumDhcpEntries.setDescription('The value of the object svcTlsFdbNumDhcpEntries\n                     indicates the current number of dhcp-learned entries in the\n                     FDB of this service.')
svcTlsFdbNumHostEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsFdbNumHostEntries.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbNumHostEntries.setDescription('The value of the object svcTlsFdbNumHostEntries\n                     indicates the current number of host-learned entries in the\n                     FDB of this service.')
svcTlsShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvAction.setStatus('current')
if mibBuilder.loadTexts: svcTlsShcvAction.setDescription('The value of the object svcTlsShcvAction\n                     indicates whether any action should be triggered when\n                     the connectivity check fails.')
svcTlsShcvSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 63), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcIp.setStatus('current')
if mibBuilder.loadTexts: svcTlsShcvSrcIp.setDescription('The value of the object svcTlsShcvSrcIp\n                     specifies the source IP address used when doing the\n                     connectivity check. The value 0.0.0.0 indicates that\n                     no host IP address is specified.')
svcTlsShcvSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 64), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvSrcMac.setStatus('current')
if mibBuilder.loadTexts: svcTlsShcvSrcMac.setDescription('The value of the object svcTlsShcvSrcMac\n                     specifies the MAC address used when doing the connectivity\n                     check. The value 0:0:0:0:0:0 indicates that no host MAC\n                     address is specified.')
svcTlsShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 65), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsShcvInterval.setStatus('current')
if mibBuilder.loadTexts: svcTlsShcvInterval.setDescription('The value of the object svcTlsShcvInterval specifies\n                     the interval in minutes between connectivity checks.\n                     Zero means no connectivity checking.')
svcTlsPriPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 66), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPriPortsCumulativeFactor.setStatus('current')
if mibBuilder.loadTexts: svcTlsPriPortsCumulativeFactor.setDescription('The value of the object svcTlsPriPortsCumulativeFactor\n                     specifies a factor for the primary ports defining how\n                     many MAC-relearn periods should be used to measure the\n                     MAC-relearn rate, svcTlsMacMoveMaxRate. This rate must\n                     be exceeded during consecutive periods before the\n                     corresponding ports (SAP and/or spoke-SDP) are blocked by\n                     the MAC-move feature.\n\n                     An inconsistentValue error is returned if an attempt is\n                     made to set the value of svcTlsPriPortsCumulativeFactor to\n                     a value lower than or equal to\n                     svcTlsSecPortsCumulativeFactor.')
svcTlsSecPortsCumulativeFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 67), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 9)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsSecPortsCumulativeFactor.setStatus('current')
if mibBuilder.loadTexts: svcTlsSecPortsCumulativeFactor.setDescription('The value of the object svcTlsSecPortsCumulativeFactor\n                     specifies a factor for the secondary ports defining how\n                     many MAC-relearn periods should be used to measure the\n                     MAC-relearn rate, svcTlsMacMoveMaxRate. This rate must\n                     be exceeded during consecutive periods before the\n                     corresponding ports (SAP and/or spoke-SDP) are blocked by\n                     the MAC-move feature.\n\n                     An inconsistentValue error is returned if an attempt is\n                     made to set the value of svcTlsSecPortsCumulativeFactor to\n                     a value greater than or equal to\n                     svcTlsPriPortsCumulativeFactor.')
svcTlsL2ptTermEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 68), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsL2ptTermEnabled.setStatus('current')
if mibBuilder.loadTexts: svcTlsL2ptTermEnabled.setDescription("The value of the object svcTlsL2ptTermEnabled \n                     indicates if L2PT-termination and/or Bpdu-translation \n                     is in use in this service by at least one SAP or \n                     spoke SDP Bind. If the value is 'true', it means that\n                     at least one of L2PT-termination or Bpdu-translation\n                     is enabled.\n\n                     When enabled it is not possible to enable\n                     stp on this service.")
svcTlsPropagateMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 69), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsPropagateMacFlush.setStatus('current')
if mibBuilder.loadTexts: svcTlsPropagateMacFlush.setDescription("The value of svcTlsPropagateMacFlush specifies whether\n                     'MAC flush' messages received from the given LDP are\n                     propagated to all spoke-SDPs and mesh-SDPs within the\n                     context of this VPLS service. The propagation will follow\n                     the 'split-horizon' principle and any data-path blocking in\n                     order to avoid the looping of these messages.\n\n                     The value of 'true' enables the propagation.")
svcTlsMrpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 70), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAdminStatus.setDescription('The value of the object svcTlsMrpAdminStatus specifies\n                     whether the Multiple Registration Protocol (MRP) is\n                     enabled in this TLS.')
svcTlsMrpMaxAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpMaxAttributes.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpMaxAttributes.setDescription('The value of the object svcTlsMrpMaxAttributes indicates\n                     maximum number of MRP attributes supported in this TLS.\n\n                     In most cases the default value is 2048 MRP attributes.\n                     For some platform and chassis types, especially single slot\n                     chassises, the default value will be lower due to resource\n                     constraints.\n\n                     An inconsistentValue error is returned if an attempt is\n                     made to set this object to a value the platform cannot\n                     support.')
svcTlsMrpAttributeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 72), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpAttributeCount.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttributeCount.setDescription('The value of the object svcTlsMrpAttributeCount indicates\n                     number of MRP attributes currently registered in this TLS.')
svcTlsMrpFailedRegisterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 73), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsMrpFailedRegisterCount.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpFailedRegisterCount.setDescription('The value of the object svcTlsMrpFailedRegisterCount\n                     indicates number of failed MRP attribute registrations in\n                     this TLS.')
svcTlsMcPathMgmtPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 74), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMcPathMgmtPlcyName.setStatus('current')
if mibBuilder.loadTexts: svcTlsMcPathMgmtPlcyName.setDescription('The value of svcTlsMcPathMgmtPlcyName specifies the \n                     multicast policy name configured on this service.')
svcTlsMrpFloodTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 75), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpFloodTime.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpFloodTime.setDescription('The value of the object svcTlsMrpFloodTime specifies\n                     the amount of time in seconds after a status change in the\n                     TLS during which traffic is flooded.  Once that time\n                     expires, traffic will be delivered according to the MRP\n                     registrations which exist in the TLS.\n\n                     The value of 0 indicates that no flooding will occur on\n                     state changes in the TLS.')
svcTlsMrpAttrTblHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblHighWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrTblHighWatermark.setDescription('The value of the object svcTlsMrpAttrTblHighWatermark\n                     specifies the utilization of the MRP attribute table of\n                     this TLS service at which a table full alarm will be raised\n                     by the agent.')
svcTlsMrpAttrTblLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 3, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsMrpAttrTblLowWatermark.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrTblLowWatermark.setDescription('The value of the object svcTlsMrpAttrTblLowWatermark\n                     specifies utilization of the MRP attribute table of this\n                     TLS service at which a table full alarm will be cleared by\n                     the agent.')
tlsFdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4), )
if mibBuilder.loadTexts: tlsFdbInfoTable.setStatus('current')
if mibBuilder.loadTexts: tlsFdbInfoTable.setDescription('A table that contains TLS FDB information.')
tlsFdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbMacAddr"))
if mibBuilder.loadTexts: tlsFdbInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tlsFdbInfoEntry.setDescription('Information about a specific TLS FDB.')
tlsFdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbMacAddr.setStatus('current')
if mibBuilder.loadTexts: tlsFdbMacAddr.setDescription('The value of the object tlsFdbMacAddr specifies the\n                     48-bit IEEE 802.3 MAC address.')
tlsFdbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsFdbRowStatus.setDescription("The value of the object tlsFdbRowStatus specifies the\n                     status of this row. The only values supported during a set\n                     operation are 'createAndGo' and 'destroy'.")
tlsFdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("learned", 2), ("oam", 3), ("dhcp", 4), ("host", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbType.setStatus('current')
if mibBuilder.loadTexts: tlsFdbType.setDescription(" The value of the object tlsFdbType specifies:\n                     - 'static':  Static TLS FDB entries created via management\n                     - 'learned': dynamic entries created via the learning\n                                  process\n                     - 'oam':     entries created via the OAM process\n                     - 'dhcp':    learned  addresses can be temporarily frozen\n                                  by the DHCP snooping application for the\n                                  duration of a DHCP lease\n                     - 'host':    entry added by the system for a static\n                                  configured subscriber host.")
tlsFdbLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2), ("cpm", 3), ("endpoint", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbLocale.setStatus('current')
if mibBuilder.loadTexts: tlsFdbLocale.setDescription("The value of the object tlsFdbLocale specifies for TLS\n                     FDB entries defined on a local SAP the value 'sap',\n                     remote entries defined on an SDP have the value 'sdp',\n                     entries associated with the Control Processor have the\n                     value 'cpm' and entries associated with the explicit\n                     endpoint have the value 'endpoint'.\n\n                     The value of this object must be specified when\n                     the row is created and cannot be changed while\n                     the row status is 'active'.")
tlsFdbPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 5), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbPortId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbPortId.setDescription("When the value of tlsFdbLocale is 'sap', this\n                     object, along with tlsFdbEncapValue, specifies\n                     the SAP associated with the MAC address defined\n                     by tlsFdbMacAddr. This object is otherwise\n                     insignificant and should contain a value of 0.")
tlsFdbEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 6), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEncapValue.setStatus('current')
if mibBuilder.loadTexts: tlsFdbEncapValue.setDescription("The value of the object tlsFdbEncapValue specifies, when\n                     the value of tlsFdbLocale is 'sap', along with\n                     tlsFdbPortId, SAP associated with the MAC address defined\n                     by tlsFdbMacAddr. This object is otherwise insignificant\n                     and should contain a value of 0.")
tlsFdbSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 7), SdpId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbSdpId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbSdpId.setDescription("The value of the object tlsFdbSdpId specifies, when the\n                     value of tlsFdbLocale is 'sdp', along with tlsFdbVcId,the\n                     SDP Binding associated with the MAC address\n                     defined by tlsFdbMacAddr. This object is other-\n                     wise insignificant and should contain a value of 0.")
tlsFdbVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbVcId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbVcId.setDescription("The value of the object tlsFdbVcId specifies, when the\n                     value of tlsFdbLocale is 'sdp', along with tlsFdbSdpId,\n                     the SDP Binding associated with the MAC address defined by\n                     tlsFdbMacAddr. This object is other-wise insignificant and\n                     should contain a value of 0.")
tlsFdbVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 9), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbVpnId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbVpnId.setDescription('The value of the object tlsFdbVpnId indicates the VPN ID\n                     of the associated TLS.')
tlsFdbCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 10), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbCustId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbCustId.setDescription('The value of the object tlsFdbCustId indicates the\n                     Customer ID of the associated TLS.')
tlsFdbLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbLastStateChange.setStatus('current')
if mibBuilder.loadTexts: tlsFdbLastStateChange.setDescription('The value of the object tlsFdbLastStateChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     state change of this entry. A state change is defined as a\n                     change in the value of: tlsFdbRowStatus, tlsFdbType,\n                     tlsFdbLocale, tlsFdbPortId, tlsFdbEncapValue,\n                     tlsFdbSdpId or tlsFdbVcId.')
tlsFdbProtected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbProtected.setStatus('current')
if mibBuilder.loadTexts: tlsFdbProtected.setDescription("The value of the object tlsFdbProtected indicates\n                     whether or not this MAC is protected. When the value\n                     of this object is 'true' the agent will protect\n                     the MAC from being learned or re-learned on a SAP\n                     that has restricted learning enabled.")
tlsFdbBackboneDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbBackboneDstMac.setStatus('current')
if mibBuilder.loadTexts: tlsFdbBackboneDstMac.setDescription("The value of the object tlsFdbBackboneDstMac indicates the\n                     Backbone VPLS service MAC address used as destination MAC \n                     address in the Provider Backbone Bridging frames for this\n                     tlsFdbMacAddr.\n        \n                     This object is insignificant for services with svcVplsType\n                     not set to 'iVpls' and should contain a value of\n                     0:0:0:0:0:0.")
tlsFdbNumIVplsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbNumIVplsMac.setStatus('current')
if mibBuilder.loadTexts: tlsFdbNumIVplsMac.setDescription("The value of the object tlsFdbNumIVplsMac indicates the\n                     number of ISID VPLS service MAC addressess which are using\n                     this Backbone MAC address defined by tlsFdbMacAddr.\n        \n                     This object is insignificant for services with svcVplsType\n                     not set to 'bVpls' and should contain a value of 0.")
tlsFdbEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 15), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsFdbEndPointName.setStatus('current')
if mibBuilder.loadTexts: tlsFdbEndPointName.setDescription('The value of tlsFdbEndPointName specifies the name of the service\n        endpoint associated with the MAC Address.')
tlsFdbEPMacOperSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 16), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperSdpId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbEPMacOperSdpId.setDescription("The value of the object tlsFdbEPMacOperSdpId along with\n        tlsFdbEPMacOperVcId indicates the SDP binding associated with this\n        static MAC address for this endpoint.\n\n        This object is valid when tlsFdbLocale is 'endpoint', otherwise \n        it should contain a value of 0.")
tlsFdbEPMacOperVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbEPMacOperVcId.setStatus('current')
if mibBuilder.loadTexts: tlsFdbEPMacOperVcId.setDescription("The value of the object tlsFdbEPMacOperVcId along with\n        tlsFdbEPMacOperSdpId indicates the SDP binding associated with this\n        static MAC address for this endpoint.\n\n        This object is valid when tlsFdbLocale is 'endpoint', otherwise \n        it should contain a value of 0.")
tlsFdbPbbNumEpipes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 4, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsFdbPbbNumEpipes.setStatus('current')
if mibBuilder.loadTexts: tlsFdbPbbNumEpipes.setDescription("The value of the object tlsFdbPbbNumEpipes indicates number of E-Pipes\n        that resolve to this MAC Address.\n\n        This object is valid for service with svcVplsType set to 'bVpls',\n        otherwise it should contain a value of 0.")
iesIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5), )
if mibBuilder.loadTexts: iesIfTable.setStatus('current')
if mibBuilder.loadTexts: iesIfTable.setDescription('A table that contains IES interface information.')
iesIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfEntry.setStatus('current')
if mibBuilder.loadTexts: iesIfEntry.setDescription('Information about a specific IES interface.')
iesIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfIndex.setStatus('current')
if mibBuilder.loadTexts: iesIfIndex.setDescription('The secondary index of the row in the vRtrIfTable\n                     corresponding to this IES interface. The primary\n                     index is 1; i.e. all IES interfaces are defined in\n                     the Base virtual router context.')
iesIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesIfRowStatus.setDescription("The value of the object iesIfRowStatus specifies the\n                     status of this row.\n                     The only values supported during a set operation are\n                     'createAndGo' and 'destroy'.")
iesIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfName.setStatus('current')
if mibBuilder.loadTexts: iesIfName.setDescription("The value of the object iesIfName specifies the name used\n                     to refer to this IES interface. This  name must be unique\n                     within the Base virtual router context.\n                     This object must be specified when the row is created, and\n                     cannot be changed while the rowstatus is 'active'.")
iesIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 4), ServObjLongDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfDescription.setStatus('current')
if mibBuilder.loadTexts: iesIfDescription.setDescription('The value of the object iesIfDescription specifies\n                     generic information about this IES interface.')
iesIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 5), ServiceAdminStatus().clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: iesIfAdminStatus.setDescription('The value of the object iesIfAdminStatus specifies the\n                     desired state of this IES interface.')
iesIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: iesIfOperStatus.setDescription('The value of the object iesIfOperStatus indicates the\n                     operating state of this IES interface.')
iesIfLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: iesIfLastMgmtChange.setDescription('The value of the object iesIfLastMgmtChange indicates the\n                     value of sysUpTime at the time of the most recent\n                     management-initiated change to this IES interface.')
iesIfVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 8), VpnId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfVpnId.setStatus('current')
if mibBuilder.loadTexts: iesIfVpnId.setDescription('The value of the object iesIfVpnId indicates the VPN ID of\n                     the associated IES service.')
iesIfCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 9), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfCustId.setStatus('current')
if mibBuilder.loadTexts: iesIfCustId.setDescription('The value of the object iesIfCustId indicates the Customer\n                     ID of the associated IES service.')
iesIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfLoopback.setStatus('current')
if mibBuilder.loadTexts: iesIfLoopback.setDescription("When the value of iesIfLoopback is set to 'true',\n                     loopback is enabled on the  IES interface represented\n                     by this row entry.  When the value is 'false',\n                     loopback is disabled.")
iesIfLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIfLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: iesIfLastStatusChange.setDescription('The value of the object iesIfLastStatusChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     operating status change to his interface.')
iesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("service", 1), ("subscriber", 2), ("group", 3), ("redundant", 4), ("cem", 5), ("ipsec", 6), ("ipMirror", 7))).clone('service')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfType.setStatus('current')
if mibBuilder.loadTexts: iesIfType.setDescription("The value of iesIfType specifies the type\n                     of this IES interface. This object can only be set at\n                     row creation time.\n                     'service'     - This is a normal IES interface.\n                     'subscriber'  - This is a subscriber interface, \n                                     under which multiple group interfaces \n                                     can be configured.\n                     'group'       - This is a group interface, belonging \n                                     to a parent subscriber interface.\n                     'redundant'   - This is a redundant interface, used \n                                     for dual homing.\n                     'cem'         - This is a CEM interface, used for \n                                     IP/UDP encapsulated CEM IES interface.\n                     'ipsec'       - This is an IPsec interface, used for \n                                     IPsec tunneling.\n                     'ipMirror'    - This is an IP interface, used for \n                                     IP Mirroring.")
iesIfParentIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfParentIf.setStatus('current')
if mibBuilder.loadTexts: iesIfParentIf.setDescription("The value of iesIfParentIf specifies the ifIndex of\n                     this interface's parent. This value can only be set at\n                     row creation time, and is only valid when\n                     iesIfType is 'group'. The interface pointed to by\n                     iesIfParentIf must be of type 'subscriber'.")
iesIfShcvSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vrrp", 2))).clone('interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvSource.setStatus('current')
if mibBuilder.loadTexts: iesIfShcvSource.setDescription('The value of iesIfShcvSource specifies the source used\n                     for subscriber host connectivity checking')
iesIfShcvAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("remove", 2))).clone('alarm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvAction.setStatus('current')
if mibBuilder.loadTexts: iesIfShcvAction.setDescription('The value of iesIfShcvAction specifies the action to be\n                     taken for hosts on this interface whose host connectivity\n                     checking fails')
iesIfShcvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6000))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfShcvInterval.setStatus('current')
if mibBuilder.loadTexts: iesIfShcvInterval.setDescription('The value of the object iesIfShcvInterval specifies\n                     the interval in minutes between connectivity checks.\n                     Zero means no in host-connection-verify')
iesIfFwdServId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 17), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdServId.setStatus('current')
if mibBuilder.loadTexts: iesIfFwdServId.setDescription("The value of iesIfFwdServId specifies the forwarding \n                      service ID for a subscriber interface in a retailer \n                      context. This value can only be set at row creation time\n                      along with iesIfFwdSubIf, and it is only valid when \n                      iesIfType is 'subscriber'. The iesIfFwdServId MUST \n                      correspond to a service of type 'vprn'.")
iesIfFwdSubIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 5, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIfFwdSubIf.setStatus('current')
if mibBuilder.loadTexts: iesIfFwdSubIf.setDescription("The value of iesIfFwdSubIf specifies the forwarding \n                      subscriber interface for a subscriber interface in a \n                      retailer context. This value can only be set at row \n                      creation time along with iesIfFwdServId, and it is only \n                      valid when iesIfType is 'subscriber'. The interface \n                      pointed to by iesIfFwdSubIf MUST be of type 'subscriber' \n                      in the the service context defined by iesIfFwdServId.")
tlsShgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6), )
if mibBuilder.loadTexts: tlsShgInfoTable.setStatus('current')
if mibBuilder.loadTexts: tlsShgInfoTable.setDescription("A table that contains TLS service split-horizon group\n                     information. A maximum of 30 split-horizon groups can\n                     be created in a given TLS service. Maximum is set to 15\n                     for a TLS service with svcVplsType set to 'bVpls', or \n                     'iVpls'.")
tlsShgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgName"))
if mibBuilder.loadTexts: tlsShgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tlsShgInfoEntry.setDescription('Split-horizon group information about a TLS service.')
tlsShgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsShgName.setStatus('current')
if mibBuilder.loadTexts: tlsShgName.setDescription('The value of the object tlsShgName specifies the name of\n                     the split-horizon group. The name must be unique within\n                     a TLS, however the same name can appear in different\n                     TLS services, in which case they denote different\n                     split-horizon groups.')
tlsShgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsShgRowStatus.setDescription("The value of the object  tlsShgRowStatus specifies the\n                     status of this row.\n                     The only values supported during a set operation are\n                     'createAndGo' and 'destroy'. To delete an entry\n                     from this table, there should be no TLS SAP's or\n                     TLS spoke SDP Bindings refering to it.")
tlsShgCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 3), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCustId.setStatus('current')
if mibBuilder.loadTexts: tlsShgCustId.setDescription('The value of the object tlsShgCustId indicates the\n                     Customer ID of the associated TLS service.')
tlsShgInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgInstanceId.setStatus('current')
if mibBuilder.loadTexts: tlsShgInstanceId.setDescription('The value of the object tlsShgInstanceId indicates the\n                     instance identifier for the split horizon group.')
tlsShgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 5), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgDescription.setStatus('current')
if mibBuilder.loadTexts: tlsShgDescription.setDescription('The value of the object tlsShgDescription specifies\n                     generic information about this split-horizon group.')
tlsShgLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsShgLastMgmtChange.setDescription('The value of the object tlsShgLastMgmtChange indicates the\n                     value of sysUpTime at the time of the most recent\n                     management-initiated change to this split-horizon group.')
tlsShgResidential = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgResidential.setStatus('current')
if mibBuilder.loadTexts: tlsShgResidential.setDescription('The value of the object tlsShgResidential  specifies\n                     whether  or not the split-horizon-group is residential.In\n                     a Residential Split Horizon Group (RSHG) there is no\n                     downstream broadcast, and all saps in the group will share\n                     the default ingress queue. The value can be specified\n                     during  row-creation, cannot be changed later on.')
tlsShgRestProtSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMac.setStatus('current')
if mibBuilder.loadTexts: tlsShgRestProtSrcMac.setDescription("The value of the object tlsShgRestProtSrcMac indicates\n                     how the agent will handle relearn requests for protected\n                     MAC addresses received on SAP's belonging to this SHG.\n                     When the value of this object is 'true' requests to \n                     relearn a protected MAC address will be ignored.\n                     In addition, if the value of tlsShgRestProtSrcMacAction\n                     is 'disable', then the SAP where the protected source\n                     MAC was seen will be brought operationally down.")
tlsShgRestUnprotDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestUnprotDstMac.setStatus('current')
if mibBuilder.loadTexts: tlsShgRestUnprotDstMac.setDescription("The value of the object tlsShgRestUnprotDstMac indicates\n                     how the system will forward packets destined to an\n                     unprotected MAC address. When the value of this object is\n                     'true' packets destined to an unprotected MAC address\n                     will be dropped.")
tlsShgRestProtSrcMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("alarm-only", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsShgRestProtSrcMacAction.setStatus('current')
if mibBuilder.loadTexts: tlsShgRestProtSrcMacAction.setDescription("The value of the object tlsShgRestProtSrcMacAction\n                     indicates the action to take whenever a relearn request\n                     for a protected MAC is received on a restricted SAP\n                     belonging to this SHG.\n                     When the value of this object is 'disable' the SAP\n                     will be placed in the operational down state, with the\n                     operating flag 'recProtSrcMac' set. When the value of\n                     this object is 'alarm-only', the SAP will be left up\n                     and only a notification, sapReceivedProtSrcMac,  will be \n                     generated.")
tlsShgCreationOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 6, 1, 11), L2RouteOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsShgCreationOrigin.setStatus('current')
if mibBuilder.loadTexts: tlsShgCreationOrigin.setDescription('The value of tlsShgCreationOrigin indicates the protocol or \n                     mechanism which created this SHG.')
svcApipeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7), )
if mibBuilder.loadTexts: svcApipeInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcApipeInfoTable.setDescription('A table that contains APIPE service information.')
svcApipeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcApipeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcApipeInfoEntry.setDescription('APIPE specific information about a service.')
svcApipeInterworking = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("frf-5", 2), ("frf-8-2-translate", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcApipeInterworking.setStatus('current')
if mibBuilder.loadTexts: svcApipeInterworking.setDescription('The value of the object svcApipeInterworking specifies the\n                     interworking function that should be applied for packets\n                     that ingress/egress SAPs that are part of a APIPE\n                     service.')
tlsMFibInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8), )
if mibBuilder.loadTexts: tlsMFibInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoTable.setDescription('tlsMFibInfoTable contains the IPv4 Multicast FIB for\n                     this Tls.\n                     \n                     This table was made obsolete in the 6.0 release.\n                     It is replaced by tlsMFibTable.')
tlsMFibInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSrcAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoLocale"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoPortId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSdpId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoVcId"))
if mibBuilder.loadTexts: tlsMFibInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoEntry.setDescription('An  entry in the tlsMFibInfoTable. Each entry indicates\n                     whether  traffic from a certain source to a certain\n                     multicast destination (group) needs to be forwarded or\n                     blocked on the indicated SAP/SDP.')
tlsMFibInfoGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoGrpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoGrpAddr.setDescription('The value of the object tlsMFibInfoGrpAddr indicates the\n                     IPv4 multicast destination address for which this table\n                     entry contains information.')
tlsMFibInfoSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibInfoSrcAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoSrcAddr.setDescription('tlsMFibInfoSrcAddr indicates the IPv4 unicast source\n                     address for which this table entry contains information.')
tlsMFibInfoLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 3), MfibLocation())
if mibBuilder.loadTexts: tlsMFibInfoLocale.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoLocale.setDescription("tlsMFibInfoLocale indicates if the information in\n                     this entry pertains to a 'sap' or to an 'sdp'.")
tlsMFibInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibInfoPortId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoPortId.setDescription("When the value of tlsMFibInfoLocale is 'sap', the object\n                     tlsMFibInfoPortId along with the object\n                     tlsMFibInfoEncapValue, indicates the SAP for which this\n                     entry contains information. This object is otherwise\n                     insignificant and contains the value 0.")
tlsMFibInfoEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibInfoEncapValue.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoEncapValue.setDescription("When the value of tlsMFibInfoLocale is 'sap', the object\n                     tlsMFibInfoEncapValue, along with the object\n                     tlsMFibInfoPortId, indicates the SAP for which this entry\n                     contains information. This object is otherwise\n                     insignificant and contains the value 0.")
tlsMFibInfoSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 6), SdpId())
if mibBuilder.loadTexts: tlsMFibInfoSdpId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoSdpId.setDescription("When the value of tlsMFibInfoLocale is 'sdp', the object\n                     tlsMFibInfoSdpId, along with tlsMFibInfoVcId, indicates\n                     the SDP Binding for which this entry contains information.\n                     This object is otherwise insignificant and contains the\n                     value 0.")
tlsMFibInfoVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 7), Unsigned32())
if mibBuilder.loadTexts: tlsMFibInfoVcId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoVcId.setDescription("When the value of tlsMFibInfoLocale is 'sdp', the object\n                     tlsMFibInfoVcId, along with tlsMFibInfoSdpId, indicates\n                     the SDP Binding for which this entry contains information.\n                     This object is otherwise insignificant and contains the\n                     value 0.")
tlsMFibInfoFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 8), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoFwdOrBlk.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoFwdOrBlk.setDescription('tlsMFibInfoFwdOrBlk indicates if traffic for the\n                     indicated (S,G) pair will be blocked or forwarded on the\n                     indicated SAP or SDP.')
tlsMFibInfoSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 8, 1, 9), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibInfoSvcId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibInfoSvcId.setDescription('tlsMFibInfoSvcId indicates the TLS service to which\n                     the indicated SAP or SDP belongs.')
tlsMFibGrpSrcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9), )
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsTable.setDescription('tlsMFibGrpSrcStatsTable contains statistics for the\n                     entries in the IPv4 Multicast FIB for this Tls. These\n                     statistics are collected by the forwarding engine.\n                     \n                     This table was made obsolete in the 6.0 release.\n                     It is replaced by tlsMFibStatsTable.')
tlsMFibGrpSrcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsGrpAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsSrcAddr"))
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsEntry.setDescription('An entry in the tlsMFibGrpSrcStatsTable.')
tlsMFibGrpSrcStatsGrpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 1), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsGrpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsGrpAddr.setDescription('tlsMFibGrpSrcStatsGrpAddr indicates the IPv4 multicast\n                     destination address for which this table entry contains\n                     information.')
tlsMFibGrpSrcStatsSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsSrcAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsSrcAddr.setDescription('tlsMFibGrpSrcStatsSrcAddr indicates the IPv4 unicast\n                     source address for which this table entry contains\n                     information.')
tlsMFibGrpSrcStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedPkts.setDescription('tlsMFibGrpSrcStatsForwardedPkts indicates the number of\n                     IPv4 multicast packets that were forwarded to the SAPs\n                     and SDPs listed in the tlsMFibInfoTable.')
tlsMFibGrpSrcStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedOctets.setStatus('obsolete')
if mibBuilder.loadTexts: tlsMFibGrpSrcStatsForwardedOctets.setDescription('tlsMFibGrpSrcStatsForwardedOctets indicates the number\n                     of octets that were forwarded to the SAPs and SDPs\n                     listed in the tlsMFibInfoTable.')
tlsRdntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10), )
if mibBuilder.loadTexts: tlsRdntGrpTable.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpTable.setDescription('A table that contains TLS service Redundant Group\n                     information.  There is no limit on the number of\n                     Redundant Groups that can be created globally or\n                     within a service.')
tlsRdntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpName"))
if mibBuilder.loadTexts: tlsRdntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpEntry.setDescription('Redundant Group information')
tlsRdntGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsRdntGrpName.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpName.setDescription('The value of the object tlsRdntGrpName specifies the\n                     name of the redundant group.\n                     The name must be unique within a TLS, however the same\n                     name can appear in different TLS services, in which\n                     case they denote different redundant groups.')
tlsRdntGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpRowStatus.setDescription("The value of the object tlsRdntGrpRowStatus specifies\n                     the status of this row. The only values supported are\n                     'active', 'createAndGo' and 'destroy'.")
tlsRdntGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 3), ServObjDesc().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpDescription.setDescription('The value of the object tlsRdntGrpDescription specifies\n                     generic information about this redundant group.')
tlsRdntGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 10, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpLastMgmtChange.setDescription('The value of the object tlsRdntGrpLastMgmtChange\n                     indicates the sysUpTime at the time of the most\n                     recent management-initiated change to this redundant\n                     group.')
tlsRdntGrpMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11), )
if mibBuilder.loadTexts: tlsRdntGrpMemberTable.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberTable.setDescription('A table that holds information about the members of\n                     TLS redundant groups.')
tlsRdntGrpMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpName"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddrTp"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRemoteNodeAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberIsSap"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberPort"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberEncap"))
if mibBuilder.loadTexts: tlsRdntGrpMemberEntry.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberEntry.setDescription('Redundant Group Member information.')
tlsRdntGrpMemberRemoteNodeAddrTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddrTp.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddrTp.setDescription('The value of the object tlsRdntGrpMemberRemoteNodeAddrTp\n                     specifies the addresstype of the remote ldp peer.')
tlsRdntGrpMemberRemoteNodeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddr.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberRemoteNodeAddr.setDescription('The value of the object tlsRdntGrpMemberRemoteNodeAddr\n                     specifies the ip address of the remote ldp peer.')
tlsRdntGrpMemberIsSap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 3), TruthValue())
if mibBuilder.loadTexts: tlsRdntGrpMemberIsSap.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberIsSap.setDescription('The value of the object tlsRdntGrpMemberIsSap\n                     specifies whether the Port ID and Encap describe a sap\n                     or a port (in which case Encap has no meaning).')
tlsRdntGrpMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 4), TmnxPortID())
if mibBuilder.loadTexts: tlsRdntGrpMemberPort.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberPort.setDescription("When the value of tlsRdntGrpMemberIsSap is 'sap',\n                     the value of the object  tlsRdntGrpMemberPort, along\n                     with tlsRdntGrpMemberEncap, specifies\n                     a SAP, otherwise a port (in which case\n                     tlsRdntGrpMemberEncap is insignificant).")
tlsRdntGrpMemberEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 5), TmnxEncapVal())
if mibBuilder.loadTexts: tlsRdntGrpMemberEncap.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberEncap.setDescription("When the value of tlsRdntGrpMemberIsSap is 'sap',\n                     the value of the object  tlsRdntGrpMemberEncap, along\n                     with tlsRdntGrpMemberPort, specifies a SAP. This object\n                     is otherwise insignificant and  should contain a\n                     value of 0.")
tlsRdntGrpMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsRdntGrpMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberRowStatus.setDescription("The value of the object tlsRdntGrpMemberRowStatus\n                     specifies the status of this row. The\n                     only values supported are 'active', 'createAndGo'\n                     and 'destroy'.")
tlsRdntGrpMemberLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 11, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsRdntGrpMemberLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsRdntGrpMemberLastMgmtChange.setDescription('The value of the object tlsRdntGrpMemberLastMgmtChange\n                     indicates the time of the most recent management-initiated\n                     change to this redundant group member.')
tlsMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12), )
if mibBuilder.loadTexts: tlsMstiTable.setStatus('current')
if mibBuilder.loadTexts: tlsMstiTable.setDescription('A table that contains Multiple Spanning Tree Instance\n                     (MSTI) information. Each management VPLS running MSTP can\n                     have upto 15 MSTI, not including the CIST.')
tlsMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsMstiEntry.setStatus('current')
if mibBuilder.loadTexts: tlsMstiEntry.setDescription('Information about a specific MSTI.')
tlsMstiInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 1), MstiInstanceId())
if mibBuilder.loadTexts: tlsMstiInstanceId.setStatus('current')
if mibBuilder.loadTexts: tlsMstiInstanceId.setDescription('The value of the object tlsMstiInstanceId specifies the\n                     Multiple Spanning Tree Instance.')
tlsMstiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsMstiRowStatus.setDescription("The value of the object tlsMstiRowStatus specifies the\n                     status of this row.\n                     The only values supported during a set operation are\n                     'active', 'createAndGo' and 'destroy'.")
tlsMstiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiPriority.setStatus('current')
if mibBuilder.loadTexts: tlsMstiPriority.setDescription("The value of the object tlsMstiPriority specifies the\n                     priority of this spcecific Multiple Spanning Tree\n                     Instance for this service.\n                     It is used as the highest 4 bits of the Bridge ID\n                     included in the MSTP BPDU's generated by\n                     this bridge.\n                     The tlsMstiPriority can only take-on values which\n                     multiples of 4096 (4k). If a value is specified which\n                     is not a multiple of 4K, then this value will be\n                     replaced by the closest multiple of 4K which is lower\n                     then the value entered.")
tlsMstiLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsMstiLastMgmtChange.setDescription('The value of the object tlsMstiLastMgmtChange indicates\n                     the value of sysUpTime at the time of the most recent\n                     management-initiated change to this MSTI.')
tlsMstiRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: tlsMstiRegionalRoot.setDescription('The value of the object tlsMstiRegionalRoot\n                     indicates the bridge identifier of the regional root of\n                     the MSTI spanning tree as determined by the Spanning Tree\n                     Protocol instance associated with this service. This value\n                     is used as the CIST Regional Root Identifier parameter in\n                     all MSTP BPDUs originated by this node.')
tlsMstiIntRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiIntRootCost.setStatus('current')
if mibBuilder.loadTexts: tlsMstiIntRootCost.setDescription('The value of the object tlsMstiIntRootCost indicates the\n                     cost of the path to the regional root bridge as seen from\n                     this bridge.')
tlsMstiRemainingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRemainingHopCount.setStatus('current')
if mibBuilder.loadTexts: tlsMstiRemainingHopCount.setDescription('The value of the object tlsMstiRemainingHopCount\n                     specifies the remaining number of hops.')
tlsMstiRegionalRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMstiRegionalRootPort.setStatus('current')
if mibBuilder.loadTexts: tlsMstiRegionalRootPort.setDescription('The value of the object tlsMstiRegionalRootPort indicates\n                     the port number of the port which offers the lowest cost\n                     path from this bridge to the regional root bridge.')
tlsMstiManagedVlanListTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13), )
if mibBuilder.loadTexts: tlsMstiManagedVlanListTable.setStatus('current')
if mibBuilder.loadTexts: tlsMstiManagedVlanListTable.setDescription('This table is used only for a management VPLS when MSTP\n                     is running. It indicates for each multiple spanning tree\n                     instance the ranges of associated VLANs that will be\n                     affected when a certain SAP changes state.')
tlsMstiManagedVlanListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsMinVlanTag"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsMaxVlanTag"))
if mibBuilder.loadTexts: tlsMstiManagedVlanListEntry.setStatus('current')
if mibBuilder.loadTexts: tlsMstiManagedVlanListEntry.setDescription('Each row specifies a range of VLANS associated\n                     with a SAP of a MVPLS. Ranges may contains overlapping\n                     sections only for Mvpls SAPs that belong to the same\n                     service.')
tlsMstiMvplsMinVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 1), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMinVlanTag.setStatus('current')
if mibBuilder.loadTexts: tlsMstiMvplsMinVlanTag.setDescription('The value of tlsMstiMvplsMinVlanTag specifies\n                     the left bound (i.e. min. value) of a range of VLANs\n                     that are associated with the Mvpls SAP.\n                     tlsMstiMvplsMinVlanTag must be smaller than (or equal\n                     to) tlsMstiMvplsMaxVlanTag.')
tlsMstiMvplsMaxVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 2), QTag())
if mibBuilder.loadTexts: tlsMstiMvplsMaxVlanTag.setStatus('current')
if mibBuilder.loadTexts: tlsMstiMvplsMaxVlanTag.setDescription('The value of tlsMstiMvplsMaxVlanTag specifies the\n                     right bound (i.e. max. value) of a range of VLANs that\n                     are associated with the Mvpls SAP.')
tlsMstiMvplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsMstiMvplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsMstiMvplsRowStatus.setDescription("The value of tlsMstiMvplsRowStatus specifies\n                      the status of this row. The only values supported\n                      during a set operation are 'active', 'createAndGo' and\n                      'destroy'.")
tlsEgressMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14), )
if mibBuilder.loadTexts: tlsEgressMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: tlsEgressMulticastGroupTable.setDescription("This table is used to manage VPLS Egress Multicast\n                     Groups. These groups are used to group together VPLS\n                     SAP's in order to improve the efficiency of the egress\n                     multicast replication process.")
tlsEgressMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpName"))
if mibBuilder.loadTexts: tlsEgressMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tlsEgressMulticastGroupEntry.setDescription('An entry containing management information applicable\n                     to a particular VPLS Egress Multicast Group.')
tlsEgrMcGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tlsEgrMcGrpName.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpName.setDescription('The value of tlsEgrMcGrpName indicates the name of\n                     the Egress Multicast Group.')
tlsEgrMcGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpRowStatus.setDescription('The value of tlsEgrMcGrpRowStatus controls the creation\n                     and deletion of rows in this table.')
tlsEgrMcGrpLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpLastMgmtChange.setDescription('The value of tlsEgrMcGrpLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
tlsEgrMcGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 4), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDescription.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpDescription.setDescription('Generic information about this Egress Multicast Group.')
tlsEgrMcGrpChainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpChainLimit.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpChainLimit.setDescription("The value of tlsEgrMcGrpChainLimit specifies the maximum\n                     number of SAP's that can be placed together in a single\n                     chain on this Egress Multicast Group.")
tlsEgrMcGrpEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 10))).clone(namedValues=NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("qinqEncap", 10))).clone('nullEncap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpEncapType.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpEncapType.setDescription("The value of tlsEgrMcGrpEncapType specifies the common\n                     service encapsulation type used by all the SAP's on this\n                     Egress Multicast Group.")
tlsEgrMcGrpDot1qEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpDot1qEtherType.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpDot1qEtherType.setDescription("The value of tlsEgrMcGrpDot1qEtherType specifies the\n                     common ethertype value used by all the 802.1Q SAP's on\n                     this Egress Multicast Group.")
tlsEgrMcGrpMacFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 8), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpMacFilterId.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpMacFilterId.setDescription("The value of tlsEgrMcGrpMacFilterId specifies the common\n                     egress MAC filter ID used by all the SAP's on this\n                     Egress Multicast Group.")
tlsEgrMcGrpIpFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 9), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpFilterId.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpIpFilterId.setDescription("The value of tlsEgrMcGrpIpFilterId specifies the common\n                     egress IP filter ID used by all the SAP's on this\n                     Egress Multicast Group.")
tlsEgrMcGrpIpv6FilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 10), TFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpIpv6FilterId.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpIpv6FilterId.setDescription("The value of tlsEgrMcGrpIpv6FilterId specifies the common\n                     egress IPv6 filter ID used by all the SAP's on this\n                     Egress Multicast Group.")
tlsEgrMcGrpQinqEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqEtherType.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpQinqEtherType.setDescription("The value of tlsEgrMcGrpQinqEtherType specifies the\n                     common ethertype value used by all the 'QinQ' SAP's in\n                     this Egress Multicast Group.")
tlsEgrMcGrpQinqFixedTagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("topTag", 2), ("bottomTag", 3))).clone('bottomTag')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpQinqFixedTagPosition.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpQinqFixedTagPosition.setDescription("The value of tlsEgrMcGrpQinqFixedTagPosition specifies\n                     the common position of the fixed 802.1Q tag of all the\n                     'QinQ' SAP's in this Egress Multicast Group. This object\n                     has no meaning when the value of tlsEgrMcGrpEncapType\n                     is not 'qinqEncap'.")
tlsEgrMcGrpAdminQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsEgrMcGrpAdminQinqFixedTagVal.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpAdminQinqFixedTagVal.setDescription("The value of tlsEgrMcGrpAdminQinqFixedTagVal \n                     specifies the provisioned common value of the fixed \n                     802.1Q tag of all the 'QinQ' SAP's in this Egress \n                     Multicast Group.\n\n                     The value 0 is used to indicate that the actual value \n                     of the fixed tag will be defined implicitly by the \n                     corresponding tag of the first SAP added to this Egress\n                     Multicast Group.")
tlsEgrMcGrpOperQinqFixedTagVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 14, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsEgrMcGrpOperQinqFixedTagVal.setStatus('current')
if mibBuilder.loadTexts: tlsEgrMcGrpOperQinqFixedTagVal.setDescription("The value of tlsEgrMcGrpOperQinqFixedTagVal \n                     specifies the operating common value of the fixed \n                     802.1Q tag of all the 'QinQ' SAP's in this Egress \n                     Multicast Group.")
svcDhcpLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16), )
if mibBuilder.loadTexts: svcDhcpLeaseStateTable.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateTable.setDescription('A table that contains DHCP lease states.')
svcDhcpLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"))
if mibBuilder.loadTexts: svcDhcpLeaseStateEntry.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateEntry.setDescription('Information about a specific DHCP lease state.')
svcDhcpLseStateCiAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrType.setDescription('The value of svcDhcpLseStateCiAddrType indicates the\n                     address type of svcDhcpLseStateCiAddr.')
svcDhcpLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpLseStateCiAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateCiAddr.setDescription('The value of svcDhcpLseStateCiAddr indicates the IP\n                     address of the DHCP lease state.')
svcDhcpLseStateLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sap", 1), ("sdp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLocale.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateLocale.setDescription('The value of svcDhcpLseStateLocale specifies if the DHCP\n                     lease state is learned via a SAP or SDP.')
svcDhcpLseStatePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 4), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePortId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePortId.setDescription("When the value of svcDhcpLseStateLocale is 'sap', the\n                     object svcDhcpLseStatePortId along with the object\n                     svcDhcpLseStateEncapValue, indicates the SAP for which\n                     this entry contains information. This object is otherwise\n                     insignificant and contains the value 0.")
svcDhcpLseStateEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 5), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateEncapValue.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateEncapValue.setDescription("When the value of svcDhcpLseStateLocale is 'sap', the\n                     object svcDhcpLseStatePortId along with the object\n                     svcDhcpLseStateEncapValue, indicates the SAP for which\n                     this entry contains information. This object is otherwise\n                     insignificant and contains the value 0.")
svcDhcpLseStateSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 6), SdpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSdpId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSdpId.setDescription("When the value of svcDhcpLseStateLocale is 'sdp', the\n                     object svcDhcpLseStateSdpId, along with the object\n                     svcDhcpLseStateVcId, indicates the SDP Binding for which\n                     this entry contains information. This object is otherwise\n                     insignificant and contains the value 0.")
svcDhcpLseStateVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateVcId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateVcId.setDescription("When the value of svcDhcpLseStateLocale is 'sdp', the\n                     object svcDhcpLseStateSdpId, along with the object\n                     svcDhcpLseStateVcId, indicates the SDP Binding for which\n                     this entry contains information. This object is otherwise\n                     insignificant and contains the value 0.")
svcDhcpLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateChAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateChAddr.setDescription('The value of svcDhcpLseStateChAddr indicates the MAC\n                     address of the DHCP lease state.')
svcDhcpLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRemainLseTime.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateRemainLseTime.setDescription('The value of svcDhcpLseStateRemainLseTime indicates the\n                     remaining lease time of the DHCP lease state.')
svcDhcpLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOption82.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOption82.setDescription('The value of svcDhcpLseStateOption82 indicates the content\n                     of option 82 for this DHCP lease state.')
svcDhcpLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePersistKey.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePersistKey.setDescription('The value of svcDhcpLseStatePersistKey indicates a key\n                     value that can be used to track this lease state in the\n                     persistence file.')
svcDhcpLseStateSubscrIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubscrIdent.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSubscrIdent.setDescription('The value of svcDhcpLseStateSubscrIdent indicates the\n                     id of the parent subscriber of this DHCP lease state.\n                     \n                     The value of svcDhcpLseStateOriginSubscrId indicates\n                     whether this subscriber identification was received from\n                     the DHCP or from the Radius server.')
svcDhcpLseStateSubProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSubProfString.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSubProfString.setDescription('The value of svcDhcpLseStateSubProfString indicates the\n                     subscriber profile string applicable for this DHCP lease\n                     state.\n                     \n                     The value of svcDhcpLseStateOriginStrings indicates\n                     whether this subscriber profile string was received from\n                     the DHCP or from the Radius server.')
svcDhcpLseStateSlaProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSlaProfString.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSlaProfString.setDescription('The value of svcDhcpLseStateSlaProfString indicates the\n                     SLA profile string applicable for this DHCP lease state.\n                     \n                     The value of svcDhcpLseStateOriginStrings indicates\n                     whether this SLA profile string was received from\n                     the DHCP or from the Radius server.')
svcDhcpLseStateShcvOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("undefined", 2), ("down", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvOperState.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateShcvOperState.setDescription('The value of svcDhcpLseStateShcvOperState indicates the\n                     state of the subscriber host connectivity check for\n                     this DHCP lease state.')
svcDhcpLseStateShcvChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvChecks.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateShcvChecks.setDescription('The value of svcDhcpLseStateShcvChecks indicates the\n                     number of host connectivity check requests for\n                     this DHCP lease state.')
svcDhcpLseStateShcvReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplies.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplies.setDescription('The value of svcDhcpLseStateShcvReplies indicates the\n                     number of host connectivity replies for\n                     this DHCP lease state.')
svcDhcpLseStateShcvReplyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplyTime.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateShcvReplyTime.setDescription('The value of svcDhcpLseStateShcvReplyTime indicates the\n                     time of the last successful host connectivity check for\n                     this DHCP lease state.')
svcDhcpLseStateClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 19), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateClientId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateClientId.setDescription('The value of svcDhcpLseStateClientId indicates the \n                     DHCPv6 clients unique identifier (DUID) as generated\n                     by the client.')
svcDhcpLseStateIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAID.setReference('RFC 3315 section 10')
if mibBuilder.loadTexts: svcDhcpLseStateIAID.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateIAID.setDescription('The value of svcDhcpLseStateIAID indicates the\n                     Identity Association ID (IAID)\n                     the address or prefix defined by\n                     svcDhcpLseStateCiAddr/svcDhcpLseStateCiAddrMaskLen\n                     has been assigned to.\n                     \n                     This object is only meaningful for DHCPv6 leases.')
svcDhcpLseStateIAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 21), IAIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateIAIDType.setReference('RFC 3315')
if mibBuilder.loadTexts: svcDhcpLseStateIAIDType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateIAIDType.setDescription('The value of svcDhcpLseStateIAIDType indicates the\n                     type of svcDhcpLseStateIAID.\n\n                     This object is only meaningful for DHCPv6 leases.')
svcDhcpLseStateCiAddrMaskLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrMaskLen.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateCiAddrMaskLen.setDescription('The value of svcDhcpLseStateCiAddrMaskLen indicates the \n                     prefix length of the svcDhcpLseStateCiAddr for a DHCPv6\n                     lease.')
svcDhcpLseStateRetailerSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 23), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerSvcId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateRetailerSvcId.setDescription('The value of svcDhcpLseStateRetailerSvcId indicates the\n                     service ID of the retailer VPRN service to which this \n                     DHCP lease belongs. When this object is non zero, the\n                     DHCP lease belongs to a retailer VPRN.')
svcDhcpLseStateRetailerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateRetailerIf.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateRetailerIf.setDescription('The value of svcDhcpLseStateRetailerIf indicates the\n                      interface index of the retailer VPRN interface to \n                      which this DHCP lease belongs. When this object is \n                      non zero, the DHCP lease belongs to a retailer VPRN.')
svcDhcpLseStateAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAncpString.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateAncpString.setDescription('The object svcDhcpLseStateAncpString indicates the\n                     value of the ancp-string received from either the DHCP\n                     or the Radius server as indicated by the value of \n                     svcDhcpLseStateOriginStrings.')
svcDhcpLseStateFramedIpNetMaskTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 26), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMaskTp.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMaskTp.setDescription('The value of svcDhcpLseStateFramedIpNetMaskTp indicates the\n                     address type of svcDhcpLseStateFramedIpNetMask.')
svcDhcpLseStateFramedIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 27), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMask.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateFramedIpNetMask.setDescription("The value of svcDhcpLseStateFramedIpNetMask indicates the\n                     framed IP netmask received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateBCastIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddrType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddrType.setDescription('The value of svcDhcpLseStateBCastIpAddrType indicates the\n                     address type of svcDhcpLseStateBCastIpAddr.')
svcDhcpLseStateBCastIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 29), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateBCastIpAddr.setDescription("The value of svcDhcpLseStateBCastIpAddr indicates the\n                     broadcast IP address received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateDefaultRouterTp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 30), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouterTp.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouterTp.setDescription('The value of svcDhcpLseStateDefaultRouterTp indicates the\n                     address type of svcDhcpLseStateDefaultRouter.')
svcDhcpLseStateDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 31), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDefaultRouter.setDescription("The value of svcDhcpLseStateDefaultRouter indicates the\n                     default router received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStatePrimaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 32), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDnsType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDnsType.setDescription('The value of svcDhcpLseStatePrimaryDnsType indicates the\n                     address type of svcDhcpLseStatePrimaryDns.')
svcDhcpLseStatePrimaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 33), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDns.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryDns.setDescription("The value of svcDhcpLseStatePrimaryDns indicates the\n                     primary DNS server received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateSecondaryDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 34), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDnsType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDnsType.setDescription('The value of svcDhcpLseStateSecondaryDnsType indicates the\n                     address type of svcDhcpLseStateSecondaryDns.')
svcDhcpLseStateSecondaryDns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 35), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDns.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryDns.setDescription("The value of svcDhcpLseStateSecondaryDns indicates the\n                     secondary DNS server received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSessionTimeout.setDescription('The value of svcDhcpLseStateSessionTimeout indicates the\n                     session timeout received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.')
svcDhcpLseStateServerLeaseStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 37), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseStart.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseStart.setDescription('The value of svcDhcpLseStateServerLeaseStart indicates\n                     when this lease was created.')
svcDhcpLseStateServerLastRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLastRenew.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateServerLastRenew.setDescription('The value of svcDhcpLseStateServerLastRenew indicates\n                     when we last received a renewal from either the DHCP or the\n                     Radius server.')
svcDhcpLseStateServerLeaseEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseEnd.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateServerLeaseEnd.setDescription('The value of svcDhcpLseStateServerLeaseEnd indicates\n                     when the server will consider the lease as being\n                     expired.')
svcDhcpLseStateDhcpServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 40), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddrType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddrType.setDescription('The value of svcDhcpLseStateDhcpServerAddrType indicates\n                     the address type of svcDhcpLseStateDhcpServerAddr.')
svcDhcpLseStateDhcpServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 41), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDhcpServerAddr.setDescription("The value of svcDhcpLseStateDhcpServerAddr indicates the\n                     IP address of the DHCP server received from either the\n                     DHCP or the Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n                     \n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateOriginSubscrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 42), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginSubscrId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOriginSubscrId.setDescription('The value of svcDhcpLseStateOriginSubscrId indicates\n                     which source provided the subscriber-id.')
svcDhcpLseStateOriginStrings = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 43), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginStrings.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOriginStrings.setDescription('The value of svcDhcpLseStateOriginStrings indicates\n                     which server provided the Sub-profile, SLA profile,\n                     Ancp string and Intermediate Destination Id.')
svcDhcpLseStateOriginLeaseInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 44), DhcpLseStateInfoOrigin()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateOriginLeaseInfo.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOriginLeaseInfo.setDescription('The value of svcDhcpLseStateOriginLeaseInfo indicates\n                     which server provided the lease state information.')
svcDhcpLseStateDhcpClientAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 45), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddrType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddrType.setDescription('The value of svcDhcpLseStateDhcpClientAddrType indicates\n                     the address type of svcDhcpLseStateDhcpClientAddr.')
svcDhcpLseStateDhcpClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 46), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateDhcpClientAddr.setDescription('The value of svcDhcpLseStateDhcpClientAddr indicates the\n                     IP address of the DHCP Client that owns the lease info.\n\n                     In some cases this address can be different from the\n                     address specified in svcDhcpLseStateCiAddr, e.g. in case of\n                     DHCPv6 prefix delegation.')
svcDhcpLseStateLeaseSplitActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 47), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateLeaseSplitActive.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateLeaseSplitActive.setDescription("The value of svcDhcpLseStateLeaseSplitActive indicates\n                     whether or not the current lease time resulted from a\n                     lease split.\n                     If svcDhcpLseStateLeaseSplitActive is 'true',\n                     the lease time passed to the client is determined by the\n                     value of the object sapTlsDhcpProxyLeaseTime for VPLS SAPs,\n                     or by the value of the object vRtrIfDHCPProxyLeaseTime\n                     for Layer 3 interfaces.")
svcDhcpLseStateInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateInterDestId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateInterDestId.setDescription('The object svcDhcpLseStateInterDestId indicates the\n                     intermediate destination identifier received from either\n                     the DHCP or the Radius server or the local user database\n                     as indicated by the value of svcDhcpLseStateOriginStrings.')
svcDhcpLseStatePrimaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 49), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbnsType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbnsType.setDescription('The value of svcDhcpLseStatePrimaryNbnsType indicates the\n                     address type of svcDhcpLseStatePrimaryNbns.')
svcDhcpLseStatePrimaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 50), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbns.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePrimaryNbns.setDescription("The value of svcDhcpLseStatePrimaryNbns indicates the\n                     primary NBNS server received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n\n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateSecondaryNbnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 51), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbnsType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbnsType.setDescription('The value of svcDhcpLseStateSecondaryNbnsType indicates\n                     the address type of svcDhcpLseStateSecondaryNbns.')
svcDhcpLseStateSecondaryNbns = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbns.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateSecondaryNbns.setDescription("The value of svcDhcpLseStateSecondaryNbns indicates the\n                     secondary NBNS server received from either the DHCP or the\n                     Radius server as indicated by the value of\n                     svcDhcpLseStateOriginLeaseInfo.\n\n                     The value of this object is ''H when not applicable.")
svcDhcpLseStateAppProfString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateAppProfString.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateAppProfString.setDescription('The value of svcDhcpLseStateAppProfString indicates the\n                     application profile string applicable for this DHCP lease\n                     state.\n                     \n                     The value of svcDhcpLseStateOriginStrings indicates\n                     whether this application profile string was received from\n                     DHCP or from the Radius server.')
svcDhcpLseStateNextHopMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 16, 1, 54), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpLseStateNextHopMacAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateNextHopMacAddr.setDescription("The value of svcDhcpLseStateNextHopMacAddr indicates the\n                     MAC address of the next hop of this DHCP lease state.\n                     \n                     Normally, the next hop MAC address equals the value of\n                     svcDhcpLseStateChAddr. If the value of the object\n                     ALCATEL-IND1-TIMETRA-VRTR-MIB::vRtrIfDHCPLayer2Header is set to 'true',\n                     a routing device can be present between this node and\n                     the DHCP client. In that case, the value of the next hop\n                     MAC address contains the MAC address of this routing\n                     device.")
tlsProtectedMacTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17), )
if mibBuilder.loadTexts: tlsProtectedMacTable.setStatus('current')
if mibBuilder.loadTexts: tlsProtectedMacTable.setDescription("This table is used to manage protected MAC addresses\n                     within a VPLS's FDB.")
tlsProtectedMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacAddress"))
if mibBuilder.loadTexts: tlsProtectedMacEntry.setStatus('current')
if mibBuilder.loadTexts: tlsProtectedMacEntry.setDescription('An entry containing management information applicable\n                     to a particular protected MAC address.')
tlsProtMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 1), MacAddress())
if mibBuilder.loadTexts: tlsProtMacAddress.setStatus('current')
if mibBuilder.loadTexts: tlsProtMacAddress.setDescription('The value of tlsProtMacAddress indicates the address\n                     of the protected MAC.')
tlsProtMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tlsProtMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: tlsProtMacRowStatus.setDescription('The value of tlsProtMacRowStatus controls the creation\n                     and deletion of rows in this table.')
tlsProtMacLastMgmtChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 17, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsProtMacLastMgmtChange.setStatus('current')
if mibBuilder.loadTexts: tlsProtMacLastMgmtChange.setDescription('The value of tlsProtMacLastMgmtChange indicates the\n                     value of sysUpTime at the time of the last management\n                     change of any writable object of this row.')
svcDhcpLeaseStateModifyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18), )
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyTable.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyTable.setDescription('The svcDhcpLeaseStateModifyTable augments the\n                     svcDhcpLeaseStateTable.\n                     The table allows the operator to modify attributes of the\n                     lease state.')
svcDhcpLeaseStateModifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLeaseStateModifyEntry"))
svcDhcpLeaseStateModifyEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyEntry.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateModifyEntry.setDescription("Each row entry contains parameters that allow to modify a\n                     lease-state's  attributes.")
svcDhcpLseStateModifySubIndent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubIndent.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModifySubIndent.setDescription('The value of svcDhcpLseStateModifySubIndent allows to\n                     specify a new subscriber name for this lease state.\n\n                     When a SET of this object is done with a non empty string, the\n                     system will attempt to assign a new subscriber name.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty string.')
svcDhcpLseStateModifySubProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySubProfile.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModifySubProfile.setDescription('The value of svcDhcpLseStateModifySubProfile allows to\n                     specify a new subscriber profile string for this lease\n                     state.\n\n                     When a SET of this object is done with a non empty string,\n                     the system will attempt to assign a new subscriber profile.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty string.')
svcDhcpLseStateModifySlaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifySlaProfile.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModifySlaProfile.setDescription('The value of svcDhcpLseStateModifySlaProfile allows to\n                     specify a new SLA profile string for this lease state.\n\n                     When a SET of this object is done with a non empty string,\n                     the system will attempt to assign a new SLA profile.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty string.')
svcDhcpLseStateEvaluateState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateEvaluateState.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateEvaluateState.setDescription("The value of svcDhcpLseStateEvaluateState allows to\n                     cause a re-evaluation of the specified lease state.\n\n                     When this object is set to 'true', the system will perform\n                     a re-evaluation of the lease state.\n\n                     GETs and GETNEXTs on this variable return false.\n\n                     It is not possible to simultaneously request for a\n                     lease-state re-evaluation, and modify any of the \n                     svcDhcpLseStateModifySubIndent,\n                     svcDhcpLseStateModifySubProfile or \n                     svcDhcpLseStateModifySlaProfile values.")
svcDhcpLseStateModInterDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModInterDestId.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModInterDestId.setDescription('The value of svcDhcpLseStateModInterDestId allows to\n                     specify a new intermediate destination id for this lease\n                     state.\n\n                     When a SET of this object is done with a non empty string,\n                     the system will attempt to assign a new intermediate\n                     destination id.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty string.')
svcDhcpLseStateModifyAncpString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 6), TmnxAncpStringOrZero().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAncpString.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModifyAncpString.setDescription('The value of svcDhcpLseStateModifyAncpString allows to\n                     specify a new ANCP-string for this lease state.\n\n                     When a SET of this object is done with a non empty string,\n                     the system will attempt to assign a new ANCP-string.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty string.')
svcDhcpLseStateModifyAppProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 18, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateModifyAppProfile.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateModifyAppProfile.setDescription('The value of svcDhcpLseStateModifyAppProfile specifies\n                     a new application profile string for this lease state.\n\n                     When a SET of this object is done with a non empty string,\n                     the system assigns a new application profile.\n\n                     A SET with an empty string has no effect on the system.\n                     (NOOP).\n\n                     GETs and GETNEXTs on this variable return an empty\n                     string.')
svcEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19), )
if mibBuilder.loadTexts: svcEndPointTable.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTable.setDescription('The svcEndPointTable has an entry for each service endpoint\n                 configured on this system.')
svcEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointName"))
if mibBuilder.loadTexts: svcEndPointEntry.setStatus('current')
if mibBuilder.loadTexts: svcEndPointEntry.setDescription('Each row entry represents a particular service endpoint. \n                 Entries are created/deleted by the user.')
svcEndPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcEndPointName.setStatus('current')
if mibBuilder.loadTexts: svcEndPointName.setDescription('The value of svcEndPointName specifies the name of the service\n                 endpoint.')
svcEndPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcEndPointRowStatus.setDescription('The value of svcEndPointRowStatus is used for the creation and\n                 deletion of service endpoints.')
svcEndPointDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 3), ServObjDesc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointDescription.setStatus('current')
if mibBuilder.loadTexts: svcEndPointDescription.setDescription('The value of svcEndPointDescription specifies the textual\n                 description of this service endpoint.')
svcEndPointRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointRevertTime.setStatus('current')
if mibBuilder.loadTexts: svcEndPointRevertTime.setDescription("The value of svcEndPointRevertTime specifies the time to wait\n                 before reverting back to the primary spoke-sdp defined on this\n                 service endpoint, after having failed over to a backup \n                 spoke-sdp. When the value is '-1', the spoke-sdp will never \n                 revert back.")
svcEndPointTxActiveType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("sap", 1), ("sdpBind", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveType.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveType.setDescription('The value of svcEndPointTxActiveType indicates the type of\n                 end-point object that is current transmit active. ')
svcEndPointTxActivePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActivePortId.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActivePortId.setDescription("The value of svcEndPointTxActivePortId indicates the Port ID\n                 of the SAP that is transmit active. This object is only valid\n                 when svcEndPointTxActiveType is 'sap'.")
svcEndPointTxActiveEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 7), TmnxEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveEncap.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveEncap.setDescription("The value of svcEndPointTxActiveEncap indicates the \n                 encapsulation value of the SAP that is transmit active. This\n                 object is only valid when svcEndPointTxActiveType is 'sap'.")
svcEndPointTxActiveSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 8), SdpBindId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveSdpId.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveSdpId.setDescription("The value of svcEndPointTxActiveSdpId indicates the SDP bind\n                 ID of the SDP bind that is transmit active. This object is only\n                 valid when svcEndPointTxActiveType is 'sdpBind'.")
svcEndPointForceSwitchOver = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 9), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOver.setStatus('current')
if mibBuilder.loadTexts: svcEndPointForceSwitchOver.setDescription("The value of svcEndPointForceSwitchOver specifies whether to\n                 force a switchover of the active SDP bind. When it is set to\n                 'doAction', the SDP bind specified by \n                 svcEndPointForceSwitchOverSdpId will become active.")
svcEndPointForceSwitchOverSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 10), SdpBindId().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointForceSwitchOverSdpId.setStatus('current')
if mibBuilder.loadTexts: svcEndPointForceSwitchOverSdpId.setDescription("The value of svcEndPointForceSwitchOverSdpId specifies the SDP\n                 bind to switch over to when svcEndPointForceSwitchOver is set\n                 to 'doAction'. If the value of this object is non default, it \n                 indicates that a forced switchover has taken place. Setting \n                 this object to the default value clears any previous forced \n                 switchover. ")
svcEndPointActiveHoldDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('deci-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointActiveHoldDelay.setStatus('current')
if mibBuilder.loadTexts: svcEndPointActiveHoldDelay.setDescription('The value of svcEndPointActiveHoldDelay specifies the amount\n                 of time in deci-seconds to hold the active state before going\n                 into the standby state when a local MC-LAG SAP goes down.')
svcEndPointIgnoreStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointIgnoreStandbySig.setStatus('current')
if mibBuilder.loadTexts: svcEndPointIgnoreStandbySig.setDescription("The value of svcEndPointIgnoreStandbySig specifies whether the\n                 local internal tasks will take into account the 'pseudo-wire\n                 forwarding standby' bit received from the LDP peer which is\n                 normally ignored.  \n\n                 When set to 'true', this bit is not considered in the internal\n                 tasks.\n\n                 A similar object sdpBindTlsIgnoreStandbySig is present at the\n                 SDP level. The value of sdpBindTlsIgnoreStandbySig is set to\n                 the value of svcEndPointIgnoreStandbySig for the spoke-SDP\n                 associated with this endpoint.")
svcEndPointMacPinning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 13), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacPinning.setStatus('current')
if mibBuilder.loadTexts: svcEndPointMacPinning.setDescription('The value of svcEndPointMacPinning specifies whether or not\n                 MAC address pinning is active on this end-point.')
svcEndPointMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 196607))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointMacLimit.setStatus('current')
if mibBuilder.loadTexts: svcEndPointMacLimit.setDescription("The value of the object svcEndPointMacLimit specifies the\n                 maximum number of learned and static entries allowed for this\n                 end-point.\n        \n                 The value 0 means: no limit for this end-point. \n\n                 When the value of ALCATEL-IND1-TIMETRA-CHASSIS-MIB::tmnxChassisOperMode is\n                 not 'c', the maximum value of svcEndPointMacLimit is '131071'.")
svcEndPointSuppressStandbySig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 15), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEndPointSuppressStandbySig.setStatus('current')
if mibBuilder.loadTexts: svcEndPointSuppressStandbySig.setDescription("The value of the object svcEndPointSuppressStandbySig specifies\n                 whether the 'pseudo wire forwarding standby' bit will be sent\n                 to the LDP peer whenever the spoke SDP\n                 'svcEndPointTxActiveSdpId' is selected as standby. \n\n                 When set to 'true', this bit will not be sent.")
svcEndPointRevertTimeCountDn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 600), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointRevertTimeCountDn.setStatus('current')
if mibBuilder.loadTexts: svcEndPointRevertTimeCountDn.setDescription('The value of svcEndPointRevertTimeCountDn indicates the timer\n                 count down before reverting back to the primary spoke-sdp\n                 defined on this service endpoint, after having failed over to\n                 a backup spoke-sdp.\n\n                 This timer count down begins after primary Spoke SDP becomes\n                 operational.\n                 \n                 The value of -1 indicates when revert is not-applicable.')
svcEndPointTxActiveChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveChangeCount.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveChangeCount.setDescription('The value of svcEndPointTxActiveChangeCount indicates the\n                 number of times active transmit change has taken place in this\n                 endpoint.')
svcEndPointTxActiveLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveLastChange.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveLastChange.setDescription('The value of svcEndPointTxActiveLastChange indicates the\n                 value of sysUpTime at the time of the last active transmit\n                 change in this endpoint.')
svcEndPointTxActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 19, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEndPointTxActiveUpTime.setStatus('current')
if mibBuilder.loadTexts: svcEndPointTxActiveUpTime.setDescription("The value of svcEndPointTxActiveUpTime indicates the active\n                'up' time (in hundredths of a second) of the end-point object \n                that is current transmit active.")
iesGrpIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21), )
if mibBuilder.loadTexts: iesGrpIfTable.setStatus('current')
if mibBuilder.loadTexts: iesGrpIfTable.setDescription('The iesGrpIfTable has entry for each group interface\n                 configured on this system.')
iesGrpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesGrpIfEntry.setStatus('current')
if mibBuilder.loadTexts: iesGrpIfEntry.setDescription("Each row entry represents the attributes of a group interface.\n                 Entries are create/destroyed when entries in iesIfEntry with\n                 iesIfType 'group' are created/destroyed.")
iesGrpIfRedInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfRedInterface.setStatus('current')
if mibBuilder.loadTexts: iesGrpIfRedInterface.setDescription("The value of iesGrpIfRedInterface specifies the ifIndex\n                 of the redundant interface this group interface is tied to.\n                 The interface pointed to by this object must be of\n                 type 'redundant'.")
iesGrpIfOperUpWhileEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 21, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesGrpIfOperUpWhileEmpty.setStatus('current')
if mibBuilder.loadTexts: iesGrpIfOperUpWhileEmpty.setDescription("The value of iesGrpIfOperUpWhileEmpty specifies the\n                 whether that operational status of the the IES group\n                 interface, as indicated by iesIfOperStatus, should have\n                 a value of 'up' even when there are no SAPs on the\n                 group interface.\n\n                 If the value of iesGrpIfOperUpWhileEmpty is 'true', the\n                 value of iesIfOperStatus for the IES group interface will\n                 be 'up' when there are no SAPs on the group interface. When\n                 the value of iesGrpIfOperUpWhileEmpty is 'false', the value\n                 of iesIfOperStatus will depend on the operational state of\n                 the SAPs on the group interface. The value of\n                 iesGrpIfOperUpWhileEmpty will be ignored when there are\n                 SAPs on the IES group interface.")
svcPEDiscoveryPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22), )
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTable.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTable.setDescription('The svcPEDiscoveryPolicyTable has an entry for each PE policy.')
svcPEDiscoveryPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1), ).setIndexNames((1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscoveryPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyEntry.setDescription('svcPEDiscoveryPolicyEntry is an entry (conceptual row) in the\n         svcPEDiscoveryPolicyTable. Each entry represents the configuration\n         of a PE Discovery Policy.\n\n         Entries in this table can be created and deleted via SNMP SET\n         operations to svcPEDiscoveryPolicyRowStatus.')
svcPEDiscoveryPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 1), TNamedItem())
if mibBuilder.loadTexts: svcPEDiscoveryPolicyName.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyName.setDescription('The value of the object svcPEDiscoveryPolicyName specifies the \n         RADIUS PE Discovery Policy name.')
svcPEDiscoveryPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyRowStatus.setDescription("svcPEDiscoveryPolicyRowStatus controls the creation and deletion\n         of rows in the table.\n\n         To create a row in the svcPEDiscoveryPolicyTable,\n         set svcPEDiscoveryPolicyRowStatus to 'createAndGo'. All objects will take\n         on default values and the agent will change svcPEDiscoveryPolicyRowStatus\n         to 'active'.\n\n         To delete a row in the svcPEDiscoveryPolicyTable, set\n         svcPEDiscoveryPolicyRowStatus to 'delete'.")
svcPEDiscoveryPolicyPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyPassword.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyPassword.setDescription('The value of svcPEDiscoveryPolicyPassword specifies the password that is\n         used when contacting the RADIUS server for VPLS auto-discovery.\n\n\n         The value of svcPEDiscPolServerSecret cannot be set to an empty \n         string.  GETs and GETNEXTs on this variable return an empty string.')
svcPEDiscoveryPolicyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyInterval.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyInterval.setDescription('The value of svcPEDiscoveryPolicyInterval specifies the polling\n         interval for Radius PE discovery in minutes.')
svcPEDiscoveryPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 22, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 90)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscoveryPolicyTimeout.setDescription('The value of svcPEDiscoveryPolicyTimeout specifies the number of \n         seconds to wait before timing out a RADIUS server.')
svcPEDiscPolServerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23), )
if mibBuilder.loadTexts: svcPEDiscPolServerTable.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerTable.setDescription('The svcPEDiscPolServerTable has an entry for each RADIUS server.\n         The table can have up to a maximum of 5 entries.')
svcPEDiscPolServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerIndex"), (1, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyName"))
if mibBuilder.loadTexts: svcPEDiscPolServerEntry.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerEntry.setDescription('svcPEDiscPolServerEntry is an entry (conceptual row) in the\n         svcPEDiscPolServerTable. Each entry represents the configuration\n         for a RADIUS server.\n\n         Entries in this table can be created and deleted via SNMP SET\n         operations to svcPEDiscPolServerRowStatus.')
svcPEDiscPolServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: svcPEDiscPolServerIndex.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerIndex.setDescription('The svcPEDiscPolServerIndex indicates the unique value which \n         identifies a specific radius server.')
svcPEDiscPolServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerRowStatus.setDescription("svcPEDiscPolServerRowStatus controls the creation and deletion\n         of rows in the table.\n\n         To create a row in the svcPEDiscPolServerTable,\n         set svcPEDiscPolServerRowStatus to 'createAndGo'. All objects \n         except svcPEDiscPolServerSecret will take\n         on default values and the agent will change svcPEDiscPolServerRowStatus\n         to 'active'.  A value for svcPEDiscPolServerSecret must be always specified  \n         or else the row creation will fail.\n\n         To delete a row in the svcPEDiscPolServerTable, set\n         tmnxRadiusServerRowStatus to 'delete'.")
svcPEDiscPolServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddressType.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerAddressType.setDescription('The value of svcPEDiscPolServerAddressType is used to configure \n         the address type of svcPEDiscPolServerAddress address.')
svcPEDiscPolServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 4), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerAddress.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerAddress.setDescription('The value of svcPEDiscPolServerAddress is used to configure the\n         IP address of the RADIUS server.')
svcPEDiscPolServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerSecret.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerSecret.setDescription('The svcPEDiscPolServerSecret is used to configure the secret key\n         associated with the RADIUS server.  \n\n         The value of svcPEDiscPolServerSecret cannot be set to an empty \n         string.  GETs and GETNEXTs on this variable return an empty string.')
svcPEDiscPolServerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 6), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcPEDiscPolServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerOperStatus.setDescription('The svcPEDiscPolServerOperStatus indicates the current status \n         of the RADIUS server.')
svcPEDiscPolServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 23, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcPEDiscPolServerPort.setStatus('current')
if mibBuilder.loadTexts: svcPEDiscPolServerPort.setDescription('The svcPEDiscPolServerPort is used to configure the UDP port \n         number on which to contact the RADIUS server.')
svcWholesalerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24), )
if mibBuilder.loadTexts: svcWholesalerInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcWholesalerInfoTable.setDescription('The svcWholesalerInfoTable has an entry for each wholesaler service\n         associated with a retailer service on this system.')
svcWholesalerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerID"))
if mibBuilder.loadTexts: svcWholesalerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcWholesalerInfoEntry.setDescription('Each row entry represents the attributes of a wholesaler-retailer \n         pairing. Entries are created/destroyed when forwarding interfaces\n         are defined.')
svcWholesalerID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 1), TmnxServId())
if mibBuilder.loadTexts: svcWholesalerID.setStatus('current')
if mibBuilder.loadTexts: svcWholesalerID.setDescription('The value of svcWholesalerID is used to specify the service ID of the\n         wholesaler.')
svcWholesalerNumStaticHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumStaticHosts.setStatus('current')
if mibBuilder.loadTexts: svcWholesalerNumStaticHosts.setDescription('The value of svcWholesalerNumStaticHosts indicates the number of \n         static hosts in the wholesaler indicated by svcWholesalerID that\n         belong to subnets of the retailer service.')
svcWholesalerNumDynamicHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcWholesalerNumDynamicHosts.setStatus('current')
if mibBuilder.loadTexts: svcWholesalerNumDynamicHosts.setDescription('The value of svcWholesalerNumDynamicHosts indicates the number of \n         dynamic hosts in the wholesaler indicated by svcWholesalerID that\n         belong to subnets of the retailer service.')
svcDhcpLeaseStateActionTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25), )
if mibBuilder.loadTexts: svcDhcpLeaseStateActionTable.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateActionTable.setDescription('The svcDhcpLeaseStateActionTable augments the\n                     svcDhcpLeaseStateTable.\n                     The table allows the operator to perform actions on the\n                     lease state.')
svcDhcpLeaseStateActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1), )
svcDhcpLeaseStateEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLeaseStateActionEntry"))
svcDhcpLeaseStateActionEntry.setIndexNames(*svcDhcpLeaseStateEntry.getIndexNames())
if mibBuilder.loadTexts: svcDhcpLeaseStateActionEntry.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLeaseStateActionEntry.setDescription('Each row entry contains parameters that allow to perform\n                     an action on the corresponding lease-state.')
svcDhcpLseStateForceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 25, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcDhcpLseStateForceRenew.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateForceRenew.setDescription("The value of svcDhcpLseStateForceRenew allows to force the\n                     DHCP client to renew its lease.\n\n                     When the value of this object is set to 'true', the system\n                     will send a forcerenew DHCP message to the client.\n\n                     GETs and GETNEXTs on this variable return false.")
svcIfDHCP6MsgStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26), )
if mibBuilder.loadTexts: svcIfDHCP6MsgStatTable.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatTable.setDescription('The vRtrDHCP6MsgStatTable has an entry for each interface defined\n         in a service for which DHCP6 can be enabled.')
svcIfDHCP6MsgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: svcIfDHCP6MsgStatEntry.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatEntry.setDescription('Each row entry represents a collection of counters for each DHCP6\n         message type for an interface in a service.\n\n        Entries cannot be created and deleted via SNMP SET operations.')
svcIfDHCP6MsgStatsLstClrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsLstClrd.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsLstClrd.setDescription('The value of svcIfDHCP6MsgStatsLstClrd indicates the sysUpTime\n         when the counters of this row were last reset. A value of zero for\n         this object indicates that the counters have not been reset since the\n         system has last been initialized.')
svcIfDHCP6MsgStatsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsRcvd.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsRcvd.setDescription('The value of svcIfDHCP6MsgStatsRcvd indicates the number of\n         DHCP6 packets were received on this service interface.')
svcIfDHCP6MsgStatsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsSent.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsSent.setDescription('The value of svcIfDHCP6MsgStatsSent indicates the number of\n         DHCP6 packets were sent on this service interface.')
svcIfDHCP6MsgStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsDropped.setStatus('current')
if mibBuilder.loadTexts: svcIfDHCP6MsgStatsDropped.setDescription('The value of svcIfDHCP6MsgStatsDropped indicates the number of\n         DHCP6 packets were dropped on this service interface.')
svcTlsBackboneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27), )
if mibBuilder.loadTexts: svcTlsBackboneInfoTable.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneInfoTable.setDescription('The svcTlsBackboneInfoTable augments the svcTlsInfoTable.\n                     The table allows the operator to modify attributes of the\n                     Provider Backbone Bridging feature.')
svcTlsBackboneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1), )
svcTlsInfoEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneInfoEntry"))
svcTlsBackboneInfoEntry.setIndexNames(*svcTlsInfoEntry.getIndexNames())
if mibBuilder.loadTexts: svcTlsBackboneInfoEntry.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneInfoEntry.setDescription('Each row entry contains objects that allows the\n                     modification of the Provider Backbone Bridging feature\n                     for a specific TLS service')
svcTlsBackboneSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 1), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneSrcMac.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneSrcMac.setDescription("The value of svcTlsBackboneSrcMac specifies the Backbone\n                     Source MAC-Address for Provider Backbone Bridging packets.\n                     If not provisioned, it defaults to the loopback chassis\n                     MAC-Address.\n\n                     An inconsistentValue error is returned if an attempt\n                     is made to set this object when the value of\n                     svcVplsType is not 'bVpls'.")
svcTlsBackboneVplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 2), TmnxServId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcId.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcId.setDescription("The value of svcTlsBackboneVplsSvcId specifies the\n                     Backbone-VPLS service associated with this service.\n\n                     An inconsistentValue error is returned if an attempt\n                     is made to set this object when the value of\n                     svcVplsType is not 'iVpls'.\n                     \n                     Setting the value of this object to its default\n                     value will also set the value of\n                     svcTlsBackboneVplsStp to its default value.")
svcTlsBackboneVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 3), SvcISID().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcISID.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneVplsSvcISID.setDescription("The value of the object svcTlsBackboneVplsSvcISID specifies\n                     a 24 bit (0..16777215) service instance identifier for\n                     this service. As part of the Provider Backbone Bridging\n                     frames, it is used at the destination PE as a\n                     demultiplexor field.\n\n                     The default value of -1 is used to indicate the value of\n                     this object is un-specified.  \n                     \n                     This object must be set along with svcTlsBackboneVplsSvcId.\n                     An inconsistentValue error is returned if an attempt\n                     is made to set this object when the value of\n                     svcVplsType is not 'iVpls'.")
svcTlsBackboneOperSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperSrcMac.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneOperSrcMac.setDescription('The value of svcTlsBackboneOperSrcMac indicates the\n                     operational Backbone Source MAC-Address for Provider\n                     Backbone Bridging packets.')
svcTlsBackboneOperVplsSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 5), SvcISID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBackboneOperVplsSvcISID.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneOperVplsSvcISID.setDescription('The value of svcTlsBackboneOperVplsSvcISID indicates\n                     operational value of service instance identifier used for\n                     this service. As part of the Provider Backbone Bridging\n                     frames, it is used at the destination PE as a\n                     demultiplexor field.')
svcTlsBackboneLDPMacFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneLDPMacFlush.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneLDPMacFlush.setDescription("The value of svcTlsBackboneLDPMacFlush specifies whether\n                     'LDP MAC withdraw all from me' message received in the\n                     'iVpls' domain should attempt to generate a new 'LDP MAC\n                     withdraw all from me' message in the 'bVpls' domain.\n                     Generation of the 'LDP MAC withdraw all from me'\n                     message is still constrained by the svcTlsMacFlushOnFail\n                     value in the 'bVpls'.\n\n                     An inconsistentValue error is returned if an attempt\n                     is made to set this object when the value of\n                     svcVplsType is not 'iVpls'.")
svcTlsBackboneVplsStp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 27, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svcTlsBackboneVplsStp.setStatus('current')
if mibBuilder.loadTexts: svcTlsBackboneVplsStp.setDescription("The value of svcTlsBackboneVplsStp specifies whether\n                     STP is enabled on the Backbone VPLS specified by\n                     svcTlsBackboneVplsSvcId.\n\n                     An inconsistentValue error is returned if an attempt\n                     is made to set this object when the value of\n                     svcVplsType is not 'iVpls' or if an attempt is made\n                     to set this object to enable when the value of \n                     svcTlsBackboneVplsSvcId is set to the default.\n                     \n                     The value of this object is set to disable\n                     when the value of svcTlsBackboneVplsSvcId is set to\n                     default.")
tlsMFibTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28), )
if mibBuilder.loadTexts: tlsMFibTable.setStatus('current')
if mibBuilder.loadTexts: tlsMFibTable.setDescription('tlsMFibTable contains the Multicast FIB for this Tls.')
tlsMFibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibEntryType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpMacAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSrcInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSrcInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibLocale"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibPortId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibEncapValue"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSdpId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibVcId"))
if mibBuilder.loadTexts: tlsMFibEntry.setStatus('current')
if mibBuilder.loadTexts: tlsMFibEntry.setDescription('An entry in the tlsMFibTable. Each entry indicates\n                     whether  traffic from a certain source to a certain\n                     multicast destination (group) needs to be forwarded or\n                     blocked on the indicated SAP/SDP.')
tlsMFibEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibEntryType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibEntryType.setDescription('The value of the object tlsMFibEntryType indicates\n                     the type of this tlsMFibEntry. \n\n                     - macBased: entry used for macBased multicast, as for\n                                 MLD-snooping and 802.1ak MMRP.\n                     - ipBased:  entry used for ip_based multicast, as for\n                                 IGMP-snooping and PIM-snooping.')
tlsMFibGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibGrpMacAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibGrpMacAddr.setDescription("The value of the object tlsMFibGrpMacAddr indicates the\n                     MAC address for which this table entry contains\n                     information.\n                     \n                     This value is only meaningful if the value of\n                     tlsMFibEntryType is 'macBased (2)'.")
tlsMFibGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibGrpInetAddrType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibGrpInetAddrType.setDescription('The value of the object tlsMFibGrpInetAddrType indicates\n                     the type of tlsMFibGrpInetAddr.')
tlsMFibGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibGrpInetAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibGrpInetAddr.setDescription('The value of the object tlsMFibGrpInetAddr indicates\n                     the multicast destination IP address for which this table\n                     entry contains information.')
tlsMFibSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibSrcInetAddrType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibSrcInetAddrType.setDescription('The value of tlsMFibSrcInetAddrType indicates the type\n                     of tlsMFibSrcInetAddr.')
tlsMFibSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibSrcInetAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibSrcInetAddr.setDescription('The value of tlsMFibSrcInetAddr indicates the unicast\n                     source IP address for which this table entry contains\n                     information.')
tlsMFibLocale = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 7), MfibLocation())
if mibBuilder.loadTexts: tlsMFibLocale.setStatus('current')
if mibBuilder.loadTexts: tlsMFibLocale.setDescription("The value of tlsMFibLocale indicates if the information in\n                     this entry pertains to a 'sap' or to an 'sdp'.")
tlsMFibPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 8), TmnxPortID())
if mibBuilder.loadTexts: tlsMFibPortId.setStatus('current')
if mibBuilder.loadTexts: tlsMFibPortId.setDescription("The value of tlsMFibPortId indicates, together with the\n                     object tlsMFibEncapValue, the SAP for which this entry\n                     contains information.\n                     \n                     This value of this object is only meaningful when the\n                     value of tlsMFibLocale is 'sap'. Otherwise it contains\n                     the value 0.")
tlsMFibEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 9), TmnxEncapVal())
if mibBuilder.loadTexts: tlsMFibEncapValue.setStatus('current')
if mibBuilder.loadTexts: tlsMFibEncapValue.setDescription("The value of tlsMFibEncapValue indicates, together with\n                     the object tlsMFibPortId, the SAP for which this entry\n                     contains information.\n\n                     This value of this object is only meaningful when the\n                     value of tlsMFibLocale is 'sap'. Otherwise it contains\n                     the value 0.")
tlsMFibSdpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 10), SdpId())
if mibBuilder.loadTexts: tlsMFibSdpId.setStatus('current')
if mibBuilder.loadTexts: tlsMFibSdpId.setDescription("The value of tlsMFibSdpId indicates, together with\n                     the object tlsMFibVcId, the SDP Binding for which this\n                     entry contains information.\n\n                     This value of this object is only meaningful when the\n                     value of tlsMFibLocale is 'sdp'. Otherwise it contains\n                     the value 0.")
tlsMFibVcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 11), Unsigned32())
if mibBuilder.loadTexts: tlsMFibVcId.setStatus('current')
if mibBuilder.loadTexts: tlsMFibVcId.setDescription(" The value of tlsMFibVcId indicates, together with\n                     the object tlsMFibSdpId, the SDP Binding for which this\n                     entry contains information.\n\n                     This value of this object is only meaningful when the\n                     value of tlsMFibLocale is 'sdp'. Otherwise it contains\n                     the value 0.")
tlsMFibFwdOrBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 12), MfibGrpSrcFwdOrBlk()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibFwdOrBlk.setStatus('current')
if mibBuilder.loadTexts: tlsMFibFwdOrBlk.setDescription('The value of tlsMFibFwdOrBlk indicates if traffic for the\n                     indicated (S,G) pair will be blocked or forwarded on the\n                     indicated SAP or SDP.')
tlsMFibSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 28, 1, 13), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibSvcId.setStatus('current')
if mibBuilder.loadTexts: tlsMFibSvcId.setDescription('The value of tlsMFibSvcId indicates the TLS service\n                     to which the indicated SAP or SDP belongs.')
tlsMFibStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29), )
if mibBuilder.loadTexts: tlsMFibStatsTable.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsTable.setDescription('tlsMFibStatsTable contains statistics for the\n                     entries in the IPv4 Multicast FIB for this Tls. These\n                     statistics are collected by the forwarding engine.')
tlsMFibStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsEntryType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpMacAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsGrpInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsSrcInetAddr"))
if mibBuilder.loadTexts: tlsMFibStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsEntry.setDescription('An entry in the tlsMFibStatsTable.')
tlsMFibStatsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipBased", 1), ("macBased", 2))))
if mibBuilder.loadTexts: tlsMFibStatsEntryType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsEntryType.setDescription('The value of the object tlsMFibStatsEntryType indicates\n                     the type of this tlsMFibStatsEntry.\n\n                     - macBased: entry used for macBased multicast, as for\n                                 MLD-snooping and 802.1ak MMRP.\n                     - ipBased:  entry used for ip_based multicast, as for\n                                 IGMP-snooping and PIM-snooping.')
tlsMFibStatsGrpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 2), MacAddress())
if mibBuilder.loadTexts: tlsMFibStatsGrpMacAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsGrpMacAddr.setDescription("The value of tlsMFibStatsGrpMacAddr indicates the\n                     MAC address for which this table entry contains information.\n\n                     This value is only meaningful if the value of\n                     tlsMFibStatsEntryType is 'macBased (2)'.")
tlsMFibStatsGrpInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddrType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddrType.setDescription('The value of tlsMFibStatsGrpInetAddrType indicates\n                     the type of tlsMFibStatsGrpInetAddr.')
tlsMFibStatsGrpInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsGrpInetAddr.setDescription('The value of tlsMFibStatsGrpInetAddr indicates\n                     the multicast destination IP address for which this table\n                     entry contains information.')
tlsMFibStatsSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddrType.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddrType.setDescription('The value of tlsMFibStatsSrcInetAddrType indicates\n                     the type of tlsMFibStatsSrcInetAddr.')
tlsMFibStatsSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddr.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsSrcInetAddr.setDescription('The value of tlsMFibStatsSrcInetAddr indicates the unicast\n                     source IP address for which this table entry contains\n                     information.')
tlsMFibStatsForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsForwardedPkts.setDescription('The value of tlsMFibStatsForwardedPkts indicates\n                     the number of multicast packets that were forwarded\n                     to the SAPs and SDPs listed in the tlsMFibInfoTable.')
tlsMFibStatsForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 29, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsMFibStatsForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: tlsMFibStatsForwardedOctets.setDescription('The value of tlsMFibStatsForwardedOctets indicates\n                     the number of octets that were forwarded to the SAPs\n                     and SDPs listed in the tlsMFibInfoTable.')
svcTlsBgpADTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADTableLastChanged.setDescription('The value of svcTlsBgpADTableLastChanged indicates the\n                     sysUpTime at the time of the last modification\n                     of svcTlsBgpADTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
svcTlsBgpADTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31), )
if mibBuilder.loadTexts: svcTlsBgpADTable.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADTable.setDescription('svcTlsBgpADTable contains entries for BGP Auto-Discovery\n                     in a VPLS service context.')
svcTlsBgpADEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcTlsBgpADEntry.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADEntry.setDescription('A BGP Auto-Discovery entry in the svcTlsBgpADTable.')
svcTlsBgpADRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADRowStatus.setDescription('The value of svcTlsBgpADRowStatus is used for the\n                     creation and deletion of BGP Auto-Discovery\n                     context in a VPLS service.')
svcTlsBgpADLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTlsBgpADLastChanged.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADLastChanged.setDescription('The value of svcTlsBgpADLastChanged indicates the \n                     sysUpTime at the time of the last modification of\n                     this entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
svcTlsBgpADVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 3), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVplsId.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVplsId.setDescription("The value of svcTlsBgpADVplsId specifies the globally\n                     unique VPLS-id for BGP Auto-Discovery in this VPLS\n                     service.\n\n                     The value of svcTlsBgpADAdminStatus cannot be 'enabled'\n                     until a VPLS-id has been assigned which is not all zeros.")
svcTlsBgpADVsiPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiPrefix.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiPrefix.setDescription('The value of svcTlsBgpADVsiPrefix specifies the\n                     low-order 4 bytes used to compose the Virtual Switch\n                     Instance identifier (VSI-id) to use for NLRI in BGP\n                     Auto-Discovery in this VPLS service.\n\n                     If the value of svcTlsBgpADVsiPrefix is 0, the\n                     system IP address will be used.')
svcTlsBgpADVsiRD = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 5), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiRD.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiRD.setDescription('The value of svcTlsBgpADVsiRD specifies the high-order\n                     6 bytes used to compose the Virtual Switch Instance\n                     identifier (VSI-id) to use for NLRI in BGP Auto-Discovery\n                     in this VPLS service.\n\n                     If the value of svcTlsBgpADVsiRD is 0x0000000000000000,\n                     the lower 6 bytes of the VPLS-id, as specified by\n                     svcTlsBgpADVplsId, will be used.')
svcTlsBgpADExportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADExportRteTarget.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADExportRteTarget.setDescription("The value of svcTlsBgpADExportRteTarget specifies the\n                     extended community name for the default export policy\n                     to use for BGP Auto-Discovery in this VPLS service.\n\n                     This object cannot be set to a non-empty if\n                     svcTlsBgpADExportRteTarget has a non-empty value, \n                     otherwise an 'inconsistentValue' error will be\n                     returned.")
svcTlsBgpADVsiExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy1.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy1.setDescription("The value of svcTlsBgpADVsiExportPolicy1 specifies the\n                    name of the first VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiExportPolicy1\n                    through svcTlsBgpADVsiExportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy2.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy2.setDescription("The value of svcTlsBgpADVsiExportPolicy2 specifies the\n                    name of the second VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiExportPolicy1\n                    through svcTlsBgpADVsiExportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy3.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy3.setDescription("The value of svcTlsBgpADVsiExportPolicy3 specifies the\n                    name of the third VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiExportPolicy1\n                    through svcTlsBgpADVsiExportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy4.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy4.setDescription("The value of svcTlsBgpADVsiExportPolicy4 specifies the\n                    name of the forth VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiExportPolicy1\n                    through svcTlsBgpADVsiExportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy5.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiExportPolicy5.setDescription("The value of svcTlsBgpADVsiExportPolicy5 specifies the\n                    name of the fifth VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiExportPolicy1\n                    through svcTlsBgpADVsiExportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADImportRteTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 12), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADImportRteTarget.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADImportRteTarget.setDescription("The value of svcTlsBgpADImportRteTarget specifies the\n                     extended community name for the default import policy\n                     to use for BGP Auto-Discovery in this VPLS service.\n\n                     This object cannot be set to a non-empty if\n                     svcTlsBgpADImportRteTarget has a non-empty value, \n                     otherwise an 'inconsistentValue' error will be\n                     returned.")
svcTlsBgpADVsiImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy1.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy1.setDescription("The value of svcTlsBgpADVsiImportPolicy1 specifies the\n                    name of the first VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiImportPolicy1\n                    through svcTlsBgpADVsiImportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy2.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy2.setDescription("The value of svcTlsBgpADVsiImportPolicy2 specifies the\n                    name of the second VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiImportPolicy1\n                    through svcTlsBgpADVsiImportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy3.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy3.setDescription("The value of svcTlsBgpADVsiImportPolicy3 specifies the\n                    name of the third VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiImportPolicy1\n                    through svcTlsBgpADVsiImportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy4.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy4.setDescription("The value of svcTlsBgpADVsiImportPolicy4 specifies the\n                    name of the forth VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiImportPolicy1\n                    through svcTlsBgpADVsiImportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADVsiImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 17), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy5.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADVsiImportPolicy5.setDescription("The value of svcTlsBgpADVsiImportPolicy5 specifies the\n                    name of the fifth VSI export policy to be used for BGP\n                    Auto-Discovery in this VPLS service.\n\n                    If multiple policy names are specified, the policies are\n                    evaluated in the order they are specified.  The first\n                    policy that matches is applied.\n\n                    The import policy name list, svcTlsBgpADVsiImportPolicy1\n                    through svcTlsBgpADVsiImportPolicy5, is handled by the SNMP\n                    agent as a single entity.  When an SNMP SET request is\n                    received to modify one or more of the policy names, all\n                    the policy variables are first set to the empty\n                    string, ''H, and then the new names are set into the\n                    specified policy variables within a single SNMP SET PDU.")
svcTlsBgpADAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 31, 1, 18), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcTlsBgpADAdminStatus.setStatus('current')
if mibBuilder.loadTexts: svcTlsBgpADAdminStatus.setDescription('The value of svcTlsBgpADAdminStatus specifies the desired\n                     administrative state for BGP Auto-Discovery in this VPLS\n                     service.')
svcEpipePbbTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbTableLastChanged.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbTableLastChanged.setDescription('The value of svcEpipePbbTableLastChanged indicates the\n                     sysUpTime at the time of the last modification of\n                     svcEpipePbbTable.\n\n                     If no changes were made to the entry since the last\n                     re-initialization of the local network management subsystem,\n                     then this object contains a zero value.')
svcEpipePbbTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37), )
if mibBuilder.loadTexts: svcEpipePbbTable.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbTable.setDescription("The svcEpipePbbTable contains objects related to Provider\n                     Backbone Bridging (PBB) feature as relates to 'epipe'\n                     services.\n                     \n                     Entries are created and destroyed using svcEpipePbbRowStatus\n                     object.")
svcEpipePbbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: svcEpipePbbEntry.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbEntry.setDescription("Each row entry contains objects that allows the\n                     modification of the PBB objects for an 'epipe' service.")
svcEpipePbbRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbRowStatus.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbRowStatus.setDescription('The value of svcEpipePbbRowStatus is used for the\n                     creation and deletion of Provider Backbone Bridging\n                     information in a EPIPE service.\n\n                     To create an entry in the table, svcEpipePbbBvplsSvcId,\n                     svcEpipePbbBvplsDstMac, svcEpipePbbSvcISID objects\n                     must be set.')
svcEpipePbbLastChngd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcEpipePbbLastChngd.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbLastChngd.setDescription('The value of svcEpipePbbLastChngd indicates the sysUpTime at\n                     the time of the last modification of this entry.\n                     \n                     If no changes were made to the entry since the last \n                     re-initialization of the local network management \n                     subsystem, then this object contains a zero value.')
svcEpipePbbBvplsSvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 3), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsSvcId.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbBvplsSvcId.setDescription('The value of svcEpipePbbBvplsSvcId specifies the\n                     Backbone-VPLS service for the PBB tunnel associated with\n                     this service.\n\n                     This object must be set at the creation time and can not\n                     be modified later.')
svcEpipePbbBvplsDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbBvplsDstMac.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbBvplsDstMac.setDescription('The value of svcEpipePbbBvplsDstMac specifies the Backbone\n                     Destination MAC-Address for Provider Backbone Bridging\n                     packets.\n\n                     This object must be set along with svcEpipePbbBvplsSvcId.')
svcEpipePbbSvcISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 37, 1, 5), SvcISID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: svcEpipePbbSvcISID.setStatus('current')
if mibBuilder.loadTexts: svcEpipePbbSvcISID.setDescription('The value of the object svcEpipePbbSvcISID specifies\n                     a 24 bit (0..16777215) service instance identifier for the\n                     PBB tunnel associated with this service.\n                     \n                     As part of the Provider Backbone Bridging frames, it is\n                     used at the destination PE as a demultiplexor field.\n\n                     This object must be set along with svcEpipePbbBvplsSvcId.')
tlsPipInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40), )
if mibBuilder.loadTexts: tlsPipInfoTable.setStatus('current')
if mibBuilder.loadTexts: tlsPipInfoTable.setDescription("A table that contains TLS PIP (Provider Internal Port) uplink\n        information. PIP is the virtual link between I and B components of PBB\n        (Provider Backbone Bridging) model. I component refers to a service\n        with svcVplsType set to 'iVpls (3)' and B component refers to a service\n        with svcVplsType set to 'bVpls (2)'. When any form of STP is enabled in\n        the iVpls domain, the PIP uplink is modeled as a regular STP port.")
tlsPipInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: tlsPipInfoEntry.setStatus('current')
if mibBuilder.loadTexts: tlsPipInfoEntry.setDescription('TLS specific information about PIP uplink.')
tlsPipStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 1), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortState.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpPortState.setDescription("The value of tlsPipStpPortState indicates the PIP uplink's current\n        state as defined by application of the Spanning Tree Protocol. This\n        state controls what action PIP uplink takes on reception of a frame.\n        If the bridge has detected a port that is malfunctioning it will\n        place that port into the 'broken (6)' state.")
tlsPipStpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 2), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortRole.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpPortRole.setDescription('The value of tlsPipStpPortRole indicates the current role of the PIP\n        uplink as defined by the Rapid Spanning Tree Protocol.')
tlsPipStpDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpDesignatedBridge.setDescription("The value of tlsPipStpDesignatedBridge indicates the Bridge Identifier\n        of the bridge which this PIP uplink considers to be the Designated\n        Bridge for this port's segment.")
tlsPipStpDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpDesignatedPort.setDescription("The value of tlsPipStpDesignatedPort indicates the Port Identifier of\n        the port on the Designated Bridge for this port's segment.")
tlsPipStpException = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 5), StpExceptionCondition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpException.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpException.setDescription('The value of the object tlsPipStpException indicates\n                     whether an STP exception condition is present on this\n                     Pip.\n                     - none : no exception condition found.\n                     - oneWayCommuniation : The neighbor RSTP peer on this link\n                                            is not able to detect our presence.\n                     - downstreamLoopDetected :A loop is detected on this link.')
tlsPipStpForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpForwardTransitions.setDescription('The value of the object tlsPipStpForwardTransitions\n                     indicates the number of times this port has transitioned\n                     from the Learning state to the Forwarding state.')
tlsPipStpInConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpInConfigBpdus.setDescription('The value of the object tlsPipStpInConfigBpdus indicates\n                     the number of Configuration BPDUs received on this\n                     PIP uplink.')
tlsPipStpInTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpInTcnBpdus.setDescription('The value of the object  tlsPipStpInTcnBpdus indicates the\n                     number of Topology Change Notification BPDUs received on\n                     this PIP uplink.')
tlsPipStpInRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInRstBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpInRstBpdus.setDescription('The value of the object  tlsPipStpInRstBpdus indicates\n                     the number of Rapid Spanning Tree (RST) BPDUs received on\n                     this PIP uplink.')
tlsPipStpInMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInMstBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpInMstBpdus.setDescription('The value of the object tlsPipStpInMstBpdus indicates\n                     the number of Multiple Spanning Tree (MST) BPDUs received\n                     on this PIP uplink.')
tlsPipStpInBadBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpInBadBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpInBadBpdus.setDescription('This object specifies the number of bad\n                     BPDUs received on this PIP uplink.')
tlsPipStpOutConfigBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutConfigBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOutConfigBpdus.setDescription('The value of the object tlsPipStpOutConfigBpdus indicates\n                     the number of Configuration BPDUs sent out this PIP uplink.')
tlsPipStpOutTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOutTcnBpdus.setDescription('This object specifies the number of Topology\n                     Change Notification BPDUs sent out this PIP uplink.')
tlsPipStpOutRstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutRstBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOutRstBpdus.setDescription('The value of the  object tlsPipStpOutRstBpdus indicates\n                     the number of Rapid Spanning Tree (RST) BPDUs sent out on\n                     this PIP uplink.')
tlsPipStpOutMstBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOutMstBpdus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOutMstBpdus.setDescription('The value of the object tlsPipStpOutMstBpdus indicates\n                     the number of Multiple Spanning Tree (MST) BPDUs sent out\n                     on this PIP uplink.')
tlsPipStpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 16), ServiceOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperStatus.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOperStatus.setDescription('The value of the object tlsPipStpOperStatus indicates the\n                     operational status of this PIP uplink.')
tlsPipStpMvplsPruneState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 17), MvplsPruneState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpMvplsPruneState.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpMvplsPruneState.setDescription('The value of tlsPipStpMvplsPruneState indicates the mVPLS\n                     prune state of this PIP uplink.  The state reflects\n                     whether or not this uplink is pruned by the STP instance\n                     running in the mVPLS instance.')
tlsPipStpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 18), StpProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpOperProtocol.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpOperProtocol.setDescription("The value of tlsPipStpOperProtocol indicates whether 'stp',\n                    'rstp' or 'mstp' is running on this PIP uplink. If the\n                    protocol is not enabled on this PIP uplink, the value\n                    'notApplicable' is returned.")
tlsPipStpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 40, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipStpPortNum.setStatus('current')
if mibBuilder.loadTexts: tlsPipStpPortNum.setDescription('The value of the object tlsPipStpPortNum specifies the\n                     value of the port number field which is contained in the\n                     least significant 12 bits of the 16-bit Port ID associated\n                     with this PIP uplink.')
tlsPipMstiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41), )
if mibBuilder.loadTexts: tlsPipMstiTable.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiTable.setDescription('This table contains Multiple Spanning Tree Instance information for\n        the PIP uplink. Each management VPLS running MSTP can have upto 15\n        MSTI. An entry in this table is automatically created when a\n        tlsMstiEntry is created.')
tlsPipMstiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiInstanceId"))
if mibBuilder.loadTexts: tlsPipMstiEntry.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiEntry.setDescription('Information about a specific MSTI for a PIP uplink.')
tlsPipMstiPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 1), StpPortRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortRole.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiPortRole.setDescription('tlsPipMstiPortRole indicates the current role of the\n                     PIP uplink in the MSTI as defined by the Spanning Tree\n                     Protocol.')
tlsPipMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 2), TStpPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiPortState.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiPortState.setDescription("The value of the object tlsPipMstiPortState indicates the\n                     port's current state as defined by application of the\n                     Spanning Tree Protocol. This state controls what action a\n                     port takes on reception of a frame. If the bridge has\n                     detected a port that is malfunctioning it will\n                     place that port into the broken(6) state.")
tlsPipMstiDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiDesignatedBridge.setDescription("The value of the object tlsPipMstiDesignatedBridge\n                     indicates  the Bridge Identifier of the bridge which this\n                     port considers to be the Designated Bridge for this port's\n                     segment for this MSTI.")
tlsPipMstiDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tlsPipMstiDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: tlsPipMstiDesignatedPort.setDescription("The value of the object tlsPipMstiDesignatedPort indicates\n                     the Port Identifier of the port on the Designated Bridge\n                     for this port's segment for this MSTI.")
svcTotalFdbMimDestIdxEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcTotalFdbMimDestIdxEntries.setStatus('current')
if mibBuilder.loadTexts: svcTotalFdbMimDestIdxEntries.setDescription('The value of the object svcTotalFdbMimDestIdxEntries\n                    indicates the number of system wide Backbone MAC address\n                    indices in use.')
svcDhcpManagedRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43), )
if mibBuilder.loadTexts: svcDhcpManagedRouteTable.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRouteTable.setDescription('A table that contains DHCP managed routes.')
svcDhcpManagedRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddrType"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteInetAddr"), (0, "ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRoutePrefixLen"))
if mibBuilder.loadTexts: svcDhcpManagedRouteEntry.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRouteEntry.setDescription('A specific DHCP managed route.')
svcDhcpManagedRouteInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 1), InetAddressType())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddrType.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddrType.setDescription('The value of svcDhcpManagedRouteInetAddrType indicates\n                     the address type of svcDhcpManagedRouteInetAddr.')
svcDhcpManagedRouteInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 2), InetAddress())
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRouteInetAddr.setDescription('The value of svcDhcpManagedRouteInetAddr indicates\n                     the IP address of the managed route.')
svcDhcpManagedRoutePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: svcDhcpManagedRoutePrefixLen.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRoutePrefixLen.setDescription('The value of svcDhcpManagedRoutePrefixLen indicates\n                     the prefix length of the subnet associated with\n                     svcDhcpManagedRouteInetAddr.')
svcDhcpManagedRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 2, 43, 1, 4), TmnxManagedRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svcDhcpManagedRouteStatus.setStatus('current')
if mibBuilder.loadTexts: svcDhcpManagedRouteStatus.setDescription('The value of svcDhcpManagedRouteStatus indicates\n                     the state of this managed route.')
macPinningMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningMacAddress.setStatus('current')
if mibBuilder.loadTexts: macPinningMacAddress.setDescription('The value of the object macPinningMacAddress indicates\n                    the pinned MAC address.')
macPinningPinnedRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRow.setStatus('current')
if mibBuilder.loadTexts: macPinningPinnedRow.setDescription('The value of the object macPinningPinnedRow indicates\n                    where the MAC address is currently pinned on.\n                    Its value will be the OID of the first accessible\n                    object in the row of the sapTlsInfoTable or in the\n                    sdpBindTable, depending on whether the MAC address is\n                    pinned on a SAP or a SDP Bind.')
macPinningPinnedRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningPinnedRowDescr.setStatus('current')
if mibBuilder.loadTexts: macPinningPinnedRowDescr.setDescription('The value of the object macPinningPinnedRowDescr indicates\n                    where the MAC address is currently pinned on. The value\n                    will either be a SAP-id or a SDP id, presented in readable\n                    format, depending on whether the MAC is pinned to a SAP\n                    or a SDP.')
macPinningViolatingRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 4), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRow.setStatus('current')
if mibBuilder.loadTexts: macPinningViolatingRow.setDescription('The value of the object macPinningViolatingRow indicates\n                    where the MAC address relearn attempt was detected.\n                    Its value will be the OID of the first accessible object\n                    in the row of the sapTlsInfoTable or in the sdpBindTable,\n                    depending on whether the MAC address is pinned on a SAP\n                    or a SDP Bind.')
macPinningViolatingRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: macPinningViolatingRowDescr.setStatus('current')
if mibBuilder.loadTexts: macPinningViolatingRowDescr.setDescription('The value of the object macPinningViolatingRowDescr\n                    indicates where the MAC address relearn attempt was\n                    detected. The value will either be a SAP-id or a SDP id,\n                    presented in readable format, depending on whether the\n                    MAC address relearn attempt was detected on a SAP or a\n                    SDP.')
tlsDHCPClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDHCPClientLease.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDHCPClientLease.setDescription('The value of the object tlsDHCPClientLease indicates the\n                    lease time specified in the PDU causing the trap.\n                    Used by tmnxVRtrDHCPAFEntriesExceeded to report the lease\n                    time.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldCiAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpLseStateOldCiAddr.setDescription('The value of the object tlsDhcpLseStateOldCiAddr indicates\n                    the Client IP address that was formerly assigned to this\n                    Least state. Used in sapTlsDHCPLeaseStateOverride trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 8), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateOldChAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpLseStateOldChAddr.setDescription('The value of the object tlsDhcpLseStateOldChAddr indicates\n                    the Client MAC address that was formerly assigned to this\n                    Least state. Used in sapTlsDHCPLeaseStateOverride trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 9), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewCiAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpLseStateNewCiAddr.setDescription('The value of the object tlsDhcpLseStateNewCiAddr indicates\n                    the Client IP address specified in the PDU causing\n                    the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStateNewChAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpLseStateNewChAddr.setDescription('The value of the object tlsDhcpLseStateNewChAddr indicates\n                    the Client MAC address specified in the PDU causing\n                    the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateCiAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateCiAddr.setDescription('The value of the object tlsDhcpRestoreLseStateCiAddr\n                    indicates the IP address specified in the persistency\n                    record causing the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpRestoreLseStateSvcId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 12), TmnxServId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateSvcId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateSvcId.setDescription('The value of the object tlsDhcpRestoreLseStateSvcId\n                    indicates the serviceId specified in the persistency record\n                    causing the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpRestoreLseStatePortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 13), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStatePortId.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpRestoreLseStatePortId.setDescription('The value of the object tlsDhcpRestoreLseStatePortId\n                    indicates the Port ID specified in the persistency record\n                    causing the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpRestoreLseStateEncapVal = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 14), TmnxEncapVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateEncapVal.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateEncapVal.setDescription('The value of the object tlsDhcpRestoreLseStateEncapVal\n                    indicates the SAP encap value specified in the persistency\n                    record causing the trap.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateProblem.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpRestoreLseStateProblem.setDescription('The value of the object tlsDhcpRestoreLseStateProblem\n                    indicates why the persistency record cannot be restored.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpPacketProblem.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpPacketProblem.setDescription('The value of the object tlsDhcpPacketProblem indicates\n                    information on a received DHCP packet is considered\n                    suspicious by the system.\n                    This object was made obsolete in the 4.0 release.')
tlsDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tlsDhcpLseStatePopulateError.setStatus('obsolete')
if mibBuilder.loadTexts: tlsDhcpLseStatePopulateError.setDescription('The value of the object tlsDhcpLseStatePopulateError\n                    indicates  why the system was unable to update the\n                    Lease State Table upon reception of a DHCP ACK message.\n                    This object was made obsolete in the 4.0 release.')
svcDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 18), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateCiAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpRestoreLseStateCiAddr.setDescription('The value of the object svcDhcpRestoreLseStateCiAddr\n                    indicates the IP address specified in the persistency\n                    record causing the trap.')
svcDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpRestoreLseStateProblem.setStatus('current')
if mibBuilder.loadTexts: svcDhcpRestoreLseStateProblem.setDescription('The value of the object svcDhcpRestoreLseStateProblem\n                    indicates why the persistency record cannot be restored.')
svcDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 20), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldCiAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOldCiAddr.setDescription('The value of the object svcDhcpLseStateOldCiAddr indicates\n                    the client IP address that was formerly assigned to the\n                    specified DHCP lease state.')
svcDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 21), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateOldChAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateOldChAddr.setDescription('The value of the object svcDhcpLseStateOldChAddr indicates\n                    the client MAC address that was formerly assigned to the\n                    specified DHCP lease state.')
svcDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 22), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewCiAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateNewCiAddr.setDescription('The value of the object svcDhcpLseStateNewCiAddr indicates\n                    the client IP address specified in the DHCP PDU causing the\n                    trap.')
svcDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 23), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStateNewChAddr.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStateNewChAddr.setDescription('The value of the object svcDhcpLseStateNewChAddr indicates\n                    the client MAC address specified in the DHCP PDU causing\n                    the trap.')
svcDhcpClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 24), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpClientLease.setStatus('current')
if mibBuilder.loadTexts: svcDhcpClientLease.setDescription('The value of the object svcDhcpClientLease indicates the\n                    lease time specified in the DHCP PDU causing the trap.')
svcDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 25), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpPacketProblem.setStatus('current')
if mibBuilder.loadTexts: svcDhcpPacketProblem.setDescription('The value of the object svcDhcpPacketProblem indicates\n                    information on a received DHCP packet that is considered\n                    suspicious by the system.')
svcDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpLseStatePopulateError.setStatus('current')
if mibBuilder.loadTexts: svcDhcpLseStatePopulateError.setDescription('The value of the object svcDhcpLseStatePopulateError\n                    indicates the reason why the system was unable to update\n                    the Lease State table upon reception of a DHCP ACK\n                    message.')
hostConnectivityCiAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 27), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddrType.setStatus('current')
if mibBuilder.loadTexts: hostConnectivityCiAddrType.setDescription('The value of the object hostConnectivityCiAddrType indicates\n                    the client address type causing the trap.')
hostConnectivityCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 28), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityCiAddr.setStatus('current')
if mibBuilder.loadTexts: hostConnectivityCiAddr.setDescription('The value of the object hostConnectivityCiAddr indicates\n                    the client INET address causing the trap.')
hostConnectivityChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 29), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hostConnectivityChAddr.setStatus('current')
if mibBuilder.loadTexts: hostConnectivityChAddr.setDescription('The value of the object hostConnectivityChAddr indicates\n                    the client MAC address causing the trap.')
protectedMacForNotify = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 30), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: protectedMacForNotify.setStatus('current')
if mibBuilder.loadTexts: protectedMacForNotify.setDescription('The value of the object protectedMacForNotify indicates\n                    the protected MAC address that was received, causing the\n                    sapReceivedProtSrcMac notification.')
staticHostDynamicMacIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 31), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacIpAddress.setStatus('current')
if mibBuilder.loadTexts: staticHostDynamicMacIpAddress.setDescription('The value of the object staticHostDynamicMacIpAddress\n                    indicates the IP address of the static host for which the\n                    sapStaticHostDynMacConflict notification is generated.')
staticHostDynamicMacConflict = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 32), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staticHostDynamicMacConflict.setStatus('current')
if mibBuilder.loadTexts: staticHostDynamicMacConflict.setDescription('The value of the object staticHostDynamicMacConflict\n                    indicates the reason causing the sapStaticHostDynMacConflict\n                    notification.')
tmnxSvcObjRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 33), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRow.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcObjRow.setDescription('The value of the object tmnxSvcObjRow indicates\n                    the object that has failed to perform the set action\n                    requested by the Time-Of-Day Suite.\n                    Its value will be the OID of the first accessible\n                    object in the row of the sapBaseInfoTable or in the\n                    custMultiServiceSiteTable, depending on whether the object\n                    is a SAP or a Customer Multi-Service Site.')
tmnxSvcObjRowDescr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 34), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjRowDescr.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcObjRowDescr.setDescription('The value of the object tmnxSvcObjRowDescr indicates\n                    the object that has failed to perform the set action\n                    requested by the Time-Of-Day Suite. \n                    The value will either be a SAP-id or \n                    a Customer Multi-Service Site id, presented in readable\n                    format, depending on whether the object\n                    is a SAP or a Customer Multi-Service Site.')
tmnxSvcObjTodSuite = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 35), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxSvcObjTodSuite.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcObjTodSuite.setDescription('The value of the object tmnxSvcObjTodSuite indicates the name of the\n         involved ToD Suite.')
tmnxFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 36), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxFailureDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxFailureDescription.setDescription('The value of the object tmnxFailureDescription is a\n                    printable character string which contains information about\n                    the reason why the notification is sent.')
svcDhcpProxyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 37), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpProxyError.setStatus('current')
if mibBuilder.loadTexts: svcDhcpProxyError.setDescription('The value of the object svcDhcpProxyError indicates\n                    the reason why the proxy server failed to operate.')
svcDhcpCoAError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 38), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpCoAError.setStatus('current')
if mibBuilder.loadTexts: svcDhcpCoAError.setDescription('The value of the object svcDhcpCoAError indicates\n                    the reason why the node failed to process a Change of\n                    Authorization (CoA) request from a Radius server.')
svcDhcpSubAuthError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 39), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcDhcpSubAuthError.setStatus('current')
if mibBuilder.loadTexts: svcDhcpSubAuthError.setDescription('The value of the object svcDhcpSubAuthError is a printable\n                    character string which contains information about the\n                    problem that occurred while trying to authenticate the\n                    subscriber.')
svcTlsMrpAttrRegFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("attribute-limit-reached", 2), ("system-attr-limit-reached", 3), ("unsupported-attribute", 4), ("mfib-entry-create-failed", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrRegFailedReason.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrRegFailedReason.setDescription('The value of the object svcTlsMrpAttrRegFailedReason\n                    indicates the reason for MRP attribute registration\n                    failure.')
svcTlsMrpAttrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrType.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrType.setDescription('The value of the object svcTlsMrpAttrType indicates the\n                    type of MRP attribute.')
svcTlsMrpAttrValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcTlsMrpAttrValue.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrValue.setDescription('The value of the object svcTlsMrpAttrValue indicates the\n                    value of MRP attribute.')
svcMstiInstanceId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 6, 43), MstiInstanceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: svcMstiInstanceId.setStatus('current')
if mibBuilder.loadTexts: svcMstiInstanceId.setDescription('The value of the object svcMstiInstanceId indicates the\n                    Multiple Spanning Tree Instance.')
svcCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcType"))
if mibBuilder.loadTexts: svcCreated.setStatus('obsolete')
if mibBuilder.loadTexts: svcCreated.setDescription('This trap is sent when a new row is created\n                     in the svcBaseInfoTable.')
svcDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: svcDeleted.setDescription('This trap is sent when an existing row is\n                     deleted from the svcBaseInfoTable.')
svcStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcOperStatus"))
if mibBuilder.loadTexts: svcStatusChanged.setStatus('current')
if mibBuilder.loadTexts: svcStatusChanged.setDescription('The svcStatusChanged notification is generated when\n                     there is a change in the administrative or operating\n                     status of a service.')
svcTlsFdbTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmRaised.setDescription('The svcTlsFdbTableFullAlarmRaised notification is\n                     generated when the utilization of the FDB table is\n                     above the value specified by\n                     svcTlsFdbTableFullHighWatermark.')
svcTlsFdbTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: svcTlsFdbTableFullAlarmCleared.setDescription('The svcTlsFdbTableFullAlarmCleared notification is\n                     generated when the utilization of the FDB table is\n                     below the value specified by\n                     svcTlsFdbTableFullLowWatermark.')
iesIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfCreated.setStatus('obsolete')
if mibBuilder.loadTexts: iesIfCreated.setDescription('The iesIfCreated notification is generated\n                     when a new row is created in the iesIfTable.')
iesIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"))
if mibBuilder.loadTexts: iesIfDeleted.setStatus('obsolete')
if mibBuilder.loadTexts: iesIfDeleted.setDescription('The iesIfDeleted notification is sent when an existing\n                     row is deleted from the iesIfTable.')
iesIfStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfOperStatus"))
if mibBuilder.loadTexts: iesIfStatusChanged.setStatus('current')
if mibBuilder.loadTexts: iesIfStatusChanged.setDescription('The iesIfStatusChanged notification is generated\n                     when there is a change in the administrative or\n                     operating status of an IES interface.')
svcTlsMfibTableFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmRaised.setDescription('The svcTlsMfibTableFullAlarmRaised notification is\n                     generated when the utilization of the MFIB table is above\n                     the value specified by svcTlsMfibTableFullHighWatermark.')
svcTlsMfibTableFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: svcTlsMfibTableFullAlarmCleared.setDescription('The svcTlsMfibTableFullAlarmCleared notification is\n                     generated when the utilization of the MFIB table is below\n                     the value specified by svcTlsMfibTableFullLowWatermark.')
svcTlsMacPinningViolation = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningMacAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if mibBuilder.loadTexts: svcTlsMacPinningViolation.setStatus('current')
if mibBuilder.loadTexts: svcTlsMacPinningViolation.setDescription('The svcTlsMacPinningViolation notification is\n                     generated when an attempt is made to assign a MAC\n                     address to another interface while this MAC address\n                     is pinned (i.e. assigned fixed to an interface).')
svcTlsDHCPLseStRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcTlsDHCPLseStRestoreProblem.setStatus('obsolete')
if mibBuilder.loadTexts: svcTlsDHCPLseStRestoreProblem.setDescription('The svcTlsDHCPLseStRestoreProblem notification is\n                     generated when an an error is detected while\n                     processing a persistency record.')
svcTlsDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: svcTlsDHCPLseStatePopulateErr.setStatus('obsolete')
if mibBuilder.loadTexts: svcTlsDHCPLseStatePopulateErr.setDescription('The svcTlsDHCPLseStatePopulateErr notification\n                     indicates that the system was unable to update the\n                     Lease State Table with the information contained in\n                     the DHCP ACK message. The DHCP ACK message has been\n                     discarded.')
svcDHCPLseStateRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: svcDHCPLseStateRestoreProblem.setStatus('current')
if mibBuilder.loadTexts: svcDHCPLseStateRestoreProblem.setDescription('The svcDHCPLseStateRestoreProblem notification is\n                     generated when an an error is detected while processing a\n                     persistency record.')
tmnxSvcObjTodSuiteApplicFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: tmnxSvcObjTodSuiteApplicFailed.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcObjTodSuiteApplicFailed.setDescription('The tmnxSvcObjTodSuiteApplicFailed notification is\n                     generated when the object has failed to perform the set\n                     action requested by the Time-Of-Day Suite. The object can\n                     be either a SAP or a Customer Multi-Service Site.')
tmnxEndPointTxActiveChanged = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"))
if mibBuilder.loadTexts: tmnxEndPointTxActiveChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxEndPointTxActiveChanged.setDescription('The tmnxEndPointTxActiveChanged notification is generated\n                     when the transmit active object on an endpoint changes.')
tmnxSvcPEDiscPolServOperStatChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"))
if mibBuilder.loadTexts: tmnxSvcPEDiscPolServOperStatChg.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcPEDiscPolServOperStatChg.setDescription("The tmnxSvcPEDiscPolServOperStatChg notification is generated \n         when the operational status of a Radius server, configured for use \n         as PE Discovery Policy Server, has transitioned either from 'up' to \n         'down' or from 'down' to 'up'.")
svcEndPointMacLimitAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmRaised.setDescription('The svcEndPointMacLimitAlarmRaised notification is sent whenever the\n        number of MAC addresses stored in the FDB for this endpoint exceeds the\n        watermark specified by the object svcTlsFdbTableFullHighWatermark.\n\n        This alarm also takes into consideration static MAC addresses\n        configured on the endpoint and learned MAC addresses in all spokes\n        associated with this endpoint.')
svcEndPointMacLimitAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"))
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: svcEndPointMacLimitAlarmCleared.setDescription('The svcEndPointMacLimitAlarmCleared notification is sent whenever the\n        number of MAC addresses stored in the FDB for this endpoint drops below\n        the watermark specified by the object svcTlsFdbTableFullLowWatermark.\n\n        This alarm also takes into consideration static MAC addresses\n        configured on the endpoint and learned MAC addresses in all spokes\n        associated with this endpoint.')
svcTlsMrpAttrRegistrationFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"))
if mibBuilder.loadTexts: svcTlsMrpAttrRegistrationFailed.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrRegistrationFailed.setDescription('The svcTlsMrpAttrRegistrationFailed notification is\n                     generated when registration fails for an MRP attribute.')
svcFdbMimDestTblFullAlrm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrm.setStatus('current')
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrm.setDescription('The svcFdbMimDestTblFullAlrm notification is raised\n                     when system limit of Backbone MAC address indices limit is\n                     reached.\n                     \n                     Further traps are not generated as long as the value of\n                     svcTotalFdbMimDestIdxEntries object remains under 5\n                     percent of the limit.')
svcFdbMimDestTblFullAlrmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrmCleared.setStatus('current')
if mibBuilder.loadTexts: svcFdbMimDestTblFullAlrmCleared.setDescription('The svcFdbMimDestTblFullAlrmCleared notification is raised\n                     when number of Backbone MAC address indices used reaches\n                     under 95 percent of the system limit after\n                     svcFdbMimDestTblFullAlrm notification had been raised.')
svcDHCPMiscellaneousProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcDHCPMiscellaneousProblem.setStatus('current')
if mibBuilder.loadTexts: svcDHCPMiscellaneousProblem.setDescription('The svcDHCPMiscellaneousProblem notification is\n                     generated on miscellaneous DHCP problems.')
svcPersistencyProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"))
if mibBuilder.loadTexts: svcPersistencyProblem.setStatus('current')
if mibBuilder.loadTexts: svcPersistencyProblem.setDescription('The svcPersistencyProblem notification is generated\n                     on persistency problems.')
svcTlsMrpAttrTblFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmRaised.setDescription('The svcTlsMrpAttrTblFullAlarmRaised notification is\n                     generated when the utilization of the MRP attribute table\n                     is above the value specified by\n                     svcTlsMrpAttrTblHighWatermark.')
svcTlsMrpAttrTblFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 2, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"))
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: svcTlsMrpAttrTblFullAlarmCleared.setDescription('The svcTlsMrpAttrTblFullAlarmCleared notification is\n                     generated when the utilization of the MRP attribute table\n                     is below the value specified by\n                     svcTlsMrpAttrTblLowWatermark.')
tmnxCustomerBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 1), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerBridgeId.setStatus('current')
if mibBuilder.loadTexts: tmnxCustomerBridgeId.setDescription("tmnxCustomerBridgeId specifies the bridge identifier\n                    of the customer's device ")
tmnxCustomerRootBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 2), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxCustomerRootBridgeId.setStatus('current')
if mibBuilder.loadTexts: tmnxCustomerRootBridgeId.setDescription("tmnxCustomerRootBridgeId specifies the bridge identifier\n                    of the customer's designated root.")
tmnxOtherBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 3), BridgeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOtherBridgeId.setStatus('current')
if mibBuilder.loadTexts: tmnxOtherBridgeId.setDescription('tmnxOtherBridgeId specifies the bridge identifier of\n                    the device from which a BPDU was received.')
tmnxOldSdpBindTlsStpPortState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 4), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxOldSdpBindTlsStpPortState.setStatus('current')
if mibBuilder.loadTexts: tmnxOldSdpBindTlsStpPortState.setDescription('tmnxOldSdpBindTlsStpPortState specifies the previous\n                    state of an SDP binding.')
tmnxVcpState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 4, 5, 5), TStpPortState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxVcpState.setStatus('current')
if mibBuilder.loadTexts: tmnxVcpState.setDescription('tmnxVcpState specifies the current state of a Virtual\n                    Core Port (VCP).')
topologyChangeVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxVcpState"))
if mibBuilder.loadTexts: topologyChangeVcpState.setStatus('current')
if mibBuilder.loadTexts: topologyChangeVcpState.setDescription('The topologyChangeVcpState   notification is generated\n                     when a VCP has transitioned its state from disabled to\n                     forwarding   or   from  forwarding  to  disabled.  The\n                     spanning  tree  topology  has been modified and it may\n                     denote  loss  of  customer access or redundancy. Check\n                     the  new  topology against the provisioned topology to\n                     determine severity of connectivity loss.')
newRootVcpState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootVcpState.setStatus('current')
if mibBuilder.loadTexts: newRootVcpState.setDescription('The newRootVcpState notification is generated when the\n                     previous  root bridge has been aged out and a new root\n                     bridge has been elected. The new root bridge creates a\n                     new  spanning  tree topology and it may denote loss of\n                     customer  access or redundancy. Check the new topology\n                     against the provisioned topology to determine severity\n                     of connectivity loss.')
newRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: newRootBridge.setStatus('current')
if mibBuilder.loadTexts: newRootBridge.setDescription('The newRootBridge  notification is generated when this\n                     bridge  has been elected as the new root bridge. A new\n                     root  bridge  creates a new spanning tree topology and\n                     may  denote  loss  of  customer  access or redundancy.\n                     Check   the   new  topology  against  the  provisioned\n                     topology to determine severity of connectivity loss.')
vcpActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 32)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"))
if mibBuilder.loadTexts: vcpActiveProtocolChange.setStatus('current')
if mibBuilder.loadTexts: vcpActiveProtocolChange.setDescription('The  vcpActiveProtocolChange notification is generated\n                     when  the  spanning  tree protocol on this VCP changes\n                     from  rstp  to  stp  or  vise  versa.  No  recovery is\n                     needed.')
tmnxNewCistRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 33)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewCistRegionalRootBridge.setStatus('current')
if mibBuilder.loadTexts: tmnxNewCistRegionalRootBridge.setDescription('The tmnxNewCistRegionalRootBridge notification is\n                     generated when a new regional root bridge has been elected\n                     for the Common and Internal Spanning Tree. A new regional\n                     root bridge  creates a new spanning tree topology and may\n                     denote  loss  of  customer  access or redundancy. Check\n                     the   new  topology  against  the provisioned  topology\n                     to determine severity of connectivity loss.')
tmnxNewMstiRegionalRootBridge = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 34)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"))
if mibBuilder.loadTexts: tmnxNewMstiRegionalRootBridge.setStatus('current')
if mibBuilder.loadTexts: tmnxNewMstiRegionalRootBridge.setDescription('The tmnxNewMstiRegionalRootBridge notification is\n                     generated when a new regional root bridge has been elected\n                     for the Multiple Spanning Tree Instance. A new regional\n                     root bridge  creates a new spanning tree topology and may\n                     denote  loss  of  customer  access or redundancy. Check\n                     the   new  topology  against  the provisioned  topology\n                     to determine severity of connectivity loss.')
topologyChangePipMajorState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 39)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipMajorState.setStatus('current')
if mibBuilder.loadTexts: topologyChangePipMajorState.setDescription('The topologyChangePipMajorState notification is generated when\n        a PIP Uplink has transitioned its state from learning to forwarding or\n        from forwarding to blocking or broken. The spanning tree topology has\n        been modified and it may denote loss of customer access or redundancy.\n        Check the new topology against the provisioned topology to determine the\n        severity of connectivity loss.')
topologyChangePipState = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 40)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: topologyChangePipState.setStatus('current')
if mibBuilder.loadTexts: topologyChangePipState.setDescription('The topologyChangePipState notification is generated when a PIP Uplink\n        has transitioned state to blocking or broken from a state other than\n        forwarding. This event complements what is not covered by\n        topologyChangePipMajorState. The spanning tree topology has been\n        modified and it may denote loss of customer access or redundancy. Check\n        the new topology against the provisioned topology to determine severity\n        of connectivity loss.')
tmnxPipStpExcepCondStateChng = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 41)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpException"))
if mibBuilder.loadTexts: tmnxPipStpExcepCondStateChng.setStatus('current')
if mibBuilder.loadTexts: tmnxPipStpExcepCondStateChng.setDescription('The tmnxPipStpExcepCondStateChng notification is generated when the\n        value of the object tlsPipStpException has changed, i.e. when the\n        exception condition changes on the indicated PIP Uplink.')
pipActiveProtocolChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 4, 5, 0, 42)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"))
if mibBuilder.loadTexts: pipActiveProtocolChange.setStatus('current')
if mibBuilder.loadTexts: pipActiveProtocolChange.setDescription('The pipActiveProtocolChange notification is generated when the\n        spanning tree protocol on this PIP Uplink changes from rstp to stp or\n        vice-versa.  No recovery is needed.')
tmnxCustCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1))
tmnxCustGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2))
tmnxSvcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1))
tmnxSvcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2))
tmnxTstpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 1))
tmnxTstpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 5, 2))
tmnxCustCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustCompliance = tmnxCustCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxCustCompliance.setDescription('The compliance statement for management of services customers\n         on Alcatel 7x50 SR series systems.')
tmnxSvc7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7450V6v0Compliance = tmnxSvc7450V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSvc7450V6v0Compliance.setDescription('The compliance statement for management of services\n         on Alcatel 7450 ESS series systems release R6.0.')
tmnxSvc7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7750V6v0Compliance = tmnxSvc7750V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSvc7750V6v0Compliance.setDescription('The compliance statement for management of services\n         on Alcatel 7750 SR series systems release R6.0.')
tmnxSvc7710V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 1, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsFdbV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIesIfV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsShgV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMFibV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRdntV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsMstiV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsEgrV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcDhcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEndPointV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcIfDHCP6V6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBackbone6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsBgpV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcEpipeV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcTlsPipV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObsoletedV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcNotifyV6v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxApipeV3v0Group"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcRoutedCOV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvc7710V6v0Compliance = tmnxSvc7710V6v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxSvc7710V6v0Compliance.setDescription('The compliance statement for management of services\n         on Alcatel 7710 SR series systems release R6.0.')
tmnxCustV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 1, 2, 100)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custNextFreeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custContact"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custPhone"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteScope"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteAssignment"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIngressSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteEgressSchedulerPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCurrentIngrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCurrentEgrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteEgressAggRateLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIntendedIngrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteIntendedEgrSchedPlcy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteFrameBasedAccnt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedPackets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosSchedStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngQosPortSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrQosPortSchedFwdOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSPIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssIngQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSOverrideFlags"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSPIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMssEgrQosSSummedCIR"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custIngSchedPlcyPortStatsFwdOct"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdPkt"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custEgrSchedPlcyPortStatsFwdOct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCustV6v0Group = tmnxCustV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxCustV6v0Group.setDescription('The group of objects supporting management of Services customers\n         general capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 101)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIpRouting"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMtu"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumSaps"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcNumSdps"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDefMeshVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVRouterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcAutoBind"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVllType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMgmtVpls"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusDiscovery"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusUserName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusUserNameType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVcSwitching"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusPEDiscPolicy"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcRadiusDiscoveryShutdown"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcVplsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTotalFdbMimDestIdxEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcV6v0Group = tmnxSvcV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcV6v0Group.setDescription('The group of objects supporting management of Services \n         general capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 102)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacLearning"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDiscardUnknownDest"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableSize"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumStaticEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbLocalAgeTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbRemoteAgeTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpPriority"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTimeSinceTopologyChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTopologyChanges"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpDesignatedRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpMaxAge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHelloTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpForwardDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxAge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeHelloTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeForwardDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVirtualRootBridgeStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacAgeing"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpTopologyChangeActive"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVersion"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHoldCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpPrimaryBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpVcpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveMaxRate"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveRetryTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacMoveAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacRelearnOnly"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableSize"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacFlushOnFail"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRegionName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpRegionRevision"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpBridgeMaxHops"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistIntRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRemainingHopCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpCistRegionalRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumLearnedEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumOamEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumDhcpEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbNumHostEntries"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvSrcIp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsShcvInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsPriPortsCumulativeFactor"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsSecPortsCumulativeFactor"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsL2ptTermEnabled"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsPropagateMacFlush"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpMaxAttributes"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttributeCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpFailedRegisterCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpFloodTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblHighWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblLowWatermark"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMcPathMgmtPlcyName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpAdminQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsV6v0Group = tmnxSvcTlsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsV6v0Group.setDescription('The group of objects supporting management of Services TLS\n         general capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsFdbV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 103)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbMacAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbLocale"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbPortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbLastStateChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbProtected"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbBackboneDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbNumIVplsMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEndPointName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEPMacOperSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbEPMacOperVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsFdbPbbNumEpipes"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsProtMacLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsFdbV6v0Group = tmnxSvcTlsFdbV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsFdbV6v0Group.setDescription('The group of objects supporting management of Services TLS FDB\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcIesIfV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 104)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfIndex"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfName"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfAdminStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfVpnId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLoopback"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfLastStatusChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvSource"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfShcvInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesGrpIfOperUpWhileEmpty"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIesIfV6v0Group = tmnxSvcIesIfV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcIesIfV6v0Group.setDescription('The group of objects supporting management of Services IES\n         interface capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsShgV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 105)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgCustId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgResidential"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestProtSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestUnprotDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgRestProtSrcMacAction"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsShgCreationOrigin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsShgV6v0Group = tmnxSvcTlsShgV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsShgV6v0Group.setDescription('The group of objects supporting management of Services TLS\n         Split Hoirizon Group capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsMFibV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 106)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibFwdOrBlk"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibStatsForwardedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMFibV6v0Group = tmnxSvcTlsMFibV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsMFibV6v0Group.setDescription('The group of objects supporting management of Services TLS MFib\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcRdntV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 107)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsRdntGrpMemberLastMgmtChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRdntV6v0Group = tmnxSvcRdntV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcRdntV6v0Group.setDescription('The group of objects supporting management of Services Redundancy\n         group capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsMstiV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 108)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiPriority"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRoot"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiIntRootCost"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRemainingHopCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiRegionalRootPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMstiMvplsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsMstiV6v0Group = tmnxSvcTlsMstiV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsMstiV6v0Group.setDescription('The group of objects supporting management of Services TLS MSTI\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsEgrV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 109)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpLastMgmtChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpChainLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpEncapType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpDot1qEtherType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqEtherType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpMacFilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpIpFilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpIpv6FilterId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpQinqFixedTagPosition"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsEgrMcGrpOperQinqFixedTagVal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsEgrV6v0Group = tmnxSvcTlsEgrV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsEgrV6v0Group.setDescription('The group of objects supporting management of Services TLS Egress\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcDhcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 110)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateLocale"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateEncapValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateVcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRemainLseTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOption82"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePersistKey"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSubscrIdent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSubProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSlaProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvOperState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvChecks"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplies"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateShcvReplyTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateClientId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateIAID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateIAIDType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateCiAddrMaskLen"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateRetailerIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateAncpString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMaskTp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateFramedIpNetMask"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateBCastIpAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouterTp"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDefaultRouter"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryDns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryDns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSessionTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseStart"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLastRenew"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateServerLeaseEnd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpServerAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginSubscrId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginStrings"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOriginLeaseInfo"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateDhcpClientAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateLeaseSplitActive"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateInterDestId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePrimaryNbns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbnsType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateSecondaryNbns"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNextHopMacAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubIndent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySubProfile"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifySlaProfile"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateEvaluateState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModInterDestId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAncpString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateForceRenew"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpManagedRouteStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcDhcpV6v0Group = tmnxSvcDhcpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcDhcpV6v0Group.setDescription('The group of objects supporting management of Services DHCP Lease\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcEndPointV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 111)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActivePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveEncap"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointForceSwitchOver"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointForceSwitchOverSdpId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointActiveHoldDelay"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointIgnoreStandbySig"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacPinning"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimit"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointSuppressStandbySig"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveChangeCount"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveLastChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointTxActiveUpTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRevertTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointRevertTimeCountDn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEndPointV6v0Group = tmnxSvcEndPointV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcEndPointV6v0Group.setDescription('The group of objects supporting management of Services endpoint\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcPEV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 112)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyPassword"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyInterval"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscoveryPolicyTimeout"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddressType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerSecret"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPEDiscPolServerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcPEV6v0Group = tmnxSvcPEV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcPEV6v0Group.setDescription('The group of objects supporting management of Services PE Discovery\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcIfDHCP6V6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 114)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsLstClrd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsRcvd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsSent"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcIfDHCP6MsgStatsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcIfDHCP6V6v0Group = tmnxSvcIfDHCP6V6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcIfDHCP6V6v0Group.setDescription('The group of objects supporting management of Services interface DHCP\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsBackbone6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 115)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsSvcISID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneOperSrcMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneOperVplsSvcISID"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneLDPMacFlush"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBackboneVplsStp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBackbone6v0Group = tmnxSvcTlsBackbone6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsBackbone6v0Group.setDescription('The group of objects supporting management of Services PBB\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsBgpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 116)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVplsId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiPrefix"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiRD"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADExportRteTarget"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy1"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy2"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy3"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy4"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiExportPolicy5"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADImportRteTarget"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy1"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy2"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy3"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy4"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADVsiImportPolicy5"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsBgpADAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsBgpV6v0Group = tmnxSvcTlsBgpV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsBgpV6v0Group.setDescription('The group of objects supporting management of Services BGP AD\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcEpipeV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 117)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbTableLastChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbRowStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbLastChngd"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbBvplsSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbBvplsDstMac"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEpipePbbSvcISID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcEpipeV6v0Group = tmnxSvcEpipeV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcEpipeV6v0Group.setDescription('The group of objects supporting management of Services PBB Epipe\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcTlsPipV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 118)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortRole"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpDesignatedPort"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpException"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpForwardTransitions"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInRstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInMstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpInBadBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutConfigBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutTcnBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutRstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOutMstBpdus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOperStatus"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpMvplsPruneState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpOperProtocol"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipStpPortNum"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiPortRole"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiDesignatedBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsPipMstiDesignatedPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcTlsPipV6v0Group = tmnxSvcTlsPipV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcTlsPipV6v0Group.setDescription('The group of objects supporting management of Services TLS PIP\n         capabilities on Alcatel 7x50 SR series systems.')
tmnxApipeV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 119)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcApipeInterworking"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxApipeV3v0Group = tmnxApipeV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxApipeV3v0Group.setDescription('The  group  of  objects supporting management of APIPE services on\n         Alcatel 7x50 SR series systems release 3.0.')
tmnxSvcRoutedCOV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 120)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfParentIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfFwdServId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfFwdSubIf"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesGrpIfRedInterface"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerNumStaticHosts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcWholesalerNumDynamicHosts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcRoutedCOV5v0Group = tmnxSvcRoutedCOV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcRoutedCOV5v0Group.setDescription('The group of objects supporting routed CO Alcatel 7x50 SR systems.')
tmnxSvcBsxV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 121)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateAppProfString"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateModifyAppProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcBsxV6v0Group = tmnxSvcBsxV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcBsxV6v0Group.setDescription('The group of objects supporting management of BSX (Application\n         Assurance) capabilities on Alcatel 7x50 SR series systems.')
tmnxSvcNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 200)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpRestoreLseStateProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStatePopulateError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "hostConnectivityChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "protectedMacForNotify"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacIpAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "staticHostDynamicMacConflict"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuite"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxFailureDescription"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpProxyError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpCoAError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpSubAuthError"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegFailedReason"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrType"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrValue"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcMstiInstanceId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxCustomerRootBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOtherBridgeId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxOldSdpBindTlsStpPortState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningMacAddress"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningPinnedRowDescr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRow"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "macPinningViolatingRowDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObjsV6v0Group = tmnxSvcNotifyObjsV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcNotifyObjsV6v0Group.setDescription('The group of objects supporting management of Services\n         notification objects on Alcatel 7x50 SR series systems.')
tmnxSvcObsoletedV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 300)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsStpHoldTime"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoFwdOrBlk"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibInfoSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedPkts"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsMFibGrpSrcStatsForwardedOctets"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDHCPClientLease"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateSvcId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStatePortId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateEncapVal"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpRestoreLseStateProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tlsDhcpLseStatePopulateError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcObsoletedV6v0Group = tmnxSvcObsoletedV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcObsoletedV6v0Group.setDescription('The group of obsolete objects for the services feature\n         on Alcatel 7x50 SR series systems.')
tmnxSvcNotifyV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 401)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcStatusChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsFdbTableFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfStatusChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMfibTableFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMacPinningViolation"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDHCPLseStateRestoreProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcObjTodSuiteApplicFailed"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxEndPointTxActiveChanged"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxSvcPEDiscPolServOperStatChg"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcEndPointMacLimitAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrRegistrationFailed"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmRaised"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsMrpAttrTblFullAlarmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangeVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "newRootVcpState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "newRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "vcpActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxNewCistRegionalRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxNewMstiRegionalRootBridge"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangePipMajorState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "topologyChangePipState"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "tmnxPipStpExcepCondStateChng"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "pipActiveProtocolChange"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrm"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcFdbMimDestTblFullAlrmCleared"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDHCPMiscellaneousProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcPersistencyProblem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyV6v0Group = tmnxSvcNotifyV6v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcNotifyV6v0Group.setDescription('The group of notifications for the services feature\n         on Alcatel 7x50 SR series systems.')
tmnxSvcNotifyObsoletedGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 4, 2, 2, 402)).setObjects(("ALCATEL-IND1-TIMETRA-SERV-MIB", "custCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "custMultSvcSiteDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfCreated"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "iesIfDeleted"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDHCPLseStRestoreProblem"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcTlsDHCPLseStatePopulateErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxSvcNotifyObsoletedGroup = tmnxSvcNotifyObsoletedGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxSvcNotifyObsoletedGroup.setDescription('The group of notifications for the services feature\n         on Alcatel 7x50 SR series systems.')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", tlsEgrMcGrpMacFilterId=tlsEgrMcGrpMacFilterId, topologyChangePipState=topologyChangePipState, svcDhcpLseStateNextHopMacAddr=svcDhcpLseStateNextHopMacAddr, custMultSvcSiteCurrentEgrSchedPlcy=custMultSvcSiteCurrentEgrSchedPlcy, tlsFdbVpnId=tlsFdbVpnId, svcEndPointEntry=svcEndPointEntry, tmnxSvcTlsFdbV6v0Group=tmnxSvcTlsFdbV6v0Group, StpProtocol=StpProtocol, svcStatusChanged=svcStatusChanged, svcTlsStpRegionName=svcTlsStpRegionName, tlsPipStpException=tlsPipStpException, custMultSvcSiteDescription=custMultSvcSiteDescription, svcDHCPMiscellaneousProblem=svcDHCPMiscellaneousProblem, svcDhcpLseStateDhcpServerAddr=svcDhcpLseStateDhcpServerAddr, custMultiSvcSiteIngSchedPlcyPortStatsEntry=custMultiSvcSiteIngSchedPlcyPortStatsEntry, tmnxCustV6v0Group=tmnxCustV6v0Group, tlsMstiEntry=tlsMstiEntry, MvplsPruneState=MvplsPruneState, tmnxServConformance=tmnxServConformance, tlsShgResidential=tlsShgResidential, svcTlsBgpADVsiPrefix=svcTlsBgpADVsiPrefix, svcTlsBackboneLDPMacFlush=svcTlsBackboneLDPMacFlush, tmnxEndPointTxActiveChanged=tmnxEndPointTxActiveChanged, svcTlsCustId=svcTlsCustId, SdpTemplateId=SdpTemplateId, svcDhcpLseStateSlaProfString=svcDhcpLseStateSlaProfString, custMultiSvcSiteIngStatsEntry=custMultiSvcSiteIngStatsEntry, tlsDhcpLseStateNewCiAddr=tlsDhcpLseStateNewCiAddr, tlsDhcpRestoreLseStateCiAddr=tlsDhcpRestoreLseStateCiAddr, iesGrpIfOperUpWhileEmpty=iesGrpIfOperUpWhileEmpty, svcDhcpRestoreLseStateProblem=svcDhcpRestoreLseStateProblem, svcTlsDiscardUnknownDest=svcTlsDiscardUnknownDest, svcTlsMacMoveRetryTimeout=svcTlsMacMoveRetryTimeout, svcTlsShcvSrcIp=svcTlsShcvSrcIp, svcDhcpLseStateIAIDType=svcDhcpLseStateIAIDType, tlsMFibEntryType=tlsMFibEntryType, tmnxVcpState=tmnxVcpState, svcTlsVpnId=svcTlsVpnId, svcTlsBgpADExportRteTarget=svcTlsBgpADExportRteTarget, tlsPipMstiPortState=tlsPipMstiPortState, TSapIngQueueId=TSapIngQueueId, custMultSvcSiteIntendedEgrSchedPlcy=custMultSvcSiteIntendedEgrSchedPlcy, custMssEgrQosSSummedCIR=custMssEgrQosSSummedCIR, svcTlsStpTopologyChangeActive=svcTlsStpTopologyChangeActive, tmnxSvcObjTodSuiteApplicFailed=tmnxSvcObjTodSuiteApplicFailed, custEgrQosSchedName=custEgrQosSchedName, iesIfShcvSource=iesIfShcvSource, svcDescription=svcDescription, svcTlsMfibTableFullHighWatermark=svcTlsMfibTableFullHighWatermark, svcDhcpLseStateForceRenew=svcDhcpLseStateForceRenew, tlsDhcpLseStateOldChAddr=tlsDhcpLseStateOldChAddr, svcEndPointTxActiveChangeCount=svcEndPointTxActiveChangeCount, svcRadiusUserNameType=svcRadiusUserNameType, iesIfLoopback=iesIfLoopback, svcDhcpLeaseStateActionTable=svcDhcpLeaseStateActionTable, tlsEgressMulticastGroupTable=tlsEgressMulticastGroupTable, svcDhcpManagedRouteEntry=svcDhcpManagedRouteEntry, svcDhcpLseStateCiAddr=svcDhcpLseStateCiAddr, tmnxCustomerBridgeId=tmnxCustomerBridgeId, tlsRdntGrpMemberRemoteNodeAddrTp=tlsRdntGrpMemberRemoteNodeAddrTp, tlsProtMacAddress=tlsProtMacAddress, svcDhcpLseStateDhcpServerAddrType=svcDhcpLseStateDhcpServerAddrType, svcRadiusUserName=svcRadiusUserName, tlsMFibInfoVcId=tlsMFibInfoVcId, tmnxCustObjs=tmnxCustObjs, TdmOptionsSigPkts=TdmOptionsSigPkts, tlsRdntGrpName=tlsRdntGrpName, svcDhcpLseStateFramedIpNetMask=svcDhcpLseStateFramedIpNetMask, tlsFdbInfoEntry=tlsFdbInfoEntry, svcPEDiscoveryPolicyRowStatus=svcPEDiscoveryPolicyRowStatus, svcDhcpLseStateShcvOperState=svcDhcpLseStateShcvOperState, tmnxSvcTlsMFibV6v0Group=tmnxSvcTlsMFibV6v0Group, svcTlsFdbRemoteAgeTime=svcTlsFdbRemoteAgeTime, svcTlsMrpAttributeCount=svcTlsMrpAttributeCount, BridgeId=BridgeId, svcWholesalerID=svcWholesalerID, svcTlsStpBridgeInstanceId=svcTlsStpBridgeInstanceId, svcTlsFdbTableFullAlarmCleared=svcTlsFdbTableFullAlarmCleared, tlsMFibGrpSrcStatsForwardedPkts=tlsMFibGrpSrcStatsForwardedPkts, svcPEDiscPolServerOperStatus=svcPEDiscPolServerOperStatus, tlsEgrMcGrpQinqFixedTagPosition=tlsEgrMcGrpQinqFixedTagPosition, svcDHCPLseStateRestoreProblem=svcDHCPLseStateRestoreProblem, tlsPipMstiDesignatedPort=tlsPipMstiDesignatedPort, svcDhcpManagedRouteTable=svcDhcpManagedRouteTable, tlsMFibStatsGrpInetAddrType=tlsMFibStatsGrpInetAddrType, custIngSchedPlcyStatsFwdPkt=custIngSchedPlcyStatsFwdPkt, svcDhcpLseStateSecondaryDnsType=svcDhcpLseStateSecondaryDnsType, tlsFdbEPMacOperVcId=tlsFdbEPMacOperVcId, tlsEgrMcGrpQinqEtherType=tlsEgrMcGrpQinqEtherType, tlsPipStpForwardTransitions=tlsPipStpForwardTransitions, svcTlsStpBridgeAddress=svcTlsStpBridgeAddress, tlsPipStpOutTcnBpdus=tlsPipStpOutTcnBpdus, tmnxCustCompliances=tmnxCustCompliances, tmnxSvcTlsV6v0Group=tmnxSvcTlsV6v0Group, tlsMFibGrpSrcStatsEntry=tlsMFibGrpSrcStatsEntry, svcDhcpLseStateShcvChecks=svcDhcpLseStateShcvChecks, svcOperStatus=svcOperStatus, tlsMFibInfoFwdOrBlk=tlsMFibInfoFwdOrBlk, tlsFdbLastStateChange=tlsFdbLastStateChange, svcTlsBgpADVsiImportPolicy1=svcTlsBgpADVsiImportPolicy1, tmnxTstpCompliances=tmnxTstpCompliances, custNumEntries=custNumEntries, svcDhcpLseStateModifySubIndent=svcDhcpLseStateModifySubIndent, tlsMstiMvplsMaxVlanTag=tlsMstiMvplsMaxVlanTag, svcIpRouting=svcIpRouting, tmnxApipeV3v0Group=tmnxApipeV3v0Group, custMultSvcSiteEgressAggRateLimit=custMultSvcSiteEgressAggRateLimit, tlsFdbRowStatus=tlsFdbRowStatus, tlsShgCustId=tlsShgCustId, svcTlsStpTimeSinceTopologyChange=svcTlsStpTimeSinceTopologyChange, svcEndPointMacLimit=svcEndPointMacLimit, svcEpipePbbTable=svcEpipePbbTable, tmnxSvcTlsBgpV6v0Group=tmnxSvcTlsBgpV6v0Group, tlsEgrMcGrpAdminQinqFixedTagVal=tlsEgrMcGrpAdminQinqFixedTagVal, tlsRdntGrpMemberLastMgmtChange=tlsRdntGrpMemberLastMgmtChange, tlsPipStpPortState=tlsPipStpPortState, iesGrpIfRedInterface=iesGrpIfRedInterface, svcDhcpLseStateModifyAncpString=svcDhcpLseStateModifyAncpString, tlsRdntGrpRowStatus=tlsRdntGrpRowStatus, tmnxSvcEpipeV6v0Group=tmnxSvcEpipeV6v0Group, custMultiSvcSiteEgrSchedPlcyStatsTable=custMultiSvcSiteEgrSchedPlcyStatsTable, tlsMFibInfoEntry=tlsMFibInfoEntry, custEgrSchedPlcyStatsFwdPkt=custEgrSchedPlcyStatsFwdPkt, svcPEDiscoveryPolicyName=svcPEDiscoveryPolicyName, custMssIngQosSchedInfoTable=custMssIngQosSchedInfoTable, svcTlsMacLearning=svcTlsMacLearning, tlsMFibInfoPortId=tlsMFibInfoPortId, tmnxServNotifications=tmnxServNotifications, SvcISID=SvcISID, custContact=custContact, svcVplsType=svcVplsType, iesIfShcvInterval=iesIfShcvInterval, custMultSvcSiteEgressSchedulerPolicy=custMultSvcSiteEgressSchedulerPolicy, svcTlsFdbTableFullHighWatermark=svcTlsFdbTableFullHighWatermark, tlsRdntGrpEntry=tlsRdntGrpEntry, tlsPipMstiPortRole=tlsPipMstiPortRole, CemSapReportAlarm=CemSapReportAlarm, tmnxSvcDhcpV6v0Group=tmnxSvcDhcpV6v0Group, svcDhcpLseStateRemainLseTime=svcDhcpLseStateRemainLseTime, tlsMFibGrpInetAddrType=tlsMFibGrpInetAddrType, tlsMFibStatsForwardedPkts=tlsMFibStatsForwardedPkts, svcTlsBgpADVsiImportPolicy4=svcTlsBgpADVsiImportPolicy4, VpnId=VpnId, custMultSvcSiteCreated=custMultSvcSiteCreated, tlsMstiRegionalRootPort=tlsMstiRegionalRootPort, svcTlsBgpADVsiExportPolicy4=svcTlsBgpADVsiExportPolicy4, svcId=svcId, svcTlsStpRootPort=svcTlsStpRootPort, tmnxOtherBridgeId=tmnxOtherBridgeId, tlsPipStpInTcnBpdus=tlsPipStpInTcnBpdus, svcTlsFdbLocalAgeTime=svcTlsFdbLocalAgeTime, tmnxSvcIfDHCP6V6v0Group=tmnxSvcIfDHCP6V6v0Group, svcTlsStpCistRemainingHopCount=svcTlsStpCistRemainingHopCount, svcTlsStpOperStatus=svcTlsStpOperStatus, svcPEDiscPolServerTable=svcPEDiscPolServerTable, svcTlsBackboneOperSrcMac=svcTlsBackboneOperSrcMac, svcTlsL2ptTermEnabled=svcTlsL2ptTermEnabled, svcDhcpManagedRoutePrefixLen=svcDhcpManagedRoutePrefixLen, custMultiSvcSiteIngSchedPlcyPortStatsTable=custMultiSvcSiteIngSchedPlcyPortStatsTable, svcDhcpLseStateNewChAddr=svcDhcpLseStateNewChAddr, svcTlsBgpADEntry=svcTlsBgpADEntry, custMultSvcSiteIngressSchedulerPolicy=custMultSvcSiteIngressSchedulerPolicy, tmnxSvcObjTodSuite=tmnxSvcObjTodSuite, tlsShgRestUnprotDstMac=tlsShgRestUnprotDstMac, TSapEgrQueueId=TSapEgrQueueId, svcTlsStpBridgeMaxHops=svcTlsStpBridgeMaxHops, svcTlsMacFlushOnFail=svcTlsMacFlushOnFail, svcTlsStpTopologyChanges=svcTlsStpTopologyChanges, iesIfEntry=iesIfEntry, macPinningPinnedRowDescr=macPinningPinnedRowDescr, tlsMFibSrcInetAddrType=tlsMFibSrcInetAddrType, tlsPipStpPortNum=tlsPipStpPortNum, iesGrpIfTable=iesGrpIfTable, iesIfShcvAction=iesIfShcvAction, tmnxSvcConformance=tmnxSvcConformance, svcDhcpLseStateModifyAppProfile=svcDhcpLseStateModifyAppProfile, tlsMFibVcId=tlsMFibVcId, svcVcSwitching=svcVcSwitching, svcDhcpLseStateShcvReplyTime=svcDhcpLseStateShcvReplyTime, svcTlsBgpADVplsId=svcTlsBgpADVplsId, svcTlsStpCistRegionalRootPort=svcTlsStpCistRegionalRootPort, tlsFdbSdpId=tlsFdbSdpId, tlsMFibGrpMacAddr=tlsMFibGrpMacAddr, svcDhcpLseStateOldCiAddr=svcDhcpLseStateOldCiAddr, tlsPipStpMvplsPruneState=tlsPipStpMvplsPruneState, tlsEgrMcGrpRowStatus=tlsEgrMcGrpRowStatus, svcDhcpLseStateSessionTimeout=svcDhcpLseStateSessionTimeout, custIngQosAssignmentPortId=custIngQosAssignmentPortId, svcTlsBgpADVsiImportPolicy2=svcTlsBgpADVsiImportPolicy2, tlsMFibStatsEntryType=tlsMFibStatsEntryType, custMssEgrQosSchedInfoEntry=custMssEgrQosSchedInfoEntry, custMultiServiceSiteTable=custMultiServiceSiteTable, tlsMstiMvplsRowStatus=tlsMstiMvplsRowStatus, svcTlsMfibTableFullLowWatermark=svcTlsMfibTableFullLowWatermark, tmnxSvcObjs=tmnxSvcObjs, svcTlsFdbNumDhcpEntries=svcTlsFdbNumDhcpEntries, custEgrSchedPlcyStatsFwdOct=custEgrSchedPlcyStatsFwdOct, svcTlsBackboneVplsSvcId=svcTlsBackboneVplsSvcId, tlsFdbLocale=tlsFdbLocale, tlsShgName=tlsShgName, tmnxNewMstiRegionalRootBridge=tmnxNewMstiRegionalRootBridge, TlsLimitMacMoveLevel=TlsLimitMacMoveLevel, L2RouteOrigin=L2RouteOrigin, MfibGrpSrcFwdOrBlk=MfibGrpSrcFwdOrBlk, svcEpipePbbRowStatus=svcEpipePbbRowStatus, svcDhcpLseStateRetailerSvcId=svcDhcpLseStateRetailerSvcId, tlsDhcpLseStateOldCiAddr=tlsDhcpLseStateOldCiAddr, svcTlsMrpAttrTblLowWatermark=svcTlsMrpAttrTblLowWatermark, tlsDhcpRestoreLseStateSvcId=tlsDhcpRestoreLseStateSvcId, staticHostDynamicMacConflict=staticHostDynamicMacConflict, svcTlsMrpAttrValue=svcTlsMrpAttrValue, svcNumSdps=svcNumSdps, svcIfDHCP6MsgStatEntry=svcIfDHCP6MsgStatEntry, tlsProtMacLastMgmtChange=tlsProtMacLastMgmtChange, tlsDHCPClientLease=tlsDHCPClientLease, tlsRdntGrpMemberPort=tlsRdntGrpMemberPort, svcIfDHCP6MsgStatsDropped=svcIfDHCP6MsgStatsDropped, tlsMFibInfoEncapValue=tlsMFibInfoEncapValue, tmnxOldSdpBindTlsStpPortState=tmnxOldSdpBindTlsStpPortState, svcDhcpLseStateBCastIpAddr=svcDhcpLseStateBCastIpAddr, tlsProtMacRowStatus=tlsProtMacRowStatus, svcTlsMrpAttrRegFailedReason=svcTlsMrpAttrRegFailedReason, svcTlsMrpAttrType=svcTlsMrpAttrType, ServObjDesc=ServObjDesc, svcLastMgmtChange=svcLastMgmtChange, svcTlsBackboneInfoTable=svcTlsBackboneInfoTable, tlsMstiManagedVlanListTable=tlsMstiManagedVlanListTable, svcDhcpCoAError=svcDhcpCoAError, svcTlsBackboneOperVplsSvcISID=svcTlsBackboneOperVplsSvcISID, tlsFdbEPMacOperSdpId=tlsFdbEPMacOperSdpId, newRootBridge=newRootBridge, tlsFdbBackboneDstMac=tlsFdbBackboneDstMac, TlsLimitMacMove=TlsLimitMacMove, tmnxNewCistRegionalRootBridge=tmnxNewCistRegionalRootBridge, svcTlsStpMaxAge=svcTlsStpMaxAge, custIngQosSchedStatsForwardedOctets=custIngQosSchedStatsForwardedOctets, tlsEgrMcGrpOperQinqFixedTagVal=tlsEgrMcGrpOperQinqFixedTagVal, svcPEDiscoveryPolicyInterval=svcPEDiscoveryPolicyInterval, svcApipeInfoEntry=svcApipeInfoEntry, svcWholesalerNumDynamicHosts=svcWholesalerNumDynamicHosts, svcWholesalerInfoEntry=svcWholesalerInfoEntry, tmnxSvcRdntV6v0Group=tmnxSvcRdntV6v0Group, svcDhcpLeaseStateEntry=svcDhcpLeaseStateEntry, svcTlsFdbTableFullAlarmRaised=svcTlsFdbTableFullAlarmRaised, tlsMFibFwdOrBlk=tlsMFibFwdOrBlk, tlsMFibStatsForwardedOctets=tlsMFibStatsForwardedOctets, svcTlsBgpADAdminStatus=svcTlsBgpADAdminStatus, custMssIngQosSLastMgmtChange=custMssIngQosSLastMgmtChange, svcDhcpSubAuthError=svcDhcpSubAuthError, svcDhcpLseStateAppProfString=svcDhcpLseStateAppProfString, custMssIngQosSOverrideFlags=custMssIngQosSOverrideFlags, svcEndPointForceSwitchOverSdpId=svcEndPointForceSwitchOverSdpId, svcDhcpLseStatePopulateError=svcDhcpLseStatePopulateError, tmnxSvcTlsPipV6v0Group=tmnxSvcTlsPipV6v0Group)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", custEgrSchedPlcyPortStatsFwdPkt=custEgrSchedPlcyPortStatsFwdPkt, custMultiSvcSiteIngStatsTable=custMultiSvcSiteIngStatsTable, svcTlsBgpADVsiImportPolicy5=svcTlsBgpADVsiImportPolicy5, custDeleted=custDeleted, tlsMFibStatsEntry=tlsMFibStatsEntry, svcRadiusDiscovery=svcRadiusDiscovery, svcDhcpLseStateCiAddrMaskLen=svcDhcpLseStateCiAddrMaskLen, tlsRdntGrpDescription=tlsRdntGrpDescription, svcDhcpLseStateInterDestId=svcDhcpLseStateInterDestId, svcVRouterId=svcVRouterId, tmnxSvcGroups=tmnxSvcGroups, tlsMFibStatsGrpMacAddr=tlsMFibStatsGrpMacAddr, iesIfLastStatusChange=iesIfLastStatusChange, svcTlsBgpADVsiExportPolicy2=svcTlsBgpADVsiExportPolicy2, svcDhcpLseStateSecondaryNbnsType=svcDhcpLseStateSecondaryNbnsType, tmnxSvcBsxV6v0Group=tmnxSvcBsxV6v0Group, custMssEgrQosSPIR=custMssEgrQosSPIR, svcLastStatusChange=svcLastStatusChange, iesIfFwdServId=iesIfFwdServId, custEgrSchedPlcyPortStatsPort=custEgrSchedPlcyPortStatsPort, svcDhcpLseStateChAddr=svcDhcpLseStateChAddr, tlsShgRestProtSrcMacAction=tlsShgRestProtSrcMacAction, tlsMstiRowStatus=tlsMstiRowStatus, svcEndPointTxActiveLastChange=svcEndPointTxActiveLastChange, DhcpLseStateInfoOrigin=DhcpLseStateInfoOrigin, svcTlsMfibTableFullAlarmRaised=svcTlsMfibTableFullAlarmRaised, custCreated=custCreated, iesIfFwdSubIf=iesIfFwdSubIf, svcTlsFdbTableFullLowWatermark=svcTlsFdbTableFullLowWatermark, svcDhcpLeaseStateTable=svcDhcpLeaseStateTable, svcTlsMacAgeing=svcTlsMacAgeing, topologyChangePipMajorState=topologyChangePipMajorState, tmnxSvc7710V6v0Compliance=tmnxSvc7710V6v0Compliance, svcDhcpLseStatePersistKey=svcDhcpLseStatePersistKey, custMultiSvcSiteEgrSchedPlcyPortStatsEntry=custMultiSvcSiteEgrSchedPlcyPortStatsEntry, svcEndPointForceSwitchOver=svcEndPointForceSwitchOver, custEgrSchedPlcyPortStatsFwdOct=custEgrSchedPlcyPortStatsFwdOct, svcEpipePbbTableLastChanged=svcEpipePbbTableLastChanged, tlsMFibGrpSrcStatsSrcAddr=tlsMFibGrpSrcStatsSrcAddr, svcDhcpLseStateAncpString=svcDhcpLseStateAncpString, custNextFreeId=custNextFreeId, custMssIngQosSPIR=custMssIngQosSPIR, svcIfDHCP6MsgStatTable=svcIfDHCP6MsgStatTable, svcCreated=svcCreated, SdpBindTlsBpduTranslation=SdpBindTlsBpduTranslation, custMssEgrQosSCIR=custMssEgrQosSCIR, svcDhcpLseStateSecondaryNbns=svcDhcpLseStateSecondaryNbns, tlsMstiMvplsMinVlanTag=tlsMstiMvplsMinVlanTag, svcTlsSecPortsCumulativeFactor=svcTlsSecPortsCumulativeFactor, tlsDhcpRestoreLseStateEncapVal=tlsDhcpRestoreLseStateEncapVal, custMultiServiceSiteEntry=custMultiServiceSiteEntry, custIngQosPortSchedFwdPkts=custIngQosPortSchedFwdPkts, macPinningPinnedRow=macPinningPinnedRow, tlsPipStpPortRole=tlsPipStpPortRole, tlsFdbNumIVplsMac=tlsFdbNumIVplsMac, svcTlsShcvSrcMac=svcTlsShcvSrcMac, svcEndPointMacLimitAlarmRaised=svcEndPointMacLimitAlarmRaised, timetraServicesMIBModule=timetraServicesMIBModule, svcTlsShcvAction=svcTlsShcvAction, svcDhcpLeaseStateModifyTable=svcDhcpLeaseStateModifyTable, svcEndPointActiveHoldDelay=svcEndPointActiveHoldDelay, svcTlsMrpAttrTblFullAlarmCleared=svcTlsMrpAttrTblFullAlarmCleared, svcDhcpLseStateDhcpClientAddrType=svcDhcpLseStateDhcpClientAddrType, tlsShgCreationOrigin=tlsShgCreationOrigin, custMssIngQosSchedInfoEntry=custMssIngQosSchedInfoEntry, svcDhcpManagedRouteStatus=svcDhcpManagedRouteStatus, custMultiSvcSiteEgrStatsEntry=custMultiSvcSiteEgrStatsEntry, custMultiSvcSiteIngSchedPlcyStatsTable=custMultiSvcSiteIngSchedPlcyStatsTable, svcTlsMacRelearnOnly=svcTlsMacRelearnOnly, tlsPipStpInBadBpdus=tlsPipStpInBadBpdus, custMultSvcSiteLastMgmtChange=custMultSvcSiteLastMgmtChange, svcTlsFdbNumLearnedEntries=svcTlsFdbNumLearnedEntries, svcTlsPriPortsCumulativeFactor=svcTlsPriPortsCumulativeFactor, tmnxSvcNotifyObjsV6v0Group=tmnxSvcNotifyObjsV6v0Group, svcEndPointTxActiveSdpId=svcEndPointTxActiveSdpId, tmnxSvcObsoletedV6v0Group=tmnxSvcObsoletedV6v0Group, svcDhcpLseStateEncapValue=svcDhcpLseStateEncapValue, custEgrQosSchedStatsForwardedOctets=custEgrQosSchedStatsForwardedOctets, svcTlsDHCPLseStRestoreProblem=svcTlsDHCPLseStRestoreProblem, iesGrpIfEntry=iesGrpIfEntry, svcTlsMrpMaxAttributes=svcTlsMrpMaxAttributes, svcDhcpLseStateSdpId=svcDhcpLseStateSdpId, tlsShgInfoTable=tlsShgInfoTable, svcPEDiscPolServerIndex=svcPEDiscPolServerIndex, custMultSvcSiteRowStatus=custMultSvcSiteRowStatus, svcEndPointName=svcEndPointName, svcEndPointRevertTime=svcEndPointRevertTime, tlsMFibStatsSrcInetAddrType=tlsMFibStatsSrcInetAddrType, tlsRdntGrpMemberEncap=tlsRdntGrpMemberEncap, tlsFdbPortId=tlsFdbPortId, custEgrQosSchedStatsForwardedPackets=custEgrQosSchedStatsForwardedPackets, tlsMstiTable=tlsMstiTable, svcDhcpLseStateLeaseSplitActive=svcDhcpLseStateLeaseSplitActive, iesIfOperStatus=iesIfOperStatus, tmnxTstpConformance=tmnxTstpConformance, svcEpipePbbLastChngd=svcEpipePbbLastChngd, tlsMFibGrpSrcStatsGrpAddr=tlsMFibGrpSrcStatsGrpAddr, custMultSvcSiteDeleted=custMultSvcSiteDeleted, tlsMstiManagedVlanListEntry=tlsMstiManagedVlanListEntry, svcEndPointRevertTimeCountDn=svcEndPointRevertTimeCountDn, svcPEDiscoveryPolicyTimeout=svcPEDiscoveryPolicyTimeout, iesIfCreated=iesIfCreated, svcTlsMacPinningViolation=svcTlsMacPinningViolation, svcDhcpLseStatePrimaryDnsType=svcDhcpLseStatePrimaryDnsType, iesIfParentIf=iesIfParentIf, svcDhcpLseStateBCastIpAddrType=svcDhcpLseStateBCastIpAddrType, staticHostDynamicMacIpAddress=staticHostDynamicMacIpAddress, custPhone=custPhone, custMultSvcSiteAssignment=custMultSvcSiteAssignment, tlsFdbType=tlsFdbType, tmnxPipStpExcepCondStateChng=tmnxPipStpExcepCondStateChng, custMultSvcSiteTodSuite=custMultSvcSiteTodSuite, svcDhcpLseStateOriginStrings=svcDhcpLseStateOriginStrings, custMssEgrQosSLastMgmtChange=custMssEgrQosSLastMgmtChange, svcDhcpLseStateOption82=svcDhcpLseStateOption82, custMssEgrQosSOverrideFlags=custMssEgrQosSOverrideFlags, tlsMFibEncapValue=tlsMFibEncapValue, tlsProtectedMacTable=tlsProtectedMacTable, svcEpipePbbBvplsDstMac=svcEpipePbbBvplsDstMac, hostConnectivityChAddr=hostConnectivityChAddr, svcBaseInfoTable=svcBaseInfoTable, tlsFdbVcId=tlsFdbVcId, svcTlsStpForwardDelay=svcTlsStpForwardDelay, svcDhcpLseStateSubProfString=svcDhcpLseStateSubProfString, tlsMFibStatsSrcInetAddr=tlsMFibStatsSrcInetAddr, tlsPipStpDesignatedBridge=tlsPipStpDesignatedBridge, svcDhcpProxyError=svcDhcpProxyError, custIngQosSchedStatsForwardedPackets=custIngQosSchedStatsForwardedPackets, tlsPipStpOperProtocol=tlsPipStpOperProtocol, iesIfRowStatus=iesIfRowStatus, custMssEgrQosSRowStatus=custMssEgrQosSRowStatus, svcDhcpLseStatePrimaryNbns=svcDhcpLseStatePrimaryNbns, svcEndPointDescription=svcEndPointDescription, iesIfCustId=iesIfCustId, svcNumSaps=svcNumSaps, svcEndPointSuppressStandbySig=svcEndPointSuppressStandbySig, svcDhcpRestoreLseStateCiAddr=svcDhcpRestoreLseStateCiAddr, custEgrQosAssignmentPortId=custEgrQosAssignmentPortId, custInfoTable=custInfoTable, custMultiSvcSiteIngSchedPlcyStatsEntry=custMultiSvcSiteIngSchedPlcyStatsEntry, tmnxCustCompliance=tmnxCustCompliance, tlsMFibInfoTable=tlsMFibInfoTable, svcTotalFdbMimDestIdxEntries=svcTotalFdbMimDestIdxEntries, tlsPipInfoEntry=tlsPipInfoEntry, svcTlsStpBridgeMaxAge=svcTlsStpBridgeMaxAge, svcTlsStpVirtualRootBridgeStatus=svcTlsStpVirtualRootBridgeStatus, PYSNMP_MODULE_ID=timetraServicesMIBModule, tmnxSvcPEV6v0Group=tmnxSvcPEV6v0Group, svcApipeInterworking=svcApipeInterworking, iesIfAdminStatus=iesIfAdminStatus, svcEndPointMacPinning=svcEndPointMacPinning, tlsEgrMcGrpEncapType=tlsEgrMcGrpEncapType, svcIfDHCP6MsgStatsLstClrd=svcIfDHCP6MsgStatsLstClrd, SdpBFHundredthsOfPercent=SdpBFHundredthsOfPercent, svcTlsMrpFloodTime=svcTlsMrpFloodTime, svcTlsInfoTable=svcTlsInfoTable, tlsShgRowStatus=tlsShgRowStatus, svcDhcpLseStateSubscrIdent=svcDhcpLseStateSubscrIdent, svcTlsDHCPLseStatePopulateErr=svcTlsDHCPLseStatePopulateErr, custDescription=custDescription, svcEndPointTable=svcEndPointTable, custRowStatus=custRowStatus, tmnxSvcIesIfV6v0Group=tmnxSvcIesIfV6v0Group, svcPEDiscPolServerEntry=svcPEDiscPolServerEntry, custMultiSvcSiteEgrStatsTable=custMultiSvcSiteEgrStatsTable, svcDefMeshVcId=svcDefMeshVcId, tlsPipStpOutConfigBpdus=tlsPipStpOutConfigBpdus, topologyChangeVcpState=topologyChangeVcpState, tmnxSvcTlsMstiV6v0Group=tmnxSvcTlsMstiV6v0Group, svcMtu=svcMtu, svcDhcpLseStateCiAddrType=svcDhcpLseStateCiAddrType, svcTlsStpHoldCount=svcTlsStpHoldCount, iesIfLastMgmtChange=iesIfLastMgmtChange, svcTlsBgpADTable=svcTlsBgpADTable, TVirtSchedAttribute=TVirtSchedAttribute, tlsShgDescription=tlsShgDescription, svcTlsPropagateMacFlush=svcTlsPropagateMacFlush, svcIfDHCP6MsgStatsSent=svcIfDHCP6MsgStatsSent, tmnxCustomerRootBridgeId=tmnxCustomerRootBridgeId, tlsEgrMcGrpIpFilterId=tlsEgrMcGrpIpFilterId, svcDhcpLseStateServerLastRenew=svcDhcpLseStateServerLastRenew, svcDhcpLeaseStateModifyEntry=svcDhcpLeaseStateModifyEntry, svcWholesalerNumStaticHosts=svcWholesalerNumStaticHosts, MstiInstanceIdOrZero=MstiInstanceIdOrZero, svcTlsStpBridgeHelloTime=svcTlsStpBridgeHelloTime, svcPEDiscPolServerAddressType=svcPEDiscPolServerAddressType, svcTlsBgpADVsiImportPolicy3=svcTlsBgpADVsiImportPolicy3, svcDhcpLseStateOldChAddr=svcDhcpLseStateOldChAddr, custIngQosSchedName=custIngQosSchedName, custMssEgrQosSchedInfoTable=custMssEgrQosSchedInfoTable, svcApipeInfoTable=svcApipeInfoTable, tlsPipStpInRstBpdus=tlsPipStpInRstBpdus, tmnxSvcRoutedCOV5v0Group=tmnxSvcRoutedCOV5v0Group, macPinningMacAddress=macPinningMacAddress, svcTlsBackboneInfoEntry=svcTlsBackboneInfoEntry, tmnxServObjs=tmnxServObjs, tlsMFibInfoSdpId=tlsMFibInfoSdpId, svcDhcpLeaseStateActionEntry=svcDhcpLeaseStateActionEntry, svcTlsStpPriority=svcTlsStpPriority, custId=custId, custMssIngQosSCIR=custMssIngQosSCIR, tlsFdbCustId=tlsFdbCustId, svcEndPointIgnoreStandbySig=svcEndPointIgnoreStandbySig, tlsPipStpDesignatedPort=tlsPipStpDesignatedPort, svcEpipePbbSvcISID=svcEpipePbbSvcISID, svcTlsInfoEntry=svcTlsInfoEntry, tlsRdntGrpMemberEntry=tlsRdntGrpMemberEntry, tlsShgInfoEntry=tlsShgInfoEntry, svcDhcpLseStateModifySubProfile=svcDhcpLseStateModifySubProfile, protectedMacForNotify=protectedMacForNotify, svcFdbMimDestTblFullAlrmCleared=svcFdbMimDestTblFullAlrmCleared, tlsFdbMacAddr=tlsFdbMacAddr, SdpBindVcType=SdpBindVcType, tlsMFibInfoSvcId=tlsMFibInfoSvcId, tlsDhcpRestoreLseStateProblem=tlsDhcpRestoreLseStateProblem, tlsMFibSvcId=tlsMFibSvcId, svcPEDiscPolServerPort=svcPEDiscPolServerPort, custEgrQosPortIdSchedStatsTable=custEgrQosPortIdSchedStatsTable, svcTlsStpVcpOperProtocol=svcTlsStpVcpOperProtocol, tlsDhcpRestoreLseStatePortId=tlsDhcpRestoreLseStatePortId, svcTlsStpCistIntRootCost=svcTlsStpCistIntRootCost, svcEpipePbbBvplsSvcId=svcEpipePbbBvplsSvcId, tlsMFibLocale=tlsMFibLocale, custMssIngQosSRowStatus=custMssIngQosSRowStatus, svcTlsMrpAdminStatus=svcTlsMrpAdminStatus, tlsProtectedMacEntry=tlsProtectedMacEntry, svcPEDiscoveryPolicyEntry=svcPEDiscoveryPolicyEntry, svcTlsFdbNumOamEntries=svcTlsFdbNumOamEntries, svcDhcpLseStateRetailerIf=svcDhcpLseStateRetailerIf, custEgrQosPortIdSchedName=custEgrQosPortIdSchedName, tmnxTstpNotifyObjs=tmnxTstpNotifyObjs, tmnxSvc7750V6v0Compliance=tmnxSvc7750V6v0Compliance, hostConnectivityCiAddr=hostConnectivityCiAddr, svcTlsStpBridgeForwardDelay=svcTlsStpBridgeForwardDelay, tmnxSvcNotifyObsoletedGroup=tmnxSvcNotifyObsoletedGroup, custTrapsPrefix=custTrapsPrefix, svcDhcpLseStateClientId=svcDhcpLseStateClientId, svcTrapsPrefix=svcTrapsPrefix, StpExceptionCondition=StpExceptionCondition, svcDeleted=svcDeleted, tlsMFibTable=tlsMFibTable, tmnxSvcTlsShgV6v0Group=tmnxSvcTlsShgV6v0Group, svcPEDiscPolServerAddress=svcPEDiscPolServerAddress, tlsEgrMcGrpDot1qEtherType=tlsEgrMcGrpDot1qEtherType, macPinningViolatingRow=macPinningViolatingRow, svcTlsMacMoveAdminStatus=svcTlsMacMoveAdminStatus, tlsMstiRemainingHopCount=tlsMstiRemainingHopCount, svcDhcpClientLease=svcDhcpClientLease, svcRowStatus=svcRowStatus, tlsEgrMcGrpDescription=tlsEgrMcGrpDescription, tlsEgrMcGrpName=tlsEgrMcGrpName, svcTlsStpRegionRevision=svcTlsStpRegionRevision, SdpBindBandwidth=SdpBindBandwidth, IAIDType=IAIDType)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", iesIfType=iesIfType, svcTlsFdbTableSize=svcTlsFdbTableSize, tlsFdbPbbNumEpipes=tlsFdbPbbNumEpipes, custMultSvcSiteName=custMultSvcSiteName, tstpTrapsPrefix=tstpTrapsPrefix, tlsRdntGrpTable=tlsRdntGrpTable, svcTlsMrpAttrRegistrationFailed=svcTlsMrpAttrRegistrationFailed, custIngQosPortIdSchedStatsTable=custIngQosPortIdSchedStatsTable, svcTlsFdbNumStaticEntries=svcTlsFdbNumStaticEntries, tlsMFibPortId=tlsMFibPortId, tlsMFibGrpSrcStatsForwardedOctets=tlsMFibGrpSrcStatsForwardedOctets, tlsRdntGrpMemberIsSap=tlsRdntGrpMemberIsSap, tlsShgLastMgmtChange=tlsShgLastMgmtChange, tmnxCustConformance=tmnxCustConformance, tlsPipMstiTable=tlsPipMstiTable, svcTlsBgpADVsiExportPolicy3=svcTlsBgpADVsiExportPolicy3, tmnxCustGroups=tmnxCustGroups, tlsRdntGrpMemberRemoteNodeAddr=tlsRdntGrpMemberRemoteNodeAddr, svcTlsFdbNumHostEntries=svcTlsFdbNumHostEntries, svcPEDiscPolServerSecret=svcPEDiscPolServerSecret, L2ptProtocols=L2ptProtocols, tlsEgressMulticastGroupEntry=tlsEgressMulticastGroupEntry, svcDhcpLseStateDefaultRouterTp=svcDhcpLseStateDefaultRouterTp, tlsMFibStatsTable=tlsMFibStatsTable, custMultiSvcSiteEgrSchedPlcyStatsEntry=custMultiSvcSiteEgrSchedPlcyStatsEntry, tlsMFibGrpSrcStatsTable=tlsMFibGrpSrcStatsTable, svcTlsStpPrimaryBridge=svcTlsStpPrimaryBridge, iesIfStatusChanged=iesIfStatusChanged, svcTlsStpRootCost=svcTlsStpRootCost, tlsRdntGrpMemberTable=tlsRdntGrpMemberTable, iesIfIndex=iesIfIndex, svcTlsStpAdminStatus=svcTlsStpAdminStatus, svcDhcpLseStateModInterDestId=svcDhcpLseStateModInterDestId, tlsMstiIntRootCost=tlsMstiIntRootCost, custMultSvcSiteCurrentIngrSchedPlcy=custMultSvcSiteCurrentIngrSchedPlcy, hostConnectivityCiAddrType=hostConnectivityCiAddrType, svcDhcpLseStatePrimaryNbnsType=svcDhcpLseStatePrimaryNbnsType, CemSapEcid=CemSapEcid, ServType=ServType, custMssEgrQosSName=custMssEgrQosSName, LspIdList=LspIdList, tlsFdbEndPointName=tlsFdbEndPointName, svcPersistencyProblem=svcPersistencyProblem, svcDhcpLseStateDhcpClientAddr=svcDhcpLseStateDhcpClientAddr, svcEndPointTxActiveUpTime=svcEndPointTxActiveUpTime, svcCustId=svcCustId, svcTlsStpHelloTime=svcTlsStpHelloTime, tlsMFibInfoSrcAddr=tlsMFibInfoSrcAddr, svcPEDiscPolServerRowStatus=svcPEDiscPolServerRowStatus, iesIfDeleted=iesIfDeleted, tlsMstiPriority=tlsMstiPriority, svcDhcpPacketProblem=svcDhcpPacketProblem, svcDhcpLseStateDefaultRouter=svcDhcpLseStateDefaultRouter, svcTlsMfibTableFullAlarmCleared=svcTlsMfibTableFullAlarmCleared, custIngQosPortSchedFwdOctets=custIngQosPortSchedFwdOctets, newRootVcpState=newRootVcpState, tmnxSvcObjRowDescr=tmnxSvcObjRowDescr, svcEndPointTxActiveType=svcEndPointTxActiveType, svcVpnId=svcVpnId, svcEndPointMacLimitAlarmCleared=svcEndPointMacLimitAlarmCleared, svcEpipePbbEntry=svcEpipePbbEntry, tlsRdntGrpLastMgmtChange=tlsRdntGrpLastMgmtChange, tlsPipMstiEntry=tlsPipMstiEntry, custIngSchedPlcyStatsFwdOct=custIngSchedPlcyStatsFwdOct, svcAutoBind=svcAutoBind, svcRadiusPEDiscPolicy=svcRadiusPEDiscPolicy, svcTlsBgpADImportRteTarget=svcTlsBgpADImportRteTarget, custIngSchedPlcyPortStatsFwdOct=custIngSchedPlcyPortStatsFwdOct, tmnxSvcNotifyObjs=tmnxSvcNotifyObjs, svcTlsFdbNumEntries=svcTlsFdbNumEntries, custEgrQosPortSchedFwdPkts=custEgrQosPortSchedFwdPkts, svcTlsStpDesignatedRoot=svcTlsStpDesignatedRoot, tmnxSvcCompliances=tmnxSvcCompliances, tmnxSvcTlsEgrV6v0Group=tmnxSvcTlsEgrV6v0Group, svcDhcpLseStateLocale=svcDhcpLseStateLocale, tlsMstiInstanceId=tlsMstiInstanceId, tlsDhcpLseStateNewChAddr=tlsDhcpLseStateNewChAddr, iesIfVpnId=iesIfVpnId, tlsFdbProtected=tlsFdbProtected, svcPEDiscoveryPolicyPassword=svcPEDiscoveryPolicyPassword, svcDhcpLseStateFramedIpNetMaskTp=svcDhcpLseStateFramedIpNetMaskTp, svcTlsBgpADVsiExportPolicy5=svcTlsBgpADVsiExportPolicy5, svcTlsBgpADRowStatus=svcTlsBgpADRowStatus, custIngSchedPlcyPortStatsPort=custIngSchedPlcyPortStatsPort, iesIfName=iesIfName, tlsPipStpOutMstBpdus=tlsPipStpOutMstBpdus, svcTlsStpHoldTime=svcTlsStpHoldTime, svcEndPointTxActiveEncap=svcEndPointTxActiveEncap, vcpActiveProtocolChange=vcpActiveProtocolChange, svcDhcpLseStateModifySlaProfile=svcDhcpLseStateModifySlaProfile, ServObjLongDesc=ServObjLongDesc, tlsFdbInfoTable=tlsFdbInfoTable, svcTraps=svcTraps, svcDhcpLseStateIAID=svcDhcpLseStateIAID, svcTlsBgpADVsiRD=svcTlsBgpADVsiRD, svcIfDHCP6MsgStatsRcvd=svcIfDHCP6MsgStatsRcvd, tmnxSvcPEDiscPolServOperStatChg=tmnxSvcPEDiscPolServOperStatChg, custIngQosPortIdSchedName=custIngQosPortIdSchedName, tmnxSvc7450V6v0Compliance=tmnxSvc7450V6v0Compliance, TStpPortState=TStpPortState, tlsMstiLastMgmtChange=tlsMstiLastMgmtChange, svcTlsStpCistRegionalRoot=svcTlsStpCistRegionalRoot, tlsPipStpInMstBpdus=tlsPipStpInMstBpdus, svcMgmtVpls=svcMgmtVpls, tlsMFibInfoLocale=tlsMFibInfoLocale, svcTlsShcvInterval=svcTlsShcvInterval, svcVllType=svcVllType, svcTlsBackboneSrcMac=svcTlsBackboneSrcMac, ServObjName=ServObjName, tlsEgrMcGrpLastMgmtChange=tlsEgrMcGrpLastMgmtChange, custIngSchedPlcyPortStatsFwdPkt=custIngSchedPlcyPortStatsFwdPkt, custMultSvcSiteFrameBasedAccnt=custMultSvcSiteFrameBasedAccnt, tlsEgrMcGrpChainLimit=tlsEgrMcGrpChainLimit, svcNumEntries=svcNumEntries, svcDhcpLseStateOriginLeaseInfo=svcDhcpLseStateOriginLeaseInfo, tlsPipStpOperStatus=tlsPipStpOperStatus, tlsRdntGrpMemberRowStatus=tlsRdntGrpMemberRowStatus, svcTlsBgpADLastChanged=svcTlsBgpADLastChanged, custMssIngQosSName=custMssIngQosSName, svcDhcpLseStateEvaluateState=svcDhcpLseStateEvaluateState, tlsPipStpOutRstBpdus=tlsPipStpOutRstBpdus, tmnxSvcObjRow=tmnxSvcObjRow, tmnxSvcEndPointV6v0Group=tmnxSvcEndPointV6v0Group, custEgrQosPortIdSchedStatsEntry=custEgrQosPortIdSchedStatsEntry, svcBaseInfoEntry=svcBaseInfoEntry, svcRadiusDiscoveryShutdown=svcRadiusDiscoveryShutdown, tlsMFibSdpId=tlsMFibSdpId, svcTlsStpVersion=svcTlsStpVersion, svcDhcpLseStatePrimaryDns=svcDhcpLseStatePrimaryDns, macPinningViolatingRowDescr=macPinningViolatingRowDescr, tlsShgInstanceId=tlsShgInstanceId, tmnxSvcV6v0Group=tmnxSvcV6v0Group, custLastMgmtChange=custLastMgmtChange, tlsMFibSrcInetAddr=tlsMFibSrcInetAddr, TdmOptionsCasTrunkFraming=TdmOptionsCasTrunkFraming, tlsFdbEncapValue=tlsFdbEncapValue, tlsMstiRegionalRoot=tlsMstiRegionalRoot, custMultSvcSiteIntendedIngrSchedPlcy=custMultSvcSiteIntendedIngrSchedPlcy, tlsPipStpInConfigBpdus=tlsPipStpInConfigBpdus, svcTlsBgpADTableLastChanged=svcTlsBgpADTableLastChanged, tlsMFibEntry=tlsMFibEntry, svcTlsMfibTableSize=svcTlsMfibTableSize, svcType=svcType, tstpTraps=tstpTraps, MfibLocation=MfibLocation, ConfigStatus=ConfigStatus, iesIfTable=iesIfTable, svcDhcpLseStateVcId=svcDhcpLseStateVcId, svcTlsMrpAttrTblFullAlarmRaised=svcTlsMrpAttrTblFullAlarmRaised, tlsShgRestProtSrcMac=tlsShgRestProtSrcMac, StpPortRole=StpPortRole, svcTlsBackboneVplsSvcISID=svcTlsBackboneVplsSvcISID, svcWholesalerInfoTable=svcWholesalerInfoTable, custEgrQosPortSchedFwdOctets=custEgrQosPortSchedFwdOctets, svcTlsMacMoveMaxRate=svcTlsMacMoveMaxRate, tmnxSvcTlsBackbone6v0Group=tmnxSvcTlsBackbone6v0Group, MstiInstanceId=MstiInstanceId, tlsMFibInfoGrpAddr=tlsMFibInfoGrpAddr, svcTlsMcPathMgmtPlcyName=svcTlsMcPathMgmtPlcyName, svcDhcpLseStateServerLeaseEnd=svcDhcpLseStateServerLeaseEnd, svcFdbMimDestTblFullAlrm=svcFdbMimDestTblFullAlrm, tlsPipMstiDesignatedBridge=tlsPipMstiDesignatedBridge, svcTlsBackboneVplsStp=svcTlsBackboneVplsStp, svcTlsMrpFailedRegisterCount=svcTlsMrpFailedRegisterCount, svcDhcpLseStateSecondaryDns=svcDhcpLseStateSecondaryDns, tlsPipInfoTable=tlsPipInfoTable, svcDhcpLseStateServerLeaseStart=svcDhcpLseStateServerLeaseStart, custIngQosPortIdSchedStatsEntry=custIngQosPortIdSchedStatsEntry, pipActiveProtocolChange=pipActiveProtocolChange, PWTemplateId=PWTemplateId, tlsDhcpPacketProblem=tlsDhcpPacketProblem, tlsMFibStatsGrpInetAddr=tlsMFibStatsGrpInetAddr, TQosQueueAttribute=TQosQueueAttribute, svcPEDiscoveryPolicyTable=svcPEDiscoveryPolicyTable, SdpId=SdpId, custInfoEntry=custInfoEntry, tlsEgrMcGrpIpv6FilterId=tlsEgrMcGrpIpv6FilterId, custTraps=custTraps, svcMstiInstanceId=svcMstiInstanceId, svcAdminStatus=svcAdminStatus, iesIfDescription=iesIfDescription, svcDhcpLseStatePortId=svcDhcpLseStatePortId, tlsDhcpLseStatePopulateError=tlsDhcpLseStatePopulateError, svcDhcpLseStateNewCiAddr=svcDhcpLseStateNewCiAddr, svcEndPointRowStatus=svcEndPointRowStatus, custMultSvcSiteScope=custMultSvcSiteScope, svcTlsBgpADVsiExportPolicy1=svcTlsBgpADVsiExportPolicy1, svcEndPointTxActivePortId=svcEndPointTxActivePortId, svcDhcpManagedRouteInetAddrType=svcDhcpManagedRouteInetAddrType, svcDhcpManagedRouteInetAddr=svcDhcpManagedRouteInetAddr, tmnxTstpGroups=tmnxTstpGroups, custMssIngQosSSummedCIR=custMssIngQosSSummedCIR, svcTlsMrpAttrTblHighWatermark=svcTlsMrpAttrTblHighWatermark, tmnxSvcNotifyV6v0Group=tmnxSvcNotifyV6v0Group, tmnxFailureDescription=tmnxFailureDescription, custMultiSvcSiteEgrSchedPlcyPortStatsTable=custMultiSvcSiteEgrSchedPlcyPortStatsTable, svcDhcpLseStateShcvReplies=svcDhcpLseStateShcvReplies, svcDhcpLseStateOriginSubscrId=svcDhcpLseStateOriginSubscrId, tlsMFibGrpInetAddr=tlsMFibGrpInetAddr)
