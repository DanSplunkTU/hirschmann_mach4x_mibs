#
# PySNMP MIB module PROTECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/PROTECTION-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:37:30 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SagemBoolean, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "Severity")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, Gauge32, ModuleIdentity, NotificationType, Counter64, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "ModuleIdentity", "NotificationType", "Counter64", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "IpAddress", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
protection = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 130))
if mibBuilder.loadTexts: protection.setLastUpdated('9911290000Z')
if mibBuilder.loadTexts: protection.setOrganization('SAGEM-Tolbiac drd/ddp/tmhd')
if mibBuilder.loadTexts: protection.setContactInfo('   ')
if mibBuilder.loadTexts: protection.setDescription(' This MIB describe protection mechanisms used by SDH equipment')
msp = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 130, 10))
msSPRing = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 130, 20))
sncp = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 130, 30))
cardp = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 130, 40))
class TrafficStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("working", 1), ("protection", 2))

class MspInitiator(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("local", 1), ("remote", 2))

class MspFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6))
    namedValues = NamedValues(("none", 0), ("pam", 1), ("scm", 2), ("otm", 4), ("scmOtm", 6))

class MspPriority(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("highG783", 1), ("low", 2))

class MspStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(15, 14, 13, 12, 11, 10, 8, 6, 4, 2, 1, 0))
    namedValues = NamedValues(("lockoutProtection", 15), ("forcedSwitch", 14), ("highSF", 13), ("lowSF", 12), ("highSD", 11), ("lowSD", 10), ("manualSwitch", 8), ("waitToRestore", 6), ("exercise", 4), ("reverseRequest", 2), ("doNotRevert", 1), ("noRequest", 0))

class MspType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("onePlusOneOptimized", 1), ("onePlusOneCompatible", 2), ("oneForN", 3))

class MspDirection(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("unidirectionnal", 1), ("bidirectionnal", 2))

class MspCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("clear", 0), ("lw", 1), ("lp", 2), ("fsW", 3), ("fsP", 4), ("msW", 5), ("msP", 6), ("exer", 7))

mspNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 130, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspNumber.setStatus('current')
if mibBuilder.loadTexts: mspNumber.setDescription('Number of multiplex section protection in equipment.')
mspTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2), )
if mibBuilder.loadTexts: mspTable.setStatus('current')
if mibBuilder.loadTexts: mspTable.setDescription('List of multiplex section protection in equipment.')
mspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1), ).setIndexNames((0, "PROTECTION-MIB", "mspIndex"))
if mibBuilder.loadTexts: mspEntry.setStatus('current')
if mibBuilder.loadTexts: mspEntry.setDescription('A particular multiplex section protection of the equipment.\n     Each entry is created in using the msTTPTable of the Sdh-Ets MIB.')
mspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspIndex.setStatus('current')
if mibBuilder.loadTexts: mspIndex.setDescription('A unique value which identify a particular\tmultiplex section protection.\n\t This index is equal to an msTTPIndex(=spiIndex) which gives the interface involved . \n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. It is usualy related to harware.')
mspWorkingPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspWorkingPointer.setStatus('current')
if mibBuilder.loadTexts: mspWorkingPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on working synchronous port interface side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe working MST it is hard wired with.')
mspProtectionPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspProtectionPointer.setStatus('current')
if mibBuilder.loadTexts: mspProtectionPointer.setDescription("A reference to the object which sends the data flow to this\n\tfunction on protection synchronous port interface side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe protection MST it is hard wired with.\n\tWhen this variable is setting, the protection is created and activated (if it's possible).\n\tThe two considerated sections must have the same Stm Level. ")
mspType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 4), MspType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspType.setStatus('current')
if mibBuilder.loadTexts: mspType.setDescription('Indication of the protection type.')
mspDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 5), MspDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspDir.setStatus('current')
if mibBuilder.loadTexts: mspDir.setDescription('Indication of the direction.')
mspTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 6), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspTraffic.setStatus('current')
if mibBuilder.loadTexts: mspTraffic.setDescription('The value of this field indicates the protection switch position.')
mspRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspRevertive.setStatus('current')
if mibBuilder.loadTexts: mspRevertive.setDescription('If the value is true the msp function is allowed to spontaneously\n\tswitch back to working chanel when it is available.\n\tIf not, the msp can switch back to working chanel only if\n\tprotection chanel fails.')
mspWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspWtr.setStatus('current')
if mibBuilder.loadTexts: mspWtr.setDescription('The time (in seconds) the msp function waits before\n\tconsidering a chanel as good after a fail.')
mspSfSdPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 9), MspPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspSfSdPriority.setStatus('current')
if mibBuilder.loadTexts: mspSfSdPriority.setDescription('Signal Fail and Signal Degrade can be treated according to two set\n\tof priority. The equipement will send SF and SD events according to\n\tthe value of this field.')
mspSfSdHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspSfSdHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: mspSfSdHoldOffTime.setDescription('The period (in tenth of seconds) during which a\n\tsf or a Signal Degrade is\n\tignored by the MSP switch.')
mspCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 11), MspCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspCommand.setStatus('current')
if mibBuilder.loadTexts: mspCommand.setDescription('Manual or forced commands can be apply to the protection switch.\n\tThe forced and manual switch can be refused or cleared by equipment\n\tif a higher priority APS command is received or if the protection chanel\n\tis down.\n\tWhen this field is set to manual or forced, the mspTraffic field\n\tbecomes read-write, and a set can be issued to specifie on which\n\tchanel the command does apply.\n\tCommands: \n \t\tLP (Lockout of Protection) \n \t\tLW (Lockout of Working channel)\n \t\tFSW (Forced Switch of a Working channel to protection)\n \t\tFSP (Forced Switch of a Protection channel to working) case 1+1\n \t\tMSW (Manual Switch of a Working channel to protection)\n \t\tMSp (Manual Switch of a Protection channel to working) case 1+1 \n \t\tEXER (EXERcise)\n\t')
mspInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 12), MspInitiator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspInitiator.setStatus('current')
if mibBuilder.loadTexts: mspInitiator.setDescription('Indicates the initiator equipment.')
mspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 13), MspStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspStatus.setStatus('current')
if mibBuilder.loadTexts: mspStatus.setDescription('Indicates the initiator equipment status :\n\t \tlockoutProtection(15),\n\t \tforcedSwitch(14),\n\t \thighSF(13),\n\t \tlowSF(12),\n\t \thighSD(11),\n\t \tlowSD(10),\n\t\tmanualSwitch(8),\n\t\twaitToRestore(6),\n\t\texercise(4),\n\t\treverseRequest(2),\n\t\tdoNotRevert(1),\n\t\tnoRequest(0)\t')
mspMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 14), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspMonitor.setStatus('current')
if mibBuilder.loadTexts: mspMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this multiplex section protection.')
mspFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 15), MspFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspFailure.setStatus('current')
if mibBuilder.loadTexts: mspFailure.setDescription('Active failures on multiplex section protection.')
mspSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 16), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mspSeverity.setStatus('current')
if mibBuilder.loadTexts: mspSeverity.setDescription('A reference to failure severity for multiplex section protection.')
mspPam = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 20), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspPam.setStatus('current')
if mibBuilder.loadTexts: mspPam.setDescription('Severity associed with Protection Architecture Mismatch failure\n\tfor multiplex section protection.')
mspScm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspScm.setStatus('current')
if mibBuilder.loadTexts: mspScm.setDescription('Severity associed with Selector Control Mismatch failure\n\tfor multiplex section protection.')
mspOtm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 10, 2, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mspOtm.setStatus('current')
if mibBuilder.loadTexts: mspOtm.setDescription('Severity associed with Operation Type Mismatch failure\n\tfor multiplex section protection.')
class MsSPRingFailure(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("ato", 1), ("arv", 2), ("aun", 3), ("ptm", 4), ("mms", 5), ("exr", 6))

class MsSPRingStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(19, 15, 13, 11, 8, 6, 5, 3, 1, 0))
    namedValues = NamedValues(("off", 19), ("lockoutProtection", 15), ("forcedSwitchR", 13), ("sfR", 11), ("sdR", 8), ("manualSwitchR", 6), ("waitToRestore", 5), ("exerR", 3), ("reverseRequestR", 1), ("noRequest", 0))

class MsSPRingCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 15, 13, 6, 3, 20, 19))
    namedValues = NamedValues(("clear", 16), ("lpS", 15), ("fsR", 13), ("msR", 6), ("exerR", 3), ("on", 20), ("off", 19))

class MsSPRingID(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 255))
    namedValues = NamedValues(("node0", 0), ("node1", 1), ("node2", 2), ("node3", 3), ("node4", 4), ("node5", 5), ("node6", 6), ("node7", 7), ("node8", 8), ("node9", 9), ("node10", 10), ("node11", 11), ("node12", 12), ("node13", 13), ("node14", 14), ("node15", 15), ("nodeUNK", 255))

class State(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("off", 0), ("idle", 1), ("pass", 2), ("switch", 3), ("unknown", 4))

msSPRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 130, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingNumber.setStatus('current')
if mibBuilder.loadTexts: msSPRingNumber.setDescription('Number of multiplex section protection in equipment.')
msSPRingTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6), )
if mibBuilder.loadTexts: msSPRingTable.setStatus('current')
if mibBuilder.loadTexts: msSPRingTable.setDescription('List of multiplex section protection in equipment.')
msSPRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1), ).setIndexNames((0, "PROTECTION-MIB", "msSPRingIndex"))
if mibBuilder.loadTexts: msSPRingEntry.setStatus('current')
if mibBuilder.loadTexts: msSPRingEntry.setDescription('A particular multiplex section protection of the equipment.\n     Each entry is created in using the msTTPTable of the Sdh-Ets MIB.\n\t spiIndex gives the interface involved (line east or west)')
msSPRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingIndex.setStatus('current')
if mibBuilder.loadTexts: msSPRingIndex.setDescription('A unique value which identify a particular\tSPRing = West STM index.')
msSPRingWestPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingWestPointer.setStatus('current')
if mibBuilder.loadTexts: msSPRingWestPointer.setDescription('A reference to the object which sends the data flow to this\n\tfunction on  synchronous port interface side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe West MST it is hard wired with.')
msSPRingEastPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingEastPointer.setStatus('current')
if mibBuilder.loadTexts: msSPRingEastPointer.setDescription("A reference to the object which sends the data flow to this\n\tfunction on  synchronous port interface side.\n\tIn most equipments, this value cannot be changed and points to\n\tthe East MST it is hard wired with.\n\tWhen this variable is setting, the protection is created and activated (if it's possible).\n\tThe two considerated sections must have the same Stm Level.")
msSPRingWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingWtr.setStatus('current')
if mibBuilder.loadTexts: msSPRingWtr.setDescription('The time (in seconds) the spring function waits before\n\tconsidering a chanel as good after a fail.')
msSPRingSfSdHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingSfSdHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: msSPRingSfSdHoldOffTime.setDescription('The period (in tenth of seconds) during which a\n\tsf or a Signal Degrade is ignored by the SPRing switch.')
msSPRingCommandSide = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingCommandSide.setStatus('current')
if mibBuilder.loadTexts: msSPRingCommandSide.setDescription('Side of the command')
msSPRingCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 8), MsSPRingCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingCommand.setStatus('current')
if mibBuilder.loadTexts: msSPRingCommand.setDescription('Manual or forced commands can be apply to the protection switch.\n\t')
msSPRingInitiator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 10), MsSPRingID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingInitiator1.setStatus('current')
if mibBuilder.loadTexts: msSPRingInitiator1.setDescription('A reference(ID) to the equipment that initiate the SWITCH; this is mainly the Master\n\twhen the equipment is in SWITCH state; in some case like bidirectional SF both equipment\n\t of the couple equipment are Master.\n\t In PASS state Master and Slave are undeterminated')
msSPRingInitiator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 11), MsSPRingID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingInitiator2.setStatus('current')
if mibBuilder.loadTexts: msSPRingInitiator2.setDescription('A reference(ID) to the equipment that respond to the SWITCH; this is mainly the Slave\n\twhen the equipment is in SWITCH state; in some case like bidirectional SF both equipment\n\t of the couple equipment are Master.\n\t In PASS state Master and Slave are undeterminated')
msSPRingNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 29), State()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingNodeState.setStatus('current')
if mibBuilder.loadTexts: msSPRingNodeState.setDescription('')
msSPRingSwitchingSide = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingSwitchingSide.setStatus('current')
if mibBuilder.loadTexts: msSPRingSwitchingSide.setDescription('Switching SideSide')
msSPRingWestTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 31), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingWestTraffic.setStatus('current')
if mibBuilder.loadTexts: msSPRingWestTraffic.setDescription('The value of this field indicates the protection switch position.')
msSPRingEastTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 32), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingEastTraffic.setStatus('current')
if mibBuilder.loadTexts: msSPRingEastTraffic.setDescription('The value of this field indicates the protection switch position.')
msSPRingWestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 33), MsSPRingStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingWestStatus.setStatus('current')
if mibBuilder.loadTexts: msSPRingWestStatus.setDescription('Indicates the local status:\n\tOFF (19), lockoutProtection (16), forcedSwitch-R(13),sf-R(11),sd-R(8),\n\tmanualSwitch-R(6),\n\twaitToRestore(5),exer-R(3),noRequest(0)')
msSPRingEastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 34), MsSPRingStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingEastStatus.setStatus('current')
if mibBuilder.loadTexts: msSPRingEastStatus.setDescription('Indicates the local status:\n\tOFF (19), lockoutProtection (16), forcedSwitch-R(13),sf-R(11),sd-R(8),\n\tmanualSwitch-R(6),\n\twaitToRestore(5),exer-R(3),noRequest(0)')
msSPRingMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 12), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMonitor.setStatus('current')
if mibBuilder.loadTexts: msSPRingMonitor.setDescription('When the value of this field is set to false, the failure detection\n\tis stopped for this multiplex section protection.')
msSPRingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 13), MsSPRingFailure()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingFailure.setStatus('current')
if mibBuilder.loadTexts: msSPRingFailure.setDescription('Active failures on multiplex section protection')
msSPRingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 14), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingSeverity.setStatus('current')
if mibBuilder.loadTexts: msSPRingSeverity.setDescription('A reference to failure severity for multiplex section protection.')
msSPRingAto = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 21), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingAto.setStatus('current')
if mibBuilder.loadTexts: msSPRingAto.setDescription('Severity associed with APS Time Out failure failure\n\tfor MS-SPRing.')
msSPRingArv = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 22), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingArv.setStatus('current')
if mibBuilder.loadTexts: msSPRingArv.setDescription('Severity associed with APS Rules Violation failure failure\n\tfor MS-SPRing.')
msSPRingAun = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 23), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingAun.setStatus('current')
if mibBuilder.loadTexts: msSPRingAun.setDescription('Severity associed with APS Unknown Node failure failure\n\tfor MS-SPRing.')
msSPRingPtm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 24), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingPtm.setStatus('current')
if mibBuilder.loadTexts: msSPRingPtm.setDescription('Severity associed with Potential Traffic Misconnection failure\n\tfor MS-SPRing.')
msSPRingMms = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 25), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMms.setStatus('current')
if mibBuilder.loadTexts: msSPRingMms.setDescription('Severity associed with Mutiple Multiplex Section Fail failure\n\tfor MS-SPRing.')
msSPRingExr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 26), Severity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingExr.setStatus('current')
if mibBuilder.loadTexts: msSPRingExr.setDescription('Severity associed with EXeRcise failure\n\tfor MS-SPRing.')
msSPRingSimpleFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 27), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingSimpleFailure.setStatus('current')
if mibBuilder.loadTexts: msSPRingSimpleFailure.setDescription('Indicate if simple or multi ring failure must be considerated')
msSPRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 6, 1, 28), MsSPRingID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingId.setStatus('current')
if mibBuilder.loadTexts: msSPRingId.setDescription('Ring Identifier of the equipement')
msSPRingTopoMapTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 20, 11), )
if mibBuilder.loadTexts: msSPRingTopoMapTable.setStatus('current')
if mibBuilder.loadTexts: msSPRingTopoMapTable.setDescription('Topology Map of the ring = West STM index + Val (1<=Val<=16).')
msSPRingTopoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 20, 11, 1), ).setIndexNames((0, "PROTECTION-MIB", "msSPRingTopoMapIndex"))
if mibBuilder.loadTexts: msSPRingTopoMapEntry.setStatus('current')
if mibBuilder.loadTexts: msSPRingTopoMapEntry.setDescription('A particular entry of the ring topology map.')
msSPRingTopoMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingTopoMapIndex.setStatus('current')
if mibBuilder.loadTexts: msSPRingTopoMapIndex.setDescription('index')
msSPRingTopoMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 11, 1, 2), MsSPRingID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingTopoMapID.setStatus('current')
if mibBuilder.loadTexts: msSPRingTopoMapID.setDescription('identifier of the node')
class MisconMapType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("terminated", 1), ("passedThrough", 2))

class MsSPRingSide(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("west", 0), ("east", 1), ("unknown", 2))

msSPRingMisconMapTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21), )
if mibBuilder.loadTexts: msSPRingMisconMapTable.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapTable.setDescription('Connectivity (misconnection) Map of the ring.')
msSPRingMisconMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1), ).setIndexNames((0, "PROTECTION-MIB", "msSPRingMisconMapIndex"))
if mibBuilder.loadTexts: msSPRingMisconMapEntry.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapEntry.setDescription('A particular entry of the ring connectivity (misconnection) map. \n     All entries are created after setting the msSPRingWestPointer.')
msSPRingMisconMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingMisconMapIndex.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapIndex.setDescription('Index = West STM index + Val (1<=Val<=16) \n\tADR2500c : val = 1 to 8 for West and 9 to 16 for East')
msSPRingMisconMapSide = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 2), MsSPRingSide()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingMisconMapSide.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapSide.setDescription('Side (WestPointer/msSPRingEast) of the interface that supports the AU4')
msSPRingMisconMapIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 3), MsSPRingID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMisconMapIn.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapIn.setDescription('Node of the ring where the Au4 traffic enters the ring')
msSPRingMisconMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 4), MsSPRingID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMisconMapOut.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapOut.setDescription('Node of the ring where the Au4 traffic exits the ring')
msSPRingMisconMapTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMisconMapTimeSlot.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapTimeSlot.setDescription('Time Slot assignment for the AU4')
msSPRingMisconMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 6), MisconMapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMisconMapType.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapType.setDescription('If the value is equal to terminated, the traffic in the ring is inserted \n\tor extracted at this node.\n\tIf the value is equal to passedThrough the traffic only cross the node')
msSPRingMisconMapLOAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 21, 1, 7), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingMisconMapLOAccess.setStatus('current')
if mibBuilder.loadTexts: msSPRingMisconMapLOAccess.setDescription('True if the AU4 is accessed at LO layers somewhere in the ring')
msSPRingNUTTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 20, 31), )
if mibBuilder.loadTexts: msSPRingNUTTable.setStatus('current')
if mibBuilder.loadTexts: msSPRingNUTTable.setDescription('Topology Map of the ring.')
msSPRingNUTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 20, 31, 1), ).setIndexNames((0, "PROTECTION-MIB", "msSPRingNUTIndex"))
if mibBuilder.loadTexts: msSPRingNUTEntry.setStatus('current')
if mibBuilder.loadTexts: msSPRingNUTEntry.setDescription('A particular entry of the ring topology map.')
msSPRingNUTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: msSPRingNUTIndex.setStatus('current')
if mibBuilder.loadTexts: msSPRingNUTIndex.setDescription('AU4 index = West STM index + Val (Val = working timeSlot; 1<=Val<=8)')
msSPRingNUTisNut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 20, 31, 1, 2), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msSPRingNUTisNut.setStatus('current')
if mibBuilder.loadTexts: msSPRingNUTisNut.setDescription('Define if the traffic is used for NUT Traffic')
class LinkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 10, 20))
    namedValues = NamedValues(("unknown", 0), ("au", 1), ("au4c", 2), ("au16c", 3), ("tu3", 10), ("tu12", 20))

class TriggerCriterion(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("sncI", 1), ("sncN", 2), ("sncIRdi", 3), ("sncNRdi", 4))

class SNCStateProcess(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("nrnormal", 0), ("nrsecours", 1), ("wtr", 2), ("dontRev", 3), ("mssecours", 4), ("msnormal", 5), ("sdnormal", 6), ("sdsecours", 7), ("sfnormal", 8), ("fssecours", 9), ("sfsecours", 10), ("fsnormal", 11), ("lockout", 12))

class SNCCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 19, 20))
    namedValues = NamedValues(("clear", 0), ("manualWorking", 1), ("manualProtection", 2), ("forcedWorking", 3), ("forcedProtection", 4), ("lockout", 5), ("off", 19), ("on", 20))

sncNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 130, 30, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncNumber.setStatus('current')
if mibBuilder.loadTexts: sncNumber.setDescription('Number of snc in equipment.')
sncTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2), )
if mibBuilder.loadTexts: sncTable.setStatus('current')
if mibBuilder.loadTexts: sncTable.setDescription('List of snc protection in equipment.')
sncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1), ).setIndexNames((0, "PROTECTION-MIB", "sncIndex"))
if mibBuilder.loadTexts: sncEntry.setStatus('current')
if mibBuilder.loadTexts: sncEntry.setDescription('A particular SNC protection which is created in using the linkTable of the Xconnection MIB.')
sncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncIndex.setStatus('current')
if mibBuilder.loadTexts: sncIndex.setDescription('sncIndex = 1000*sncType + sncTTPSink = linkIndex')
sncCTPSink = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCTPSink.setStatus('current')
if mibBuilder.loadTexts: sncCTPSink.setDescription('The value of this field is the index of the Output Connection to which\n   an snc function is applied.')
sncLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 3), LinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncLinkType.setStatus('current')
if mibBuilder.loadTexts: sncLinkType.setDescription('Trail level of the connection')
sncCTPSourceW = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncCTPSourceW.setStatus('current')
if mibBuilder.loadTexts: sncCTPSourceW.setDescription('The value of this field indicates the Working Input Connection Point  which\n   composes the protection link of the Output Connection Point (sncIndex).')
sncCTPSourceP = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncCTPSourceP.setStatus('current')
if mibBuilder.loadTexts: sncCTPSourceP.setDescription("The value of this field indicates the Protected Input Connection Point  which\n   composes the protection link of the Output Connection Point (sncIndex). \n   When this variable is setting, the protection is created and activated (if it's possible). ")
sncTrafficStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 6), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncTrafficStatus.setStatus('current')
if mibBuilder.loadTexts: sncTrafficStatus.setDescription('This field indicates the Protection unit switch position.')
sncWorkingTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 8), TriggerCriterion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncWorkingTriggerType.setStatus('current')
if mibBuilder.loadTexts: sncWorkingTriggerType.setDescription(' The value of this field is the criterion to trigger a switch for the Working Input   \n   Connection Point.SNC/I uses SF criterion for switching: TU-AIS/TU-LOP for VC12/VC3 ,\n   AU-AIS/AU-LOP for VC4 and , by extension, ppiLOS and ppiAIS for pdh inputs.\n   SNC/N uses also SD criterion for switching: SD-V5 for VC12, \n   SD-B3 for VC3/VC4.\n   SNC+LAN adds MS-RDI as switching criterion for LAN connection.\n   NONE means that just board extractions and some board failures activate switching.')
sncProtectionTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 9), TriggerCriterion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncProtectionTriggerType.setStatus('current')
if mibBuilder.loadTexts: sncProtectionTriggerType.setDescription(' The value of this field is the criterion to trigger a switch for the Protection Input   \n   Connection Point. SNC/I uses SF criterion for switching: TU-AIS/TU-LOP for VC12/VC3 ,\n   AU-AIS/AU-LOP for VC4 and , by extension, ppiLOS and ppiAIS for pdh inputs.\n   SNC/N uses also SD criterion for switching: SD-V5 for VC12, \n   SD-B3 for VC3/VC4.\n   SNC+LAN adds MS-RDI as switching criterion for LAN connection.\n   NONE means that just board extractions and some board failures activate switching.')
sncRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 20), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncRevertive.setStatus('current')
if mibBuilder.loadTexts: sncRevertive.setDescription('If the value is true the Protection unit function is allowed\n \tto spontaneously switch back to working chanel when it is available.\n\tIf not, the snc can switch back to working chanel only if\n\tprotection chanel fails.')
sncWtr = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncWtr.setStatus('current')
if mibBuilder.loadTexts: sncWtr.setDescription('The time (in seconds) the Protection unit function waits before\n\tconsidering a chanel as good after a fail.')
sncStateProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 22), SNCStateProcess()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncStateProcess.setStatus('current')
if mibBuilder.loadTexts: sncStateProcess.setDescription(' The value of this field indicates the state of the snc protection process.')
sncHoldOffTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncHoldOffTime.setStatus('current')
if mibBuilder.loadTexts: sncHoldOffTime.setDescription('The time in tenth of seconds during which a protection trigger criterion is\n\tignored.')
sncCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 30, 2, 1, 24), SNCCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sncCommand.setStatus('current')
if mibBuilder.loadTexts: sncCommand.setDescription('Manual or forced commands can be apply to the protection unit.\n\tThe forced and manual switch can be refused or cleared by equipment\n\tif a higher priority evenement is received or if the protection chanel\n\tis down.')
class CardpFamily(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("switch", 1))

class CardpCommand(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("clear", 0), ("manualSwitch", 1))

class CardpStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notSwitched", 0), ("manualSwitch", 1), ("automaticSwitch", 2))

cardpNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 130, 40, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardpNumber.setStatus('current')
if mibBuilder.loadTexts: cardpNumber.setDescription('Number of card protections in equipment.')
cardpTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2), )
if mibBuilder.loadTexts: cardpTable.setStatus('current')
if mibBuilder.loadTexts: cardpTable.setDescription('List of card protections in equipment.')
cardpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1), ).setIndexNames((0, "PROTECTION-MIB", "cardpIndex"))
if mibBuilder.loadTexts: cardpEntry.setStatus('current')
if mibBuilder.loadTexts: cardpEntry.setDescription('A particular card protection which is created in using the boardTable of the Shelf MIB.')
cardpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardpIndex.setStatus('current')
if mibBuilder.loadTexts: cardpIndex.setDescription('cardpIndex = boardIndex in the Shelf Mib. \n   This index points to the working board.')
cardpBoardFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 2), CardpFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardpBoardFamily.setStatus('current')
if mibBuilder.loadTexts: cardpBoardFamily.setDescription('This field indicates the family of board concerned by the protection.')
cardpReliefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardpReliefIndex.setStatus('current')
if mibBuilder.loadTexts: cardpReliefIndex.setDescription("A reference to the relief card. It must be an existing index in the boardTable of Shelf Mib.\n   The relief card and the protected Card must below to the same familly.\n   \tWhen this variable is setting, the protection is created and activated (if it's possible).")
cardpTrafficStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 4), TrafficStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardpTrafficStatus.setStatus('current')
if mibBuilder.loadTexts: cardpTrafficStatus.setDescription('Indication of the protection switch position.')
cardpCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 5), CardpCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardpCommand.setStatus('current')
if mibBuilder.loadTexts: cardpCommand.setDescription('Manual commands can be apply to the protection unit.\n\tThe manual switch can be refused or cleared by equipment\n\tif a higher priority evenement is received or if the protection chanel\n\tis down.')
cardpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 130, 40, 2, 1, 6), CardpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardpStatus.setStatus('current')
if mibBuilder.loadTexts: cardpStatus.setDescription('Indication of the current protection status')
mibBuilder.exportSymbols("PROTECTION-MIB", msSPRingCommand=msSPRingCommand, cardp=cardp, sncCTPSink=sncCTPSink, msSPRingMisconMapLOAccess=msSPRingMisconMapLOAccess, mspInitiator=mspInitiator, cardpTable=cardpTable, msSPRingWestTraffic=msSPRingWestTraffic, msSPRing=msSPRing, mspIndex=mspIndex, mspPam=mspPam, mspSfSdHoldOffTime=mspSfSdHoldOffTime, MsSPRingFailure=MsSPRingFailure, msSPRingMisconMapTable=msSPRingMisconMapTable, msSPRingMisconMapEntry=msSPRingMisconMapEntry, msSPRingMisconMapIndex=msSPRingMisconMapIndex, msSPRingTable=msSPRingTable, msSPRingPtm=msSPRingPtm, msSPRingNumber=msSPRingNumber, msSPRingWtr=msSPRingWtr, sncNumber=sncNumber, sncCommand=sncCommand, msSPRingInitiator2=msSPRingInitiator2, cardpNumber=cardpNumber, msSPRingMonitor=msSPRingMonitor, msSPRingAun=msSPRingAun, cardpReliefIndex=cardpReliefIndex, msSPRingExr=msSPRingExr, mspProtectionPointer=mspProtectionPointer, cardpTrafficStatus=cardpTrafficStatus, mspOtm=mspOtm, msSPRingMisconMapType=msSPRingMisconMapType, msSPRingTopoMapIndex=msSPRingTopoMapIndex, msSPRingEastTraffic=msSPRingEastTraffic, MspInitiator=MspInitiator, sncEntry=sncEntry, MspCommand=MspCommand, LinkType=LinkType, MspFailure=MspFailure, mspSeverity=mspSeverity, msSPRingNUTisNut=msSPRingNUTisNut, msSPRingTopoMapEntry=msSPRingTopoMapEntry, SNCStateProcess=SNCStateProcess, mspFailure=mspFailure, sncRevertive=sncRevertive, cardpIndex=cardpIndex, SNCCommand=SNCCommand, msSPRingAto=msSPRingAto, TrafficStatus=TrafficStatus, msSPRingMisconMapIn=msSPRingMisconMapIn, mspEntry=mspEntry, msSPRingInitiator1=msSPRingInitiator1, MsSPRingSide=MsSPRingSide, State=State, sncWtr=sncWtr, mspWtr=mspWtr, msSPRingTopoMapID=msSPRingTopoMapID, msSPRingEntry=msSPRingEntry, cardpStatus=cardpStatus, msSPRingWestStatus=msSPRingWestStatus, msSPRingMms=msSPRingMms, MisconMapType=MisconMapType, msSPRingNodeState=msSPRingNodeState, msSPRingSeverity=msSPRingSeverity, msSPRingSimpleFailure=msSPRingSimpleFailure, msSPRingSwitchingSide=msSPRingSwitchingSide, MsSPRingStatus=MsSPRingStatus, MsSPRingID=MsSPRingID, msSPRingId=msSPRingId, mspCommand=mspCommand, MsSPRingCommand=MsSPRingCommand, msSPRingMisconMapOut=msSPRingMisconMapOut, mspType=mspType, sncLinkType=sncLinkType, sncProtectionTriggerType=sncProtectionTriggerType, CardpFamily=CardpFamily, msSPRingNUTTable=msSPRingNUTTable, cardpEntry=cardpEntry, sncTrafficStatus=sncTrafficStatus, mspTable=mspTable, msSPRingMisconMapTimeSlot=msSPRingMisconMapTimeSlot, msSPRingIndex=msSPRingIndex, sncCTPSourceW=sncCTPSourceW, mspStatus=mspStatus, mspMonitor=mspMonitor, msSPRingFailure=msSPRingFailure, mspWorkingPointer=mspWorkingPointer, msSPRingWestPointer=msSPRingWestPointer, msSPRingMisconMapSide=msSPRingMisconMapSide, cardpBoardFamily=cardpBoardFamily, protection=protection, mspRevertive=mspRevertive, msSPRingCommandSide=msSPRingCommandSide, cardpCommand=cardpCommand, PYSNMP_MODULE_ID=protection, MspDirection=MspDirection, sncHoldOffTime=sncHoldOffTime, msSPRingEastPointer=msSPRingEastPointer, TriggerCriterion=TriggerCriterion, sncStateProcess=sncStateProcess, sncp=sncp, mspScm=mspScm, MspPriority=MspPriority, msSPRingTopoMapTable=msSPRingTopoMapTable, sncCTPSourceP=sncCTPSourceP, CardpStatus=CardpStatus, msSPRingEastStatus=msSPRingEastStatus, mspNumber=mspNumber, MspStatus=MspStatus, sncWorkingTriggerType=sncWorkingTriggerType, mspTraffic=mspTraffic, mspSfSdPriority=mspSfSdPriority, mspDir=mspDir, sncTable=sncTable, msSPRingNUTIndex=msSPRingNUTIndex, msSPRingSfSdHoldOffTime=msSPRingSfSdHoldOffTime, msSPRingArv=msSPRingArv, msSPRingNUTEntry=msSPRingNUTEntry, MspType=MspType, msp=msp, sncIndex=sncIndex, CardpCommand=CardpCommand)
