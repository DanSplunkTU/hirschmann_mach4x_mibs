#
# PySNMP MIB module DMTF-SERVICE-LAYER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DMTF-SERVICE-LAYER-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:08:06 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dmiCompId, dmiEventSystem, dmiEventAssociatedGroup, DmiString, dmiEventDateTime, DmiDate, dmiEventSubSystem, dmiEventSeverity, dmiEventStateKey = mibBuilder.importSymbols("DMTF-DMI-MIB", "dmiCompId", "dmiEventSystem", "dmiEventAssociatedGroup", "DmiString", "dmiEventDateTime", "DmiDate", "dmiEventSubSystem", "dmiEventSeverity", "dmiEventStateKey")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks, Bits, MibIdentifier, enterprises, Integer32, Counter32, IpAddress, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "enterprises", "Integer32", "Counter32", "IpAddress", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfServiceLayerMIF = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 2, 1))
if mibBuilder.loadTexts: dmtfServiceLayerMIF.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmtfServiceLayerMIF.setOrganization('Desktop Management Task Force')
if mibBuilder.loadTexts: dmtfServiceLayerMIF.setContactInfo('         DMTF Technical Advisory Committee\n\n\t\t    Mailstop JF2-53\n                    2111 N.E. 25th Avenue\n                    Hillsboro, OR 97124\n\n\t\t    Phone: +1 503 264-9300\n                    Email: dmtf-info@dmtf.org\n          ')
if mibBuilder.loadTexts: dmtfServiceLayerMIF.setDescription('This MIB is a translation of the DMTF Service Layer MIF\n\t  defined by the Desktop Management Interface Specfiication,\n          based on the translation rules defined by the\n          DMTF DMI to SNMP Mapping Standard, Version 1.0.\n\n\t  DMI-based systems running a DMI-to-SNMP Mapping\n          Agent provide the ability to access DMI component\n          instrumentation via SNMP protocol operations.\n          ')
dmtfComponentIDTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 1), )
if mibBuilder.loadTexts: dmtfComponentIDTable.setStatus('current')
if mibBuilder.loadTexts: dmtfComponentIDTable.setDescription('This group defines the attributes common to all components.\n This group is required.')
dmtfComponentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1), ).setIndexNames((0, "DMTF-SERVICE-LAYER-MIB", "DmiCompId"), (0, "DMTF-SERVICE-LAYER-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfComponentIDEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfComponentIDEntry.setDescription('This group defines the attributes common to all components.\n This group is required.')
manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 1), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: manufacturer.setReference("'DMTF|ComponentID|001' 1")
if mibBuilder.loadTexts: manufacturer.setStatus('current')
if mibBuilder.loadTexts: manufacturer.setDescription('Manufacturer of this system.')
product = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: product.setReference("'DMTF|ComponentID|001' 2")
if mibBuilder.loadTexts: product.setStatus('current')
if mibBuilder.loadTexts: product.setDescription('Product name for this system.')
version = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setReference("'DMTF|ComponentID|001' 3")
if mibBuilder.loadTexts: version.setStatus('current')
if mibBuilder.loadTexts: version.setDescription('Version number of this system.')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setReference("'DMTF|ComponentID|001' 4")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('Serial number for this system.')
installation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installation.setReference("'DMTF|ComponentID|001' 5")
if mibBuilder.loadTexts: installation.setStatus('current')
if mibBuilder.loadTexts: installation.setDescription('The time and date when this component was installed.')
verify = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("anErrorOccurredCheckStatusCode", 0), ("thisComponentDoesNotExist", 1), ("verificationIsNotSupported", 2), ("reserved", 3), ("thisComponentExistsButTheFunctionalityIsUntested", 4), ("thisComponentExistsButTheFunctionalityIsUnknown", 5), ("thisComponentExistsAndIsNotFunctioningCorrectly", 6), ("thisComponentExistsAndIsFunctioningCorrectly", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: verify.setReference("'DMTF|ComponentID|001' 6")
if mibBuilder.loadTexts: verify.setStatus('current')
if mibBuilder.loadTexts: verify.setDescription('A code that provides a level of verification that the component\nis still installed and working.')
dmtfSPIndicationSubscriptionTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 3), )
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionTable.setStatus('current')
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionTable.setDescription('This group defines the subscription information for a managing\nnode interested in indications from this system. The DMI Service Provider\nwill maintain this as table, with each row representing an individual managing\nnode.')
dmtfSPIndicationSubscriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1), ).setIndexNames((0, "DMTF-SERVICE-LAYER-MIB", "DmiCompId"), (0, "DMTF-SERVICE-LAYER-MIB", "DmiGroupId"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberRPCType"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberTransportType"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberAddressing"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberID"))
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionEntry.setDescription('This group defines the subscription information for a managing\nnode interested in indications from this system. The DMI Service Provider\nwill maintain this as table, with each row representing an individual managing\nnode.')
dmtfSPIndicationSubscriptionState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionState.setReference("'DMTF|SP Indication Subscription|001' 0")
if mibBuilder.loadTexts: dmtfSPIndicationSubscriptionState.setStatus('current')
subscriberRPCType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 1), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberRPCType.setReference("'DMTF|SP Indication Subscription|001' 1")
if mibBuilder.loadTexts: subscriberRPCType.setStatus('current')
if mibBuilder.loadTexts: subscriberRPCType.setDescription('This is an identifier of the type of RPC in use by the Subscribe\n.')
subscriberTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberTransportType.setReference("'DMTF|SP Indication Subscription|001' 2")
if mibBuilder.loadTexts: subscriberTransportType.setStatus('current')
if mibBuilder.loadTexts: subscriberTransportType.setDescription('This is an identifier of the type of Transport in use by\nthe Subscriber.')
subscriberAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberAddressing.setReference("'DMTF|SP Indication Subscription|001' 3")
if mibBuilder.loadTexts: subscriberAddressing.setStatus('current')
if mibBuilder.loadTexts: subscriberAddressing.setDescription('Addressing information of the managing node that has subscribed\nto receive indications from this managed node.')
subscriberID = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberID.setReference("'DMTF|SP Indication Subscription|001' 4")
if mibBuilder.loadTexts: subscriberID.setStatus('current')
if mibBuilder.loadTexts: subscriberID.setDescription('An ID or handle passed by the managing node to the SP.  It\nis opaque to the DMI Service Provider, but is used in all indications to\nthe managing node as a correlator, or multiplexing handle.  It is intended\nonly for use by the managing node.')
subscriptionExpirationWarningDateStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 5), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriptionExpirationWarningDateStamp.setReference("'DMTF|SP Indication Subscription|001' 5")
if mibBuilder.loadTexts: subscriptionExpirationWarningDateStamp.setStatus('current')
if mibBuilder.loadTexts: subscriptionExpirationWarningDateStamp.setDescription('On this date and time, the DMI Service Provider will send\nan indication to the subscriber, notifying it that the subscription is about\nto lapse.')
subscriptionExpirationDateStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 6), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriptionExpirationDateStamp.setReference("'DMTF|SP Indication Subscription|001' 6")
if mibBuilder.loadTexts: subscriptionExpirationDateStamp.setStatus('current')
if mibBuilder.loadTexts: subscriptionExpirationDateStamp.setDescription('On this date, after having issued the appropriate number\nof warning indications as described by the Subscription Expiration Warning\nTimestamp, this subscription will lapse.')
indicationFailureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 3, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: indicationFailureThreshold.setReference("'DMTF|SP Indication Subscription|001' 7")
if mibBuilder.loadTexts: indicationFailureThreshold.setStatus('current')
if mibBuilder.loadTexts: indicationFailureThreshold.setDescription('This is a number that corresponds to the number of indication\ntransmission failures to allow, before the indication subscription is considered\nto be invalid, and removed.')
dmtfSPFilterInformationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 1, 4), )
if mibBuilder.loadTexts: dmtfSPFilterInformationTable.setStatus('current')
if mibBuilder.loadTexts: dmtfSPFilterInformationTable.setDescription('This group defines a row in a table of event filters.  One\nfilter is created for each combination of ComponentID, Class, and severity\nthat the managing node is interested in.')
dmtfSPFilterInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1), ).setIndexNames((0, "DMTF-SERVICE-LAYER-MIB", "DmiCompId"), (0, "DMTF-SERVICE-LAYER-MIB", "DmiGroupId"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberRPCType"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberTransportType"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberAddressing"), (0, "DMTF-SERVICE-LAYER-MIB", "subscriberID"), (0, "DMTF-SERVICE-LAYER-MIB", "componentID"), (0, "DMTF-SERVICE-LAYER-MIB", "groupClassString"))
if mibBuilder.loadTexts: dmtfSPFilterInformationEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfSPFilterInformationEntry.setDescription('This group defines a row in a table of event filters.  One\nfilter is created for each combination of ComponentID, Class, and severity\nthat the managing node is interested in.')
dmtfSPFilterInformationState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfSPFilterInformationState.setReference("'DMTF|SPFilterInformation|001' 0")
if mibBuilder.loadTexts: dmtfSPFilterInformationState.setStatus('current')
subscriberRPCType2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 1), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberRPCType2.setReference("'DMTF|SPFilterInformation|001' 1")
if mibBuilder.loadTexts: subscriberRPCType2.setStatus('current')
if mibBuilder.loadTexts: subscriberRPCType2.setDescription('This is an identifier of the type of RPC in use by the Subscribe\n.')
subscriberTransportType2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberTransportType2.setReference("'DMTF|SPFilterInformation|001' 2")
if mibBuilder.loadTexts: subscriberTransportType2.setStatus('current')
if mibBuilder.loadTexts: subscriberTransportType2.setDescription('This is an identifier of the type of Transport in use by\nthe Subscriber.')
subscriberAddressing2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberAddressing2.setReference("'DMTF|SPFilterInformation|001' 3")
if mibBuilder.loadTexts: subscriberAddressing2.setStatus('current')
if mibBuilder.loadTexts: subscriberAddressing2.setDescription('Addressing information of the managing node that has subscribed\nto receive indications from this managed node.')
subscriberID2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subscriberID2.setReference("'DMTF|SPFilterInformation|001' 4")
if mibBuilder.loadTexts: subscriberID2.setStatus('current')
if mibBuilder.loadTexts: subscriberID2.setDescription('An ID or handle passed by the managing node to the SP.  It\nis opaque to the DMI Service Provider, but is used in all indications to\nthe managing node as a correlator, or multiplexing handle.  It is intended\nonly for use by the managing node.')
componentID = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentID.setReference("'DMTF|SPFilterInformation|001' 5")
if mibBuilder.loadTexts: componentID.setStatus('current')
if mibBuilder.loadTexts: componentID.setDescription('The component ID, as assigned by the DMI Service Provider,\nof the component from which the managing node wishes to receive events.')
groupClassString = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupClassString.setReference("'DMTF|SPFilterInformation|001' 6")
if mibBuilder.loadTexts: groupClassString.setStatus('current')
if mibBuilder.loadTexts: groupClassString.setDescription('The Class string corresponding to the groups within the above\nmentioned component, from which the managing node wishes to receive events.')
eventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("monitor", 1), ("information", 2), ("oK", 4), ("nonCritical-1", 8), ("critical", 16), ("nonRecoverable", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventSeverity.setReference("'DMTF|SPFilterInformation|001' 7")
if mibBuilder.loadTexts: eventSeverity.setStatus('current')
if mibBuilder.loadTexts: eventSeverity.setDescription('The event severity level, at which an event originating in\na group described by the previous class and componentID, should be forwarded\nto the managing node.')
mibBuilder.exportSymbols("DMTF-SERVICE-LAYER-MIB", indicationFailureThreshold=indicationFailureThreshold, dmtfStdMifs=dmtfStdMifs, dmtfSPFilterInformationEntry=dmtfSPFilterInformationEntry, manufacturer=manufacturer, subscriberRPCType2=subscriberRPCType2, subscriberID=subscriberID, PYSNMP_MODULE_ID=dmtfServiceLayerMIF, product=product, dmtfComponentIDTable=dmtfComponentIDTable, DmiCounter=DmiCounter, DmiGauge=DmiGauge, dmtfSPIndicationSubscriptionState=dmtfSPIndicationSubscriptionState, subscriptionExpirationDateStamp=subscriptionExpirationDateStamp, dmtfServiceLayerMIF=dmtfServiceLayerMIF, version=version, DmiInteger=DmiInteger, groupClassString=groupClassString, subscriberID2=subscriberID2, installation=installation, DmiGroupId=DmiGroupId, subscriberAddressing=subscriberAddressing, subscriberRPCType=subscriberRPCType, dmtfComponentIDEntry=dmtfComponentIDEntry, eventSeverity=eventSeverity, subscriberAddressing2=subscriberAddressing2, dmtfSPFilterInformationState=dmtfSPFilterInformationState, dmtfSPIndicationSubscriptionEntry=dmtfSPIndicationSubscriptionEntry, subscriberTransportType2=subscriberTransportType2, dmtf=dmtf, DmiOctetstring=DmiOctetstring, subscriptionExpirationWarningDateStamp=subscriptionExpirationWarningDateStamp, subscriberTransportType=subscriberTransportType, DmiCompId=DmiCompId, DmiCounter64=DmiCounter64, verify=verify, componentID=componentID, serialNumber=serialNumber, dmtfSPIndicationSubscriptionTable=dmtfSPIndicationSubscriptionTable, dmtfSPFilterInformationTable=dmtfSPFilterInformationTable, dmtfDynOids=dmtfDynOids)
