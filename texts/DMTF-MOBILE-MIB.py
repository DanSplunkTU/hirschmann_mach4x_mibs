#
# PySNMP MIB module DMTF-MOBILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DMTF-MOBILE-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:05:08 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
DmiDate, dmiEventStateKey, dmiEventSubSystem, dmiEventSystem, dmiEventSeverity, dmiEventAssociatedGroup, DmiString, dmiEventDateTime, dmiCompId = mibBuilder.importSymbols("DMTF-DMI-MIB", "DmiDate", "dmiEventStateKey", "dmiEventSubSystem", "dmiEventSystem", "dmiEventSeverity", "dmiEventAssociatedGroup", "DmiString", "dmiEventDateTime", "dmiCompId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, NotificationType, Counter64, Integer32, TimeTicks, ModuleIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, enterprises, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "NotificationType", "Counter64", "Integer32", "TimeTicks", "ModuleIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "enterprises", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiCounter(Counter32):
    pass

class DmiCounter64(Counter64):
    pass

class DmiGauge(Gauge32):
    pass

class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiCompId(Integer32):
    pass

class DmiGroupId(Integer32):
    pass

dmtf = MibIdentifier((1, 3, 6, 1, 4, 1, 412))
dmtfStdMifs = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2))
dmtfDynOids = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 3))
dmtfMobileComputerMIF = ModuleIdentity((1, 3, 6, 1, 4, 1, 412, 2, 8))
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setLastUpdated('9710221800Z')
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setOrganization('Desktop Management Task Force')
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setContactInfo('         DMTF Technical Advisory Committee\n\n\t\t    Mailstop JF2-53\n                    2111 N.E. 25th Avenue\n                    Hillsboro, OR 97124\n\n\t\t    Phone: +1 503 264-9300\n                    Email: dmtf-info@dmtf.org\n          ')
if mibBuilder.loadTexts: dmtfMobileComputerMIF.setDescription('This MIB is a translation of the DMTF Mobile Computer MIF,\n          based on the translation rules defined by the\n          DMTF DMI to SNMP Mapping Standard, Version 1.0.\n\n\t  DMI-based systems running a DMI-to-SNMP Mapping\n          Agent provide the ability to access DMI component\n          instrumentation via SNMP protocol operations.\n          ')
dmtfDeviceBayTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 9), )
if mibBuilder.loadTexts: dmtfDeviceBayTable.setStatus('current')
if mibBuilder.loadTexts: dmtfDeviceBayTable.setDescription('This group defines device bays characteristics ')
dmtfDeviceBayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "deviceBayIndex"))
if mibBuilder.loadTexts: dmtfDeviceBayEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfDeviceBayEntry.setDescription('This group defines device bays characteristics ')
dmtfDeviceBayState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfDeviceBayState.setReference("'DMTF|Device Bay|001' 0")
if mibBuilder.loadTexts: dmtfDeviceBayState.setStatus('current')
deviceBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayIndex.setReference("'DMTF|Device Bay|001' 1")
if mibBuilder.loadTexts: deviceBayIndex.setStatus('current')
if mibBuilder.loadTexts: deviceBayIndex.setDescription(' Defines an index for the device bays in the system')
deviceBayType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("proprietaryBay", 3), ("standardDesktopDeviceBay", 4), ("standardMobileDeviceBay", 5), ("standardUltraMobileDeviceBay", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayType.setReference("'DMTF|Device Bay|001' 2")
if mibBuilder.loadTexts: deviceBayType.setStatus('current')
if mibBuilder.loadTexts: deviceBayType.setDescription('Defines the type of Device Bay. Examples of Proprietary Bay\nare: Swappable Bay, Multi-Function Bay and Media Bay Types ')
deviceBayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceBayLocation.setReference("'DMTF|Device Bay|001' 3")
if mibBuilder.loadTexts: deviceBayLocation.setStatus('current')
if mibBuilder.loadTexts: deviceBayLocation.setDescription('Defines the physical location of the device bay')
devicesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicesSupported.setReference("'DMTF|Device Bay|001' 4")
if mibBuilder.loadTexts: devicesSupported.setStatus('current')
if mibBuilder.loadTexts: devicesSupported.setDescription('Defines a string containing a list of devices supported in\nthis bay separated by commas.')
deviceCurrentlyAttached = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 9, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCurrentlyAttached.setReference("'DMTF|Device Bay|001' 5")
if mibBuilder.loadTexts: deviceCurrentlyAttached.setStatus('current')
if mibBuilder.loadTexts: deviceCurrentlyAttached.setDescription('Defines the name of the device currently attached to this\nbay')
dmtfDynamicStatesTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 2), )
if mibBuilder.loadTexts: dmtfDynamicStatesTable.setStatus('current')
if mibBuilder.loadTexts: dmtfDynamicStatesTable.setDescription('This group defines the dynamic states information in the\nportable system')
dmtfDynamicStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfDynamicStatesEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfDynamicStatesEntry.setDescription('This group defines the dynamic states information in the\nportable system')
aCLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("offLine", 3), ("onLine", 4), ("onBackupPower", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aCLineStatus.setReference("'DMTF|Dynamic States|001' 1")
if mibBuilder.loadTexts: aCLineStatus.setStatus('current')
if mibBuilder.loadTexts: aCLineStatus.setDescription('This group defines status information about the AC line in\nthe notebook')
dockingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("docked", 3), ("notDocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dockingStatus.setReference("'DMTF|Dynamic States|001' 2")
if mibBuilder.loadTexts: dockingStatus.setStatus('current')
if mibBuilder.loadTexts: dockingStatus.setDescription('Defines whether system is docked or not')
dmtfInfraredPortTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 4), )
if mibBuilder.loadTexts: dmtfInfraredPortTable.setStatus('current')
if mibBuilder.loadTexts: dmtfInfraredPortTable.setDescription('This group defines attributes for Infrared Ports')
dmtfInfraredPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "iRIndex"))
if mibBuilder.loadTexts: dmtfInfraredPortEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfInfraredPortEntry.setDescription('This group defines attributes for Infrared Ports')
dmtfInfraredPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfInfraredPortState.setReference("'DMTF|Infrared Port|001' 0")
if mibBuilder.loadTexts: dmtfInfraredPortState.setStatus('current')
iRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRIndex.setReference("'DMTF|Infrared Port|001' 1")
if mibBuilder.loadTexts: iRIndex.setStatus('current')
if mibBuilder.loadTexts: iRIndex.setDescription('Index to identify the IR port')
iRLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRLocation.setReference("'DMTF|Infrared Port|001' 2")
if mibBuilder.loadTexts: iRLocation.setStatus('current')
if mibBuilder.loadTexts: iRLocation.setDescription('Location of the IR window on the device')
iREnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iREnableState.setReference("'DMTF|Infrared Port|001' 3")
if mibBuilder.loadTexts: iREnableState.setStatus('current')
if mibBuilder.loadTexts: iREnableState.setDescription('Defines whether IR is enabled or disabled')
iRLimitSpeedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRLimitSpeedEnable.setReference("'DMTF|Infrared Port|001' 4")
if mibBuilder.loadTexts: iRLimitSpeedEnable.setStatus('current')
if mibBuilder.loadTexts: iRLimitSpeedEnable.setDescription('Defines whether IR speed is limited or not.')
iRSpeedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRSpeedLimit.setReference("'DMTF|Infrared Port|001' 5")
if mibBuilder.loadTexts: iRSpeedLimit.setStatus('current')
if mibBuilder.loadTexts: iRSpeedLimit.setDescription('Defines connection speed limit of the IR port, in bits per\nsecond.')
iRPhysicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRPhysicalPortName.setReference("'DMTF|Infrared Port|001' 6")
if mibBuilder.loadTexts: iRPhysicalPortName.setStatus('current')
if mibBuilder.loadTexts: iRPhysicalPortName.setDescription('Defines the physical port that IR is connected to.')
iRVirtualCOMPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRVirtualCOMPortName.setReference("'DMTF|Infrared Port|001' 7")
if mibBuilder.loadTexts: iRVirtualCOMPortName.setStatus('current')
if mibBuilder.loadTexts: iRVirtualCOMPortName.setDescription('Defines the virtual COM port the IR is connected to.')
iRVirtualLPTPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 8), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRVirtualLPTPortName.setReference("'DMTF|Infrared Port|001' 8")
if mibBuilder.loadTexts: iRVirtualLPTPortName.setStatus('current')
if mibBuilder.loadTexts: iRVirtualLPTPortName.setDescription('Defines the virtual LPT port the IR is connected to.')
iRProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("sIR", 3), ("fIR", 4), ("mIR", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iRProtocol.setReference("'DMTF|Infrared Port|001' 9")
if mibBuilder.loadTexts: iRProtocol.setStatus('current')
if mibBuilder.loadTexts: iRProtocol.setDescription('Defines protocol used to establish the IR connection')
dmtfPointingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 5), )
if mibBuilder.loadTexts: dmtfPointingDeviceTable.setStatus('current')
if mibBuilder.loadTexts: dmtfPointingDeviceTable.setDescription('This group defines the characteristics of a pointing device.')
dmtfPointingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfPointingDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfPointingDeviceEntry.setDescription('This group defines the characteristics of a pointing device.')
pointingDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("mouse", 3), ("trackBall", 4), ("trackPoint", 5), ("glidePoint", 6), ("touchPad", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceType.setReference("'DMTF|Pointing Device|001' 1")
if mibBuilder.loadTexts: pointingDeviceType.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceType.setDescription('The type of this Pointing Device.')
pointingDeviceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 160, 161, 162))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("serial", 3), ("pS2", 4), ("infrared", 5), ("hPHIL", 6), ("busMouse", 7), ("aDB", 8), ("busMouseDB9", 160), ("busMouseMicroDIN", 161), ("uSB", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceInterface.setReference("'DMTF|Pointing Device|001' 2")
if mibBuilder.loadTexts: pointingDeviceInterface.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceInterface.setDescription('The interface type of this Pointing Device.')
pointingDeviceIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceIRQ.setReference("'DMTF|Pointing Device|001' 3")
if mibBuilder.loadTexts: pointingDeviceIRQ.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceIRQ.setDescription('The IRQ number used by this Pointing Device.')
pointingDeviceButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceButtons.setReference("'DMTF|Pointing Device|001' 4")
if mibBuilder.loadTexts: pointingDeviceButtons.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceButtons.setDescription('The number of Pointing Device buttons on this Pointing Device.')
pointingDevicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDevicePortName.setReference("'DMTF|Pointing Device|001' 5")
if mibBuilder.loadTexts: pointingDevicePortName.setStatus('current')
if mibBuilder.loadTexts: pointingDevicePortName.setDescription('The name of the port currently being used by this Pointing\nDevice.')
pointingDeviceDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceDriverName.setReference("'DMTF|Pointing Device|001' 6")
if mibBuilder.loadTexts: pointingDeviceDriverName.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceDriverName.setDescription('The name of the Pointing Device driver.')
pointingDeviceDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pointingDeviceDriverVersion.setReference("'DMTF|Pointing Device|001' 7")
if mibBuilder.loadTexts: pointingDeviceDriverVersion.setStatus('current')
if mibBuilder.loadTexts: pointingDeviceDriverVersion.setDescription('The version number of the Pointing Device driver.')
fRUGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fRUGroupIndex.setReference("'DMTF|Pointing Device|001' 8")
if mibBuilder.loadTexts: fRUGroupIndex.setStatus('current')
if mibBuilder.loadTexts: fRUGroupIndex.setDescription("If this is a Field Replaceable Unit or if it is part of another\nFRU, this provides an index into the FRU table; 'value = -1' indicates that\nthe group is not a FRU.")
operationalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operationalGroupIndex.setReference("'DMTF|Pointing Device|001' 9")
if mibBuilder.loadTexts: operationalGroupIndex.setStatus('current')
if mibBuilder.loadTexts: operationalGroupIndex.setDescription('The index into the Operational State table for this device.')
securitySettings = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securitySettings.setReference("'DMTF|Pointing Device|001' 10")
if mibBuilder.loadTexts: securitySettings.setStatus('current')
if mibBuilder.loadTexts: securitySettings.setDescription('Enum describing the current hardware security settings on\nthis device.')
dmtfPortableBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 1), )
if mibBuilder.loadTexts: dmtfPortableBatteryTable.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryTable.setDescription('This group defines general information about the portable\nbattery(s) in the system ')
dmtfPortableBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "portableBatteryIndex"))
if mibBuilder.loadTexts: dmtfPortableBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryEntry.setDescription('This group defines general information about the portable\nbattery(s) in the system ')
dmtfPortableBatteryState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPortableBatteryState.setReference("'DMTF|Portable Battery|001' 0")
if mibBuilder.loadTexts: dmtfPortableBatteryState.setStatus('current')
portableBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryIndex.setReference("'DMTF|Portable Battery|001' 1")
if mibBuilder.loadTexts: portableBatteryIndex.setStatus('current')
if mibBuilder.loadTexts: portableBatteryIndex.setDescription('The index into the portable battery table.')
portableBatteryLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryLocation.setReference("'DMTF|Portable Battery|001' 2")
if mibBuilder.loadTexts: portableBatteryLocation.setStatus('current')
if mibBuilder.loadTexts: portableBatteryLocation.setDescription('The location of the battery')
portableBatteryManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryManufacturer.setReference("'DMTF|Portable Battery|001' 3")
if mibBuilder.loadTexts: portableBatteryManufacturer.setStatus('current')
if mibBuilder.loadTexts: portableBatteryManufacturer.setDescription('The name of the company that manufactured the battery.')
portableBatteryManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 4), DmiDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryManufactureDate.setReference("'DMTF|Portable Battery|001' 4")
if mibBuilder.loadTexts: portableBatteryManufactureDate.setStatus('current')
if mibBuilder.loadTexts: portableBatteryManufactureDate.setDescription('The battery manufacture date.')
portableBatterySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 5), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatterySerialNumber.setReference("'DMTF|Portable Battery|001' 5")
if mibBuilder.loadTexts: portableBatterySerialNumber.setStatus('current')
if mibBuilder.loadTexts: portableBatterySerialNumber.setDescription('The serial number for this battery.')
portableBatteryDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 6), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDeviceName.setReference("'DMTF|Portable Battery|001' 6")
if mibBuilder.loadTexts: portableBatteryDeviceName.setStatus('current')
if mibBuilder.loadTexts: portableBatteryDeviceName.setDescription('Device name for this battery.  For instance, Duracell DR-36.')
portableBatteryDeviceChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leadAcid", 3), ("nickelCadmium", 4), ("nickelMetalHydride", 5), ("lithiumIon", 6), ("zincAir", 7), ("lithiumPolymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDeviceChemistry.setReference("'DMTF|Portable Battery|001' 7")
if mibBuilder.loadTexts: portableBatteryDeviceChemistry.setStatus('current')
if mibBuilder.loadTexts: portableBatteryDeviceChemistry.setDescription('The battery chemistry.  For instance, Lithium-ion or Nickel\nmetal hydride.')
portableBatteryDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDesignCapacity.setReference("'DMTF|Portable Battery|001' 8")
if mibBuilder.loadTexts: portableBatteryDesignCapacity.setStatus('current')
if mibBuilder.loadTexts: portableBatteryDesignCapacity.setDescription('The design capacity of the battery in mWatt-hours. If this\nattribute is not supported, value = 0x80000000')
portableBatteryDesignVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryDesignVoltage.setReference("'DMTF|Portable Battery|001' 9")
if mibBuilder.loadTexts: portableBatteryDesignVoltage.setStatus('current')
if mibBuilder.loadTexts: portableBatteryDesignVoltage.setDescription('The design voltage of the battery in mVolts. If this attribute\nis not supported, value = 0x80000000')
smartBatteryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 10), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartBatteryVersion.setReference("'DMTF|Portable Battery|001' 10")
if mibBuilder.loadTexts: smartBatteryVersion.setStatus('current')
if mibBuilder.loadTexts: smartBatteryVersion.setDescription('The Smart Battery Data Specification version number supported\nby this battery. If the battery does not support this function, the value\nshould be left blank.')
fullChargeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullChargeCapacity.setReference("'DMTF|Portable Battery|001' 11")
if mibBuilder.loadTexts: fullChargeCapacity.setStatus('current')
if mibBuilder.loadTexts: fullChargeCapacity.setDescription("The full charge capacity of the battery in mWatt-hours. Comparis\nn of this value to the battery Design Capacity determines when the battery\nrequires replacement.  The battery industry has defined a battery's end of\nlife to be when the Full Charge Capacity falls below 80% of the Design Capacity.\n If this attribute is not supported, value = -1.")
remainingCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingCapacity.setReference("'DMTF|Portable Battery|001' 12")
if mibBuilder.loadTexts: remainingCapacity.setStatus('current')
if mibBuilder.loadTexts: remainingCapacity.setDescription("The battery's remaining capacity in mWatt-hours. This value\nis used with Design Capacity or Full Charge Capacity to calculate fuel gauge\ninformation.  If this attribute is not supported, value = -1. ")
maximumError = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumError.setReference("'DMTF|Portable Battery|001' 13")
if mibBuilder.loadTexts: maximumError.setStatus('current')
if mibBuilder.loadTexts: maximumError.setDescription('The maximum error (as a percentage) in the Watt-hour data\nreported by the battery. The maximum error indicates the upper bound on how\nmuch additional energy the battery may have above the energy it reports having.\nWhen this value exceeds some value, for instance, 10%, some action must be\ntaken (for instance, fully discharge then fully charge the battery) within\nsome specified time (for instance, within two recharge cycles of the battery).\nIf the action is not taken within the time frame, the error value')
portableBatteryChargingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("high", 3), ("low", 4), ("critical", 5), ("charging", 6), ("chargingAndHigh", 7), ("chargingAndLow", 8), ("chargingAndCritical", 9), ("noSystemBattery", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portableBatteryChargingStatus.setReference("'DMTF|Portable Battery|001' 14")
if mibBuilder.loadTexts: portableBatteryChargingStatus.setStatus('current')
if mibBuilder.loadTexts: portableBatteryChargingStatus.setDescription(' The charging battery status')
remainingBatteryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingBatteryTime.setReference("'DMTF|Portable Battery|001' 15")
if mibBuilder.loadTexts: remainingBatteryTime.setStatus('current')
if mibBuilder.loadTexts: remainingBatteryTime.setDescription('The remaining battery time in minutes, at the current average\nsystem power consumption level.')
remainingTimeToFullBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remainingTimeToFullBattery.setReference("'DMTF|Portable Battery|001' 16")
if mibBuilder.loadTexts: remainingTimeToFullBattery.setStatus('current')
if mibBuilder.loadTexts: remainingTimeToFullBattery.setDescription('The remaining time to charge the battery fully in minutes,at\nthe current average system power consumption level and charging rate')
powerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerUnitIndex.setReference("'DMTF|Portable Battery|001' 17")
if mibBuilder.loadTexts: powerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: powerUnitIndex.setDescription('This is the ID of the Power Unit (logical portable battery)\nto which this Portable Battery belongs. This value matches up with the Power\nUnit Table Index attribute defined in the Power Unit Global Table.')
dmtfPowerManagementBinaryAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 8), )
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTable.setStatus('current')
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTable.setDescription('')
dmtfPowerManagementBinaryAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "index"))
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationEntry.setDescription('')
dmtfPowerManagementBinaryAssociationTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTableState.setReference("'DMTF|Power Management Binary Association Table|001' 0")
if mibBuilder.loadTexts: dmtfPowerManagementBinaryAssociationTableState.setStatus('current')
index = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index.setReference("'DMTF|Power Management Binary Association Table|001' 1")
if mibBuilder.loadTexts: index.setStatus('current')
if mibBuilder.loadTexts: index.setDescription('')
type = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 2), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: type.setReference("'DMTF|Power Management Binary Association Table|001' 2")
if mibBuilder.loadTexts: type.setStatus('current')
if mibBuilder.loadTexts: type.setDescription('')
ref1 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 3), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ref1.setReference("'DMTF|Power Management Binary Association Table|001' 3")
if mibBuilder.loadTexts: ref1.setStatus('current')
if mibBuilder.loadTexts: ref1.setDescription('')
ref2 = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 8, 1, 4), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ref2.setReference("'DMTF|Power Management Binary Association Table|001' 4")
if mibBuilder.loadTexts: ref2.setStatus('current')
if mibBuilder.loadTexts: ref2.setDescription('')
dmtfPowerManagementTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 7), )
if mibBuilder.loadTexts: dmtfPowerManagementTable.setStatus('current')
if mibBuilder.loadTexts: dmtfPowerManagementTable.setDescription('This group defines the power management state of components\nand groups within the system')
dmtfPowerManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "PowerManagementEnabledDisabled"))
if mibBuilder.loadTexts: dmtfPowerManagementEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfPowerManagementEntry.setDescription('This group defines the power management state of components\nand groups within the system')
dmtfPowerManagementTableState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfPowerManagementTableState.setReference("'DMTF|Power Management Table|001' 0")
if mibBuilder.loadTexts: dmtfPowerManagementTableState.setStatus('current')
powerManagementEnabledDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerManagementEnabledDisabled.setReference("'DMTF|Power Management Table|001' 1")
if mibBuilder.loadTexts: powerManagementEnabledDisabled.setStatus('current')
if mibBuilder.loadTexts: powerManagementEnabledDisabled.setDescription('Enabled/Disabled state of power management on this device.')
currentPowerManagementState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("d0WorkingFullyON", 3), ("d1Sleeping", 4), ("d2NonVolatileSleepSoftOff", 5), ("d3OFF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentPowerManagementState.setReference("'DMTF|Power Management Table|001' 2")
if mibBuilder.loadTexts: currentPowerManagementState.setStatus('current')
if mibBuilder.loadTexts: currentPowerManagementState.setDescription('The current PM state (D0,D1,D2,D3).')
d1TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d1TimerValue.setReference("'DMTF|Power Management Table|001' 3")
if mibBuilder.loadTexts: d1TimerValue.setStatus('current')
if mibBuilder.loadTexts: d1TimerValue.setDescription('The time-out value in milliseconds to go from D0 (full ON)\nto D1 state.  If D1 state is not supported the value is -1. If the transition\nis not controlled by a timer then the value is 0.')
d2TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d2TimerValue.setReference("'DMTF|Power Management Table|001' 4")
if mibBuilder.loadTexts: d2TimerValue.setStatus('current')
if mibBuilder.loadTexts: d2TimerValue.setDescription('The time-out value in milliseconds to go from the next higher\n supported state (either D0 or D1) to the D2 state.  If D2 state is not supporte\n the value is -1.  If the transition is not controlled by a timer then the\nvalue is 0.')
d3TimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 7, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: d3TimerValue.setReference("'DMTF|Power Management Table|001' 5")
if mibBuilder.loadTexts: d3TimerValue.setStatus('current')
if mibBuilder.loadTexts: d3TimerValue.setDescription('The time-out value in milliseconds to go from the next higher\nsupported state (either D0, D1, or D2) to the D3 state. If D3 state is not\nsupported the value is -1 meaning the device can never be turned off. If\nthe transition is not controlled by a timer then the value is 0.')
dmtfSystemPowerManagementTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 6), )
if mibBuilder.loadTexts: dmtfSystemPowerManagementTable.setStatus('current')
if mibBuilder.loadTexts: dmtfSystemPowerManagementTable.setDescription('This group defines system power management attributes')
dmtfSystemPowerManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"))
if mibBuilder.loadTexts: dmtfSystemPowerManagementEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfSystemPowerManagementEntry.setDescription('This group defines system power management attributes')
powerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("aPM11", 3), ("aPM12", 4), ("aCPI10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerManagementCapabilities.setReference("'DMTF|System Power Management|001' 1")
if mibBuilder.loadTexts: powerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: powerManagementCapabilities.setDescription('Defines what type of Power Management this system supports\n(i.e APM 1.2, ACPI 1.0)')
reducedCPUClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reducedCPUClockSpeed.setReference("'DMTF|System Power Management|001' 2")
if mibBuilder.loadTexts: reducedCPUClockSpeed.setStatus('current')
if mibBuilder.loadTexts: reducedCPUClockSpeed.setDescription(' Defines whether to enable CPU to slow down when possible')
overrideAC = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overrideAC.setReference("'DMTF|System Power Management|001' 3")
if mibBuilder.loadTexts: overrideAC.setStatus('current')
if mibBuilder.loadTexts: overrideAC.setDescription('Enables/Disables power savings when AC is connected')
ringEventResume = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringEventResume.setReference("'DMTF|System Power Management|001' 4")
if mibBuilder.loadTexts: ringEventResume.setStatus('current')
if mibBuilder.loadTexts: ringEventResume.setDescription('Enables system to resume operation when a modem ring occurs\non a serial port or a wakeup occurs on a PC Card')
alarmResume = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmResume.setReference("'DMTF|System Power Management|001' 5")
if mibBuilder.loadTexts: alarmResume.setStatus('current')
if mibBuilder.loadTexts: alarmResume.setDescription('Enables system to resume operation from suspend/standby mode\nat a time determined by an application program.')
dmtfVideoOutputDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 412, 2, 8, 3), )
if mibBuilder.loadTexts: dmtfVideoOutputDeviceTable.setStatus('current')
if mibBuilder.loadTexts: dmtfVideoOutputDeviceTable.setDescription('This group defines the attributes for video output devices')
dmtfVideoOutputDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1), ).setIndexNames((0, "DMTF-MOBILE-MIB", "DmiCompId"), (0, "DMTF-MOBILE-MIB", "DmiGroupId"), (0, "DMTF-MOBILE-MIB", "index"))
if mibBuilder.loadTexts: dmtfVideoOutputDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: dmtfVideoOutputDeviceEntry.setDescription('This group defines the attributes for video output devices')
dmtfVideoOutputDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 0), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmtfVideoOutputDeviceState.setReference("'DMTF|Video Output Device|001' 0")
if mibBuilder.loadTexts: dmtfVideoOutputDeviceState.setStatus('current')
index2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: index2.setReference("'DMTF|Video Output Device|001' 1")
if mibBuilder.loadTexts: index2.setStatus('current')
if mibBuilder.loadTexts: index2.setDescription('Defines the index into the video output group')
builtIn = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: builtIn.setReference("'DMTF|Video Output Device|001' 2")
if mibBuilder.loadTexts: builtIn.setStatus('current')
if mibBuilder.loadTexts: builtIn.setDescription('Defines whether the video output device is built in')
type2 = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("cRT", 3), ("tFT", 4), ("sTN", 5), ("dSTN", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: type2.setReference("'DMTF|Video Output Device|001' 3")
if mibBuilder.loadTexts: type2.setStatus('current')
if mibBuilder.loadTexts: type2.setDescription('Defines the type of the video output device ')
colorSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("yes", 3), ("no", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colorSupport.setReference("'DMTF|Video Output Device|001' 4")
if mibBuilder.loadTexts: colorSupport.setStatus('current')
if mibBuilder.loadTexts: colorSupport.setDescription('Defines whether the video output device supports color')
brightness = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brightness.setReference("'DMTF|Video Output Device|001' 5")
if mibBuilder.loadTexts: brightness.setStatus('current')
if mibBuilder.loadTexts: brightness.setDescription('The percentage (0-100) of total brightness of the video output\ndevice. If feature not available, value = 0x80000000')
contrast = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contrast.setReference("'DMTF|Video Output Device|001' 6")
if mibBuilder.loadTexts: contrast.setStatus('current')
if mibBuilder.loadTexts: contrast.setDescription('The percentage (0-100) of total contrast of the videooutput\ndevice. If feature not available, value = 0x80000000')
videoGroupReference = MibTableColumn((1, 3, 6, 1, 4, 1, 412, 2, 8, 3, 1, 7), DmiString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: videoGroupReference.setReference("'DMTF|Video Output Device|001' 7")
if mibBuilder.loadTexts: videoGroupReference.setStatus('current')
if mibBuilder.loadTexts: videoGroupReference.setDescription('Defines the reference into the video group')
dmtfPortableBatteryTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0))
dmtfPortableBatteryEvSys = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("system1", 3), ("system2", 4))))
if mibBuilder.loadTexts: dmtfPortableBatteryEvSys.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryEvSys.setDescription('The major functional aspect of the product causing the fault.')
dmtfPortableBatteryEvSub = MibScalar((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("subsystem1", 3), ("subsystem2", 4))))
if mibBuilder.loadTexts: dmtfPortableBatteryEvSub.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryEvSub.setDescription('The minor functional aspect of the product causing the fault.')
dmtfPortableBatteryLowCombinedBatterysCharge = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 1)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryLowCombinedBatterysCharge.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryLowCombinedBatterysCharge.setDescription('The combined charge of all batteries in the\n\t\t    portable computer is running low.')
if mibBuilder.loadTexts: dmtfPortableBatteryLowCombinedBatterysCharge.setReference("'DMTF|Portable Battery|001' 1")
dmtfPortableBatteryCriticalCombinedBatterysCharge = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 2)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryCriticalCombinedBatterysCharge.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryCriticalCombinedBatterysCharge.setDescription('The combined charge of all batteries in the\n\t\t    portable computer is critcally low.')
if mibBuilder.loadTexts: dmtfPortableBatteryCriticalCombinedBatterysCharge.setReference("'DMTF|Portable Battery|001' 2")
dmtfPortableBatteryMaintenanceRequired = NotificationType((1, 3, 6, 1, 4, 1, 412, 2, 8, 1, 0, 3)).setObjects(("DMTF-DMI-MIB", "dmiEventDateTime"), ("DMTF-DMI-MIB", "dmiCompId"), ("DMTF-DMI-MIB", "dmiEventSeverity"), ("DMTF-DMI-MIB", "dmiEventStateKey"), ("DMTF-DMI-MIB", "dmiEventAssociatedGroup"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSys"), ("DMTF-MOBILE-MIB", "dmtfPortableBatteryEvSub"))
if mibBuilder.loadTexts: dmtfPortableBatteryMaintenanceRequired.setStatus('current')
if mibBuilder.loadTexts: dmtfPortableBatteryMaintenanceRequired.setDescription('A battery in the portable computer is \n\t\t    defective and requires maintenance.')
if mibBuilder.loadTexts: dmtfPortableBatteryMaintenanceRequired.setReference("'DMTF|Portable Battery|001' 3")
mibBuilder.exportSymbols("DMTF-MOBILE-MIB", iRIndex=iRIndex, dmtfDynOids=dmtfDynOids, DmiCounter=DmiCounter, dmtfInfraredPortEntry=dmtfInfraredPortEntry, dmtfVideoOutputDeviceTable=dmtfVideoOutputDeviceTable, contrast=contrast, portableBatteryIndex=portableBatteryIndex, type2=type2, iRSpeedLimit=iRSpeedLimit, dmtfPortableBatteryEntry=dmtfPortableBatteryEntry, type=type, pointingDeviceType=pointingDeviceType, remainingBatteryTime=remainingBatteryTime, dmtfPowerManagementBinaryAssociationTableState=dmtfPowerManagementBinaryAssociationTableState, dmtfInfraredPortTable=dmtfInfraredPortTable, dmtfPointingDeviceEntry=dmtfPointingDeviceEntry, portableBatteryDesignCapacity=portableBatteryDesignCapacity, portableBatteryDeviceChemistry=portableBatteryDeviceChemistry, reducedCPUClockSpeed=reducedCPUClockSpeed, overrideAC=overrideAC, dmtfPortableBatteryEvSub=dmtfPortableBatteryEvSub, dmtf=dmtf, portableBatteryDesignVoltage=portableBatteryDesignVoltage, portableBatteryManufactureDate=portableBatteryManufactureDate, powerManagementEnabledDisabled=powerManagementEnabledDisabled, dmtfPortableBatteryTraps=dmtfPortableBatteryTraps, DmiGroupId=DmiGroupId, dmtfPowerManagementTable=dmtfPowerManagementTable, deviceBayLocation=deviceBayLocation, dmtfDeviceBayTable=dmtfDeviceBayTable, dmtfSystemPowerManagementTable=dmtfSystemPowerManagementTable, d2TimerValue=d2TimerValue, alarmResume=alarmResume, aCLineStatus=aCLineStatus, fullChargeCapacity=fullChargeCapacity, portableBatteryManufacturer=portableBatteryManufacturer, colorSupport=colorSupport, dockingStatus=dockingStatus, dmtfPortableBatteryState=dmtfPortableBatteryState, dmtfDynamicStatesEntry=dmtfDynamicStatesEntry, dmtfPowerManagementTableState=dmtfPowerManagementTableState, pointingDeviceIRQ=pointingDeviceIRQ, builtIn=builtIn, DmiCompId=DmiCompId, dmtfDeviceBayEntry=dmtfDeviceBayEntry, powerManagementCapabilities=powerManagementCapabilities, DmiGauge=DmiGauge, ref1=ref1, videoGroupReference=videoGroupReference, portableBatteryLocation=portableBatteryLocation, remainingTimeToFullBattery=remainingTimeToFullBattery, dmtfPortableBatteryEvSys=dmtfPortableBatteryEvSys, powerUnitIndex=powerUnitIndex, pointingDeviceDriverVersion=pointingDeviceDriverVersion, index2=index2, dmtfStdMifs=dmtfStdMifs, dmtfPowerManagementBinaryAssociationTable=dmtfPowerManagementBinaryAssociationTable, dmtfPortableBatteryMaintenanceRequired=dmtfPortableBatteryMaintenanceRequired, pointingDevicePortName=pointingDevicePortName, ringEventResume=ringEventResume, portableBatteryChargingStatus=portableBatteryChargingStatus, pointingDeviceInterface=pointingDeviceInterface, d1TimerValue=d1TimerValue, brightness=brightness, portableBatterySerialNumber=portableBatterySerialNumber, PYSNMP_MODULE_ID=dmtfMobileComputerMIF, dmtfPortableBatteryLowCombinedBatterysCharge=dmtfPortableBatteryLowCombinedBatterysCharge, iRProtocol=iRProtocol, fRUGroupIndex=fRUGroupIndex, remainingCapacity=remainingCapacity, operationalGroupIndex=operationalGroupIndex, deviceBayIndex=deviceBayIndex, dmtfPointingDeviceTable=dmtfPointingDeviceTable, dmtfSystemPowerManagementEntry=dmtfSystemPowerManagementEntry, currentPowerManagementState=currentPowerManagementState, d3TimerValue=d3TimerValue, smartBatteryVersion=smartBatteryVersion, iREnableState=iREnableState, dmtfPortableBatteryCriticalCombinedBatterysCharge=dmtfPortableBatteryCriticalCombinedBatterysCharge, iRVirtualCOMPortName=iRVirtualCOMPortName, dmtfPortableBatteryTable=dmtfPortableBatteryTable, dmtfDeviceBayState=dmtfDeviceBayState, DmiInteger=DmiInteger, DmiOctetstring=DmiOctetstring, dmtfInfraredPortState=dmtfInfraredPortState, portableBatteryDeviceName=portableBatteryDeviceName, dmtfMobileComputerMIF=dmtfMobileComputerMIF, deviceCurrentlyAttached=deviceCurrentlyAttached, dmtfDynamicStatesTable=dmtfDynamicStatesTable, maximumError=maximumError, dmtfPowerManagementEntry=dmtfPowerManagementEntry, dmtfVideoOutputDeviceState=dmtfVideoOutputDeviceState, dmtfVideoOutputDeviceEntry=dmtfVideoOutputDeviceEntry, securitySettings=securitySettings, dmtfPowerManagementBinaryAssociationEntry=dmtfPowerManagementBinaryAssociationEntry, iRVirtualLPTPortName=iRVirtualLPTPortName, iRPhysicalPortName=iRPhysicalPortName, iRLocation=iRLocation, pointingDeviceDriverName=pointingDeviceDriverName, devicesSupported=devicesSupported, deviceBayType=deviceBayType, index=index, DmiCounter64=DmiCounter64, pointingDeviceButtons=pointingDeviceButtons, iRLimitSpeedEnable=iRLimitSpeedEnable, ref2=ref2)
