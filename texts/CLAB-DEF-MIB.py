#
# PySNMP MIB module CLAB-DEF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/CLAB-DEF-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 16:24:54 2022
# On host fv-az126-328 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
DocsX509ASN1DEREncodedCertificate, = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsX509ASN1DEREncodedCertificate")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, TimeTicks, Counter32, Counter64, Gauge32, enterprises, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "TimeTicks", "Counter32", "Counter64", "Gauge32", "enterprises", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cableLabs = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491))
cableLabs.setRevisions(('2017-04-13 00:00', '2016-07-28 00:00', '2016-03-16 00:00', '2012-08-09 00:00', '2011-02-10 00:00', '2009-08-11 00:00', '2008-03-06 00:00', '2007-01-19 17:00', '2005-04-08 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cableLabs.setRevisionsDescriptions(('Revised per ECN CLAB-DEF-MIB-N-17.0157-1.', 'Revised Version includes ECN MIB-CLABDEF-N-16.0149-3.', 'Revised Version includes ECNs MIB-CLABDEF-N-15.0138-1\n             and MIB-CLABDEF-N-16.0142-1.', 'Revised Version includes ECN MIB-CLABDEF-N-12.0113-1\n             and published as CL-SP-MIB-CLABDEF-I10-120809', 'Revised Version includes ECN MIB-CLABDEF-N-10.0092-1\n             and published as CL-SP-MIB-CLABDEF-I09-110210', 'Revised Version includes ECN MIB-CLABDEF-N-08.0039-2\n             and published as CL-SP-MIB-CLABDEF-I08-090811', 'Revised Version includes ECN MIB-CLABDEF-N-07.0032-4 and\n            published as CL-SP-MIB-CLABDEF-I07.', 'This revision published as CL-SP-MIB-CLABDEF-I06.', 'This revision published as CL-SP-MIB-CLABDEF-I05.',))
if mibBuilder.loadTexts: cableLabs.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: cableLabs.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: cableLabs.setContactInfo('Postal: Cable Television Laboratories\n                    858 Coal Creek Circle\n                    Louisville, Colorado 80027-9750\n                    U.S.A.\n            Phone:  +1 303-661-9100\n            Fax:    +1 303-661-9199\n            E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: cableLabs.setDescription("Licensed under the Apache License, Version 2.0 (the 'License');\n             you may not use this file except in compliance with the License.\n             You may obtain a copy of the License at:\n \n                 http://www.apache.org/licenses/LICENSE-2.0\n \n             Unless required by applicable law or agreed to in writing, software\n             distributed under the License is distributed on an 'AS IS' BASIS,\n             WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or \n             implied.\n\n             See the License for the specific language governing permissions and\n             limitations under the License.\n\n            This MIB module defines the namespace organization for the\n            CableLabs enterprise OID registry.\n \n            Copyright 1999-2017 Cable Television Laboratories, Inc.\n            All rights reserved.")
clabFunction = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1))
clabFuncMib2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 1))
clabFuncProprietary = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 1, 2))
clabProject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2))
clabProjDocsis = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1))
clabProjPacketCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2))
clabProjOpenCable = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 3))
clabProjCableHome = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 4))
clabProjWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 5))
clabSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3))
clabSecCertObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 1))
clabSecOlcaObject = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 3, 2))
clabCommonMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4))
pktcSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 4))
pktcLawfulIntercept = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 5))
pktcEnhancements = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 6))
pktcPACMMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7))
pktcApplicationMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 8))
pktcSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9))
pktcEUEMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10))
pktcSMAMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 11))
pktcPACMTC = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 1))
pktcPACMUEMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 2))
pktcPACMUserMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 7, 3))
pktcESSupportMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 9, 1))
pktcEUEDeviceMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 2, 10, 1))
clabSrvcPrvdrRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 1), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabSrvcPrvdrRootCACert.setReference('CableLabs CableHome Specification;\n            CableLabs PacketCable Security Specification.')
if mibBuilder.loadTexts: clabSrvcPrvdrRootCACert.setStatus('current')
if mibBuilder.loadTexts: clabSrvcPrvdrRootCACert.setDescription('The X509 DER-encoded CableLabs Service Provider Root CA\n            Certificate.')
clabCVCRootCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 2), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCRootCACert.setReference('CableLabs CableHome Specification;\n            CableLabs PacketCable Security Specification.')
if mibBuilder.loadTexts: clabCVCRootCACert.setStatus('current')
if mibBuilder.loadTexts: clabCVCRootCACert.setDescription('The X509 DER-encoded CableLabs CVC Root CA Certificate.')
clabCVCCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 3), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabCVCCACert.setReference('CableLabs CableHome Specification;\n            CableLabs PacketCable Security Specification.')
if mibBuilder.loadTexts: clabCVCCACert.setStatus('current')
if mibBuilder.loadTexts: clabCVCCACert.setDescription('The X509 DER-encoded CableLabs CVC CA Certificate.')
clabMfgCVCCert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 4), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCVCCert.setReference('CableLabs CableHome Specification;\n            CableLabs PacketCable Security Specification.')
if mibBuilder.loadTexts: clabMfgCVCCert.setStatus('current')
if mibBuilder.loadTexts: clabMfgCVCCert.setDescription('The X509 DER-encoded Manufacturer CVC Certificate.')
clabMfgCACert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 3, 1, 5), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabMfgCACert.setReference('CableLabs CableHome Specification;\n            CableLabs PacketCable Security Specification.')
if mibBuilder.loadTexts: clabMfgCACert.setStatus('current')
if mibBuilder.loadTexts: clabMfgCACert.setDescription('The X509 DER-encoded Manufacturer CA Certificate.')
clabUpsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 1))
clabTopoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 2))
clabGREMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 3))
clabMAPMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 4))
clabDNSMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 5))
clabGWMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6))
clabAniDevMib = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 7))
class DocsL2vpnIfList(TextualConvention, Bits):
    description = "An object of this type indicates a set of CM \n            MAC bridge interfaces, encoded as a BITS syntax with a ?1?\n            Bit for each interface included in the set.\n\n            Bit position eCM(0) represents a conceptual interface to \n            the internal 'self' host MAC of the eCM itself. All other \n            bit positions K correspond to CM MAC bridge port interface\n            index with ifIndex value K. \n\n            A BITS object is encoded as an OCTET STRING, which may have\n            length zero. Bit position 0 is encoded in the most\n            significant bit of the first octet, proceeding to \n            bit position 7 in the least significant bit. Bit position 8\n            is encoded in the most significant bit of the second octet,\n            and so on.\n\n            In a CM, ifIndex value 1 corresponds to the primary CPE \n            interface. In CableHome devices, this interface is assigned\n            to the embedded Portal Services (ePS) host interface, which\n            provides a portal to the primary physical CPE interface. \n            In many contexts of a DocsL2VpnIfList, a '1' in bit \n            position 1 corresponds to 'any' or 'all' CPE interfaces \n            when the CM contains more than one CPE interface. \n\n            ifIndex value 2 corresponds to the docsCableMacLayer \n            RF MAC interface. \n\n            ifIndex values 3 and 4 correspond to the \n            docsCableDownstream and docsCableUpstream interfaces, \n            respectively, which are not separate MAC bridge port \n            interfaces. Bit positions 3 and 4 are unused in this type;\n            they must be saved and reported as configured, but \n            otherwise ignored. \n\n            ifIndex values 5 through 15 are reserved for individual\n            CPE interfaces for devices that implement more than one\n            CPE interface. In such devices, DocsL2vpnIfList bit \n            position 1 corresponds to the set of all CPE interfaces.\n            A CM with more than one CPE interface MAY assign a \n            DocsL2vpnIfList bit position within the range of 5..15 to\n            refer to the single primary CPE interface.\n\n            ifIndex value 16 is assigned to any embedded Multimedia \n            Terminal Adapter (eMTA) as defined by PacketCable.\n\n            ifIndex value 17 is assigned to the IP management host \n            interface of an embedded Set Top Box (eSTB). ifIndex value \n            18 is reserved for the DOCSIS Set-top Gateway (DSG) traffic\n            delivered to an eSTB. \n\n            ifIndex values 19 through 31 are\n            reserved for future defined embedded Service Application."
    status = 'current'
    namedValues = NamedValues(("eCm", 0), ("cmci", 1), ("docsCableMacLayer", 2), ("docsCableDownstream", 3), ("docsCableUpstream", 4), ("eMta", 16), ("eStbIp", 17), ("eStbDsg", 18))

mibBuilder.exportSymbols("CLAB-DEF-MIB", clabCVCRootCACert=clabCVCRootCACert, clabGWMib=clabGWMib, pktcEUEMibs=pktcEUEMibs, PYSNMP_MODULE_ID=cableLabs, clabFunction=clabFunction, clabFuncProprietary=clabFuncProprietary, pktcEnhancements=pktcEnhancements, clabProjPacketCable=clabProjPacketCable, DocsL2vpnIfList=DocsL2vpnIfList, pktcPACMTC=pktcPACMTC, clabProjWireless=clabProjWireless, clabMfgCVCCert=clabMfgCVCCert, clabSecurity=clabSecurity, clabSecCertObject=clabSecCertObject, pktcESSupportMibs=pktcESSupportMibs, clabGREMib=clabGREMib, pktcSMAMibs=pktcSMAMibs, clabSecOlcaObject=clabSecOlcaObject, clabProjDocsis=clabProjDocsis, pktcPACMMibs=pktcPACMMibs, clabCVCCACert=clabCVCCACert, clabMAPMib=clabMAPMib, clabTopoMib=clabTopoMib, clabProject=clabProject, clabAniDevMib=clabAniDevMib, pktcApplicationMibs=pktcApplicationMibs, pktcSupportMibs=pktcSupportMibs, clabProjCableHome=clabProjCableHome, pktcPACMUserMib=pktcPACMUserMib, clabCommonMibs=clabCommonMibs, cableLabs=cableLabs, clabSrvcPrvdrRootCACert=clabSrvcPrvdrRootCACert, pktcSecurity=pktcSecurity, pktcPACMUEMib=pktcPACMUEMib, clabDNSMib=clabDNSMib, clabFuncMib2=clabFuncMib2, clabProjOpenCable=clabProjOpenCable, pktcLawfulIntercept=pktcLawfulIntercept, clabUpsMib=clabUpsMib, pktcEUEDeviceMibs=pktcEUEDeviceMibs, clabMfgCACert=clabMfgCACert)
