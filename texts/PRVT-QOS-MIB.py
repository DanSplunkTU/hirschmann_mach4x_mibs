#
# PySNMP MIB module PRVT-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-QOS-MIB
# Produced by pysmi-1.1.3 at Sun Nov 28 20:01:31 2021
# On host fv-az33-735 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
prvt_products, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "prvt-products")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, ObjectIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Counter32, Bits, Integer32, iso, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Counter32", "Bits", "Integer32", "iso", "Unsigned32", "NotificationType")
TimeStamp, TruthValue, RowPointer, MacAddress, RowStatus, DisplayString, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "RowPointer", "MacAddress", "RowStatus", "DisplayString", "TextualConvention", "StorageType")
prvtQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 7, 1))
prvtQosMIB.setRevisions(('2010-03-23 00:00', '2009-04-24 00:00', '2008-10-01 00:00', '2007-11-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtQosMIB.setRevisionsDescriptions(('Added support for QOS over VLAN.', 'Changed hqosVirtualSchedulerParent to type TNamedItemOrEmpty.\n                         Added some TCs.  Miscellaneous additional clean up.', 'Miscellaneous clean up.', 'Initial version.',))
if mibBuilder.loadTexts: prvtQosMIB.setLastUpdated('201003230000Z')
if mibBuilder.loadTexts: prvtQosMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtQosMIB.setContactInfo(' BATM/Telco Systems Support team\n\t\t\t\tEmail: \n\t\t\t\tFor North America: techsupport@telco.com\n\t\t\t\tFor North Europe: support@batm.de, info@batm.de\n\t\t\t\tFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtQosMIB.setDescription('This  document is the SNMP MIB module to manage the QoS parameters.')
serviceAccessSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7))
class TNamedItem(TextualConvention, OctetString):
    description = 'The name of an item.\n\n        Note, use only NVT ASCII displayable characters\n        here, no control characters, no UTF-8, etc.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TNamedItemOrEmpty(TextualConvention, OctetString):
    description = 'The name of an item, or an empty string.  When used in a reference\n        (TNamedItemOrEmpty) the item name entry must exist in the table.\n\n        Note, use only NVT ASCII displayable characters\n        here, no control characters, no UTF-8, etc.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 6), )
class TQEncapVal(TextualConvention, Unsigned32):
    description = 'A valid Vlan ID in the range 1-4093, or 65535.'
    status = 'current'

class TLspExpValue(TextualConvention, Integer32):
    reference = ''
    description = 'MPLS Experimental bits. -1 means not set.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class Dot1PPriority(TextualConvention, Integer32):
    reference = ''
    description = 'IEEE 802.1p priority.  zero is lowest, seven is highest.\n\t-1 means not set'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), )
class TFCName(TextualConvention, OctetString):
    description = 'The name of a Forwarding Class entry.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TFCNameOrEmpty(TextualConvention, Integer32):
    description = 'The name of a Forwarding Class entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class TDSCPValue(TextualConvention, Integer32):
    description = 'The value of a Differential Services Code Point.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class TItemDescription(TextualConvention, OctetString):
    description = 'Description for an item.  Note, use only NVT ASCII displayable characters\n        here, no control characters, no UTF-8, etc.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 30)

class TQueueId(TextualConvention, Integer32):
    description = 'The identification number of a queue. zero means not set.\n         legal values when used for an index are [1..32].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TIngressQueueId(TextualConvention, Integer32):
    description = 'The identification number of a queue. zero means not set. legal\n         values when used for an index are [1..32].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TEgressQueueId(TextualConvention, Integer32):
    description = 'The identification number of an egress queue. zero means not set.\n         legal values when used for an index are [1..32].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 32), )
class TSapIngressPolicyId(TextualConvention, Unsigned32):
    description = 'The identification number of a SAP ingress policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class TSapIngressPolicyIdOrNone(TextualConvention, Unsigned32):
    description = 'The identification number of a SAP ingress policy.\n         A value of 0 indicates no policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class TSapEgressPolicyId(TextualConvention, Unsigned32):
    description = 'The identification number of a SAP egress policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 64)

class TSapEgressPolicyIdOrNone(TextualConvention, Unsigned32):
    description = 'The identification number of a SAP egress policy.\n         A value of 0 indicates no policy.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 64)

class TNetworkPolicyId(TextualConvention, OctetString):
    description = 'The identification string of a network policy.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class TNetworkPolicyIdOrNone(TextualConvention, OctetString):
    description = 'The identification string of a network policy.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class TItemMatch(TextualConvention, Integer32):
    description = 'When set to off, the item is not matched.\n         When set to false, packets without the item match the filter.\n         When set to true, packets with the item match the filter.\n        '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("false", 2), ("true", 3))

class TPriority(TextualConvention, Integer32):
    description = 'The priority to apply to a packet'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("low", 1), ("high", 2))

class TPriorityOrDefault(TextualConvention, Integer32):
    description = 'The priority to apply to a packet.\n         When set to default(3), the priority from the default-action is used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("low", 1), ("high", 2), ("default", 3))

class TProfile(TextualConvention, Integer32):
    description = 'The profile marking of a packet at the ingress.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("in", 1), ("out", 2))

class TCIRRate(TextualConvention, Integer32):
    description = 'The rate to be used in kbps.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100000000)

class TPIRRate(TextualConvention, Integer32):
    description = 'The rate to be used in kbps.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100000000)

class TRateValue(TextualConvention, Integer32):
    description = 'The percentage of maximum rate allowed.'
    status = 'current'

class TLevel(TextualConvention, Integer32):
    description = 'The level of the specified entity while feeding into the parent.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class TWeight(TextualConvention, Integer32):
    description = 'The weight of the specified entity while feeding into the parent.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class TTreshold(TextualConvention, Integer32):
    description = 'The treshold to be used in %.Valid values are 25,50,75,100%.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(25, 100)

class TConformanceLevel(TextualConvention, Integer32):
    description = 'The conformance level green or yellow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

class TShaperId(TextualConvention, Integer32):
    description = 'The ID of a Shaper Profile.'
    status = 'current'

class TTailDropId(TextualConvention, Integer32):
    description = 'The ID of a TailDrop Profile.'
    status = 'current'

class TSredId(TextualConvention, Integer32):
    description = 'The ID of a SRED Profile.'
    status = 'current'

class TSSchedulingProfile(TextualConvention, Integer32):
    description = 'The ID of a Scheduling Profile.'
    status = 'current'

class TSlopePolicy(TextualConvention, Integer32):
    description = 'The ID of a Wred Profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 64)

tFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1))
hqosSapIngressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2))
hqosSapEgressObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3))
hqosNetworkObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4))
hqosNetworkQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5))
hqosSchedulerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6))
tWredObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7))
tCongestionAvoidanceProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8))
tShaperObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9))
tWfqObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10))
qosSchedulingProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11))
qosServicePolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12))
qosNetworkPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13))
qosGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14))
qosServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15))
qosInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16))
qosStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17))
qosVlanPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18))
qosVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19))
tFCNameTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1), )
if mibBuilder.loadTexts: tFCNameTable.setStatus('current')
if mibBuilder.loadTexts: tFCNameTable.setDescription('A list of all Forwarding Class Names.  Forwarding Class Name entries\n        must exist here and be active before they can be referenced\n        elsewhere (e.g. qos queue).')
tFCNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tFCValue"))
if mibBuilder.loadTexts: tFCNameEntry.setStatus('current')
if mibBuilder.loadTexts: tFCNameEntry.setDescription('Information about a particular Forwarding Class Name, particularly\n         the Forwarding Class value.\n\n         Some default entries are created by the agent.\n         Default entries have tFCNameStorageType permanent,\n         and can not be deleted.\n\n         Entries cannot be created by user but maybe supported in future.\n\n         An attempt to create a row in this table would return no creation.')
tFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tFCValue.setReference('')
if mibBuilder.loadTexts: tFCValue.setStatus('current')
if mibBuilder.loadTexts: tFCValue.setDescription('Forwarding class number as used in the tables below.')
tFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 2), RowStatus())
if mibBuilder.loadTexts: tFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: tFCRowStatus.setDescription('Row Status of the entry.')
tFCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 3), StorageType().clone('nonVolatile'))
if mibBuilder.loadTexts: tFCStorageType.setStatus('current')
if mibBuilder.loadTexts: tFCStorageType.setDescription('The storage type of this row in the table.')
tFCName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 4), TFCName())
if mibBuilder.loadTexts: tFCName.setReference('')
if mibBuilder.loadTexts: tFCName.setStatus('current')
if mibBuilder.loadTexts: tFCName.setDescription('FC name.')
tFCNameLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 1, 1, 1, 5), TimeStamp())
if mibBuilder.loadTexts: tFCNameLastChanged.setStatus('current')
if mibBuilder.loadTexts: tFCNameLastChanged.setDescription('Timestamp of last change to this row in tFCNameTable.')
hqosSapIngressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: hqosSapIngressTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressTable.setDescription('This table specifies HQoS service ingress  policy configuration.')
hqosSapIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"))
if mibBuilder.loadTexts: hqosSapIngressEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressEntry.setDescription('Information about a particular HQoS Sap Ingress Policy.\n\n         sap-ingress policy (1) is the default entry.\n\n         Default Entry is created by the agent, other entries are\n         created by user.\n\n         Default Entry cannot be modified/deleted. The other\n         entries are deleted by user.\n\n         There is no StorageType object, entries have a presumed\n         StorageType of nonVolatile.\n        ')
hqosSapIngressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 1), TSapIngressPolicyId())
if mibBuilder.loadTexts: hqosSapIngressIndex.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressIndex.setDescription('The identifier of a HQoS service ingress policy.\n        The policy ID is the index to this table.')
hqosSapIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressRowStatus.setDescription('Row Status for the policy. The deletion of this row has\n         an action of removing the dependent rows in the following\n         tables :\n           - hqosSapIngressQueueTable\n           - hqosSapIngressDSCPTable\n           - hqosSapIngressDot1pTable\n        ')
hqosSapIngressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDescription.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDescription.setDescription('User-provided description of the policy.')
hqosSapIngressDefaultDscpFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 4), Integer32().clone(4))
if mibBuilder.loadTexts: hqosSapIngressDefaultDscpFC.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDefaultDscpFC.setDescription('All traffic that does not match the specified dot1p, DSCP,\n         is classified as the default action forwarding class.\n\n         The default forwarding class is best-effort.')
hqosSapIngressDefaultVptFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: hqosSapIngressDefaultVptFC.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDefaultVptFC.setDescription('The priority to assign to traffic ingressing as the default\n         action queue.')
hqosSapIngressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 1, 1, 6), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressLastChanged.setDescription('Timestamp of last change to this row in tSapIngressTable.')
hqosSapIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2), )
if mibBuilder.loadTexts: hqosSapIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueTable.setDescription("Information about all HQoS service ingress policies' queues.")
hqosSapIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressQueue"), (0, "PRVT-QOS-MIB", "hqosSapIngressQueueParent"))
if mibBuilder.loadTexts: hqosSapIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueEntry.setDescription('Information about a particular queue for a service ingress policy.\n\n         Some default queues are created by the system, they cannot be removed.\n\n         Other entries are created by user.')
hqosSapIngressQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hqosSapIngressQueue.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueue.setDescription('The queue ID is used as the secondary index to the table entry.')
hqosSapIngressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 2), TNamedItemOrEmpty())
if mibBuilder.loadTexts: hqosSapIngressQueueParent.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
hqosSapIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
hqosSapIngressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
hqosSapIngressQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 61)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueServWfq.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueServWfq.setDescription('The WFQ profile that needs to be used by the scheduler to which this queue\n         would be feeding to.')
hqosSapIngressQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueType.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueType.setDescription('This object specifies the traffic type of the queue.')
hqosSapIngressQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueHiPriority.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueHiPriority.setDescription('Is this a high-priority queue.')
hqosSapIngressQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 8), TSlopePolicy().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressQueueWred.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueWred.setDescription('WRED profile applied to this queue.')
hqosSapIngressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressQueueLastChanged.setDescription('Timestamp of last change to this row in hqosSapIngressQueueTable.')
hqosSapIngressDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3), )
if mibBuilder.loadTexts: hqosSapIngressDSCPTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPTable.setDescription('A list of all DSCP entries for service ingress policies.')
hqosSapIngressDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressDSCP"))
if mibBuilder.loadTexts: hqosSapIngressDSCPEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPEntry.setDescription('Information about a particular DSCP entry for a service ingress policy.\n\n        Entries are created by user.\n        Entries are deleted by user.\n\n        There is no StorageType object, entries have a presumed\n        StorageType of nonVolatile.\n\n        In the event that one policy has multiple entries, and\n        the hqosSapIngressDSCP values are the same, only one queue\n        will be created (the queue for the lexicographically\n        first hqosSapIngressDSCP).\n        ')
hqosSapIngressDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 1), TDSCPValue())
if mibBuilder.loadTexts: hqosSapIngressDSCP.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCP.setDescription('Differentiated Services Code Point (DSCP) value\n\t\tas to match in the packet. This value is also used \n\t\tindex so that for any DSCP value there\n        is only one possible disposition queue and priority.')
hqosSapIngressDSCPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDSCPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPRowStatus.setDescription('This object allows creation/deletion of rows in this table.')
hqosSapIngressDSCPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDSCPFC.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPFC.setDescription('The forwarding class into which the matching traffic should\n         be classified.')
hqosSapIngressDSCPConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 4), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDSCPConformance.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPConformance.setDescription('Previous conformance level: green or yellow.')
hqosSapIngressDSCPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressDSCPLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDSCPLastChanged.setDescription('Timestamp of last change to this row in hqosSapIngressDSCPTable.')
hqosSapIngressDot1pTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4), )
if mibBuilder.loadTexts: hqosSapIngressDot1pTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pTable.setDescription('A list of all dot1p entries for service ingress policies.')
hqosSapIngressDot1pEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressDot1pValue"))
if mibBuilder.loadTexts: hqosSapIngressDot1pEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pEntry.setDescription('Information about a particular dot1p match for a service ingress policy.\n         Entries are created by user.\n         Entries are deleted by user.\n        ')
hqosSapIngressDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 1), Dot1PPriority())
if mibBuilder.loadTexts: hqosSapIngressDot1pValue.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pValue.setDescription('Dot1p value to match in the packet. This value is\n        also used as an index so that for any dot1p value there\n        is only one possible disposition queue and priority.\n        ')
hqosSapIngressDot1pRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDot1pRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pRowStatus.setDescription("Row Status for this service ingress policy's dot1p entry.")
hqosSapIngressDot1pFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressDot1pFC.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pFC.setDescription('The forwarding class into which the matching traffic\n         should be classified.')
hqosSapIngressDot1pConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 4), TConformanceLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressDot1pConformance.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pConformance.setDescription('Previous conformance level: green or yellow')
hqosSapIngressDot1pLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 4, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSapIngressDot1pLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressDot1pLastChanged.setDescription('Timestamp of last change to this row in hqosSapIngressDot1pTable.')
hqosSapIngressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5), )
if mibBuilder.loadTexts: hqosSapIngressFCTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCTable.setDescription('This table maintains the mapping of a particular \n         forwarding class traffic into the specified queue.')
hqosSapIngressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapIngressIndex"), (0, "PRVT-QOS-MIB", "hqosSapIngressFCNumber"), (0, "PRVT-QOS-MIB", "hqosSapIngressFCQueueType"))
if mibBuilder.loadTexts: hqosSapIngressFCEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCEntry.setDescription("Information about a particular service ingress policy's\n         forwarding class mappings to queues.\n\n         Entries are created and deleted by user.")
hqosSapIngressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosSapIngressFCNumber.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCNumber.setDescription('Forwarding class number.')
hqosSapIngressFCQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3))))
if mibBuilder.loadTexts: hqosSapIngressFCQueueType.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCQueueType.setDescription('The type of the queue to be assigned to the FC.')
hqosSapIngressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapIngressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCRowStatus.setDescription('Row Status for this queue.')
hqosSapIngressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 4), TIngressQueueId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressFCQueue.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCQueue.setDescription('The specific queue to be used for packets in this forwarding class.')
hqosSapIngressFCQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapIngressFCQueueParent.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCQueueParent.setDescription('The parent of the specific queue for this FC')
hqosSapIngressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 2, 5, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosSapIngressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapIngressFCLastChanged.setDescription('Timestamp of last change to this row in hqosSapIngressFCTable.')
hqosSapEgressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1), )
if mibBuilder.loadTexts: hqosSapEgressTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressTable.setDescription('Information about all service egress policies.')
hqosSapEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"))
if mibBuilder.loadTexts: hqosSapEgressEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressEntry.setDescription('Information about a particular service egress policy.\n         Entries are created by user.\n         Entries are deleted by user.\n         The default service egress policy (1) cannot be changed or\n         destroyed.\n        ')
hqosSapEgressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 1), TSapEgressPolicyId())
if mibBuilder.loadTexts: hqosSapEgressIndex.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressIndex.setDescription('The service egress policy ID is used as index for the table.')
hqosSapEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressRowStatus.setDescription("Row Status of this policy's entry.")
hqosSapEgressDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressDescription.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressDescription.setDescription('User-supplied description of this service egress policy.')
hqosSapEgressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 1, 1, 6), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressLastChanged.setDescription('Timestamp of last change to this row in hqosSapEgressTable.')
hqosSapEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2), )
if mibBuilder.loadTexts: hqosSapEgressQueueTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueTable.setDescription("Information about service egress policies' queues.")
hqosSapEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressQueueIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressQueueParent"))
if mibBuilder.loadTexts: hqosSapEgressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueEntry.setDescription('Information about a particular service egress queue.\n        Entries are created by user.\n        Entries are deleted by user.')
hqosSapEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 1), TEgressQueueId())
if mibBuilder.loadTexts: hqosSapEgressQueueIndex.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueIndex.setDescription('The number of a queue.Zero is not allowed.')
hqosSapEgressQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 2), TNamedItemOrEmpty())
if mibBuilder.loadTexts: hqosSapEgressQueueParent.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueParent.setDescription('The scheduler to which this queue would be feeding to.')
hqosSapEgressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueRowStatus.setDescription('Row Status of the entry.')
hqosSapEgressQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueLevel.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.')
hqosSapEgressQueueServWfq = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 5), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueServWfq.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueServWfq.setDescription('The WFQ profile that needs to be used by the scheduler to which this queue\n         would be feeding to.')
hqosSapEgressQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueType.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueType.setDescription('This object specifies the traffic type of the queue.')
hqosSapEgressQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueHiPriority.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueHiPriority.setDescription('Is this a high-priority queue?')
hqosSapEgressQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 8), TSlopePolicy()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressQueueWred.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueWred.setDescription('ID of WRED profile applied to this queue.')
hqosSapEgressQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressQueueLastChanged.setDescription('Timestamp of last change to this row in hqosSapEgressQueueTable.')
hqosSapEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3), )
if mibBuilder.loadTexts: hqosSapEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCTable.setDescription("Information about a particular service egress policy's\n         forwarding class mappings to queues.\n\n         Entries are created and deleted by user.")
hqosSapEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSapEgressIndex"), (0, "PRVT-QOS-MIB", "hqosSapEgressFCNumber"), (0, "PRVT-QOS-MIB", "hqosSapEgressFCEntryType"))
if mibBuilder.loadTexts: hqosSapEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCEntry.setDescription("Information about a particular service egress policy's\n        forwarding class mappings to queues and dot1p values.\n        Entries are created by user.\n        Entries are deleted by user.")
hqosSapEgressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosSapEgressFCNumber.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCNumber.setDescription('Forwarding class number.')
hqosSapEgressFCEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3), ("dscp", 4), ("dot1p", 5))))
if mibBuilder.loadTexts: hqosSapEgressFCEntryType.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCEntryType.setDescription('The type of the configuration entry for this FC.')
hqosSapEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSapEgressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCRowStatus.setDescription('Row Status for this queue.')
hqosSapEgressFCQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 4), TEgressQueueId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCQueue.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCQueue.setDescription('The queue to use for packets with this forwarding class.\n\t\tA valid queue-id must be specified before setting the row status\n\t\tto active.')
hqosSapEgressFCQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCQueueParent.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCQueueParent.setDescription('The name of the parent scheduler for the specific queue.')
hqosSapEgressFCDot1PValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 6), Dot1PPriority().clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCDot1PValue.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCDot1PValue.setDescription('The 802.1p value to use for packet remarking.Currently not supported.')
hqosSapEgressFCDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 7), TDSCPValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSapEgressFCDSCPValue.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCDSCPValue.setDescription('The DSCP value to use for packets remarking. Currently not supported.')
hqosSapEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 3, 3, 1, 8), TimeStamp())
if mibBuilder.loadTexts: hqosSapEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSapEgressFCLastChanged.setDescription('Timestamp of last change to this row in hqosSapEgressFCTable.')
hqosNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1), )
if mibBuilder.loadTexts: hqosNetworkPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyTable.setDescription('HQOS network policy table. Keeps comman information of the network policy ')
hqosNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"))
if mibBuilder.loadTexts: hqosNetworkPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyEntry.setDescription('Information about a particular Network Policy.\n\n         Network policy DefPol(1) is the default entry.\n\n         Default Entry is created by the agent, other entries are\n         created by user.\n\n         Default Entry cannot be modified/deleted. The other\n         entries are deleted by user.\n\n         There is no StorageType object, entries have a presumed\n         StorageType of nonVolatile.\n\n         The default Egress FC entries are created as an action\n         of setting the rowstatus.\n        ')
hqosNetworkPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 1), TNetworkPolicyId())
if mibBuilder.loadTexts: hqosNetworkPolicyIndex.setReference('')
if mibBuilder.loadTexts: hqosNetworkPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyIndex.setDescription('Network policy index')
hqosNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyRowStatus.setDescription('Row status of the network policy\n    \t\t\t HQoS network policy is created with createAndWait(5).')
hqosNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyDescription.setDescription('User-defined description of the network policy')
hqosNetworkPolicyIngressDefaultActionFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 4), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyIngressDefaultActionFC.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyIngressDefaultActionFC.setDescription('Network policy default action FC.\n                 Currently not used. Reserved for future use.')
hqosNetworkPolicyIngressConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 5), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkPolicyIngressConformance.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyIngressConformance.setDescription('Defines network conformance level green or yellow.\n                 Currently not used. Reserved for future use.')
hqosNetworkPolicyEgressRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosNetworkPolicyEgressRemark.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyEgressRemark.setDescription('Verifies if remarking is set on network egress.\n    \t\t\t Remarking is enabled by default')
hqosNetworkPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 1, 1, 7), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkPolicyLastChanged.setDescription('Timestamp of last change to this row in hqosNetworkPolicyTable.')
hqosNetworkIngressLSPEXPTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2), )
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPTable.setDescription("Information about network ingress policies' mappings.")
hqosNetworkIngressLSPEXPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"), (0, "PRVT-QOS-MIB", "hqosNetworkIngressLSPEXP"))
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPEntry.setDescription('Information about LSP EXP mapping for a network policy.\n\n         Some default entries are created by the agent for the\n         default network policy DefPol(1). These cannot be deleted or\n         modified. Other entries are created/deleted by user.\n        ')
hqosNetworkIngressLSPEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 1), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXP.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXP.setDescription('LSP EXP bit value.')
hqosNetworkIngressLSPEXPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPRowStatus.setDescription('Row status of network ingress mapping')
hqosNetworkIngressLSPEXPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 3), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPFC.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPFC.setDescription('Mapping of LSP EXP to forwarding class.')
hqosNetworkIngressLSPEXPConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 4), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPConformance.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPConformance.setDescription('Indentifies conformance level green or yellow for a frame with a LSP EXP bit value.')
hqosNetworkIngressLSPEXPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 2, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkIngressLSPEXPLastChanged.setDescription('Timestamp of last change to this row in hqosNetworkIngressLSPEXPTable.\n        Currently not supported')
hqosNetworkEgressFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3), )
if mibBuilder.loadTexts: hqosNetworkEgressFCTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCTable.setDescription("Information about all network policies' egress FC traffic disposition.")
hqosNetworkEgressFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkPolicyIndex"), (0, "PRVT-QOS-MIB", "hqosNetworkEgressFCNumber"), (0, "PRVT-QOS-MIB", "hqosNetworkEgressFCConformance"))
if mibBuilder.loadTexts: hqosNetworkEgressFCEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCEntry.setDescription("Information about a particular network policy's egress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the hqosNetworkPolicyTable.\n        ")
hqosNetworkEgressFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosNetworkEgressFCNumber.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCNumber.setDescription('The number of the forwarding class (FC).')
hqosNetworkEgressFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkEgressFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCRowStatus.setDescription('The row status of this row. Only the value of createAndWait(5) is available for\n         row creation')
hqosNetworkEgressFCLspExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 3), TLspExpValue().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkEgressFCLspExpValue.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCLspExpValue.setDescription('Network egress remarking value for LSP EXP bits.')
hqosNetworkEgressFCDot1Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 4), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkEgressFCDot1Priority.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCDot1Priority.setDescription('Network egress remarking value for Dot1p. \n        Currently not supported. Reserved for future use.')
hqosNetworkEgressFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkEgressFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCLastChanged.setDescription('Timestamp of last change to this row in hqosNetworkEgressFCTable.')
hqosNetworkEgressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 4, 3, 1, 6), TConformanceLevel())
if mibBuilder.loadTexts: hqosNetworkEgressFCConformance.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkEgressFCConformance.setDescription('Conformance level: green or yellow.')
hqosNetworkQueuePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1), )
if mibBuilder.loadTexts: hqosNetworkQueuePolicyTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicyTable.setDescription('Information about network queue policy.')
hqosNetworkQueuePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"))
if mibBuilder.loadTexts: hqosNetworkQueuePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicyEntry.setDescription('Information about network egress queue configuration')
hqosNetworkQueuePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosNetworkQueuePolicy.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicy.setDescription('Name of network egress queue policy.\n        \n        This is the index in the table. Should be no more than 6 characters long.')
hqosNetworkQueuePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueuePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicyRowStatus.setDescription('The row status. Used for creation of a row in the table.')
hqosNetworkQueuePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueuePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicyDescription.setDescription('User-defined description of the network policy. ')
hqosNetworkQueuePolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 1, 1, 8), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueuePolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueuePolicyLastChanged.setDescription('The time when an object in the row was last changed.\n        Currently not supported.')
hqosNetworkQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2), )
if mibBuilder.loadTexts: hqosNetworkQueueTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueTable.setDescription('Information about network queues.')
hqosNetworkQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"), (0, "PRVT-QOS-MIB", "hqosNetworkQueue"))
if mibBuilder.loadTexts: hqosNetworkQueueEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueEntry.setDescription('Network queue configuration')
hqosNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: hqosNetworkQueue.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueue.setDescription('Network queue identifier.\n        The queue ID is used as an index of the table entry.')
hqosNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
hqosNetworkQueueParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 3), TNamedItemOrEmpty().clone(hexValue=""))
if mibBuilder.loadTexts: hqosNetworkQueueParent.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueParent.setDescription('Network queue parent is not configurable. Reserved for future use.')
hqosNetworkQueueLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 4), TLevel().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueLevel.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueLevel.setDescription('This specifies the level of priority while feeding to the parent.\n        Priority levels are high(1) or low(2)')
hqosNetworkQueueWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueWfqProfile.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueWfqProfile.setDescription('The WFQ profile for this network queue')
hqosNetworkQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueType.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueType.setDescription('This object specifies the type of the network queue.\n        The possible values are:\n\t\t-\tunknown(0) \n\t\t-\tunicast(1)\n\t\t-\tmulticast(2)\n\t\t-\tbroadcast(3)')
hqosNetworkQueueHiPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hqosNetworkQueueHiPriority.setStatus('obsolete')
if mibBuilder.loadTexts: hqosNetworkQueueHiPriority.setDescription('The object specifies is this a high-priority queue.\n        This object is obsolete, use object hqosNetworkQueueLevel instead')
hqosNetworkQueueWred = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 8), TSlopePolicy().subtype(subtypeSpec=ValueRangeConstraint(57, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueWred.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueWred.setDescription('ID of WRED profile applied to this queue.')
hqosNetworkQueueShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 9), TShaperId().subtype(subtypeSpec=ValueRangeConstraint(17, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueShaper.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueShaper.setDescription('ID of shaping profile applied to this queue. There is no default value')
hqosNetworkQueueLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 2, 1, 10), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueueLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueLastChanged.setDescription('Timestamp of last change to this row in hqosNetworkQueueTable.\n        Not supported. Reserved for future use.')
hqosNetworkQueueFCTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3), )
if mibBuilder.loadTexts: hqosNetworkQueueFCTable.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCTable.setDescription('Information which network egress queue traffic with a FC assigned on ingress feeds to.')
hqosNetworkQueueFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosNetworkQueuePolicy"), (0, "PRVT-QOS-MIB", "hqosNetworkQueueFCNumber"), (0, "PRVT-QOS-MIB", "hqosNetworkQueueFCType"))
if mibBuilder.loadTexts: hqosNetworkQueueFCEntry.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCEntry.setDescription('Forwarding class to network queue configuratiom')
hqosNetworkQueueFCNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: hqosNetworkQueueFCNumber.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCNumber.setDescription('The number of the forwarding class as referenced in the tFCNameTable.')
hqosNetworkQueueFCType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("unicast", 1), ("multicast", 2), ("broadcast", 3))))
if mibBuilder.loadTexts: hqosNetworkQueueFCType.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCType.setDescription('The type of the queue to be assigned to the forwarding class.\n        The possible values of this object are:\n\t\t- unknown(0) \n\t\t- unicast(1) \n\t\t- multicast(2) \n\t\t- broadcast(3) \n\t\tThis object is part of the index.')
hqosNetworkQueueFCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosNetworkQueueFCRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCRowStatus.setDescription('Row Status for this queue.\n        The object serves to create entries in the table.')
hqosNetworkQueueFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 4), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosNetworkQueueFC.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFC.setDescription('The queue id to be mapped.')
hqosNetworkQueueFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 5, 3, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosNetworkQueueFCLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosNetworkQueueFCLastChanged.setDescription('The time when an object in the row was last changed.')
hqosSchedulerPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1), )
if mibBuilder.loadTexts: hqosSchedulerPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyTable.setDescription('Information about a service scheduler policy. ')
hqosSchedulerPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSchedulerPolicyName"), (0, "PRVT-QOS-MIB", "hqosSchedulerPolicyType"))
if mibBuilder.loadTexts: hqosSchedulerPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyEntry.setDescription('Information about a particular service scheduler policy.')
hqosSchedulerPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosSchedulerPolicyName.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyName.setDescription('This is the index of the table. Should be no more that 6 characters long.')
hqosSchedulerPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosSchedulerPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyRowStatus.setDescription('Row Status of the entry.\n        The entry in the table that serves to create rows.')
hqosSchedulerPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2), ("network", 3))))
if mibBuilder.loadTexts: hqosSchedulerPolicyType.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyType.setDescription('Type of the scheduler - ingress or egress.\n        The object can accept one of the three values:\n\t\t-\tunknown(0)\n\t\t-\tingress(1)\n\t\t-\tegress (2)\n\t\tThe value unknown is the default one, but causes the row to be in notReady(3) state.\n\t\tnetwork (3) is not supported')
hqosSchedulerPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosSchedulerPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyDescription.setDescription('User-description for the scheduler policy')
hqosSchedulerPolicyLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 1, 1, 5), TimeStamp())
if mibBuilder.loadTexts: hqosSchedulerPolicyLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosSchedulerPolicyLastChanged.setDescription('Timestamp of last change to this row in hqosSchedulerPolicyTable.  Reserved for future use.')
hqosVirtualSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2), )
if mibBuilder.loadTexts: hqosVirtualSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerTable.setDescription('Information about schedulers belonging to scheduler policies')
hqosVirtualSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "hqosSchedulerPolicyName"), (0, "PRVT-QOS-MIB", "hqosSchedulerPolicyType"), (0, "PRVT-QOS-MIB", "hqosVirtualSchedulerName"), (0, "PRVT-QOS-MIB", "hqosVirtualSchedulerLevel"))
if mibBuilder.loadTexts: hqosVirtualSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerEntry.setDescription('Information about a particular Scheduler belonging to a Scheduler \n        Policy.')
hqosVirtualSchedulerName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: hqosVirtualSchedulerName.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerName.setDescription('Name of the scheduler.')
hqosVirtualSchedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hqosVirtualSchedulerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerRowStatus.setDescription('Row Status of the entry.\n        Part of the index together with the policy name and the tier. Should be up to 6 characters long.')
hqosVirtualSchedulerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerDescription.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerDescription.setDescription('User-defined description for the scheduler policy.\n        Note this is currently not supported (returns empty string, writes not accepted).\n        Reserved for future use.')
hqosVirtualSchedulerParent = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerParent.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerParent.setDescription('The scheduler to which this scheduler would be feeding to.')
hqosVirtualSchedulerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 5), TLevel())
if mibBuilder.loadTexts: hqosVirtualSchedulerLevel.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerLevel.setDescription('This specifies the level of priority while feeding to the parent.')
hqosVirtualSchedulerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerPriority.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerPriority.setDescription('Priority of the scheduler.')
hqosVirtualSchedulerWfqProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerWfqProfile.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerWfqProfile.setDescription('The WFQ profile number for this scheduler.')
hqosVirtualSchedulerShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 8), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hqosVirtualSchedulerShaper.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerShaper.setDescription('ID of shaping profile applied to scheduler. There is no default value')
hqosVirtualSchedulerLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 6, 2, 1, 9), TimeStamp())
if mibBuilder.loadTexts: hqosVirtualSchedulerLastChanged.setStatus('current')
if mibBuilder.loadTexts: hqosVirtualSchedulerLastChanged.setDescription('Timestamp of last change to this row in hqosVirtualSchedulerTable.')
tWredProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1), )
if mibBuilder.loadTexts: tWredProfileTable.setStatus('current')
if mibBuilder.loadTexts: tWredProfileTable.setDescription('WRED Profile Table. Each entry in this table defines the WRED \n        slopes for the high and the low priority traffic.')
tWredProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWredProfile"))
if mibBuilder.loadTexts: tWredProfileEntry.setStatus('current')
if mibBuilder.loadTexts: tWredProfileEntry.setDescription('WRED Profile Entry.')
tWredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 1), TSlopePolicy())
if mibBuilder.loadTexts: tWredProfile.setStatus('current')
if mibBuilder.loadTexts: tWredProfile.setDescription('tWredProfile maintains the id of the WRED Profile.')
tWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWredRowStatus.setStatus('current')
if mibBuilder.loadTexts: tWredRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
tWredDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredDescription.setStatus('current')
if mibBuilder.loadTexts: tWredDescription.setDescription('User-provided description of the profile.')
tWredGreenStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenStartAverage.setStatus('current')
if mibBuilder.loadTexts: tWredGreenStartAverage.setDescription('Drop start threshold for the green traffic in kilobytes.')
tWredGreenMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tWredGreenMaxAverage.setDescription('Absolute drop threshold for the green traffic in kilobytes.')
tWredGreenProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredGreenProbability.setStatus('current')
if mibBuilder.loadTexts: tWredGreenProbability.setDescription('Drop probability slope for the green traffic.')
tWredYellowStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowStartAverage.setStatus('current')
if mibBuilder.loadTexts: tWredYellowStartAverage.setDescription('Drop start threshold for the Yellow traffic in kilobytes.')
tWredYellowMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tWredYellowMaxAverage.setDescription('Absolute drop threshold for the Yellow traffic in kilobytes.')
tWredYellowProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredYellowProbability.setStatus('current')
if mibBuilder.loadTexts: tWredYellowProbability.setDescription('Drop probability slope for the Yellow traffic.')
tWredRedStartAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedStartAverage.setStatus('current')
if mibBuilder.loadTexts: tWredRedStartAverage.setDescription('Drop start threshold for the Red traffic in kilobytes.')
tWredRedMaxAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedMaxAverage.setStatus('current')
if mibBuilder.loadTexts: tWredRedMaxAverage.setDescription('Absolute drop threshold for the Red traffic in kilobytes.')
tWredRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWredRedProbability.setStatus('current')
if mibBuilder.loadTexts: tWredRedProbability.setDescription('Drop probability slope for the Red traffic.')
tWredLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 7, 1, 1, 13), TimeStamp())
if mibBuilder.loadTexts: tWredLastChanged.setStatus('current')
if mibBuilder.loadTexts: tWredLastChanged.setDescription('Timestamp of when this entry was last changed.')
qosTailDropProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1), )
if mibBuilder.loadTexts: qosTailDropProfileTable.setStatus('current')
if mibBuilder.loadTexts: qosTailDropProfileTable.setDescription('Tail-drop profile Table. \n\t\tEach entry in this table defines set of tail-drop parameters that may be enforced \n\t\ton a queue or a policy.')
qosTailDropProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosTailDropProfile"))
if mibBuilder.loadTexts: qosTailDropProfileEntry.setStatus('current')
if mibBuilder.loadTexts: qosTailDropProfileEntry.setDescription('Tail-drop Profile Entry.')
qosTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 1), TTailDropId().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: qosTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosTailDropProfile.setDescription('qosTailDropProfile maintains the ID of the tail-drop profile')
qosTailDropRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosTailDropRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosTailDropRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosMaxTailDropYellowTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 3), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxTailDropYellowTreshold.setStatus('current')
if mibBuilder.loadTexts: qosMaxTailDropYellowTreshold.setDescription('Maximum tail drop yellow treshold in %.Valid values are 25,50,75,100%')
qosMaxTailDropRedTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 1, 1, 4), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxTailDropRedTreshold.setStatus('current')
if mibBuilder.loadTexts: qosMaxTailDropRedTreshold.setDescription('Maximum tail drop red treshold in %.Valid values are 25,50,75,100%')
qosSredProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2), )
if mibBuilder.loadTexts: qosSredProfileTable.setStatus('current')
if mibBuilder.loadTexts: qosSredProfileTable.setDescription('SRED profile configuration Table. \n\t\tEach entry in this table defines set of SRED parameters that may be enforced \n\t\ton a queue or a policy.')
qosSredProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosTailDropProfile"))
if mibBuilder.loadTexts: qosSredProfileEntry.setStatus('current')
if mibBuilder.loadTexts: qosSredProfileEntry.setDescription('SRED Profile Entry.')
qosSredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 1), TSredId().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: qosSredProfile.setStatus('current')
if mibBuilder.loadTexts: qosSredProfile.setDescription('qosSredProfile maintains the ID of the SRED profile')
qosSredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSredRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosSredRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosMaxSredYellowTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 3), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredYellowTreshold.setStatus('current')
if mibBuilder.loadTexts: qosMaxSredYellowTreshold.setDescription('Maximum SRED yellow treshold in %.Valid values are 25,50,75,100%')
qosMaxSredYellowProbaility = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 4), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredYellowProbaility.setStatus('current')
if mibBuilder.loadTexts: qosMaxSredYellowProbaility.setDescription('Maximum SRED yellow probability in %.Valid values are 25,50,75,100%')
qosMaxSredRedTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 5), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredRedTreshold.setStatus('current')
if mibBuilder.loadTexts: qosMaxSredRedTreshold.setDescription('Maximum SRED Red treshold in %.Valid values are 25,50,75,100%')
qosMaxSredRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 8, 2, 1, 6), TTreshold().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosMaxSredRedProbability.setStatus('current')
if mibBuilder.loadTexts: qosMaxSredRedProbability.setDescription('Maximum SRED Red probability in %.Valid values are 25,50,75,100%')
tShaperProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1), )
if mibBuilder.loadTexts: tShaperProfileTable.setStatus('current')
if mibBuilder.loadTexts: tShaperProfileTable.setDescription('Shaper profile Table. \n\t\tEach entry in this table defines set of shaping parameters that may be enforced \n\t\ton scheduler, port or queue.')
tShaperProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tShaperProfileType"), (0, "PRVT-QOS-MIB", "tShaperProfile"), (0, "PRVT-QOS-MIB", "tShaperProfileDirection"), (0, "PRVT-QOS-MIB", "tShaperProfileLevel"))
if mibBuilder.loadTexts: tShaperProfileEntry.setStatus('current')
if mibBuilder.loadTexts: tShaperProfileEntry.setDescription('Shaper Profile Entry.')
tShaperProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qos", 1), ("hqos", 2))))
if mibBuilder.loadTexts: tShaperProfileType.setStatus('current')
if mibBuilder.loadTexts: tShaperProfileType.setDescription('The type of the shaper. If used in QoS configuration(qos(1)) or\n        in HQoS configuration (hqos(2))')
tShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 2), TShaperId().subtype(subtypeSpec=ValueRangeConstraint(1, 216)))
if mibBuilder.loadTexts: tShaperProfile.setStatus('current')
if mibBuilder.loadTexts: tShaperProfile.setDescription('tShaperProfile maintains the ID of the shaping profile \n        identifying the profile.')
tShaperProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("serviceIngress", 1), ("serviceEgress", 2), ("networkEgress", 3), ("vlanEgress", 4))))
if mibBuilder.loadTexts: tShaperProfileDirection.setStatus('current')
if mibBuilder.loadTexts: tShaperProfileDirection.setDescription('The direction of the shaper - service ingress, service egress,\n        network egress or vlan egress.')
tShaperProfileLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("port", 1), ("queue", 2), ("l1Scheduler", 3), ("l2Scheduler", 4), ("qosPolicy", 5))))
if mibBuilder.loadTexts: tShaperProfileLevel.setStatus('current')
if mibBuilder.loadTexts: tShaperProfileLevel.setDescription('Level of the shaper. For QoS shapers choose qosPolicy(5).\n\t\tFor HQoS configuration l1Scheduler(3) or l2Scheduler(4)')
tShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: tShaperRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
tShaperDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperDescription.setStatus('current')
if mibBuilder.loadTexts: tShaperDescription.setDescription('User-provided description of the shaper profile.\n        Not supported.')
tShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 7), TRateValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperCIR.setStatus('current')
if mibBuilder.loadTexts: tShaperCIR.setDescription('Commited Information Rate in kbps.')
tShaperPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 8), TRateValue().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperPIR.setStatus('current')
if mibBuilder.loadTexts: tShaperPIR.setDescription('Peak information rate allowed in kbps.')
tShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperCBS.setStatus('current')
if mibBuilder.loadTexts: tShaperCBS.setDescription('The commited burst size allowed in kilobytes.')
tShaperMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 10), Integer32().clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tShaperMBS.setStatus('current')
if mibBuilder.loadTexts: tShaperMBS.setDescription('The max burst size allowed in kilobytes.')
tShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 9, 1, 1, 11), TimeStamp())
if mibBuilder.loadTexts: tShaperLastChanged.setStatus('current')
if mibBuilder.loadTexts: tShaperLastChanged.setDescription('Timestamp of when this entry was last changed.\n        Not supported.')
tWfqServiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1), )
if mibBuilder.loadTexts: tWfqServiceProfileTable.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileTable.setDescription(' ')
tWfqServiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqServiceProfileNumber"), (0, "PRVT-QOS-MIB", "tWfqServiceProfileDirection"))
if mibBuilder.loadTexts: tWfqServiceProfileEntry.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileEntry.setDescription('Information about the service WFQ profiles available.')
tWfqServiceProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61)))
if mibBuilder.loadTexts: tWfqServiceProfileNumber.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileNumber.setDescription('The ID of the WFQ service profile.\n        Profile 0 can not be modified or deleted.')
tWfqServiceProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: tWfqServiceProfileDirection.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileDirection.setDescription('The direction of the WFQ service profile - ingress or egress.')
tWfqServiceProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqServiceProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileRowStatus.setDescription('The row status of the WFQ service profile.')
tWfqServiceProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqServiceProfileWeight.setStatus('current')
if mibBuilder.loadTexts: tWfqServiceProfileWeight.setDescription('The relative weight for the packets where the WFQ service profile\n        is applied.')
tWfqNetworkProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2), )
if mibBuilder.loadTexts: tWfqNetworkProfileTable.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileTable.setDescription(' ')
tWfqNetworkProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqNetworkProfileNumber"))
if mibBuilder.loadTexts: tWfqNetworkProfileEntry.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileEntry.setDescription('Information about a the service WFQ profiles available.')
tWfqNetworkProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)))
if mibBuilder.loadTexts: tWfqNetworkProfileNumber.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileNumber.setDescription('The ID of the WFQ network profile.\n         Profile 0 can not be modified or deleted.')
tWfqNetworkProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqNetworkProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileRowStatus.setDescription('The row status of the WFQ network profile.')
tWfqNetworkProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqNetworkProfileWeight.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileWeight.setDescription('The relative weight for the packets where the WFQ network profile\n        is applied.')
tWfqNetworkProfileCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqNetworkProfileCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tWfqNetworkProfileCIRWeight.setDescription('The relative CIR weight for the packets where the WFQ network profile\n        is applied.')
tWfqSchedulerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3), )
if mibBuilder.loadTexts: tWfqSchedulerProfileTable.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileTable.setDescription(' ')
tWfqSchedulerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "tWfqSchedulerProfileNumber"), (0, "PRVT-QOS-MIB", "tWfqSchedulerProfileDirection"))
if mibBuilder.loadTexts: tWfqSchedulerProfileEntry.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileEntry.setDescription('Information about a the scheduler WFQ profiles available.')
tWfqSchedulerProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48)))
if mibBuilder.loadTexts: tWfqSchedulerProfileNumber.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileNumber.setDescription('The ID of the WFQ scheduler profile.\n         Profile 0 can not be modified or deleted.')
tWfqSchedulerProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: tWfqSchedulerProfileDirection.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileDirection.setDescription('The direction of the WFQ scheduler profile - ingress or egress.')
tWfqSchedulerProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tWfqSchedulerProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileRowStatus.setDescription('The row status of the WFQ scheduler profile.')
tWfqSchedulerProfileWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqSchedulerProfileWeight.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileWeight.setDescription('The relative weight for the packets where the WFQ scheduler profile\n        is applied.')
tWfqSchedulerProfileCIRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 220))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tWfqSchedulerProfileCIRWeight.setStatus('current')
if mibBuilder.loadTexts: tWfqSchedulerProfileCIRWeight.setDescription('The relative CIR weight for the packets where the WFQ scheduler profile\n        is applied.')
qosSchedulingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1), )
if mibBuilder.loadTexts: qosSchedulingProfileTable.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingProfileTable.setDescription('Information about scheduling profiles ')
qosSchedulingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosSchedulingProfile"), (0, "PRVT-QOS-MIB", "qosSchedulingProfileDirection"), (0, "PRVT-QOS-MIB", "qosSchedulingType"))
if mibBuilder.loadTexts: qosSchedulingProfileEntry.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingProfileEntry.setDescription('Information about a the scheduling profiles available.')
qosSchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: qosSchedulingProfile.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingProfile.setDescription('The ID of the scheduling profile.')
qosSchedulingProfileDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: qosSchedulingProfileDirection.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingProfileDirection.setDescription('The direction of the WFQ scheduler profile - ingress or egress.\n        Reserved for future use')
qosSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("sp", 1), ("wrr", 2), ("hybrid-1", 3), ("hybrid-2", 4), ("hybrid-3", 5), ("hybrid-4", 6), ("hybrid-5", 7), ("hybrid-6", 8), ("drr", 9), ("mdrr-1", 10), ("mdrr-2", 11), ("mdrr-3", 12), ("mdrr-4", 13), ("mdrr-5", 14), ("mdrr-6", 15))))
if mibBuilder.loadTexts: qosSchedulingType.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingType.setDescription('The the of scheduling profile.\n        One of the following values can be chosen\n\t\tunknown(0),\n        sp(1),\n        wrr (2),\n        hybrid-1 (3),\n        hybrid-2 (4),\n        hybrid-3 (5),\n        hybrid-4 (6),\n        hybrid-5 (7),\n        hybrid-6 (8),\n\t\tdrr (9),\n\t\tmdrr-1 (10),\n\t\tmdrr-2 (11),\n\t\tmdrr-3 (12),\n\t\tmdrr-4 (13),\n\t\tmdrr-5 (14),\n\t\tmdrr-6 (15)')
qosSchedulingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosSchedulingRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingRowStatus.setDescription('The row status of the scheduling profile.')
qosSchedulingQ1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ1Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ1Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 1.')
qosSchedulingQ2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ2Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ2Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 2.')
qosSchedulingQ3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ3Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ3Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 3.')
qosSchedulingQ4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ4Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ4Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 4.')
qosSchedulingQ5Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ5Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ5Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 5.')
qosSchedulingQ6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ6Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ6Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 6.')
qosSchedulingQ7Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ7Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ7Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 7.')
qosSchedulingQ8Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 11, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosSchedulingQ8Weight.setStatus('current')
if mibBuilder.loadTexts: qosSchedulingQ8Weight.setDescription('The relative weight for the packets where the scheduling profile\n        is applied for queue 8.')
qosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1), )
if mibBuilder.loadTexts: qosServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicyTable.setDescription('Qos service policy table. Keeps comman information for the QoS service policy ')
qosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicyEntry.setDescription('Information about a particular QoS service Policy.\n        ')
qosServicePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosServicePolicy.setReference('')
if mibBuilder.loadTexts: qosServicePolicy.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicy.setDescription('QoS service policy index. String up to 6 characters')
qosServicePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServicePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicyRowStatus.setDescription('Row status of the QoS network policy.\n    \t\t\t QoS service policy is created with createAndWait(5).')
qosServicePolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServicePolicyDescription.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicyDescription.setDescription('User-defined description of the QoS service policy')
qosServiceIngressPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2), )
if mibBuilder.loadTexts: qosServiceIngressPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosServiceIngressPolicyTable.setDescription("Information about all QoS service ingress policies' configuration.")
qosServiceIngressPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServiceIngressPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosServiceIngressPolicyEntry.setDescription("Information about a particular service policy's ingress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the qosServiceIngressTable.\n        ")
qosServPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 1), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicyShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosServPolicyShaperProfile.setDescription('Shaper profile ID. Valid shaper profile Id range is 9-57.\n        To remove the shaper profile use ID 0')
qosServPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 2), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicySchedulingProfile.setStatus('current')
if mibBuilder.loadTexts: qosServPolicySchedulingProfile.setDescription('Scheduling profile ID. Valid scheduling profile Id range\n        is 1-8. To remove the scheduling profile use ID 0')
qosServPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 2, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServPolicyTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosServPolicyTailDropProfile.setDescription('The ID of a Tail drop profile configured. Valid tail-drop profile Id range\n        is 1-5. To remove the scheduling profile use ID 0')
qosServiceIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3), )
if mibBuilder.loadTexts: qosServiceIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: qosServiceIngressQueueTable.setDescription("Information about all QoS service ingress policies' configuration.")
qosServiceIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServicePolicy"))
if mibBuilder.loadTexts: qosServiceIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: qosServiceIngressQueueEntry.setDescription("Information about a particular service policy's ingress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the qosServiceIngressTable.\n        ")
qosServInQueueQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosServInQueueQueue.setStatus('current')
if mibBuilder.loadTexts: qosServInQueueQueue.setDescription('Service queue identifier.\n        The queue ID is used as an index of the table entry.')
qosServInQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServInQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosServInQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosServInQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 4), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServInQueueTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosServInQueueTailDropProfile.setDescription('The ID of a Tail drop profile configured. Valid tail-drop profile Id range\n        is 1-5. To remove the scheduling profile use ID 0')
qosServInQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 12, 3, 1, 3), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosServInQueueShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosServInQueueShaperProfile.setDescription('Shaper profile ID. Valid shaper profile Id range is 9-57.\n        To remove the shaper profile use ID 0')
qosNetworkPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1), )
if mibBuilder.loadTexts: qosNetworkPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosNetworkPolicyTable.setDescription('Qos network policy table. Keeps comman information for the QoS network policy ')
qosNetworkPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosNetworkPolicyEntry.setDescription('Information about a particular QoS network Policy.\n\n\t\t Default Entry is created by the agent, other entries are\n         created by user.\n        ')
qosNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosNetworkPolicy.setReference('')
if mibBuilder.loadTexts: qosNetworkPolicy.setStatus('current')
if mibBuilder.loadTexts: qosNetworkPolicy.setDescription('QoS network policy index. String up to 6 characters')
qosNetworkPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosNetworkPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosNetworkPolicyRowStatus.setDescription('Row status of the QoS network policy.\n    \t\t\t QoS Network policy is created with createAndWait(5).')
qosNetworkPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 1, 1, 3), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: qosNetworkPolicyDescription.setDescription('User-defined description of the QoS network policy')
qosNetworkIngressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2), )
if mibBuilder.loadTexts: qosNetworkIngressTable.setStatus('current')
if mibBuilder.loadTexts: qosNetworkIngressTable.setDescription('Information about QoS network ingress policy.')
qosNetworkIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkIngressEntry.setStatus('current')
if mibBuilder.loadTexts: qosNetworkIngressEntry.setDescription('Information about a QoS network ingress policy.\n\n         Some default entries are created by the agent . These cannot be deleted \n         Other entries are created/deleted by user.\n        ')
qosNetworkIngressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 1), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkIngressFC.setStatus('current')
if mibBuilder.loadTexts: qosNetworkIngressFC.setDescription('Mapping of ingress traffic to forwarding class.')
qosNetworkIngressConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 2), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkIngressConformance.setStatus('current')
if mibBuilder.loadTexts: qosNetworkIngressConformance.setDescription('Indentifies conformance level green or yellow for a frames through a forwarding class.')
qosTrustDot1pMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDot1pMode.setStatus('current')
if mibBuilder.loadTexts: qosTrustDot1pMode.setDescription('Enables/disables Dot1p trust mode.\n        802.1p is taken from packet.\n        Default mode is untrusted')
qosTrustDot1pModePreservePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDot1pModePreservePriority.setStatus('current')
if mibBuilder.loadTexts: qosTrustDot1pModePreservePriority.setDescription('Enables/disables Dot1p trust mode and preserve priority.\n        802.1p is taken from packet and is preserved on egress.\n        Default mode is untrusted')
qosTrustDscpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosTrustDscpMode.setStatus('current')
if mibBuilder.loadTexts: qosTrustDscpMode.setDescription('Enables/disables DSCP trust mode.\n        DSCP is taken from packet.\n        Default mode is untrusted')
qosNetworkEgressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3), )
if mibBuilder.loadTexts: qosNetworkEgressTable.setStatus('current')
if mibBuilder.loadTexts: qosNetworkEgressTable.setDescription("Information about all QoS network policies' egress FC traffic disposition.")
qosNetworkEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"))
if mibBuilder.loadTexts: qosNetworkEgressEntry.setStatus('current')
if mibBuilder.loadTexts: qosNetworkEgressEntry.setDescription("Information about a particular network policy's egress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the qosNetworkEgressTable.\n        ")
qosNetPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 1), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicySchedulingProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetPolicySchedulingProfile.setDescription('The ID of a scheduling profile configured. Valid scheduling profile Id range\n        is 1-8. To remove the scheduling profile use ID 0')
qosNetPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 2), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicyShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetPolicyShaperProfile.setDescription('Shaper profile ID. Valid shaper profile Id range is 1-8.\n        To remove the shaper profile use ID 0')
qosNetPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicyTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetPolicyTailDropProfile.setDescription('The ID of a Tail drop profile configured. Valid tail-drop profile Id range\n        is 1-8. To remove the scheduling profile use ID 0')
qosNetPolicySredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 3, 1, 4), TSredId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetPolicySredProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetPolicySredProfile.setDescription('The SRED profile ID. Valid SRED profile Id range is 1-8.\n        To remove the SRED profile use ID 0')
qosNetworkEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4), )
if mibBuilder.loadTexts: qosNetworkEgressQueueTable.setStatus('current')
if mibBuilder.loadTexts: qosNetworkEgressQueueTable.setDescription('Information about QoS network queues.')
qosNetworkEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosNetworkPolicy"), (0, "PRVT-QOS-MIB", "qosNetworkQueue"))
if mibBuilder.loadTexts: qosNetworkEgressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: qosNetworkEgressQueueEntry.setDescription('Qos network queue configuration')
qosNetworkQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosNetworkQueue.setStatus('current')
if mibBuilder.loadTexts: qosNetworkQueue.setDescription('Network queue identifier.\n        The queue ID is used as an index of the table entry.')
qosNetworkQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosNetworkQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosNetworkQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosNetworkQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 3), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetworkQueueShaperProfile.setDescription('Shaper profile on this queue')
qosNetworkQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 4), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetworkQueueTailDropProfile.setDescription('Tail-drop profile on this queue')
qosNetworkQueueSredProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 13, 4, 1, 5), TSredId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNetworkQueueSredProfile.setStatus('current')
if mibBuilder.loadTexts: qosNetworkQueueSredProfile.setDescription('Sred profile on this queue')
qosGlobalIngressMapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1), )
if mibBuilder.loadTexts: qosGlobalIngressMapTable.setStatus('current')
if mibBuilder.loadTexts: qosGlobalIngressMapTable.setDescription('Global Qos Configuration table.')
qosGlobalIngressMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosIngressMapType"), (0, "PRVT-QOS-MIB", "qosIngressMapValue"))
if mibBuilder.loadTexts: qosGlobalIngressMapEntry.setStatus('current')
if mibBuilder.loadTexts: qosGlobalIngressMapEntry.setDescription('Global Ingress QoS Configuration table')
qosIngressMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2))))
if mibBuilder.loadTexts: qosIngressMapType.setStatus('current')
if mibBuilder.loadTexts: qosIngressMapType.setDescription('The type of the configuration entry for this mapping.')
qosIngressMapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: qosIngressMapValue.setStatus('current')
if mibBuilder.loadTexts: qosIngressMapValue.setDescription('Specify DSCP or Dot1p value to be mapped to a Formawding class')
qosIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosIngressRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table. The entry is created by qosIngressMapType and qosIngressMapValue')
qosIngressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 4), TFCNameOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIngressFC.setStatus('current')
if mibBuilder.loadTexts: qosIngressFC.setDescription('Forwarding class to which the traffic will flow')
qosIngressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 1, 1, 5), TConformanceLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIngressFCConformance.setStatus('current')
if mibBuilder.loadTexts: qosIngressFCConformance.setDescription('Conformance level: green or yellow')
qosGlobalEgressRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2), )
if mibBuilder.loadTexts: qosGlobalEgressRemarkTable.setStatus('current')
if mibBuilder.loadTexts: qosGlobalEgressRemarkTable.setDescription('Global Qos Egress Configuration table.')
qosGlobalEgressRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosEgressFC"), (0, "PRVT-QOS-MIB", "qosEgressFCConformance"))
if mibBuilder.loadTexts: qosGlobalEgressRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: qosGlobalEgressRemarkEntry.setDescription('Global Egress QoS Configuration table')
qosEgressFC = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 1), TFCNameOrEmpty())
if mibBuilder.loadTexts: qosEgressFC.setStatus('current')
if mibBuilder.loadTexts: qosEgressFC.setDescription('Choose forwarding class to configure egress remarking')
qosEgressFCConformance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 2), TConformanceLevel())
if mibBuilder.loadTexts: qosEgressFCConformance.setStatus('current')
if mibBuilder.loadTexts: qosEgressFCConformance.setDescription('Previous conformance level: green or yellow')
qosEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosEgressRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosEgressRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosEgressRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1p", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressRemarkType.setStatus('current')
if mibBuilder.loadTexts: qosEgressRemarkType.setDescription('Choose what fields in frame are going to be remarked(DSCP or Dot1p).\n        Dscp type is not supported')
qosEgressRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressRemarkValue.setStatus('current')
if mibBuilder.loadTexts: qosEgressRemarkValue.setDescription('Choose new value of field specified in qosEgressRemarkType to be remarked.')
qosServiceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1), )
if mibBuilder.loadTexts: qosServiceTable.setStatus('current')
if mibBuilder.loadTexts: qosServiceTable.setDescription('This table will be responsible for managing QoS service configuration')
qosServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServiceIndex"))
if mibBuilder.loadTexts: qosServiceEntry.setStatus('current')
if mibBuilder.loadTexts: qosServiceEntry.setDescription('This table will be responsible for managing QoS configuration on a service.')
qosServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: qosServiceIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K.,\n        and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: qosServiceIndex.setStatus('current')
if mibBuilder.loadTexts: qosServiceIndex.setDescription('This is a unique index for an entry in the\n        qosServiceTable.')
qosServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosServiceRowStatus.setDescription('This object indicates the status of this row. The\n\tvalues supported during a set operation are createAndGo(4) \n\tactive(1), notInService(2) and destroy(6).\n\tCreation or deletion of an entry in this table means enable or removal\n\tof QoS policy on a specific service entry.')
qosServicePolicyOnServ = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 1, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServicePolicyOnServ.setStatus('current')
if mibBuilder.loadTexts: qosServicePolicyOnServ.setDescription('Service QoS Policy Id to be applied on a service.')
qosServiceSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2), )
if mibBuilder.loadTexts: qosServiceSapTable.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapTable.setDescription('A table that contains QoS SAP information.')
qosServiceSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosServiceIndex"), (0, "PRVT-QOS-MIB", "qosServiceSapPortId"), (0, "PRVT-QOS-MIB", "qosServiceSapEncapValue"))
if mibBuilder.loadTexts: qosServiceSapEntry.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapEntry.setDescription('This table will be responsible for managing QoS configuration on a SAP.')
qosServiceSapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapPortId.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapPortId.setDescription('The ID of the access port where this SAP\n\t\t\t\tis defined.')
qosServiceSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 2), TQEncapVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapEncapValue.setDescription('The value of the label used to identify this\n                     SAP on the access port specified by sapPortId.')
qosServiceSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosServiceSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapRowStatus.setDescription('This object indicates the status of this row. The\n\tvalues supported during a set operation are createAndGo(4) \n\tactive(1), notInService(2) and destroy(6).\n\tCreation or deletion of an entry in this table means enable or disable\n\tof QoS configuration on a specific SAP entry.')
qosServiceSapPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 15, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosServiceSapPolicyEnable.setStatus('current')
if mibBuilder.loadTexts: qosServiceSapPolicyEnable.setDescription('The object enables or disables QoS configuration on a specific SAP entry for the service.')
qosInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1), )
if mibBuilder.loadTexts: qosInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceTable.setDescription('This table will be responsible for managing QoS interface configuration')
qosInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosInterfaceIndex"))
if mibBuilder.loadTexts: qosInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceEntry.setDescription('This table will be responsible for managing QoS configuration on an \n       interface.')
qosInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: qosInterfaceIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K.,\n        and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: qosInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceIndex.setDescription('This is a unique index for an entry in the\n        qosInterfaceTable.')
qosInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosInterfaceRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosInterfacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 16, 1, 1, 3), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosInterfacePolicy.setStatus('current')
if mibBuilder.loadTexts: qosInterfacePolicy.setDescription('Network QoS Policy Id to be applied on a port.')
qosStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1), )
if mibBuilder.loadTexts: qosStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: qosStatisticsTable.setDescription('This table displays QoS statistics information based on port and queue.')
qosStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosStatInterfaceIndex"), (0, "PRVT-QOS-MIB", "qosQueueIndex"))
if mibBuilder.loadTexts: qosStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: qosStatisticsEntry.setDescription('This table is responsible for displaying common QoS statistics on an \n       interface and/or queue.')
qosStatInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: qosStatInterfaceIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K.,\n        and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: qosStatInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: qosStatInterfaceIndex.setDescription('This is a unique index for an entry in the\n        qosStatisticsTable.')
qosQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 2), TQueueId())
if mibBuilder.loadTexts: qosQueueIndex.setStatus('current')
if mibBuilder.loadTexts: qosQueueIndex.setDescription('This is a unique index for an entry in the\n        qosStatisticsTable.')
qosReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: qosReceivedBytes.setDescription('Received bytes on the port/queue.')
qosDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: qosDroppedBytes.setDescription('Dropped bytes on the port/queue.')
qosClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 17, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosClearStatistics.setStatus('current')
if mibBuilder.loadTexts: qosClearStatistics.setDescription('Clear statistics.Set to true to clear the statistics')
qosVlanPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1), )
if mibBuilder.loadTexts: qosVlanPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyTable.setDescription('Qos VLAN policy table. Keeps comman information for the QoS VLAN policy ')
qosVlanPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyEntry.setDescription('Information about a particular QoS VLAN Policy.\n        ')
qosVlanPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 1), TNamedItem())
if mibBuilder.loadTexts: qosVlanPolicy.setReference('')
if mibBuilder.loadTexts: qosVlanPolicy.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicy.setDescription('QoS VLAN policy index. String up to 6 characters')
qosVlanPolicyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 2), TItemDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyDescription.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyDescription.setDescription('User-defined description of the QoS VLAN policy')
qosVlanPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyRowStatus.setDescription('Row status of the QoS network policy.\n    \t\t\t QoS VLAN policy is created with createAndWait(5).')
qosVlanIngressPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2), )
if mibBuilder.loadTexts: qosVlanIngressPolicyTable.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressPolicyTable.setDescription("Information about all QoS VLAN ingress policies' configuration.")
qosVlanIngressPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanIngressPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressPolicyEntry.setDescription("Information about a particular VLAN policy's ingress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the qosVlanIngressTable.\n        ")
qosVlanPolicyShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 1), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyShaperProfile.setDescription('Shaper profile ID. Valid shaper profile Id range is 9-57.\n        To remove the shaper profile use ID 0')
qosVlanPolicySchedulingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 2), TSSchedulingProfile()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicySchedulingProfile.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicySchedulingProfile.setDescription('Scheduling profile ID. Valid scheduling profile Id range\n        is 1-8. To remove the scheduling profile use ID 0')
qosVlanPolicyTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 2, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanPolicyTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyTailDropProfile.setDescription('The ID of a Tail drop profile configured. Valid tail-drop profile Id range\n        is 1-5. To remove the scheduling profile use ID 0')
qosVlanIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3), )
if mibBuilder.loadTexts: qosVlanIngressQueueTable.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressQueueTable.setDescription("Information about all QoS VLAN ingress policies' configuration.")
qosVlanIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanPolicy"))
if mibBuilder.loadTexts: qosVlanIngressQueueEntry.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressQueueEntry.setDescription("Information about a particular VLAN policy's ingress\n         per-forwarding-class traffic disposition.\n\n         Entries are created/deleted as an action of creating/deleting\n         a row in the qosVlanIngressTable.\n        ")
qosVlanInQueueQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: qosVlanInQueueQueue.setStatus('current')
if mibBuilder.loadTexts: qosVlanInQueueQueue.setDescription('Service queue identifier.\n        The queue ID is used as an index of the table entry.')
qosVlanInQueueShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 2), TShaperId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanInQueueShaperProfile.setStatus('current')
if mibBuilder.loadTexts: qosVlanInQueueShaperProfile.setDescription('Shaper profile ID. Valid shaper profile Id range is 9-57.\n        To remove the shaper profile use ID 0')
qosVlanInQueueTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 3), TTailDropId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosVlanInQueueTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: qosVlanInQueueTailDropProfile.setDescription('The ID of a Tail drop profile configured. Valid tail-drop profile Id range\n        is 1-5. To remove the scheduling profile use ID 0')
qosVlanInQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 18, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanInQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosVlanInQueueRowStatus.setDescription('Row Status of the entry. This allows creation/deletion of rows in this\n         table.')
qosVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1), )
if mibBuilder.loadTexts: qosVlanTable.setStatus('current')
if mibBuilder.loadTexts: qosVlanTable.setDescription('This table will be responsible for managing QoS VLAN configuration')
qosVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanIndex"))
if mibBuilder.loadTexts: qosVlanEntry.setStatus('current')
if mibBuilder.loadTexts: qosVlanEntry.setDescription('This table will be responsible for managing QoS configuration on a VLAN.')
qosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: qosVlanIndex.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K.,\n        and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: qosVlanIndex.setStatus('current')
if mibBuilder.loadTexts: qosVlanIndex.setDescription('This is a unique index for an entry in the\n        qosVlanTable.')
qosVlanPolicyOnVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 2), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPolicyOnVlan.setStatus('current')
if mibBuilder.loadTexts: qosVlanPolicyOnVlan.setDescription('VLAN QoS Policy Id to be applied on a VLAN.')
qosVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosVlanRowStatus.setDescription('This object indicates the status of this row. The\n\tvalues supported during a set operation are createAndGo(4) \n\tactive(1), notInService(2) and destroy(6).\n\tCreation or deletion of an entry in this table means enable or removal\n\tof QoS policy on a specific VLAN entry.')
qosVlanIngressPortTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2), )
if mibBuilder.loadTexts: qosVlanIngressPortTable.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressPortTable.setDescription('A table that contains QoS VLAN Ingress Port information.')
qosVlanIngressPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "qosVlanIndex"), (0, "PRVT-QOS-MIB", "qosVlanIngressPortId"))
if mibBuilder.loadTexts: qosVlanIngressPortEntry.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressPortEntry.setDescription('This table will be responsible for managing QoS configuration on a SAP.')
qosVlanIngressPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosVlanIngressPortId.setStatus('current')
if mibBuilder.loadTexts: qosVlanIngressPortId.setDescription('The ID of the access port where thingress port for given VLAN.')
qosVlanPortPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosVlanPortPolicyEnable.setStatus('current')
if mibBuilder.loadTexts: qosVlanPortPolicyEnable.setDescription('The object enables or disables QoS configuration on a specific VLAN port.')
qosVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 7, 1, 19, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosVlanPortRowStatus.setDescription('This object indicates the status of this row. The\n\tvalues supported during a set operation are createAndGo(4) \n\tactive(1), notInService(2) and destroy(6).\n\tCreation or deletion of an entry in this table means enable or disable\n\tof QoS configuration on a specific VLAN port.')
mibBuilder.exportSymbols("PRVT-QOS-MIB", tShaperCBS=tShaperCBS, hqosNetworkPolicyDescription=hqosNetworkPolicyDescription, qosSchedulingProfileEntry=qosSchedulingProfileEntry, qosServiceEntry=qosServiceEntry, tShaperObjects=tShaperObjects, hqosSapIngressDot1pRowStatus=hqosSapIngressDot1pRowStatus, qosSredProfileEntry=qosSredProfileEntry, hqosSchedulerObjects=hqosSchedulerObjects, qosVlanIngressPortId=qosVlanIngressPortId, qosVlanIngressPortEntry=qosVlanIngressPortEntry, qosVlanIngressPolicyEntry=qosVlanIngressPolicyEntry, hqosNetworkQueueParent=hqosNetworkQueueParent, tWfqServiceProfileTable=tWfqServiceProfileTable, qosStatisticsObjects=qosStatisticsObjects, qosSchedulingQ1Weight=qosSchedulingQ1Weight, TProfile=TProfile, hqosNetworkIngressLSPEXPConformance=hqosNetworkIngressLSPEXPConformance, TItemMatch=TItemMatch, hqosNetworkQueueEntry=hqosNetworkQueueEntry, tFCRowStatus=tFCRowStatus, qosQueueIndex=qosQueueIndex, qosEgressFCConformance=qosEgressFCConformance, hqosSapIngressQueueType=hqosSapIngressQueueType, hqosVirtualSchedulerLevel=hqosVirtualSchedulerLevel, hqosSapIngressDSCPConformance=hqosSapIngressDSCPConformance, qosNetworkEgressQueueTable=qosNetworkEgressQueueTable, tShaperMBS=tShaperMBS, qosVlanPolicy=qosVlanPolicy, tShaperProfileLevel=tShaperProfileLevel, qosServicePolicyTable=qosServicePolicyTable, TRateValue=TRateValue, qosNetworkEgressEntry=qosNetworkEgressEntry, hqosNetworkIngressLSPEXPLastChanged=hqosNetworkIngressLSPEXPLastChanged, tWredRedProbability=tWredRedProbability, qosStatisticsEntry=qosStatisticsEntry, hqosSapEgressDescription=hqosSapEgressDescription, qosNetPolicyShaperProfile=qosNetPolicyShaperProfile, hqosSapEgressFCRowStatus=hqosSapEgressFCRowStatus, TItemDescription=TItemDescription, qosInterfaceIndex=qosInterfaceIndex, qosStatisticsTable=qosStatisticsTable, qosEgressRowStatus=qosEgressRowStatus, qosStatInterfaceIndex=qosStatInterfaceIndex, TNetworkPolicyId=TNetworkPolicyId, qosServiceRowStatus=qosServiceRowStatus, qosSchedulingQ5Weight=qosSchedulingQ5Weight, qosNetworkPolicyTable=qosNetworkPolicyTable, qosServInQueueTailDropProfile=qosServInQueueTailDropProfile, hqosSapEgressObjects=hqosSapEgressObjects, hqosSchedulerPolicyDescription=hqosSchedulerPolicyDescription, qosVlanPolicyDescription=qosVlanPolicyDescription, hqosSapEgressFCLastChanged=hqosSapEgressFCLastChanged, qosServPolicyTailDropProfile=qosServPolicyTailDropProfile, tShaperProfileEntry=tShaperProfileEntry, hqosSapIngressQueueLastChanged=hqosSapIngressQueueLastChanged, tFCNameLastChanged=tFCNameLastChanged, qosGlobalIngressMapTable=qosGlobalIngressMapTable, hqosSapIngressIndex=hqosSapIngressIndex, hqosSapEgressEntry=hqosSapEgressEntry, tWredYellowStartAverage=tWredYellowStartAverage, TEgressQueueId=TEgressQueueId, hqosNetworkPolicyLastChanged=hqosNetworkPolicyLastChanged, qosIngressRowStatus=qosIngressRowStatus, qosServiceSapTable=qosServiceSapTable, hqosNetworkEgressFCTable=hqosNetworkEgressFCTable, TQueueId=TQueueId, qosNetworkPolicyEntry=qosNetworkPolicyEntry, qosTailDropProfile=qosTailDropProfile, TSlopePolicy=TSlopePolicy, TTreshold=TTreshold, hqosVirtualSchedulerTable=hqosVirtualSchedulerTable, TIngressQueueId=TIngressQueueId, tWredYellowProbability=tWredYellowProbability, hqosSapEgressFCDot1PValue=hqosSapEgressFCDot1PValue, qosVlanPortRowStatus=qosVlanPortRowStatus, hqosNetworkQueueFC=hqosNetworkQueueFC, tWfqServiceProfileRowStatus=tWfqServiceProfileRowStatus, qosNetPolicyTailDropProfile=qosNetPolicyTailDropProfile, hqosSapIngressQueueWred=hqosSapIngressQueueWred, qosMaxSredYellowProbaility=qosMaxSredYellowProbaility, hqosSapIngressQueueParent=hqosSapIngressQueueParent, qosVlanInQueueShaperProfile=qosVlanInQueueShaperProfile, hqosSapIngressQueueServWfq=hqosSapIngressQueueServWfq, qosTrustDot1pMode=qosTrustDot1pMode, qosVlanPolicyEntry=qosVlanPolicyEntry, tWredLastChanged=tWredLastChanged, tFCNameEntry=tFCNameEntry, tWredProfile=tWredProfile, qosServicePolicyOnServ=qosServicePolicyOnServ, hqosSapIngressEntry=hqosSapIngressEntry, qosServPolicySchedulingProfile=qosServPolicySchedulingProfile, qosTailDropProfileEntry=qosTailDropProfileEntry, qosServiceTable=qosServiceTable, qosTrustDot1pModePreservePriority=qosTrustDot1pModePreservePriority, hqosNetworkEgressFCLastChanged=hqosNetworkEgressFCLastChanged, hqosSapIngressFCLastChanged=hqosSapIngressFCLastChanged, hqosSapEgressQueueRowStatus=hqosSapEgressQueueRowStatus, hqosSapEgressTable=hqosSapEgressTable, qosClearStatistics=qosClearStatistics, qosSchedulingQ4Weight=qosSchedulingQ4Weight, hqosSapEgressFCQueue=hqosSapEgressFCQueue, hqosSapIngressDot1pValue=hqosSapIngressDot1pValue, hqosNetworkEgressFCEntry=hqosNetworkEgressFCEntry, hqosSchedulerPolicyTable=hqosSchedulerPolicyTable, hqosNetworkQueueFCLastChanged=hqosNetworkQueueFCLastChanged, hqosSapIngressTable=hqosSapIngressTable, hqosSapIngressDSCPFC=hqosSapIngressDSCPFC, qosNetworkPolicyRowStatus=qosNetworkPolicyRowStatus, qosNetPolicySredProfile=qosNetPolicySredProfile, tWfqSchedulerProfileTable=tWfqSchedulerProfileTable, TSredId=TSredId, TCIRRate=TCIRRate, hqosNetworkQueueLevel=hqosNetworkQueueLevel, hqosSapEgressFCQueueParent=hqosSapEgressFCQueueParent, PYSNMP_MODULE_ID=prvtQosMIB, hqosSchedulerPolicyRowStatus=hqosSchedulerPolicyRowStatus, hqosSapIngressDefaultDscpFC=hqosSapIngressDefaultDscpFC, tWredYellowMaxAverage=tWredYellowMaxAverage, hqosSapIngressDSCP=hqosSapIngressDSCP, hqosVirtualSchedulerDescription=hqosVirtualSchedulerDescription, serviceAccessSwitch=serviceAccessSwitch, hqosSapEgressLastChanged=hqosSapEgressLastChanged, hqosSapIngressQueueEntry=hqosSapIngressQueueEntry, hqosSapEgressQueueTable=hqosSapEgressQueueTable, hqosNetworkQueueType=hqosNetworkQueueType, qosServicePolicyObjects=qosServicePolicyObjects, tWredProfileTable=tWredProfileTable, hqosNetworkQueuePolicy=hqosNetworkQueuePolicy, TSapEgressPolicyId=TSapEgressPolicyId, tWredProfileEntry=tWredProfileEntry, qosNetworkIngressEntry=qosNetworkIngressEntry, hqosSapIngressDSCPLastChanged=hqosSapIngressDSCPLastChanged, qosEgressRemarkType=qosEgressRemarkType, tWfqServiceProfileDirection=tWfqServiceProfileDirection, qosNetworkEgressTable=qosNetworkEgressTable, tWfqSchedulerProfileDirection=tWfqSchedulerProfileDirection, hqosSchedulerPolicyEntry=hqosSchedulerPolicyEntry, qosEgressRemarkValue=qosEgressRemarkValue, qosSredProfileTable=qosSredProfileTable, TFCNameOrEmpty=TFCNameOrEmpty, qosVlanInQueueRowStatus=qosVlanInQueueRowStatus, qosNetworkQueueRowStatus=qosNetworkQueueRowStatus, qosInterfaceRowStatus=qosInterfaceRowStatus, qosMaxTailDropYellowTreshold=qosMaxTailDropYellowTreshold, tWredGreenStartAverage=tWredGreenStartAverage, qosVlanIngressQueueTable=qosVlanIngressQueueTable, qosNetworkQueueSredProfile=qosNetworkQueueSredProfile, qosVlanPolicyTailDropProfile=qosVlanPolicyTailDropProfile, tFCNameTable=tFCNameTable, qosVlanPolicyObjects=qosVlanPolicyObjects, qosServiceObjects=qosServiceObjects, tWfqSchedulerProfileNumber=tWfqSchedulerProfileNumber, qosVlanPolicyOnVlan=qosVlanPolicyOnVlan, hqosNetworkQueuePolicyEntry=hqosNetworkQueuePolicyEntry, tWfqSchedulerProfileWeight=tWfqSchedulerProfileWeight, hqosNetworkQueueShaper=hqosNetworkQueueShaper, hqosSapIngressRowStatus=hqosSapIngressRowStatus, qosMaxSredRedTreshold=qosMaxSredRedTreshold, qosServPolicyShaperProfile=qosServPolicyShaperProfile, qosSchedulingQ2Weight=qosSchedulingQ2Weight, qosServiceSapRowStatus=qosServiceSapRowStatus, tWfqNetworkProfileNumber=tWfqNetworkProfileNumber, qosGlobalEgressRemarkTable=qosGlobalEgressRemarkTable, qosInterfaceObjects=qosInterfaceObjects, hqosNetworkIngressLSPEXPRowStatus=hqosNetworkIngressLSPEXPRowStatus, tWredGreenProbability=tWredGreenProbability, qosServicePolicyEntry=qosServicePolicyEntry, qosVlanEntry=qosVlanEntry, qosTrustDscpMode=qosTrustDscpMode, TQEncapVal=TQEncapVal, qosIngressMapType=qosIngressMapType, qosServInQueueQueue=qosServInQueueQueue, tWfqSchedulerProfileCIRWeight=tWfqSchedulerProfileCIRWeight, hqosVirtualSchedulerEntry=hqosVirtualSchedulerEntry, qosMaxSredYellowTreshold=qosMaxSredYellowTreshold, qosSchedulingQ8Weight=qosSchedulingQ8Weight, qosInterfacePolicy=qosInterfacePolicy, qosInterfaceEntry=qosInterfaceEntry, hqosNetworkQueuePolicyTable=hqosNetworkQueuePolicyTable, tWredObjects=tWredObjects, qosVlanIngressPolicyTable=qosVlanIngressPolicyTable, hqosNetworkEgressFCLspExpValue=hqosNetworkEgressFCLspExpValue, TSapIngressPolicyId=TSapIngressPolicyId, hqosSapEgressQueueServWfq=hqosSapEgressQueueServWfq, tWfqServiceProfileEntry=tWfqServiceProfileEntry, hqosNetworkPolicyIngressConformance=hqosNetworkPolicyIngressConformance, hqosNetworkQueueWred=hqosNetworkQueueWred, hqosNetworkPolicyTable=hqosNetworkPolicyTable, hqosSchedulerPolicyName=hqosSchedulerPolicyName, hqosSapIngressFCNumber=hqosSapIngressFCNumber, hqosVirtualSchedulerWfqProfile=hqosVirtualSchedulerWfqProfile, TLspExpValue=TLspExpValue, TShaperId=TShaperId, qosNetPolicySchedulingProfile=qosNetPolicySchedulingProfile, hqosNetworkIngressLSPEXP=hqosNetworkIngressLSPEXP, Dot1PPriority=Dot1PPriority, qosServiceSapPolicyEnable=qosServiceSapPolicyEnable, qosSredRowStatus=qosSredRowStatus, qosServicePolicyDescription=qosServicePolicyDescription, tShaperDescription=tShaperDescription, qosVlanObjects=qosVlanObjects, hqosSapEgressFCNumber=hqosSapEgressFCNumber, tFCStorageType=tFCStorageType, qosVlanPolicyTable=qosVlanPolicyTable, hqosNetworkQueueTable=hqosNetworkQueueTable, hqosNetworkQueueFCEntry=hqosNetworkQueueFCEntry, qosReceivedBytes=qosReceivedBytes, hqosSapIngressDefaultVptFC=hqosSapIngressDefaultVptFC, TSapIngressPolicyIdOrNone=TSapIngressPolicyIdOrNone, hqosSapEgressFCEntryType=hqosSapEgressFCEntryType, TSapEgressPolicyIdOrNone=TSapEgressPolicyIdOrNone, hqosSapIngressDot1pLastChanged=hqosSapIngressDot1pLastChanged, hqosSapIngressDescription=hqosSapIngressDescription, qosNetworkPolicyObjects=qosNetworkPolicyObjects, tWfqSchedulerProfileRowStatus=tWfqSchedulerProfileRowStatus, tShaperCIR=tShaperCIR, hqosNetworkQueuePolicyDescription=hqosNetworkQueuePolicyDescription, hqosSapIngressFCEntry=hqosSapIngressFCEntry, hqosNetworkQueuePolicyLastChanged=hqosNetworkQueuePolicyLastChanged, qosSchedulingType=qosSchedulingType, qosVlanRowStatus=qosVlanRowStatus, tWfqNetworkProfileCIRWeight=tWfqNetworkProfileCIRWeight, qosVlanPolicyRowStatus=qosVlanPolicyRowStatus, hqosNetworkQueueHiPriority=hqosNetworkQueueHiPriority, qosNetworkQueueShaperProfile=qosNetworkQueueShaperProfile, hqosSapIngressDSCPEntry=hqosSapIngressDSCPEntry, hqosNetworkQueueFCNumber=hqosNetworkQueueFCNumber, qosServiceIngressPolicyEntry=qosServiceIngressPolicyEntry, hqosSapIngressFCQueue=hqosSapIngressFCQueue, TNamedItemOrEmpty=TNamedItemOrEmpty, hqosSapIngressLastChanged=hqosSapIngressLastChanged, hqosSchedulerPolicyLastChanged=hqosSchedulerPolicyLastChanged, qosSchedulingRowStatus=qosSchedulingRowStatus, hqosNetworkIngressLSPEXPEntry=hqosNetworkIngressLSPEXPEntry, qosTailDropRowStatus=qosTailDropRowStatus, hqosSapIngressFCQueueParent=hqosSapIngressFCQueueParent, tWfqNetworkProfileWeight=tWfqNetworkProfileWeight, tShaperProfileTable=tShaperProfileTable, hqosNetworkEgressFCNumber=hqosNetworkEgressFCNumber, TPriority=TPriority, hqosSapIngressObjects=hqosSapIngressObjects, hqosSapIngressFCQueueType=hqosSapIngressFCQueueType, tWredRowStatus=tWredRowStatus, qosNetworkQueue=qosNetworkQueue, tWfqObjects=tWfqObjects, hqosSapIngressQueue=hqosSapIngressQueue, hqosSapEgressQueueLastChanged=hqosSapEgressQueueLastChanged, qosServiceSapEncapValue=qosServiceSapEncapValue, qosDroppedBytes=qosDroppedBytes, TFCName=TFCName, hqosNetworkPolicyIndex=hqosNetworkPolicyIndex, qosTailDropProfileTable=qosTailDropProfileTable, qosSchedulingQ7Weight=qosSchedulingQ7Weight, tFCObjects=tFCObjects)
mibBuilder.exportSymbols("PRVT-QOS-MIB", hqosNetworkQueueLastChanged=hqosNetworkQueueLastChanged, qosInterfaceTable=qosInterfaceTable, qosIngressMapValue=qosIngressMapValue, qosNetworkIngressTable=qosNetworkIngressTable, qosIngressFC=qosIngressFC, qosVlanIngressQueueEntry=qosVlanIngressQueueEntry, hqosVirtualSchedulerLastChanged=hqosVirtualSchedulerLastChanged, qosServiceSapEntry=qosServiceSapEntry, qosSredProfile=qosSredProfile, qosNetworkPolicy=qosNetworkPolicy, tCongestionAvoidanceProfileObjects=tCongestionAvoidanceProfileObjects, hqosSapEgressIndex=hqosSapEgressIndex, hqosNetworkIngressLSPEXPFC=hqosNetworkIngressLSPEXPFC, hqosNetworkEgressFCConformance=hqosNetworkEgressFCConformance, qosSchedulingProfileTable=qosSchedulingProfileTable, hqosVirtualSchedulerParent=hqosVirtualSchedulerParent, tWredRedStartAverage=tWredRedStartAverage, qosVlanPolicySchedulingProfile=qosVlanPolicySchedulingProfile, hqosSapIngressFCRowStatus=hqosSapIngressFCRowStatus, hqosSapEgressQueueLevel=hqosSapEgressQueueLevel, qosVlanPolicyShaperProfile=qosVlanPolicyShaperProfile, hqosSapEgressQueueEntry=hqosSapEgressQueueEntry, hqosNetworkQueueFCRowStatus=hqosNetworkQueueFCRowStatus, qosIngressFCConformance=qosIngressFCConformance, tWfqNetworkProfileTable=tWfqNetworkProfileTable, qosServiceIngressQueueEntry=qosServiceIngressQueueEntry, qosServiceIngressQueueTable=qosServiceIngressQueueTable, hqosSapIngressQueueHiPriority=hqosSapIngressQueueHiPriority, hqosSapEgressQueueType=hqosSapEgressQueueType, qosEgressFC=qosEgressFC, hqosNetworkQueueObjects=hqosNetworkQueueObjects, qosNetworkEgressQueueEntry=qosNetworkEgressQueueEntry, hqosSapIngressDSCPRowStatus=hqosSapIngressDSCPRowStatus, tWfqSchedulerProfileEntry=tWfqSchedulerProfileEntry, TConformanceLevel=TConformanceLevel, qosServicePolicy=qosServicePolicy, hqosSapIngressQueueLevel=hqosSapIngressQueueLevel, hqosNetworkPolicyRowStatus=hqosNetworkPolicyRowStatus, hqosNetworkQueueFCType=hqosNetworkQueueFCType, tWredGreenMaxAverage=tWredGreenMaxAverage, hqosSapEgressRowStatus=hqosSapEgressRowStatus, tWfqNetworkProfileEntry=tWfqNetworkProfileEntry, tShaperRowStatus=tShaperRowStatus, qosSchedulingQ6Weight=qosSchedulingQ6Weight, hqosSapIngressQueueTable=hqosSapIngressQueueTable, qosServInQueueShaperProfile=qosServInQueueShaperProfile, tShaperProfile=tShaperProfile, qosSchedulingProfile=qosSchedulingProfile, hqosNetworkPolicyEntry=hqosNetworkPolicyEntry, hqosVirtualSchedulerPriority=hqosVirtualSchedulerPriority, qosNetworkIngressConformance=qosNetworkIngressConformance, hqosNetworkEgressFCDot1Priority=hqosNetworkEgressFCDot1Priority, hqosSapEgressFCEntry=hqosSapEgressFCEntry, tShaperPIR=tShaperPIR, qosMaxSredRedProbability=qosMaxSredRedProbability, tShaperProfileDirection=tShaperProfileDirection, qosNetworkPolicyDescription=qosNetworkPolicyDescription, qosServicePolicyRowStatus=qosServicePolicyRowStatus, qosServiceIngressPolicyTable=qosServiceIngressPolicyTable, hqosSapEgressQueueIndex=hqosSapEgressQueueIndex, TPriorityOrDefault=TPriorityOrDefault, qosNetworkQueueTailDropProfile=qosNetworkQueueTailDropProfile, TNamedItem=TNamedItem, hqosSapEgressQueueParent=hqosSapEgressQueueParent, hqosNetworkQueueWfqProfile=hqosNetworkQueueWfqProfile, tWredRedMaxAverage=tWredRedMaxAverage, tFCValue=tFCValue, hqosNetworkObjects=hqosNetworkObjects, qosGlobalObjects=qosGlobalObjects, qosVlanPortPolicyEnable=qosVlanPortPolicyEnable, hqosSapEgressQueueWred=hqosSapEgressQueueWred, qosSchedulingProfileObjects=qosSchedulingProfileObjects, hqosSapIngressDot1pConformance=hqosSapIngressDot1pConformance, qosVlanIndex=qosVlanIndex, qosServInQueueRowStatus=qosServInQueueRowStatus, tWfqServiceProfileNumber=tWfqServiceProfileNumber, TSSchedulingProfile=TSSchedulingProfile, hqosSchedulerPolicyType=hqosSchedulerPolicyType, hqosVirtualSchedulerName=hqosVirtualSchedulerName, qosServiceSapPortId=qosServiceSapPortId, hqosSapIngressDot1pTable=hqosSapIngressDot1pTable, TNetworkPolicyIdOrNone=TNetworkPolicyIdOrNone, qosSchedulingQ3Weight=qosSchedulingQ3Weight, tWfqServiceProfileWeight=tWfqServiceProfileWeight, tWfqNetworkProfileRowStatus=tWfqNetworkProfileRowStatus, qosNetworkIngressFC=qosNetworkIngressFC, hqosSapIngressFCTable=hqosSapIngressFCTable, hqosNetworkPolicyEgressRemark=hqosNetworkPolicyEgressRemark, hqosSapEgressFCTable=hqosSapEgressFCTable, tShaperProfileType=tShaperProfileType, hqosSapIngressDot1pEntry=hqosSapIngressDot1pEntry, hqosSapIngressDot1pFC=hqosSapIngressDot1pFC, hqosNetworkEgressFCRowStatus=hqosNetworkEgressFCRowStatus, hqosSapEgressFCDSCPValue=hqosSapEgressFCDSCPValue, qosVlanIngressPortTable=qosVlanIngressPortTable, TDSCPValue=TDSCPValue, qosGlobalEgressRemarkEntry=qosGlobalEgressRemarkEntry, hqosNetworkQueue=hqosNetworkQueue, TLevel=TLevel, hqosSapIngressDSCPTable=hqosSapIngressDSCPTable, hqosVirtualSchedulerShaper=hqosVirtualSchedulerShaper, tShaperLastChanged=tShaperLastChanged, qosGlobalIngressMapEntry=qosGlobalIngressMapEntry, hqosNetworkIngressLSPEXPTable=hqosNetworkIngressLSPEXPTable, qosServiceIndex=qosServiceIndex, qosVlanInQueueQueue=qosVlanInQueueQueue, tWredDescription=tWredDescription, qosMaxTailDropRedTreshold=qosMaxTailDropRedTreshold, hqosSapIngressQueueRowStatus=hqosSapIngressQueueRowStatus, prvtQosMIB=prvtQosMIB, TTailDropId=TTailDropId, hqosNetworkQueuePolicyRowStatus=hqosNetworkQueuePolicyRowStatus, hqosVirtualSchedulerRowStatus=hqosVirtualSchedulerRowStatus, TWeight=TWeight, TPIRRate=TPIRRate, qosVlanInQueueTailDropProfile=qosVlanInQueueTailDropProfile, hqosSapEgressQueueHiPriority=hqosSapEgressQueueHiPriority, hqosNetworkQueueRowStatus=hqosNetworkQueueRowStatus, qosVlanTable=qosVlanTable, hqosNetworkPolicyIngressDefaultActionFC=hqosNetworkPolicyIngressDefaultActionFC, hqosNetworkQueueFCTable=hqosNetworkQueueFCTable, tFCName=tFCName, qosSchedulingProfileDirection=qosSchedulingProfileDirection)
