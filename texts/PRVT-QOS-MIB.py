#
# PySNMP MIB module PRVT-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-QOS-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:20:51 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
serviceAccessSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "serviceAccessSwitch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, NotificationType, ObjectIdentity, ModuleIdentity, MibIdentifier, iso, TimeTicks, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "IpAddress", "Unsigned32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
prvtQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 7, 1))
prvtQosMIB.setRevisions(('2014-01-16 00:00', '2014-01-15 00:00', '2013-12-11 00:00', '2010-03-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtQosMIB.setRevisionsDescriptions(('added prvtQosSchedProfileDescription,\n         prvtQosMapProfExpToFcTable,prvtQosMapProfAnyExpToFcValue,\n         prvtQosMapProfAnyVptToFcColor,prvtQosRemarkProfFcToExpTable', 'added prvtQosWredProfTable,prvtQosPortEgrPolWredProf,\n         prvtQosPortEgrPolQueWredProf', 'added trustInnerPriority.', 'Initial version.',))
if mibBuilder.loadTexts: prvtQosMIB.setLastUpdated('201401160000Z')
if mibBuilder.loadTexts: prvtQosMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtQosMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtQosMIB.setDescription('The SNMP MIB module to manage the QoS parameters.')
class PrvtQosEncapType(TextualConvention, Integer32):
    description = 'VLAN encapsulation value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4096)

class PrvtQosServShaperProfileIdType(TextualConvention, Integer32):
    description = 'The value of a service shaper profile identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PrvtQosProfileIdType(TextualConvention, Integer32):
    description = 'The value of a profile identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class PrvtQosFcType(TextualConvention, Integer32):
    description = 'The name of a Forwarding Class.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("be", 1), ("l2", 2), ("af", 3), ("l1", 4), ("h2", 5), ("ef", 6), ("h1", 7), ("nc", 8))

class PrvtQosDscpType(TextualConvention, Integer32):
    description = 'A Differential Services Code Point value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class PrvtQosVptType(TextualConvention, Integer32):
    description = 'VLAN priority'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class PrvtQosExpType(TextualConvention, Unsigned32):
    description = 'Exp'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class PrvtQosDescrType(TextualConvention, OctetString):
    description = 'Description for an item.'
    status = 'current'
    displayHint = '150a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 150)

class PrvtQosQueueIdType(TextualConvention, Integer32):
    description = 'The identification number of a queue.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class PrvtQosServiceIdType(TextualConvention, Unsigned32):
    description = 'The identification number of a service.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967294)

class PrvtQosPolicyNameType(TextualConvention, OctetString):
    description = 'The name of a policy.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 32)

class PrvtQosPolicyNameOrNoneType(TextualConvention, OctetString):
    description = 'Same as PrvtQosPolicyNameType except that a zero length string\n         indicates that no policy has been assigned.'
    status = 'current'
    displayHint = '32a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class PrvtQosColorType(TextualConvention, Integer32):
    description = 'Traffic QOS colors.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

class PrvtQosSchedType(TextualConvention, Integer32):
    description = 'Scheduling profile type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("sp", 1), ("wrr", 2), ("hybrid1", 3), ("hybrid2", 4), ("hybrid3", 5), ("hybrid4", 6), ("hybrid5", 7), ("hybrid6", 8), ("hybrid7", 9), ("drr", 10), ("mdrr1", 11), ("mdrr2", 12), ("mdrr3", 13), ("mdrr4", 14), ("mdrr5", 15), ("mdrr6", 16), ("mdrr7", 17))

class PrvtQosTrustType(TextualConvention, Integer32):
    description = 'Trust mode values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("untrust", 0), ("trustPriority", 1), ("trustPreservePriority", 2), ("trustDscp", 3), ("trustPriorityAndDscp", 4), ("trustInnerPriority", 5))

class PrvtQosQueueWeight(TextualConvention, Integer32):
    description = 'The weight to assign to a queue.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

prvtQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1))
prvtQosSchedProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1))
prvtQosSchedProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1), )
if mibBuilder.loadTexts: prvtQosSchedProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileTable.setDescription('Scheduling profile table.\n         Each entry in this table defines a scheduling profile that may be assigned\n         to a QOS policy.')
prvtQosSchedProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosSchedProfileId"))
if mibBuilder.loadTexts: prvtQosSchedProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileEntry.setDescription('An entry in prvtQosSchedProfileTable.')
prvtQosSchedProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 1), PrvtQosProfileIdType())
if mibBuilder.loadTexts: prvtQosSchedProfileId.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileId.setDescription('Uniquely identifies a scheduling profile.')
prvtQosSchedProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileRowStatus.setDescription('The RowStatus for this profile.')
prvtQosSchedProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 3), PrvtQosSchedType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileType.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileType.setDescription('Scheduling profile type.')
prvtQosSchedProfileQueue1Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 4), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue1Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue1Weight.setDescription('The weight assigned to queue 1.')
prvtQosSchedProfileQueue2Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 5), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue2Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue2Weight.setDescription('The weight assigned to queue 2.')
prvtQosSchedProfileQueue3Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 6), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue3Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue3Weight.setDescription('The weight assigned to queue 3.')
prvtQosSchedProfileQueue4Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 7), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue4Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue4Weight.setDescription('The weight assigned to queue 4.')
prvtQosSchedProfileQueue5Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 8), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue5Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue5Weight.setDescription('The weight assigned to queue 5.')
prvtQosSchedProfileQueue6Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 9), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue6Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue6Weight.setDescription('The weight assigned to queue 6.')
prvtQosSchedProfileQueue7Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 10), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue7Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue7Weight.setDescription('The weight assigned to queue 7.')
prvtQosSchedProfileQueue8Weight = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 11), PrvtQosQueueWeight()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileQueue8Weight.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileQueue8Weight.setDescription('The weight assigned to queue 8.')
prvtQosSchedProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 1, 1, 1, 12), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSchedProfileDescription.setStatus('current')
if mibBuilder.loadTexts: prvtQosSchedProfileDescription.setDescription('Description of the policy')
prvtQosShaperProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2))
prvtQosPortShaperProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1), )
if mibBuilder.loadTexts: prvtQosPortShaperProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfTable.setDescription('Port Shaper Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on a port.')
prvtQosPortShaperProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosPortShaperProfId"))
if mibBuilder.loadTexts: prvtQosPortShaperProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfEntry.setDescription('An entry in prvtQosPortShaperProfTable.')
prvtQosPortShaperProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1, 1), PrvtQosProfileIdType())
if mibBuilder.loadTexts: prvtQosPortShaperProfId.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfId.setDescription('Uniquely identifies a port shaper profile.')
prvtQosPortShaperProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortShaperProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosPortShaperProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortShaperProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfDescr.setDescription('User-provided description of the profile.')
prvtQosPortShaperProfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortShaperProfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfCIR.setDescription('The Commited Information Rate in kbps.')
prvtQosPortShaperProfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortShaperProfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortShaperProfCBS.setDescription('The Commited Burst Size allowed in kilobytes.')
prvtQosServShaperProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2), )
if mibBuilder.loadTexts: prvtQosServShaperProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfTable.setDescription('Service Shaper Profile Table\n         Each entry in this table defines a set of shaping parameters that may be enforced\n         on a service.')
prvtQosServShaperProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosServShaperProfId"))
if mibBuilder.loadTexts: prvtQosServShaperProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfEntry.setDescription('An entry in prvtQosServShaperProfTable.')
prvtQosServShaperProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1, 1), PrvtQosServShaperProfileIdType())
if mibBuilder.loadTexts: prvtQosServShaperProfId.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfId.setDescription('Uniquely identifies a service shaper profile.')
prvtQosServShaperProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServShaperProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosServShaperProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServShaperProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfDescr.setDescription('User-provided description of the profile.')
prvtQosServShaperProfCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServShaperProfCIR.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfCIR.setDescription('The Commited Information Rate in kbps.')
prvtQosServShaperProfCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServShaperProfCBS.setStatus('current')
if mibBuilder.loadTexts: prvtQosServShaperProfCBS.setDescription('The Commited Burst Size allowed in kilobytes.')
prvtQosCongAvoidProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3))
prvtQosTailDropProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1), )
if mibBuilder.loadTexts: prvtQosTailDropProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfTable.setDescription('Tail Drop Profile Table\n         Each entry in this table defines a set of tail-drop parameters that may be enforced\n         on a queue or a policy.')
prvtQosTailDropProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosTailDropProfId"))
if mibBuilder.loadTexts: prvtQosTailDropProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfEntry.setDescription('An entry in prvtQosTailDropProfTable.')
prvtQosTailDropProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1, 1), PrvtQosProfileIdType())
if mibBuilder.loadTexts: prvtQosTailDropProfId.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfId.setDescription('Uniquely identifies a tail drop profile.')
prvtQosTailDropProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosTailDropProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosTailDropProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosTailDropProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfDescr.setDescription('User-provided description of the profile.')
prvtQosTailDropProfYellowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosTailDropProfYellowThresh.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfYellowThresh.setDescription('Drop start threshold for the yellow traffic in kilobytes.')
prvtQosTailDropProfRedThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosTailDropProfRedThresh.setStatus('current')
if mibBuilder.loadTexts: prvtQosTailDropProfRedThresh.setDescription('Drop start threshold for the red traffic in kilobytes.')
prvtQosSredProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2), )
if mibBuilder.loadTexts: prvtQosSredProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfTable.setDescription('SRED Profile Table\n         Each entry in this table defines a set of SRED parameters that may be enforced\n         on a queue or a policy.')
prvtQosSredProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosSredProfId"))
if mibBuilder.loadTexts: prvtQosSredProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfEntry.setDescription('An entry in prvtQosSredProfTable.')
prvtQosSredProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 1), PrvtQosProfileIdType())
if mibBuilder.loadTexts: prvtQosSredProfId.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfId.setDescription('Uniquely identifies a SRED profile.')
prvtQosSredProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosSredProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfDescr.setDescription('User-provided description of the profile.')
prvtQosSredProfYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfYellowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfYellowThreshold.setDescription('SRED yellow treshold in per-cent.')
prvtQosSredProfYellowProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfYellowProbability.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfYellowProbability.setDescription('SRED yellow probability in per-cent.')
prvtQosSredProfRedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfRedThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfRedThreshold.setDescription('SRED Red treshold in per-cent.')
prvtQosSredProfRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSredProfRedProbability.setStatus('current')
if mibBuilder.loadTexts: prvtQosSredProfRedProbability.setDescription('SRED Red probability in per-cent.')
prvtQosWredProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3), )
if mibBuilder.loadTexts: prvtQosWredProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfTable.setDescription('WRED Profile Table\n         Each entry in this table defines a set of WRED parameters that may be enforced\n         on a queue or a policy.')
prvtQosWredProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosWredProfId"))
if mibBuilder.loadTexts: prvtQosWredProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfEntry.setDescription('An entry in prvtQosWredProfTable.')
prvtQosWredProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 1), PrvtQosProfileIdType())
if mibBuilder.loadTexts: prvtQosWredProfId.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfId.setDescription('Uniquely identifies a WRED profile.')
prvtQosWredProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosWredProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfDescr.setDescription('User-provided description of the profile.')
prvtQosWredProfYellowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfYellowThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfYellowThreshold.setDescription('WRED yellow treshold in per-cent.')
prvtQosWredProfYellowProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfYellowProbability.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfYellowProbability.setDescription('WRED yellow probability in per-cent.')
prvtQosWredProfRedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfRedThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfRedThreshold.setDescription('WRED Red treshold in per-cent.')
prvtQosWredProfRedProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 3, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosWredProfRedProbability.setStatus('current')
if mibBuilder.loadTexts: prvtQosWredProfRedProbability.setDescription('WRED Red probability in per-cent.')
prvtQosMapProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4))
prvtQosMapProfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1), )
if mibBuilder.loadTexts: prvtQosMapProfTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfTable.setDescription('Mapping Profile Table\n         Each entry in this table defines a mapping profile that may be assigned to\n         a QOS policy.')
prvtQosMapProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosMapProfName"))
if mibBuilder.loadTexts: prvtQosMapProfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfEntry.setDescription('An entry in prvtQosMapProfTable.')
prvtQosMapProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosMapProfName.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfName.setDescription('Uniquely identifies a mapping profile.')
prvtQosMapProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfRowStatus.setDescription('The RowStatus for this profile.')
prvtQosMapProfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDescr.setDescription('User-provided description of the profile.')
prvtQosMapProfAnyVptToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 4), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyVptToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyVptToFcValue.setDescription('The Forwarding Class to be assigned to matching traffic.')
prvtQosMapProfAnyVptToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 5), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyVptToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyVptToFcColor.setDescription('The color to be assigned to matching traffic.')
prvtQosMapProfAnyDscpToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 6), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyDscpToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyDscpToFcValue.setDescription('The Forwarding Class to be assigned to matching traffic.')
prvtQosMapProfAnyDscpToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 7), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyDscpToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyDscpToFcColor.setDescription('The color to be assigned to matching traffic.')
prvtQosMapProfAnyExpToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 8), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyExpToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyExpToFcValue.setDescription('The Forwarding Class to be assigned to untrusted ingress traffic.')
prvtQosMapProfAnyExpToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 1, 1, 9), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfAnyExpToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfAnyExpToFcColor.setDescription('The color to be assigned to all untrusted ingress traffic.')
prvtQosMapProfVptToFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2), )
if mibBuilder.loadTexts: prvtQosMapProfVptToFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcTable.setDescription('Mapping Profile VPT-to-FC Table\n         Each entry in this table defines how a mapping profile maps a specific VLAN priority to\n         a forwarding class ')
prvtQosMapProfVptToFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosMapProfName"), (0, "PRVT-QOS-MIB", "prvtQosMapProfVptToFcId"))
if mibBuilder.loadTexts: prvtQosMapProfVptToFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcEntry.setDescription('An entry in prvtQosMapProfVptToFcTable.')
prvtQosMapProfVptToFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2, 1, 1), PrvtQosVptType())
if mibBuilder.loadTexts: prvtQosMapProfVptToFcId.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcId.setDescription('The Vlan priority to which this row applies.')
prvtQosMapProfVptToFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfVptToFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcRowStatus.setDescription("The RowStatus for this profile's VLAN priority.")
prvtQosMapProfVptToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2, 1, 3), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfVptToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcValue.setDescription("The Forwarding Class to be assigned to traffic matching this profile's VLAN priority.")
prvtQosMapProfVptToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 2, 1, 4), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfVptToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfVptToFcColor.setDescription("The color to be assigned to traffic matching this profile's VLAN priority.")
prvtQosMapProfDscpToFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3), )
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcTable.setDescription('Mapping Profile DSCP-to-FC Table\n         Each entry in this table defines how a mapping profile maps a specific DiffServ Code Point\n         value to a forwarding class.')
prvtQosMapProfDscpToFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosMapProfName"), (0, "PRVT-QOS-MIB", "prvtQosMapProfDscpToFcId"))
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcEntry.setDescription('An entry in prvtQosMapProfDscpToFcTable.')
prvtQosMapProfDscpToFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3, 1, 1), PrvtQosDscpType())
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcId.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcId.setDescription('The DiffServ Code Point value to which this row applies.')
prvtQosMapProfDscpToFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcRowStatus.setDescription("The RowStatus for this profile's DSCP value.")
prvtQosMapProfDscpToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3, 1, 3), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcValue.setDescription("The Forwarding Class to be assigned to traffic matching this profile's DSCP value.")
prvtQosMapProfDscpToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 3, 1, 4), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfDscpToFcColor.setDescription("The color to be assigned to traffic matching this profile's DSCP value.")
prvtQosMapProfExpToFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4), )
if mibBuilder.loadTexts: prvtQosMapProfExpToFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcTable.setDescription('Mapping Profile EXP-to-FC Table\n         Each entry in this table defines how a mapping profile maps a specific exp to\n         a forwarding class ')
prvtQosMapProfExpToFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosMapProfName"), (0, "PRVT-QOS-MIB", "prvtQosMapProfExpToFcId"))
if mibBuilder.loadTexts: prvtQosMapProfExpToFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcEntry.setDescription('An entry in prvtQosMapProfExpToFcTable.')
prvtQosMapProfExpToFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4, 1, 1), PrvtQosExpType())
if mibBuilder.loadTexts: prvtQosMapProfExpToFcId.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcId.setDescription('The Vlan priority to which this row applies.')
prvtQosMapProfExpToFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfExpToFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcRowStatus.setDescription("The RowStatus for this profile's VLAN priority.")
prvtQosMapProfExpToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4, 1, 3), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfExpToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcValue.setDescription("The Forwarding Class to be assigned to traffic matching this profile's VLAN priority.")
prvtQosMapProfExpToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 4, 4, 1, 4), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosMapProfExpToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosMapProfExpToFcColor.setDescription("The color to be assigned to traffic matching this profile's VLAN priority.")
prvtQosRemarkProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5))
prvtQosRemarkProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 1), )
if mibBuilder.loadTexts: prvtQosRemarkProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfileTable.setDescription('Remarking Profile Table\n         Each entry in this table defines a remarking profile.')
prvtQosRemarkProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosRemarkProfileName"))
if mibBuilder.loadTexts: prvtQosRemarkProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfileEntry.setDescription('An entry in prvtQosRemarkProfileTable.')
prvtQosRemarkProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 1, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosRemarkProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfileName.setDescription('Uniquely identifies a remarking profile.')
prvtQosRemarkProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfileRowStatus.setDescription('The RowStatus for this profile.')
prvtQosRemarkProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfileDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfileDescr.setDescription('User-provided description of the profile.')
prvtQosRemarkProfFcToVptTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2), )
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptTable.setDescription('Remarking Profile FC-to-VPT Table\n         Each entry in this table defines how a remarking profile maps a specific forwarding\n         class to VLAN priority value.')
prvtQosRemarkProfFcToVptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosRemarkProfileName"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToVptId"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToVptColor"))
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptEntry.setDescription('An entry in prvtQosRemarkProfFcToVptTable.')
prvtQosRemarkProfFcToVptId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2, 1, 1), PrvtQosFcType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptId.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptId.setDescription('The Forwarding Class to which this row applies.')
prvtQosRemarkProfFcToVptColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2, 1, 2), PrvtQosColorType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptColor.setDescription('The color to which this row applies.')
prvtQosRemarkProfFcToVptRS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptRS.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptRS.setDescription("The RowStatus for this profile's forwarding class.")
prvtQosRemarkProfFcToVptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 2, 1, 4), PrvtQosVptType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToVptValue.setDescription("The VLAN priority value to be assigned to traffic matching this profile's forwarding class.")
prvtQosRemarkProfFcToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3), )
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpTable.setDescription('Remarking Profile FC-to-DSCP Table\n         Each entry in this table defines how a remarking profile maps a specific forwarding\n         class to DiffServ Code Point value.')
prvtQosRemarkProfFcToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosRemarkProfileName"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToDscpId"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToDscpColor"))
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpEntry.setDescription('An entry in prvtQosRemarkProfFcToDscpTable.')
prvtQosRemarkProfFcToDscpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3, 1, 1), PrvtQosFcType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpId.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpId.setDescription('The Forwarding Class to which this row applies.')
prvtQosRemarkProfFcToDscpColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3, 1, 2), PrvtQosColorType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpColor.setDescription('The color to which this row applies.')
prvtQosRemarkProfFcToDscpRS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpRS.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpRS.setDescription("The RowStatus for this profile's forwarding class.")
prvtQosRemarkProfFcToDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 3, 1, 4), PrvtQosDscpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToDscpValue.setDescription("The DiffServ Code Point value to be assigned to traffic matching this profile's forwarding class.")
prvtQosRemarkProfFcToExpTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4), )
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpTable.setDescription('Remarking Profile FC-to-EXP Table\n         Each entry in this table defines how a remarking profile maps a specific forwarding\n         class to EXP.')
prvtQosRemarkProfFcToExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosRemarkProfileName"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToExpId"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToExpColor"))
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpEntry.setDescription('An entry in prvtQosRemarkProfFcToExpTable.')
prvtQosRemarkProfFcToExpId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4, 1, 1), PrvtQosFcType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpId.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpId.setDescription('The Forwarding Class to which this row applies.')
prvtQosRemarkProfFcToExpColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4, 1, 2), PrvtQosColorType())
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpColor.setDescription('The color to which this row applies.')
prvtQosRemarkProfFcToExpRS = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpRS.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpRS.setDescription("The RowStatus for this profile's forwarding class.")
prvtQosRemarkProfFcToExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 5, 4, 1, 4), PrvtQosExpType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosRemarkProfFcToExpValue.setDescription("The VLAN priority value to be assigned to traffic matching this profile's forwarding class.")
prvtQosServPolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6))
prvtQosSvcIngPolTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1), )
if mibBuilder.loadTexts: prvtQosSvcIngPolTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolTable.setDescription('Service Ingress Policy Table\n         Each entry in this table defines an ingress policy which may be assigned\n         to a service.')
prvtQosSvcIngPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosSvcIngPolName"))
if mibBuilder.loadTexts: prvtQosSvcIngPolEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolEntry.setDescription('An entry in prvtQosSvcIngPolTable.')
prvtQosSvcIngPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosSvcIngPolName.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolName.setDescription('Ingress service policy name.')
prvtQosSvcIngPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolRowStatus.setDescription('The RowStatus for this policy.')
prvtQosSvcIngPolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolDescr.setDescription('User-provided description of the policy.')
prvtQosSvcIngPolShaperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 4), PrvtQosServShaperProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolShaperProfile.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolShaperProfile.setDescription('The shaper profile used by this policy.\n         Sets to this object will fail if the specified shaper profile does not already exist.')
prvtQosSvcIngPolSchedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 5), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolSchedProfile.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolSchedProfile.setDescription('The scheduling profile used by this policy.\n         Sets to this object will fail if the specified scheduling profile does not already exist.')
prvtQosSvcIngPolTailDropProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 1, 1, 6), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolTailDropProfile.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolTailDropProfile.setDescription('The tail drop profile used by this policy.\n         Sets to this object will fail if the specified tail drop profile does not already exist.')
prvtQosSvcIngPolQueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2), )
if mibBuilder.loadTexts: prvtQosSvcIngPolQueTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueTable.setDescription('Service Ingress Policy Queue Table\n         Each entry in this table defines the characteristics of a queue belonging to a\n         service ingress policy.')
prvtQosSvcIngPolQueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosSvcIngPolName"), (0, "PRVT-QOS-MIB", "prvtQosSvcIngPolQueId"))
if mibBuilder.loadTexts: prvtQosSvcIngPolQueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueEntry.setDescription('An entry in prvtQosSvcIngPolQueTable.')
prvtQosSvcIngPolQueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2, 1, 1), PrvtQosQueueIdType())
if mibBuilder.loadTexts: prvtQosSvcIngPolQueId.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueId.setDescription('The queue ID to which this row applies.')
prvtQosSvcIngPolQueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolQueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueRowStatus.setDescription("The RowStatus for this policy's queue.")
prvtQosSvcIngPolQueShaperProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2, 1, 3), PrvtQosServShaperProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolQueShaperProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueShaperProf.setDescription("The shaper profile used by this policy's queue.\n         Sets to this object will fail if the specified shaper profile does not already exist.")
prvtQosSvcIngPolQueTailDropProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 6, 2, 1, 4), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosSvcIngPolQueTailDropProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosSvcIngPolQueTailDropProf.setDescription("The tail drop profile used by this policy's queue.\n         Sets to this object will fail if the specified tail drop profile does not already exist.")
prvtQosPortPolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7))
prvtQosPortIngPolTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1), )
if mibBuilder.loadTexts: prvtQosPortIngPolTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolTable.setDescription('Port Ingress Policy Table\n         Each entry in this table defines an ingress policy which may be assigned\n         to a port.')
prvtQosPortIngPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosPortIngPolName"))
if mibBuilder.loadTexts: prvtQosPortIngPolEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolEntry.setDescription('An entry in prvtQosPortIngPolTable.')
prvtQosPortIngPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosPortIngPolName.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolName.setDescription('Port ingress policy name.')
prvtQosPortIngPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolRowStatus.setDescription('The RowStatus for this policy.')
prvtQosPortIngPolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolDescr.setDescription('User-provided description of the policy.')
prvtQosPortIngPolMapProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 4), PrvtQosPolicyNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolMapProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolMapProf.setDescription('The mapping profile used by this policy.\n         Sets to this object will fail if the specified mapping profile does not already exist.')
prvtQosPortIngPolTrustMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 5), PrvtQosTrustType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolTrustMode.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolTrustMode.setDescription('The trust mode used by this policy.')
prvtQosPortIngPolUntrToFcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 6), PrvtQosFcType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolUntrToFcValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolUntrToFcValue.setDescription('The Forwarding Class to be assigned to untrusted traffic.')
prvtQosPortIngPolUntrToFcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 7), PrvtQosColorType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolUntrToFcColor.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolUntrToFcColor.setDescription('The color to be assigned to untrusted traffic.')
prvtQosPortIngPolFcToQueProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 1, 1, 8), PrvtQosPolicyNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortIngPolFcToQueProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortIngPolFcToQueProf.setDescription('The fc-to-queue profile used by this policy.\n         Sets to this object will fail if the specified fc-to-queue profile does not already exist.')
prvtQosPortEgrPolTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2), )
if mibBuilder.loadTexts: prvtQosPortEgrPolTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolTable.setDescription('Port Egress Policy Table\n         Each entry in this table defines an egress policy which may be assigned\n         to a port.')
prvtQosPortEgrPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosPortEgrPolName"))
if mibBuilder.loadTexts: prvtQosPortEgrPolEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolEntry.setDescription('An entry in prvtQosPortEgrPolTable.')
prvtQosPortEgrPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosPortEgrPolName.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolName.setDescription('Egress port policy name.')
prvtQosPortEgrPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolRowStatus.setDescription('The RowStatus for this policy.')
prvtQosPortEgrPolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolDescr.setDescription('User-provided description of the policy.')
prvtQosPortEgrPolShaperProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 4), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolShaperProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolShaperProf.setDescription('The shaper profile used by this policy.\n         Sets to this object will fail if the specified shaper profile does not already exist.')
prvtQosPortEgrPolTailDropProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 5), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolTailDropProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolTailDropProf.setDescription('The tail drop profile used by this policy.\n         Sets to this object will fail if the specified tail drop profile does not already exist.')
prvtQosPortEgrPolSredProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 6), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolSredProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolSredProf.setDescription('The SRED profile used by this policy.\n         Sets to this object will fail if the specified SRED profile does not already exist.')
prvtQosPortEgrPolSchedProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 7), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolSchedProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolSchedProf.setDescription('The scheduling profile used by this policy.\n         Sets to this object will fail if the specified scheduling profile does not already exist.')
prvtQosPortEgrPolWredProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 2, 1, 8), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolWredProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolWredProf.setDescription('The WRED profile used by this policy.\n         Sets to this object will fail if the specified WRED profile does not already exist.')
prvtQosPortEgrPolQueTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3), )
if mibBuilder.loadTexts: prvtQosPortEgrPolQueTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueTable.setDescription('Port Egress Queue Policy Table\n         Each entry in this table defines the characteristics of a queue belonging to an\n         egress port policy.')
prvtQosPortEgrPolQueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosPortEgrPolName"), (0, "PRVT-QOS-MIB", "prvtQosPortEgrPolQueId"))
if mibBuilder.loadTexts: prvtQosPortEgrPolQueEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueEntry.setDescription('An entry in prvtQosPortEgrPolQueTable.')
prvtQosPortEgrPolQueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 1), PrvtQosQueueIdType())
if mibBuilder.loadTexts: prvtQosPortEgrPolQueId.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueId.setDescription('The queue ID to which this row applies.')
prvtQosPortEgrPolQueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolQueRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueRowStatus.setDescription("The RowStatus for this policy's queue.")
prvtQosPortEgrPolQueShaperProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 3), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolQueShaperProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueShaperProf.setDescription("The shaper profile used by this policy's queue.\n         Sets to this object will fail if the specified shaper profile does not already exist.")
prvtQosPortEgrPolQueTailDropProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 4), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolQueTailDropProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueTailDropProf.setDescription("The tail drop profile used by this policy's queue.\n         Sets to this object will fail if the specified tail drop profile does not already exist.")
prvtQosPortEgrPolQueSredProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 5), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolQueSredProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueSredProf.setDescription("The SRED profile used by this policy's queue.\n         Sets to this object will fail if the specified SRED profile does not already exist.")
prvtQosPortEgrPolQueWredProf = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 7, 3, 1, 6), PrvtQosProfileIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosPortEgrPolQueWredProf.setStatus('current')
if mibBuilder.loadTexts: prvtQosPortEgrPolQueWredProf.setDescription("The WRED profile used by this policy's queue.\n         Sets to this object will fail if the specified WRED profile does not already exist.")
prvtQosInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8))
prvtQosInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8, 1), )
if mibBuilder.loadTexts: prvtQosInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosInterfaceTable.setDescription('Qos Interface Table\n         Each entry in this table defines what QOS policies to assign to an interface.')
prvtQosInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtQosInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosInterfaceEntry.setDescription('An entry in prvtQosInterfaceTable.')
prvtQosInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosInterfaceRowStatus.setDescription('The RowStatus for this port.')
prvtQosInterfaceIngPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8, 1, 1, 3), PrvtQosPolicyNameOrNoneType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosInterfaceIngPolicy.setStatus('current')
if mibBuilder.loadTexts: prvtQosInterfaceIngPolicy.setDescription('The port ingress policy to be applied to this port.\n         The policy should be fully configured in advance before being applied to a port.')
prvtQosInterfaceEgrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 8, 1, 1, 4), PrvtQosPolicyNameOrNoneType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosInterfaceEgrPolicy.setStatus('current')
if mibBuilder.loadTexts: prvtQosInterfaceEgrPolicy.setDescription('The port egress policy to be applied to this port.\n         The policy should be fully configured in advance before being applied to a port.')
prvtQosServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9))
prvtQosServiceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 1), )
if mibBuilder.loadTexts: prvtQosServiceTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosServiceTable.setDescription('Qos Service Table\n         Each entry in this table defines the QOS characteristics to assign to an service.')
prvtQosServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosServiceId"))
if mibBuilder.loadTexts: prvtQosServiceEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosServiceEntry.setDescription('An entry in prvtQosServiceTable.')
prvtQosServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 1, 1, 1), PrvtQosServiceIdType())
if mibBuilder.loadTexts: prvtQosServiceId.setStatus('current')
if mibBuilder.loadTexts: prvtQosServiceId.setDescription('The ID of a service to which this row applies.')
prvtQosServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosServiceRowStatus.setDescription('The RowStatus for this service.\n         Creation of a new row will fail if the service specified in prvtQosServiceId does not exist.')
prvtQosServiceIngressPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 1, 1, 3), PrvtQosPolicyNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServiceIngressPolicy.setStatus('current')
if mibBuilder.loadTexts: prvtQosServiceIngressPolicy.setDescription('The service ingress policy to be applied on a service.\n         The policy should be fully configured in advance before being applied to a service.')
prvtQosServSapTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 2), )
if mibBuilder.loadTexts: prvtQosServSapTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosServSapTable.setDescription('Qos Sap Table\n         Each entry in this table defines the QOS characteristics to assign to a specific\n         SAP within a service.')
prvtQosServSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosServiceId"), (0, "IF-MIB", "ifIndex"), (0, "PRVT-QOS-MIB", "prvtQosServSapEncapValue"))
if mibBuilder.loadTexts: prvtQosServSapEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosServSapEntry.setDescription('An entry in prvtQosServSapTable.')
prvtQosServSapEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 2, 1, 2), PrvtQosEncapType())
if mibBuilder.loadTexts: prvtQosServSapEncapValue.setStatus('current')
if mibBuilder.loadTexts: prvtQosServSapEncapValue.setDescription('The value of the encapsulation label to which this row applies.')
prvtQosServSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServSapRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosServSapRowStatus.setDescription("The RowStatus for this service's SAP.\n         Creation of a new row will fail if the SAP specified\n         does not exist for the service specified by prvtQosServiceId.")
prvtQosServSapPolicyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 9, 2, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosServSapPolicyEnable.setStatus('current')
if mibBuilder.loadTexts: prvtQosServSapPolicyEnable.setDescription("Apply the policy specified in prvtQosServiceIngressPolicy to this service's SAP.")
prvtQosFcToQueueProfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10))
prvtQosFcToQueueProfileTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 1), )
if mibBuilder.loadTexts: prvtQosFcToQueueProfileTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfileTable.setDescription('Fc-to-queue Profile Table\n         Each entry in this table defines a fc-to-queue profile.')
prvtQosFcToQueueProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 1, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosFcToQueueProfileName"))
if mibBuilder.loadTexts: prvtQosFcToQueueProfileEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfileEntry.setDescription('An entry in prvtQosFcToQueueProfileTable.')
prvtQosFcToQueueProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 1, 1, 1), PrvtQosPolicyNameType())
if mibBuilder.loadTexts: prvtQosFcToQueueProfileName.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfileName.setDescription('Uniquely identifies a fc-to-queue profile.')
prvtQosFcToQueueProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosFcToQueueProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfileRowStatus.setDescription('The RowStatus for this profile.')
prvtQosFcToQueueProfileDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 1, 1, 3), PrvtQosDescrType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosFcToQueueProfileDescr.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfileDescr.setDescription('User-provided description of the profile.')
prvtQosFcToQueueProfFcTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2), )
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcTable.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcTable.setDescription('Fc-to-queue Profile FC-to-queue Table\n         Each entry in this table defines how a fc-to-queue-profile maps a specific forwarding\n         class to queue value.')
prvtQosFcToQueueProfFcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2, 1), ).setIndexNames((0, "PRVT-QOS-MIB", "prvtQosFcToQueueProfileName"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToVptId"), (0, "PRVT-QOS-MIB", "prvtQosRemarkProfFcToVptColor"))
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcEntry.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcEntry.setDescription('An entry in prvtQosFcToQueueProfFcTable.')
prvtQosFcToQueueProfFcName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2, 1, 1), PrvtQosFcType())
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcName.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcName.setDescription('The Forwarding Class to which this row applies.')
prvtQosFcToQueueProfFcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcRowStatus.setDescription("The RowStatus for this profile's forwarding class.")
prvtQosFcToQueueProfFcUniQueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2, 1, 3), PrvtQosQueueIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcUniQueId.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcUniQueId.setDescription('The unicast queue ID which is mapped to the fc to which this row applies.UC queue range 1-8.')
prvtQosFcToQueueProfFcMulQueId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 7, 1, 1, 10, 2, 1, 4), PrvtQosQueueIdType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcMulQueId.setStatus('current')
if mibBuilder.loadTexts: prvtQosFcToQueueProfFcMulQueId.setDescription('The multicast queue ID which is mapped to the fc to which this row applies.MC queue range 1-2 7-8')
mibBuilder.exportSymbols("PRVT-QOS-MIB", PrvtQosPolicyNameType=PrvtQosPolicyNameType, prvtQosFcToQueueProfileEntry=prvtQosFcToQueueProfileEntry, prvtQosSvcIngPolDescr=prvtQosSvcIngPolDescr, prvtQosServShaperProfId=prvtQosServShaperProfId, prvtQosMapProfAnyDscpToFcColor=prvtQosMapProfAnyDscpToFcColor, prvtQosFcToQueueProfFcMulQueId=prvtQosFcToQueueProfFcMulQueId, prvtQosWredProfYellowThreshold=prvtQosWredProfYellowThreshold, prvtQosMapProfObjects=prvtQosMapProfObjects, prvtQosPortIngPolDescr=prvtQosPortIngPolDescr, prvtQosMapProfDscpToFcColor=prvtQosMapProfDscpToFcColor, prvtQosWredProfDescr=prvtQosWredProfDescr, prvtQosRemarkProfFcToExpId=prvtQosRemarkProfFcToExpId, prvtQosServiceEntry=prvtQosServiceEntry, prvtQosRemarkProfFcToDscpValue=prvtQosRemarkProfFcToDscpValue, prvtQosRemarkProfFcToExpColor=prvtQosRemarkProfFcToExpColor, prvtQosMapProfAnyVptToFcValue=prvtQosMapProfAnyVptToFcValue, prvtQosSchedProfileQueue1Weight=prvtQosSchedProfileQueue1Weight, prvtQosSvcIngPolRowStatus=prvtQosSvcIngPolRowStatus, PrvtQosServShaperProfileIdType=PrvtQosServShaperProfileIdType, prvtQosTailDropProfYellowThresh=prvtQosTailDropProfYellowThresh, prvtQosWredProfId=prvtQosWredProfId, prvtQosPortIngPolMapProf=prvtQosPortIngPolMapProf, prvtQosRemarkProfFcToDscpEntry=prvtQosRemarkProfFcToDscpEntry, prvtQosRemarkProfFcToDscpRS=prvtQosRemarkProfFcToDscpRS, prvtQosFcToQueueProfFcRowStatus=prvtQosFcToQueueProfFcRowStatus, prvtQosFcToQueueProfFcUniQueId=prvtQosFcToQueueProfFcUniQueId, prvtQosMapProfExpToFcColor=prvtQosMapProfExpToFcColor, prvtQosPortEgrPolDescr=prvtQosPortEgrPolDescr, prvtQosMapProfDscpToFcEntry=prvtQosMapProfDscpToFcEntry, prvtQosFcToQueueProfileTable=prvtQosFcToQueueProfileTable, prvtQosServiceId=prvtQosServiceId, prvtQosMapProfAnyDscpToFcValue=prvtQosMapProfAnyDscpToFcValue, prvtQosMapProfVptToFcEntry=prvtQosMapProfVptToFcEntry, prvtQosSredProfRedProbability=prvtQosSredProfRedProbability, prvtQosRemarkProfFcToDscpTable=prvtQosRemarkProfFcToDscpTable, prvtQosSvcIngPolQueShaperProf=prvtQosSvcIngPolQueShaperProf, prvtQosRemarkProfileName=prvtQosRemarkProfileName, prvtQosPortEgrPolQueShaperProf=prvtQosPortEgrPolQueShaperProf, prvtQosMIBObjects=prvtQosMIBObjects, prvtQosFcToQueueProfFcEntry=prvtQosFcToQueueProfFcEntry, prvtQosSvcIngPolQueTailDropProf=prvtQosSvcIngPolQueTailDropProf, prvtQosRemarkProfFcToDscpColor=prvtQosRemarkProfFcToDscpColor, prvtQosRemarkProfFcToVptId=prvtQosRemarkProfFcToVptId, prvtQosInterfaceTable=prvtQosInterfaceTable, prvtQosServShaperProfCIR=prvtQosServShaperProfCIR, prvtQosServSapEntry=prvtQosServSapEntry, prvtQosSchedProfileQueue2Weight=prvtQosSchedProfileQueue2Weight, prvtQosInterfaceEgrPolicy=prvtQosInterfaceEgrPolicy, prvtQosRemarkProfObjects=prvtQosRemarkProfObjects, prvtQosMapProfExpToFcValue=prvtQosMapProfExpToFcValue, prvtQosFcToQueueProfFcTable=prvtQosFcToQueueProfFcTable, prvtQosSredProfDescr=prvtQosSredProfDescr, prvtQosPortEgrPolQueEntry=prvtQosPortEgrPolQueEntry, PrvtQosExpType=PrvtQosExpType, prvtQosSchedProfObjects=prvtQosSchedProfObjects, prvtQosSvcIngPolShaperProfile=prvtQosSvcIngPolShaperProfile, PrvtQosEncapType=PrvtQosEncapType, prvtQosSredProfRowStatus=prvtQosSredProfRowStatus, prvtQosSredProfRedThreshold=prvtQosSredProfRedThreshold, prvtQosRemarkProfFcToDscpId=prvtQosRemarkProfFcToDscpId, prvtQosCongAvoidProfObjects=prvtQosCongAvoidProfObjects, prvtQosInterfaceIngPolicy=prvtQosInterfaceIngPolicy, PrvtQosDescrType=PrvtQosDescrType, prvtQosPortShaperProfTable=prvtQosPortShaperProfTable, prvtQosServiceTable=prvtQosServiceTable, prvtQosServPolObjects=prvtQosServPolObjects, prvtQosRemarkProfFcToVptValue=prvtQosRemarkProfFcToVptValue, prvtQosSchedProfileQueue4Weight=prvtQosSchedProfileQueue4Weight, prvtQosSredProfYellowThreshold=prvtQosSredProfYellowThreshold, prvtQosFcToQueueProfileRowStatus=prvtQosFcToQueueProfileRowStatus, prvtQosServiceIngressPolicy=prvtQosServiceIngressPolicy, prvtQosSchedProfileQueue6Weight=prvtQosSchedProfileQueue6Weight, prvtQosMapProfExpToFcRowStatus=prvtQosMapProfExpToFcRowStatus, PrvtQosQueueIdType=PrvtQosQueueIdType, prvtQosMapProfDscpToFcId=prvtQosMapProfDscpToFcId, PrvtQosSchedType=PrvtQosSchedType, prvtQosServiceRowStatus=prvtQosServiceRowStatus, prvtQosWredProfTable=prvtQosWredProfTable, prvtQosPortEgrPolTable=prvtQosPortEgrPolTable, prvtQosFcToQueueProfFcName=prvtQosFcToQueueProfFcName, prvtQosPortEgrPolName=prvtQosPortEgrPolName, prvtQosSvcIngPolQueTable=prvtQosSvcIngPolQueTable, prvtQosRemarkProfileEntry=prvtQosRemarkProfileEntry, prvtQosSredProfEntry=prvtQosSredProfEntry, prvtQosRemarkProfFcToVptTable=prvtQosRemarkProfFcToVptTable, prvtQosMapProfExpToFcTable=prvtQosMapProfExpToFcTable, prvtQosPortEgrPolShaperProf=prvtQosPortEgrPolShaperProf, prvtQosInterfaceRowStatus=prvtQosInterfaceRowStatus, prvtQosFcToQueueProfileName=prvtQosFcToQueueProfileName, prvtQosPortIngPolFcToQueProf=prvtQosPortIngPolFcToQueProf, prvtQosPortEgrPolQueTable=prvtQosPortEgrPolQueTable, prvtQosMapProfVptToFcId=prvtQosMapProfVptToFcId, prvtQosRemarkProfFcToExpRS=prvtQosRemarkProfFcToExpRS, prvtQosMapProfEntry=prvtQosMapProfEntry, prvtQosPortEgrPolQueWredProf=prvtQosPortEgrPolQueWredProf, prvtQosMapProfDscpToFcRowStatus=prvtQosMapProfDscpToFcRowStatus, prvtQosPortEgrPolTailDropProf=prvtQosPortEgrPolTailDropProf, prvtQosSvcIngPolQueRowStatus=prvtQosSvcIngPolQueRowStatus, prvtQosMapProfExpToFcId=prvtQosMapProfExpToFcId, prvtQosPortIngPolTable=prvtQosPortIngPolTable, prvtQosRemarkProfFcToVptEntry=prvtQosRemarkProfFcToVptEntry, prvtQosRemarkProfFcToExpValue=prvtQosRemarkProfFcToExpValue, prvtQosShaperProfObjects=prvtQosShaperProfObjects, prvtQosSvcIngPolQueId=prvtQosSvcIngPolQueId, PrvtQosServiceIdType=PrvtQosServiceIdType, prvtQosRemarkProfileRowStatus=prvtQosRemarkProfileRowStatus, prvtQosPortEgrPolQueSredProf=prvtQosPortEgrPolQueSredProf, prvtQosSchedProfileQueue8Weight=prvtQosSchedProfileQueue8Weight, prvtQosInterfaceObjects=prvtQosInterfaceObjects, PYSNMP_MODULE_ID=prvtQosMIB, prvtQosSchedProfileId=prvtQosSchedProfileId, prvtQosMapProfDscpToFcValue=prvtQosMapProfDscpToFcValue, PrvtQosVptType=PrvtQosVptType, prvtQosMapProfRowStatus=prvtQosMapProfRowStatus, prvtQosWredProfRowStatus=prvtQosWredProfRowStatus, prvtQosSredProfTable=prvtQosSredProfTable, prvtQosSvcIngPolSchedProfile=prvtQosSvcIngPolSchedProfile, PrvtQosQueueWeight=PrvtQosQueueWeight, prvtQosMapProfDscpToFcTable=prvtQosMapProfDscpToFcTable, PrvtQosFcType=PrvtQosFcType, prvtQosServShaperProfTable=prvtQosServShaperProfTable, prvtQosMapProfTable=prvtQosMapProfTable, prvtQosSchedProfileTable=prvtQosSchedProfileTable, prvtQosRemarkProfFcToVptRS=prvtQosRemarkProfFcToVptRS, prvtQosPortEgrPolQueRowStatus=prvtQosPortEgrPolQueRowStatus, prvtQosMapProfAnyVptToFcColor=prvtQosMapProfAnyVptToFcColor, prvtQosSredProfId=prvtQosSredProfId, prvtQosWredProfRedThreshold=prvtQosWredProfRedThreshold, prvtQosSchedProfileQueue3Weight=prvtQosSchedProfileQueue3Weight, prvtQosMapProfDescr=prvtQosMapProfDescr, prvtQosWredProfRedProbability=prvtQosWredProfRedProbability, prvtQosFcToQueueProfileDescr=prvtQosFcToQueueProfileDescr, prvtQosSchedProfileQueue5Weight=prvtQosSchedProfileQueue5Weight, prvtQosRemarkProfFcToExpTable=prvtQosRemarkProfFcToExpTable, prvtQosTailDropProfDescr=prvtQosTailDropProfDescr, prvtQosSchedProfileQueue7Weight=prvtQosSchedProfileQueue7Weight, prvtQosPortShaperProfCBS=prvtQosPortShaperProfCBS, PrvtQosTrustType=PrvtQosTrustType, prvtQosPortIngPolUntrToFcColor=prvtQosPortIngPolUntrToFcColor, prvtQosPortShaperProfCIR=prvtQosPortShaperProfCIR, prvtQosTailDropProfId=prvtQosTailDropProfId, prvtQosPortEgrPolQueId=prvtQosPortEgrPolQueId, prvtQosMapProfVptToFcValue=prvtQosMapProfVptToFcValue, prvtQosWredProfYellowProbability=prvtQosWredProfYellowProbability, prvtQosRemarkProfileDescr=prvtQosRemarkProfileDescr, PrvtQosColorType=PrvtQosColorType, prvtQosServSapTable=prvtQosServSapTable, prvtQosTailDropProfRowStatus=prvtQosTailDropProfRowStatus, prvtQosSchedProfileDescription=prvtQosSchedProfileDescription, prvtQosPortEgrPolEntry=prvtQosPortEgrPolEntry, prvtQosServSapPolicyEnable=prvtQosServSapPolicyEnable, prvtQosServShaperProfCBS=prvtQosServShaperProfCBS, prvtQosRemarkProfFcToVptColor=prvtQosRemarkProfFcToVptColor, prvtQosMapProfName=prvtQosMapProfName, PrvtQosProfileIdType=PrvtQosProfileIdType, prvtQosPortEgrPolSchedProf=prvtQosPortEgrPolSchedProf, prvtQosSchedProfileEntry=prvtQosSchedProfileEntry, prvtQosPortIngPolUntrToFcValue=prvtQosPortIngPolUntrToFcValue, prvtQosMapProfExpToFcEntry=prvtQosMapProfExpToFcEntry, prvtQosFcToQueueProfObjects=prvtQosFcToQueueProfObjects, prvtQosSchedProfileRowStatus=prvtQosSchedProfileRowStatus, prvtQosSvcIngPolTable=prvtQosSvcIngPolTable, prvtQosTailDropProfTable=prvtQosTailDropProfTable, prvtQosRemarkProfFcToExpEntry=prvtQosRemarkProfFcToExpEntry, prvtQosServShaperProfEntry=prvtQosServShaperProfEntry, prvtQosMapProfAnyExpToFcValue=prvtQosMapProfAnyExpToFcValue, prvtQosMapProfVptToFcColor=prvtQosMapProfVptToFcColor, prvtQosPortPolObjects=prvtQosPortPolObjects, prvtQosServiceObjects=prvtQosServiceObjects, prvtQosServSapRowStatus=prvtQosServSapRowStatus, prvtQosSvcIngPolEntry=prvtQosSvcIngPolEntry, prvtQosPortEgrPolSredProf=prvtQosPortEgrPolSredProf, prvtQosServShaperProfRowStatus=prvtQosServShaperProfRowStatus, prvtQosPortIngPolName=prvtQosPortIngPolName, prvtQosSvcIngPolTailDropProfile=prvtQosSvcIngPolTailDropProfile, prvtQosMIB=prvtQosMIB, PrvtQosPolicyNameOrNoneType=PrvtQosPolicyNameOrNoneType, prvtQosPortShaperProfDescr=prvtQosPortShaperProfDescr, prvtQosMapProfVptToFcRowStatus=prvtQosMapProfVptToFcRowStatus, prvtQosSvcIngPolName=prvtQosSvcIngPolName, prvtQosInterfaceEntry=prvtQosInterfaceEntry, prvtQosPortShaperProfRowStatus=prvtQosPortShaperProfRowStatus, prvtQosPortIngPolTrustMode=prvtQosPortIngPolTrustMode, prvtQosRemarkProfileTable=prvtQosRemarkProfileTable, prvtQosSvcIngPolQueEntry=prvtQosSvcIngPolQueEntry, PrvtQosDscpType=PrvtQosDscpType, prvtQosTailDropProfEntry=prvtQosTailDropProfEntry, prvtQosPortIngPolEntry=prvtQosPortIngPolEntry, prvtQosSchedProfileType=prvtQosSchedProfileType, prvtQosTailDropProfRedThresh=prvtQosTailDropProfRedThresh, prvtQosWredProfEntry=prvtQosWredProfEntry, prvtQosMapProfVptToFcTable=prvtQosMapProfVptToFcTable, prvtQosServSapEncapValue=prvtQosServSapEncapValue, prvtQosMapProfAnyExpToFcColor=prvtQosMapProfAnyExpToFcColor, prvtQosPortEgrPolWredProf=prvtQosPortEgrPolWredProf, prvtQosSredProfYellowProbability=prvtQosSredProfYellowProbability, prvtQosPortEgrPolRowStatus=prvtQosPortEgrPolRowStatus, prvtQosPortIngPolRowStatus=prvtQosPortIngPolRowStatus, prvtQosServShaperProfDescr=prvtQosServShaperProfDescr, prvtQosPortShaperProfId=prvtQosPortShaperProfId, prvtQosPortShaperProfEntry=prvtQosPortShaperProfEntry, prvtQosPortEgrPolQueTailDropProf=prvtQosPortEgrPolQueTailDropProf)
