#
# PySNMP MIB module PRVT-SWITCH-IPVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-SWITCH-IPVLAN-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:20:51 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ipSwitch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "ipSwitch")
dot1qVlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ObjectIdentity, ModuleIdentity, MibIdentifier, iso, TimeTicks, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "IpAddress", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
prvtSwitchIpVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 2))
prvtSwitchIpVlanMIB.setRevisions(('2009-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtSwitchIpVlanMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtSwitchIpVlanMIB.setLastUpdated('200910050000Z')
if mibBuilder.loadTexts: prvtSwitchIpVlanMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtSwitchIpVlanMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtSwitchIpVlanMIB.setDescription('The IpVlan MIB module that controls the assignment\n         of IP subnets to VLANs in L3 switches.')
ipInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1))
ipInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1), )
if mibBuilder.loadTexts: ipInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceTable.setDescription('This table controls the creation of IP interfaces (subnets).')
ipInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1), ).setIndexNames((0, "PRVT-SWITCH-IPVLAN-MIB", "ipInterfaceName"))
if mibBuilder.loadTexts: ipInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceEntry.setDescription('An entry within the ipInterfaceTable.')
ipInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: ipInterfaceName.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceName.setDescription('This object identifies the name of the IP interface, serves as an\n         index to this table.\n         Valid names are system-dependent. Some common examples are swX, and\n         loX, where X represents an integer from 0 to 9.')
ipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceIndex.setDescription('This object identifies the index of the IP interface.\n         This is the same index as ifIndex from ifTable, which is also the\n         same as ipAdEntIfIndex from MIB-II (ipAddrTable).')
ipInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceIpAddress.setDescription('This object has the value of the switch IP address in this subnet.')
ipInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setDescription('This object together with ipInterfaceIpAddress forms the IP\n         subnet, assigned to this IP interface. In the case that ipInterfaceIpAddress\n         has the value of 0.0.0.0, this object will be ignored.')
ipInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceRowStatus.setDescription('This object indicates the row status, and enables the creation and\n         deletion of rows in this table. See SNMPv2-TC for more information.')
ipInterfaceIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 1, 1, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipInterfaceIPv6Address.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceIPv6Address.setDescription('This object indicated the IPv6 address of the interface.')
ipVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2))
ipVlanTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 1), )
if mibBuilder.loadTexts: ipVlanTable.setStatus('current')
if mibBuilder.loadTexts: ipVlanTable.setDescription('This table extends the table dot1qVlanStaticTable from Q-BRIDGE-MIB.\n         It gives a connection between the IP Interface and the IP VLAN.')
ipVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "PRVT-SWITCH-IPVLAN-MIB", "ipInterfaceName"))
if mibBuilder.loadTexts: ipVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ipVlanEntry.setDescription('An entry within the ipVlanTable.')
ipVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attached", 1), ("detached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipVlanStatus.setStatus('current')
if mibBuilder.loadTexts: ipVlanStatus.setDescription('This object shows the VLAN on which the interface in the index\n         of the entry is installed and vice versa.')
ipVlanManagementTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 2), )
if mibBuilder.loadTexts: ipVlanManagementTable.setStatus('current')
if mibBuilder.loadTexts: ipVlanManagementTable.setDescription('This table extends the table dot1qVlanStaticTable from Q-BRIDGE-MIB.')
ipVlanManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 2, 1), ).setIndexNames((0, "PRVT-SWITCH-IPVLAN-MIB", "ipVlanManagementVlanId"))
if mibBuilder.loadTexts: ipVlanManagementEntry.setStatus('current')
if mibBuilder.loadTexts: ipVlanManagementEntry.setDescription('An entry within the ipVlanManagementTable.')
ipVlanManagementVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092)))
if mibBuilder.loadTexts: ipVlanManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: ipVlanManagementVlanId.setDescription('Vlan id')
ipVlanManagementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 2, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipVlanManagementStatus.setStatus('current')
if mibBuilder.loadTexts: ipVlanManagementStatus.setDescription('This object shows if Vlan manageble')
mibBuilder.exportSymbols("PRVT-SWITCH-IPVLAN-MIB", ipInterfaceName=ipInterfaceName, ipVlanManagementTable=ipVlanManagementTable, PYSNMP_MODULE_ID=prvtSwitchIpVlanMIB, ipInterfaceSubnetMask=ipInterfaceSubnetMask, ipVlanStatus=ipVlanStatus, ipInterfaceIndex=ipInterfaceIndex, prvtSwitchIpVlanMIB=prvtSwitchIpVlanMIB, ipVlanTable=ipVlanTable, ipInterfaceTable=ipInterfaceTable, ipVlanEntry=ipVlanEntry, ipInterfaceEntry=ipInterfaceEntry, ipVlanManagementEntry=ipVlanManagementEntry, ipVlan=ipVlan, ipInterface=ipInterface, ipInterfaceRowStatus=ipInterfaceRowStatus, ipVlanManagementVlanId=ipVlanManagementVlanId, ipInterfaceIpAddress=ipInterfaceIpAddress, ipVlanManagementStatus=ipVlanManagementStatus, ipInterfaceIPv6Address=ipInterfaceIPv6Address)
