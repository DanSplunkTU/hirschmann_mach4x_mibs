#
# PySNMP MIB module RADIUS-AUTH-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RADIUS-AUTH-CLIENT-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 17:08:23 2022
# On host fv-az74-933 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Gauge32, NotificationType, Unsigned32, iso, mib_2, ModuleIdentity, ObjectIdentity, Counter32, Counter64, Bits, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "NotificationType", "Unsigned32", "iso", "mib-2", "ModuleIdentity", "ObjectIdentity", "Counter32", "Counter64", "Bits", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
radiusAuthClientMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 67, 1, 2))
radiusAuthClientMIB.setRevisions(('1999-06-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: radiusAuthClientMIB.setRevisionsDescriptions(('Initial version as published in RFC 2618',))
if mibBuilder.loadTexts: radiusAuthClientMIB.setLastUpdated('9906110000Z')
if mibBuilder.loadTexts: radiusAuthClientMIB.setOrganization('IETF RADIUS Working Group.')
if mibBuilder.loadTexts: radiusAuthClientMIB.setContactInfo(' Bernard Aboba\n                Microsoft\n\n                One Microsoft Way\n                Redmond, WA  98052\n                US\n\n                Phone: +1 425 936 6605\n                EMail: bernarda@microsoft.com')
if mibBuilder.loadTexts: radiusAuthClientMIB.setDescription('The MIB module for entities implementing the client\n              side of the Remote Access Dialin User Service (RADIUS)\n              authentication protocol.')
radiusMIB = ObjectIdentity((1, 3, 6, 1, 2, 1, 67))
if mibBuilder.loadTexts: radiusMIB.setStatus('current')
if mibBuilder.loadTexts: radiusMIB.setDescription('The OID assigned to RADIUS MIB work by the IANA.')
radiusAuthentication = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1))
radiusAuthClientMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 2, 1))
radiusAuthClient = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1))
radiusAuthClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientInvalidServerAddresses.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientInvalidServerAddresses.setDescription('The number of RADIUS Access-Response packets\n             received from unknown addresses.')
radiusAuthClientIdentifier = MibScalar((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientIdentifier.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientIdentifier.setDescription('The NAS-Identifier of the RADIUS authentication client.\n              This is not necessarily the same as sysName in MIB II.')
radiusAuthServerTable = MibTable((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3), )
if mibBuilder.loadTexts: radiusAuthServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusAuthServerTable.setDescription('The (conceptual) table listing the RADIUS authentication\n             servers with which the client shares a secret.')
radiusAuthServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1), ).setIndexNames((0, "RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerIndex"))
if mibBuilder.loadTexts: radiusAuthServerEntry.setStatus('current')
if mibBuilder.loadTexts: radiusAuthServerEntry.setDescription('An entry (conceptual row) representing a RADIUS\n             authentication server with which the client shares\n             a secret.')
radiusAuthServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: radiusAuthServerIndex.setStatus('current')
if mibBuilder.loadTexts: radiusAuthServerIndex.setDescription('A number uniquely identifying each RADIUS\n             Authentication server with which this client\n             communicates.')
radiusAuthServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthServerAddress.setStatus('current')
if mibBuilder.loadTexts: radiusAuthServerAddress.setDescription('The IP address of the RADIUS authentication server\n             referred to in this table entry.')
radiusAuthClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientServerPortNumber.setDescription('The UDP port the client is using to send requests to\n             this server.')
radiusAuthClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientRoundTripTime.setDescription('The time interval (in hundredths of a second) between\n             the most recent Access-Reply/Access-Challenge and the\n             Access-Request that matched it from this RADIUS\n             authentication server.')
radiusAuthClientAccessRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAccessRequests.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientAccessRequests.setDescription('The number of RADIUS Access-Request packets sent\n             to this server. This does not include retransmissions.')
radiusAuthClientAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientAccessRetransmissions.setDescription('The number of RADIUS Access-Request packets\n             retransmitted to this RADIUS authentication server.')
radiusAuthClientAccessAccepts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientAccessAccepts.setDescription('The number of RADIUS Access-Accept packets\n             (valid or invalid) received from this server.')
radiusAuthClientAccessRejects = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAccessRejects.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientAccessRejects.setDescription('The number of RADIUS Access-Reject packets\n             (valid or invalid) received from this server.')
radiusAuthClientAccessChallenges = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientAccessChallenges.setDescription('The number of RADIUS Access-Challenge packets\n             (valid or invalid) received from this server.')
radiusAuthClientMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientMalformedAccessResponses.setDescription('The number of malformed RADIUS Access-Response\n             packets received from this server.\n             Malformed packets include packets with\n             an invalid length. Bad authenticators or\n             Signature attributes or unknown types are not\n\n             included as malformed access responses.')
radiusAuthClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientBadAuthenticators.setDescription('The number of RADIUS Access-Response packets\n             containing invalid authenticators or Signature\n             attributes received from this server.')
radiusAuthClientPendingRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientPendingRequests.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientPendingRequests.setDescription('The number of RADIUS Access-Request packets\n             destined for this server that have not yet timed out\n             or received a response. This variable is incremented\n             when an Access-Request is sent and decremented due to\n             receipt of an Acess-Accept, Access-Reject or\n             Access-Challenge, a timeout or retransmission.')
radiusAuthClientTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientTimeouts.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientTimeouts.setDescription('The number of authentication timeouts to this server.\n             After a timeout the client may retry to the same\n             server, send to a different server, or\n             give up. A retry to the same server is counted as a\n             retransmit as well as a timeout. A send to a different\n             server is counted as a Request as well as a timeout.')
radiusAuthClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientUnknownTypes.setDescription('The number of RADIUS packets of unknown type which\n             were received from this server on the authentication port.')
radiusAuthClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 1, 2, 1, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAuthClientPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientPacketsDropped.setDescription('The number of RADIUS packets of which were\n             received from this server on the authentication port\n             and dropped for some other reason.')
radiusAuthClientMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 2, 2))
radiusAuthClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 1))
radiusAuthClientMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 2))
radiusAuthClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 1, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAuthClientMIBCompliance = radiusAuthClientMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientMIBCompliance.setDescription('The compliance statement for authentication clients\n            implementing the RADIUS Authentication Client MIB.')
radiusAuthClientMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 1, 2, 2, 2, 1)).setObjects(("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientIdentifier"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientInvalidServerAddresses"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthServerAddress"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientServerPortNumber"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientRoundTripTime"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientAccessRequests"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientAccessRetransmissions"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientAccessAccepts"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientAccessRejects"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientAccessChallenges"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientMalformedAccessResponses"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientBadAuthenticators"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientPendingRequests"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientTimeouts"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientUnknownTypes"), ("RADIUS-AUTH-CLIENT-MIB", "radiusAuthClientPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAuthClientMIBGroup = radiusAuthClientMIBGroup.setStatus('current')
if mibBuilder.loadTexts: radiusAuthClientMIBGroup.setDescription('The basic collection of objects providing management of\n            RADIUS Authentication Clients.')
mibBuilder.exportSymbols("RADIUS-AUTH-CLIENT-MIB", radiusAuthClientMIBGroups=radiusAuthClientMIBGroups, radiusAuthClientAccessRetransmissions=radiusAuthClientAccessRetransmissions, radiusAuthClientAccessRejects=radiusAuthClientAccessRejects, radiusAuthClientIdentifier=radiusAuthClientIdentifier, radiusAuthClientAccessRequests=radiusAuthClientAccessRequests, radiusAuthClientInvalidServerAddresses=radiusAuthClientInvalidServerAddresses, radiusAuthClientMIBObjects=radiusAuthClientMIBObjects, PYSNMP_MODULE_ID=radiusAuthClientMIB, radiusAuthServerTable=radiusAuthServerTable, radiusAuthClientUnknownTypes=radiusAuthClientUnknownTypes, radiusAuthClientMIBCompliances=radiusAuthClientMIBCompliances, radiusAuthClientAccessAccepts=radiusAuthClientAccessAccepts, radiusAuthClientMIBCompliance=radiusAuthClientMIBCompliance, radiusAuthServerEntry=radiusAuthServerEntry, radiusAuthentication=radiusAuthentication, radiusAuthClientPendingRequests=radiusAuthClientPendingRequests, radiusAuthServerAddress=radiusAuthServerAddress, radiusAuthClient=radiusAuthClient, radiusMIB=radiusMIB, radiusAuthClientPacketsDropped=radiusAuthClientPacketsDropped, radiusAuthClientServerPortNumber=radiusAuthClientServerPortNumber, radiusAuthClientMIB=radiusAuthClientMIB, radiusAuthServerIndex=radiusAuthServerIndex, radiusAuthClientAccessChallenges=radiusAuthClientAccessChallenges, radiusAuthClientTimeouts=radiusAuthClientTimeouts, radiusAuthClientRoundTripTime=radiusAuthClientRoundTripTime, radiusAuthClientMIBGroup=radiusAuthClientMIBGroup, radiusAuthClientMalformedAccessResponses=radiusAuthClientMalformedAccessResponses, radiusAuthClientMIBConformance=radiusAuthClientMIBConformance, radiusAuthClientBadAuthenticators=radiusAuthClientBadAuthenticators)
