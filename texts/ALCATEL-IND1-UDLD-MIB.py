#
# PySNMP MIB module ALCATEL-IND1-UDLD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-UDLD-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 17:15:06 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Udld, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Udld")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, ModuleIdentity, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Integer32, Gauge32, Counter32, NotificationType, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Integer32", "Gauge32", "Counter32", "NotificationType", "Unsigned32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
alcatelIND1UDLDMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1))
alcatelIND1UDLDMIB.setRevisions(('2007-02-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1UDLDMIB.setRevisionsDescriptions(("The UDLD MIB defines a set of UDLD related management objects for ports\n                that support UniDirectional Link Detection (UDLD) Protocol. UDLD as a\n                protocol provides mechanisms to detect and disable unidirectional links\n                caused for instance by mis-wiring of fiber strands, interface malfunctions,\n                media converters' faults, etc. It operates at Layer 2 in conjunction\n                with IEEE 802.3's existing Layer 1 fault detection mechanisms.\n\n                This MIB comprises proprietary managed objects as well the objects required\n                for conforming to the protocol.",))
if mibBuilder.loadTexts: alcatelIND1UDLDMIB.setLastUpdated('200702140000Z')
if mibBuilder.loadTexts: alcatelIND1UDLDMIB.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: alcatelIND1UDLDMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate\n                version of this document is used with the products in question:\n\n                        Alcatel Internetworking, Incorporated\n                        (Division 1, Formerly XYLAN Corporation)\n                        26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                        United States Of America\n\n                        Telephone:      North America  +1 800 995 2696\n                                        Latin America  +1 877 919 9526\n                                        Europe         +31 23 556 0100\n                                        Asia           +65 394 7933\n                                        All Other      +1 818 878 4507\n\n                Electronic Mail:         support@ind.alcatel.com\n                World Wide Web:          http://www.ind.alcatel.com\n                File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1UDLDMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n                        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                        For the Birds Of Prey Product Line\n                        UDLD for detection and disabling unidirectional links.\n\n\n                        The right to make changes in specification and other information\n                        contained in this document without prior notice is reserved.\n\n                        No liability shall be assumed for any incidental, indirect, special, or\n                        consequential damages whatsoever arising from or related to this\n                        document or the information contained herein.\n\n                        Vendors, end-users, and other interested parties are granted\n                        non-exclusive license to use this specification in connection with\n                        management of the products for which it is intended to be used.\n\n                        Copyright (C) 1995-2002 Alcatel Internetworking, Incorporated\n                        ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1UDLDMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1))
if mibBuilder.loadTexts: alcatelIND1UDLDMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDLDMIBObjects.setDescription('Branch For UDLD\n                    Subsystem Managed Objects.')
alcatelIND1UDLDMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2))
if mibBuilder.loadTexts: alcatelIND1UDLDMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDLDMIBConformance.setDescription('Branch for UDLD Module MIB Subsystem Conformance Information.')
alcatelIND1UDLDMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1UDLDMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDLDMIBGroups.setDescription('Branch for UDLD Module MIB Subsystem Units of Conformance.')
alcatelIND1UDLDMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1UDLDMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDLDMIBCompliances.setDescription('Branch for UDLD Module MIB Subsystem Compliance Statements.')
alaUdldGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: alaUdldGlobalStatus.setDescription('This variable is used to enable or diable UDLD on the switch.\n                        The value enable (1) indicates that UDLD should be enabled on\n                        the switch. The value disable (2) is used to disable UDLD on\n                        the switch. By default, UDLD is disabled on the switch.')
alaUdldGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldGlobalClearStats.setStatus('current')
if mibBuilder.loadTexts: alaUdldGlobalClearStats.setDescription('Defines the global clear statistics control for UDLD.\n                        The value reset (1) indicates that UDLD should clear all\n                        statistic counters related to all ports in the system.\n                        By default, this object contains a zero value.')
alaUdldGlobalConfigUdldMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldMode.setStatus('current')
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldMode.setDescription('Defines the mode of operation of the UDLD protocol on the interface.\n                normal - The UDLD state machines participates normally in UDLD protocol\n                        exchanges. The protocol determination at the end of detection\n                        process is always based upon information received in UDLD messages.\n                aggressive - UDLD will shut down all port even in case it loses bidirectional\n                        connectivity with the neighbor for a defined period of time.')
alaUdldGlobalConfigUdldProbeIntervalTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(7, 90)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldProbeIntervalTimer.setStatus('current')
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldProbeIntervalTimer.setDescription('Maximum period of time after which the Probe message is expected\n                from the neighbor. The range supported is 7-90 seconds.')
alaUdldGlobalConfigUdldDetectionPeriodTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(8)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldDetectionPeriodTimer.setStatus('current')
if mibBuilder.loadTexts: alaUdldGlobalConfigUdldDetectionPeriodTimer.setDescription('Maximum period of time before which detection of neighbor is expected.\n                If Reply to the Sent Echo message/(s) is not received before, the\n                timer for detection period expires, the link is detected as faulty and the\n                associated port state is marked Undetermined/Shutdown (depending upon the\n                UDLD operation-mode is Normal/Aggressive).')
udldPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6))
alaUdldPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaUdldPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigTable.setDescription('A table containing UDLD port configuration information.')
alaUdldPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigIfIndex"))
if mibBuilder.loadTexts: alaUdldPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigEntry.setDescription('A UDLD port configuration entry.')
alaUdldPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaUdldPortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigIfIndex.setDescription('The ifindex of the port on which UDLD is running')
alaUdldPortConfigUdldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldPortConfigUdldStatus.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigUdldStatus.setDescription('This variable is used to enable or diable UDLD on the interface.\n                The value enable (1) indicates that UDLD should be enabled on\n                the interface. The value disable (2) is used to disable UDLD on\n                the interface. By default, UDLD is disabled on the interface.')
alaUdldPortConfigUdldMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldPortConfigUdldMode.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigUdldMode.setDescription('Defines the mode of operation of the UDLD protocol on the interface.\n                normal - The UDLD state machines participates normally in UDLD protocol\n                        exchanges. The protocol determination at the end of detection\n                        process is always based upon information received in UDLD messages.\n                aggressive - UDLD will shut down a port even in case it loses bidirectional\n                        connectivity with the neighbor for a defined period of time.')
alaUdldPortConfigUdldProbeIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(7, 90)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldPortConfigUdldProbeIntervalTimer.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigUdldProbeIntervalTimer.setDescription('Maximum period of time after which the Probe message is expected\n                from the neighbor. The range supported is 7-90 seconds.')
alaUdldPortConfigUdldDetectionPeriodTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(8)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldPortConfigUdldDetectionPeriodTimer.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigUdldDetectionPeriodTimer.setDescription('Maximum period of time before which detection of neighbor is expected.\n                If Reply to the Sent Echo message/(s) is not received before, the\n                timer for detection period expires, the link is detected as faulty and the\n                associated port state is marked Undetermined/Shutdown (depending upon the\n                UDLD operation-mode is Normal/Aggressive).')
alaUdldPortConfigUdldOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 0), ("shutdown", 1), ("undetermined", 2), ("bidirectional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldPortConfigUdldOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortConfigUdldOperationalStatus.setDescription('The state of the interface as determined by UDLD operation.')
udldPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7))
alaUdldPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaUdldPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortStatsTable.setDescription('A table containing UDLD statistics information.')
alaUdldPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDLD-MIB", "alaUdldPortStatsIfIndex"))
if mibBuilder.loadTexts: alaUdldPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortStatsEntry.setDescription('A UDLD Statistics entry (per port).')
alaUdldPortStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaUdldPortStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortStatsIfIndex.setDescription('The ifindex of the port on which UDLD is running')
alaUdldNumUDLDNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldNumUDLDNeighbors.setStatus('current')
if mibBuilder.loadTexts: alaUdldNumUDLDNeighbors.setDescription('This object gives the number of neighbors for the interface.')
alaUdldPortStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaUdldPortStatsClear.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortStatsClear.setDescription('Reset all statistics parameters corresponding to this port.\n             By default, this objects contains a zero value.')
alaUdldPortNumProbeSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldPortNumProbeSent.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNumProbeSent.setDescription('Number of Probe message sent by a port.')
alaUdldPortNumEchoSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldPortNumEchoSent.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNumEchoSent.setDescription('Number of Echo message sent by a port.')
alaUdldPortNumInvalidRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldPortNumInvalidRcvd.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNumInvalidRcvd.setDescription('Number of Invalid message received by a port.')
alaUdldPortNumFlushRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldPortNumFlushRcvd.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNumFlushRcvd.setDescription('Number of UDLD-Flush message received by a port.')
udldPortNeighborStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8))
alaUdldPortNeighborStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaUdldPortNeighborStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNeighborStatsTable.setDescription("UDLD port's PDU related statistics for a neighbor.")
alaUdldPortNeighborStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-UDLD-MIB", "alaUdldPortNeighborStatsIfIndex"), (0, "ALCATEL-IND1-UDLD-MIB", "alaUdldNeighborIfIndex"))
if mibBuilder.loadTexts: alaUdldPortNeighborStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNeighborStatsEntry.setDescription('A UDLD Statistics entry (per port, per neighbor).')
alaUdldPortNeighborStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaUdldPortNeighborStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortNeighborStatsIfIndex.setDescription('The ifindex of the port on which UDLD is running')
alaUdldNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: alaUdldNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaUdldNeighborIfIndex.setDescription('The index of the neighbor to which the Statistics belong')
alaUdldNeighborName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldNeighborName.setStatus('current')
if mibBuilder.loadTexts: alaUdldNeighborName.setDescription('The name of the neighbor')
alaUdldNumHelloRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldNumHelloRcvd.setStatus('current')
if mibBuilder.loadTexts: alaUdldNumHelloRcvd.setDescription('This object gives the number of hello messages recieved from the neighbor for this interface.')
alaUdldNumEchoRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaUdldNumEchoRcvd.setStatus('current')
if mibBuilder.loadTexts: alaUdldNumEchoRcvd.setDescription('This object gives the number of echo messages received from the neighbor for this interface.')
alaUdldPrevState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 0), ("shutdown", 1), ("undetermined", 2), ("bidirectional", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaUdldPrevState.setStatus('current')
if mibBuilder.loadTexts: alaUdldPrevState.setDescription('The previous UDLD state of the Port.')
alaUdldCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 0), ("shutdown", 1), ("undetermined", 2), ("bidirectional", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaUdldCurrentState.setStatus('current')
if mibBuilder.loadTexts: alaUdldCurrentState.setDescription('The current UDLD state of the Port.')
alaUdldPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 1, 11), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaUdldPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaUdldPortIfIndex.setDescription('The ifindex of the port on which UDLD trap is raised')
alaUdldEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 3))
udldStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 3, 0, 1)).setObjects(("ALCATEL-IND1-UDLD-MIB", "alaUdldPortIfIndex"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPrevState"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldCurrentState"))
if mibBuilder.loadTexts: udldStateChange.setStatus('current')
if mibBuilder.loadTexts: udldStateChange.setDescription('The UDLD-state of port has changed. Notify the user by\n                 raising the Trap. Notify the Management Entity the previous\n                 UDLD-state and UDLD-Current.')
alcatelIND1UDLDMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-UDLD-MIB", "udldPortBaseGroup"), ("ALCATEL-IND1-UDLD-MIB", "udldPortConfigGroup"), ("ALCATEL-IND1-UDLD-MIB", "udldPortStatsGroup"), ("ALCATEL-IND1-UDLD-MIB", "udldPortNeighborStatsGroup"), ("ALCATEL-IND1-UDLD-MIB", "udldPortTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1UDLDMIBCompliance = alcatelIND1UDLDMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1UDLDMIBCompliance.setDescription('Compliance statement for UDLD.')
udldPortBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-UDLD-MIB", "alaUdldGlobalStatus"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldGlobalClearStats"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldGlobalConfigUdldMode"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldGlobalConfigUdldProbeIntervalTimer"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldGlobalConfigUdldDetectionPeriodTimer"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPrevState"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldCurrentState"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    udldPortBaseGroup = udldPortBaseGroup.setStatus('current')
if mibBuilder.loadTexts: udldPortBaseGroup.setDescription('Collection of objects for management of UDLD Base Group.')
udldPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigUdldStatus"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigUdldMode"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigUdldProbeIntervalTimer"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigUdldDetectionPeriodTimer"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortConfigUdldOperationalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    udldPortConfigGroup = udldPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: udldPortConfigGroup.setDescription('Collection of objects for management of UDLD Port Configuration Table.')
udldPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-UDLD-MIB", "alaUdldNumUDLDNeighbors"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortStatsClear"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortNumProbeSent"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortNumEchoSent"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortNumInvalidRcvd"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldPortNumFlushRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    udldPortStatsGroup = udldPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: udldPortStatsGroup.setDescription('Collection of objects for management of UDLD Port Statistics Table.')
udldPortNeighborStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-UDLD-MIB", "alaUdldNeighborName"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldNumHelloRcvd"), ("ALCATEL-IND1-UDLD-MIB", "alaUdldNumEchoRcvd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    udldPortNeighborStatsGroup = udldPortNeighborStatsGroup.setStatus('current')
if mibBuilder.loadTexts: udldPortNeighborStatsGroup.setDescription('Collection of objects for management of UDLD Port Neighbor Statistics Table.')
udldPortTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 44, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-UDLD-MIB", "udldStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    udldPortTrapGroup = udldPortTrapGroup.setStatus('current')
if mibBuilder.loadTexts: udldPortTrapGroup.setDescription('Collection of objects for UDLD Traps.')
mibBuilder.exportSymbols("ALCATEL-IND1-UDLD-MIB", alaUdldEvents=alaUdldEvents, udldPortConfigGroup=udldPortConfigGroup, alaUdldPortIfIndex=alaUdldPortIfIndex, udldPortConfig=udldPortConfig, alaUdldGlobalConfigUdldMode=alaUdldGlobalConfigUdldMode, udldPortTrapGroup=udldPortTrapGroup, alaUdldPortNeighborStatsEntry=alaUdldPortNeighborStatsEntry, alaUdldNumHelloRcvd=alaUdldNumHelloRcvd, alaUdldCurrentState=alaUdldCurrentState, alaUdldNumUDLDNeighbors=alaUdldNumUDLDNeighbors, alaUdldPortNumFlushRcvd=alaUdldPortNumFlushRcvd, alaUdldGlobalClearStats=alaUdldGlobalClearStats, udldPortStats=udldPortStats, alaUdldNeighborIfIndex=alaUdldNeighborIfIndex, udldPortStatsGroup=udldPortStatsGroup, alaUdldGlobalConfigUdldDetectionPeriodTimer=alaUdldGlobalConfigUdldDetectionPeriodTimer, alaUdldPortConfigUdldOperationalStatus=alaUdldPortConfigUdldOperationalStatus, alaUdldPortStatsClear=alaUdldPortStatsClear, alaUdldPortStatsEntry=alaUdldPortStatsEntry, alaUdldPortConfigEntry=alaUdldPortConfigEntry, alaUdldNumEchoRcvd=alaUdldNumEchoRcvd, alaUdldPortNumEchoSent=alaUdldPortNumEchoSent, alaUdldGlobalStatus=alaUdldGlobalStatus, alaUdldPortConfigIfIndex=alaUdldPortConfigIfIndex, alaUdldNeighborName=alaUdldNeighborName, alaUdldPortNumInvalidRcvd=alaUdldPortNumInvalidRcvd, alcatelIND1UDLDMIBConformance=alcatelIND1UDLDMIBConformance, alaUdldPortNeighborStatsTable=alaUdldPortNeighborStatsTable, alaUdldPortNumProbeSent=alaUdldPortNumProbeSent, udldStateChange=udldStateChange, udldPortNeighborStats=udldPortNeighborStats, alaUdldPortStatsIfIndex=alaUdldPortStatsIfIndex, alaUdldPrevState=alaUdldPrevState, alaUdldGlobalConfigUdldProbeIntervalTimer=alaUdldGlobalConfigUdldProbeIntervalTimer, alaUdldPortConfigTable=alaUdldPortConfigTable, PYSNMP_MODULE_ID=alcatelIND1UDLDMIB, alcatelIND1UDLDMIBObjects=alcatelIND1UDLDMIBObjects, udldPortBaseGroup=udldPortBaseGroup, alaUdldPortConfigUdldDetectionPeriodTimer=alaUdldPortConfigUdldDetectionPeriodTimer, alaUdldPortNeighborStatsIfIndex=alaUdldPortNeighborStatsIfIndex, alcatelIND1UDLDMIBGroups=alcatelIND1UDLDMIBGroups, alcatelIND1UDLDMIBCompliance=alcatelIND1UDLDMIBCompliance, alcatelIND1UDLDMIBCompliances=alcatelIND1UDLDMIBCompliances, alaUdldPortConfigUdldStatus=alaUdldPortConfigUdldStatus, alaUdldPortConfigUdldMode=alaUdldPortConfigUdldMode, alcatelIND1UDLDMIB=alcatelIND1UDLDMIB, alaUdldPortConfigUdldProbeIntervalTimer=alaUdldPortConfigUdldProbeIntervalTimer, udldPortNeighborStatsGroup=udldPortNeighborStatsGroup, alaUdldPortStatsTable=alaUdldPortStatsTable)
