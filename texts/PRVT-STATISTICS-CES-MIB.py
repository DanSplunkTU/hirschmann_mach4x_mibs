#
# PySNMP MIB module PRVT-STATISTICS-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-STATISTICS-CES-MIB
# Produced by pysmi-1.1.3 at Sat Nov 20 16:58:01 2021
# On host fv-az42-715 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
dsx1CurrentEntry, dsx1TotalEntry, dsx1FarEndCurrentEntry, dsx1FarEndTotalEntry, dsx1FarEndIntervalEntry, dsx1IntervalEntry = mibBuilder.importSymbols("DS1-MIB", "dsx1CurrentEntry", "dsx1TotalEntry", "dsx1FarEndCurrentEntry", "dsx1FarEndTotalEntry", "dsx1FarEndIntervalEntry", "dsx1IntervalEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Unsigned32, ModuleIdentity, Integer32, Bits, TimeTicks, Counter32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Integer32", "Bits", "TimeTicks", "Counter32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonetVTIntervalEntry, sonetFarEndVTCurrentEntry, sonetSectionIntervalEntry, sonetSectionCurrentEntry, sonetFarEndLineCurrentEntry, sonetPathCurrentEntry, sonetFarEndLineIntervalEntry, sonetLineCurrentEntry, sonetFarEndPathCurrentEntry, sonetPathIntervalEntry, sonetLineIntervalEntry, sonetVTCurrentEntry, sonetFarEndPathIntervalEntry, sonetFarEndVTIntervalEntry = mibBuilder.importSymbols("SONET-MIB", "sonetVTIntervalEntry", "sonetFarEndVTCurrentEntry", "sonetSectionIntervalEntry", "sonetSectionCurrentEntry", "sonetFarEndLineCurrentEntry", "sonetPathCurrentEntry", "sonetFarEndLineIntervalEntry", "sonetLineCurrentEntry", "sonetFarEndPathCurrentEntry", "sonetPathIntervalEntry", "sonetLineIntervalEntry", "sonetVTCurrentEntry", "sonetFarEndPathIntervalEntry", "sonetFarEndVTIntervalEntry")
prvtStatisticsCESMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 114))
prvtStatisticsCESMib.setRevisions(('2009-04-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtStatisticsCESMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: prvtStatisticsCESMib.setLastUpdated('200904070000Z')
if mibBuilder.loadTexts: prvtStatisticsCESMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtStatisticsCESMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtStatisticsCESMib.setDescription('This module includes statistics that are not inlcluded in SONET-mib and\nDS1-MIB.')
prvtStatisticsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0))
prvtStatisticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1))
prvtStatisticsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 2))
prvtStatisticsDSx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1))
prvtStatisticsSection = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2))
prvtStatisticsLine = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3))
prvtStatisticsPath = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4))
prvtStatisticsVt = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5))
prvtDSx1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1), )
if mibBuilder.loadTexts: prvtDSx1CurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1CurrentTable.setDescription('This table contains statistics that are not supported in dsx1CurrentTable ')
prvtDSx1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1), )
dsx1CurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1CurrentEntry"))
prvtDSx1CurrentEntry.setIndexNames(*dsx1CurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1CurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1CurrentEntry.setDescription('An entry in the prvtDSx1CurrentTable table.')
prvtDSx1CurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1CurrentBBEs.setDescription('The number of Background Block Errors.')
prvtDSx1CurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentLSESs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1CurrentLSESs.setDescription('The number of Line Severely Errored Seconds')
prvtDSx1CurrentPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1CurrentPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1CurrentPFCs.setDescription('Path Faults counts.')
prvtDSx1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2), )
if mibBuilder.loadTexts: prvtDSx1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1IntervalTable.setDescription('This table contains statistics that are not supported in dsx1IntervalTable ')
prvtDSx1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1), )
dsx1IntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1IntervalEntry"))
prvtDSx1IntervalEntry.setIndexNames(*dsx1IntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1IntervalEntry.setDescription('An entry in the prvtDSx1IntervalTable table.')
prvtDSx1IntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1IntervalBBEs.setDescription('The number of Background Block Errors.')
prvtDSx1IntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalLSESs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1IntervalLSESs.setDescription('The number of Line Severely Errored Seconds')
prvtDSx1IntervalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1IntervalPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1IntervalPFCs.setDescription('Path Faults counts.')
prvtDSx1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3), )
if mibBuilder.loadTexts: prvtDSx1TotalTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1TotalTable.setDescription('This table contains statistics that are not supported in dsx1TotalTable ')
prvtDSx1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1), )
dsx1TotalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1TotalEntry"))
prvtDSx1TotalEntry.setIndexNames(*dsx1TotalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1TotalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1TotalEntry.setDescription('An entry in the prvtDSx1TotalTable table.')
prvtDSx1TotalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1TotalBBEs.setDescription('The number of Background Block Errors encountered by a DS1 interface in the previous 24\nhour interval. Invalid 15 minute intervals count\nas 0.')
prvtDSx1TotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalLSESs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1TotalLSESs.setDescription('The number of Line Severely Errored Seconds encountered by a DS1 interface in the previous 24\nhour interval. Invalid 15 minute intervals count\nas 0.')
prvtDSx1TotalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 3, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtDSx1TotalPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1TotalPFCs.setDescription('Path Faults counts ncountered by a DS1 interface in the previous 24\nhour interval. Invalid 15 minute intervals count\nas 0.')
prvtDSx1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4), )
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentTable.setDescription('This table contains statistics that are not supported in dsx1FarEndCurrentTable ')
prvtDSx1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1), )
dsx1FarEndCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndCurrentEntry"))
prvtDSx1FarEndCurrentEntry.setIndexNames(*dsx1FarEndCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndCurrentEntry.setDescription('An entry in the prvtDSx1FarEndCurrentTable table.')
prvtFarEndDSx1CurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentBBEs.setDescription('The number of Far End Background Block Errors.')
prvtFarEndDSx1CurrentPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1CurrentPFCs.setDescription('Far End Background Path Faults counts.')
prvtDSx1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5), )
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalTable.setDescription('This table contains statistics that are not supported in dsx1FarEndIntervalTable ')
prvtDSx1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1), )
dsx1FarEndIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndIntervalEntry"))
prvtDSx1FarEndIntervalEntry.setIndexNames(*dsx1FarEndIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndIntervalEntry.setDescription('An entry in the prvtDSx1FarEndIntervalTable table.')
prvtFarEndDSx1IntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalBBEs.setDescription('The number of Far End Background Block Errors.')
prvtFarEndDSx1IntervalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 5, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1IntervalPFCs.setDescription('Far End Background Path Faults counts.')
prvtDSx1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6), )
if mibBuilder.loadTexts: prvtDSx1FarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndTotalTable.setDescription('This table contains statistics that are not supported in dsx1FarEndTotalTable ')
prvtDSx1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1), )
dsx1FarEndTotalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtDSx1FarEndTotalEntry"))
prvtDSx1FarEndTotalEntry.setIndexNames(*dsx1FarEndTotalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtDSx1FarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtDSx1FarEndTotalEntry.setDescription('An entry in the prvtDSx1FarEndTotalTable table.')
prvtFarEndDSx1TotalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1TotalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1TotalBBEs.setDescription('The number of Far End Background Block Errors encountered by a DS1 interface in the\nprevious 24 hour interval. Invalid 15 minute\nintervals count as 0.')
prvtFarEndDSx1TotalPFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 1, 6, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndDSx1TotalPFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndDSx1TotalPFCs.setDescription('Far End Background Path Faults encountered by a DS1 interface in the\nprevious 24 hour interval. Invalid 15 minute\nintervals count as 0.')
prvtSectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1), )
if mibBuilder.loadTexts: prvtSectionCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentTable.setDescription('This table contains statistics that are not supported in sonetSectionCurrentTable ')
prvtSectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1), )
sonetSectionCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtSectionCurrentEntry"))
prvtSectionCurrentEntry.setIndexNames(*sonetSectionCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtSectionCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentEntry.setDescription('An entry in the prvtSectionCurrentTable table.')
prvtSectionCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentBBEs.setDescription('The number of Background Block Errors encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtSectionCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentESAs.setDescription('The number of Errored Seconds type A encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtSectionCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentESBs.setDescription('The number of Errored Seconds type B encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtSectionCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtSectionCurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentLOSSs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentLOSSs.setDescription('Loss of signals counter in the current 15 minute interval.')
prvtSectionCurrentOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionCurrentOOFs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionCurrentOOFs.setDescription('The number Out-Of-Frame Seconds encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtSectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2), )
if mibBuilder.loadTexts: prvtSectionIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalTable.setDescription('This table contains statistics that are not supported in sonetSectionIntervalTable ')
prvtSectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1), )
sonetSectionIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtSectionIntervalEntry"))
prvtSectionIntervalEntry.setIndexNames(*sonetSectionIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtSectionIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalEntry.setDescription('An entry in the prvtSectionIntervalTable table.')
prvtSectionIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalBBEs.setDescription('The number of Background Block Errors encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtSectionIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalESAs.setDescription('The number of Errored Seconds type A encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtSectionIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalESBs.setDescription('The number of Errored Seconds type B encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtSectionIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtSectionIntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalLOSSs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalLOSSs.setDescription('Loss of signals counter in a particular 15-minute interval in the past 24 hours.')
prvtSectionIntervalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtSectionIntervalOOFs.setStatus('current')
if mibBuilder.loadTexts: prvtSectionIntervalOOFs.setDescription('The number Out-Of-Frame Seconds encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1), )
if mibBuilder.loadTexts: prvtLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentTable.setDescription('This table contains statistics that are not supported in sonetLineCurrentTable ')
prvtLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1), )
sonetLineCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtLineCurrentEntry"))
prvtLineCurrentEntry.setIndexNames(*sonetLineCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentEntry.setDescription('An entry in the prvtLineCurrentTable table.')
prvtLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentFCs.setDescription('Failures counter of a SONET/SDH Line\nin the current 15 minute interval.')
prvtLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentBBEs.setDescription('The number of Background Block Errors of a SONET/SDH Line\nin the current 15 minute interval.')
prvtLineCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentESAs.setDescription('The number of Errored Seconds type A encountered by a SONET/SDH Line\nin the current 15 minute interval.')
prvtLineCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentESBs.setDescription('The number of Errored Seconds type B encountered by a SONET/SDH Line\nin the current 15 minute interval.')
prvtLineCurrentLBCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentLBCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentLBCs.setDescription('Laser Bias Current parameter provides a measurement of the health of\nthe optical transmitter.')
prvtLineCurrentOPRs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentOPRs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentOPRs.setDescription('Optical Power Received parameter provides a measurement of the physical\nlayer characteristics of the incoming signal at each optical receiver.')
prtvLineCurrentOPTs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtvLineCurrentOPTs.setStatus('current')
if mibBuilder.loadTexts: prtvLineCurrentOPTs.setDescription('Optical Power Transmitted parameter provides a measurement of the\nhealth of the optical transmitter.')
prvtLineCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentAISs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentAISs.setDescription('The number of 1-second intervals of alarm indication\nsignal encountered by the interface.')
prvtLineCurrentPSCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentPSCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentPSCs.setDescription('Protection Switching Countin the current 15 minute interval.')
prvtLineCurrentPSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineCurrentPSDs.setStatus('current')
if mibBuilder.loadTexts: prvtLineCurrentPSDs.setDescription('Protection Switching Duration counter in the current 15 minute interval.')
prvtLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2), )
if mibBuilder.loadTexts: prvtLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalTable.setDescription('This table contains statistics that are not supported in sonetLineIntrevalTable ')
prvtLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1), )
sonetLineIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtLineIntervalEntry"))
prvtLineIntervalEntry.setIndexNames(*sonetLineIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalEntry.setDescription('An entry in the prvtLineIntervalTable table.')
prvtLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalFCs.setDescription('Failures counter of a SONET/SDH Line in a particular 15-minute interval\nin the past 24 hours.')
prvtLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalBBEs.setDescription('The number of Background Block Errors of a SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalESAs.setDescription('The number of Errored Seconds type A encountered by a SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalESBs.setDescription('The number of Errored Seconds type B encountered by a SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalLBCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalLBCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalLBCs.setDescription('Laser Bias Current parameter provides a measurement of the health of\nthe optical transmitter in a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalOPRs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalOPRs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalOPRs.setDescription('Optical Power Received parameter provides a measurement of the physical\nlayer characteristics of the incoming signal at each optical receiver\nin a particular 15-minute interval in the past 24 hours.')
prtvLineIntervalOPTs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtvLineIntervalOPTs.setStatus('current')
if mibBuilder.loadTexts: prtvLineIntervalOPTs.setDescription('Optical Power Transmitted parameter provides a measurement of the\nhealth of the optical transmitter\nin a particular 15-minute interval in the past 24 hours.')
prvtLineIntevalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntevalAISs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntevalAISs.setDescription('The number of 1-second intervals of alarm indication\nsignal encountered by the interface in a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalPSCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalPSCs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalPSCs.setDescription('Protection Switching counter in a particular 15-minute interval in the past 24 hours.')
prvtLineIntervalPSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtLineIntervalPSDs.setStatus('current')
if mibBuilder.loadTexts: prvtLineIntervalPSDs.setDescription('Protection Switching Duration counter in a particular 15-minute interval in the past 24 hours.')
prvtFarEndLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3), )
if mibBuilder.loadTexts: prvtFarEndLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentTable.setDescription('This table contains statistics that are not supported in sonetFarEndLineCurrentTable ')
prvtFarEndLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1), )
sonetFarEndLineCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndLineCurrentEntry"))
prvtFarEndLineCurrentEntry.setIndexNames(*sonetFarEndLineCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentEntry.setDescription('An entry in the prvtFarEndLineCurrentTable table.')
prvtFarEndLineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentFCs.setDescription('Far End Failures counter of a SONET/SDH Line\nin the current 15 minute interval.')
prvtFarEndLineCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentBBEs.setDescription('Far End number of Background Block Errors of a SONET/SDH Line\nin the current 15 minute interval.')
prvtFarEndLineCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentESAs.setDescription('Far End number of Errored Seconds type A encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtFarEndLineCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentESBs.setDescription('Far End number of Errored Seconds type B encountered by a SONET/SDH Section\nin the current 15 minute interval.')
prvtFarEndLineCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentAISs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentAISs.setDescription('Far End number of 1-second intervals of alarm indication\nsignal encountered by the interface.')
prvtFarEndLineCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineCurrentRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineCurrentRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Line\nin the current 15 minute interval.')
prvtFarEndLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4), )
if mibBuilder.loadTexts: prvtFarEndLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalTable.setDescription('This table contains statistics that are not supported in sonetFarEndLineIntervalTable ')
prvtFarEndLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1), )
sonetFarEndLineIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndLineIntervalEntry"))
prvtFarEndLineIntervalEntry.setIndexNames(*sonetFarEndLineIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalEntry.setDescription('An entry in the prvtFarEndLineIntervalTable table.')
prvtFarEndLineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalFCs.setDescription('Far End Failures counter of a SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndLineIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalBBEs.setDescription('Far End number of Background Block Errors of a SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndLineIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalESAs.setDescription('Far End number of Errored Seconds type A encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndLineIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalESBs.setDescription('Far End number of Errored Seconds type B encountered by a SONET/SDH Section\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndLineIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalAISs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalAISs.setDescription('Far End number of 1-second intervals of alarm indication\nsignal encountered by the interface.')
prvtFarEndLineIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndLineIntervalRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndLineIntervalRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Line\nin a particular 15-minute interval in the past 24 hours.')
prvtPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1), )
if mibBuilder.loadTexts: prvtPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentTable.setDescription('This table contains statistics that are not supported in sonetPathCurrentTable ')
prvtPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1), )
sonetPathCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtPathCurrentEntry"))
prvtPathCurrentEntry.setIndexNames(*sonetPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentEntry.setDescription('An entry in the prvtPathCurrentTable table.')
prvtPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentFCs.setDescription('Far End Failures counter of a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentBBEs.setDescription('Background Block Errors of a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentAISs.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentAISs.setDescription('The number of 1-second intervals of alarm indication\nsignal encountered by a SONET/SDH Path in the current 15 minute interval.')
prvtPathCurrentPPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPPJCPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentPPJCPGen.setDescription('Positive pointer justifications generated by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentNPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentNPJCPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentNPJCPGen.setDescription('Negative pointer justifications generated by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentPPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPPJCPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentPPJCPDet.setDescription('Positive pointer justifications detected by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentNPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentNPJCPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentNPJCPDet.setDescription('Negative pointer justifications detected by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentPJCSPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPJCSPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentPJCSPDet.setDescription('The number of PPJCVDet or NPJCVDet Seconds encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentPJCSPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentPJCSPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentPJCSPGen.setDescription('The number of PPJCVGen or NPJCVGen Seconds encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtPathCurrentJCDiffP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathCurrentJCDiffP.setStatus('current')
if mibBuilder.loadTexts: prvtPathCurrentJCDiffP.setDescription('Absolute of difference between detected and generated net pointer\njustifications by a SONET/SDH Path in the current 15 minute interval.')
prvtPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2), )
if mibBuilder.loadTexts: prvtPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalTable.setDescription('This table contains statistics that are not supported in sonetPathIntervalTable ')
prvtPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1), )
sonetPathIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtPathIntervalEntry"))
prvtPathIntervalEntry.setIndexNames(*sonetPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalEntry.setDescription('An entry in the prvtPathIntervalEntry table.')
prvtPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalFCs.setDescription('Far End Failures counter of a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalBBEs.setDescription('Far End number of Background Block Errors of a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalAISs.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalAISs.setDescription('The number of 1-second intervals of alarm indication\nsignal encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalPPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPPJCPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalPPJCPGen.setDescription('Positive pointer justifications generated by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalNPJCPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalNPJCPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalNPJCPGen.setDescription('Negativ pointer justifications generated by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalPPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPPJCPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalPPJCPDet.setDescription('Positive pointer justifications detected by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalNPJCPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalNPJCPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalNPJCPDet.setDescription('Negative pointer justifications detected by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalPJCSPDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPJCSPDet.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalPJCSPDet.setDescription('The number of PPJCVDet or NPJCVDet Seconds encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalPJCSPGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalPJCSPGen.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalPJCSPGen.setDescription('The number of PPJCVGen or NPJCVGen Seconds encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtPathIntervalJCDiffP = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtPathIntervalJCDiffP.setStatus('current')
if mibBuilder.loadTexts: prvtPathIntervalJCDiffP.setDescription('Absolute of difference between detected and generated net pointer\njustifications by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
prvtFarEndPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3), )
if mibBuilder.loadTexts: prvtFarEndPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentTable.setDescription('This table contains statistics that are not supported in sonetFarEndPathCurrentTable ')
prvtFarEndPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1), )
sonetFarEndPathCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndPathCurrentEntry"))
prvtFarEndPathCurrentEntry.setIndexNames(*sonetFarEndPathCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentEntry.setDescription('An entry in the prvtFarEndPathCurrentTable table.')
prvtFarEndPathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentFCs.setDescription('Far End Failures counter of a SONET/SDH Path\nin the current 15 minute interval.')
prvtFarEndPathCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentESAs.setDescription('Far End Errored Seconds type A encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtFarEndPathCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentESBs.setDescription('Far End Errored Seconds type B encountered by a SONET/SDH Path\nin the current 15 minute interval.')
prvtFarEndPathCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentBBEs.setDescription('Far End Background Block Errors of a SONET/SDH Path\nin the current 15 minute interval.')
prvtFarEndPathCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathCurrentRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathCurrentRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Path\nsignal encountered by a SONET/SDH Path in the current 15 minute interval.')
prvtFarEndPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4), )
if mibBuilder.loadTexts: prvtFarEndPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalTable.setDescription('This table contains statistics that are not supported in sonetFarEndPathIntervalTable ')
prvtFarEndPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1), )
sonetFarEndPathIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndPathIntervalEntry"))
prvtFarEndPathIntervalEntry.setIndexNames(*sonetFarEndPathIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalEntry.setDescription('An entry in the prvtFarEndPathIntervalTable table.')
prvtFarEndPathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalFCs.setDescription('Far End Failures counter of a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndPathIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalESAs.setDescription('Far End Errored Seconds type A encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndPathIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalESBs.setDescription('Far End Errored Seconds type B encountered by a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndPathIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalBBEs.setDescription('Far End Background Block Errors of a SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndPathIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndPathIntervalRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndPathIntervalRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Path\nin a particular 15-minute interval in the past 24 hours.')
prvtVtCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1), )
if mibBuilder.loadTexts: prvtVtCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentTable.setDescription('This table contains statistics that are not supported in sonetVtCurrentTable ')
prvtVtCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1), )
sonetVTCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtVtCurrentEntry"))
prvtVtCurrentEntry.setIndexNames(*sonetVTCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtVtCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentEntry.setDescription('An entry in the prvtVtCurrentTable table.')
prvtVtCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentFCs.setDescription('Far End Failures counter of a SONET/SDH VT\nin the current 15 minute interval.')
prvtVtCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentBBEs.setDescription('Background Block Errors encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentAISs.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentAISs.setDescription('Number of 1-second intervals of alarm indication\nsignal encountered by a SONET/SDH Vt in the current 15 minute interval')
prvtVtCurrentPPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPPJCVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentPPJCVGen.setDescription('Positive pointer justifications generated by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentNPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentNPJCVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentNPJCVGen.setDescription('Negative pointer justifications generated by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentPPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPPJCVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentPPJCVDet.setDescription('Positive pointer justifications detected by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentNPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentNPJCVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentNPJCVDet.setDescription('Negative pointer justifications detected by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentPJCSVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentPJCSVDet.setDescription('The number of PPJCVDet or NPJCVDet Seconds encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentPJCSVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentPJCSVGen.setDescription('The number of PPJCVGen or NPJCVGen Seconds encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtVtCurrentPJCSVPJCDiffV = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtCurrentPJCSVPJCDiffV.setStatus('current')
if mibBuilder.loadTexts: prvtVtCurrentPJCSVPJCDiffV.setDescription('Absolute of difference between detected and generated net pointer\njustifications by a SONET/SDH Vt in the current 15 minute interval.')
prvtVtIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2), )
if mibBuilder.loadTexts: prvtVtIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalTable.setDescription('This table contains statistics that are not supported in sonetVtIntervalTable ')
prvtVtIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1), )
sonetVTIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtVtIntervalEntry"))
prvtVtIntervalEntry.setIndexNames(*sonetVTIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtVtIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalEntry.setDescription('An entry in the prvtVtIntervalTable table.')
prvtVtIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalFCs.setDescription('Failures counter of a SONET/SDH VT\nin the current 15 minute interval.')
prvtVtIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalBBEs.setDescription('Background Block Errors encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalAISs.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalAISs.setDescription('Number of 1-second intervals of alarm indication\nsignal encountered by a SONET/SDH Vt in a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalPPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPPJCVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalPPJCVGen.setDescription('Positive pointer justifications generated by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalNPJCVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalNPJCVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalNPJCVGen.setDescription('Negative pointer justifications generated by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalPPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPPJCVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalPPJCVDet.setDescription('Positive pointer justifications detected by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalNPJCVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalNPJCVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalNPJCVDet.setDescription('Negative pointer justifications detected by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalPJCSVDet = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVDet.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalPJCSVDet.setDescription('The number of PPJCVDet or NPJCVDet Seconds encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalPJCSVGen = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVGen.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalPJCSVGen.setDescription('The number of PPJCVGen or NPJCVGen Seconds encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtVtIntervalPJCSVPJCDiffV = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtVtIntervalPJCSVPJCDiffV.setStatus('current')
if mibBuilder.loadTexts: prvtVtIntervalPJCSVPJCDiffV.setDescription('Absolute of difference between detected and generated net pointer\njustifications by a SONET/SDH Vt in a particular 15-minute interval in the past 24 hours.')
prvtFarEndVtCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3), )
if mibBuilder.loadTexts: prvtFarEndVtCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentTable.setDescription('This table contains statistics that are not supported in sonetFarEndVtCurrentTable ')
prvtFarEndVtCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1), )
sonetFarEndVTCurrentEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndVtCurrentEntry"))
prvtFarEndVtCurrentEntry.setIndexNames(*sonetFarEndVTCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndVtCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentEntry.setDescription('An entry in the prvtFarEndVtCurrentTable table.')
prvtFarEndVtCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentFCs.setDescription('Far End Failures counter of a SONET/SDH VT\nin the current 15 minute interval.')
prvtFarEndVtCurrentESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtFarEndVtCurrentESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtFarEndVtCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentBBEs.setDescription('Far End Background Block Errors encountered by a SONET/SDH Vt\nin the current 15 minute interval.')
prvtFarEndVtCurrentRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtCurrentRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtCurrentRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Vt\nsignal encountered by a SONET/SDH Vt in the current 15 minute interval.')
prvtFarEndVtIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4), )
if mibBuilder.loadTexts: prvtFarEndVtIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalTable.setDescription('This table contains statistics that are not supported in sonetFarEndVtIntervalTable ')
prvtFarEndVtIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1), )
sonetFarEndVTIntervalEntry.registerAugmentions(("PRVT-STATISTICS-CES-MIB", "prvtFarEndVtIntervalEntry"))
prvtFarEndVtIntervalEntry.setIndexNames(*sonetFarEndVTIntervalEntry.getIndexNames())
if mibBuilder.loadTexts: prvtFarEndVtIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalEntry.setDescription('An entry in the prvtFarEndVtIntervalTable table.')
prvtFarEndVtIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalFCs.setDescription('Far End Failures counter of a SONET/SDH VT\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndVtIntervalESAs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalESAs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalESAs.setDescription('Errored Seconds type A encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndVtIntervalESBs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalESBs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalESBs.setDescription('Errored Seconds type B encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndVtIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalBBEs.setDescription('Far End Background Block Errors encountered by a SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
prvtFarEndVtIntervalRFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtFarEndVtIntervalRFIs.setStatus('current')
if mibBuilder.loadTexts: prvtFarEndVtIntervalRFIs.setDescription('Far End number Remote failure indications of SONET/SDH Vt\nin a particular 15-minute interval in the past 24 hours.')
class SonetLineAlarmType(TextualConvention, Integer32):
    description = 'Type of Sonet Line alarm:\nsonetAlarmLineMSAIS (1)\nsonetAlarmLineLAIS (2)\nsonetAlarmLineMSRDI(3)\nsonetAlarmLineLRDI(4)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("sonetAlarmLineMSAIS", 1), ("sonetAlarmLineLAIS", 2), ("sonetAlarmLineMSRDI", 3), ("sonetAlarmLineLRDI", 4))

class SonetSectionAlarmType(TextualConvention, Integer32):
    description = 'Type of Sonet Section alarm:\nsonetAlarmSectionLOS (5)\nsonetAlarmSectionLOF (6)\nsonetAlarmSectionRSLOF (7) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7))
    namedValues = NamedValues(("sonetAlarmSectionLOS", 5), ("sonetAlarmSectionLOF", 6), ("sonetAlarmSectionRSLOF", 7))

class SonetPathAlarmType(TextualConvention, Integer32):
    description = 'Type of Sonet Path alarm:\nsonetAlarmPathLOP (8)\nsonetAlarmPathAIS (9)\nsonetAlarmPathRDI (10)\nsonetAlarmPathUNEQUIPPED (11)\nsonetAlarmPathLABELMISMATCH (12) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12))
    namedValues = NamedValues(("sonetAlarmPathLOP", 8), ("sonetAlarmPathAIS", 9), ("sonetAlarmPathRDI", 10), ("sonetAlarmPathUNEQUIPPED", 11), ("sonetAlarmPathLABELMISMATCH", 12))

class SonetVTAlarmType(TextualConvention, Integer32):
    description = 'Type of Sonet VT alarm:\nsonetAlarmVtTULOP (13)\nsonetAlarmVtVLOP (14)\nsonetAlarmVtTUAIS (15)\nsonetAlarmVtVAIS (16)\nsonetAlarmVtLPRDI (17)\nsonetAlarmVtVRDI (18)\nsonetAlarmVtLPRFI (19)\nsonetAlarmVtVRFI (20)\nsonetAlarmVtLPUNEQUIPPED (21)\nsonetAlarmVtVUNEQUIPPED (22)\nsonetAlarmVtLPLBLMISMATCH (23)\nsonetAlarmVtVLBLMISMATCH (24)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("sonetAlarmVtTULOP", 13), ("sonetAlarmVtVLOP", 14), ("sonetAlarmVtTUAIS", 15), ("sonetAlarmVtVAIS", 16), ("sonetAlarmVtLPRDI", 17), ("sonetAlarmVtVRDI", 18), ("sonetAlarmVtLPRFI", 19), ("sonetAlarmVtVRFI", 20), ("sonetAlarmVtLPUNEQUIPPED", 21), ("sonetAlarmVtVUNEQUIPPED", 22), ("sonetAlarmVtLPLBLMISMATCH", 23), ("sonetAlarmVtVLBLMISMATCH", 24))

class SonetAlarmStatus(TextualConvention, Integer32):
    description = 'Sonet alarm status:\nsonetAlarmDown (0)\nsonetAlarmUp (1) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("sonetAlarmDown", 0), ("sonetAlarmUp", 1))

prvtSonetSectionAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3), )
if mibBuilder.loadTexts: prvtSonetSectionAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: prvtSonetSectionAlarmsTable.setDescription('Sonet Section alarms table')
prvtSonetSectionAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetSectionAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSonetSectionAlarmsEntry.setDescription('Sonet Section alarms')
prvtSonetSectionAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1, 1), SonetSectionAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetSectionAlarmType.setStatus('current')
if mibBuilder.loadTexts: prvtSonetSectionAlarmType.setDescription('Type of Sonet Section alarm:\nsonetAlarmSectionLOS (5)\nsonetAlarmSectionLOF (6)\nsonetAlarmSectionRSLOF (7) ')
prvtSonetSectionAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 2, 3, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetSectionAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSonetSectionAlarmStatus.setDescription('Sonet Section alarm status:\nsonetAlarmDown (0)\nsonetAlarmUp (1) ')
prvtSonetLineAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5), )
if mibBuilder.loadTexts: prvtSonetLineAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: prvtSonetLineAlarmsTable.setDescription('Sonet Line alarms table')
prvtSonetLineAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetLineAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSonetLineAlarmsEntry.setDescription('Sonet Line alarms entry')
prvtSonetLineAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1, 1), SonetLineAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetLineAlarmType.setStatus('current')
if mibBuilder.loadTexts: prvtSonetLineAlarmType.setDescription('Type of Sonet Line alarm:\nsonetAlarmLineMSAIS (1)\nsonetAlarmLineLAIS (2)\nsonetAlarmLineMSRDI(3)\nsonetAlarmLineLRDI(4)')
prvtSonetLineAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 3, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetLineAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSonetLineAlarmStatus.setDescription('Sonet Line alarm status:\nsonetAlarmDown (0)\nsonetAlarmUp (1) ')
prvtSonetPathAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5), )
if mibBuilder.loadTexts: prvtSonetPathAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: prvtSonetPathAlarmsTable.setDescription('Sonet Path alarms table')
prvtSonetPathAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetPathAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSonetPathAlarmsEntry.setDescription('Sonet Path alarms entry')
prvtSonetPathAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1, 1), SonetPathAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetPathAlarmType.setStatus('current')
if mibBuilder.loadTexts: prvtSonetPathAlarmType.setDescription('Type of Sonet Path alarm:\nsonetAlarmPathLOP (8)\nsonetAlarmPathAIS (9)\nsonetAlarmPathRDI (10)\nsonetAlarmPathUNEQUIPPED (11)\nsonetAlarmPathLABELMISMATCH (12) ')
prvtSonetPathAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 4, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetPathAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSonetPathAlarmStatus.setDescription('Sonet Path alarm status:\nsonetAlarmDown (0)\nsonetAlarmUp (1) ')
prvtSonetVTAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5), )
if mibBuilder.loadTexts: prvtSonetVTAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: prvtSonetVTAlarmsTable.setDescription('Sonet VT alarms table')
prvtSonetVTAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtSonetVTAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtSonetVTAlarmsEntry.setDescription('Sonet VT alarms entry')
prvtSonetVTAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1, 1), SonetVTAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetVTAlarmType.setStatus('current')
if mibBuilder.loadTexts: prvtSonetVTAlarmType.setDescription('Type of Sonet VT alarm:\nsonetAlarmVtTULOP (13)\nsonetAlarmVtVLOP (14)\nsonetAlarmVtTUAIS (15)\nsonetAlarmVtVAIS (16)\nsonetAlarmVtLPRDI (17)\nsonetAlarmVtVRDI (18)\nsonetAlarmVtLPRFI (19)\nsonetAlarmVtVRFI (20)\nsonetAlarmVtLPUNEQUIPPED (21)\nsonetAlarmVtVUNEQUIPPED (22)\nsonetAlarmVtLPLBLMISMATCH (23)\nsonetAlarmVtVLBLMISMATCH (24)')
prvtSonetVTAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 1, 5, 5, 1, 2), SonetAlarmStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtSonetVTAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: prvtSonetVTAlarmStatus.setDescription('Sonet VT alarm status:\nsonetAlarmDown (0)\nsonetAlarmUp (1) ')
prvtSonetSectionAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetSectionAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetSectionAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetSectionAlarms.setStatus('current')
if mibBuilder.loadTexts: prvtSonetSectionAlarms.setDescription('This trap is sent when a Sonet Section alarm is up or down')
prvtSonetLineAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetLineAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetLineAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetLineAlarms.setStatus('current')
if mibBuilder.loadTexts: prvtSonetLineAlarms.setDescription('This trap is sent when a Sonet Line alarm is up or down')
prvtSonetPathAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetPathAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetPathAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetPathAlarms.setStatus('current')
if mibBuilder.loadTexts: prvtSonetPathAlarms.setDescription('This trap is sent when a Sonet Path alarm is up or down')
prvtSonetVTAlarms = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 114, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetVTAlarmType"), ("PRVT-STATISTICS-CES-MIB", "prvtSonetVTAlarmStatus"))
if mibBuilder.loadTexts: prvtSonetVTAlarms.setStatus('current')
if mibBuilder.loadTexts: prvtSonetVTAlarms.setDescription('This trap is sent when a Sonet VT alarm is up or down')
mibBuilder.exportSymbols("PRVT-STATISTICS-CES-MIB", prvtStatisticsDSx1=prvtStatisticsDSx1, prvtVtIntervalNPJCVDet=prvtVtIntervalNPJCVDet, prvtSectionCurrentTable=prvtSectionCurrentTable, prvtStatisticsLine=prvtStatisticsLine, prvtDSx1IntervalLSESs=prvtDSx1IntervalLSESs, prvtVtCurrentTable=prvtVtCurrentTable, prvtSectionCurrentUASs=prvtSectionCurrentUASs, prvtPathIntervalBBEs=prvtPathIntervalBBEs, prvtSonetLineAlarms=prvtSonetLineAlarms, prvtLineIntervalBBEs=prvtLineIntervalBBEs, prvtFarEndVtIntervalRFIs=prvtFarEndVtIntervalRFIs, prtvLineIntervalOPTs=prtvLineIntervalOPTs, prvtStatisticsPath=prvtStatisticsPath, prvtVtCurrentPPJCVGen=prvtVtCurrentPPJCVGen, prvtVtCurrentNPJCVGen=prvtVtCurrentNPJCVGen, SonetPathAlarmType=SonetPathAlarmType, prtvLineCurrentOPTs=prtvLineCurrentOPTs, prvtLineIntervalTable=prvtLineIntervalTable, prvtFarEndPathIntervalRFIs=prvtFarEndPathIntervalRFIs, prvtStatisticsVt=prvtStatisticsVt, prvtFarEndLineIntervalESBs=prvtFarEndLineIntervalESBs, prvtFarEndLineCurrentEntry=prvtFarEndLineCurrentEntry, SonetSectionAlarmType=SonetSectionAlarmType, prvtLineIntevalAISs=prvtLineIntevalAISs, SonetAlarmStatus=SonetAlarmStatus, prvtDSx1FarEndIntervalEntry=prvtDSx1FarEndIntervalEntry, prvtVtCurrentESBs=prvtVtCurrentESBs, prvtSectionCurrentOOFs=prvtSectionCurrentOOFs, prvtFarEndLineCurrentFCs=prvtFarEndLineCurrentFCs, SonetVTAlarmType=SonetVTAlarmType, prvtFarEndDSx1IntervalBBEs=prvtFarEndDSx1IntervalBBEs, prvtDSx1CurrentTable=prvtDSx1CurrentTable, prvtFarEndPathCurrentTable=prvtFarEndPathCurrentTable, prvtPathIntervalPPJCPGen=prvtPathIntervalPPJCPGen, prvtDSx1IntervalPFCs=prvtDSx1IntervalPFCs, prvtPathIntervalNPJCPDet=prvtPathIntervalNPJCPDet, prvtDSx1FarEndTotalTable=prvtDSx1FarEndTotalTable, prvtFarEndLineIntervalESAs=prvtFarEndLineIntervalESAs, prvtSonetVTAlarmsEntry=prvtSonetVTAlarmsEntry, SonetLineAlarmType=SonetLineAlarmType, prvtLineCurrentOPRs=prvtLineCurrentOPRs, prvtSonetLineAlarmType=prvtSonetLineAlarmType, prvtLineCurrentPSDs=prvtLineCurrentPSDs, prvtSectionCurrentBBEs=prvtSectionCurrentBBEs, prvtLineIntervalEntry=prvtLineIntervalEntry, prvtLineIntervalOPRs=prvtLineIntervalOPRs, prvtLineCurrentFCs=prvtLineCurrentFCs, prvtFarEndPathIntervalFCs=prvtFarEndPathIntervalFCs, prvtSonetVTAlarmsTable=prvtSonetVTAlarmsTable, prvtFarEndDSx1TotalPFCs=prvtFarEndDSx1TotalPFCs, prvtLineIntervalPSCs=prvtLineIntervalPSCs, prvtPathIntervalTable=prvtPathIntervalTable, prvtPathIntervalPPJCPDet=prvtPathIntervalPPJCPDet, prvtSectionCurrentESBs=prvtSectionCurrentESBs, prvtSonetSectionAlarmStatus=prvtSonetSectionAlarmStatus, prvtPathCurrentPJCSPGen=prvtPathCurrentPJCSPGen, prvtPathIntervalPJCSPGen=prvtPathIntervalPJCSPGen, prvtVtIntervalPPJCVDet=prvtVtIntervalPPJCVDet, prvtDSx1CurrentBBEs=prvtDSx1CurrentBBEs, prvtLineCurrentLBCs=prvtLineCurrentLBCs, prvtVtCurrentBBEs=prvtVtCurrentBBEs, prvtLineCurrentEntry=prvtLineCurrentEntry, PYSNMP_MODULE_ID=prvtStatisticsCESMib, prvtSonetLineAlarmsTable=prvtSonetLineAlarmsTable, prvtFarEndPathIntervalESBs=prvtFarEndPathIntervalESBs, prvtPathCurrentBBEs=prvtPathCurrentBBEs, prvtPathCurrentAISs=prvtPathCurrentAISs, prvtFarEndVtCurrentTable=prvtFarEndVtCurrentTable, prvtFarEndVtCurrentBBEs=prvtFarEndVtCurrentBBEs, prvtDSx1CurrentLSESs=prvtDSx1CurrentLSESs, prvtPathCurrentFCs=prvtPathCurrentFCs, prvtFarEndVtCurrentEntry=prvtFarEndVtCurrentEntry, prvtDSx1FarEndIntervalTable=prvtDSx1FarEndIntervalTable, prvtSectionIntervalEntry=prvtSectionIntervalEntry, prvtLineCurrentESAs=prvtLineCurrentESAs, prvtVtIntervalBBEs=prvtVtIntervalBBEs, prvtDSx1FarEndTotalEntry=prvtDSx1FarEndTotalEntry, prvtStatisticsConformance=prvtStatisticsConformance, prvtDSx1TotalLSESs=prvtDSx1TotalLSESs, prvtFarEndLineCurrentBBEs=prvtFarEndLineCurrentBBEs, prvtVtIntervalNPJCVGen=prvtVtIntervalNPJCVGen, prvtFarEndVtIntervalBBEs=prvtFarEndVtIntervalBBEs, prvtPathIntervalESAs=prvtPathIntervalESAs, prvtSonetPathAlarmType=prvtSonetPathAlarmType, prvtSectionIntervalESBs=prvtSectionIntervalESBs, prvtSectionIntervalOOFs=prvtSectionIntervalOOFs, prvtPathCurrentESBs=prvtPathCurrentESBs, prvtFarEndVtIntervalTable=prvtFarEndVtIntervalTable, prvtVtIntervalTable=prvtVtIntervalTable, prvtDSx1CurrentPFCs=prvtDSx1CurrentPFCs, prvtFarEndLineIntervalAISs=prvtFarEndLineIntervalAISs, prvtVtCurrentPJCSVGen=prvtVtCurrentPJCSVGen, prvtSonetPathAlarms=prvtSonetPathAlarms, prvtFarEndDSx1CurrentPFCs=prvtFarEndDSx1CurrentPFCs, prvtPathIntervalNPJCPGen=prvtPathIntervalNPJCPGen, prvtLineIntervalLBCs=prvtLineIntervalLBCs, prvtLineIntervalPSDs=prvtLineIntervalPSDs, prvtFarEndLineCurrentESBs=prvtFarEndLineCurrentESBs, prvtSonetSectionAlarmType=prvtSonetSectionAlarmType, prvtVtIntervalPJCSVGen=prvtVtIntervalPJCSVGen, prvtSonetPathAlarmsEntry=prvtSonetPathAlarmsEntry, prvtSonetPathAlarmsTable=prvtSonetPathAlarmsTable, prvtFarEndPathIntervalEntry=prvtFarEndPathIntervalEntry, prvtVtCurrentESAs=prvtVtCurrentESAs, prvtFarEndVtIntervalESAs=prvtFarEndVtIntervalESAs, prvtPathIntervalESBs=prvtPathIntervalESBs, prvtPathCurrentPJCSPDet=prvtPathCurrentPJCSPDet, prvtSectionIntervalBBEs=prvtSectionIntervalBBEs, prvtDSx1FarEndCurrentTable=prvtDSx1FarEndCurrentTable, prvtFarEndPathCurrentESBs=prvtFarEndPathCurrentESBs, prvtFarEndLineIntervalFCs=prvtFarEndLineIntervalFCs, prvtFarEndLineIntervalBBEs=prvtFarEndLineIntervalBBEs, prvtDSx1CurrentEntry=prvtDSx1CurrentEntry, prvtSectionIntervalESAs=prvtSectionIntervalESAs, prvtDSx1FarEndCurrentEntry=prvtDSx1FarEndCurrentEntry, prvtSectionIntervalTable=prvtSectionIntervalTable, prvtPathCurrentTable=prvtPathCurrentTable, prvtVtIntervalPJCSVDet=prvtVtIntervalPJCSVDet, prvtFarEndLineCurrentRFIs=prvtFarEndLineCurrentRFIs, prvtDSx1TotalTable=prvtDSx1TotalTable, prvtDSx1TotalPFCs=prvtDSx1TotalPFCs, prvtVtCurrentEntry=prvtVtCurrentEntry, prvtDSx1TotalBBEs=prvtDSx1TotalBBEs, prvtVtCurrentPJCSVPJCDiffV=prvtVtCurrentPJCSVPJCDiffV, prvtLineCurrentTable=prvtLineCurrentTable, prvtFarEndVtCurrentESBs=prvtFarEndVtCurrentESBs, prvtStatisticsObjects=prvtStatisticsObjects, prvtVtCurrentFCs=prvtVtCurrentFCs, prvtSectionIntervalLOSSs=prvtSectionIntervalLOSSs, prvtPathCurrentPPJCPGen=prvtPathCurrentPPJCPGen, prvtVtIntervalEntry=prvtVtIntervalEntry, prvtFarEndVtIntervalEntry=prvtFarEndVtIntervalEntry, prvtFarEndPathIntervalESAs=prvtFarEndPathIntervalESAs, prvtFarEndVtCurrentRFIs=prvtFarEndVtCurrentRFIs, prvtLineCurrentBBEs=prvtLineCurrentBBEs, prvtSonetLineAlarmStatus=prvtSonetLineAlarmStatus, prvtVtIntervalESAs=prvtVtIntervalESAs, prvtDSx1IntervalBBEs=prvtDSx1IntervalBBEs, prvtLineIntervalESBs=prvtLineIntervalESBs, prvtVtIntervalESBs=prvtVtIntervalESBs, prvtFarEndPathCurrentEntry=prvtFarEndPathCurrentEntry, prvtVtIntervalAISs=prvtVtIntervalAISs, prvtStatisticsNotifications=prvtStatisticsNotifications, prvtFarEndLineCurrentAISs=prvtFarEndLineCurrentAISs, prvtFarEndPathCurrentFCs=prvtFarEndPathCurrentFCs, prvtFarEndLineCurrentESAs=prvtFarEndLineCurrentESAs, prvtLineCurrentAISs=prvtLineCurrentAISs, prvtFarEndLineIntervalRFIs=prvtFarEndLineIntervalRFIs, prvtFarEndPathIntervalTable=prvtFarEndPathIntervalTable, prvtStatisticsCESMib=prvtStatisticsCESMib, prvtPathIntervalFCs=prvtPathIntervalFCs, prvtLineIntervalESAs=prvtLineIntervalESAs, prvtFarEndVtIntervalESBs=prvtFarEndVtIntervalESBs, prvtPathCurrentEntry=prvtPathCurrentEntry, prvtPathCurrentJCDiffP=prvtPathCurrentJCDiffP, prvtSectionCurrentLOSSs=prvtSectionCurrentLOSSs, prvtPathCurrentPPJCPDet=prvtPathCurrentPPJCPDet, prvtVtIntervalFCs=prvtVtIntervalFCs, prvtStatisticsSection=prvtStatisticsSection, prvtPathCurrentNPJCPGen=prvtPathCurrentNPJCPGen, prvtSonetLineAlarmsEntry=prvtSonetLineAlarmsEntry, prvtLineCurrentESBs=prvtLineCurrentESBs, prvtFarEndPathIntervalBBEs=prvtFarEndPathIntervalBBEs, prvtPathIntervalAISs=prvtPathIntervalAISs, prvtVtCurrentNPJCVDet=prvtVtCurrentNPJCVDet, prvtPathCurrentESAs=prvtPathCurrentESAs, prvtFarEndDSx1IntervalPFCs=prvtFarEndDSx1IntervalPFCs, prvtSectionCurrentEntry=prvtSectionCurrentEntry, prvtDSx1IntervalTable=prvtDSx1IntervalTable, prvtFarEndLineCurrentTable=prvtFarEndLineCurrentTable, prvtFarEndLineIntervalTable=prvtFarEndLineIntervalTable, prvtSonetPathAlarmStatus=prvtSonetPathAlarmStatus, prvtPathCurrentNPJCPDet=prvtPathCurrentNPJCPDet, prvtFarEndLineIntervalEntry=prvtFarEndLineIntervalEntry, prvtVtCurrentPJCSVDet=prvtVtCurrentPJCSVDet, prvtSonetSectionAlarmsTable=prvtSonetSectionAlarmsTable, prvtFarEndPathCurrentESAs=prvtFarEndPathCurrentESAs, prvtSonetSectionAlarms=prvtSonetSectionAlarms, prvtDSx1TotalEntry=prvtDSx1TotalEntry, prvtSonetVTAlarmStatus=prvtSonetVTAlarmStatus, prvtLineIntervalFCs=prvtLineIntervalFCs, prvtSonetSectionAlarmsEntry=prvtSonetSectionAlarmsEntry, prvtSonetVTAlarmType=prvtSonetVTAlarmType, prvtFarEndDSx1CurrentBBEs=prvtFarEndDSx1CurrentBBEs, prvtSectionIntervalUASs=prvtSectionIntervalUASs, prvtPathIntervalEntry=prvtPathIntervalEntry, prvtPathIntervalJCDiffP=prvtPathIntervalJCDiffP, prvtVtCurrentAISs=prvtVtCurrentAISs, prvtFarEndVtCurrentESAs=prvtFarEndVtCurrentESAs, prvtVtIntervalPPJCVGen=prvtVtIntervalPPJCVGen, prvtDSx1IntervalEntry=prvtDSx1IntervalEntry, prvtSectionCurrentESAs=prvtSectionCurrentESAs, prvtLineCurrentPSCs=prvtLineCurrentPSCs, prvtFarEndPathCurrentBBEs=prvtFarEndPathCurrentBBEs, prvtFarEndPathCurrentRFIs=prvtFarEndPathCurrentRFIs, prvtVtCurrentPPJCVDet=prvtVtCurrentPPJCVDet, prvtVtIntervalPJCSVPJCDiffV=prvtVtIntervalPJCSVPJCDiffV, prvtSonetVTAlarms=prvtSonetVTAlarms, prvtFarEndVtCurrentFCs=prvtFarEndVtCurrentFCs, prvtFarEndVtIntervalFCs=prvtFarEndVtIntervalFCs, prvtFarEndDSx1TotalBBEs=prvtFarEndDSx1TotalBBEs, prvtPathIntervalPJCSPDet=prvtPathIntervalPJCSPDet)
