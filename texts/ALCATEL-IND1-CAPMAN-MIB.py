#
# PySNMP MIB module ALCATEL-IND1-CAPMAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-CAPMAN-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 20:25:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1CapMan, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1CapMan")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, iso, Gauge32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Integer32, ModuleIdentity, Unsigned32, Counter64, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Integer32", "ModuleIdentity", "Unsigned32", "Counter64", "MibIdentifier", "ObjectIdentity")
DisplayString, DateAndTime, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "MacAddress", "TextualConvention", "RowStatus")
alcatelIND1CapManMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1))
alcatelIND1CapManMIB.setRevisions(('2009-11-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1CapManMIB.setRevisionsDescriptions(('Capability Manager is used to set system wide limitation.',))
if mibBuilder.loadTexts: alcatelIND1CapManMIB.setLastUpdated('200911230000Z')
if mibBuilder.loadTexts: alcatelIND1CapManMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1CapManMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1CapManMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n\t\t System Capability Manager, to allow for system control and limitation setting, of\n\t\t different, features through out the system.\n\t\t Capability manager is a centralized process which provides hardware information and\n\t\t capability to other processes. To optimize the system performance , certain features\n\t\t may be configured to a lower than the hardware limit through capability manager.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2009 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1CapManMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1))
if mibBuilder.loadTexts: alcatelIND1CapManMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1CapManMIBObjects.setDescription('Branch For System limitation setting , through Capability Manager\n            Subsystem Managed Objects.')
alaCapabilityMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 0))
alaCapabilityManager = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1))
alaCapManConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2))
alaCapManVrfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaCapManVrfTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManVrfTable.setDescription('A list of capabilities related to vrf limits.')
alaCapManVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityVrfContext"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityVrfCapability"))
if mibBuilder.loadTexts: alaCapManVrfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManVrfEntry.setDescription('A Capability Manager VRF entry.')
alaCapabilityVrfContext = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("global", 1), ("primary", 2), ("subsidiary", 3))))
if mibBuilder.loadTexts: alaCapabilityVrfContext.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityVrfContext.setDescription('Context of the change being done on vrf capability.\n        global is a setting which applies throughout the chassis.\n\tprimary is for the primary connection, and subsidiary, is for\n\tall other connection.')
alaCapabilityVrfCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ipv4Routes", 1), ("ipv6Routes", 2), ("ipv4Interfaces", 3), ("ipv6Interfaces", 4), ("mcastInterfaces", 5), ("pimRPS", 6), ("bgpPeers", 7), ("bgpRoutes", 8), ("ripRoutes", 9), ("routingProtocols", 10), ("maxOSPF", 11))))
if mibBuilder.loadTexts: alaCapabilityVrfCapability.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityVrfCapability.setDescription('Identifies a vrf related capability.')
alaCapabilityVrfLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 524288))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapabilityVrfLimit.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityVrfLimit.setDescription('The actual limitation applied to the vrf capability.')
alaCapManTcamTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alaCapManTcamTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManTcamTable.setDescription('A list of capabilities related to TCAM limits.')
alaCapManTcamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityTcamContext"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityTcamCapability"))
if mibBuilder.loadTexts: alaCapManTcamEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManTcamEntry.setDescription('A Capability Manager Tcam entry.')
alaCapabilityTcamContext = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("global", 1))))
if mibBuilder.loadTexts: alaCapabilityTcamContext.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityTcamContext.setDescription('Context of the change being done on TCAM capability.')
alaCapabilityTcamCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mode", 1))))
if mibBuilder.loadTexts: alaCapabilityTcamCapability.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityTcamCapability.setDescription('Identifies a TCAM related capability.')
alaCapabilityTcamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapabilityTcamMode.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityTcamMode.setDescription('Selected Tcam mode.')
alaCapManMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 3), )
if mibBuilder.loadTexts: alaCapManMirrorTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManMirrorTable.setDescription('A list of capabilities related to mirroring limits.')
alaCapManMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityMirrorContext"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityMirrorCapability"))
if mibBuilder.loadTexts: alaCapManMirrorEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManMirrorEntry.setDescription('A Capability Manager Mirror entry.')
alaCapabilityMirrorContext = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("global", 1))))
if mibBuilder.loadTexts: alaCapabilityMirrorContext.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityMirrorContext.setDescription('Context of the change being done on Mirroring capability.')
alaCapabilityMirrorCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("maxMonitorSess", 1))))
if mibBuilder.loadTexts: alaCapabilityMirrorCapability.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityMirrorCapability.setDescription('Identifies a Mirroring related capability.')
alaCapabilityMirrorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapabilityMirrorLimit.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilityMirrorLimit.setDescription('Number of monitoring sessions.')
alaCapManSourceLearningTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 4), )
if mibBuilder.loadTexts: alaCapManSourceLearningTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManSourceLearningTable.setDescription('A list of capabilities related to source learning modes.')
alaCapManSourceLearningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilitySourceLearningContext"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaCapabilitySourceLearningCapability"))
if mibBuilder.loadTexts: alaCapManSourceLearningEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapManSourceLearningEntry.setDescription('A Capability Manager SourceLearning entry.')
alaCapabilitySourceLearningContext = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("global", 1))))
if mibBuilder.loadTexts: alaCapabilitySourceLearningContext.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilitySourceLearningContext.setDescription('Context of the change being done on source learning capability.')
alaCapabilitySourceLearningCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("mode", 1))))
if mibBuilder.loadTexts: alaCapabilitySourceLearningCapability.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilitySourceLearningCapability.setDescription('Identifies a source learning related capability.')
alaCapabilitySourceLearningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralized", 1), ("distributed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapabilitySourceLearningMode.setStatus('deprecated')
if mibBuilder.loadTexts: alaCapabilitySourceLearningMode.setDescription('whether source learning should operate in centralized or distributed mode.')
alaCapManHashControlCommands = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 5))
if mibBuilder.loadTexts: alaCapManHashControlCommands.setStatus('current')
if mibBuilder.loadTexts: alaCapManHashControlCommands.setDescription('Branch For Hash-control commands.')
alaCapManHashMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("brief", 1), ("extended", 2))).clone('extended')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManHashMode.setStatus('current')
if mibBuilder.loadTexts: alaCapManHashMode.setDescription('When set to brief, Hash mode is enabled.\n             When set to Extended, Hash mode is disabled.')
alaCapManUdpTcpPortMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManUdpTcpPortMode.setStatus('current')
if mibBuilder.loadTexts: alaCapManUdpTcpPortMode.setDescription('The control is used to enable or disable UDP TCP\n             port hashing. This option is applicable only when\n             Hash mode is set to disabled (i.e. extended)')
alaCapManNonUCHashControl = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManNonUCHashControl.setStatus('current')
if mibBuilder.loadTexts: alaCapManNonUCHashControl.setDescription('This control is used to enable/disable\n             Load balance for non unicast traffic.')
alaCapManSwLicensingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6))
alaCapManSwLicensingAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("applyFile", 1), ("applyKey", 2), ("deactivate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManSwLicensingAction.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingAction.setDescription('Object to define the action related to software licensing.')
alaCapManSwLicensingActionArg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManSwLicensingActionArg.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingActionArg.setDescription('Argument of the software licensing action.')
alaCapManVcSwLicensingAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("default", 0), ("applyFile", 1), ("applyAfn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManVcSwLicensingAction.setStatus('current')
if mibBuilder.loadTexts: alaCapManVcSwLicensingAction.setDescription('Object to define the action related to software licensing.')
alaCapManVcSwLicensingActionArg = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManVcSwLicensingActionArg.setStatus('current')
if mibBuilder.loadTexts: alaCapManVcSwLicensingActionArg.setDescription('Argument of the software licensing action.')
alaCapManVcSwLicensingAfnInfo = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapManVcSwLicensingAfnInfo.setStatus('current')
if mibBuilder.loadTexts: alaCapManVcSwLicensingAfnInfo.setDescription('AFN related license info.')
alaCapManVcSwLicensingAfnStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("inProgress", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCapManVcSwLicensingAfnStatus.setStatus('current')
if mibBuilder.loadTexts: alaCapManVcSwLicensingAfnStatus.setDescription('AFN related license status.')
alaCapManSwLicensingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaCapManSwLicensingInfoTable.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingInfoTable.setDescription('Table of valid application license information')
alaCapManSwLicensingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaLicenseId"))
if mibBuilder.loadTexts: alaCapManSwLicensingInfoEntry.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingInfoEntry.setDescription('Information of valid license applications')
alaLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: alaLicenseId.setStatus('current')
if mibBuilder.loadTexts: alaLicenseId.setDescription('Number identifying a licence. This number is automatically generated in the\n\t\tlicense generation process.')
alaLicensedApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLicensedApplication.setStatus('current')
if mibBuilder.loadTexts: alaLicensedApplication.setDescription('String displaying the application for which this license is valid.')
alaLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("demo", 1), ("permanent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLicenseType.setStatus('current')
if mibBuilder.loadTexts: alaLicenseType.setDescription('License of an application can be either Permamnent or Demo. The value of this\n\t\tindicated the type of this license.')
alaLicenseTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaLicenseTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: alaLicenseTimeRemaining.setDescription('Number of days remaining to evaluate this demo license. For\n\t\tpermanent license this is not applicable.')
alaCapManVcSwLicensingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10), )
if mibBuilder.loadTexts: alaCapManVcSwLicensingInfoTable.setStatus('obsolete')
if mibBuilder.loadTexts: alaCapManVcSwLicensingInfoTable.setDescription('Table of valid application license information')
alaCapManVcSwLicensingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaVcLicensedSerialNum"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaVcLicensedMacAddress"))
if mibBuilder.loadTexts: alaCapManVcSwLicensingInfoEntry.setStatus('obsolete')
if mibBuilder.loadTexts: alaCapManVcSwLicensingInfoEntry.setDescription('Information of valid license applications')
alaVcLicensedSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25))
if mibBuilder.loadTexts: alaVcLicensedSerialNum.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicensedSerialNum.setDescription('String displaying the serial number for which this license is valid.')
alaVcLicensedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaVcLicensedMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicensedMacAddress.setDescription('String displaying the MAC address for which this license is valid.')
alaVcLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("demo", 1), ("permanent", 2), ("timebased", 3), ("ov-generated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseType.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseType.setDescription('License of an application can be either Permamnent or Demo or TimeBased or OV generated. \n\t\tThe value of this indicated the type of this license.')
alaVcLicenseVcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseVcSlot.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseVcSlot.setDescription('The virtual chassis unit ID + ni slot number.')
alaVcLicenseBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseBitMap.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseBitMap.setDescription('The chassis license bit map.\n\t\t0x00000001  ADVANCD\n\t\t0x00000002  DATACENTER\n\t\t0x00000004  U16L\n\t\t0x00000008  AFN\n        0x00000010  POE\n\t')
alaVcLicenseTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseTimeRemain.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseTimeRemain.setDescription('Number of days remaining for demo license. For\n                permanent license this is not applicable.')
alaVcLicenseUpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("upgraded", 1), ("expired", 2), ("revoked", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseUpgradeStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseUpgradeStatus.setDescription('Specifies the current status of the time-based/ov-generated license. For\n                 permanent/demo license this is not applicable.')
alaVcLicenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 10, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaVcLicenseExpirationDate.setStatus('obsolete')
if mibBuilder.loadTexts: alaVcLicenseExpirationDate.setDescription('Expiration date of a time-based/ov-generated license. For\n               permanent/demo license this is not applicable.')
alaCapManMibVcSwLicensingInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11), )
if mibBuilder.loadTexts: alaCapManMibVcSwLicensingInfoTable.setStatus('current')
if mibBuilder.loadTexts: alaCapManMibVcSwLicensingInfoTable.setDescription('Table of valid application license information')
alaCapManMibVcSwLicensingInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1), ).setIndexNames((0, "ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicensedSerialNum"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicensedMacAddress"), (0, "ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseFeatureId"))
if mibBuilder.loadTexts: alaCapManMibVcSwLicensingInfoEntry.setStatus('current')
if mibBuilder.loadTexts: alaCapManMibVcSwLicensingInfoEntry.setDescription('Information of valid license applications')
alaMibVcLicensedSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25))
if mibBuilder.loadTexts: alaMibVcLicensedSerialNum.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicensedSerialNum.setDescription('String displaying the serial number for which this license is valid.')
alaMibVcLicensedMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaMibVcLicensedMacAddress.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicensedMacAddress.setDescription('String displaying the MAC address for which this license is valid.')
alaMibVcLicenseFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("advanced", 1), ("datacenter", 2), ("xniu16", 3), ("afn", 4), ("poe", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseFeatureId.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseFeatureId.setDescription('The integer value represents the license feature Id.')
alaMibVcLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("demo", 1), ("permanent", 2), ("timebased", 3), ("ov-generated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseType.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseType.setDescription('License of an application can be either Permamnent or Demo or TimeBased or OV generated.\n                The value of this indicated the type of this license.')
alaMibVcLicenseVcSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseVcSlot.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseVcSlot.setDescription('The virtual chassis unit ID + ni slot number.')
alaMibVcLicenseTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseTimeRemain.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseTimeRemain.setDescription('Number of days remaining for demo license. For\n                permanent license this is not applicable.')
alaMibVcLicenseUpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("upgraded", 1), ("expired", 2), ("revoked", 3), ("not-applicable", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseUpgradeStatus.setDescription('Specifies the current status of the time-based/ov-generated license. For\n                 permanent/demo license this is not applicable.')
alaMibVcLicenseExpirationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 11, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaMibVcLicenseExpirationDate.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseExpirationDate.setDescription('Expiration date of a time-based/ov-generated license. For\n               permanent/demo license this is not applicable.')
alaCapabilityIpmcMaxLimits = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 8))
alaCapabilityIpmcMaxAdminLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCapabilityIpmcMaxAdminLimit.setStatus('current')
if mibBuilder.loadTexts: alaCapabilityIpmcMaxAdminLimit.setDescription('Configured limit on maximum IPMC Table Entry count set by the user.')
alaCapabilityIpmcMaxOperLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCapabilityIpmcMaxOperLimit.setStatus('current')
if mibBuilder.loadTexts: alaCapabilityIpmcMaxOperLimit.setDescription('Operating limit on maximum IPMC Table Entry count. \n        This number is calculated based on the configured number\n        and existing module types.')
alaCapManFeatureControlCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 9))
alaCapManDcbCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCapManDcbCfgMode.setStatus('current')
if mibBuilder.loadTexts: alaCapManDcbCfgMode.setDescription('The control is used to globally enable or disable DCB feature')
alaCapManDcbOprMode = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCapManDcbOprMode.setStatus('current')
if mibBuilder.loadTexts: alaCapManDcbOprMode.setDescription('operating mode of DCB feature')
alaLicenseManagerDemoDayAlert = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 0, 1)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaLicenseTimeRemaining"))
if mibBuilder.loadTexts: alaLicenseManagerDemoDayAlert.setStatus('current')
if mibBuilder.loadTexts: alaLicenseManagerDemoDayAlert.setDescription('Generate trap for license manager.')
alaCapManGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1))
alaCapManCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 2))
alaCapManVrfTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityVrfLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManVrfTableGroup = alaCapManVrfTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManVrfTableGroup.setDescription('Mandatory objects for VRF Table group')
alaCapManTcamTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityTcamMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManTcamTableGroup = alaCapManTcamTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManTcamTableGroup.setDescription('Mandatory objects for TCAM Table group')
alaCapManMirrorTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityMirrorLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManMirrorTableGroup = alaCapManMirrorTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManMirrorTableGroup.setDescription('Mandatory objects for Mirroring Table group')
alaCapManSourceLearningTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilitySourceLearningMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManSourceLearningTableGroup = alaCapManSourceLearningTableGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManSourceLearningTableGroup.setDescription('Mandatory objects for source learning Table group')
alaCapManHashControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapManHashMode"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManUdpTcpPortMode"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManNonUCHashControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManHashControlGroup = alaCapManHashControlGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManHashControlGroup.setDescription('Capability Manager Hash Control Group.')
alaCapManSwLicensingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapManSwLicensingAction"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManSwLicensingActionArg"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManVcSwLicensingAction"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManVcSwLicensingActionArg"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManVcSwLicensingAfnInfo"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManVcSwLicensingAfnStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManSwLicensingGroup = alaCapManSwLicensingGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingGroup.setDescription('Mandatory objects for software licensing group')
alaCapManSwLicensingInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaLicensedApplication"), ("ALCATEL-IND1-CAPMAN-MIB", "alaLicenseType"), ("ALCATEL-IND1-CAPMAN-MIB", "alaLicenseTimeRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManSwLicensingInfoGroup = alaCapManSwLicensingInfoGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManSwLicensingInfoGroup.setDescription('Mandatory objects for software licensing table info group')
alaCapabilityIpmcMaxLimitsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityIpmcMaxAdminLimit"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityIpmcMaxOperLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapabilityIpmcMaxLimitsGroup = alaCapabilityIpmcMaxLimitsGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapabilityIpmcMaxLimitsGroup.setDescription('Mandatory objects for MAX IPMC max group')
alaCapManDcbCfgModeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapManDcbCfgMode"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManDcbOprMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManDcbCfgModeGroup = alaCapManDcbCfgModeGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManDcbCfgModeGroup.setDescription('Created to keep SNMP4J compiler Happy')
alaVcLicenseCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseBitMap"), ("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseTimeRemain"), ("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseType"), ("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseVcSlot"), ("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseUpgradeStatus"), ("ALCATEL-IND1-CAPMAN-MIB", "alaVcLicenseExpirationDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaVcLicenseCfgGroup = alaVcLicenseCfgGroup.setStatus('current')
if mibBuilder.loadTexts: alaVcLicenseCfgGroup.setDescription('Created to keep SNMP4J compiler Happy')
alaMibVcLicenseCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseFeatureId"), ("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseType"), ("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseVcSlot"), ("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseTimeRemain"), ("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseUpgradeStatus"), ("ALCATEL-IND1-CAPMAN-MIB", "alaMibVcLicenseExpirationDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaMibVcLicenseCfgGroup = alaMibVcLicenseCfgGroup.setStatus('current')
if mibBuilder.loadTexts: alaMibVcLicenseCfgGroup.setDescription('Created to keep SNMP4J compiler Happy')
alaCapManTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaLicenseManagerDemoDayAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManTrapGroup = alaCapManTrapGroup.setStatus('current')
if mibBuilder.loadTexts: alaCapManTrapGroup.setDescription('Traps for CapMan Manager')
alaCapManCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 60, 1, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-CAPMAN-MIB", "alaCapManVrfTableGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManTcamTableGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManMirrorTableGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManSourceLearningTableGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManHashControlGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManSwLicensingGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapManSwLicensingInfoGroup"), ("ALCATEL-IND1-CAPMAN-MIB", "alaCapabilityIpmcMaxLimitsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCapManCompliance = alaCapManCompliance.setStatus('current')
if mibBuilder.loadTexts: alaCapManCompliance.setDescription('The compliance statement for support of Capability Manager.')
mibBuilder.exportSymbols("ALCATEL-IND1-CAPMAN-MIB", alaCapManDcbOprMode=alaCapManDcbOprMode, alaMibVcLicensedSerialNum=alaMibVcLicensedSerialNum, alaCapManNonUCHashControl=alaCapManNonUCHashControl, alaCapManVcSwLicensingAction=alaCapManVcSwLicensingAction, alaMibVcLicenseTimeRemain=alaMibVcLicenseTimeRemain, alaCapManMirrorEntry=alaCapManMirrorEntry, alcatelIND1CapManMIB=alcatelIND1CapManMIB, alaCapManVcSwLicensingAfnInfo=alaCapManVcSwLicensingAfnInfo, alaCapManGroups=alaCapManGroups, alaVcLicenseVcSlot=alaVcLicenseVcSlot, alaCapabilitySourceLearningMode=alaCapabilitySourceLearningMode, alaCapabilityMibNotifications=alaCapabilityMibNotifications, alaCapManSwLicensingInfoEntry=alaCapManSwLicensingInfoEntry, alaCapManTrapGroup=alaCapManTrapGroup, alaCapabilityVrfLimit=alaCapabilityVrfLimit, alaVcLicensedMacAddress=alaVcLicensedMacAddress, alaLicensedApplication=alaLicensedApplication, alaMibVcLicenseExpirationDate=alaMibVcLicenseExpirationDate, alaCapManHashMode=alaCapManHashMode, alaCapabilityMirrorContext=alaCapabilityMirrorContext, alaVcLicenseTimeRemain=alaVcLicenseTimeRemain, alaCapManDcbCfgModeGroup=alaCapManDcbCfgModeGroup, alaCapabilityIpmcMaxAdminLimit=alaCapabilityIpmcMaxAdminLimit, alaCapManMirrorTable=alaCapManMirrorTable, alaCapManVrfEntry=alaCapManVrfEntry, alaCapManSwLicensingAction=alaCapManSwLicensingAction, alaCapManVcSwLicensingActionArg=alaCapManVcSwLicensingActionArg, alaMibVcLicenseUpgradeStatus=alaMibVcLicenseUpgradeStatus, alaCapManHashControlCommands=alaCapManHashControlCommands, alaMibVcLicensedMacAddress=alaMibVcLicensedMacAddress, alaCapManTcamTableGroup=alaCapManTcamTableGroup, alaVcLicenseType=alaVcLicenseType, alaCapManDcbCfgMode=alaCapManDcbCfgMode, alaCapabilityTcamCapability=alaCapabilityTcamCapability, alaLicenseTimeRemaining=alaLicenseTimeRemaining, alcatelIND1CapManMIBObjects=alcatelIND1CapManMIBObjects, alaCapabilitySourceLearningCapability=alaCapabilitySourceLearningCapability, alaCapManSwLicensingConfig=alaCapManSwLicensingConfig, alaVcLicenseBitMap=alaVcLicenseBitMap, alaMibVcLicenseType=alaMibVcLicenseType, alaCapabilityMirrorCapability=alaCapabilityMirrorCapability, alaVcLicenseExpirationDate=alaVcLicenseExpirationDate, alaCapManSourceLearningTable=alaCapManSourceLearningTable, alaCapManCompliance=alaCapManCompliance, alaCapManMirrorTableGroup=alaCapManMirrorTableGroup, alaMibVcLicenseFeatureId=alaMibVcLicenseFeatureId, alaCapManSourceLearningEntry=alaCapManSourceLearningEntry, alaCapManSwLicensingActionArg=alaCapManSwLicensingActionArg, alaCapManVcSwLicensingInfoEntry=alaCapManVcSwLicensingInfoEntry, alaCapManSwLicensingGroup=alaCapManSwLicensingGroup, alaCapManFeatureControlCommands=alaCapManFeatureControlCommands, alaVcLicenseCfgGroup=alaVcLicenseCfgGroup, alaCapManSwLicensingInfoTable=alaCapManSwLicensingInfoTable, alaCapabilityIpmcMaxLimits=alaCapabilityIpmcMaxLimits, alaCapabilityVrfCapability=alaCapabilityVrfCapability, alaVcLicensedSerialNum=alaVcLicensedSerialNum, PYSNMP_MODULE_ID=alcatelIND1CapManMIB, alaCapManMibVcSwLicensingInfoEntry=alaCapManMibVcSwLicensingInfoEntry, alaCapManVcSwLicensingAfnStatus=alaCapManVcSwLicensingAfnStatus, alaCapabilityMirrorLimit=alaCapabilityMirrorLimit, alaCapManVrfTableGroup=alaCapManVrfTableGroup, alaLicenseManagerDemoDayAlert=alaLicenseManagerDemoDayAlert, alaCapManTcamEntry=alaCapManTcamEntry, alaCapabilityIpmcMaxOperLimit=alaCapabilityIpmcMaxOperLimit, alaCapManSwLicensingInfoGroup=alaCapManSwLicensingInfoGroup, alaCapManMibVcSwLicensingInfoTable=alaCapManMibVcSwLicensingInfoTable, alaCapabilityTcamMode=alaCapabilityTcamMode, alaCapManHashControlGroup=alaCapManHashControlGroup, alaCapabilityManager=alaCapabilityManager, alaCapManVcSwLicensingInfoTable=alaCapManVcSwLicensingInfoTable, alaMibVcLicenseCfgGroup=alaMibVcLicenseCfgGroup, alaCapManTcamTable=alaCapManTcamTable, alaCapManVrfTable=alaCapManVrfTable, alaCapabilityTcamContext=alaCapabilityTcamContext, alaVcLicenseUpgradeStatus=alaVcLicenseUpgradeStatus, alaLicenseId=alaLicenseId, alaCapManConformance=alaCapManConformance, alaCapManSourceLearningTableGroup=alaCapManSourceLearningTableGroup, alaCapabilitySourceLearningContext=alaCapabilitySourceLearningContext, alaCapabilityVrfContext=alaCapabilityVrfContext, alaCapabilityIpmcMaxLimitsGroup=alaCapabilityIpmcMaxLimitsGroup, alaMibVcLicenseVcSlot=alaMibVcLicenseVcSlot, alaCapManUdpTcpPortMode=alaCapManUdpTcpPortMode, alaCapManCompliances=alaCapManCompliances, alaLicenseType=alaLicenseType)
