#
# PySNMP MIB module JUNIPER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/juniper/JUNIPER-MIB
# Produced by pysmi-1.1.3 at Wed Dec  1 15:51:18 2021
# On host fv-az74-277 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
jnxMibs, jnxChassisOKTraps, jnxChassisTraps = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs", "jnxChassisOKTraps", "jnxChassisTraps")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Counter32, iso, Gauge32, Integer32, Bits, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Counter32", "iso", "Gauge32", "Integer32", "Bits", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "TimeTicks", "ModuleIdentity")
TimeStamp, TextualConvention, TimeInterval, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TimeInterval", "DisplayString", "DateAndTime")
jnxBoxAnatomy = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 1))
jnxBoxAnatomy.setRevisions(('2010-10-22 00:00', '2004-03-23 00:00', '2004-06-30 00:00', '2004-09-17 00:00', '2005-07-18 00:00', '2005-07-19 00:00', '2006-11-20 00:00', '2008-07-31 00:00', '2008-08-01 00:00', '2008-12-31 00:00', '2009-01-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxBoxAnatomy.setRevisionsDescriptions(('Added load average variables', 'Added chassis identification objects.', 'Added following new traps for chassis\n                alarm conditions: jnxFruFailed, jnxFruOffline\n                and jnxFruOnline.', 'Added new traps for chassis\n                alarm condition jnxFruCheck.', 'Added new fru type FEB in jnxFruType enumeration.', 'Added new offline reason pfeVersionMismatch\n                to jnxFruOfflineReason enumeration.', 'Added new offline reason fruFebOffline\n                to jnxFruOfflineReason enumeration.', 'Added jnxBoxSystemDomainType object.', 'Added new fru type PSD to jnxFruType enumeration and\n                added jcsX chassis IDs to JnxChassisId enumeration.', 'Added nodeX chassis IDs to JnxChassisId enumeration.', 'Added sfcX and lcc4-lcc15 chassis IDs to JnxChassisId\n                enumeration.',))
if mibBuilder.loadTexts: jnxBoxAnatomy.setLastUpdated('201010220000Z')
if mibBuilder.loadTexts: jnxBoxAnatomy.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxBoxAnatomy.setContactInfo('        Juniper Technical Assistance Center\n\t\t     Juniper Networks, Inc.\n\t\t     1194 N. Mathilda Avenue\n\t\t     Sunnyvale, CA 94089\n\t\t     E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxBoxAnatomy.setDescription("The MIB modules representing Juniper Networks'\n\t    implementation of enterprise specific MIBs \n\t    supported by a single SNMP agent.")
class JnxChassisId(TextualConvention, Integer32):
    description = 'Identifies a specific router chassis.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))
    namedValues = NamedValues(("unknown", 1), ("singleChassis", 2), ("scc", 3), ("lcc0", 4), ("lcc1", 5), ("lcc2", 6), ("lcc3", 7), ("jcs1", 8), ("jcs2", 9), ("jcs3", 10), ("jcs4", 11), ("node0", 12), ("node1", 13), ("sfc0", 14), ("sfc1", 15), ("sfc2", 16), ("sfc3", 17), ("sfc4", 18), ("lcc4", 19), ("lcc5", 20), ("lcc6", 21), ("lcc7", 22), ("lcc8", 23), ("lcc9", 24), ("lcc10", 25), ("lcc11", 26), ("lcc12", 27), ("lcc13", 28), ("lcc14", 29), ("lcc15", 30), ("member0", 31), ("member1", 32), ("member2", 33), ("member3", 34), ("member4", 35), ("member5", 36), ("member6", 37), ("member7", 38))

jnxBoxClass = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxClass.setStatus('current')
if mibBuilder.loadTexts: jnxBoxClass.setDescription("The class of the box, indicating which product line\n\t\tthe box is about, for example, 'Internet Router'.")
jnxBoxDescr = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxDescr.setStatus('current')
if mibBuilder.loadTexts: jnxBoxDescr.setDescription("The name, model, or detailed description of the box,\n\t\tindicating which product the box is about, for example\n\t\t'M40'.")
jnxBoxSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSerialNo.setStatus('current')
if mibBuilder.loadTexts: jnxBoxSerialNo.setDescription('The serial number of this subject, blank if unknown \n\t\tor unavailable.')
jnxBoxRevision = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxRevision.setStatus('current')
if mibBuilder.loadTexts: jnxBoxRevision.setDescription('The revision of this subject, blank if unknown or\n\t\tunavailable.')
jnxBoxInstalled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxBoxInstalled.setDescription('The value of sysUpTime when the subject was last\n\t\tinstalled, up-and-running.  Zero if unknown or \n\t\talready up-and-running when the agent was up.')
jnxContainersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6), )
if mibBuilder.loadTexts: jnxContainersTable.setStatus('current')
if mibBuilder.loadTexts: jnxContainersTable.setDescription('A list of containers entries.')
jnxContainersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContainersIndex"))
if mibBuilder.loadTexts: jnxContainersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxContainersEntry.setDescription('An entry of containers table.')
jnxContainersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersIndex.setStatus('current')
if mibBuilder.loadTexts: jnxContainersIndex.setDescription('The index for this entry.')
jnxContainersView = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersView.setStatus('current')
if mibBuilder.loadTexts: jnxContainersView.setDescription('The view(s) from which the specific container\n\t\tappears.\n\n\t\tThis variable indicates that the specific container\n\t\tis embedded and accessible from the corresponding\n\t\tview(s).\n\n\t\tThe value is a bit map represented as a sum.\n\t\tIf multiple bits are set, the specified\n\t\tcontainer(s) are located and accessible from \n\t\tthat set of views.\n\n\t\tThe various values representing the bit positions\n\t\tand its corresponding views are:\n\t\t    1   front\n\t\t    2   rear\n\t\t    4   top\n\t\t    8   bottom\n\t\t   16   leftHandSide\n\t\t   32   rightHandSide\n\n\t\tNote 1: \n\t\tLefHandSide and rightHandSide are referred\n\t\tto based on the view from the front.\n\n\t\tNote 2: \n\t\tIf the specified containers are scattered \n\t\taround various views, the numbering is according\n\t\tto the following sequence:\n\t\t    front -> rear -> top -> bottom\n\t\t\t  -> leftHandSide -> rightHandSide\n\t\tFor each view plane, the numbering sequence is\n\t\tfirst from left to right, and then from up to down.\n\n\t\tNote 3: \n\t\tEven though the value in chassis hardware (e.g. \n\t\tslot number) may be labelled from 0, 1, 2, and up,\n\t\tall the indices in MIB start with 1 (not 0) \n\t\taccording to network management convention.')
jnxContainersLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersLevel.setStatus('current')
if mibBuilder.loadTexts: jnxContainersLevel.setDescription('The abstraction level of the box or chassis.\n\t\tIt is enumerated from the outside to the inside, \n\t\tfrom the outer layer to the inner layer.\n\t\tFor example, top level (i.e. level 0) refers to \n\t\tchassis frame, level 1 FPC slot within chassis \n\t\tframe, level 2 PIC space within FPC slot.')
jnxContainersWithin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersWithin.setStatus('current')
if mibBuilder.loadTexts: jnxContainersWithin.setDescription('The index of its next higher level container \n\t\thousing\tthis entry.  The associated \n\t\tjnxContainersIndex in the jnxContainersTable \n\t\trepresents its next higher level container.')
jnxContainersType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersType.setStatus('current')
if mibBuilder.loadTexts: jnxContainersType.setDescription('The type of this container.')
jnxContainersDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersDescr.setStatus('current')
if mibBuilder.loadTexts: jnxContainersDescr.setDescription('The name or detailed description of this\n\t\tsubject.')
jnxContainersCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContainersCount.setStatus('current')
if mibBuilder.loadTexts: jnxContainersCount.setDescription('The maximum number of containers of this level\n\t\tper container of the next higher level.  \n\t\te.g. if there are six level 2 containers in \n\t\tlevel 1 container, then jnxContainersCount for\n\t\tlevel 2 is six.')
jnxContentsLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxContentsLastChange.setDescription('The value of sysUpTime when the box contents \n\t\ttable last changed.  Zero if unknown or already \n\t\texisting when the agent was up.')
jnxContentsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8), )
if mibBuilder.loadTexts: jnxContentsTable.setStatus('current')
if mibBuilder.loadTexts: jnxContentsTable.setDescription('A list of contents entries.')
jnxContentsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxContentsContainerIndex"), (0, "JUNIPER-MIB", "jnxContentsL1Index"), (0, "JUNIPER-MIB", "jnxContentsL2Index"), (0, "JUNIPER-MIB", "jnxContentsL3Index"))
if mibBuilder.loadTexts: jnxContentsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxContentsEntry.setDescription('An entry of contents table.')
jnxContentsContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxContentsContainerIndex.setDescription('The associated jnxContainersIndex in the \n\t\tjnxContainersTable.')
jnxContentsL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxContentsL1Index.setDescription('The level one index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxContentsL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxContentsL2Index.setDescription('The level two index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxContentsL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxContentsL3Index.setDescription('The level three index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxContentsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsType.setStatus('current')
if mibBuilder.loadTexts: jnxContentsType.setDescription('The type of this subject.  zeroDotZero\n\t\tif unknown.')
jnxContentsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsDescr.setStatus('current')
if mibBuilder.loadTexts: jnxContentsDescr.setDescription('The name or detailed description of this\n\t\tsubject.')
jnxContentsSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsSerialNo.setStatus('current')
if mibBuilder.loadTexts: jnxContentsSerialNo.setDescription('The serial number of this subject, blank if \n\t\tunknown or unavailable.')
jnxContentsRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsRevision.setStatus('current')
if mibBuilder.loadTexts: jnxContentsRevision.setDescription('The revision of this subject, blank if unknown \n\t\tor unavailable.')
jnxContentsInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxContentsInstalled.setDescription('The value of sysUpTime when the subject was last \n\t\tinstalled, up-and-running.  Zero if unknown\n\t\tor already up-and-running when the agent was up.')
jnxContentsPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsPartNo.setStatus('current')
if mibBuilder.loadTexts: jnxContentsPartNo.setDescription('The part number of this subject, blank if unknown \n\t\tor unavailable.')
jnxContentsChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 11), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxContentsChassisId.setDescription('Identifies the chassis on which the contents of this\n                row exists.')
jnxContentsChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxContentsChassisDescr.setDescription('A textual description of the chassis on which the\n                contents of this row exists.')
jnxContentsChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxContentsChassisCleiCode.setStatus('current')
if mibBuilder.loadTexts: jnxContentsChassisCleiCode.setDescription('The clei code of this subject, blank if unknown\n                 or unavailable.\n\n                 A CLEI code is an intelligent code that consists of 10\n                 alphanumeric characters with 4 data elements.  The first data\n                 element is considered the basic code with the first 2 characters\n                 indicating the technology or equipment type, and the third and\n                 fourth characters denoting the functional sub-category.  The\n                 second data element represents the features, and its three\n                 characters denote functional capabilities or changes.  The third\n                 data element has one character and denotes a reference to a\n                 manufacturer, system ID, specification, or drawing.  The fourth\n                 data element consists of two characters and contains complementary\n                 data.  These two characters provide a means of differentiating or\n                 providing uniqueness between the eight character CLEI codes by\n                 identifying the manufacturing vintage of the product.  Names are\n                 assigned via procedures defined in [GR485].\n\n                 The assigned maintenance agent for the CLEI code, Telcordia\n                 Technologies, is responsible for assigning certain equipment and\n                 other identifiers (e.g., location, manufacturer/supplier) for the\n                 telecommunications industry.')
jnxLEDLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDLastChange.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDLastChange.setDescription('The value of sysUpTime when the box LED table \n\t\tlast changed.  Zero if unknown or already at \n\t\tthat state when the agent was up.')
jnxLEDTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10), )
if mibBuilder.loadTexts: jnxLEDTable.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDTable.setDescription('A list of status entries.')
jnxLEDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxLEDAssociateTable"), (0, "JUNIPER-MIB", "jnxLEDAssociateIndex"), (0, "JUNIPER-MIB", "jnxLEDL1Index"), (0, "JUNIPER-MIB", "jnxLEDL2Index"), (0, "JUNIPER-MIB", "jnxLEDL3Index"))
if mibBuilder.loadTexts: jnxLEDEntry.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDEntry.setDescription('An entry of status table.')
jnxLEDAssociateTable = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("jnxContainersTable", 2), ("jnxContentsTable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateTable.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDAssociateTable.setDescription('The associated table that this entry is \n\t\trelated.')
jnxLEDAssociateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDAssociateIndex.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDAssociateIndex.setDescription('The index of the associated table that this\n\t\tentry is related.')
jnxLEDL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL1Index.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDL1Index.setDescription('The level one index of the associated\n\t\ttable that this entry is related.  Zero \n\t\tif unavailable or inapplicable.')
jnxLEDL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL2Index.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDL2Index.setDescription('The level two index of the associated\n\t\ttable that this entry is related.  Zero \n\t\tif unavailable or inapplicable.')
jnxLEDL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDL3Index.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDL3Index.setDescription('The level three index of the associated\n\t\ttable that this entry is related.  Zero\n\t\tif unavailable or inapplicable.')
jnxLEDOriginator = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDOriginator.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDOriginator.setDescription('The originator of the this entry.')
jnxLEDDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDDescr.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDDescr.setDescription('The name or detailed description of this subject.')
jnxLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("green", 2), ("yellow", 3), ("red", 4), ("blue", 5), ("amber", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDState.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDState.setDescription('The state of the LED indicator.')
jnxLEDStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("blue", 1), ("green", 2), ("amber", 3), ("yellow", 4), ("red", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLEDStateOrdered.setStatus('deprecated')
if mibBuilder.loadTexts: jnxLEDStateOrdered.setDescription("The state of the LED indicator.  Identical to jnxLEDState, but\n                with enums ordered from 'most operational' to 'least\n                operational' states.")
jnxFilledLastChange = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledLastChange.setStatus('current')
if mibBuilder.loadTexts: jnxFilledLastChange.setDescription('The value of sysUpTime when the box filled \n\t\tstatus table last changed.  Zero if unknown or\n\t\talready at that state when the agent was up.')
jnxFilledTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12), )
if mibBuilder.loadTexts: jnxFilledTable.setStatus('current')
if mibBuilder.loadTexts: jnxFilledTable.setDescription('A list of filled status entries.')
jnxFilledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxFilledContainerIndex"), (0, "JUNIPER-MIB", "jnxFilledL1Index"), (0, "JUNIPER-MIB", "jnxFilledL2Index"), (0, "JUNIPER-MIB", "jnxFilledL3Index"))
if mibBuilder.loadTexts: jnxFilledEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFilledEntry.setDescription('An entry of filled status table.')
jnxFilledContainerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledContainerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFilledContainerIndex.setDescription('The associated jnxContainersIndex in the \n\t\tjnxContainersTable.')
jnxFilledL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFilledL1Index.setDescription('The level one index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxFilledL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFilledL2Index.setDescription('The level two index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxFilledL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFilledL3Index.setDescription('The level three index of the container\n\t\thousing this subject.  Zero if unavailable\n\t\tor inapplicable.')
jnxFilledDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFilledDescr.setDescription('The name or detailed description of this\n\t\tsubject.')
jnxFilledState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("filled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledState.setStatus('current')
if mibBuilder.loadTexts: jnxFilledState.setDescription('The filled state of this subject.')
jnxFilledChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 7), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFilledChassisId.setDescription('Identifies the chassis on which the contents of this\n                row exists.')
jnxFilledChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFilledChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFilledChassisDescr.setDescription('A textual description of the chassis on which the\n                contents of this row exists.')
jnxOperatingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13), )
if mibBuilder.loadTexts: jnxOperatingTable.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingTable.setDescription('A list of operating status entries.')
jnxOperatingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxOperatingContentsIndex"), (0, "JUNIPER-MIB", "jnxOperatingL1Index"), (0, "JUNIPER-MIB", "jnxOperatingL2Index"), (0, "JUNIPER-MIB", "jnxOperatingL3Index"))
if mibBuilder.loadTexts: jnxOperatingEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingEntry.setDescription('An entry of operating status table.')
jnxOperatingContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingContentsIndex.setDescription('The associated jnxContentsContainerIndex in the \n\t\tjnxContentsTable.')
jnxOperatingL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingL1Index.setDescription('The level one index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxOperatingL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingL2Index.setDescription('The level two index associated with this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxOperatingL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingL3Index.setDescription('The level three index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxOperatingDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDescr.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingDescr.setDescription('The name or detailed description of this subject.')
jnxOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("ready", 3), ("reset", 4), ("runningAtFullSpeed", 5), ("down", 6), ("standby", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingState.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingState.setDescription('The operating state of this subject.')
jnxOperatingTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingTemp.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingTemp.setDescription('The temperature in Celsius (degrees C) of this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxOperatingCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingCPU.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingCPU.setDescription('The CPU utilization in percentage of this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxOperatingISR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingISR.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingISR.setDescription('The CPU utilization in percentage of this subject\n\t\tspending in interrupt service routine (ISR).\n\t\tZero if unavailable or inapplicable.')
jnxOperatingDRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingDRAMSize.setStatus('deprecated')
if mibBuilder.loadTexts: jnxOperatingDRAMSize.setDescription('The DRAM size in bytes of this subject.\n\t\tZero if unavailable or inapplicable.')
jnxOperatingBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingBuffer.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingBuffer.setDescription('The buffer pool utilization in percentage\n\t\tof this subject.  Zero if unavailable or \n\t\tinapplicable.')
jnxOperatingHeap = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingHeap.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingHeap.setDescription('The heap utilization in percentage of \n\t\tthis subject.  Zero if unavailable or \n\t\tinapplicable.')
jnxOperatingUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: jnxOperatingUpTime.setDescription('The time interval in 10-millisecond period\n\t\tthat this subject has been up and running.  \n\t\tZero if unavailable or inapplicable.')
jnxOperatingLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingLastRestart.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingLastRestart.setDescription('The value of sysUpTime when this subject \n\t\tlast restarted.  Zero if unavailable or \n\t\tinapplicable.')
jnxOperatingMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingMemory.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingMemory.setDescription('The installed memory size in Megabytes \n\t\tof this subject.  Zero if unavailable or\n\t\tinapplicable.')
jnxOperatingStateOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("running", 1), ("standby", 2), ("ready", 3), ("runningAtFullSpeed", 4), ("reset", 5), ("down", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingStateOrdered.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingStateOrdered.setDescription("The operating state of this subject.  Identical to\n                 jnxOperatingState, but with enums ordered from 'most\n                 operational' to 'least operational' states.")
jnxOperatingChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 17), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingChassisId.setDescription('Identifies the chassis on which the contents of this\n                row exists.')
jnxOperatingChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingChassisDescr.setDescription('A textual description of the chassis on which the\n                contents of this row exists.')
jnxOperatingRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperatingRestartTime.setStatus('current')
if mibBuilder.loadTexts: jnxOperatingRestartTime.setDescription('The time at which this entity\n                last restarted.')
jnxOperating1MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating1MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxOperating1MinLoadAvg.setDescription('The CPU Load Average over the last 1 minutes\n                     Here it will be shown as percentage value\n                     Zero if unavailable or inapplicable.')
jnxOperating5MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating5MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxOperating5MinLoadAvg.setDescription('The CPU Load Average over the last 5 minutes\n                     Here it will be shown as percentage value\n                     Zero if unavailable or inapplicable.')
jnxOperating15MinLoadAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 13, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOperating15MinLoadAvg.setStatus('current')
if mibBuilder.loadTexts: jnxOperating15MinLoadAvg.setDescription('The CPU Load Average over the last 15 minutes\n                     Here it will be shown as percentage value\n                     Zero if unavailable or inapplicable.')
jnxRedundancyTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14), )
if mibBuilder.loadTexts: jnxRedundancyTable.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyTable.setDescription('A list of redundancy information entries.')
jnxRedundancyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxRedundancyContentsIndex"), (0, "JUNIPER-MIB", "jnxRedundancyL1Index"), (0, "JUNIPER-MIB", "jnxRedundancyL2Index"), (0, "JUNIPER-MIB", "jnxRedundancyL3Index"))
if mibBuilder.loadTexts: jnxRedundancyEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyEntry.setDescription('An entry in the redundancy information table.')
jnxRedundancyContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyContentsIndex.setDescription('The associated jnxContentsContainerIndex in the \n\t\tjnxContentsTable.')
jnxRedundancyL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyL1Index.setDescription('The level one index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxRedundancyL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyL2Index.setDescription('The level two index associated with this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxRedundancyL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyL3Index.setDescription('The level three index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxRedundancyDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyDescr.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyDescr.setDescription('The name or detailed description of this subject.')
jnxRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyConfig.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyConfig.setDescription("The election priority of redundancy configuration for\n\t\tthis subject.  The value 'notApplicable' means no\n\t\tspecific instance is configured to be master or\n\t\tbackup; whichever component boots up first becomes a\n\t\tmaster.")
jnxRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("master", 2), ("backup", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyState.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyState.setDescription('The current running state for this subject.')
jnxRedundancySwitchoverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverCount.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancySwitchoverCount.setDescription('The total number of switchover as perceived by\n\t\tthis subject since routing engine is up and running.\n\t\tThe switchover is defined as a change in state of\n\t\tjnxRedundancyState from master to backup or vice\n\t\tversa.\tIts value is reset when the routing engine\n\t\tis reset or rebooted.')
jnxRedundancySwitchoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverTime.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancySwitchoverTime.setDescription('The value of sysUpTime when the jnxRedundancyState\n\t\tof this subject was last switched over from master\n\t\tto backup or vice versa.  Zero if unknown or never\n\t\tswitched over since the routing engine is up and\n\t\trunning.')
jnxRedundancySwitchoverReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("neverSwitched", 2), ("userSwitched", 3), ("autoSwitched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancySwitchoverReason.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancySwitchoverReason.setDescription('The reason of the last switchover for this subject.')
jnxRedundancyKeepaliveHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveHeartbeat.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyKeepaliveHeartbeat.setDescription('The period of sending keepalive messages between\n\t\tthe master and backup subsystems.  It is a system-wide\n\t\tpreset value in seconds used by internal mastership\n\t\tresolution.  Zero if unavailable or inapplicable.')
jnxRedundancyKeepaliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyKeepaliveTimeout.setDescription('The timeout period in seconds, by the keepalive \n\t\twatchdog timer, before initiating a switch over to \n\t\tthe backup subsystem.  Zero if unavailable or \n\t\tinapplicable.')
jnxRedundancyKeepaliveElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveElapsed.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyKeepaliveElapsed.setDescription('The elapsed time in seconds by this subject since \n\t\treceiving the last keepalive message from the other\n\t\tsubsystems.  Zero if unavailable or inapplicable.')
jnxRedundancyKeepaliveLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyKeepaliveLoss.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyKeepaliveLoss.setDescription('The total number of losses on keepalive messages \n\t\tbetween the master and backup subsystems as perceived\n\t\tby this subject since the system is up and running.  \n\t\tZero if unavailable or inapplicable.')
jnxRedundancyChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 15), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyChassisId.setDescription('Identifies the chassis on which the contents of this\n                row exists.')
jnxRedundancyChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 14, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRedundancyChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancyChassisDescr.setDescription('A textual description of the chassis on which the\n                contents of this row exists.')
jnxFruTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15), )
if mibBuilder.loadTexts: jnxFruTable.setStatus('current')
if mibBuilder.loadTexts: jnxFruTable.setDescription('A list of FRU status entries.')
jnxFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1), ).setIndexNames((0, "JUNIPER-MIB", "jnxFruContentsIndex"), (0, "JUNIPER-MIB", "jnxFruL1Index"), (0, "JUNIPER-MIB", "jnxFruL2Index"), (0, "JUNIPER-MIB", "jnxFruL3Index"))
if mibBuilder.loadTexts: jnxFruEntry.setStatus('current')
if mibBuilder.loadTexts: jnxFruEntry.setDescription('An entry in the FRU status table.')
jnxFruContentsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruContentsIndex.setStatus('current')
if mibBuilder.loadTexts: jnxFruContentsIndex.setDescription('The associated jnxContentsContainerIndex in the \n\t\tjnxContentsTable.')
jnxFruL1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL1Index.setStatus('current')
if mibBuilder.loadTexts: jnxFruL1Index.setDescription('The level one index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxFruL2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL2Index.setStatus('current')
if mibBuilder.loadTexts: jnxFruL2Index.setDescription('The level two index associated with this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxFruL3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruL3Index.setStatus('current')
if mibBuilder.loadTexts: jnxFruL3Index.setDescription('The level three index associated with this\n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruName.setStatus('current')
if mibBuilder.loadTexts: jnxFruName.setDescription('The name or detailed description of this subject.')
jnxFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("clockGenerator", 2), ("flexiblePicConcentrator", 3), ("switchingAndForwardingModule", 4), ("controlBoard", 5), ("routingEngine", 6), ("powerEntryModule", 7), ("frontPanelModule", 8), ("switchInterfaceBoard", 9), ("processorMezzanineBoardForSIB", 10), ("portInterfaceCard", 11), ("craftInterfacePanel", 12), ("fan", 13), ("lineCardChassis", 14), ("forwardingEngineBoard", 15), ("protectedSystemDomain", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruType.setStatus('current')
if mibBuilder.loadTexts: jnxFruType.setDescription('The FRU type for this subject.')
jnxFruSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruSlot.setStatus('current')
if mibBuilder.loadTexts: jnxFruSlot.setDescription('The slot number of this subject.  This is equivalent\n\t\tto jnxFruL1Index in meaning.  Zero if unavailable or \n\t\tinapplicable.')
jnxFruState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("present", 3), ("ready", 4), ("announceOnline", 5), ("online", 6), ("anounceOffline", 7), ("offline", 8), ("diagnostic", 9), ("standby", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruState.setStatus('current')
if mibBuilder.loadTexts: jnxFruState.setDescription('The current state for this subject.')
jnxFruTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruTemp.setStatus('current')
if mibBuilder.loadTexts: jnxFruTemp.setDescription('The temperature in Celsius (degrees C) of this \n\t\tsubject.  Zero if unavailable or inapplicable.')
jnxFruOfflineReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("error", 3), ("noPower", 4), ("configPowerOff", 5), ("configHoldInReset", 6), ("cliCommand", 7), ("buttonPress", 8), ("cliRestart", 9), ("overtempShutdown", 10), ("masterClockDown", 11), ("singleSfmModeChange", 12), ("packetSchedulingModeChange", 13), ("physicalRemoval", 14), ("unresponsiveRestart", 15), ("sonetClockAbsent", 16), ("rddPowerOff", 17), ("majorErrors", 18), ("minorErrors", 19), ("lccHardRestart", 20), ("lccVersionMismatch", 21), ("powerCycle", 22), ("reconnect", 23), ("overvoltage", 24), ("pfeVersionMismatch", 25), ("febRddCfgChange", 26), ("fpcMisconfig", 27), ("fruReconnectFail", 28), ("fruFwddReset", 29), ("fruFebSwitch", 30), ("fruFebOffline", 31), ("fruInServSoftUpgradeError", 32), ("fruChasdPowerRatingExceed", 33), ("fruConfigOffline", 34), ("fruServiceRestartRequest", 35), ("spuResetRequest", 36), ("spuFlowdDown", 37), ("spuSpi4Down", 38), ("spuWatchdogTimeout", 39), ("spuCoreDump", 40), ("fpgaSpi4LinkDown", 41), ("i3Spi4LinkDown", 42), ("cppDisconnect", 43), ("cpuNotBoot", 44), ("spuCoreDumpComplete", 45), ("rstOnSpcSpuFailure", 46), ("softRstOnSpcSpuFailure", 47), ("hwAuthenticationFailure", 48), ("reconnectFpcFail", 49), ("fpcAppFailed", 50), ("fpcKernelCrash", 51), ("spuFlowdDownNoCore", 52), ("spuFlowdCoreDumpIncomplete", 53), ("spuFlowdCoreDumpComplete", 54), ("spuIdpdDownNoCore", 55), ("spuIdpdCoreDumpIncomplete", 56), ("spuIdpdCoreDumpComplete", 57), ("spuCoreDumpIncomplete", 58), ("spuIdpdDown", 59), ("fruPfeReset", 60), ("fruReconnectNotReady", 61), ("fruSfLinkDown", 62), ("fruFabricDown", 63), ("fruAntiCounterfeitRetry", 64), ("fruFPCChassisClusterDisable", 65), ("spuFipsError", 66), ("fruFPCFabricDownOffline", 67), ("febCfgChange", 68), ("routeLocalizationRoleChange", 69), ("fruFpcUnsupported", 70), ("psdVersionMismatch", 71), ("fruResetThresholdExceeded", 72), ("picBounce", 73), ("badVoltage", 74)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruOfflineReason.setStatus('current')
if mibBuilder.loadTexts: jnxFruOfflineReason.setDescription('The offline reason of this subject.')
jnxFruLastPowerOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOff.setStatus('current')
if mibBuilder.loadTexts: jnxFruLastPowerOff.setDescription('The value of sysUpTime when this subject was last \n\t\tpowered off.  Zero if unavailable or inapplicable.')
jnxFruLastPowerOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruLastPowerOn.setStatus('current')
if mibBuilder.loadTexts: jnxFruLastPowerOn.setDescription('The value of sysUpTime when this subject was last \n\t\tpowered on.  Zero if unavailable or inapplicable.')
jnxFruPowerUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 13), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPowerUpTime.setStatus('current')
if mibBuilder.loadTexts: jnxFruPowerUpTime.setDescription('The time interval in 10-millisecond period\n\t\tthat this subject has been up and running\n\t\tsince the last power on time.  Zero if \n\t\tunavailable or inapplicable.')
jnxFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 14), JnxChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisId.setStatus('current')
if mibBuilder.loadTexts: jnxFruChassisId.setDescription('Identifies the chassis on which the contents of this\n                row exists.')
jnxFruChassisDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruChassisDescr.setStatus('current')
if mibBuilder.loadTexts: jnxFruChassisDescr.setDescription('A textual description of the chassis on which the\n                contents of this row exists.')
jnxFruPsdAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxFruPsdAssignment.setStatus('current')
if mibBuilder.loadTexts: jnxFruPsdAssignment.setDescription('The PSD assignment of this subject. Zero if unavailable or\n                not applicable.')
jnxBoxKernelMemoryUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxKernelMemoryUsedPercent.setStatus('current')
if mibBuilder.loadTexts: jnxBoxKernelMemoryUsedPercent.setDescription('The percentage of kernel memory used\n\t\tof this subject.  0 if unavailable or\n\t\tinapplicable.')
jnxBoxSystemDomainType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("rootSystemDomain", 2), ("protectedSystemDomain", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBoxSystemDomainType.setStatus('current')
if mibBuilder.loadTexts: jnxBoxSystemDomainType.setDescription('The system domain type of this subject, notApplicable will\n\t\tbe returned if this feature is not supported.')
jnxPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 1)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: jnxPowerSupplyFailure.setDescription('A jnxPowerSupplyFailure trap signifies that\n\t\tthe SNMP entity, acting in an agent role, has\n\t\tdetected that the specified power supply in the\n\t\tchassis has been in the failure (bad DC output) \n\t\tcondition.')
jnxFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 2)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxFanFailure.setStatus('current')
if mibBuilder.loadTexts: jnxFanFailure.setDescription('A jnxFanFailure trap signifies that the SNMP\n\t\tentity, acting in an agent role, has detected\n\t\tthat the specified cooling fan or impeller in \n\t\tthe chassis has been in the failure (not spinning) \n\t\tcondition.')
jnxOverTemperature = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 3)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"))
if mibBuilder.loadTexts: jnxOverTemperature.setStatus('current')
if mibBuilder.loadTexts: jnxOverTemperature.setDescription('A jnxOverTemperature trap signifies that the \n\t\tSNMP entity, acting in an agent role, has \n\t\tdetected that the specified hardware component\n\t\tin the chassis has experienced over temperature\n\t\tcondition.')
jnxRedundancySwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 4)).setObjects(("JUNIPER-MIB", "jnxRedundancyContentsIndex"), ("JUNIPER-MIB", "jnxRedundancyL1Index"), ("JUNIPER-MIB", "jnxRedundancyL2Index"), ("JUNIPER-MIB", "jnxRedundancyL3Index"), ("JUNIPER-MIB", "jnxRedundancyDescr"), ("JUNIPER-MIB", "jnxRedundancyConfig"), ("JUNIPER-MIB", "jnxRedundancyState"), ("JUNIPER-MIB", "jnxRedundancySwitchoverCount"), ("JUNIPER-MIB", "jnxRedundancySwitchoverTime"), ("JUNIPER-MIB", "jnxRedundancySwitchoverReason"))
if mibBuilder.loadTexts: jnxRedundancySwitchover.setStatus('current')
if mibBuilder.loadTexts: jnxRedundancySwitchover.setDescription('A jnxRedundancySwitchover trap signifies that \n\t\tthe SNMP entity, acting in an agent role, has \n\t\tdetected that the specified hardware component\n\t\tin the chassis has experienced a redundancy \n\t\tswitchover event defined as a change in state\n\t\tof jnxRedundancyState from master to backup or\n\t\tvice versa.')
jnxFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 5)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruRemoval.setStatus('current')
if mibBuilder.loadTexts: jnxFruRemoval.setDescription('A jnxFruRemoval trap signifies that the SNMP \n\t\tentity, acting in an agent role, has detected \n\t\tthat the specified FRU (Field Replaceable Unit)\n\t\thas been removed from the chassis.')
jnxFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 6)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruInsertion.setStatus('current')
if mibBuilder.loadTexts: jnxFruInsertion.setDescription('A jnxFruInsertion trap signifies that the SNMP \n\t\tentity,\tacting in an agent role, has detected that\n\t\tthe specified FRU (Field Replaceable Unit) has been \n\t\tinserted into the chassis.')
jnxFruPowerOff = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 7)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruPowerOff.setStatus('current')
if mibBuilder.loadTexts: jnxFruPowerOff.setDescription('A jnxFruPowerOff trap signifies that the SNMP \n\t\tentity, acting in an agent role, has detected \n\t\tthat the specified FRU (Field Replaceable Unit)\n\t\thas been powered off in the chassis.')
jnxFruPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 8)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruPowerOn.setStatus('current')
if mibBuilder.loadTexts: jnxFruPowerOn.setDescription('A jnxFruPowerOn trap signifies that the SNMP \n\t\tentity,\tacting in an agent role, has detected that\n\t\tthe specified FRU (Field Replaceable Unit) has been \n\t\tpowered on in the chassis.')
jnxFruFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 9)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruFailed.setStatus('current')
if mibBuilder.loadTexts: jnxFruFailed.setDescription('This indicates the specified FRU (Field Replaceable Unit)\n                 has failed in the chassis. Most probably this is due toi\n                 some hard error such as fru is not powering up or not\n                 able to load ukernel. In these cases, fru is replaced.')
jnxFruOffline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 10)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"), ("JUNIPER-MIB", "jnxFruOfflineReason"), ("JUNIPER-MIB", "jnxFruLastPowerOff"), ("JUNIPER-MIB", "jnxFruLastPowerOn"))
if mibBuilder.loadTexts: jnxFruOffline.setStatus('current')
if mibBuilder.loadTexts: jnxFruOffline.setDescription('A jnxFruOffline trap signifies that the SNMP\n                entity, acting in an agent role, has detected\n                that the specified FRU (Field Replaceable Unit)\n                has gone offline in the chassis.')
jnxFruOnline = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 11)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruOnline.setStatus('current')
if mibBuilder.loadTexts: jnxFruOnline.setDescription('A jnxFruOnline trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                the specified FRU (Field Replaceable Unit) has\n                gone online in the chassis.')
jnxFruCheck = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 12)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruCheck.setStatus('current')
if mibBuilder.loadTexts: jnxFruCheck.setDescription('A jnxFruCheck trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                the specified FRU (Field Replaceable Unit) has\n                encountered some operational errors and gone into\n                check state in the chassis.')
jnxFEBSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 13)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFEBSwitchover.setStatus('current')
if mibBuilder.loadTexts: jnxFEBSwitchover.setDescription('A jnxFEBSwitchover trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                the specified FEB (Forwarding Engine Board) has\n                switched over.')
jnxHardDiskFailed = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 14)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxHardDiskFailed.setStatus('current')
if mibBuilder.loadTexts: jnxHardDiskFailed.setDescription('A jnxHardDiskFailed trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                the Disk in the specified Routing Engine has\n                encountered some operational errors and gone into\n                failed state in the chassis.')
jnxHardDiskMissing = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 15)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxHardDiskMissing.setStatus('current')
if mibBuilder.loadTexts: jnxHardDiskMissing.setDescription('A DiskMissing trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                hard disk in the specified outing Engine is missing\n                from boot device list.')
jnxBootFromBackup = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 1, 16)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxBootFromBackup.setStatus('current')
if mibBuilder.loadTexts: jnxBootFromBackup.setDescription('A jnxBootFromBackup trap signifies that the SNMP\n                 entity, acting in an agent role, has detected that\n                 the specified  routing-engine/member has booted from\n                 the back up root partition')
jnxPowerSupplyOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 1)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxPowerSupplyOK.setStatus('current')
if mibBuilder.loadTexts: jnxPowerSupplyOK.setDescription('A jnxPowerSupplyOK trap signifies that the \n\t\tSNMP entity, acting in an agent role, has\n\t\tdetected that the specified power supply in the\n\t\tchassis has recovered from the failure (bad DC output) \n\t\tcondition.')
jnxFanOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 2)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingState"))
if mibBuilder.loadTexts: jnxFanOK.setStatus('current')
if mibBuilder.loadTexts: jnxFanOK.setDescription('A jnxFanOK trap signifies that the SNMP\n\t\tentity, acting in an agent role, has detected that\n\t\tthe specified cooling fan or impeller in the chassis\n\t\thas recovered from the failure (not spinning) condition.')
jnxTemperatureOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 3)).setObjects(("JUNIPER-MIB", "jnxContentsContainerIndex"), ("JUNIPER-MIB", "jnxContentsL1Index"), ("JUNIPER-MIB", "jnxContentsL2Index"), ("JUNIPER-MIB", "jnxContentsL3Index"), ("JUNIPER-MIB", "jnxContentsDescr"), ("JUNIPER-MIB", "jnxOperatingTemp"))
if mibBuilder.loadTexts: jnxTemperatureOK.setStatus('current')
if mibBuilder.loadTexts: jnxTemperatureOK.setDescription('A jnxTemperatureOK trap signifies that the \n\t\tSNMP entity, acting in an agent role, has \n\t\tdetected that the specified hardware component\n\t\tin the chassis has recovered from over temperature\n\t\tcondition.')
jnxFruOK = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 2, 4)).setObjects(("JUNIPER-MIB", "jnxFruContentsIndex"), ("JUNIPER-MIB", "jnxFruL1Index"), ("JUNIPER-MIB", "jnxFruL2Index"), ("JUNIPER-MIB", "jnxFruL3Index"), ("JUNIPER-MIB", "jnxFruName"), ("JUNIPER-MIB", "jnxFruType"), ("JUNIPER-MIB", "jnxFruSlot"))
if mibBuilder.loadTexts: jnxFruOK.setStatus('current')
if mibBuilder.loadTexts: jnxFruOK.setDescription('A jnxFruOK trap signifies that the SNMP\n                entity, acting in an agent role, has detected that\n                the specified FRU (Field Replaceable Unit) has\n                recovered from previous operational errors and it\n                is in ok state in the chassis.')
mibBuilder.exportSymbols("JUNIPER-MIB", jnxFruContentsIndex=jnxFruContentsIndex, jnxContentsChassisDescr=jnxContentsChassisDescr, jnxOperatingChassisId=jnxOperatingChassisId, jnxBoxKernelMemoryUsedPercent=jnxBoxKernelMemoryUsedPercent, jnxContainersTable=jnxContainersTable, jnxFruPowerOff=jnxFruPowerOff, jnxContentsLastChange=jnxContentsLastChange, jnxFruCheck=jnxFruCheck, jnxPowerSupplyOK=jnxPowerSupplyOK, jnxOperatingDescr=jnxOperatingDescr, jnxFruLastPowerOn=jnxFruLastPowerOn, jnxContentsRevision=jnxContentsRevision, jnxLEDOriginator=jnxLEDOriginator, jnxRedundancySwitchoverReason=jnxRedundancySwitchoverReason, jnxFruChassisDescr=jnxFruChassisDescr, jnxContentsContainerIndex=jnxContentsContainerIndex, jnxContainersView=jnxContainersView, jnxOperatingBuffer=jnxOperatingBuffer, jnxRedundancyKeepaliveElapsed=jnxRedundancyKeepaliveElapsed, jnxOperatingTemp=jnxOperatingTemp, jnxFruL1Index=jnxFruL1Index, jnxContainersEntry=jnxContainersEntry, jnxHardDiskMissing=jnxHardDiskMissing, jnxLEDEntry=jnxLEDEntry, jnxFruFailed=jnxFruFailed, jnxContainersType=jnxContainersType, jnxRedundancySwitchoverTime=jnxRedundancySwitchoverTime, JnxChassisId=JnxChassisId, jnxRedundancyChassisId=jnxRedundancyChassisId, jnxFruLastPowerOff=jnxFruLastPowerOff, jnxFanOK=jnxFanOK, jnxContentsPartNo=jnxContentsPartNo, jnxContentsSerialNo=jnxContentsSerialNo, jnxOperatingTable=jnxOperatingTable, jnxContentsL1Index=jnxContentsL1Index, jnxLEDL2Index=jnxLEDL2Index, jnxContainersCount=jnxContainersCount, jnxRedundancyChassisDescr=jnxRedundancyChassisDescr, jnxFruPsdAssignment=jnxFruPsdAssignment, jnxPowerSupplyFailure=jnxPowerSupplyFailure, jnxFruRemoval=jnxFruRemoval, jnxOperatingL1Index=jnxOperatingL1Index, jnxRedundancySwitchover=jnxRedundancySwitchover, jnxLEDState=jnxLEDState, jnxFruL3Index=jnxFruL3Index, jnxContentsTable=jnxContentsTable, jnxFilledL2Index=jnxFilledL2Index, jnxBootFromBackup=jnxBootFromBackup, jnxFruOffline=jnxFruOffline, jnxContentsInstalled=jnxContentsInstalled, jnxRedundancyKeepaliveLoss=jnxRedundancyKeepaliveLoss, jnxBoxDescr=jnxBoxDescr, jnxFruType=jnxFruType, jnxFruInsertion=jnxFruInsertion, jnxFruTable=jnxFruTable, jnxFilledDescr=jnxFilledDescr, jnxRedundancyL2Index=jnxRedundancyL2Index, jnxFilledEntry=jnxFilledEntry, jnxFruL2Index=jnxFruL2Index, jnxFilledContainerIndex=jnxFilledContainerIndex, jnxRedundancyState=jnxRedundancyState, jnxOperatingL2Index=jnxOperatingL2Index, jnxOperatingDRAMSize=jnxOperatingDRAMSize, jnxBoxClass=jnxBoxClass, jnxRedundancyEntry=jnxRedundancyEntry, jnxContentsDescr=jnxContentsDescr, jnxOperating5MinLoadAvg=jnxOperating5MinLoadAvg, jnxFilledL3Index=jnxFilledL3Index, jnxFilledTable=jnxFilledTable, jnxOperatingStateOrdered=jnxOperatingStateOrdered, jnxOperating1MinLoadAvg=jnxOperating1MinLoadAvg, jnxContainersWithin=jnxContainersWithin, PYSNMP_MODULE_ID=jnxBoxAnatomy, jnxOperatingCPU=jnxOperatingCPU, jnxOperatingState=jnxOperatingState, jnxFilledState=jnxFilledState, jnxRedundancyTable=jnxRedundancyTable, jnxFruOfflineReason=jnxFruOfflineReason, jnxContainersDescr=jnxContainersDescr, jnxOperatingHeap=jnxOperatingHeap, jnxFEBSwitchover=jnxFEBSwitchover, jnxContentsEntry=jnxContentsEntry, jnxFilledChassisId=jnxFilledChassisId, jnxRedundancyConfig=jnxRedundancyConfig, jnxFruChassisId=jnxFruChassisId, jnxOperatingChassisDescr=jnxOperatingChassisDescr, jnxFruEntry=jnxFruEntry, jnxFilledChassisDescr=jnxFilledChassisDescr, jnxOperatingLastRestart=jnxOperatingLastRestart, jnxBoxSerialNo=jnxBoxSerialNo, jnxOperatingUpTime=jnxOperatingUpTime, jnxRedundancySwitchoverCount=jnxRedundancySwitchoverCount, jnxOperatingL3Index=jnxOperatingL3Index, jnxContentsChassisCleiCode=jnxContentsChassisCleiCode, jnxOperating15MinLoadAvg=jnxOperating15MinLoadAvg, jnxTemperatureOK=jnxTemperatureOK, jnxFruTemp=jnxFruTemp, jnxLEDAssociateIndex=jnxLEDAssociateIndex, jnxContentsL2Index=jnxContentsL2Index, jnxLEDL1Index=jnxLEDL1Index, jnxFilledLastChange=jnxFilledLastChange, jnxFruState=jnxFruState, jnxRedundancyContentsIndex=jnxRedundancyContentsIndex, jnxOperatingRestartTime=jnxOperatingRestartTime, jnxContentsL3Index=jnxContentsL3Index, jnxFruOnline=jnxFruOnline, jnxHardDiskFailed=jnxHardDiskFailed, jnxFruOK=jnxFruOK, jnxRedundancyDescr=jnxRedundancyDescr, jnxFilledL1Index=jnxFilledL1Index, jnxOperatingISR=jnxOperatingISR, jnxRedundancyL3Index=jnxRedundancyL3Index, jnxRedundancyKeepaliveHeartbeat=jnxRedundancyKeepaliveHeartbeat, jnxContainersIndex=jnxContainersIndex, jnxFruName=jnxFruName, jnxLEDDescr=jnxLEDDescr, jnxContentsType=jnxContentsType, jnxLEDLastChange=jnxLEDLastChange, jnxRedundancyKeepaliveTimeout=jnxRedundancyKeepaliveTimeout, jnxLEDL3Index=jnxLEDL3Index, jnxRedundancyL1Index=jnxRedundancyL1Index, jnxOperatingEntry=jnxOperatingEntry, jnxLEDAssociateTable=jnxLEDAssociateTable, jnxContentsChassisId=jnxContentsChassisId, jnxFruSlot=jnxFruSlot, jnxBoxAnatomy=jnxBoxAnatomy, jnxFruPowerUpTime=jnxFruPowerUpTime, jnxFruPowerOn=jnxFruPowerOn, jnxBoxInstalled=jnxBoxInstalled, jnxLEDStateOrdered=jnxLEDStateOrdered, jnxBoxSystemDomainType=jnxBoxSystemDomainType, jnxOverTemperature=jnxOverTemperature, jnxFanFailure=jnxFanFailure, jnxOperatingContentsIndex=jnxOperatingContentsIndex, jnxBoxRevision=jnxBoxRevision, jnxOperatingMemory=jnxOperatingMemory, jnxContainersLevel=jnxContainersLevel, jnxLEDTable=jnxLEDTable)
