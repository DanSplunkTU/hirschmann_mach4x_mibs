#
# PySNMP MIB module LM-SENSORS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/netsnmp/LM-SENSORS-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 18:13:27 2022
# On host fv-az121-65 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, NotificationType, IpAddress, Gauge32, ObjectIdentity, iso, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, ModuleIdentity, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "NotificationType", "IpAddress", "Gauge32", "ObjectIdentity", "iso", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "ModuleIdentity", "Counter32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ucdExperimental, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdExperimental")
lmSensorsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2021, 13, 16, 1))
lmSensorsMIB.setRevisions(('2000-11-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lmSensorsMIB.setRevisionsDescriptions(('Derived from DISKIO-MIB ex UCD.',))
if mibBuilder.loadTexts: lmSensorsMIB.setLastUpdated('200011050000Z')
if mibBuilder.loadTexts: lmSensorsMIB.setOrganization('AdamsNames Ltd')
if mibBuilder.loadTexts: lmSensorsMIB.setContactInfo('Primary Contact: M J Oldfield\n         email:     m@mail.tc')
if mibBuilder.loadTexts: lmSensorsMIB.setDescription('This MIB module defines objects for lm_sensor derived data.')
lmSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 13, 16))
lmTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 16, 2), )
if mibBuilder.loadTexts: lmTempSensorsTable.setStatus('current')
if mibBuilder.loadTexts: lmTempSensorsTable.setDescription('Table of temperature sensors and their values.')
lmTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 16, 2, 1), ).setIndexNames((0, "LM-SENSORS-MIB", "lmTempSensorsIndex"))
if mibBuilder.loadTexts: lmTempSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: lmTempSensorsEntry.setDescription('An entry containing a device and its statistics.')
lmTempSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmTempSensorsIndex.setStatus('current')
if mibBuilder.loadTexts: lmTempSensorsIndex.setDescription('Reference index for each observed device.')
lmTempSensorsDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmTempSensorsDevice.setStatus('current')
if mibBuilder.loadTexts: lmTempSensorsDevice.setDescription('The name of the temperature sensor we are reading.')
lmTempSensorsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmTempSensorsValue.setStatus('current')
if mibBuilder.loadTexts: lmTempSensorsValue.setDescription('The temperature of this sensor in mC.')
lmFanSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 16, 3), )
if mibBuilder.loadTexts: lmFanSensorsTable.setStatus('current')
if mibBuilder.loadTexts: lmFanSensorsTable.setDescription('Table of fan sensors and their values.')
lmFanSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 16, 3, 1), ).setIndexNames((0, "LM-SENSORS-MIB", "lmFanSensorsIndex"))
if mibBuilder.loadTexts: lmFanSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: lmFanSensorsEntry.setDescription('An entry containing a device and its statistics.')
lmFanSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmFanSensorsIndex.setStatus('current')
if mibBuilder.loadTexts: lmFanSensorsIndex.setDescription('Reference index for each observed device.')
lmFanSensorsDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmFanSensorsDevice.setStatus('current')
if mibBuilder.loadTexts: lmFanSensorsDevice.setDescription('The name of the fan sensor we are reading.')
lmFanSensorsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmFanSensorsValue.setStatus('current')
if mibBuilder.loadTexts: lmFanSensorsValue.setDescription('The rotation speed of the fan in RPM.')
lmVoltSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 16, 4), )
if mibBuilder.loadTexts: lmVoltSensorsTable.setStatus('current')
if mibBuilder.loadTexts: lmVoltSensorsTable.setDescription('Table of voltage sensors and their values.')
lmVoltSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 16, 4, 1), ).setIndexNames((0, "LM-SENSORS-MIB", "lmVoltSensorsIndex"))
if mibBuilder.loadTexts: lmVoltSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: lmVoltSensorsEntry.setDescription('An entry containing a device and its statistics.')
lmVoltSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmVoltSensorsIndex.setStatus('current')
if mibBuilder.loadTexts: lmVoltSensorsIndex.setDescription('Reference index for each observed device.')
lmVoltSensorsDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmVoltSensorsDevice.setStatus('current')
if mibBuilder.loadTexts: lmVoltSensorsDevice.setDescription('The name of the device we are reading.')
lmVoltSensorsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmVoltSensorsValue.setStatus('current')
if mibBuilder.loadTexts: lmVoltSensorsValue.setDescription('The voltage in mV.')
lmMiscSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 13, 16, 5), )
if mibBuilder.loadTexts: lmMiscSensorsTable.setStatus('current')
if mibBuilder.loadTexts: lmMiscSensorsTable.setDescription('Table of miscellaneous sensor devices and their values.')
lmMiscSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 13, 16, 5, 1), ).setIndexNames((0, "LM-SENSORS-MIB", "lmMiscSensorsIndex"))
if mibBuilder.loadTexts: lmMiscSensorsEntry.setStatus('current')
if mibBuilder.loadTexts: lmMiscSensorsEntry.setDescription('An entry containing a device and its statistics.')
lmMiscSensorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmMiscSensorsIndex.setStatus('current')
if mibBuilder.loadTexts: lmMiscSensorsIndex.setDescription('Reference index for each observed device.')
lmMiscSensorsDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmMiscSensorsDevice.setStatus('current')
if mibBuilder.loadTexts: lmMiscSensorsDevice.setDescription('The name of the device we are reading.')
lmMiscSensorsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 13, 16, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmMiscSensorsValue.setStatus('current')
if mibBuilder.loadTexts: lmMiscSensorsValue.setDescription('The value of this sensor.')
mibBuilder.exportSymbols("LM-SENSORS-MIB", lmTempSensorsEntry=lmTempSensorsEntry, lmVoltSensorsDevice=lmVoltSensorsDevice, lmFanSensorsTable=lmFanSensorsTable, lmTempSensorsDevice=lmTempSensorsDevice, lmSensors=lmSensors, lmMiscSensorsValue=lmMiscSensorsValue, lmMiscSensorsIndex=lmMiscSensorsIndex, lmMiscSensorsTable=lmMiscSensorsTable, lmVoltSensorsTable=lmVoltSensorsTable, lmFanSensorsIndex=lmFanSensorsIndex, lmTempSensorsValue=lmTempSensorsValue, lmFanSensorsEntry=lmFanSensorsEntry, lmMiscSensorsEntry=lmMiscSensorsEntry, lmTempSensorsTable=lmTempSensorsTable, lmVoltSensorsIndex=lmVoltSensorsIndex, lmTempSensorsIndex=lmTempSensorsIndex, lmFanSensorsDevice=lmFanSensorsDevice, PYSNMP_MODULE_ID=lmSensorsMIB, lmVoltSensorsEntry=lmVoltSensorsEntry, lmFanSensorsValue=lmFanSensorsValue, lmVoltSensorsValue=lmVoltSensorsValue, lmSensorsMIB=lmSensorsMIB, lmMiscSensorsDevice=lmMiscSensorsDevice)
