#
# PySNMP MIB module ALCATEL-IND1-GVRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-GVRP-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:44:36 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1Gvrp, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Gvrp")
VlanBitmap, = mibBuilder.importSymbols("ALCATEL-IND1-VLAN-STP-MIB", "VlanBitmap")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, iso, IpAddress, ModuleIdentity, MibIdentifier, Counter64, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "iso", "IpAddress", "ModuleIdentity", "MibIdentifier", "Counter64", "NotificationType", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
alcatelIND1GVRPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1))
alcatelIND1GVRPMIB.setRevisions(('2010-05-13 00:00', '2007-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1GVRPMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The GVRP MIB defines a set of GVRP related management objects for VLANs\n                and ports that support GARP VLAN registration protocol (GVRP). GVRP as a\n                protocol provides mechanisms to dynamically learn and further propagate VLAN\n                membership information across a bridged network, as recommended in standards\n                IEEE Draft Std. P802.1Q-REV/D5.0 and 802.1D 2004 Editions.\n\n                This GVRP MIB extends already existing AOS-REUSE IETF_Q_BRIDGE MIB which is based on\n                RFC 2674 (Bridges with Traffic Classes, Multicast Filtering and Virtual LAN\n                Extensions), to accomodate the proprietary behavior of the device and for\n                defining objects as recommended by standards.\n\n                This MIB comprises proprietary managed objects as well the objects required\n                for conforming to the standards. However, the set of objects defined in this MIB,\n                do not duplicate, nor conflict with any MIB object definitions defined in the\n                IETF_Q_MIB.',))
if mibBuilder.loadTexts: alcatelIND1GVRPMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1GVRPMIB.setOrganization('Alcatel - Architects Of An Internet World')
if mibBuilder.loadTexts: alcatelIND1GVRPMIB.setContactInfo('Please consult with Customer Service to insure the most appropriate\n             version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1GVRPMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 GVRP for the distribution of VLAN configuration information.\n\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n               Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1GVRPMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 0))
if mibBuilder.loadTexts: alcatelIND1GVRPMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBNotifications.setDescription('Branch For GVRP MIB Subsystem Notifications.')
alcatelIND1GVRPMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1))
if mibBuilder.loadTexts: alcatelIND1GVRPMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBObjects.setDescription('Branch For GVRP\n            Subsystem Managed Objects.')
alcatelIND1GVRPMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2))
if mibBuilder.loadTexts: alcatelIND1GVRPMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBConformance.setDescription('Branch for GVRP Module MIB Subsystem Conformance Information.')
alcatelIND1GVRPMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1GVRPMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBGroups.setDescription('Branch for GVRP Module MIB Subsystem Units of Conformance.')
alcatelIND1GVRPMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1GVRPMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBCompliances.setDescription('Branch for GVRP Module MIB Subsystem Compliance Statements.')
alaGvrpGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpGlobalClearStats.setStatus('current')
if mibBuilder.loadTexts: alaGvrpGlobalClearStats.setDescription('Defines the global clear statistics control for GVRP.\n                        The value reset (1) indicates that GVRP should clear all statistic\n                        counters related to all ports in the system. By default, this object\n                        contains a zero value.')
alaGvrpTransparentSwitching = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpTransparentSwitching.setStatus('current')
if mibBuilder.loadTexts: alaGvrpTransparentSwitching.setDescription('Defines the behavior when GVRP is globally disabled on a device.\n                        The value enabled (1) indicates that device behaves like a GVRP\n                        transparent device and the GVRP frames will be flooded transparently.\n                        Value disabled (2) disabled indicates that the device will not flood\n                        GVRP frames and will simply discard the received GVRP frames.')
alaGvrpMaxVlanLimit = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4094)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpMaxVlanLimit.setStatus('current')
if mibBuilder.loadTexts: alaGvrpMaxVlanLimit.setDescription('Defines the maximum number of dynamic VLANs that can be created on the system by GVRP.\n                        If the number of VLANs created by GVRP reaches this limit, the system will gradually\n                        prevent GVRP from creating additional VLANs.')
gvrpPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4))
alaGvrpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaGvrpPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigTable.setDescription('A table containing GVRP port configuration information.')
alaGvrpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigIfIndex"))
if mibBuilder.loadTexts: alaGvrpPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigEntry.setDescription('A GVRP port configuration entry.')
alaGvrpPortConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaGvrpPortConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigIfIndex.setDescription('The ifindex of the port on which GVRP is running')
alaGvrpPortConfigRegistrarMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fixed", 2), ("forbidden", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrarMode.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrarMode.setDescription('Defines the mode of operation of all the registrar state machines associated to the port.\n                normal - registration as well as de-registration of VLANs are allowed.\n                fixed  - A VLAN that was previously mapped onto such a port either dynamically or\n                statically cannot be de-registered through GVRP.  When the port registration mode is set to fixed,\n                VLAN(s) can only be mapped onto such port statically.\n                forbidden - dynamic VLAN registration or de-registration are not allowed on the port.\n\n                NOTE: The registrar state machines for the default VLAN will operate in Fixed Registration Mode\n                for all the ports on the switch.')
alaGvrpPortConfigApplicantMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("participant", 1), ("nonparticipant", 2), ("active", 3))).clone('participant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigApplicantMode.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigApplicantMode.setDescription('Defines the mode of operation of all the applicant state machines associated to the port.\n                participant - The state machines participates normally  in GVRP protocol exchanges.\n                non_participant - The state machines does not send any GVRP PDU(s).\n                active - The state machines send GVRP frames even on ports that are in blocking state on\n                the active spanning tree instance.')
alaGvrpPortConfigRestrictedRegistrationBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 4), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigRestrictedRegistrationBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRestrictedRegistrationBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted registration control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be created in\n                the system based on GVRP processing or only mapped to ports in case they have already been\n                statically created in the system. The bitmap will only affect the GVRP processing if the\n                Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set\n                normal registration (1). Each bit defines:\n                0= false, dynamic VLAN registration is not restricted\n                1= true, VLAN cannot be created in the system by GVRP processing.\n                However, if this VLAN already exists in the system as a static VLAN,\n                then it can be mapped to the receiving port')
alaGvrpPortConfigAllowRegistrationBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 5), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigAllowRegistrationBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigAllowRegistrationBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted registration control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be created in\n                the system based on GVRP processing or only mapped to ports in case they have already been\n                statically created in the system. The bitmap will only affect the GVRP processing if the\n                Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set\n                normal registration (1). Each bit defines:\n                0= false, VLAN cannot be created in the system by GVRP processing.\n                1= true, dynamic VLAN registration is allowed\n                However, if this VLAN already exists in the system as a static VLAN,\n                then it can be mapped to the receiving port')
alaGvrpPortConfigRegistrationBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 6), VlanBitmap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted registration control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be created in\n                the system based on GVRP processing or only mapped to ports in case they have already been\n                statically created in the system. The bitmap will only affect the GVRP processing if the\n                Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set\n                normal registration (1). Each bit defines:\n                0= false, dynamic VLAN registration is not restricted\n                1= true, VLAN cannot be created in the system by GVRP processing.\n                However, if this VLAN already exists in the system as a static VLAN,\n                then it can be mapped to the receiving port')
alaGvrpPortConfigRestrictedApplicantBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 7), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigRestrictedApplicantBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRestrictedApplicantBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted applicant control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be propagated in\n                the system based on GVRP processing. The bitmap will only affect the GVRP processing if the\n                Applicant Administrative Control alaGvrpPortConfigApplicantMode value on the port is set\n                participant(1) or active (3). Each bit defines:\n                0= false, VLAN propagation is not restricted\n                1= true, VLAN cannot be propagated in the system by GVRP processing.')
alaGvrpPortConfigAllowApplicantBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 8), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigAllowApplicantBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigAllowApplicantBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted applicant control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be propagated in\n                the system based on GVRP processing. The bitmap will only affect the GVRP processing if the\n                Applicant Administrative Control alaGvrpPortConfigApplicantMode value on the port is set\n                participant(1) or active (3). Each bit defines:\n                0= false, VLAN cannot be propagated in the system by GVRP processing\n                1= true, VLAN propagation is allowed.')
alaGvrpPortConfigApplicantBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 9), VlanBitmap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortConfigApplicantBitmap.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigApplicantBitmap.setDescription('An octet string of 4096 bits that defines the status of the restricted applicant control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether VLAN(s) can be propagated in\n                the system based on GVRP processing. The bitmap will only affect the GVRP processing if the\n                Applicant Administrative Control alaGvrpPortConfigApplicantMode value on the port is set\n                participant(1) or active (3). Each bit defines:\n                0= false, VLAN propagation is not restricted\n                1= true, VLAN cannot be propagated in the system by GVRP processing.')
alaGvrpPortConfigRegistrationToStaticVlanLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 10), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlanLearn.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlanLearn.setDescription('An octet string of 4096 bits that defines the status of the registration to static VLAN control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether ports can be mapped to statically\n                configured VLAN(s) based on GVRP processing. The bitmap will only affect the GVRP processing if\n                the Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set to\n                normal registration (1). Each bit defines:\n                0= restrict, port is not allowed to become member of VLAN.\n                1= learn, port is allowed to become member of corresponding VLAN')
alaGvrpPortConfigRegistrationToStaticVlanRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 11), VlanBitmap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlanRestrict.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlanRestrict.setDescription('An octet string of 4096 bits that defines the status of the registration to static VLAN control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether ports can be mapped to statically\n                configured VLAN(s) based on GVRP processing. The bitmap will only affect the GVRP processing if\n                the Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set to\n                normal registration (1). Each bit defines:\n                0= learn, port is allowed to become member of corresponding VLAN\n                1= restrict, port is not allowed to become member of VLAN.')
alaGvrpPortConfigRegistrationToStaticVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 12), VlanBitmap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlan.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigRegistrationToStaticVlan.setDescription('An octet string of 4096 bits that defines the status of the registration to static VLAN control\n                for all VLAN(s) in the range from 1 to 4096. It defines whether ports can be mapped to statically\n                configured VLAN(s) based on GVRP processing. The bitmap will only affect the GVRP processing if\n                the Registrar Administrative Control alaGvrpPortConfigRegistrarMode value on the port is set to\n                normal registration (1). Each bit defines:\n                0= learn, port is allowed to become member of corresponding VLAN\n                1= restrict, port is not allowed to become member of VLAN.')
alaGvrpPortConfigJoinTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(600)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigJoinTimer.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigJoinTimer.setDescription('Maximum period of time that a GVRP instance waits before making declarations for VLANs.')
alaGvrpPortConfigLeaveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 2147483647)).clone(1800)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigLeaveTimer.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigLeaveTimer.setDescription('Period of time that a registrar state machine of a GVRP instance waits, after receiving\n                a leave message on a port for a particular VLAN, to remove the registration of that VLAN\n                on the port.\n                The value for the Leave Timer must be greater than three times the value for the Join\n                timer, i.e. Leave >= Join*3.')
alaGvrpPortConfigLeaveAllTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 2147483647)).clone(30000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigLeaveAllTimer.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigLeaveAllTimer.setDescription('Interval at which the Leave All state machine of a GVRP instance generates Leave All\n                messages. A Leave All message instructs GVRP to modify the state of all VLANs registered\n                on a port to Leaving.\n                The value for the LeaveAll Timer must be greater than the value for the Leave\n                timer, i.e. LeaveAll >= Leave.')
alaGvrpPortConfigProviderBpduMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortConfigProviderBpduMac.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortConfigProviderBpduMac.setDescription('Describes the treatment of gvrp frames ingressing on a gvrp enabled Vlan stacking network\n                ports.If disabled provider gvrp frames with provider group address are processed on the\n                port and if enabled provider gvrp frames with customer group address are processed on\n                gvrp enabled vlan stacking network port.')
gvrpPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5))
alaGvrpPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaGvrpPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsTable.setDescription('A table containing GVRP port statistics information.')
alaGvrpPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsIfIndex"))
if mibBuilder.loadTexts: alaGvrpPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsEntry.setDescription('A GVRP port statistics entry.')
alaGvrpPortStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaGvrpPortStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsIfIndex.setDescription('The ifindex of the port on which GVRP is running')
alaGvrpPortStatsJoinEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsJoinEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsJoinEmptyReceived.setDescription('The number of Join Empty messages received.')
alaGvrpPortStatsJoinInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsJoinInReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsJoinInReceived.setDescription('The number of Join In messages received.')
alaGvrpPortStatsEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsEmptyReceived.setDescription('The number of Empty messages received.')
alaGvrpPortStatsLeaveInReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveInReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveInReceived.setDescription('The number of Leave In messages received.')
alaGvrpPortStatsLeaveEmptyReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveEmptyReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveEmptyReceived.setDescription('The number of Leave Empty messages received.')
alaGvrpPortStatsLeaveAllReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveAllReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveAllReceived.setDescription('The number of Leave all messages received.')
alaGvrpPortStatsJoinEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsJoinEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsJoinEmptyTransmitted.setDescription('The number of Join Empty messages transmitted.')
alaGvrpPortStatsJoinInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsJoinInTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsJoinInTransmitted.setDescription('The number of Join In messages transmitted.')
alaGvrpPortStatsEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsEmptyTransmitted.setDescription('The number of Empty messages transmitted.')
alaGvrpPortStatsLeaveInTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveInTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveInTransmitted.setDescription('The number of Leave In messages transmitted.')
alaGvrpPortStatsLeaveEmptyTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveEmptyTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveEmptyTransmitted.setDescription('The number of Leave Empty messages transmitted.')
alaGvrpPortStatsLeaveAllTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveAllTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsLeaveAllTransmitted.setDescription('The number of Leaveall messages transmitted.')
alaGvrpPortStatsTotalPDUReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsTotalPDUReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsTotalPDUReceived.setDescription('The total number of GVRP PDUs received.')
alaGvrpPortStatsTotalPDUTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsTotalPDUTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsTotalPDUTransmitted.setDescription('The total number of GVRP PDUs transmitted.')
alaGvrpPortStatsTotalMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsTotalMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsTotalMsgsReceived.setDescription('The total number of GVRP messages received.')
alaGvrpPortStatsTotalMsgsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsTotalMsgsTransmitted.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsTotalMsgsTransmitted.setDescription('The total number of GVRP messages transmitted.')
alaGvrpPortStatsInvalidMsgsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaGvrpPortStatsInvalidMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsInvalidMsgsReceived.setDescription('The number of Invalid messages received.')
alaGvrpPortStatsClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 1, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaGvrpPortStatsClearStats.setStatus('current')
if mibBuilder.loadTexts: alaGvrpPortStatsClearStats.setDescription('Reset all statistics parameters corresponding to this port.\n                         By default, this objects contains a zero value.')
gvrpVlanLimitReachedEvent = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 0, 1)).setObjects(("ALCATEL-IND1-GVRP-MIB", "alaGvrpMaxVlanLimit"))
if mibBuilder.loadTexts: gvrpVlanLimitReachedEvent.setStatus('current')
if mibBuilder.loadTexts: gvrpVlanLimitReachedEvent.setDescription('The number of vlans learnt dynamically by GVRP has\n                reached a configured limit. Notify the management\n                entity with number of vlans learnt dynamically by\n                GVRP and the configured GVRP vlan limit.')
alcatelIND1GVRPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-GVRP-MIB", "gvrpPortBaseGroup"), ("ALCATEL-IND1-GVRP-MIB", "gvrpPortConfigGroup"), ("ALCATEL-IND1-GVRP-MIB", "gvrpPortStatsGroup"), ("ALCATEL-IND1-GVRP-MIB", "gvrpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1GVRPMIBCompliance = alcatelIND1GVRPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1GVRPMIBCompliance.setDescription('Compliance statement for GVRP.')
gvrpPortBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-GVRP-MIB", "alaGvrpGlobalClearStats"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpTransparentSwitching"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpMaxVlanLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gvrpPortBaseGroup = gvrpPortBaseGroup.setStatus('current')
if mibBuilder.loadTexts: gvrpPortBaseGroup.setDescription('Collection of objects for management of GVRP Base Group.')
gvrpPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRegistrarMode"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigApplicantMode"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRestrictedRegistrationBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigAllowRegistrationBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRegistrationBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRestrictedApplicantBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigAllowApplicantBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigApplicantBitmap"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRegistrationToStaticVlanLearn"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRegistrationToStaticVlanRestrict"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigRegistrationToStaticVlan"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigJoinTimer"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigLeaveTimer"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigLeaveAllTimer"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortConfigProviderBpduMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gvrpPortConfigGroup = gvrpPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: gvrpPortConfigGroup.setDescription('Collection of objects for management of GVRP Port Configuration Table.')
gvrpPortStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsJoinEmptyReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsJoinInReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsEmptyReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveInReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveEmptyReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveAllReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsJoinEmptyTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsJoinInTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsEmptyTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveInTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveEmptyTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsLeaveAllTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsTotalPDUReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsTotalPDUTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsTotalMsgsReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsTotalMsgsTransmitted"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsInvalidMsgsReceived"), ("ALCATEL-IND1-GVRP-MIB", "alaGvrpPortStatsClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gvrpPortStatsGroup = gvrpPortStatsGroup.setStatus('current')
if mibBuilder.loadTexts: gvrpPortStatsGroup.setDescription('Collection of objects for management of GVRP Statistics Table.')
gvrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 36, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-GVRP-MIB", "gvrpVlanLimitReachedEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gvrpNotificationGroup = gvrpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: gvrpNotificationGroup.setDescription('Collection of notifications for GVRP.')
mibBuilder.exportSymbols("ALCATEL-IND1-GVRP-MIB", alaGvrpPortStatsTotalMsgsReceived=alaGvrpPortStatsTotalMsgsReceived, alaGvrpPortStatsInvalidMsgsReceived=alaGvrpPortStatsInvalidMsgsReceived, gvrpPortStatsGroup=gvrpPortStatsGroup, alaGvrpPortConfigLeaveTimer=alaGvrpPortConfigLeaveTimer, alaGvrpPortConfigAllowRegistrationBitmap=alaGvrpPortConfigAllowRegistrationBitmap, alaGvrpPortStatsLeaveAllTransmitted=alaGvrpPortStatsLeaveAllTransmitted, alaGvrpPortStatsEmptyTransmitted=alaGvrpPortStatsEmptyTransmitted, alcatelIND1GVRPMIBGroups=alcatelIND1GVRPMIBGroups, alcatelIND1GVRPMIBObjects=alcatelIND1GVRPMIBObjects, alaGvrpPortStatsLeaveInTransmitted=alaGvrpPortStatsLeaveInTransmitted, gvrpPortConfigGroup=gvrpPortConfigGroup, gvrpVlanLimitReachedEvent=gvrpVlanLimitReachedEvent, alaGvrpPortConfigEntry=alaGvrpPortConfigEntry, alcatelIND1GVRPMIBNotifications=alcatelIND1GVRPMIBNotifications, alaGvrpPortConfigIfIndex=alaGvrpPortConfigIfIndex, alaGvrpPortStatsJoinInTransmitted=alaGvrpPortStatsJoinInTransmitted, alaGvrpPortConfigRestrictedRegistrationBitmap=alaGvrpPortConfigRestrictedRegistrationBitmap, alaGvrpPortConfigAllowApplicantBitmap=alaGvrpPortConfigAllowApplicantBitmap, alcatelIND1GVRPMIBConformance=alcatelIND1GVRPMIBConformance, alaGvrpPortConfigRegistrationToStaticVlanRestrict=alaGvrpPortConfigRegistrationToStaticVlanRestrict, alaGvrpPortStatsLeaveEmptyReceived=alaGvrpPortStatsLeaveEmptyReceived, alaGvrpPortConfigApplicantMode=alaGvrpPortConfigApplicantMode, alaGvrpPortConfigJoinTimer=alaGvrpPortConfigJoinTimer, alaGvrpPortConfigLeaveAllTimer=alaGvrpPortConfigLeaveAllTimer, alaGvrpPortStatsTable=alaGvrpPortStatsTable, alaGvrpPortStatsLeaveEmptyTransmitted=alaGvrpPortStatsLeaveEmptyTransmitted, alaGvrpPortConfigApplicantBitmap=alaGvrpPortConfigApplicantBitmap, alaGvrpPortStatsLeaveInReceived=alaGvrpPortStatsLeaveInReceived, alaGvrpPortConfigRegistrationToStaticVlan=alaGvrpPortConfigRegistrationToStaticVlan, gvrpPortConfig=gvrpPortConfig, alaGvrpPortConfigProviderBpduMac=alaGvrpPortConfigProviderBpduMac, alcatelIND1GVRPMIBCompliance=alcatelIND1GVRPMIBCompliance, alaGvrpPortConfigRegistrationToStaticVlanLearn=alaGvrpPortConfigRegistrationToStaticVlanLearn, alaGvrpPortStatsJoinEmptyTransmitted=alaGvrpPortStatsJoinEmptyTransmitted, alaGvrpPortStatsClearStats=alaGvrpPortStatsClearStats, alaGvrpPortStatsTotalMsgsTransmitted=alaGvrpPortStatsTotalMsgsTransmitted, alaGvrpGlobalClearStats=alaGvrpGlobalClearStats, gvrpPortBaseGroup=gvrpPortBaseGroup, alaGvrpPortConfigTable=alaGvrpPortConfigTable, alaGvrpPortStatsEmptyReceived=alaGvrpPortStatsEmptyReceived, alaGvrpPortStatsEntry=alaGvrpPortStatsEntry, gvrpNotificationGroup=gvrpNotificationGroup, alaGvrpPortConfigRestrictedApplicantBitmap=alaGvrpPortConfigRestrictedApplicantBitmap, alcatelIND1GVRPMIBCompliances=alcatelIND1GVRPMIBCompliances, alcatelIND1GVRPMIB=alcatelIND1GVRPMIB, alaGvrpTransparentSwitching=alaGvrpTransparentSwitching, alaGvrpPortStatsJoinEmptyReceived=alaGvrpPortStatsJoinEmptyReceived, alaGvrpPortStatsJoinInReceived=alaGvrpPortStatsJoinInReceived, alaGvrpPortStatsTotalPDUTransmitted=alaGvrpPortStatsTotalPDUTransmitted, alaGvrpPortStatsLeaveAllReceived=alaGvrpPortStatsLeaveAllReceived, alaGvrpPortStatsIfIndex=alaGvrpPortStatsIfIndex, PYSNMP_MODULE_ID=alcatelIND1GVRPMIB, alaGvrpPortConfigRegistrationBitmap=alaGvrpPortConfigRegistrationBitmap, alaGvrpPortStatsTotalPDUReceived=alaGvrpPortStatsTotalPDUReceived, gvrpPortStats=gvrpPortStats, alaGvrpMaxVlanLimit=alaGvrpMaxVlanLimit, alaGvrpPortConfigRegistrarMode=alaGvrpPortConfigRegistrarMode)
