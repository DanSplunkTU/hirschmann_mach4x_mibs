#
# PySNMP MIB module RSVP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RSVP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 16:07:50 2022
# On host fv-az36-988 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
MessageSize, QosService, intSrvFlowStatus, Protocol, BitRate, SessionType, Port, BurstSize, SessionNumber = mibBuilder.importSymbols("INTEGRATED-SERVICES-MIB", "MessageSize", "QosService", "intSrvFlowStatus", "Protocol", "BitRate", "SessionType", "Port", "BurstSize", "SessionNumber")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Counter64, Unsigned32, mib_2, ModuleIdentity, NotificationType, TimeTicks, Counter32, IpAddress, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Unsigned32", "mib-2", "ModuleIdentity", "NotificationType", "TimeTicks", "Counter32", "IpAddress", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Gauge32")
TestAndIncr, TextualConvention, TruthValue, TimeStamp, RowStatus, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TextualConvention", "TruthValue", "TimeStamp", "RowStatus", "TimeInterval", "DisplayString")
rsvp = ModuleIdentity((1, 3, 6, 1, 2, 1, 51))
if mibBuilder.loadTexts: rsvp.setLastUpdated('9808251820Z')
if mibBuilder.loadTexts: rsvp.setOrganization('IETF RSVP Working Group')
if mibBuilder.loadTexts: rsvp.setContactInfo('\t   Fred\tBaker\n\t   Postal: Cisco Systems\n\t\t   519 Lado Drive\n\t\t   Santa Barbara, California 93111\n\t   Tel:\t   +1 805 681 0115\n\t   E-Mail: fred@cisco.com\n\n\t\t   John\tKrawczyk\n\t   Postal: ArrowPoint Communications\n\t\t   235 Littleton Road\n\t\t   Westford, Massachusetts 01886\n\t   Tel:\t   +1 508 692 5875\n\t   E-Mail: jjk@tiac.net\n\n\t\t   Arun\tSastry\n\t   Postal: Cisco Systems\n\t\t   3 The Square\n\t\t   Stockley Park, Uxbridge\n\t\t   Middlesex, UB11 1BN\n\t\t   UK\n\t   Tel:\t   +44 181 756 8693\n\t   E-Mail: arun@cisco.com')
if mibBuilder.loadTexts: rsvp.setDescription('The MIB module to describe the RSVP Protocol')
rsvpObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 1))
rsvpGenObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 2))
rsvpNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 3))
rsvpConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 4))
class RsvpEncapsulation(TextualConvention, Integer32):
    description = 'This indicates the encapsulation that an  RSVP\n\t   Neighbor is perceived to be using.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ip", 1), ("udp", 2), ("both", 3))

class RefreshInterval(TextualConvention, Integer32):
    description = 'The\tnumber of milliseconds that  are  expected\n\t   to\telapse\t between   refreshes  of  path\tor\n\t   reservation\t state.\t   Unrefreshed\t Path\tor\n\t   reservation\tstate  is  removed  after  a small\n\t   multiple of this period.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

rsvpSessionNewIndex = MibScalar((1, 3, 6, 1, 2, 1, 51, 2, 5), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsvpSessionNewIndex.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionNewIndex.setDescription("This  object  is  used  to\tassign\tvalues\tto\n\t   rsvpSessionNumber   as  described  in  'Textual\n\t   Conventions for SNMPv2'.  The  network  manager\n\t   reads  the  object,\tand  then writes the value\n\t   back\tin the SET that\tcreates\ta new instance\tof\n\t   rsvpSessionEntry.   If  the\tSET fails with the\n\t   code\t'inconsistentValue', then the process must\n\t   be  repeated;  If  the  SET\tsucceeds, then the\n\t   object is incremented, and the new instance\tis\n\t   created according to\tthe manager's directions.")
rsvpSessionTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 1), )
if mibBuilder.loadTexts: rsvpSessionTable.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionTable.setDescription('A table  of\t all  sessions\tseen  by  a  given\n\t   system.')
rsvpSessionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 1, 1), ).setIndexNames((0, "RSVP-MIB", "rsvpSessionNumber"))
if mibBuilder.loadTexts: rsvpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionEntry.setDescription('A single session seen by a given system.')
rsvpSessionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 1), SessionNumber())
if mibBuilder.loadTexts: rsvpSessionNumber.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionNumber.setDescription('The\tnumber of this session.\t This is for  SNMP\n\t   Indexing  purposes  only and\thas no relation\tto\n\t   any protocol\tvalue.')
rsvpSessionType = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionType.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionType.setDescription('The\ttype of\tsession\t(IP4, IP6, IP6\twith  flow\n\t   information,\tetc).')
rsvpSessionDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionDestAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionDestAddr.setDescription("The\tdestination address used by all\tsenders\tin\n\t   this\t session.   This object\tmay not\tbe changed\n\t   when\tthe  value  of\tthe  RowStatus\tobject\tis\n\t   'active'.")
rsvpSessionDestAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionDestAddrLength.setDescription("The\tCIDR prefix length of the session address,\n\t   which   is\t32  for\t IP4  host  and\t multicast\n\t   addresses, and 128  for  IP6\t addresses.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSessionProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 5), Protocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionProtocol.setDescription("The\tIP Protocol used by  this  session.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSessionPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 6), Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionPort.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionPort.setDescription("The\t UDP  or  TCP  port  number  used   as\t a\n\t   destination\t port  for  all\t senders  in  this\n\t   session.  If\tthe IP protocol\tin use,\t specified\n\t   by  rsvpSenderProtocol, is 50 (ESP) or 51 (AH),\n\t   this\t represents  a\tvirtual\t destination  port\n\t   number.   A value of\tzero indicates that the\tIP\n\t   protocol in use  does  not  have  ports.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSessionSenders = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionSenders.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionSenders.setDescription('The\tnumber of distinct senders currently known\n\t   to be part of this session.')
rsvpSessionReceivers = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionReceivers.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionReceivers.setDescription('The\tnumber of reservations being requested\tof\n\t   this\tsystem for this\tsession.')
rsvpSessionRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSessionRequests.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionRequests.setDescription('The\tnumber of reservation requests this system\n\t   is sending upstream for this\tsession.')
rsvpBadPackets = MibScalar((1, 3, 6, 1, 2, 1, 51, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpBadPackets.setStatus('current')
if mibBuilder.loadTexts: rsvpBadPackets.setDescription('This object\tkeeps a\tcount of the number of bad\n\t   RSVP\tpackets\treceived.')
rsvpSenderNewIndex = MibScalar((1, 3, 6, 1, 2, 1, 51, 2, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsvpSenderNewIndex.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderNewIndex.setDescription("This  object  is  used  to\tassign\tvalues\tto\n\t   rsvpSenderNumber   as   described  in  'Textual\n\t   Conventions for SNMPv2'.  The  network  manager\n\t   reads  the  object,\tand  then writes the value\n\t   back\tin the SET that\tcreates\ta new instance\tof\n\t   rsvpSenderEntry.   If  the  SET  fails with the\n\t   code\t'inconsistentValue', then the process must\n\t   be  repeated;  If  the  SET\tsucceeds, then the\n\t   object is incremented, and the new instance\tis\n\t   created according to\tthe manager's directions.")
rsvpSenderTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 2), )
if mibBuilder.loadTexts: rsvpSenderTable.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTable.setDescription('Information\tdescribing the\tstate  information\n\t   displayed by\tsenders\tin PATH\tmessages.')
rsvpSenderEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 2, 1), ).setIndexNames((0, "RSVP-MIB", "rsvpSessionNumber"), (0, "RSVP-MIB", "rsvpSenderNumber"))
if mibBuilder.loadTexts: rsvpSenderEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderEntry.setDescription("Information\tdescribing the\tstate  information\n\t   displayed by\ta single sender's PATH message.")
rsvpSenderNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 1), SessionNumber())
if mibBuilder.loadTexts: rsvpSenderNumber.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderNumber.setDescription('The\tnumber of this sender.\tThis is\t for  SNMP\n\t   Indexing  purposes  only and\thas no relation\tto\n\t   any protocol\tvalue.')
rsvpSenderType = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 2), SessionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderType.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderType.setDescription('The\ttype of\tsession\t(IP4, IP6, IP6\twith  flow\n\t   information,\tetc).')
rsvpSenderDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderDestAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderDestAddr.setDescription("The\tdestination address used by all\tsenders\tin\n\t   this\t session.   This object\tmay not\tbe changed\n\t   when\tthe  value  of\tthe  RowStatus\tobject\tis\n\t   'active'.")
rsvpSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAddr.setDescription("The\tsource address used by this sender in this\n\t   session.   This  object may not be changed when\n\t   the value of\tthe RowStatus object is\t'active'.")
rsvpSenderDestAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderDestAddrLength.setDescription("The\tlength of the destination address in bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSenderAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAddrLength.setDescription("The\tlength of the sender's\taddress\t in  bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSenderProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 7), Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderProtocol.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderProtocol.setDescription("The\tIP Protocol used by  this  session.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSenderDestPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 8), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderDestPort.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderDestPort.setDescription("The\t UDP  or  TCP  port  number  used   as\t a\n\t   destination\t port  for  all\t senders  in  this\n\t   session.  If\tthe IP protocol\tin use,\t specified\n\t   by  rsvpSenderProtocol, is 50 (ESP) or 51 (AH),\n\t   this\t represents  a\tvirtual\t destination  port\n\t   number.   A value of\tzero indicates that the\tIP\n\t   protocol in use  does  not  have  ports.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpSenderPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 9), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderPort.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderPort.setDescription("The\tUDP or TCP port\tnumber used  as\t a  source\n\t   port\t for  this sender in this session.  If the\n\t   IP\t protocol    in\t   use,\t   specified\tby\n\t   rsvpSenderProtocol is 50 (ESP) or 51\t(AH), this\n\t   represents a\tgeneralized port identifier (GPI).\n\t   A  value of zero indicates that the IP protocol\n\t   in use does not have\tports.\t This  object  may\n\t   not\tbe changed when\tthe value of the RowStatus\n\t   object is 'active'.")
rsvpSenderFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSenderFlowId.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderFlowId.setDescription('The\tflow ID\tthat  this  sender  is\tusing,\tif\n\t   this\t is  an\tIPv6 session.')
rsvpSenderHopAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderHopAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderHopAddr.setDescription('The\taddress\tused  by  the  previous\t RSVP  hop\n\t   (which may be the original sender).')
rsvpSenderHopLih = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderHopLih.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderHopLih.setDescription('The\t Logical  Interface  Handle  used  by  the\n\t   previous  RSVP  hop\t(which may be the original\n\t   sender).')
rsvpSenderInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 13), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderInterface.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderInterface.setDescription('The\tifIndex\tvalue of the  interface\t on  which\n\t   this\tPATH message was most recently received.')
rsvpSenderTSpecRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 14), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderTSpecRate.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTSpecRate.setDescription("The\tAverage\tBit  Rate  of  the  sender's  data\n\t   stream.    Within  a\t transmission  burst,  the\n\t   arrival   rate    may    be\t  as\tfast\tas\n\t   rsvpSenderTSpecPeakRate  (if\t supported  by the\n\t   service model); however, averaged across two\tor\n\t   more\t burst\tintervals,  the\t rate  should  not\n\t   exceed rsvpSenderTSpecRate.\n\n\t   Note\tthat this is a prediction, often based\ton\n\t   the\tgeneral\t capability  of\ta type of codec\tor\n\t   particular encoding;\tthe measured average  rate\n\t   may be significantly\tlower.")
rsvpSenderTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 15), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTSpecPeakRate.setDescription("The\tPeak Bit Rate of the sender's data stream.\n\t   Traffic  arrival is not expected to exceed this\n\t   rate\tat any time, apart  from  the  effects\tof\n\t   jitter in the network.  If not specified in the\n\t   TSpec, this returns zero or noSuchValue.")
rsvpSenderTSpecBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 16), BurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTSpecBurst.setDescription('The\tsize of\tthe largest  burst  expected  from\n\t   the sender at a time.')
rsvpSenderTSpecMinTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 17), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderTSpecMinTU.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTSpecMinTU.setDescription('The\tminimum\tmessage\tsize for  this\tflow.  The\n\t   policing  algorithm will treat smaller messages\n\t   as though they are this size.')
rsvpSenderTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 18), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderTSpecMaxTU.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTSpecMaxTU.setDescription('The\tmaximum\tmessage\tsize for  this\tflow.  The\n\t   admission  algorithm\t will  reject TSpecs whose\n\t   Maximum Transmission\tUnit, plus  the\t interface\n\t   headers, exceed the interface MTU.')
rsvpSenderInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 19), RefreshInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderInterval.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderInterval.setDescription('The\t interval  between  refresh  messages\tas\n\t   advertised by the Previous Hop.')
rsvpSenderRSVPHop = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderRSVPHop.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderRSVPHop.setDescription('If TRUE, the node believes that  the  previous\n\t   IP  hop  is\tan  RSVP  hop.\tIf FALSE, the node\n\t   believes that the previous IP hop may not be\tan\n\t   RSVP\thop.')
rsvpSenderLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSenderLastChange.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderLastChange.setDescription('The\ttime of\t the  last  change  in\tthis  PATH\n\t   message;  This  is either the first time it was\n\t   received or the time\tof the most recent  change\n\t   in parameters.')
rsvpSenderPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderPolicy.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderPolicy.setDescription('The\tcontents of the\tpolicy\tobject,\t displayed\n\t   as an uninterpreted string of octets, including\n\t   the object header.  In the absence of  such\tan\n\t   object, this\tshould be of zero length.')
rsvpSenderAdspecBreak = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecBreak.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecBreak.setDescription('The\tglobal break bit general  characterization\n\t   parameter  from  the\tADSPEC.\t If TRUE, at least\n\t   one non-IS hop was detected in  the\tpath.\tIf\n\t   FALSE, no non-IS hops were detected.')
rsvpSenderAdspecHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecHopCount.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecHopCount.setDescription('The\t  hop\tcount\tgeneral\t  characterization\n\t   parameter from the ADSPEC.  A return\tof zero\tor\n\t   noSuchValue\tindicates  one\tof  the\t following\n\t   conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present')
rsvpSenderAdspecPathBw = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 25), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecPathBw.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecPathBw.setDescription('The\t  path\t  bandwidth    estimate\t   general\n\t   characterization  parameter from the\tADSPEC.\t A\n\t   return of zero or noSuchValue indicates one\tof\n\t   the following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present')
rsvpSenderAdspecMinLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 26), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecMinLatency.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecMinLatency.setDescription('The\t   minimum    path     latency\t   general\n\t   characterization  parameter from the\tADSPEC.\t A\n\t   return of zero or noSuchValue indicates one\tof\n\t   the following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present')
rsvpSenderAdspecMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecMtu.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecMtu.setDescription('The\tcomposed Maximum Transmission Unit general\n\t   characterization  parameter from the\tADSPEC.\t A\n\t   return of zero or noSuchValue indicates one\tof\n\t   the following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present')
rsvpSenderAdspecGuaranteedSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedSvc.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedSvc.setDescription('If TRUE,  the  ADSPEC  contains  a\tGuaranteed\n\t   Service  fragment.\tIf  FALSE, the ADSPEC does\n\t   not contain a Guaranteed Service fragment.')
rsvpSenderAdspecGuaranteedBreak = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedBreak.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedBreak.setDescription("If TRUE, the Guaranteed Service  fragment  has\n\t   its\t'break'\t bit  set,  indicating that one\tor\n\t   more\tnodes along the\tpath do\t not  support  the\n\t   guaranteed\t  service.     If    FALSE,    and\n\t   rsvpSenderAdspecGuaranteedSvc  is   TRUE,   the\n\t   'break' bit is not set.\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns FALSE or noSuchValue.")
rsvpSenderAdspecGuaranteedCtot = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 30), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedCtot.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedCtot.setDescription("If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is\tthe  end-to-end\t composed  value  for  the\n\t   guaranteed service 'C' parameter.  A\treturn\tof\n\t   zero\t  or  noSuchValue  indicates  one  of  the\n\t   following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.")
rsvpSenderAdspecGuaranteedDtot = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 31), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedDtot.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedDtot.setDescription("If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is\tthe  end-to-end\t composed  value  for  the\n\t   guaranteed service 'D' parameter.  A\treturn\tof\n\t   zero\t  or  noSuchValue  indicates  one  of  the\n\t   following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.")
rsvpSenderAdspecGuaranteedCsum = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 32), Integer32()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedCsum.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedCsum.setDescription("If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is\tthe  composed  value  for  the\tguaranteed\n\t   service 'C' parameter since the last\t reshaping\n\t   point.    A\t return\t of  zero  or  noSuchValue\n\t   indicates one of the\tfollowing conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.")
rsvpSenderAdspecGuaranteedDsum = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 33), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedDsum.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedDsum.setDescription("If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is\tthe  composed  value  for  the\tguaranteed\n\t   service 'D' parameter since the last\t reshaping\n\t   point.    A\t return\t of  zero  or  noSuchValue\n\t   indicates one of the\tfollowing conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.")
rsvpSenderAdspecGuaranteedHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedHopCount.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedHopCount.setDescription('If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is  the  service-specific  override\tof the hop\n\t   count general characterization  parameter  from\n\t   the\tADSPEC.\t  A  return of zero or noSuchValue\n\t   indicates one of the\tfollowing conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecGuaranteedPathBw = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 35), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedPathBw.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedPathBw.setDescription('If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is  the  service-specific  override of the path\n\t   bandwidth  estimate\tgeneral\t  characterization\n\t   parameter from the ADSPEC.  A return\tof zero\tor\n\t   noSuchValue\tindicates  one\tof  the\t following\n\t   conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecGuaranteedMinLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 36), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedMinLatency.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedMinLatency.setDescription('If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is the service-specific override of the minimum\n\t   path\tlatency\tgeneral\tcharacterization parameter\n\t   from\t  the\tADSPEC.\t   A  return  of  zero\tor\n\t   noSuchValue\tindicates  one\tof  the\t following\n\t   conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecGuaranteedMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedMtu.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecGuaranteedMtu.setDescription('If rsvpSenderAdspecGuaranteedSvc is\tTRUE, this\n\t   is\tthe   service-specific\t override  of  the\n\t   composed  Maximum  Transmission  Unit   general\n\t   characterization  parameter from the\tADSPEC.\t A\n\t   return of zero or noSuchValue indicates one\tof\n\t   the following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecGuaranteedSvc is FALSE, this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecCtrlLoadSvc = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 38), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadSvc.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadSvc.setDescription('If TRUE, the ADSPEC\tcontains a Controlled Load\n\t   Service  fragment.\tIf  FALSE, the ADSPEC does\n\t   not\t contain   a   Controlled   Load   Service\n\t   fragment.')
rsvpSenderAdspecCtrlLoadBreak = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 39), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadBreak.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadBreak.setDescription("If TRUE, the Controlled Load Service  fragment\n\t   has its 'break' bit set, indicating that one\tor\n\t   more\tnodes along the\tpath do\t not  support  the\n\t   controlled\tload   service.\t   If  FALSE,  and\n\t   rsvpSenderAdspecCtrlLoadSvc\t is   TRUE,    the\n\t   'break' bit is not set.\n\n\t   If rsvpSenderAdspecCtrlLoadSvc is  FALSE,  this\n\t   returns FALSE or noSuchValue.")
rsvpSenderAdspecCtrlLoadHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadHopCount.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadHopCount.setDescription('If rsvpSenderAdspecCtrlLoadSvc is  TRUE,  this\n\t   is  the  service-specific  override\tof the hop\n\t   count general characterization  parameter  from\n\t   the\tADSPEC.\t  A  return of zero or noSuchValue\n\t   indicates one of the\tfollowing conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecCtrlLoadSvc is  FALSE,  this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecCtrlLoadPathBw = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 41), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadPathBw.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadPathBw.setDescription('If rsvpSenderAdspecCtrlLoadSvc is  TRUE,  this\n\t   is  the  service-specific  override of the path\n\t   bandwidth  estimate\tgeneral\t  characterization\n\t   parameter from the ADSPEC.  A return\tof zero\tor\n\t   noSuchValue\tindicates  one\tof  the\t following\n\t   conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecCtrlLoadSvc is  FALSE,  this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecCtrlLoadMinLatency = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 42), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadMinLatency.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadMinLatency.setDescription('If rsvpSenderAdspecCtrlLoadSvc is  TRUE,  this\n\t   is the service-specific override of the minimum\n\t   path\tlatency\tgeneral\tcharacterization parameter\n\t   from\t  the\tADSPEC.\t   A  return  of  zero\tor\n\t   noSuchValue\tindicates  one\tof  the\t following\n\t   conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecCtrlLoadSvc is  FALSE,  this\n\t   returns zero\tor noSuchValue.')
rsvpSenderAdspecCtrlLoadMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadMtu.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderAdspecCtrlLoadMtu.setDescription('If rsvpSenderAdspecCtrlLoadSvc is  TRUE,  this\n\t   is\tthe   service-specific\t override  of  the\n\t   composed  Maximum  Transmission  Unit   general\n\t   characterization  parameter from the\tADSPEC.\t A\n\t   return of zero or noSuchValue indicates one\tof\n\t   the following conditions:\n\n\t      the invalid bit was set\n\t      the parameter was\tnot present\n\n\t   If rsvpSenderAdspecCtrlLoadSvc is  FALSE,  this\n\t   returns zero\tor noSuchValue.')
rsvpSenderStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 44), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpSenderStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderStatus.setDescription("'active' for all active PATH  messages.   This\n\t   object  may\tbe  used  to  install  static PATH\n\t   information or delete PATH information.")
rsvpSenderTTL = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSenderTTL.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderTTL.setDescription('The\tTTL value in the RSVP header that was last\n\t   received.')
rsvpSenderOutInterfaceTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 3), )
if mibBuilder.loadTexts: rsvpSenderOutInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderOutInterfaceTable.setDescription('List of outgoing interfaces\tthat PATH messages\n\t   use.\t The  ifIndex  is the ifIndex value of the\n\t   egress interface.')
rsvpSenderOutInterfaceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 3, 1), ).setIndexNames((0, "RSVP-MIB", "rsvpSessionNumber"), (0, "RSVP-MIB", "rsvpSenderNumber"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsvpSenderOutInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderOutInterfaceEntry.setDescription('List of outgoing interfaces\tthat a\tparticular\n\t   PATH\tmessage\thas.')
rsvpSenderOutInterfaceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 3, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpSenderOutInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderOutInterfaceStatus.setDescription("'active' for all active PATH messages.")
rsvpResvNewIndex = MibScalar((1, 3, 6, 1, 2, 1, 51, 2, 3), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsvpResvNewIndex.setStatus('current')
if mibBuilder.loadTexts: rsvpResvNewIndex.setDescription("This  object  is  used  to\tassign\tvalues\tto\n\t   rsvpResvNumber   as\t described   in\t  'Textual\n\t   Conventions for SNMPv2'.  The  network  manager\n\t   reads  the  object,\tand  then writes the value\n\t   back\tin the SET that\tcreates\ta new instance\tof\n\t   rsvpResvEntry.   If the SET fails with the code\n\t   'inconsistentValue',\tthen the process  must\tbe\n\t   repeated;  If the SET succeeds, then\tthe object\n\t   is incremented, and the new instance\tis created\n\t   according to\tthe manager's directions.")
rsvpResvTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 4), )
if mibBuilder.loadTexts: rsvpResvTable.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTable.setDescription('Information\tdescribing the\tstate  information\n\t   displayed by\treceivers in RESV messages.')
rsvpResvEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 4, 1), ).setIndexNames((0, "RSVP-MIB", "rsvpSessionNumber"), (0, "RSVP-MIB", "rsvpResvNumber"))
if mibBuilder.loadTexts: rsvpResvEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpResvEntry.setDescription("Information\tdescribing the\tstate  information\n\t   displayed  by  a single receiver's RESV message\n\t   concerning a\tsingle sender.")
rsvpResvNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 1), SessionNumber())
if mibBuilder.loadTexts: rsvpResvNumber.setStatus('current')
if mibBuilder.loadTexts: rsvpResvNumber.setDescription('The\tnumber of this reservation request.   This\n\t   is  for  SNMP Indexing purposes only\tand has\tno\n\t   relation to any protocol value.')
rsvpResvType = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 2), SessionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvType.setStatus('current')
if mibBuilder.loadTexts: rsvpResvType.setDescription('The\ttype of\tsession\t(IP4, IP6, IP6\twith  flow\n\t   information,\tetc).')
rsvpResvDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvDestAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvDestAddr.setDescription("The\tdestination address used by all\tsenders\tin\n\t   this\t session.   This object\tmay not\tbe changed\n\t   when\tthe  value  of\tthe  RowStatus\tobject\tis\n\t   'active'.")
rsvpResvSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvSenderAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvSenderAddr.setDescription("The\tsource address of the sender  selected\tby\n\t   this\t reservation.\tThe  value  of\tall zeroes\n\t   indicates 'all senders'.  This object  may  not\n\t   be  changed\twhen  the  value  of the RowStatus\n\t   object is 'active'.")
rsvpResvDestAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpResvDestAddrLength.setDescription("The\tlength of the destination address in bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvSenderAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpResvSenderAddrLength.setDescription("The\tlength of the sender's\taddress\t in  bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 7), Protocol()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvProtocol.setStatus('current')
if mibBuilder.loadTexts: rsvpResvProtocol.setDescription("The\tIP Protocol used by  this  session.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvDestPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 8), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvDestPort.setStatus('current')
if mibBuilder.loadTexts: rsvpResvDestPort.setDescription("The\t UDP  or  TCP  port  number  used   as\t a\n\t   destination\t port  for  all\t senders  in  this\n\t   session.  If\tthe IP protocol\tin use,\t specified\n\t   by  rsvpResvProtocol,  is  50 (ESP) or 51 (AH),\n\t   this\t represents  a\tvirtual\t destination  port\n\t   number.   A value of\tzero indicates that the\tIP\n\t   protocol in use  does  not  have  ports.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 9), Port()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvPort.setStatus('current')
if mibBuilder.loadTexts: rsvpResvPort.setDescription("The\tUDP or TCP port\tnumber used  as\t a  source\n\t   port\t for  this sender in this session.  If the\n\t   IP\t protocol    in\t   use,\t   specified\tby\n\t   rsvpResvProtocol  is\t 50 (ESP) or 51\t(AH), this\n\t   represents a\tgeneralized port identifier (GPI).\n\t   A  value of zero indicates that the IP protocol\n\t   in use does not have\tports.\t This  object  may\n\t   not\tbe changed when\tthe value of the RowStatus\n\t   object is 'active'.")
rsvpResvHopAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvHopAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvHopAddr.setDescription('The\taddress\tused by\tthe next RSVP  hop  (which\n\t   may be the ultimate receiver).')
rsvpResvHopLih = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvHopLih.setStatus('current')
if mibBuilder.loadTexts: rsvpResvHopLih.setDescription('The\tLogical\tInterface Handle received from the\n\t   previous  RSVP  hop\t(which may be the ultimate\n\t   receiver).')
rsvpResvInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 12), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvInterface.setStatus('current')
if mibBuilder.loadTexts: rsvpResvInterface.setDescription('The\tifIndex\tvalue of the  interface\t on  which\n\t   this\tRESV message was most recently received.')
rsvpResvService = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 13), QosService()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvService.setStatus('current')
if mibBuilder.loadTexts: rsvpResvService.setDescription('The\tQoS Service  classification  requested\tby\n\t   the receiver.')
rsvpResvTSpecRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 14), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvTSpecRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTSpecRate.setDescription("The\tAverage\tBit  Rate  of  the  sender's  data\n\t   stream.    Within  a\t transmission  burst,  the\n\t   arrival   rate    may    be\t  as\tfast\tas\n\t   rsvpResvTSpecPeakRate   (if\tsupported  by  the\n\t   service model); however, averaged across two\tor\n\t   more\t burst\tintervals,  the\t rate  should  not\n\t   exceed rsvpResvTSpecRate.\n\n\t   Note\tthat this is a prediction, often based\ton\n\t   the\tgeneral\t capability  of\ta type of codec\tor\n\t   particular encoding;\tthe measured average  rate\n\t   may be significantly\tlower.")
rsvpResvTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 15), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTSpecPeakRate.setDescription("The\tPeak Bit Rate of the sender's data stream.\n\t   Traffic  arrival is not expected to exceed this\n\t   rate\tat any time, apart  from  the  effects\tof\n\t   jitter in the network.  If not specified in the\n\t   TSpec, this returns zero or noSuchValue.")
rsvpResvTSpecBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 16), BurstSize()).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTSpecBurst.setDescription("The\tsize of\tthe largest  burst  expected  from\n\t   the sender at a time.\n\n\t   If this is less than\t the  sender's\tadvertised\n\t   burst  size,\tthe receiver is\tasking the network\n\t   to provide flow pacing  beyond  what\t would\tbe\n\t   provided   under   normal  circumstances.  Such\n\t   pacing is at\tthe network's option.")
rsvpResvTSpecMinTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 17), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvTSpecMinTU.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTSpecMinTU.setDescription('The\tminimum\tmessage\tsize for  this\tflow.  The\n\t   policing  algorithm will treat smaller messages\n\t   as though they are this size.')
rsvpResvTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 18), MessageSize()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvTSpecMaxTU.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTSpecMaxTU.setDescription('The\tmaximum\tmessage\tsize for  this\tflow.  The\n\t   admission  algorithm\t will  reject TSpecs whose\n\t   Maximum Transmission\tUnit, plus  the\t interface\n\t   headers, exceed the interface MTU.')
rsvpResvRSpecRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 19), BitRate()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvRSpecRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvRSpecRate.setDescription('If the requested  service  is  Guaranteed,\tas\n\t   specified   by  rsvpResvService,  this  is  the\n\t   clearing  rate   that   is\tbeing\trequested.\n\t   Otherwise,  it is zero, or the agent\tmay return\n\t   noSuchValue.')
rsvpResvRSpecSlack = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 20), Integer32()).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvRSpecSlack.setStatus('current')
if mibBuilder.loadTexts: rsvpResvRSpecSlack.setDescription('If the requested  service  is  Guaranteed,\tas\n\t   specified by\trsvpResvService, this is the delay\n\t   slack.  Otherwise, it is zero, or the agent may\n\t   return noSuchValue.')
rsvpResvInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 21), RefreshInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvInterval.setStatus('current')
if mibBuilder.loadTexts: rsvpResvInterval.setDescription('The\t interval  between  refresh  messages\tas\n\t   advertised by the Next Hop.')
rsvpResvScope = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvScope.setStatus('current')
if mibBuilder.loadTexts: rsvpResvScope.setDescription('The\tcontents of the\tscope object, displayed\tas\n\t   an  uninterpreted  string  of octets, including\n\t   the object header.  In the absence of  such\tan\n\t   object, this\tshould be of zero length.\n\n\t   If the length  is  non-zero,\t this  contains\t a\n\t   series of IP4 or IP6\taddresses.')
rsvpResvShared = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvShared.setStatus('current')
if mibBuilder.loadTexts: rsvpResvShared.setDescription('If TRUE, a reservation shared among\tsenders\tis\n\t   requested.  If FALSE, a reservation specific\tto\n\t   this\tsender is requested.')
rsvpResvExplicit = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 24), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvExplicit.setStatus('current')
if mibBuilder.loadTexts: rsvpResvExplicit.setDescription('If TRUE, individual\tsenders\tare  listed  using\n\t   Filter  Specifications.   If\tFALSE, all senders\n\t   are implicitly selected.  The Scope Object will\n\t   contain  a list of senders that need\tto receive\n\t   this\treservation request  for  the  purpose\tof\n\t   routing the RESV message.')
rsvpResvRSVPHop = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 25), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvRSVPHop.setStatus('current')
if mibBuilder.loadTexts: rsvpResvRSVPHop.setDescription('If TRUE, the node believes that  the  previous\n\t   IP  hop  is\tan  RSVP  hop.\tIf FALSE, the node\n\t   believes that the previous IP hop may not be\tan\n\t   RSVP\thop.')
rsvpResvLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvLastChange.setStatus('current')
if mibBuilder.loadTexts: rsvpResvLastChange.setDescription('The\t time  of  the\t last\tchange\t in   this\n\t   reservation\trequest;  This is either the first\n\t   time\tit was received\tor the time  of\t the  most\n\t   recent change in parameters.')
rsvpResvPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvPolicy.setStatus('current')
if mibBuilder.loadTexts: rsvpResvPolicy.setDescription('The\tcontents of the\tpolicy\tobject,\t displayed\n\t   as an uninterpreted string of octets, including\n\t   the object header.  In the absence of  such\tan\n\t   object, this\tshould be of zero length.')
rsvpResvStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpResvStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpResvStatus.setDescription("'active' for all active RESV  messages.   This\n\t   object  may\tbe  used  to  install  static RESV\n\t   information or delete RESV information.")
rsvpResvTTL = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvTTL.setStatus('current')
if mibBuilder.loadTexts: rsvpResvTTL.setDescription('The\tTTL value in the RSVP header that was last\n\t   received.')
rsvpResvFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFlowId.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFlowId.setDescription('The\tflow ID\tthat this receiver  is\tusing,\tif\n\t   this\t is  an\tIPv6 session.')
rsvpResvFwdNewIndex = MibScalar((1, 3, 6, 1, 2, 1, 51, 2, 4), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsvpResvFwdNewIndex.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdNewIndex.setDescription("This  object  is  used  to\tassign\tvalues\tto\n\t   rsvpResvFwdNumber   as  described  in  'Textual\n\t   Conventions for SNMPv2'.  The  network  manager\n\t   reads  the  object,\tand  then writes the value\n\t   back\tin the SET that\tcreates\ta new instance\tof\n\t   rsvpResvFwdEntry.   If  the\tSET fails with the\n\t   code\t'inconsistentValue', then the process must\n\t   be  repeated;  If  the  SET\tsucceeds, then the\n\t   object is incremented, and the new instance\tis\n\t   created according to\tthe manager's directions.")
rsvpResvFwdTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 5), )
if mibBuilder.loadTexts: rsvpResvFwdTable.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTable.setDescription('Information\tdescribing the\tstate  information\n\t   displayed upstream in RESV messages.')
rsvpResvFwdEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 5, 1), ).setIndexNames((0, "RSVP-MIB", "rsvpSessionNumber"), (0, "RSVP-MIB", "rsvpResvFwdNumber"))
if mibBuilder.loadTexts: rsvpResvFwdEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdEntry.setDescription('Information\tdescribing the\tstate  information\n\t   displayed   upstream\t  in   an   RESV   message\n\t   concerning a\tsingle sender.')
rsvpResvFwdNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 1), SessionNumber())
if mibBuilder.loadTexts: rsvpResvFwdNumber.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdNumber.setDescription('The\tnumber of this reservation request.   This\n\t   is  for  SNMP Indexing purposes only\tand has\tno\n\t   relation to any protocol value.')
rsvpResvFwdType = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 2), SessionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdType.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdType.setDescription('The\ttype of\tsession\t(IP4, IP6, IP6\twith  flow\n\t   information,\tetc).')
rsvpResvFwdDestAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdDestAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdDestAddr.setDescription("The\tdestination address used by all\tsenders\tin\n\t   this\t session.   This object\tmay not\tbe changed\n\t   when\tthe  value  of\tthe  RowStatus\tobject\tis\n\t   'active'.")
rsvpResvFwdSenderAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdSenderAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdSenderAddr.setDescription("The\tsource address of the sender  selected\tby\n\t   this\t reservation.\tThe  value  of\tall zeroes\n\t   indicates 'all senders'.  This object  may  not\n\t   be  changed\twhen  the  value  of the RowStatus\n\t   object is 'active'.")
rsvpResvFwdDestAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdDestAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdDestAddrLength.setDescription("The\tlength of the destination address in bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvFwdSenderAddrLength = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdSenderAddrLength.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdSenderAddrLength.setDescription("The\tlength of the sender's\taddress\t in  bits.\n\t   This\t is  the CIDR Prefix Length, which for IP4\n\t   hosts and multicast addresses is 32 bits.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvFwdProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 7), Protocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdProtocol.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdProtocol.setDescription("The\tIP Protocol used by a session. for  secure\n\t   sessions,  this  indicates  IP  Security.  This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvFwdDestPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 8), Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdDestPort.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdDestPort.setDescription("The\t UDP  or  TCP  port  number  used   as\t a\n\t   destination\t port  for  all\t senders  in  this\n\t   session.  If\tthe IP protocol\tin use,\t specified\n\t   by rsvpResvFwdProtocol, is 50 (ESP) or 51 (AH),\n\t   this\t represents  a\tvirtual\t destination  port\n\t   number.   A value of\tzero indicates that the\tIP\n\t   protocol in use  does  not  have  ports.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvFwdPort = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 9), Port()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdPort.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdPort.setDescription("The\tUDP or TCP port\tnumber used  as\t a  source\n\t   port\t for  this sender in this session.  If the\n\t   IP\t protocol    in\t   use,\t   specified\tby\n\t   rsvpResvFwdProtocol\tis  50\t(ESP)  or 51 (AH),\n\t   this\trepresents a generalized  port\tidentifier\n\t   (GPI).   A  value of\tzero indicates that the\tIP\n\t   protocol in use  does  not  have  ports.   This\n\t   object may not be changed when the value of the\n\t   RowStatus object is 'active'.")
rsvpResvFwdHopAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdHopAddr.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdHopAddr.setDescription('The\taddress\tof the (previous) RSVP\tthat  will\n\t   receive this\tmessage.')
rsvpResvFwdHopLih = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdHopLih.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdHopLih.setDescription('The\t Logical  Interface  Handle  sent  to  the\n\t   (previous)\tRSVP   that   will   receive  this\n\t   message.')
rsvpResvFwdInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdInterface.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdInterface.setDescription('The\tifIndex\tvalue of the  interface\t on  which\n\t   this\tRESV message was most recently sent.')
rsvpResvFwdService = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 13), QosService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdService.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdService.setDescription('The\tQoS Service classification requested.')
rsvpResvFwdTSpecRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 14), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTSpecRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTSpecRate.setDescription("The\tAverage\tBit  Rate  of  the  sender's  data\n\t   stream.    Within  a\t transmission  burst,  the\n\t   arrival   rate    may    be\t  as\tfast\tas\n\t   rsvpResvFwdTSpecPeakRate  (if  supported by the\n\t   service model); however, averaged across two\tor\n\t   more\t burst\tintervals,  the\t rate  should  not\n\t   exceed rsvpResvFwdTSpecRate.\n\n\t   Note\tthat this is a prediction, often based\ton\n\t   the\tgeneral\t capability  of\ta type of codec\tor\n\t   particular encoding;\tthe measured average  rate\n\t   may be significantly\tlower.")
rsvpResvFwdTSpecPeakRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 15), BitRate()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTSpecPeakRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTSpecPeakRate.setDescription("The\tPeak Bit Rate of the sender's data  stream\n\t   Traffic  arrival is not expected to exceed this\n\t   rate\tat any time, apart  from  the  effects\tof\n\t   jitter in the network.  If not specified in the\n\t   TSpec, this returns zero or noSuchValue.")
rsvpResvFwdTSpecBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 16), BurstSize()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTSpecBurst.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTSpecBurst.setDescription("The\tsize of\tthe largest  burst  expected  from\n\t   the sender at a time.\n\n\t   If this is less than\t the  sender's\tadvertised\n\t   burst  size,\tthe receiver is\tasking the network\n\t   to provide flow pacing  beyond  what\t would\tbe\n\t   provided   under   normal  circumstances.  Such\n\t   pacing is at\tthe network's option.")
rsvpResvFwdTSpecMinTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 17), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTSpecMinTU.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTSpecMinTU.setDescription('The\tminimum\tmessage\tsize for  this\tflow.  The\n\t   policing  algorithm will treat smaller messages\n\t   as though they are this size.')
rsvpResvFwdTSpecMaxTU = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 18), MessageSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTSpecMaxTU.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTSpecMaxTU.setDescription('The\tmaximum\tmessage\tsize for  this\tflow.  The\n\t   admission  algorithm\t will  reject TSpecs whose\n\t   Maximum Transmission\tUnit, plus  the\t interface\n\t   headers, exceed the interface MTU.')
rsvpResvFwdRSpecRate = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 19), BitRate()).setUnits('bytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdRSpecRate.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdRSpecRate.setDescription('If the requested  service  is  Guaranteed,\tas\n\t   specified   by  rsvpResvService,  this  is  the\n\t   clearing  rate   that   is\tbeing\trequested.\n\t   Otherwise,  it is zero, or the agent\tmay return\n\t   noSuchValue.')
rsvpResvFwdRSpecSlack = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 20), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdRSpecSlack.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdRSpecSlack.setDescription('If the requested  service  is  Guaranteed,\tas\n\t   specified by\trsvpResvService, this is the delay\n\t   slack.  Otherwise, it is zero, or the agent may\n\t   return noSuchValue.')
rsvpResvFwdInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 21), RefreshInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdInterval.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdInterval.setDescription('The\t  interval   between   refresh\t  messages\n\t   advertised to the Previous Hop.')
rsvpResvFwdScope = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdScope.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdScope.setDescription('The\tcontents of the\tscope object, displayed\tas\n\t   an  uninterpreted  string  of octets, including\n\t   the object header.  In the absence of  such\tan\n\t   object, this\tshould be of zero length.')
rsvpResvFwdShared = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdShared.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdShared.setDescription('If TRUE, a reservation shared among\tsenders\tis\n\t   requested.  If FALSE, a reservation specific\tto\n\t   this\tsender is requested.')
rsvpResvFwdExplicit = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdExplicit.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdExplicit.setDescription('If TRUE, individual\tsenders\tare  listed  using\n\t   Filter  Specifications.   If\tFALSE, all senders\n\t   are implicitly selected.  The Scope Object will\n\t   contain  a list of senders that need\tto receive\n\t   this\treservation request  for  the  purpose\tof\n\t   routing the RESV message.')
rsvpResvFwdRSVPHop = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdRSVPHop.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdRSVPHop.setDescription('If TRUE, the node believes that  the  next\tIP\n\t   hop\tis  an\tRSVP  hop.   If\t FALSE,\t the  node\n\t   believes that the next IP hop  may  not  be\tan\n\t   RSVP\thop.')
rsvpResvFwdLastChange = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdLastChange.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdLastChange.setDescription('The\ttime of\tthe last change\tin  this  request;\n\t   This\t is  either  the first time it was sent\tor\n\t   the\ttime  of  the  most   recent   change\tin\n\t   parameters.')
rsvpResvFwdPolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdPolicy.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdPolicy.setDescription('The\tcontents of the\tpolicy\tobject,\t displayed\n\t   as an uninterpreted string of octets, including\n\t   the object header.  In the absence of  such\tan\n\t   object, this\tshould be of zero length.')
rsvpResvFwdStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 28), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsvpResvFwdStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdStatus.setDescription("'active' for all active RESV  messages.   This\n\t   object may be used to delete\tRESV information.")
rsvpResvFwdTTL = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdTTL.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdTTL.setDescription('The\tTTL value in the RSVP header that was last\n\t   received.')
rsvpResvFwdFlowId = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpResvFwdFlowId.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdFlowId.setDescription('The\tflow ID\tthat this receiver  is\tusing,\tif\n\t   this\t is  an\tIPv6 session.')
rsvpIfTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 6), )
if mibBuilder.loadTexts: rsvpIfTable.setStatus('current')
if mibBuilder.loadTexts: rsvpIfTable.setDescription("The\tRSVP-specific attributes of  the  system's\n\t   interfaces.")
rsvpIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsvpIfEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpIfEntry.setDescription('The\tRSVP-specific attributes of  the  a  given\n\t   interface.')
rsvpIfUdpNbrs = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfUdpNbrs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfUdpNbrs.setDescription('The\tnumber of neighbors perceived to be  using\n\t   only\tthe RSVP UDP Encapsulation.')
rsvpIfIpNbrs = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfIpNbrs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfIpNbrs.setDescription('The\tnumber of neighbors perceived to be  using\n\t   only\tthe RSVP IP Encapsulation.')
rsvpIfNbrs = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsvpIfNbrs.setStatus('current')
if mibBuilder.loadTexts: rsvpIfNbrs.setDescription('The\tnumber of neighbors  currently\tperceived;\n\t   this\t will  exceed rsvpIfIpNbrs + rsvpIfUdpNbrs\n\t   by  the  number   of\t  neighbors   using   both\n\t   encapsulations.')
rsvpIfRefreshBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfRefreshBlockadeMultiple.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRefreshBlockadeMultiple.setDescription("The\tvalue of the RSVP value\t'Kb', Which is the\n\t   minimum   number   of  refresh  intervals  that\n\t   blockade state will last once entered.")
rsvpIfRefreshMultiple = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfRefreshMultiple.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRefreshMultiple.setDescription("The\tvalue of the RSVP value\t'K', which is  the\n\t   number  of  refresh intervals which must elapse\n\t   (minimum) before a PATH or RESV  message  which\n\t   is not being\trefreshed will be aged out.")
rsvpIfTTL = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfTTL.setStatus('current')
if mibBuilder.loadTexts: rsvpIfTTL.setDescription('The\tvalue of SEND_TTL used on  this\t interface\n\t   for\tmessages  this node originates.\t If set\tto\n\t   zero, the node determines  the  TTL\tvia  other\n\t   means.')
rsvpIfRefreshInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 7), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRefreshInterval.setDescription("The\tvalue of the RSVP value\t'R', which is  the\n\t   minimum period between refresh transmissions\tof\n\t   a given PATH\tor RESV\tmessage\ton an interface.")
rsvpIfRouteDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 8), TimeInterval().clone(200)).setUnits('hundredths\tof a second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfRouteDelay.setStatus('current')
if mibBuilder.loadTexts: rsvpIfRouteDelay.setDescription('The\tapproximate period from\tthe time  a  route\n\t   is  changed\tto  the\t time  a resulting message\n\t   appears on the interface.')
rsvpIfEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfEnabled.setStatus('current')
if mibBuilder.loadTexts: rsvpIfEnabled.setDescription('If TRUE, RSVP is enabled  on  this\tInterface.\n\t   If\tFALSE,\t RSVP\tis  not\t enabled  on  this\n\t   interface.')
rsvpIfUdpRequired = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfUdpRequired.setStatus('current')
if mibBuilder.loadTexts: rsvpIfUdpRequired.setDescription('If TRUE, manual configuration forces  the  use\n\t   of  UDP  encapsulation  on  the  interface.\tIf\n\t   FALSE,  UDP\tencapsulation  is  only\t used\tif\n\t   rsvpIfUdpNbrs is not\tzero.')
rsvpIfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpIfStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpIfStatus.setDescription("'active' on\tinterfaces that\tare configured for\n\t   RSVP.")
rsvpNbrTable = MibTable((1, 3, 6, 1, 2, 1, 51, 1, 7), )
if mibBuilder.loadTexts: rsvpNbrTable.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrTable.setDescription('Information\tdescribing  the\t Neighbors  of\tan\n\t   RSVP\tsystem.')
rsvpNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 51, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RSVP-MIB", "rsvpNbrAddress"))
if mibBuilder.loadTexts: rsvpNbrEntry.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrEntry.setDescription('Information\t  describing   a    single    RSVP\n\t   Neighbor.')
rsvpNbrAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 16)))
if mibBuilder.loadTexts: rsvpNbrAddress.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrAddress.setDescription("The\tIP4 or IP6 Address used\tby this\t neighbor.\n\t   This\t object\t may not be changed when the value\n\t   of the RowStatus object is 'active'.")
rsvpNbrProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 7, 1, 2), RsvpEncapsulation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpNbrProtocol.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrProtocol.setDescription('The\t  encapsulation\t  being\t  used\t by   this\n\t   neighbor.')
rsvpNbrStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 51, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsvpNbrStatus.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrStatus.setDescription("'active' for all neighbors.\t This  object  may\n\t   be\tused   to  configure  neighbors.   In  the\n\t   presence   of   configured\t neighbors,    the\n\t   implementation  may\t(but  is  not required to)\n\t   limit the  set  of  valid  neighbors\t to  those\n\t   configured.")
rsvpNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 3, 0))
newFlow = NotificationType((1, 3, 6, 1, 2, 1, 51, 3, 0, 1)).setObjects(("INTEGRATED-SERVICES-MIB", "intSrvFlowStatus"), ("RSVP-MIB", "rsvpSessionDestAddr"), ("RSVP-MIB", "rsvpResvFwdStatus"), ("RSVP-MIB", "rsvpResvStatus"), ("RSVP-MIB", "rsvpSenderStatus"))
if mibBuilder.loadTexts: newFlow.setStatus('current')
if mibBuilder.loadTexts: newFlow.setDescription('The\t  newFlow   trap   indicates   that    the\n\t   originating\tsystem has installed a new flow\tin\n\t   its\t classifier,\tor    (when    reservation\n\t   authorization   is  in  view)  is  prepared\tto\n\t   install such\ta flow in the  classifier  and\tis\n\t   requesting authorization.  The objects included\n\t   with\tthe  Notification  may\tbe  used  to  read\n\t   further   information   using   the\tIntegrated\n\t   Services and\tRSVP MIBs.  Authorization or  non-\n\t   authorization  may be enacted by a write to the\n\t   variable intSrvFlowStatus.')
lostFlow = NotificationType((1, 3, 6, 1, 2, 1, 51, 3, 0, 2)).setObjects(("INTEGRATED-SERVICES-MIB", "intSrvFlowStatus"), ("RSVP-MIB", "rsvpSessionDestAddr"), ("RSVP-MIB", "rsvpResvFwdStatus"), ("RSVP-MIB", "rsvpResvStatus"), ("RSVP-MIB", "rsvpSenderStatus"))
if mibBuilder.loadTexts: lostFlow.setStatus('current')
if mibBuilder.loadTexts: lostFlow.setDescription('The\t  lostFlow   trap   indicates\tthat   the\n\t   originating\tsystem has removed a flow from its\n\t   classifier.')
rsvpGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 4, 1))
rsvpCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 51, 4, 2))
rsvpCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 51, 4, 2, 1)).setObjects(("RSVP-MIB", "rsvpSessionGroup"), ("RSVP-MIB", "rsvpSenderGroup"), ("RSVP-MIB", "rsvpResvGroup"), ("RSVP-MIB", "rsvpIfGroup"), ("RSVP-MIB", "rsvpNbrGroup"), ("RSVP-MIB", "rsvpGenObjectsGroup"), ("RSVP-MIB", "rsvpSenderOutInterfaceGroup"), ("RSVP-MIB", "rsvpResvFwdGroup"), ("RSVP-MIB", "rsvpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpCompliance = rsvpCompliance.setStatus('current')
if mibBuilder.loadTexts: rsvpCompliance.setDescription('The\t compliance  statement.\t  Note\tthat   the\n\t   implementation    of\t  this\t module\t  requires\n\t   implementation of the Integrated  Services  MIB\n\t   as well.')
rsvpSessionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 1)).setObjects(("RSVP-MIB", "rsvpSessionType"), ("RSVP-MIB", "rsvpSessionDestAddr"), ("RSVP-MIB", "rsvpSessionDestAddrLength"), ("RSVP-MIB", "rsvpSessionProtocol"), ("RSVP-MIB", "rsvpSessionPort"), ("RSVP-MIB", "rsvpSessionSenders"), ("RSVP-MIB", "rsvpSessionReceivers"), ("RSVP-MIB", "rsvpSessionRequests"), ("RSVP-MIB", "rsvpSessionNewIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpSessionGroup = rsvpSessionGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpSessionGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpSenderGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 2)).setObjects(("RSVP-MIB", "rsvpSenderType"), ("RSVP-MIB", "rsvpSenderDestAddr"), ("RSVP-MIB", "rsvpSenderAddr"), ("RSVP-MIB", "rsvpSenderDestAddrLength"), ("RSVP-MIB", "rsvpSenderAddrLength"), ("RSVP-MIB", "rsvpSenderProtocol"), ("RSVP-MIB", "rsvpSenderDestPort"), ("RSVP-MIB", "rsvpSenderPort"), ("RSVP-MIB", "rsvpSenderFlowId"), ("RSVP-MIB", "rsvpSenderTTL"), ("RSVP-MIB", "rsvpSenderHopAddr"), ("RSVP-MIB", "rsvpSenderHopLih"), ("RSVP-MIB", "rsvpSenderInterface"), ("RSVP-MIB", "rsvpSenderTSpecRate"), ("RSVP-MIB", "rsvpSenderTSpecPeakRate"), ("RSVP-MIB", "rsvpSenderTSpecBurst"), ("RSVP-MIB", "rsvpSenderTSpecMinTU"), ("RSVP-MIB", "rsvpSenderTSpecMaxTU"), ("RSVP-MIB", "rsvpSenderInterval"), ("RSVP-MIB", "rsvpSenderLastChange"), ("RSVP-MIB", "rsvpSenderStatus"), ("RSVP-MIB", "rsvpSenderRSVPHop"), ("RSVP-MIB", "rsvpSenderPolicy"), ("RSVP-MIB", "rsvpSenderAdspecBreak"), ("RSVP-MIB", "rsvpSenderAdspecHopCount"), ("RSVP-MIB", "rsvpSenderAdspecPathBw"), ("RSVP-MIB", "rsvpSenderAdspecMinLatency"), ("RSVP-MIB", "rsvpSenderAdspecMtu"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedSvc"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedBreak"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedCtot"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedDtot"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedCsum"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedDsum"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedHopCount"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedPathBw"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedMinLatency"), ("RSVP-MIB", "rsvpSenderAdspecGuaranteedMtu"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadSvc"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadBreak"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadHopCount"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadPathBw"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadMinLatency"), ("RSVP-MIB", "rsvpSenderAdspecCtrlLoadMtu"), ("RSVP-MIB", "rsvpSenderNewIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpSenderGroup = rsvpSenderGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpResvGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 3)).setObjects(("RSVP-MIB", "rsvpResvType"), ("RSVP-MIB", "rsvpResvDestAddr"), ("RSVP-MIB", "rsvpResvSenderAddr"), ("RSVP-MIB", "rsvpResvDestAddrLength"), ("RSVP-MIB", "rsvpResvSenderAddrLength"), ("RSVP-MIB", "rsvpResvProtocol"), ("RSVP-MIB", "rsvpResvDestPort"), ("RSVP-MIB", "rsvpResvPort"), ("RSVP-MIB", "rsvpResvHopAddr"), ("RSVP-MIB", "rsvpResvHopLih"), ("RSVP-MIB", "rsvpResvInterface"), ("RSVP-MIB", "rsvpResvService"), ("RSVP-MIB", "rsvpResvTSpecRate"), ("RSVP-MIB", "rsvpResvTSpecBurst"), ("RSVP-MIB", "rsvpResvTSpecPeakRate"), ("RSVP-MIB", "rsvpResvTSpecMinTU"), ("RSVP-MIB", "rsvpResvTSpecMaxTU"), ("RSVP-MIB", "rsvpResvRSpecRate"), ("RSVP-MIB", "rsvpResvRSpecSlack"), ("RSVP-MIB", "rsvpResvInterval"), ("RSVP-MIB", "rsvpResvScope"), ("RSVP-MIB", "rsvpResvShared"), ("RSVP-MIB", "rsvpResvExplicit"), ("RSVP-MIB", "rsvpResvRSVPHop"), ("RSVP-MIB", "rsvpResvLastChange"), ("RSVP-MIB", "rsvpResvPolicy"), ("RSVP-MIB", "rsvpResvStatus"), ("RSVP-MIB", "rsvpResvNewIndex"), ("RSVP-MIB", "rsvpResvTTL"), ("RSVP-MIB", "rsvpResvFlowId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpResvGroup = rsvpResvGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpResvGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpResvFwdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 4)).setObjects(("RSVP-MIB", "rsvpResvFwdType"), ("RSVP-MIB", "rsvpResvFwdDestAddr"), ("RSVP-MIB", "rsvpResvFwdSenderAddr"), ("RSVP-MIB", "rsvpResvFwdDestAddrLength"), ("RSVP-MIB", "rsvpResvFwdSenderAddrLength"), ("RSVP-MIB", "rsvpResvFwdProtocol"), ("RSVP-MIB", "rsvpResvFwdDestPort"), ("RSVP-MIB", "rsvpResvFwdPort"), ("RSVP-MIB", "rsvpResvFwdHopAddr"), ("RSVP-MIB", "rsvpResvFwdHopLih"), ("RSVP-MIB", "rsvpResvFwdInterface"), ("RSVP-MIB", "rsvpResvFwdNewIndex"), ("RSVP-MIB", "rsvpResvFwdService"), ("RSVP-MIB", "rsvpResvFwdTSpecPeakRate"), ("RSVP-MIB", "rsvpResvFwdTSpecMinTU"), ("RSVP-MIB", "rsvpResvFwdTSpecMaxTU"), ("RSVP-MIB", "rsvpResvFwdTSpecRate"), ("RSVP-MIB", "rsvpResvFwdTSpecBurst"), ("RSVP-MIB", "rsvpResvFwdRSpecRate"), ("RSVP-MIB", "rsvpResvFwdRSpecSlack"), ("RSVP-MIB", "rsvpResvFwdInterval"), ("RSVP-MIB", "rsvpResvFwdScope"), ("RSVP-MIB", "rsvpResvFwdShared"), ("RSVP-MIB", "rsvpResvFwdExplicit"), ("RSVP-MIB", "rsvpResvFwdRSVPHop"), ("RSVP-MIB", "rsvpResvFwdLastChange"), ("RSVP-MIB", "rsvpResvFwdPolicy"), ("RSVP-MIB", "rsvpResvFwdStatus"), ("RSVP-MIB", "rsvpResvFwdTTL"), ("RSVP-MIB", "rsvpResvFwdFlowId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpResvFwdGroup = rsvpResvFwdGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpResvFwdGroup.setDescription('These objects are optional,\tused for some RSVP\n\t   Systems.')
rsvpIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 5)).setObjects(("RSVP-MIB", "rsvpIfUdpNbrs"), ("RSVP-MIB", "rsvpIfIpNbrs"), ("RSVP-MIB", "rsvpIfNbrs"), ("RSVP-MIB", "rsvpIfEnabled"), ("RSVP-MIB", "rsvpIfUdpRequired"), ("RSVP-MIB", "rsvpIfRefreshBlockadeMultiple"), ("RSVP-MIB", "rsvpIfRefreshMultiple"), ("RSVP-MIB", "rsvpIfRefreshInterval"), ("RSVP-MIB", "rsvpIfTTL"), ("RSVP-MIB", "rsvpIfRouteDelay"), ("RSVP-MIB", "rsvpIfStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpIfGroup = rsvpIfGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpIfGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpNbrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 6)).setObjects(("RSVP-MIB", "rsvpNbrProtocol"), ("RSVP-MIB", "rsvpNbrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpNbrGroup = rsvpNbrGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpNbrGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpGenObjectsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 7)).setObjects(("RSVP-MIB", "rsvpBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpGenObjectsGroup = rsvpGenObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpGenObjectsGroup.setDescription('This objects are required for RSVP Systems.')
rsvpSenderOutInterfaceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 8)).setObjects(("RSVP-MIB", "rsvpSenderOutInterfaceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpSenderOutInterfaceGroup = rsvpSenderOutInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpSenderOutInterfaceGroup.setDescription('These objects are required for RSVP\tSystems.')
rsvpNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 51, 4, 1, 9)).setObjects(("RSVP-MIB", "newFlow"), ("RSVP-MIB", "lostFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsvpNotificationGroup = rsvpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rsvpNotificationGroup.setDescription('This  notification\tis  required  for  Systems\n\t   supporting the RSVP Policy Module using an SNMP\n\t   interface to\tthe Policy Manager.')
mibBuilder.exportSymbols("RSVP-MIB", rsvpResvStatus=rsvpResvStatus, rsvpResvNumber=rsvpResvNumber, rsvpResvFwdInterface=rsvpResvFwdInterface, rsvpSenderDestAddr=rsvpSenderDestAddr, rsvpNbrAddress=rsvpNbrAddress, rsvpSenderHopLih=rsvpSenderHopLih, rsvpResvFwdRSpecSlack=rsvpResvFwdRSpecSlack, rsvpIfTTL=rsvpIfTTL, rsvpSenderOutInterfaceStatus=rsvpSenderOutInterfaceStatus, rsvpResvService=rsvpResvService, rsvpNotificationGroup=rsvpNotificationGroup, rsvpSenderAdspecCtrlLoadSvc=rsvpSenderAdspecCtrlLoadSvc, rsvpSenderAdspecGuaranteedMtu=rsvpSenderAdspecGuaranteedMtu, rsvpNotifications=rsvpNotifications, rsvpResvFwdLastChange=rsvpResvFwdLastChange, rsvpResvPort=rsvpResvPort, rsvpSenderNewIndex=rsvpSenderNewIndex, rsvpResvFlowId=rsvpResvFlowId, rsvpResvTTL=rsvpResvTTL, rsvpResvFwdRSpecRate=rsvpResvFwdRSpecRate, rsvpIfEnabled=rsvpIfEnabled, rsvpResvTSpecPeakRate=rsvpResvTSpecPeakRate, rsvpResvFwdHopAddr=rsvpResvFwdHopAddr, rsvpGenObjects=rsvpGenObjects, rsvpSenderProtocol=rsvpSenderProtocol, rsvpResvFwdInterval=rsvpResvFwdInterval, rsvpSenderAdspecGuaranteedMinLatency=rsvpSenderAdspecGuaranteedMinLatency, rsvpResvRSVPHop=rsvpResvRSVPHop, rsvpResvDestAddr=rsvpResvDestAddr, rsvpResvFwdPolicy=rsvpResvFwdPolicy, rsvpResvFwdProtocol=rsvpResvFwdProtocol, rsvpCompliance=rsvpCompliance, rsvp=rsvp, rsvpSessionEntry=rsvpSessionEntry, rsvpResvPolicy=rsvpResvPolicy, rsvpResvFwdEntry=rsvpResvFwdEntry, rsvpSessionNewIndex=rsvpSessionNewIndex, rsvpSessionNumber=rsvpSessionNumber, rsvpResvFwdTSpecMinTU=rsvpResvFwdTSpecMinTU, rsvpResvFwdScope=rsvpResvFwdScope, rsvpIfTable=rsvpIfTable, rsvpSenderInterval=rsvpSenderInterval, rsvpResvHopAddr=rsvpResvHopAddr, rsvpSenderAdspecCtrlLoadPathBw=rsvpSenderAdspecCtrlLoadPathBw, rsvpResvFwdNumber=rsvpResvFwdNumber, rsvpResvFwdTable=rsvpResvFwdTable, rsvpSenderAdspecGuaranteedCtot=rsvpSenderAdspecGuaranteedCtot, rsvpSenderTSpecMaxTU=rsvpSenderTSpecMaxTU, rsvpSenderOutInterfaceTable=rsvpSenderOutInterfaceTable, rsvpResvShared=rsvpResvShared, rsvpNbrProtocol=rsvpNbrProtocol, rsvpSenderAdspecCtrlLoadBreak=rsvpSenderAdspecCtrlLoadBreak, rsvpSenderAdspecCtrlLoadMinLatency=rsvpSenderAdspecCtrlLoadMinLatency, rsvpSenderAdspecBreak=rsvpSenderAdspecBreak, rsvpIfGroup=rsvpIfGroup, rsvpIfRouteDelay=rsvpIfRouteDelay, rsvpResvFwdGroup=rsvpResvFwdGroup, PYSNMP_MODULE_ID=rsvp, rsvpSenderAdspecPathBw=rsvpSenderAdspecPathBw, rsvpResvFwdTSpecBurst=rsvpResvFwdTSpecBurst, rsvpSenderDestAddrLength=rsvpSenderDestAddrLength, rsvpSenderHopAddr=rsvpSenderHopAddr, rsvpSenderDestPort=rsvpSenderDestPort, rsvpSenderTSpecRate=rsvpSenderTSpecRate, rsvpIfStatus=rsvpIfStatus, newFlow=newFlow, rsvpSessionDestAddr=rsvpSessionDestAddr, rsvpIfRefreshBlockadeMultiple=rsvpIfRefreshBlockadeMultiple, rsvpResvFwdSenderAddr=rsvpResvFwdSenderAddr, rsvpSenderFlowId=rsvpSenderFlowId, rsvpResvScope=rsvpResvScope, rsvpResvFwdService=rsvpResvFwdService, rsvpResvExplicit=rsvpResvExplicit, rsvpResvType=rsvpResvType, rsvpResvFwdShared=rsvpResvFwdShared, rsvpResvTSpecRate=rsvpResvTSpecRate, rsvpSenderTSpecMinTU=rsvpSenderTSpecMinTU, rsvpResvGroup=rsvpResvGroup, rsvpResvFwdSenderAddrLength=rsvpResvFwdSenderAddrLength, rsvpResvNewIndex=rsvpResvNewIndex, rsvpSenderAdspecGuaranteedDsum=rsvpSenderAdspecGuaranteedDsum, rsvpSenderAdspecGuaranteedPathBw=rsvpSenderAdspecGuaranteedPathBw, rsvpSenderTSpecBurst=rsvpSenderTSpecBurst, rsvpSessionProtocol=rsvpSessionProtocol, rsvpResvTable=rsvpResvTable, rsvpSenderTTL=rsvpSenderTTL, rsvpIfRefreshMultiple=rsvpIfRefreshMultiple, rsvpSenderAdspecCtrlLoadMtu=rsvpSenderAdspecCtrlLoadMtu, rsvpResvFwdTSpecPeakRate=rsvpResvFwdTSpecPeakRate, rsvpSenderAdspecGuaranteedBreak=rsvpSenderAdspecGuaranteedBreak, rsvpResvFwdDestAddr=rsvpResvFwdDestAddr, rsvpSenderAdspecGuaranteedDtot=rsvpSenderAdspecGuaranteedDtot, rsvpResvFwdExplicit=rsvpResvFwdExplicit, RsvpEncapsulation=RsvpEncapsulation, rsvpSenderAddr=rsvpSenderAddr, rsvpSenderStatus=rsvpSenderStatus, rsvpObjects=rsvpObjects, rsvpSenderOutInterfaceEntry=rsvpSenderOutInterfaceEntry, rsvpResvFwdTTL=rsvpResvFwdTTL, rsvpSenderPort=rsvpSenderPort, rsvpIfNbrs=rsvpIfNbrs, rsvpSenderAdspecGuaranteedCsum=rsvpSenderAdspecGuaranteedCsum, rsvpResvFwdDestPort=rsvpResvFwdDestPort, rsvpSenderRSVPHop=rsvpSenderRSVPHop, rsvpSenderAdspecHopCount=rsvpSenderAdspecHopCount, lostFlow=lostFlow, rsvpResvInterface=rsvpResvInterface, rsvpSessionDestAddrLength=rsvpSessionDestAddrLength, rsvpResvTSpecMinTU=rsvpResvTSpecMinTU, rsvpResvFwdStatus=rsvpResvFwdStatus, rsvpResvLastChange=rsvpResvLastChange, rsvpResvFwdRSVPHop=rsvpResvFwdRSVPHop, rsvpSenderGroup=rsvpSenderGroup, rsvpNbrGroup=rsvpNbrGroup, rsvpResvRSpecSlack=rsvpResvRSpecSlack, rsvpResvProtocol=rsvpResvProtocol, rsvpIfUdpNbrs=rsvpIfUdpNbrs, rsvpSenderAddrLength=rsvpSenderAddrLength, rsvpSenderTable=rsvpSenderTable, rsvpResvFwdPort=rsvpResvFwdPort, rsvpResvFwdTSpecRate=rsvpResvFwdTSpecRate, rsvpSessionRequests=rsvpSessionRequests, rsvpSenderEntry=rsvpSenderEntry, rsvpResvDestAddrLength=rsvpResvDestAddrLength, rsvpSessionReceivers=rsvpSessionReceivers, rsvpResvFwdFlowId=rsvpResvFwdFlowId, rsvpResvRSpecRate=rsvpResvRSpecRate, rsvpCompliances=rsvpCompliances, rsvpSenderAdspecMtu=rsvpSenderAdspecMtu, rsvpResvSenderAddrLength=rsvpResvSenderAddrLength, rsvpSessionGroup=rsvpSessionGroup, rsvpConformance=rsvpConformance, rsvpSenderPolicy=rsvpSenderPolicy, rsvpSenderType=rsvpSenderType, rsvpResvHopLih=rsvpResvHopLih, rsvpIfUdpRequired=rsvpIfUdpRequired, rsvpNbrTable=rsvpNbrTable, rsvpResvEntry=rsvpResvEntry, rsvpResvFwdType=rsvpResvFwdType, rsvpNbrEntry=rsvpNbrEntry, rsvpSenderAdspecGuaranteedSvc=rsvpSenderAdspecGuaranteedSvc, rsvpResvTSpecBurst=rsvpResvTSpecBurst, rsvpResvDestPort=rsvpResvDestPort, rsvpIfRefreshInterval=rsvpIfRefreshInterval, rsvpSessionPort=rsvpSessionPort, rsvpSenderAdspecMinLatency=rsvpSenderAdspecMinLatency, rsvpSenderOutInterfaceGroup=rsvpSenderOutInterfaceGroup, rsvpSenderAdspecGuaranteedHopCount=rsvpSenderAdspecGuaranteedHopCount, rsvpResvTSpecMaxTU=rsvpResvTSpecMaxTU, rsvpGroups=rsvpGroups, rsvpNotificationsPrefix=rsvpNotificationsPrefix, rsvpSenderInterface=rsvpSenderInterface, rsvpIfEntry=rsvpIfEntry, rsvpSessionSenders=rsvpSessionSenders, rsvpResvFwdNewIndex=rsvpResvFwdNewIndex, rsvpSenderAdspecCtrlLoadHopCount=rsvpSenderAdspecCtrlLoadHopCount, rsvpIfIpNbrs=rsvpIfIpNbrs, rsvpBadPackets=rsvpBadPackets, rsvpSenderNumber=rsvpSenderNumber, rsvpResvFwdHopLih=rsvpResvFwdHopLih, rsvpSenderTSpecPeakRate=rsvpSenderTSpecPeakRate, rsvpSessionTable=rsvpSessionTable, rsvpSenderLastChange=rsvpSenderLastChange, rsvpResvFwdTSpecMaxTU=rsvpResvFwdTSpecMaxTU, rsvpGenObjectsGroup=rsvpGenObjectsGroup, rsvpResvFwdDestAddrLength=rsvpResvFwdDestAddrLength, rsvpResvInterval=rsvpResvInterval, RefreshInterval=RefreshInterval, rsvpNbrStatus=rsvpNbrStatus, rsvpResvSenderAddr=rsvpResvSenderAddr, rsvpSessionType=rsvpSessionType)
