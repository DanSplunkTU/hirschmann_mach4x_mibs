#
# PySNMP MIB module ALCATEL-IND1-MAC-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-MAC-SERVER-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 17:15:06 2022
# On host fv-az135-792 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
hardentIND1Physical, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "hardentIND1Physical")
physicalIndex, = mibBuilder.importSymbols("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, ModuleIdentity, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Integer32, Gauge32, Counter32, NotificationType, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Integer32", "Gauge32", "Counter32", "NotificationType", "Unsigned32", "Bits")
MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
alcatelIND1MacServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3))
alcatelIND1MacServerMIB.setRevisions(('2014-01-24 00:00', '2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setRevisionsDescriptions(('Deprecated the chasRingStatus object', 'Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The MIB module for Chassis Supervision Mac Server entity.',))
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1MacServerMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the Chassis Supervision\n        MAC Server MIB for allocating MACs to applications (like routing).\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1MacServerMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBNotifications.setDescription('Branch For Mac Server MIB Subsystem Notifications.')
alcatelIND1MacServerMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBObjects.setDescription('Branch For Chassis Supervision MAC Server MIB\n            Subsystem Managed Objects.')
alcatelIND1MacServerMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBConformance.setDescription('Branch For Chassis Supervision MAC Server MIB\n            Subsystem Conformance Information.')
alcatelIND1MacServerMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBGroups.setDescription('Branch For Chassis Supervision MAC Server MIB\n            Subsystem Units Of Conformance.')
alcatelIND1MacServerMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 2))
if mibBuilder.loadTexts: alcatelIND1MacServerMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBCompliances.setDescription('Branch For Chassis Supervision MAC Server MIB\n            Subsystem Compliance Statements.')
class MacAddrGlobalLocalStatusType(TextualConvention, Integer32):
    description = 'The MAC Address administration type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("globallyAdministered", 2), ("locallyAdministered", 3), ("globallyAdministeredOverlap", 4))

class MacRangeIndex(TextualConvention, Integer32):
    description = 'The MAC Address index value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 20)

chasMacAddressRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: chasMacAddressRangeTable.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressRangeTable.setDescription('Information about the MAC Address Ranges for a particular physical\n        entity.  This data is only available for the interfacing CMM.')
chasMacAddrRangeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasMacRangeIndex"))
if mibBuilder.loadTexts: chasMacAddrRangeTableEntry.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrRangeTableEntry.setDescription('Definition of the MAC Address Ranges table entry for a particular\n        physical entity.  This data is only available for the interfacing CMM.\n\n        There can be up to MacRangeIndex MAC ranges per physical entity.\n        The chasMacAddressRangeTable on the Primary should be identical\n        to the one on the Secondary.\n\n        For creation of a MAC Address range, the following 4 fields in\n        ChasMacAddrRangeTableEntry are required (must have all 4):\n             chasMacAddressStart\n             chasMacAddressCount\n             chasGlobalLocal\n             chasMacRowStatus : must be set last\n\n        For deletion of a MAC Address range, the following 2 fields in\n        ChasMacAddrRangeTableEntry are required (must have all 2):\n               chasMacRangeIndex\n              chasMacRowStatus : must be set last')
chasMacRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 1), MacRangeIndex())
if mibBuilder.loadTexts: chasMacRangeIndex.setStatus('current')
if mibBuilder.loadTexts: chasMacRangeIndex.setDescription('Represents the index of the MAC Address range.')
chasMacAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacAddressStart.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressStart.setDescription('This is the starting MAC Address in the range.  This\n        field is required for the creation of a MAC Address range.')
chasMacAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacAddressCount.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressCount.setDescription('This is the number of MAC addresses in the range.  This\n        field is required for the creation of a MAC Address range.')
chasGlobalLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 4), MacAddrGlobalLocalStatusType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasGlobalLocal.setStatus('current')
if mibBuilder.loadTexts: chasGlobalLocal.setDescription('\n        Specifies whether the MAC Address/range is locally/globally\n        administered.  This field is required for the creation of\n        a MAC Address range.')
chasMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: chasMacRowStatus.setDescription('Row status for creating/deleting mac ranges.')
chasMacAddressAllocTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2), )
if mibBuilder.loadTexts: chasMacAddressAllocTable.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressAllocTable.setDescription('Information specifying whether the MAC Address has been allocated\n        for a particular Mac Range on a physical entity.  This data is only\n        available for the interfacing CMM.')
chasMacAddressAllocTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasAppId"), (0, "ALCATEL-IND1-MAC-SERVER-MIB", "chasObjectId"))
if mibBuilder.loadTexts: chasMacAddressAllocTableEntry.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressAllocTableEntry.setDescription('Definition of the entry chasMacAddressAllocTable for a\n        particular object managed by a particular application.')
chasAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: chasAppId.setStatus('current')
if mibBuilder.loadTexts: chasAppId.setDescription('Represents the Id of the application requesting the allocation of a\nMAC Address.')
chasObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: chasObjectId.setStatus('current')
if mibBuilder.loadTexts: chasObjectId.setDescription('Represents the Id of the application requesting the allocation/\ndeallocation of a MAC Address.')
chasAllocMacRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 3), MacRangeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAllocMacRangeIndex.setStatus('current')
if mibBuilder.loadTexts: chasAllocMacRangeIndex.setDescription('Represents the object Id for which the MAC Address has been allocated\n/deallocated')
chasAllocMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAllocMacAddress.setStatus('current')
if mibBuilder.loadTexts: chasAllocMacAddress.setDescription('This the Mac Address that has been allocated.')
chasAllocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chasAllocRowStatus.setStatus('current')
if mibBuilder.loadTexts: chasAllocRowStatus.setDescription('Row status for allocating/deallocating\n        a Mac address for a particular chaAppId/chasObjectId.')
chasMacAddrDupAllocStatusTable = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3))
chasMacAddrDuplicationStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrDuplicationStatus.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrDuplicationStatus.setDescription('Information specifying whether the MAC Address ranges from the EEPROM\n        should be duplicated  with the local bit set.  This will provide\n        additional ranges (locally administered ranges) for allocation.\n        This data is only available for the interfacing CMM.')
chasMacAddrAllocLocallyAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrAllocLocallyAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrAllocLocallyAdminStatus.setDescription('Information specifying whether ONLY the locally administered MAC\n        Address should be allocated.  This data is only available for the\n        interfacing CMM.')
chasMacAddrRetentionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4))
chasMacAddrRetentionStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasMacAddrRetentionStatus.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrRetentionStatus.setDescription('Information specifying the status of MAC Address retention functionality.')
chasPossibleDuplicateMacTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasPossibleDuplicateMacTrapStatus.setStatus('current')
if mibBuilder.loadTexts: chasPossibleDuplicateMacTrapStatus.setDescription('Information specifying the status of duplicate MAC address trap.')
chasRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2))).clone('notPresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasRingStatus.setStatus('deprecated')
if mibBuilder.loadTexts: chasRingStatus.setDescription('Information specifying the whether the ring is present in the stack or not.\n         Deprecated, stack is now a Virtual Chassis systems.\n         Use ALCATEL-INDI-VIRTUAL-CHASSIS-MIB for status of Virtual Chassis.')
chasBaseMacAddrSource = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("retained", 1), ("eEPROM", 2))).clone('eEPROM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBaseMacAddrSource.setStatus('current')
if mibBuilder.loadTexts: chasBaseMacAddrSource.setDescription('Information specifying the source of the currently used System base MAC.')
chasBaseMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBaseMacAddr.setStatus('current')
if mibBuilder.loadTexts: chasBaseMacAddr.setDescription('Base MAC address used in the system currently.')
chasBaseMacReleaseAction = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSignificant", 0), ("releaseMac", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBaseMacReleaseAction.setStatus('current')
if mibBuilder.loadTexts: chasBaseMacReleaseAction.setDescription('This object performs the action to release the retained base MAC address')
chasBaseMacAddrRetentionTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 4, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasBaseMacAddrRetentionTimer.setStatus('current')
if mibBuilder.loadTexts: chasBaseMacAddrRetentionTimer.setDescription('This object specifies the time in minutes between the assumption of a retained\n         MAC address and the generation of a log message and the duplicate MAC address trap')
alaMacServerTrapObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5))
chasTrapMacRangeIndex = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5, 1), MacRangeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTrapMacRangeIndex.setStatus('current')
if mibBuilder.loadTexts: chasTrapMacRangeIndex.setDescription('The mac range index of the involved object.')
baseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 1, 5, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMacAddress.setStatus('current')
if mibBuilder.loadTexts: baseMacAddress.setDescription('The base MAC Address.')
chassisTrapsMacOverlap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 1)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapMacRangeIndex"))
if mibBuilder.loadTexts: chassisTrapsMacOverlap.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsMacOverlap.setDescription('A MAC range overlap was found in the backplane eeprom')
chassisTrapsPossibleDuplicateMac = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 2)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"))
if mibBuilder.loadTexts: chassisTrapsPossibleDuplicateMac.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsPossibleDuplicateMac.setDescription('The old Master chassis cannot be detected in the VirtualChassis. There\n        is a possiblity of duplicate MAC address in the network.')
chassisTrapsDuplicateMacCleared = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 0, 3)).setObjects(("ALCATEL-IND1-CHASSIS-MIB", "physicalIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"))
if mibBuilder.loadTexts: chassisTrapsDuplicateMacCleared.setStatus('current')
if mibBuilder.loadTexts: chassisTrapsDuplicateMacCleared.setDescription('The old Master chassis has rejoined the VirtualChassis as a slave. There\n        is no longer a possiblity of duplicate MAC address in the network.')
alcatelIND1MacServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 2, 1)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRangeGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressAllocGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrDupAllocStatusGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapsMacOverlapGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRetentionGroup"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapsPossibleDuplicateMacGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1MacServerMIBCompliance = alcatelIND1MacServerMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1MacServerMIBCompliance.setDescription('Compliance statement for Chassis Supervision.')
chasMacAddrRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 1)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressStart"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddressCount"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasGlobalLocal"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrRangeGroup = chasMacAddrRangeGroup.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrRangeGroup.setDescription('Chassis Supervision MAC Address Range Group.')
chasMacAddressAllocGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 2)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocMacRangeIndex"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocMacAddress"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasAllocRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddressAllocGroup = chasMacAddressAllocGroup.setStatus('current')
if mibBuilder.loadTexts: chasMacAddressAllocGroup.setDescription('Chassis Supervision MAC Address Physical Allocation Group.')
chasMacAddrDupAllocStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 3)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrDuplicationStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrAllocLocallyAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrDupAllocStatusGroup = chasMacAddrDupAllocStatusGroup.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrDupAllocStatusGroup.setDescription('Chassis Supervision MAC Address Physical Duplication Allocation\nStatus Group.')
chasTrapsMacOverlapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 4)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsMacOverlap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasTrapsMacOverlapGroup = chasTrapsMacOverlapGroup.setStatus('current')
if mibBuilder.loadTexts: chasTrapsMacOverlapGroup.setDescription('MAC range overlap Notification Group.')
chasMacAddrRetentionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 5)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chasMacAddrRetentionStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasPossibleDuplicateMacTrapStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasRingStatus"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddrSource"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddr"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacReleaseAction"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasBaseMacAddrRetentionTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasMacAddrRetentionGroup = chasMacAddrRetentionGroup.setStatus('current')
if mibBuilder.loadTexts: chasMacAddrRetentionGroup.setDescription('Chassis Supervision MAC Address Physical Duplication Allocation\nStatus Group.')
chasTrapsPossibleDuplicateMacGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 6)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsPossibleDuplicateMac"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chassisTrapsDuplicateMacCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasTrapsPossibleDuplicateMacGroup = chasTrapsPossibleDuplicateMacGroup.setStatus('current')
if mibBuilder.loadTexts: chasTrapsPossibleDuplicateMacGroup.setDescription('Duplicate MAC address Notification Group.')
chasNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 1, 1, 1, 3, 2, 1, 7)).setObjects(("ALCATEL-IND1-MAC-SERVER-MIB", "baseMacAddress"), ("ALCATEL-IND1-MAC-SERVER-MIB", "chasTrapMacRangeIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    chasNotificationObjectGroup = chasNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: chasNotificationObjectGroup.setDescription('Chassis Supervision MAC Server notification object\nStatus Group.')
mibBuilder.exportSymbols("ALCATEL-IND1-MAC-SERVER-MIB", alcatelIND1MacServerMIB=alcatelIND1MacServerMIB, chasAllocMacAddress=chasAllocMacAddress, alcatelIND1MacServerMIBObjects=alcatelIND1MacServerMIBObjects, chasRingStatus=chasRingStatus, chasTrapMacRangeIndex=chasTrapMacRangeIndex, alcatelIND1MacServerMIBCompliances=alcatelIND1MacServerMIBCompliances, chasBaseMacAddr=chasBaseMacAddr, chasMacAddrRangeTableEntry=chasMacAddrRangeTableEntry, chassisTrapsMacOverlap=chassisTrapsMacOverlap, chasNotificationObjectGroup=chasNotificationObjectGroup, chasMacAddressAllocTable=chasMacAddressAllocTable, chasMacAddressAllocTableEntry=chasMacAddressAllocTableEntry, alcatelIND1MacServerMIBNotifications=alcatelIND1MacServerMIBNotifications, MacAddrGlobalLocalStatusType=MacAddrGlobalLocalStatusType, chasObjectId=chasObjectId, MacRangeIndex=MacRangeIndex, chasMacAddressRangeTable=chasMacAddressRangeTable, chasMacAddrDuplicationStatus=chasMacAddrDuplicationStatus, chasMacAddrRetentionStatus=chasMacAddrRetentionStatus, chasTrapsMacOverlapGroup=chasTrapsMacOverlapGroup, chasAppId=chasAppId, chasMacAddrRangeGroup=chasMacAddrRangeGroup, chasMacRowStatus=chasMacRowStatus, chasMacAddressCount=chasMacAddressCount, chasMacAddrAllocLocallyAdminStatus=chasMacAddrAllocLocallyAdminStatus, chasBaseMacAddrSource=chasBaseMacAddrSource, chasGlobalLocal=chasGlobalLocal, chassisTrapsPossibleDuplicateMac=chassisTrapsPossibleDuplicateMac, chasMacAddrRetentionObjects=chasMacAddrRetentionObjects, alcatelIND1MacServerMIBGroups=alcatelIND1MacServerMIBGroups, chasMacAddrDupAllocStatusTable=chasMacAddrDupAllocStatusTable, PYSNMP_MODULE_ID=alcatelIND1MacServerMIB, chasAllocMacRangeIndex=chasAllocMacRangeIndex, chasAllocRowStatus=chasAllocRowStatus, chasPossibleDuplicateMacTrapStatus=chasPossibleDuplicateMacTrapStatus, chasMacAddrDupAllocStatusGroup=chasMacAddrDupAllocStatusGroup, chasBaseMacAddrRetentionTimer=chasBaseMacAddrRetentionTimer, chasTrapsPossibleDuplicateMacGroup=chasTrapsPossibleDuplicateMacGroup, chasMacAddressAllocGroup=chasMacAddressAllocGroup, alcatelIND1MacServerMIBCompliance=alcatelIND1MacServerMIBCompliance, chasMacAddressStart=chasMacAddressStart, chasMacAddrRetentionGroup=chasMacAddrRetentionGroup, chasBaseMacReleaseAction=chasBaseMacReleaseAction, baseMacAddress=baseMacAddress, chasMacRangeIndex=chasMacRangeIndex, alaMacServerTrapObjs=alaMacServerTrapObjs, alcatelIND1MacServerMIBConformance=alcatelIND1MacServerMIBConformance, chassisTrapsDuplicateMacCleared=chassisTrapsDuplicateMacCleared)
