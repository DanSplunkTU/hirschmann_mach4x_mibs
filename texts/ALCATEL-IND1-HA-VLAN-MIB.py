#
# PySNMP MIB module ALCATEL-IND1-HA-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-HA-VLAN-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 15:33:31 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1HAVlan, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1HAVlan")
MultiChassisId, = mibBuilder.importSymbols("ALCATEL-IND1-MULTI-CHASSIS-MIB", "MultiChassisId")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibIdentifier, Unsigned32, iso, Counter32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Integer32, ModuleIdentity, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Unsigned32", "iso", "Counter32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Integer32", "ModuleIdentity", "TimeTicks", "Gauge32")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
alcatelIND1HAVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1))
alcatelIND1HAVlanMIB.setRevisions(('2010-05-13 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1HAVlanMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The MIB module for High Availability Vlan entity.',))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIB.setOrganization('Alcatel-Lucent, Enterprise Solutions Division')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n      version of this document is used with the products in question:\n\n                 Alcatel-Lucent, Enterprise Solutions Division\n                (Formerly Alcatel Internetworking, Incorporated)\n                        26801 West Agoura Road\n                     Agoura Hills, CA  91301-5122\n                       United States Of America\n\n     Telephone:               North America  +1 800 995 2696\n                              Latin America  +1 877 919 9526\n                              Europe         +31 23 556 0100\n                              Asia           +65 394 7933\n                              All Other      +1 818 878 4507\n\n     Electronic Mail:         support@ind.alcatel.com\n     World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n     File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n        For the Birds Of Prey Product Line, this is the MIB module for\n              address learning mac addresses entity.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                   Copyright (C) 1995-2007 Alcatel-Lucent\n                       ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1HAVlanMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 0))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBNotifications.setDescription('Branch For High Availability Vlan Module MIB Subsystem Notifications.')
alcatelIND1HAVlanMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBObjects.setDescription('Branch For High Availability Vlan Module MIB Subsystem Managed Objects.')
alcatelIND1HAVlanMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBConformance.setDescription('Branch for High Availability Vlan Module MIB Subsystem Conformance Information.')
alcatelIND1HAVlanMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBGroups.setDescription('Branch for High Availability Vlan Module MIB Subsystem Units of Conformance.')
alcatelIND1HAVlanMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBCompliances.setDescription('Branch for High Availability Vlan Module MIB Subsystem Compliance Statements.')
alaHAVlanCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1))
alaHAVlanClusterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaHAVlanClusterTable.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterTable.setDescription('A list of HA VLAN clusters in the system.')
alaHAVlanClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"))
if mibBuilder.loadTexts: alaHAVlanClusterEntry.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterEntry.setDescription('A HA VLAN Cluster entry.')
alaHAVlanClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaHAVlanClusterId.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterId.setDescription('The number identifying a cluster.')
alaHAVlanClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterName.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterName.setDescription('Textual description of the cluster.')
alaHAVlanClusterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterAdminStatus.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterAdminStatus.setDescription('Admin control to enable/disable a cluster')
alaHAVlanClusterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterOperStatus.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterOperStatus.setDescription('Operational status of a cluster')
alaHAVlanClusterOperStatusFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 0), ("novlan", 1), ("vlandown", 2), ("vpanotforwarding", 3), ("ipinterfacedown", 4), ("noigmpmembers", 5), ("nomacaddress", 6), ("nomulticastip", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterOperStatusFlag.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterOperStatusFlag.setDescription('Operational status flag describing reason of the cluster \n               Operational status.')
alaHAVlanClusterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l2mode", 1), ("l3mode", 2))).clone('l2mode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMode.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMode.setDescription('This object specifies the mode of the cluster.')
alaHAVlanClusterVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterVlan.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterVlan.setDescription('The Vlan associated with the cluster.In case of L3 cluster\n                  it is invalid (value 0)')
alaHAVlanClusterMacAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("static", 2), ("dynamic", 3))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMacAddressType.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMacAddressType.setDescription('The type of ARP resolution used in L3 cluster')
alaHAVlanClusterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMacAddress.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMacAddress.setDescription('The Mac-address associated with the L2 cluster\n                  or the ARP entry associated with L3 cluster')
alaHAVlanClusterInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 10), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipv4", 1))).clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterInetAddressType.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterInetAddressType.setDescription('The type of IP address associated with the L3 cluster')
alaHAVlanClusterInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 11), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterInetAddress.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterInetAddress.setDescription('The IP address based on \n               alaHAVlanClusterInetAddressType associated with the L3 \n               cluster.')
alaHAVlanClusterMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMulticastStatus.setDescription('Admin control to enable/disable IGMP on a cluster')
alaHAVlanClusterMulticastInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 13), InetAddressType().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMulticastInetAddressType.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMulticastInetAddressType.setDescription('The type of Multicast address associated with the L3 cluster')
alaHAVlanClusterMulticastInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 14), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 4)).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterMulticastInetAddress.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterMulticastInetAddress.setDescription('The IP multicast addess of the cluster')
alaHAVlanClusterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterRowStatus.setDescription('Row status to control creation/deletion of the clusters')
alaHAVlanClusterMcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("outofSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterMcmStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaHAVlanClusterMcmStatus.setDescription('Multi-chassis status of a cluster')
alaHAVlanClusterMcmStatusFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("mcdown", 1), ("operationaldown", 2), ("allportmodenotsupported", 3), ("modemismatch", 4), ("vlanmismatch", 5), ("macmismatch", 6), ("ipmismatch", 7), ("arptypemismatch", 8), ("igmpstatusmismatch", 9), ("mcastipmismatch", 10), ("syncinprogress", 11), ("invalidmac", 12), ("nonvipvlannotsupportedinl3mode", 13), ("noflag", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterMcmStatusFlag.setStatus('deprecated')
if mibBuilder.loadTexts: alaHAVlanClusterMcmStatusFlag.setDescription('Multi-chassis status flag describing reason of the cluster \n               Multi-chassis status.')
alaHAVlanClusterVflStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterVflStatus.setStatus('deprecated')
if mibBuilder.loadTexts: alaHAVlanClusterVflStatus.setDescription('VFL status of a cluster')
alaHAVlanClusterLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterLoopback.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterLoopback.setDescription('Admin control to enable/disable LOOPBACK for a cluster')
alaHAVlanClusterPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2))
alaHAVlanClusterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaHAVlanClusterPortTable.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortTable.setDescription('The  port members of a cluster.')
alaHAVlanClusterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"), (0, "ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortIfIndex"))
if mibBuilder.loadTexts: alaHAVlanClusterPortEntry.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortEntry.setDescription('A HA VLAN cluster ports entry.')
alaHAVlanClusterPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaHAVlanClusterPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortIfIndex.setDescription('The ifindex identifying the cluster port.\n                 An ifindex of 1 shall be used for all port')
alaHAVlanClusterPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaHAVlanClusterPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortRowStatus.setDescription('Row status to control creation/deletion of ports to\n               the clusters')
alaHAVlanClusterPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterPortType.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortType.setDescription('Port type of the cluster; whether\n                 dynamically (IGMP enabled) assigned to\n                 cluster or statically assigned')
alaHAVlanClusterPortValid = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaHAVlanClusterPortValid.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortValid.setDescription('Port validity of the cluster; whether port\n                 is currently active/inactive')
alaHAVlanClusterPeerMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 0, 1)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"))
if mibBuilder.loadTexts: alaHAVlanClusterPeerMismatch.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPeerMismatch.setDescription('The trap shall be raised when parameteras configured for this cluster ID\n                 (Level 1 check) does not match accross the MCLAG peers.')
alaHAVlanMCPeerMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 0, 2)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanMultiChassisId"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortIfIndex"))
if mibBuilder.loadTexts: alaHAVlanMCPeerMismatch.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanMCPeerMismatch.setDescription('The trap shall be raised when the cluster parameters are matching on the\n                 peers but MCLAG is not configured or clusters are not in operational\n                 state.')
alaHAVlanDynamicMAC = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 0, 3)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterInetAddress"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMacAddress"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortIfIndex"))
if mibBuilder.loadTexts: alaHAVlanDynamicMAC.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanDynamicMAC.setDescription('The trap shall be raised when the dynamic MAC learnt on\n                 non server-cluster port')
alaHAVlanNotificationObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 3))
alaHAVlanMultiChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 1, 3, 1), MultiChassisId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaHAVlanMultiChassisId.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanMultiChassisId.setDescription('The Multi Chassis ID identifying the Multi Chassis Peer.')
alcatelIND1HAVlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterGroup"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortGroup"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1HAVlanMIBCompliance = alcatelIND1HAVlanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1HAVlanMIBCompliance.setDescription('Compliance statement for HA VLAN.')
alaHAVlanClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterId"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterName"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterAdminStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterOperStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterOperStatusFlag"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMode"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterVlan"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMacAddressType"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMacAddress"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterInetAddressType"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterInetAddress"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMulticastStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMulticastInetAddressType"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMulticastInetAddress"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterRowStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMcmStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterMcmStatusFlag"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterVflStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaHAVlanClusterGroup = alaHAVlanClusterGroup.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterGroup.setDescription('Collection of objects for management of HA Vlan Clusters.')
alaHAVlanClusterPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortIfIndex"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortRowStatus"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortType"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPortValid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaHAVlanClusterPortGroup = alaHAVlanClusterPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanClusterPortGroup.setDescription('Collection of objects for management of HA Vlan Cluster ports.')
alaHAVlanNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanMultiChassisId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaHAVlanNotificationObjectGroup = alaHAVlanNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanNotificationObjectGroup.setDescription('Collection of trap objects for management of HAVLAN.')
alaHAVlanNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 64, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanClusterPeerMismatch"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanMCPeerMismatch"), ("ALCATEL-IND1-HA-VLAN-MIB", "alaHAVlanDynamicMAC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaHAVlanNotificationGroup = alaHAVlanNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: alaHAVlanNotificationGroup.setDescription('Collection of notifications for HAVLAN.')
mibBuilder.exportSymbols("ALCATEL-IND1-HA-VLAN-MIB", alaHAVlanClusterEntry=alaHAVlanClusterEntry, alaHAVlanClusterMode=alaHAVlanClusterMode, alaHAVlanClusterPortGroup=alaHAVlanClusterPortGroup, alaHAVlanMultiChassisId=alaHAVlanMultiChassisId, alaHAVlanClusterOperStatus=alaHAVlanClusterOperStatus, alaHAVlanCluster=alaHAVlanCluster, alaHAVlanClusterInetAddressType=alaHAVlanClusterInetAddressType, alaHAVlanClusterPortIfIndex=alaHAVlanClusterPortIfIndex, alaHAVlanDynamicMAC=alaHAVlanDynamicMAC, alaHAVlanClusterPortValid=alaHAVlanClusterPortValid, alaHAVlanClusterVflStatus=alaHAVlanClusterVflStatus, alaHAVlanClusterPortTable=alaHAVlanClusterPortTable, alaHAVlanMCPeerMismatch=alaHAVlanMCPeerMismatch, alaHAVlanClusterMulticastStatus=alaHAVlanClusterMulticastStatus, PYSNMP_MODULE_ID=alcatelIND1HAVlanMIB, alaHAVlanNotificationObjectGroup=alaHAVlanNotificationObjectGroup, alaHAVlanClusterAdminStatus=alaHAVlanClusterAdminStatus, alaHAVlanClusterLoopback=alaHAVlanClusterLoopback, alcatelIND1HAVlanMIBCompliance=alcatelIND1HAVlanMIBCompliance, alaHAVlanNotificationGroup=alaHAVlanNotificationGroup, alaHAVlanClusterPortRowStatus=alaHAVlanClusterPortRowStatus, alaHAVlanClusterMulticastInetAddress=alaHAVlanClusterMulticastInetAddress, alaHAVlanClusterGroup=alaHAVlanClusterGroup, alaHAVlanClusterRowStatus=alaHAVlanClusterRowStatus, alaHAVlanClusterInetAddress=alaHAVlanClusterInetAddress, alaHAVlanClusterVlan=alaHAVlanClusterVlan, alaHAVlanClusterMcmStatusFlag=alaHAVlanClusterMcmStatusFlag, alcatelIND1HAVlanMIB=alcatelIND1HAVlanMIB, alaHAVlanClusterPeerMismatch=alaHAVlanClusterPeerMismatch, alcatelIND1HAVlanMIBGroups=alcatelIND1HAVlanMIBGroups, alaHAVlanClusterMulticastInetAddressType=alaHAVlanClusterMulticastInetAddressType, alaHAVlanClusterMcmStatus=alaHAVlanClusterMcmStatus, alaHAVlanClusterPortType=alaHAVlanClusterPortType, alaHAVlanClusterPort=alaHAVlanClusterPort, alaHAVlanClusterPortEntry=alaHAVlanClusterPortEntry, alaHAVlanClusterOperStatusFlag=alaHAVlanClusterOperStatusFlag, alcatelIND1HAVlanMIBConformance=alcatelIND1HAVlanMIBConformance, alaHAVlanClusterName=alaHAVlanClusterName, alaHAVlanClusterMacAddressType=alaHAVlanClusterMacAddressType, alcatelIND1HAVlanMIBObjects=alcatelIND1HAVlanMIBObjects, alaHAVlanClusterMacAddress=alaHAVlanClusterMacAddress, alaHAVlanClusterId=alaHAVlanClusterId, alcatelIND1HAVlanMIBNotifications=alcatelIND1HAVlanMIBNotifications, alaHAVlanClusterTable=alaHAVlanClusterTable, alaHAVlanNotificationObj=alaHAVlanNotificationObj, alcatelIND1HAVlanMIBCompliances=alcatelIND1HAVlanMIBCompliances)
