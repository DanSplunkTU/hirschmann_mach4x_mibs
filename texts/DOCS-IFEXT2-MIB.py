#
# PySNMP MIB module DOCS-IFEXT2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DOCS-IFEXT2-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 04:09:12 2022
# On host fv-az77-149 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
docsIfCmtsCmStatusIndex, TenthdBmV, TenthdB = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusIndex", "TenthdBmV", "TenthdB")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, MibIdentifier, Gauge32, iso, ObjectIdentity, Bits, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, TimeTicks, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "TimeTicks", "Integer32", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
docsIfExt2Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5))
docsIfExt2Mib.setRevisions(('2004-06-23 17:00', '2004-11-10 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsIfExt2Mib.setRevisionsDescriptions(('Initial version of this MIB module.', 'Re-rooted to clabProjDocsis.5',))
if mibBuilder.loadTexts: docsIfExt2Mib.setLastUpdated('200411101700Z')
if mibBuilder.loadTexts: docsIfExt2Mib.setOrganization('Cable Television Laboratories, Inc')
if mibBuilder.loadTexts: docsIfExt2Mib.setContactInfo('\n\t\tPostal: Cable Television Laboratories, Inc.\n\t\t400 Centennial Parkway\n\t\tLouisville, Colorado 80027-1266\n\t\tU.S.A.\n\t\tPhone: +1 303-661-9100\n\t\tFax: +1 303-661-9199\n\t\tE-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsIfExt2Mib.setDescription('This MIB module contains the management objects that enhance\n\t\tDOCSIS 2.0 feature set.\n\t\tIt includes SCDMA capability of limiting the number of codes\n\t\tassigned to a CM over the total active codes, referred as\n\t\tMaximum Scheduled Codes (MSC).')
docsIfExt2Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 0))
docsIfExt2MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1))
docsIfExt2BaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 1))
docsIfExt2CmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2))
docsIfExt2CmtsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3))
docsIfExt2CmMscStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: docsIfExt2CmMscStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusTable.setDescription('This table extends the docsIfCmStatusTable to report\n\t\tthe CM MSC status.')
docsIfExt2CmMscStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfExt2CmMscStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusEntry.setDescription('As an extension of docsIdCmStatusTable this table has\n\t\tentries for each ifEntry with an ifType of\n\t\tdocsCableMaclayer(127)\n\t\tThis entry is instantiated by the CM only if the\n\t\tCM is currently in SCDMA mode.')
docsIfExt2CmMscStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("channelEnabled", 1), ("channelDisabled", 2), ("active", 3), ("inactive", 4), ("unknown", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusState.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusState.setDescription('Indicates the current state of the Maximum Scheduled Codes\n\t\tfeature on the CM.\n\n\t\tchannelEnabled(1) S-CDMA Maximum Scheduled Codes\n\t\tis enabled in the UCD TLV-17.\n\n\t\tchannelDisabled(2) S-CDMA Maximum Scheduled Codes\n\t\tis disabled in the UCD TLV-17 or a UCD has been\n\t\treceived that does not contain that TLV.\n\n\t\tActive(3) The CM has received a Ranging Response that\n\t\tcontains a non-zero TLV-10\n\t\tand therefore has MSC activated. This state\n\t\toverrides the channelEnabled(1) state.\n\n\t\tInactive(4) The CM has received a Ranging Response that\n\t\tdoes not contain TLV-10 or has it\n\t\tset to 0. This state overrides the\n\t\tchannelEnabled(1) state.\n\n\t\tUnknown(5) CM has not yet received a UCD to determine\n\t\tif MSC is enabled or disabled on that channel.')
docsIfExt2CmMscStatusPowerShortfall = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 2), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerShortfall.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.5')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerShortfall.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerShortfall.setDescription('Indicates the Power Shortfall at the CM, in units of\n\t\ttenth dB.\n\t\tThe value is provided by the CM and is sent in the RNG-REQ\n\t\tmessage. It is internally calculated in units of quarter\n\t\tdB and is rounded upward for this MIB object to the nearest\n\t\ttenth dB. A value of zero indicates that the CM has no power\n\t\tshortfall.')
docsIfExt2CmMscStatusCodeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusCodeRatio.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.5')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusCodeRatio.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusCodeRatio.setDescription('Indicates the maximum ratio of number of active codes to\n\t\tMaximum Scheduled Codes that the CM can support, as\n\t\treported in the Ranging Request.')
docsIfExt2CmMscStatusMaximumScheduledCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 128), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusMaximumScheduledCodes.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.6')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusMaximumScheduledCodes.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusMaximumScheduledCodes.setDescription('Indicates the Maximum Scheduled Codes in use by the CM.\n\t\tThe value is provided by the CMTS through a TLV value in\n\t\tthe RNG-RSP message. Note that not all values from 4..128\n\t\tare valid.\n\t\tA value of zero when docsIfExt2CmMscStatusSate is active(3)\n\t\tindicates there is no maximum scheduled codes value. This\n\t\tobject should remain at zero when\n\t\tdocsIfExt2CmMscStatusState is not active(3).')
docsIfExt2CmMscStatusPowerHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 5), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerHeadroom.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.6')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerHeadroom.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusPowerHeadroom.setDescription('Indicates the Maximum Scheduled Codes Power Headroom in\n\t\tuse by the CM, in units of tenth dB. The value is\n\t\tprovided by the CMTS in units of quarter dB through\n\t\tTLV-11 in the RNG-RSP message and is rounded upward for\n\t\tthis MIB object to the nearest tenth dB. A value of zero\n\t\tindicates the CMTS provided no Power Headroom. This\n\t\tobject should remain at zero when\n\t\tdocsIfExt2CmMscStatusState is not active(3).')
docsIfExt2CmMscStatusEffectivePower = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 6), TenthdBmV()).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusEffectivePower.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 6.2.18.2.2')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusEffectivePower.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusEffectivePower.setDescription('Indicates the Effective Transmit Power of the CM. This is\n\t\tthe power that would result hypothetically if, in a\n\t\tspreader-on frame, the CM were to transmit on all active\n\t\tcodes with 64QAM modulation. This object should be equal\n\t\tto docsIfCmStatusTxPower when docsIfExt2CmMscStatusState\n\t\tis not active(3).')
docsIfExt2CmMscStatusIUC2Control = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIUC2", 1), ("limitedIUC2", 2), ("freeIUC2", 3))).clone('noIUC2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfExt2CmMscStatusIUC2Control.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 6.2.11.6')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusIUC2Control.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmMscStatusIUC2Control.setDescription('The CM usage of IUC2 when MSC is enabled:\n\t\tnoIUC2(1): CM usage of IUC2 is prohibited\n\n\t\tlimitedIUC2(2): CM is allowed to use IUC2 as long as\n\t\t                the CM does not exceed MSC\n\n\t\tfreeIUC2(3): CM is allowed to use IUC2 without regard\n\t\t             for MSC.\n\n\t\tWith limitedIUC2(2), there may be cases where a CM cannot\n\t\tensure that the use of IUC2 would not exceed MSC. In these\n\t\tcases, the CM MUST NOT use IUC2.')
docsIfExt2CmtsMscGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfExt2CmtsMscGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsMscGlobalEnable.setDescription('Indicates the global state of the Maximum Scheduled Code\n\t\tfeature on the CMTS. The value true(1) indicates that this\n\t\tfeature can be enabled on individual logical channels on\n\t\tthe CMTS. The value false(2) indicates that the feature is\n\t\tnot in operations on the CMTS. Note that the MIB object\n\t\tdocsIfExt2CmtsUpChannelMscState exists to enable or disable\n\t\tMaximum Scheduled Codes on a per logical channel basis.')
docsIfExt2CmtsCmMscStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2), )
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusTable.setDescription('This table extends the docsIfCmtsCmStatusTable to report\n\t\tCM MSC status.')
docsIfExt2CmtsCmMscStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"))
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusEntry.setDescription('An entry for MSC CM status report. Only CMs allocated\n\t\tto SCDMA upstream channels are included in this table.')
docsIfExt2CmtsCmMscStatusPowerShortfall = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 1), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerShortfall.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.5')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerShortfall.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerShortfall.setDescription('Indicates the Power Shortfall at the CM, in units of\n\t\ttenth dB.\n\t\tThe value is provided by the CM and is sent in the\n\t\tRNG-REQ message. It is internally calculated in units\n\t\tof quarter dB and is rounded upward for this MIB object\n\t\tto the nearest tenth dB.\n\t\tA value of zero indicates that the CM has no power\n\t\tshortfall.')
docsIfExt2CmtsCmMscStatusCodeRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ValueRangeConstraint(32, 32), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusCodeRatio.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.5')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusCodeRatio.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusCodeRatio.setDescription('Indicates the maximum ratio of number of active codes to\n\t\tMaximum Scheduled Codes that the CM reported in the\n\t\tRanging Request.')
docsIfExt2CmtsCmMscStatusMaximumScheduledCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 128), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMaximumScheduledCodes.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.6')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMaximumScheduledCodes.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMaximumScheduledCodes.setDescription('Indicates the Maximum Scheduled Codes value in use by\n\t\tthe CM. The value is provided by the CMTS through a TLV\n\t\tin the RNG-RSP message. Note that not all values from\n\t\t4..128 are valid.\n\t\tA value of zero indicates there is no Maximum Scheduled\n\t\tCodes, or that the CM does not support the Maximum\n\t\tScheduled Codes feature.')
docsIfExt2CmtsCmMscStatusPowerHeadroom = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 4), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerHeadroom.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 8.3.6')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerHeadroom.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusPowerHeadroom.setDescription('Indicates the Maximum Scheduled Codes Power Headroom\n\t\tin use by the CM, in units of tenth dB. The value is\n\t\tprovided by the CMTS in units of quarter dB through a\n\t\tTLV value in the RNG-RSP message and is rounded upward\n\t\tfor this MIB object to the nearest tenth dB. A value of zero\n\t\tindicates the CMTS provided no Power Headroom.')
docsIfExt2CmtsCmMscStatusMeasuredSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 5), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMeasuredSNR.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 6.2.18.2.2')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMeasuredSNR.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusMeasuredSNR.setDescription('The signal to noise ratio perceived for this cable modem\n\t\ton the upstream logical channel as of the last station\n\t\tmaintenance.')
docsIfExt2CmtsCmMscStatusEffectiveSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 2, 1, 6), TenthdB()).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusEffectiveSNR.setReference('Data-Over-Cable Service Interface Specifications: Radio\n\t\tFrequency Interface Specification Section 6.2.18.2.2')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusEffectiveSNR.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsCmMscStatusEffectiveSNR.setDescription('The signal to noise ratio estimated for this cable modem\n\t\ton the upstream logical channel, referenced to 64QAM\n\t\tmodulation. It is defined as the measured SNR at the\n\t\tlast station maintenance, minus the CM power shortfall,\n\t\tplus the Power Headroom, minus the constellation gain of\n\t\tthe station maintenance burst.\n\t\tNote that the value of the object\n\t\tdocsIfCmtsCmStatusSignalNoise will be identical to the\n\t\tvalue of this object when Maximum Scheduled Codes\n\t\tis enabled.')
docsIfExt2CmtsUpChannelMscTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscTable.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscTable.setDescription('This table extends the docsIfUpstreamChannelTable to report\n\t\tCM MSC status.')
docsIfExt2CmtsUpChannelMscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscEntry.setDescription('An entry for MSC upstream status report. Only SCDMA logical\n\t\tupstream channels (i.e., ifType=docsCableUpstreamChannel(205)\n\t\tand docsIfUpChannelType=scdma(3)) are included in this table.')
docsIfExt2CmtsUpChannelMscState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("channelEnabled", 1), ("channelDisabled", 2), ("dormant", 3))).clone('channelDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscState.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMscState.setDescription('Indicates the state of the Maximum Scheduled Codes feature\n\t\tfor an individual logical channel on the CMTS.\n\t\tThe state will transition automatically from dormant(5) to\n\t\tChannelEnabled(1) and vice-versa when the feature is\n\t\tglobally enabled by the object\n\t\tdocsIfExt2CmtsMscGlobalEnable.\n\t\tchannelEnabled(1) S-CDMA Maximum Scheduled Codes\n\t\tis enabled in the UCD TLV-17.\n\t\tchannelDisabled(2) S-CDMA Maximum Scheduled Codes\n\t\tis disabled in the UCD TLV-17 or a UCD has been\n\t\tsent that does not contain that TLV.\n\t\tDormant(3) The CMTS channel is being set to\n\t\tchannelEnabled(2) but MSC is globally disabled\n\t\t(docsIfExt2CmtsMscGlobalEnable is false(2) ).\n\t\tThis value is explicitly read-only.')
docsIfExt2CmtsUpChannelMSCTotalCMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCTotalCMs.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCTotalCMs.setDescription('Total number of CMs with docsIfCmtsCmStatusValue of\n\t\tregistrationComplete with MSC active.')
docsIfExt2CmtsUpChannelMSCLimitIUC1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('codes').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCLimitIUC1.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCLimitIUC1.setDescription('Indicates that, in order to prevent\n\t\tCMs from exceeding MSC, the CMTS will limit the scheduling of\n\t\tbroadcast IUC1 to at most this many SCDMA codes per SCMDA\n\t\tframe.')
docsIfExt2CmtsUpChannelMSCMinimumValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 128)).clone(4)).setUnits('codes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCMinimumValue.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelMSCMinimumValue.setDescription('When Maximum Scheduled Codes is enabled, instructs the\n\t\tCMTS to assign cable modems MSC values no less than this value.')
docsIfExt2CmtsUpChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 4), )
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelTable.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelTable.setDescription('This table extends the docsIfUpstreamChannelTable to report\n\t\tadditional upstream status information.')
docsIfExt2CmtsUpChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelEntry.setDescription('An entry for upstream status information.')
docsIfExt2CmtsUpChannelTotalCMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 1, 3, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelTotalCMs.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsUpChannelTotalCMs.setDescription('Total number of CMs with docsIfCmtsCmStatusValue of\n\t\tregistrationComplete.')
docsIfExt2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2))
docsIfExt2Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2, 1))
docsIfExt2Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2, 2))
docsIfExt2Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2, 1, 1)).setObjects(("DOCS-IFEXT2-MIB", "docsIfExt2CmGroup"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfExt2Compliance = docsIfExt2Compliance.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2Compliance.setDescription('The compliance statement for DOCSIS 20 enhanced features.')
docsIfExt2CmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2, 2, 1)).setObjects(("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusState"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusPowerShortfall"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusCodeRatio"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusMaximumScheduledCodes"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusPowerHeadroom"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusEffectivePower"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmMscStatusIUC2Control"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfExt2CmGroup = docsIfExt2CmGroup.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmGroup.setDescription('Group of objects implemented in Cable Modems.')
docsIfExt2CmtsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 5, 2, 2, 2)).setObjects(("DOCS-IFEXT2-MIB", "docsIfExt2CmtsMscGlobalEnable"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusPowerShortfall"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusCodeRatio"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusMaximumScheduledCodes"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusPowerHeadroom"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusMeasuredSNR"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsCmMscStatusEffectiveSNR"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsUpChannelMscState"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsUpChannelMSCTotalCMs"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsUpChannelMSCLimitIUC1"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsUpChannelMSCMinimumValue"), ("DOCS-IFEXT2-MIB", "docsIfExt2CmtsUpChannelTotalCMs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfExt2CmtsGroup = docsIfExt2CmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsIfExt2CmtsGroup.setDescription('Group of objects implemented in Cable Modem Termination\n\t\tSystems.')
mibBuilder.exportSymbols("DOCS-IFEXT2-MIB", docsIfExt2CmtsMscGlobalEnable=docsIfExt2CmtsMscGlobalEnable, docsIfExt2CmMscStatusPowerShortfall=docsIfExt2CmMscStatusPowerShortfall, docsIfExt2CmtsUpChannelMscTable=docsIfExt2CmtsUpChannelMscTable, docsIfExt2CmtsCmMscStatusMaximumScheduledCodes=docsIfExt2CmtsCmMscStatusMaximumScheduledCodes, docsIfExt2CmtsUpChannelMscEntry=docsIfExt2CmtsUpChannelMscEntry, docsIfExt2CmtsObjects=docsIfExt2CmtsObjects, docsIfExt2Compliances=docsIfExt2Compliances, docsIfExt2MibObjects=docsIfExt2MibObjects, docsIfExt2CmtsCmMscStatusTable=docsIfExt2CmtsCmMscStatusTable, docsIfExt2CmtsUpChannelTotalCMs=docsIfExt2CmtsUpChannelTotalCMs, docsIfExt2Mib=docsIfExt2Mib, docsIfExt2CmtsCmMscStatusPowerShortfall=docsIfExt2CmtsCmMscStatusPowerShortfall, PYSNMP_MODULE_ID=docsIfExt2Mib, docsIfExt2CmMscStatusPowerHeadroom=docsIfExt2CmMscStatusPowerHeadroom, docsIfExt2CmtsCmMscStatusEntry=docsIfExt2CmtsCmMscStatusEntry, docsIfExt2CmMscStatusEffectivePower=docsIfExt2CmMscStatusEffectivePower, docsIfExt2CmtsUpChannelEntry=docsIfExt2CmtsUpChannelEntry, docsIfExt2CmtsCmMscStatusMeasuredSNR=docsIfExt2CmtsCmMscStatusMeasuredSNR, docsIfExt2Groups=docsIfExt2Groups, docsIfExt2Notifications=docsIfExt2Notifications, docsIfExt2CmtsUpChannelMSCMinimumValue=docsIfExt2CmtsUpChannelMSCMinimumValue, docsIfExt2Compliance=docsIfExt2Compliance, docsIfExt2CmGroup=docsIfExt2CmGroup, docsIfExt2CmtsUpChannelMscState=docsIfExt2CmtsUpChannelMscState, docsIfExt2BaseObjects=docsIfExt2BaseObjects, docsIfExt2CmMscStatusTable=docsIfExt2CmMscStatusTable, docsIfExt2CmtsUpChannelTable=docsIfExt2CmtsUpChannelTable, docsIfExt2CmtsCmMscStatusEffectiveSNR=docsIfExt2CmtsCmMscStatusEffectiveSNR, docsIfExt2CmMscStatusMaximumScheduledCodes=docsIfExt2CmMscStatusMaximumScheduledCodes, docsIfExt2CmtsUpChannelMSCLimitIUC1=docsIfExt2CmtsUpChannelMSCLimitIUC1, docsIfExt2Conformance=docsIfExt2Conformance, docsIfExt2CmtsCmMscStatusCodeRatio=docsIfExt2CmtsCmMscStatusCodeRatio, docsIfExt2CmMscStatusEntry=docsIfExt2CmMscStatusEntry, docsIfExt2CmMscStatusState=docsIfExt2CmMscStatusState, docsIfExt2CmtsUpChannelMSCTotalCMs=docsIfExt2CmtsUpChannelMSCTotalCMs, docsIfExt2CmMscStatusCodeRatio=docsIfExt2CmMscStatusCodeRatio, docsIfExt2CmMscStatusIUC2Control=docsIfExt2CmMscStatusIUC2Control, docsIfExt2CmObjects=docsIfExt2CmObjects, docsIfExt2CmtsGroup=docsIfExt2CmtsGroup, docsIfExt2CmtsCmMscStatusPowerHeadroom=docsIfExt2CmtsCmMscStatusPowerHeadroom)
