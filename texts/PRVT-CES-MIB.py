#
# PySNMP MIB module PRVT-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binos/PRVT-CES-MIB
# Produced by pysmi-1.1.3 at Mon Nov 22 20:08:03 2021
# On host fv-az42-715 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
dsx1ConfigEntry, = mibBuilder.importSymbols("DS1-MIB", "dsx1ConfigEntry")
switch, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "switch")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, NotificationType, Integer32, IpAddress, TimeTicks, ObjectIdentity, Bits, Counter64, MibIdentifier, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "NotificationType", "Integer32", "IpAddress", "TimeTicks", "ObjectIdentity", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "iso")
TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "DisplayString")
prvtCESMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 1, 5, 111))
prvtCESMib.setRevisions(('2009-05-18 00:00', '2009-05-14 00:00', '2009-05-05 00:00', '2009-03-19 00:00', '2009-02-25 00:00', '2009-02-16 00:00', '2008-06-19 00:00', '2006-03-07 00:00', '2006-02-23 00:00', '2005-03-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtCESMib.setRevisionsDescriptions(('OC3 Alarm Enhacements', 'Add prvtCESApsTable', 'Add prvtCESUpdateFirmwareTable', 'Add new objects prvtCESServiceClock, prvtCESModuleServiceClock', 'Add prvtCESCICTable, prvtCESCICMappTable,\nprvtCESModulePolicyLopsEnter, prvtCESModulePolicyLopsExit ', 'Modified values for objects\nprvtCESModulePolicyLops, prvtCESModulePolicyRbit,\nprvtCESModulePolicyRd', 'Added new objects\nprvtCESClearPortStatistics, prvtCESModuleClearCircuitStatistics,\nprvtCESModuleLbit, prvtCESModulePolicyLops,\nprvtCESModulePolicyLbit, prvtCESModulePolicyRbit,\nprvtCESModulePolicyRd, prvtCESModulePolicyIdlePattern,\nprvtCESModulePolicyIdleSignalling', 'Added an additional port index to the alarm table.', 'Added the TCA alarms table objects and the TCA alarm trap.', 'Initial version.',))
if mibBuilder.loadTexts: prvtCESMib.setLastUpdated('200905180000Z')
if mibBuilder.loadTexts: prvtCESMib.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtCESMib.setContactInfo('BATM/Telco Systems Support team\nEmail:\nFor North America: techsupport@telco.com\nFor North Europe: support@batm.de, info@batm.de\nFor the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtCESMib.setDescription('This module includes configuration parameters for DS1 modules not included in\nDS1-MIB.')
class ConfigAction(TextualConvention, Integer32):
    description = 'This value is used to specify what is to be done with unapplied CES module configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noop", 1), ("applyConfiguration", 2), ("rejectConfiguration", 3), ("restart", 4))

class E1Impedance(TextualConvention, Integer32):
    description = 'This value is used to configure E1 line type termination impedance.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("e1-75ohm", 1), ("e1-75hrl", 2), ("e1-120ohm", 3), ("e1-120hrl", 4))

class T1LongCableLength(TextualConvention, Integer32):
    description = 'This value is used to configure T1 long cable length.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("neg75dB", 2), ("neg15dB", 3), ("neg225dB", 4), ("zerodB", 5))

class T1GainLimit(TextualConvention, Integer32):
    description = 'This value is used to configure T1 type Tx or Rx gain limit.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("gain30", 2), ("gain36", 3))

class CESLineType(TextualConvention, Integer32):
    description = 'This value is used to configure the line mode common for all TDM ports of the module.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("e1", 1), ("t1", 2), ("e1-sdh", 3), ("t1-sdh", 4), ("t1-sonet", 5))

class ServiceClock(TextualConvention, Integer32):
    description = 'This values are used to configure transmit clock as one of this modes.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notAplicable", 0), ("loopTiming", 1), ("localTiming", 2), ("adaptive", 3), ("differntial", 4))

prvtCESNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 0))
prvtCESObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1))
prvtCESConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2))
prvtCESDsx1ExtTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1), )
if mibBuilder.loadTexts: prvtCESDsx1ExtTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1ExtTable.setDescription('This table contains object for configuring DS1 interfaces, not supported in dsx1ConfigTable.')
prvtCESDsx1ExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1), )
dsx1ConfigEntry.registerAugmentions(("PRVT-CES-MIB", "prvtCESDsx1ExtEntry"))
prvtCESDsx1ExtEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: prvtCESDsx1ExtEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1ExtEntry.setDescription('prvtCESDsx1ExtEntry')
prvtCESE1Impedance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 1), E1Impedance()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESE1Impedance.setStatus('current')
if mibBuilder.loadTexts: prvtCESE1Impedance.setDescription('This object configures temination impedance for TDM ports if the line type is E1.')
prvtCEST1GainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 2), T1GainLimit()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCEST1GainLimit.setStatus('current')
if mibBuilder.loadTexts: prvtCEST1GainLimit.setDescription('This object configures Tx or Rx gain limit for TDM ports if the line type is T1.')
prvtCESPortShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESPortShutdown.setStatus('current')
if mibBuilder.loadTexts: prvtCESPortShutdown.setDescription('Shutdown TDM port.')
prvtCESPortLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1CRC", 5), ("dsx1E1MF", 6), ("dsx1E1CRCMF", 7), ("dsx1Unframed", 8), ("dsx1E1Unframed", 9), ("dsx1DS2M12", 10), ("dsx1E2", 11), ("dsx1E1Q50", 12), ("dsx1E1Q50CRC", 13), ("dsx1SFCAS", 14), ("dsx1ESFCAS", 15), ("notApplicable", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESPortLineType.setStatus('current')
if mibBuilder.loadTexts: prvtCESPortLineType.setDescription('Additional line types. For reference see object dsx1LineType')
prvtCEST1LongCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 5), T1LongCableLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCEST1LongCableLength.setStatus('current')
if mibBuilder.loadTexts: prvtCEST1LongCableLength.setDescription('Long cable length options for T1 mode.')
prvtCESPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerlayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCESPortOperStatus.setDescription('TDM link state.')
prvtCESClearPortStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESClearPortStatistics.setStatus('current')
if mibBuilder.loadTexts: prvtCESClearPortStatistics.setDescription('Clear port statistics.')
prvtCESServiceClock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 1, 1, 8), ServiceClock()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESServiceClock.setStatus('current')
if mibBuilder.loadTexts: prvtCESServiceClock.setDescription('Service Clock available only for DS1 interface.')
prvtCESUnappTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3), )
if mibBuilder.loadTexts: prvtCESUnappTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappTable.setDescription('This table displays CES module configuration which will take effect\nafter prvtCESModuleConf is set to applyConfiguration(2).')
prvtCESUnappEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1), )
dsx1ConfigEntry.registerAugmentions(("PRVT-CES-MIB", "prvtCESUnappEntry"))
prvtCESUnappEntry.setIndexNames(*dsx1ConfigEntry.getIndexNames())
if mibBuilder.loadTexts: prvtCESUnappEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappEntry.setDescription('prvtCESUnappEntry')
prvtCESUnappLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("dsx1ESF", 2), ("dsx1D4", 3), ("dsx1E1", 4), ("dsx1E1CRC", 5), ("dsx1E1MF", 6), ("dsx1E1CRCMF", 7), ("dsx1Unframed", 8), ("dsx1E1Unframed", 9), ("dsx1DS2M12", 10), ("dsx1E2", 11), ("dsx1E1Q50", 12), ("dsx1E1Q50CRC", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLineType.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLineType.setDescription('The value of dsx1LineType before configuration is applied.')
prvtCESUnappLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1ZBTSI", 4), ("dsx1AMI", 5), ("other", 6), ("dsx1B6ZS", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLineCoding.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLineCoding.setDescription('The value of dsx1LineCoding before configuration is applied.')
prvtCESUnappLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1PayloadLoop", 2), ("dsx1LineLoop", 3), ("dsx1OtherLoop", 4), ("dsx1InwardLoop", 5), ("dsx1DualLoop", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLoopbackConfig.setDescription('The value of dsx1LoopbackConfig before configuration is applied.')
prvtCESUnappSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappSignalMode.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappSignalMode.setDescription('The value of dsx1SignalMode before configuration is applied.')
prvtCESUnappTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("adaptive", 4), ("external-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappTransmitClockSource.setDescription('The value of dsx1TransmitClockSource before configuration is applied.')
prvtCESUnappTransmitClockBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappTransmitClockBackup.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappTransmitClockBackup.setDescription('The value of dsx1TransmitClockBackup before configuration is applied.')
prvtCESUnappLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setUnits('meters').setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLineLength.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLineLength.setDescription('The value of dsx1LineLength before configuration is applied.')
prvtCESUnappLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csu", 1), ("dsu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLineMode.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLineMode.setDescription('The value of dsx1LineMode before configuration is applied.')
prvtCESUnappLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg75dB", 2), ("neg15dB", 3), ("neg225dB", 4), ("zerodB", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappLineBuildOut.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappLineBuildOut.setDescription('The value of dsx1LineBuildOut before configuration is applied.')
prvtCESUnappE1Impedance = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 10), E1Impedance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappE1Impedance.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappE1Impedance.setDescription('The value of prvtCESE1Impedance before configuration is applied.')
prvtCESUnappT1GainLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 11), T1GainLimit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappT1GainLimit.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappT1GainLimit.setDescription('The value of prvtCEST1GainLimit before configuration is applied.')
prvtCESUnappIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappIPAddress.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappIPAddress.setDescription('The CES Module IP address before configuration is applied.')
prvtCESUnappIPAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappIPAddressMask.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappIPAddressMask.setDescription('The CES Module IP address mask before configuration is applied.')
prvtCESUnappGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 3, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUnappGateway.setStatus('current')
if mibBuilder.loadTexts: prvtCESUnappGateway.setDescription('The CES Module Gateway before configuration is applied.')
prvtCESModuleConfTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2), )
if mibBuilder.loadTexts: prvtCESModuleConfTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleConfTable.setDescription('This table contains object for configuring options that are applied to the entire module.')
prvtCESModuleConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESModuleIndex"))
if mibBuilder.loadTexts: prvtCESModuleConfEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleConfEntry.setDescription('prvtCESModuleConfEntry')
prvtCESModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtCESModuleIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleIndex.setDescription('Index of each CES module installed.')
prvtCESModuleLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 2), CESLineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleLineType.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleLineType.setDescription('Line mode for the module.')
prvtCESModuleTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("adaptive", 4), ("external-port", 5), ("line", 6), ("ptp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleTxClock.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleTxClock.setDescription('Configures Transmit Source Clock for the module.')
prvtCESModuleTxBackupClock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleTxBackupClock.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleTxBackupClock.setDescription('Configures Backup Clock for the module.')
prvtCESModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 5), ConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleConfig.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleConfig.setDescription('When this object is set to applyConfiguration(2), the module is restarted\nand the changes in dsx1ConfigTable or prvtCESConfTable are applied. The object\nmust be set to rejectConfiguration(3) to remove unapplied changes. If the object\nis set to restart(4), the module is restarted with applying the changes.\nThis object always returns a value of noop(1) when get.')
prvtCESModuleIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleIPAddress.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleIPAddress.setDescription('The CES Module IP address after configuration is applied.')
prvtCESModuleIPAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleIPAddressMask.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleIPAddressMask.setDescription('The CES Module IP address mask after configuration is applied.')
prvtCESModuleGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleGateway.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleGateway.setDescription(' CES Module Gateway after configuration is applied.')
prvtCESModuleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESModuleUpTime.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleUpTime.setDescription('CES Up Time')
prvtCESModuleMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESModuleMACAddress.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleMACAddress.setDescription('CES MAC Address')
prvtCESModuleHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESModuleHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleHardwareRevision.setDescription(' CES Hardware revision')
prvtCESModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESModuleFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleFirmwareVersion.setDescription(' CES Firmware revision')
prvtCESModuleClearCircuitStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleClearCircuitStatistics.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleClearCircuitStatistics.setDescription('Clear circuits statistics.')
prvtCESModuleLbit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleLbit.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleLbit.setDescription('Enable/disable L bit set upon AIS\ndefect detection, in structure agnostic mode.')
prvtCESModulePolicyLops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("all-one", 1), ("channel-idle", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyLops.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyLops.setDescription('Controls policy lops. Object does not require module to be restarted.')
prvtCESModulePolicyLbit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("all-one", 1), ("channel-idle", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyLbit.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyLbit.setDescription('Controls policy lbit. Object does not require module to be restarted.')
prvtCESModulePolicyRbit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rai", 1), ("channel-idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyRbit.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyRbit.setDescription('Controls policy rbit. Object does not require module to be restarted.')
prvtCESModulePolicyRd = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("rai", 1), ("channel-idle", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyRd.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyRd.setDescription('Controls policy rd. Object does not require module to be restarted.')
prvtCESModulePolicyIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyIdlePattern.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyIdlePattern.setDescription('Controls policy idle pattern. Object does not require module to be restarted.')
prvtCESModulePolicyIdleSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyIdleSignalling.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyIdleSignalling.setDescription('Controls policy idle signalling. Object does not require module to be restarted.')
prvtCESModulePolicyLopsEnter = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyLopsEnter.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyLopsEnter.setDescription('Controls the number of consecutive missed\npackets required to enter LOPS state.\nObject does not require module to be restarted.')
prvtCESModulePolicyLopsExit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyLopsExit.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyLopsExit.setDescription('Controls the number of consecutive missed\npackets required to exit LOPS state.\nObject does not require module to be restarted.')
prvtCESModulePolicyuUnstrLbit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all-one", 1))).clone('all-one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrLbit.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrLbit.setDescription('If a packet is received with L bit set, and the payload is present (not suppressed),\none of the following is sent to the TDM line, according to a globally configurable unstructured L-flag policy:\nThe AIS pattern all-one\nThe received payload as-is none')
prvtCESModulePolicyuStrReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-one", 1), ("idle", 2))).clone('all-one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyuStrReplace.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyuStrReplace.setDescription('If a missing packet is detected, one of the following is sent to the TDM line,\naccording to a globally configurable structured missing packet replacement policy:\nThe AIS pattern all-one on the relevant timeslots\nThe configured IDLE pattern')
prvtCESModulePolicyuUnstrReplace = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-one", 1), ("idle", 2))).clone('all-one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrReplace.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrReplace.setDescription('If a missing packet is detected, one of the following is sent to the TDM line,\naccording to a globally configurable unstructured missing packet replacement policy:\nThe AIS pattern all-one\nThe configured IDLE pattern')
prvtCESModulePolicyuUnstrLops = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("all-one", 1))).clone('all-one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrLops.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrLops.setDescription('If a CES circuit enters the LOPS state, one of the following is sent to the TDM line,\naccording to a globally configurable unstructured missing packet replacement policy:\nThe AIS pattern all-one\nThe contents of the jitter buffer - none')
prvtCESModuleServiceClock = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 27), ServiceClock()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModuleServiceClock.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleServiceClock.setDescription('Clock mode for CES module')
prvtCESModulePolicyuUnstrReplacePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrReplacePattern.setStatus('current')
if mibBuilder.loadTexts: prvtCESModulePolicyuUnstrReplacePattern.setDescription('Unstructured packet replace policy pattern number')
prvtCESDsx1AlarmTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4), )
if mibBuilder.loadTexts: prvtCESDsx1AlarmTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmTable.setDescription('This table contains object for configuring and displaying TDM ports TCA thresholds.')
prvtCESDsx1AlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESDsx1AlarmPort"), (0, "PRVT-CES-MIB", "prvtCESDsx1AlarmIndex"))
if mibBuilder.loadTexts: prvtCESDsx1AlarmEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmEntry.setDescription('prvtCESDsx1AlarmEntry')
prvtCESDsx1AlarmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prvtCESDsx1AlarmPort.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmPort.setDescription(' The DS1 port for which this alarm is configured. ')
prvtCESDsx1AlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1, 2), Gauge32())
if mibBuilder.loadTexts: prvtCESDsx1AlarmIndex.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmIndex.setDescription(' An integer uniquely identifying an alarm entry.')
prvtCESDsx1AlarmVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESDsx1AlarmVariable.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmVariable.setDescription('The OID of the variable whose value is being monitored. Depending on the time interval,\nthe error condition and the ifIndex of the TDM interface, this points to an object from an entry in\ndsx1CurrentTable or dsx1TotalTable.')
prvtCESDsx1AlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESDsx1AlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmThreshold.setDescription('The alarm condition threshold for this alarm entry. The alarm is triggered if the value of the\nobject pointed by prvtCESDsx1AlarmVariable remains above this threshold for more than 3 seconds.')
prvtCESDsx1AlarmValue = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 4, 1, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: prvtCESDsx1AlarmValue.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1AlarmValue.setDescription('The value of the object pointed to by prvtCESDsx1AlarmVariable, present for notification purposes.')
prvtCESAlarmMonitor = MibScalar((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESAlarmMonitor.setStatus('current')
if mibBuilder.loadTexts: prvtCESAlarmMonitor.setDescription('CES alarm monitor')
prvtCESCICTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6), )
if mibBuilder.loadTexts: prvtCESCICTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICTable.setDescription('This table contains objects for configuring Clock Input Controller.')
prvtCESCICEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESCICModuleId"), (0, "PRVT-CES-MIB", "prvtCESCICNumber"))
if mibBuilder.loadTexts: prvtCESCICEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICEntry.setDescription('prvtCESCICEntry')
prvtCESCICModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: prvtCESCICModuleId.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICModuleId.setDescription('Slot of CES module installed.')
prvtCESCICNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 2), Gauge32())
if mibBuilder.loadTexts: prvtCESCICNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICNumber.setDescription(' An integer uniquely identifying a Clock Input Controller.')
prvtCESCICClockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICClockNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICClockNumber.setDescription('This variable indicates the index of the clock\nthe clock input controller belongs to')
prvtCESCICMode = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("freeRun", 1), ("acquisition", 2), ("normal", 3), ("holdover", 4), ("fastAcquisiton", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICMode.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMode.setDescription("The mode of the clock input controller. Not\nall clock input controllers support all modes.\nThe clock input controller status is 'locked'\nonly if the clock input controller is in\n'normal' mode.")
prvtCESCICTdmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESCICTdmPort.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICTdmPort.setDescription('If the clock input controller recovers a clock\nfrom a port , this variable indicates the\nTDM Port. Otherwise, it must\nbe set to zero.')
prvtCESCICCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESCICCircuit.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICCircuit.setDescription('If the clock input controller recovers a clock\nfrom a circuit, this variable indicates the\ncircuit ID. Otherwise, it\nmust be set to zero.')
prvtCESCICStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("locked", 1), ("notlocked", 2), ("sourceInputLost", 3), ("sourceInputDegraded", 4), ("sourceTraceLost", 5), ("sourceTraceDegraded", 6), ("sourceFreqOffsetFailure", 7), ("recoveredClockDegraded", 8), ("localReferenceFailure", 9), ("remoteReferenceFailure", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICStatus.setDescription("The status of the input reference.Reference\nis ok when the status is 'locked'. Otherwise,\nthe status is 'notLocked'. Alternatively, if an\nerror was detected at the input, the status\nindicates this error.")
prvtCESCICState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICState.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICState.setDescription("The state is set to 'active' if the input\ncontroller was selected by the clock to drive\nthe clock output. At least one input out of\nthe clock-input-controllers attached to a\nclock must be in an 'active' state at any given\ntime")
prvtCESCICMappTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7), )
if mibBuilder.loadTexts: prvtCESCICMappTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappTable.setDescription('This table contains clock configuration and status monitoring information.')
prvtCESCICMappEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESCICMappModuleId"), (0, "PRVT-CES-MIB", "prvtCESCICMappClockNumber"), (0, "PRVT-CES-MIB", "prvtCESCICMappCICNumber"))
if mibBuilder.loadTexts: prvtCESCICMappEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappEntry.setDescription('prvtCESCICMappEntry')
prvtCESCICMappModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICMappModuleId.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappModuleId.setDescription('Slot of CES module installed.')
prvtCESCICMappClockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICMappClockNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappClockNumber.setDescription('Index for the conceptual row\nidentifying a clock within this\nmapping table')
prvtCESCICMappCICNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICMappCICNumber.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappCICNumber.setDescription('Index for the conceptual row\nidentifying a clock input within\nthis mapping table')
prvtCESCICMappState = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESCICMappState.setStatus('current')
if mibBuilder.loadTexts: prvtCESCICMappState.setDescription("The state is set to 'active' if the input\ncontroller was selected by the clock to drive\nthe clock output. At least one input out of\nthe clock-input-controllers attached to a\nclock must be in an 'active' state at any given\ntime This value of this variable is\nequal to the prvtCESCICState\nvariable in the CIC table")
prvtCESApsTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8), )
if mibBuilder.loadTexts: prvtCESApsTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESApsTable.setDescription('This table contains objects needed APS configuration')
prvtCESApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESModuleId"))
if mibBuilder.loadTexts: prvtCESApsEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESApsEntry.setDescription('prvtCESApsEntry')
prvtCESApsModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: prvtCESApsModuleId.setStatus('current')
if mibBuilder.loadTexts: prvtCESApsModuleId.setDescription('An integer uniquely identifying slot of the CES module installed')
prvtCESApsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESApsEnable.setStatus('current')
if mibBuilder.loadTexts: prvtCESApsEnable.setDescription('Enable/Disable Automatic Protection Switching')
prvtCESApsActiveLine = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESApsActiveLine.setStatus('current')
if mibBuilder.loadTexts: prvtCESApsActiveLine.setDescription('APS active line')
prvtSdBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSdBerThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSdBerThreshold.setDescription('The Signal Degrade Bit Error Rate.\nThe negated value of this number is used\nas the exponent of 10 for computing the\nthreshold value for the Bit Error Rate\n(BER). For example, a value of 5 indicates\na BER threshold of 10^-5.')
prvtSfBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtSfBerThreshold.setStatus('current')
if mibBuilder.loadTexts: prvtSfBerThreshold.setDescription('The Signal Failure Bit Error Rate.\nThe negated value of this number is used\nas the exponent of 10 for computing the\nthreshold value for the Bit Error Rate\n(BER). For example, a value of 5 indicates\na BER threshold of 10^-5.')
prvtCESUpdateFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9), )
if mibBuilder.loadTexts: prvtCESUpdateFirmwareTable.setStatus('current')
if mibBuilder.loadTexts: prvtCESUpdateFirmwareTable.setDescription('This table contains object needed in update firmware of CES module')
prvtCESUpdateFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1), ).setIndexNames((0, "PRVT-CES-MIB", "prvtCESModuleId"))
if mibBuilder.loadTexts: prvtCESUpdateFirmwareEntry.setStatus('current')
if mibBuilder.loadTexts: prvtCESUpdateFirmwareEntry.setDescription('prvtCESUpdateFirmwareEntry')
prvtCESModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000)))
if mibBuilder.loadTexts: prvtCESModuleId.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleId.setDescription('An integer uniquely identifying slot of the CES module installed')
prvtCESFirmwareImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESFirmwareImageName.setStatus('current')
if mibBuilder.loadTexts: prvtCESFirmwareImageName.setDescription('Name of the firmware image file ')
prvtCESUpdateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("update", 2), ("updateThroughUART", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESUpdateAction.setStatus('current')
if mibBuilder.loadTexts: prvtCESUpdateAction.setDescription('Update CES firmware ')
prvtCESUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("updateStatusUnknown", 1), ("updateSuccess", 2), ("updateInProgress", 3), ("updateFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prvtCESUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: prvtCESUpdateStatus.setDescription('The status of the last update procedure, if any. This\n\tobject will have a value of updateStatusUnknown(2) if no\n\tupdate process has been performed.')
prvtCESTFTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 1, 9, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prvtCESTFTPServer.setStatus('current')
if mibBuilder.loadTexts: prvtCESTFTPServer.setDescription('IP Address of Tftp Server')
prvtCESDsx1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 0, 1)).setObjects(("PRVT-CES-MIB", "prvtCESDsx1AlarmVariable"), ("PRVT-CES-MIB", "prvtCESDsx1AlarmThreshold"), ("PRVT-CES-MIB", "prvtCESDsx1AlarmValue"))
if mibBuilder.loadTexts: prvtCESDsx1Alarm.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1Alarm.setDescription('This notification is sent when the value of a TDM port error condition statistic has exceeded the\nconfigured threshold.')
prvtCESModuleAvailable = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 0, 2)).setObjects(("PRVT-CES-MIB", "prvtCESModuleIndex"))
if mibBuilder.loadTexts: prvtCESModuleAvailable.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleAvailable.setDescription('prvtCESModuleAvailable trap')
prvtCESModuleUnAvailableDueExtract = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 0, 3)).setObjects(("PRVT-CES-MIB", "prvtCESModuleIndex"))
if mibBuilder.loadTexts: prvtCESModuleUnAvailableDueExtract.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleUnAvailableDueExtract.setDescription('prvtCESModuleUnAvailableDueExtract trap.')
prvtCESModuleUnAvailableDueReload = NotificationType((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 0, 4)).setObjects(("PRVT-CES-MIB", "prvtCESModuleIndex"))
if mibBuilder.loadTexts: prvtCESModuleUnAvailableDueReload.setStatus('current')
if mibBuilder.loadTexts: prvtCESModuleUnAvailableDueReload.setDescription('prvtCESModuleUnAvailableDueReload trap')
prvtCESDsx1Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2, 1))
prvtCESDsx1Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2, 2))
prvtCESDsx1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2, 1, 1)).setObjects(("PRVT-CES-MIB", "prvtCESDsx1NotificationsGroup"), ("PRVT-CES-MIB", "prvtCESDsx1ROGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtCESDsx1Compliance = prvtCESDsx1Compliance.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1Compliance.setDescription('The compliance statement for management of TDM ports.')
prvtCESDsx1NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2, 2, 1)).setObjects(("PRVT-CES-MIB", "prvtCESDsx1Alarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtCESDsx1NotificationsGroup = prvtCESDsx1NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1NotificationsGroup.setDescription('The group of supported notifications.')
prvtCESDsx1ROGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 738, 1, 5, 111, 2, 2, 2)).setObjects(("PRVT-CES-MIB", "prvtCESE1Impedance"), ("PRVT-CES-MIB", "prvtCEST1GainLimit"), ("PRVT-CES-MIB", "prvtCESModuleLineType"), ("PRVT-CES-MIB", "prvtCESModuleTxClock"), ("PRVT-CES-MIB", "prvtCESModuleConfig"), ("PRVT-CES-MIB", "prvtCESModuleIPAddress"), ("PRVT-CES-MIB", "prvtCESModuleIPAddressMask"), ("PRVT-CES-MIB", "prvtCESModuleGateway"), ("PRVT-CES-MIB", "prvtCESDsx1AlarmThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prvtCESDsx1ROGroup = prvtCESDsx1ROGroup.setStatus('current')
if mibBuilder.loadTexts: prvtCESDsx1ROGroup.setDescription('The group of objects with MAX-ACCESS read-write supported with read-only access for the first release.')
mibBuilder.exportSymbols("PRVT-CES-MIB", prvtCESApsEntry=prvtCESApsEntry, prvtCESModulePolicyRd=prvtCESModulePolicyRd, prvtCESUpdateStatus=prvtCESUpdateStatus, prvtCESPortShutdown=prvtCESPortShutdown, prvtCESNotifications=prvtCESNotifications, prvtCESCICMappClockNumber=prvtCESCICMappClockNumber, prvtCESCICCircuit=prvtCESCICCircuit, prvtCESCICTable=prvtCESCICTable, prvtCESUnappLineMode=prvtCESUnappLineMode, prvtCESModuleUpTime=prvtCESModuleUpTime, prvtCESDsx1AlarmIndex=prvtCESDsx1AlarmIndex, prvtCESCICMappCICNumber=prvtCESCICMappCICNumber, prvtSdBerThreshold=prvtSdBerThreshold, prvtCESModuleLbit=prvtCESModuleLbit, prvtCESUnappE1Impedance=prvtCESUnappE1Impedance, prvtCESModuleIPAddress=prvtCESModuleIPAddress, prvtCESUnappT1GainLimit=prvtCESUnappT1GainLimit, prvtCESUpdateFirmwareEntry=prvtCESUpdateFirmwareEntry, prvtCESPortLineType=prvtCESPortLineType, prvtCESDsx1NotificationsGroup=prvtCESDsx1NotificationsGroup, ConfigAction=ConfigAction, prvtCESUpdateFirmwareTable=prvtCESUpdateFirmwareTable, prvtCESDsx1AlarmValue=prvtCESDsx1AlarmValue, prvtCESUnappLineType=prvtCESUnappLineType, prvtCESModulePolicyuUnstrReplacePattern=prvtCESModulePolicyuUnstrReplacePattern, prvtCESDsx1AlarmPort=prvtCESDsx1AlarmPort, prvtCESModuleLineType=prvtCESModuleLineType, prvtCESMib=prvtCESMib, prvtCESDsx1AlarmEntry=prvtCESDsx1AlarmEntry, prvtCESUnappEntry=prvtCESUnappEntry, prvtCESModuleClearCircuitStatistics=prvtCESModuleClearCircuitStatistics, prvtCESPortOperStatus=prvtCESPortOperStatus, prvtCESFirmwareImageName=prvtCESFirmwareImageName, prvtCESCICNumber=prvtCESCICNumber, prvtCESObjects=prvtCESObjects, PYSNMP_MODULE_ID=prvtCESMib, prvtCESCICMappEntry=prvtCESCICMappEntry, prvtCESCICMappModuleId=prvtCESCICMappModuleId, prvtCESUnappIPAddress=prvtCESUnappIPAddress, prvtCESCICMode=prvtCESCICMode, E1Impedance=E1Impedance, T1GainLimit=T1GainLimit, prvtCEST1GainLimit=prvtCEST1GainLimit, prvtCESCICClockNumber=prvtCESCICClockNumber, prvtCESModuleIPAddressMask=prvtCESModuleIPAddressMask, prvtCESUnappTable=prvtCESUnappTable, prvtCESDsx1ROGroup=prvtCESDsx1ROGroup, prvtCESDsx1ExtTable=prvtCESDsx1ExtTable, prvtCESModulePolicyuUnstrReplace=prvtCESModulePolicyuUnstrReplace, prvtCESDsx1Compliance=prvtCESDsx1Compliance, prvtCESModuleTxBackupClock=prvtCESModuleTxBackupClock, prvtCESUnappGateway=prvtCESUnappGateway, prvtCESApsModuleId=prvtCESApsModuleId, prvtCESDsx1Compliances=prvtCESDsx1Compliances, prvtCESDsx1AlarmTable=prvtCESDsx1AlarmTable, prvtCESModulePolicyLopsEnter=prvtCESModulePolicyLopsEnter, prvtCESModulePolicyIdleSignalling=prvtCESModulePolicyIdleSignalling, prvtCESAlarmMonitor=prvtCESAlarmMonitor, prvtCESModulePolicyLopsExit=prvtCESModulePolicyLopsExit, prvtCESCICTdmPort=prvtCESCICTdmPort, prvtCESModuleConfTable=prvtCESModuleConfTable, prvtCESUnappLineBuildOut=prvtCESUnappLineBuildOut, prvtCESModulePolicyRbit=prvtCESModulePolicyRbit, prvtCESDsx1Groups=prvtCESDsx1Groups, prvtCESModuleFirmwareVersion=prvtCESModuleFirmwareVersion, prvtCESModuleGateway=prvtCESModuleGateway, prvtCESDsx1ExtEntry=prvtCESDsx1ExtEntry, prvtCESModuleMACAddress=prvtCESModuleMACAddress, prvtCEST1LongCableLength=prvtCEST1LongCableLength, prvtCESModulePolicyLbit=prvtCESModulePolicyLbit, prvtCESApsActiveLine=prvtCESApsActiveLine, prvtCESTFTPServer=prvtCESTFTPServer, prvtCESModuleAvailable=prvtCESModuleAvailable, prvtCESModuleUnAvailableDueExtract=prvtCESModuleUnAvailableDueExtract, prvtCESModuleTxClock=prvtCESModuleTxClock, prvtCESCICModuleId=prvtCESCICModuleId, prvtCESClearPortStatistics=prvtCESClearPortStatistics, prvtSfBerThreshold=prvtSfBerThreshold, prvtCESUnappLineLength=prvtCESUnappLineLength, prvtCESModulePolicyuStrReplace=prvtCESModulePolicyuStrReplace, prvtCESDsx1Alarm=prvtCESDsx1Alarm, prvtCESCICState=prvtCESCICState, prvtCESUnappIPAddressMask=prvtCESUnappIPAddressMask, prvtCESModuleUnAvailableDueReload=prvtCESModuleUnAvailableDueReload, prvtCESUnappLineCoding=prvtCESUnappLineCoding, prvtCESModuleIndex=prvtCESModuleIndex, prvtCESModulePolicyuUnstrLbit=prvtCESModulePolicyuUnstrLbit, prvtCESModuleConfig=prvtCESModuleConfig, prvtCESApsTable=prvtCESApsTable, prvtCESCICMappTable=prvtCESCICMappTable, ServiceClock=ServiceClock, prvtCESCICEntry=prvtCESCICEntry, CESLineType=CESLineType, prvtCESApsEnable=prvtCESApsEnable, prvtCESCICStatus=prvtCESCICStatus, prvtCESDsx1AlarmVariable=prvtCESDsx1AlarmVariable, prvtCESConformance=prvtCESConformance, prvtCESModulePolicyIdlePattern=prvtCESModulePolicyIdlePattern, prvtCESModulePolicyuUnstrLops=prvtCESModulePolicyuUnstrLops, prvtCESUnappLoopbackConfig=prvtCESUnappLoopbackConfig, prvtCESServiceClock=prvtCESServiceClock, prvtCESModuleServiceClock=prvtCESModuleServiceClock, prvtCESUnappTransmitClockBackup=prvtCESUnappTransmitClockBackup, prvtCESUpdateAction=prvtCESUpdateAction, prvtCESUnappTransmitClockSource=prvtCESUnappTransmitClockSource, prvtCESModuleHardwareRevision=prvtCESModuleHardwareRevision, prvtCESUnappSignalMode=prvtCESUnappSignalMode, T1LongCableLength=T1LongCableLength, prvtCESE1Impedance=prvtCESE1Impedance, prvtCESModulePolicyLops=prvtCESModulePolicyLops, prvtCESDsx1AlarmThreshold=prvtCESDsx1AlarmThreshold, prvtCESCICMappState=prvtCESCICMappState, prvtCESModuleConfEntry=prvtCESModuleConfEntry, prvtCESModuleId=prvtCESModuleId)
