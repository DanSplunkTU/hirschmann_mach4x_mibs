#
# PySNMP MIB module ALCATEL-IND1-RDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-RDP-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:11 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
routingIND1RDP, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "routingIND1RDP")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "Counter32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1RouterDiscoveryProtocolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1))
alcatelIND1RouterDiscoveryProtocolMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n         version of this document is used with the products in question:\n\n                    Alcatel-Lucent, Enterprise Solutions Division\n                   (Formerly Alcatel Internetworking, Incorporated)\n                           26801 West Agoura Road\n                        Agoura Hills, CA  91301-5122\n                          United States Of America\n\n        Telephone:               North America  +1 800 995 2696\n                                 Latin America  +1 877 919 9526\n                                 Europe         +31 23 556 0100\n                                 Asia           +65 394 7933\n                                 All Other      +1 818 878 4507\n\n        Electronic Mail:         support@ind.alcatel.com\n        World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n        File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1RouterDiscoveryProtocolMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n         Network Management Protocol (SNMP) Management Information Base (MIB):\n\n             This proprietary MIB contains management information for\n             the configuration of Router Discovery Protocol global configuration parameters.\n\n         The right to make changes in specification and other information\n         contained in this document without prior notice is reserved.\n\n         No liability shall be assumed for any incidental, indirect, special, o\nr\n         consequential damages whatsoever arising from or related to this\n         document or the information contained herein.\n\n         Vendors, end-users, and other interested parties are granted\n         non-exclusive license to use this specification in connection with\n         management of the products for which it is intended to be used.\n\n                     Copyright (C) 1995-2003 Alcatel-Lucent\n                         ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1RDPMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1))
alaRDPConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1))
alaRDPStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaRDPStatus.setStatus('current')
if mibBuilder.loadTexts: alaRDPStatus.setDescription('Controls the status of Routing Discovery Protocol')
alaRDPIfTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20), )
if mibBuilder.loadTexts: alaRDPIfTable.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfTable.setDescription("The table of addressing information relevant to this\n            entity's IP addresses.")
alaRDPIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1), ).setIndexNames((0, "ALCATEL-IND1-RDP-MIB", "alaRDPIfAddr"))
if mibBuilder.loadTexts: alaRDPIfEntry.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfEntry.setDescription("The addressing information for one of this entity's IP\n            addresses.")
alaRDPIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfAddr.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfAddr.setDescription('Interface IP Address of this Router.')
alaRDPIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfStatus.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfStatus.setDescription('Indicates the status of the RDP interface')
alaRDPIfAdvtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfAdvtAddress.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfAdvtAddress.setDescription('Default advertisement Address is 224.0.0.1')
alaRDPIfMaxAdvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 4), Unsigned32().clone(600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfMaxAdvtInterval.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfMaxAdvtInterval.setDescription('Maximum advertisement interval is in seconds')
alaRDPIfMinAdvtInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfMinAdvtInterval.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfMinAdvtInterval.setDescription('Minimum advertisement interval in seconds: 0.75 * alaRDPIfMaxAdvtInterval')
alaRDPIfAdvLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfAdvLifeTime.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfAdvLifeTime.setDescription('Advertisement Lifetime in seconds: 3 * alaRDPIfMaxAdvtInterval')
alaRDPIfPrefLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfPrefLevel.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfPrefLevel.setDescription('Preference level for each IP address advertised on the interface: 0')
alaRDPIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 8), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaRDPIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfRowStatus.setDescription('The status of this table entry.')
alaRDPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIfName.setStatus('current')
if mibBuilder.loadTexts: alaRDPIfName.setDescription('The user defined name used to identify the IP interface')
alaRDPIPIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPIPIfStatus.setStatus('current')
if mibBuilder.loadTexts: alaRDPIPIfStatus.setDescription('Indicates the status of the IP interface')
alaRDPVrrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 1, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaRDPVrrpStatus.setStatus('current')
if mibBuilder.loadTexts: alaRDPVrrpStatus.setDescription('Indicates the status of the VRRP interface')
alcatelIND1RDPMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2))
alcatelIND1RDPMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 1))
alcatelIND1RDPMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 2))
alcatelIND1RDPMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-RDP-MIB", "alaRDPConfigMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1RDPMIBCompliance = alcatelIND1RDPMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1RDPMIBCompliance.setDescription('The compliance statement for router discovery protocol task\n             and implementing the ALCATEL-IND1-RDP MIB.')
alaRDPConfigMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 10, 11, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-RDP-MIB", "alaRDPStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAddr"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAdvtAddress"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfMaxAdvtInterval"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfMinAdvtInterval"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfAdvLifeTime"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfPrefLevel"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfRowStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIfName"), ("ALCATEL-IND1-RDP-MIB", "alaRDPIPIfStatus"), ("ALCATEL-IND1-RDP-MIB", "alaRDPVrrpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaRDPConfigMIBGroup = alaRDPConfigMIBGroup.setStatus('current')
if mibBuilder.loadTexts: alaRDPConfigMIBGroup.setDescription('A collection of objects to support management of RDP.')
mibBuilder.exportSymbols("ALCATEL-IND1-RDP-MIB", alaRDPConfig=alaRDPConfig, alcatelIND1RDPMIBConformance=alcatelIND1RDPMIBConformance, alaRDPIfAdvtAddress=alaRDPIfAdvtAddress, alaRDPIfMaxAdvtInterval=alaRDPIfMaxAdvtInterval, alaRDPIfRowStatus=alaRDPIfRowStatus, alcatelIND1RDPMIBGroups=alcatelIND1RDPMIBGroups, alaRDPIfName=alaRDPIfName, alaRDPIfTable=alaRDPIfTable, PYSNMP_MODULE_ID=alcatelIND1RouterDiscoveryProtocolMIB, alcatelIND1RouterDiscoveryProtocolMIB=alcatelIND1RouterDiscoveryProtocolMIB, alcatelIND1RDPMIBCompliance=alcatelIND1RDPMIBCompliance, alaRDPIfStatus=alaRDPIfStatus, alaRDPIfAdvLifeTime=alaRDPIfAdvLifeTime, alcatelIND1RDPMIBObjects=alcatelIND1RDPMIBObjects, alaRDPVrrpStatus=alaRDPVrrpStatus, alaRDPIfEntry=alaRDPIfEntry, alaRDPIfPrefLevel=alaRDPIfPrefLevel, alaRDPConfigMIBGroup=alaRDPConfigMIBGroup, alaRDPStatus=alaRDPStatus, alaRDPIPIfStatus=alaRDPIPIfStatus, alaRDPIfAddr=alaRDPIfAddr, alaRDPIfMinAdvtInterval=alaRDPIfMinAdvtInterval, alcatelIND1RDPMIBCompliances=alcatelIND1RDPMIBCompliances)
