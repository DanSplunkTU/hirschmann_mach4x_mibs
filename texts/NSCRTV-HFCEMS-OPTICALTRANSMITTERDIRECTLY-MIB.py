#
# PySNMP MIB module NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/glassway/NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB
# Produced by pysmi-1.1.8 at Thu Jan 13 23:50:28 2022
# On host fv-az83-250 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
otdIdent, = mibBuilder.importSymbols("NSCRTV-ROOT", "otdIdent")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, ModuleIdentity, Integer32, Unsigned32, MibIdentifier, ObjectIdentity, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "ModuleIdentity", "Integer32", "Unsigned32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
otdVendorOID = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdVendorOID.setStatus('optional')
if mibBuilder.loadTexts: otdVendorOID.setDescription('˶ṩ̶ֱӵƹⷢͻMIB䣬ʱ˶Ӧֱָӵƹⷢ\n            ڵotdIdent')
otdSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: otdSlotNumber.setDescription('йⷢͻܲ')
otdOptDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3), )
if mibBuilder.loadTexts: otdOptDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: otdOptDeviceTable.setDescription('йⷢͻϢ')
otdOptDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdIndex"))
if mibBuilder.loadTexts: otdOptDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: otdOptDeviceEntry.setDescription('йⷢͻϢĿ')
otdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: otdIndex.setDescription('йⷢͻ,ǹⷢͻŻܲۺš')
otdLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserWavelength.setStatus('mandatory')
if mibBuilder.loadTexts: otdLaserWavelength.setDescription('')
otdLaserType = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserType.setStatus('optional')
if mibBuilder.loadTexts: otdLaserType.setDescription('ͣЧֵΪunisolated FP, isolated FP, uncooled DFB, cooled DFB,ITU\n            ȡ')
otdDriveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDriveLevel.setStatus('optional')
if mibBuilder.loadTexts: otdDriveLevel.setDescription('ģ鼤ƽ,λΪdBuV/ch˶ҪMIBеǼһĿ')
otdInputRFLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdInputRFLevel.setStatus('optional')
if mibBuilder.loadTexts: otdInputRFLevel.setDescription('Ƶźŵƽ,λΪdBuV/ch˶ҪMIBеǼһĿ')
otdInputRFAttenuationRange = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdInputRFAttenuationRange.setStatus('optional')
if mibBuilder.loadTexts: otdInputRFAttenuationRange.setDescription('Ƶź˥Χ,λΪ0.1dB')
otdInputRFAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdInputRFAttenuation.setStatus('optional')
if mibBuilder.loadTexts: otdInputRFAttenuation.setDescription('Ƶź˥,λΪ0.1dB')
otdLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserTemp.setStatus('mandatory')
if mibBuilder.loadTexts: otdLaserTemp.setDescription('¶,λΪ0.1϶ȡ˶ҪMIBеǼһĿ')
otdLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdLaserCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: otdLaserCurrent.setDescription(',λΪ0.1mA˶ҪMIBеǼһĿ')
otdOpicalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdOpicalOutputPower.setStatus('mandatory')
if mibBuilder.loadTexts: otdOpicalOutputPower.setDescription('\u2e66,λΪ0.1mW˶ҪMIBеǼһĿ')
otdTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: otdTecCurrent.setDescription(',λΪ0.01A˶ҪMIBеǼһĿ')
otdAGCControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdAGCControl.setStatus('optional')
if mibBuilder.loadTexts: otdAGCControl.setDescription('AGCʹܡ')
otdConfigurationDriveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationDriveLevel.setStatus('optional')
if mibBuilder.loadTexts: otdConfigurationDriveLevel.setDescription('趨RFƽƫλΪ0.1dBòAGCģʽΪʱá\n            ϵͳݸ趨ԶRF棨˥Ӷﵽ趨ļRFƽƫ\n            ')
otdConfigurationRFAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationRFAttenuation.setStatus('optional')
if mibBuilder.loadTexts: otdConfigurationRFAttenuation.setDescription('趨RFź棨˥ƫλΪ0.1dBòAGCģʽΪ\n            رʱãMGCϵͳݸ趨RFŵ棨˥Ӷﵽֶ\n            ƼRFƽĿġ')
otdConfigurationRFChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdConfigurationRFChannels.setStatus('optional')
if mibBuilder.loadTexts: otdConfigurationRFChannels.setDescription('RFźĵźƵ')
otdFansNumber = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansNumber.setStatus('mandatory')
if mibBuilder.loadTexts: otdFansNumber.setDescription("ʾڲɢȷȵ'0'ʾ豸֧ɢȷȵļûɢȷȡ")
otdFansTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5), )
if mibBuilder.loadTexts: otdFansTable.setStatus('optional')
if mibBuilder.loadTexts: otdFansTable.setDescription('ɢȷϢ')
otdFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdFansIndex"))
if mibBuilder.loadTexts: otdFansEntry.setStatus('optional')
if mibBuilder.loadTexts: otdFansEntry.setDescription('ɢȷϢĿ')
otdFansIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansIndex.setStatus('optional')
if mibBuilder.loadTexts: otdFansIndex.setDescription('ɢȷϢ')
otdFansState = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fault", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansState.setStatus('optional')
if mibBuilder.loadTexts: otdFansState.setDescription('ɢȷȹ״̬normal ʾfaultʾʧЧoffʾرա˶ҪɢMIBе\n            һĿ')
otdFansSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansSpeed.setStatus('optional')
if mibBuilder.loadTexts: otdFansSpeed.setDescription("ɢȷȹʱת٣λΪת/֣֧תټʱΪ'0'˶Ҫ\n            ɢMIBеǼһĿ")
otdFansControl = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: otdFansControl.setStatus('optional')
if mibBuilder.loadTexts: otdFansControl.setDescription('ɢȷȹơ ')
otdFansName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdFansName.setStatus('optional')
if mibBuilder.loadTexts: otdFansName.setDescription('ɢȷơ')
otdNumberDCPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdNumberDCPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: otdNumberDCPowerSupply.setDescription("ֱԴ'0'ʾӦִ֧˹ܡ")
otdDCPowerSupplyMode = MibScalar((1, 3, 6, 1, 4, 1, 17409, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loadsharing", 1), ("switchedredundant", 2), ("alonesupply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerSupplyMode.setStatus('optional')
if mibBuilder.loadTexts: otdDCPowerSupplyMode.setDescription('Դģʽ')
otdDCPowerTable = MibTable((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8), )
if mibBuilder.loadTexts: otdDCPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: otdDCPowerTable.setDescription('ֱԴϢ')
otdDCPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1), ).setIndexNames((0, "NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", "otdDCPowerIndex"))
if mibBuilder.loadTexts: otdDCPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: otdDCPowerEntry.setDescription('ֱԴϢĿ')
otdDCPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: otdDCPowerIndex.setDescription('ֱԴ')
otdDCPowerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: otdDCPowerVoltage.setDescription('ԴѹλΪ0.1V˶ҪMIBеǼһĿ')
otdDCPowerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerCurrent.setStatus('optional')
if mibBuilder.loadTexts: otdDCPowerCurrent.setDescription('ԴλΪ0.1A˶ҪMIBеǼһĿ')
otdDCPowerName = MibTableColumn((1, 3, 6, 1, 4, 1, 17409, 1, 6, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otdDCPowerName.setStatus('mandatory')
if mibBuilder.loadTexts: otdDCPowerName.setDescription('Դƣ磺24VֱԴ\n            ֵֶû涨ӦѹԴ\u0ee5ֿ\n            еĶ澯ʱ˶ӦŽhfcAlarmEventalarmText\uf8e8\n            ¼D')
mibBuilder.exportSymbols("NSCRTV-HFCEMS-OPTICALTRANSMITTERDIRECTLY-MIB", otdVendorOID=otdVendorOID, otdFansName=otdFansName, otdConfigurationRFChannels=otdConfigurationRFChannels, otdTecCurrent=otdTecCurrent, otdConfigurationDriveLevel=otdConfigurationDriveLevel, otdLaserType=otdLaserType, otdDCPowerVoltage=otdDCPowerVoltage, otdOptDeviceEntry=otdOptDeviceEntry, otdDriveLevel=otdDriveLevel, otdDCPowerSupplyMode=otdDCPowerSupplyMode, otdSlotNumber=otdSlotNumber, otdFansState=otdFansState, otdInputRFAttenuationRange=otdInputRFAttenuationRange, otdConfigurationRFAttenuation=otdConfigurationRFAttenuation, otdOptDeviceTable=otdOptDeviceTable, otdNumberDCPowerSupply=otdNumberDCPowerSupply, otdDCPowerTable=otdDCPowerTable, otdDCPowerName=otdDCPowerName, otdLaserTemp=otdLaserTemp, otdFansSpeed=otdFansSpeed, otdInputRFLevel=otdInputRFLevel, otdOpicalOutputPower=otdOpicalOutputPower, otdFansControl=otdFansControl, otdFansEntry=otdFansEntry, otdLaserCurrent=otdLaserCurrent, otdAGCControl=otdAGCControl, otdFansTable=otdFansTable, otdDCPowerIndex=otdDCPowerIndex, otdFansNumber=otdFansNumber, otdFansIndex=otdFansIndex, otdDCPowerCurrent=otdDCPowerCurrent, otdDCPowerEntry=otdDCPowerEntry, otdIndex=otdIndex, otdLaserWavelength=otdLaserWavelength, otdInputRFAttenuation=otdInputRFAttenuation)
