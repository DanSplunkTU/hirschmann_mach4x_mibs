#
# PySNMP MIB module PRVT-MPLS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/telco-systems/binox/PRVT-MPLS-IF-MIB
# Produced by pysmi-1.1.3 at Wed Dec  8 18:20:51 2021
# On host fv-az74-115 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mpls, = mibBuilder.importSymbols("PRVT-SWITCH-MIB", "mpls")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ObjectIdentity, ModuleIdentity, MibIdentifier, iso, TimeTicks, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "TimeTicks", "Unsigned32", "IpAddress", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
prvtMplsIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6))
prvtMplsIfMIB.setRevisions(('2011-08-05 00:00', '2010-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: prvtMplsIfMIB.setRevisionsDescriptions(('Added ifaceMplsRsvpEgrLabelUsage, ifaceMplsLdpEgrLabelUsage, ifaceMplsSignalCapabilities.', 'Initial version.',))
if mibBuilder.loadTexts: prvtMplsIfMIB.setLastUpdated('201108050000Z')
if mibBuilder.loadTexts: prvtMplsIfMIB.setOrganization('BATM Advanced Communication')
if mibBuilder.loadTexts: prvtMplsIfMIB.setContactInfo('BATM/Telco Systems Support team\n         Email:\n         For North America: techsupport@telco.com\n         For North Europe: support@batm.de, info@batm.de\n         For the rest of the world: techsupport@telco.com')
if mibBuilder.loadTexts: prvtMplsIfMIB.setDescription('This module includes configuration parameters for MPLS and RSVP interface specific parameters.')
class PrvtMplsIpAddressMask(TextualConvention, OctetString):
    description = 'An IPv4 address and mask represented as a 5 octet string.\n         First four octets are the IP address. The fifth octet is the IP mask.'
    status = 'current'
    displayHint = '1d.1d.1d.1d/1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(5, 5)
    fixedLength = 5

class EgressLabelUsageType(TextualConvention, Integer32):
    description = 'Possible egress label usage values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("global", 0), ("implicitNull", 1), ("explicitNull", 2))

prvtMplsIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1))
prvtMplsIfaceObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1))
prvtMplsIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1), )
if mibBuilder.loadTexts: prvtMplsIfaceTable.setStatus('current')
if mibBuilder.loadTexts: prvtMplsIfaceTable.setDescription('This table contains object for configuring MPLS and LDP interface specific parameters.')
prvtMplsIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: prvtMplsIfaceEntry.setStatus('current')
if mibBuilder.loadTexts: prvtMplsIfaceEntry.setDescription('An entry in prvtMplsIfaceTable.')
ifaceMplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsRowStatus.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsRowStatus.setDescription('The RowStatus for this interface.')
ifaceMplsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsEnable.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsEnable.setDescription('Enable or disable MPLS on this interface.')
ifaceMplsPHPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsPHPEnable.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsPHPEnable.setDescription('Enable or disable Penultimate Hop Popping on this interface.')
ifaceMplsLdpHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsLdpHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsLdpHelloHoldTimer.setDescription('The LDP Hello Hold Time for this interface.')
ifaceMplsLdpKeepaliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsLdpKeepaliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsLdpKeepaliveHoldTimer.setDescription('The LDP Keep-alive Hold Time for this interface.')
ifaceMplsRsvpEgrLabelUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 7), EgressLabelUsageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsRsvpEgrLabelUsage.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsRsvpEgrLabelUsage.setDescription('The egress label usage for RSVP.')
ifaceMplsLdpEgrLabelUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 8), EgressLabelUsageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsLdpEgrLabelUsage.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsLdpEgrLabelUsage.setDescription('The egress label usage for LDP.')
ifaceMplsSignalCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("sigCapsRsvp", 0), ("sigCapsLdp", 1), ("sigCapsData", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifaceMplsSignalCapabilities.setStatus('current')
if mibBuilder.loadTexts: ifaceMplsSignalCapabilities.setDescription('A bit map specifying the signaling capabilities that this MPLS\n         interface is to have.\n         Setting the bit sigCapsRsvp will enable RSVP signaling.\n         Setting the bit sigCapsLdp will enable LDP signaling.\n         The bit sigCapsData must always be set.')
prvtMplsRouteObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2))
prvtMplsRouteProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 1), )
if mibBuilder.loadTexts: prvtMplsRouteProtocolTable.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteProtocolTable.setDescription('This table contains the configuration of the egress and ingress routes for LDP label\n         packets.')
prvtMplsRouteProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 1, 1), ).setIndexNames((0, "PRVT-MPLS-IF-MIB", "prvtMplsRouteProtocolDirection"), (0, "PRVT-MPLS-IF-MIB", "prvtMplsRouteProtocolType"))
if mibBuilder.loadTexts: prvtMplsRouteProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteProtocolEntry.setDescription('An entry in the table represents the configuration of a particular route type for ingress\n         or egress.')
prvtMplsRouteProtocolDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: prvtMplsRouteProtocolDirection.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteProtocolDirection.setDescription('The direction of the route that will be used to receive or send LDP packets.')
prvtMplsRouteProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bgp", 1), ("connected", 2), ("isisl1", 3), ("isisl2", 4), ("kernel", 5), ("ospf", 6), ("rip", 7), ("static", 8))))
if mibBuilder.loadTexts: prvtMplsRouteProtocolType.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteProtocolType.setDescription('The type of the route which will be used to send or receive LDP packets.')
prvtMplsRouteProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsRouteProtocolRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteProtocolRowStatus.setDescription('This object is used to create an entry in the table.')
prvtMplsRouteAddressTable = MibTable((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 2), )
if mibBuilder.loadTexts: prvtMplsRouteAddressTable.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteAddressTable.setDescription('This table contains the egress and ingress routes for LDP label\n         packets.')
prvtMplsRouteAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 2, 1), ).setIndexNames((0, "PRVT-MPLS-IF-MIB", "prvtMplsRouteProtocolDirection"), (0, "PRVT-MPLS-IF-MIB", "prvtMplsRouteAddressIpAddrMask"))
if mibBuilder.loadTexts: prvtMplsRouteAddressEntry.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteAddressEntry.setDescription('An entry in prvtMplsRouteAddressTable.')
prvtMplsRouteAddressIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 2, 1, 2), PrvtMplsIpAddressMask())
if mibBuilder.loadTexts: prvtMplsRouteAddressIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteAddressIpAddrMask.setDescription('The IP prefix of the route that will be used to send or receive LDP packets.')
prvtMplsRouteAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 738, 10, 6, 3, 6, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prvtMplsRouteAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: prvtMplsRouteAddressRowStatus.setDescription('This is object is used to create an entry in the table.')
mibBuilder.exportSymbols("PRVT-MPLS-IF-MIB", EgressLabelUsageType=EgressLabelUsageType, prvtMplsRouteProtocolTable=prvtMplsRouteProtocolTable, ifaceMplsRowStatus=ifaceMplsRowStatus, prvtMplsRouteProtocolRowStatus=prvtMplsRouteProtocolRowStatus, prvtMplsIfaceTable=prvtMplsIfaceTable, ifaceMplsLdpHelloHoldTimer=ifaceMplsLdpHelloHoldTimer, prvtMplsIfaceObjs=prvtMplsIfaceObjs, prvtMplsRouteAddressIpAddrMask=prvtMplsRouteAddressIpAddrMask, prvtMplsRouteAddressEntry=prvtMplsRouteAddressEntry, prvtMplsIfMIB=prvtMplsIfMIB, ifaceMplsLdpEgrLabelUsage=ifaceMplsLdpEgrLabelUsage, ifaceMplsLdpKeepaliveHoldTimer=ifaceMplsLdpKeepaliveHoldTimer, prvtMplsRouteProtocolDirection=prvtMplsRouteProtocolDirection, prvtMplsRouteAddressRowStatus=prvtMplsRouteAddressRowStatus, prvtMplsRouteAddressTable=prvtMplsRouteAddressTable, prvtMplsIfMIBObjects=prvtMplsIfMIBObjects, ifaceMplsPHPEnable=ifaceMplsPHPEnable, prvtMplsRouteProtocolType=prvtMplsRouteProtocolType, PYSNMP_MODULE_ID=prvtMplsIfMIB, PrvtMplsIpAddressMask=PrvtMplsIpAddressMask, prvtMplsIfaceEntry=prvtMplsIfaceEntry, ifaceMplsRsvpEgrLabelUsage=ifaceMplsRsvpEgrLabelUsage, prvtMplsRouteProtocolEntry=prvtMplsRouteProtocolEntry, ifaceMplsSignalCapabilities=ifaceMplsSignalCapabilities, ifaceMplsEnable=ifaceMplsEnable, prvtMplsRouteObjs=prvtMplsRouteObjs)
