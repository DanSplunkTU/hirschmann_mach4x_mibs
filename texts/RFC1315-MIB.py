#
# PySNMP MIB module RFC1315-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/RFC1315-MIB
# Produced by pysmi-1.1.8 at Sat Jan 15 14:59:54 2022
# On host fv-az36-128 platform Linux version 5.11.0-1025-azure by user runner
# Using Python version 3.10.1 (main, Dec 22 2021, 10:45:09) [GCC 9.3.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, NotificationType, ObjectIdentity, Counter32, transmission, TimeTicks, NotificationType, IpAddress, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Counter32", "transmission", "TimeTicks", "NotificationType", "IpAddress", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
frame_relay = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32)).setLabel("frame-relay")
class Index(Integer32):
    pass

class DLCI(Integer32):
    pass

frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1), )
if mibBuilder.loadTexts: frDlcmiTable.setReference('Draft American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: frDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiTable.setDescription('The Parameters for the Data Link Connection Management\n            Interface for the frame relay service on this\n            interface.')
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiEntry.setDescription('The Parameters for a particular Data Link Con-\n                nection Management Interface.')
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiIfIndex.setDescription('The ifIndex value of the  corresponding  ifEn-\n                try.')
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiState.setReference('Draft American National Standard T1.617-1991')
if mibBuilder.loadTexts: frDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiState.setDescription('This variable states which Data  Link  Connec-\n                tion Management scheme is active (and by impli-\n                cation, what DLCI it uses) on the  Frame  Relay\n                interface.')
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddress.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiAddress.setDescription('This variable states which address  format  is\n                in use on the Frame Relay interface.')
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddressLen.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiAddressLen.setDescription('This variable states which address  length  in\n                octets.  In the case of Q922 format, the length\n                indicates the entire length of the address  in-\n                cluding the control portion.')
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setReference('Draft American National  Standard  T1.617-1991,\n               Section D.7 Timer T391.')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiPollingInterval.setDescription('This is the number of seconds between  succes-\n                sive status enquiry messages.')
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setReference('Draft American National  Standard  T1.617-1991,\n               Section D.7 Counter N391.')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setDescription('Number of status enquiry intervals  that  pass\n                before  issuance  of a full status enquiry mes-\n                sage.')
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setReference('Draft American National  Standard  T1.617-1991,\n               Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setDescription('This  is  the  maximum  number  of  unanswered\n                Status Enquiries the equipment shall accept be-\n                fore declaring the interface down.')
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setReference('Draft American National  Standard  T1.617-1991,\n               Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals\n                over which the error threshold is counted.  For\n                example, if within 'MonitoredEvents' number  of\n                events  the  station  receives 'ErrorThreshold'\n                number of errors, the interface  is  marked  as\n                down.")
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed\n                for  this  interface.   Usually dictated by the\n                Frame Relay network.\n\n                In response to a SET, if a value less than zero\n                or  higher  than the agent's maximal capability\n                is configured, the agent  should  respond  bad-\n                Value")
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: frDlcmiMulticast.setDescription('This indicates whether the Frame Relay  inter-\n                face is using a multicast service.')
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2), )
if mibBuilder.loadTexts: frCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitTable.setDescription('A table containing information about specific Data\n            Link Connection Identifiers and corresponding virtual\n            circuits.')
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitEntry.setDescription('The information regarding a single  Data  Link\n                Connection Identifier.')
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitIfIndex.setDescription('The ifIndex Value of the ifEntry this  virtual\n                circuit is layered onto.')
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setReference('Draft American National  Standard  T1.618-1991,\n               Section 3.3.6')
if mibBuilder.loadTexts: frCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitDlci.setDescription('The Data Link Connection Identifier  for  this\n                virtual circuit.')
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitState.setDescription("Indicates whether the particular virtual  cir-\n                cuit  is operational.  In the absence of a Data\n                Link Connection Management  Interface,  virtual\n                circuit  entries  (rows) may be created by set-\n                ting virtual  circuit  state  to  'active',  or\n                deleted by changing Circuit state to 'invalid'.\n                Whether or not the row actually  disappears  is\n                left  to the implementation, so this object may\n                actually read as 'invalid' for  some  arbitrary\n                length  of  time.   It is also legal to set the\n                state of a virtual  circuit  to  'inactive'  to\n                temporarily disable a given circuit.")
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setReference('Draft American National  Standard  T1.618-1991,\n               Section 3.3.3')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setDescription('Number of frames received from the network in-\n                dicating  forward  congestion since the virtual\n                circuit was created.')
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setReference('Draft American National  Standard  T1.618-1991,\n               Section 3.3.4')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setDescription('Number of frames received from the network in-\n                dicating  backward congestion since the virtual\n                circuit was created.')
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitSentFrames.setDescription('The number of frames sent  from  this  virtual\n                circuit since it was created.')
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitSentOctets.setDescription('The number of octets sent  from  this  virtual\n                circuit since it was created.')
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedFrames.setDescription('Number of frames received  over  this  virtual\n                circuit since it was created.')
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitReceivedOctets.setDescription('Number of octets received  over  this  virtual\n                circuit since it was created.')
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitCreationTime.setDescription('The value of sysUpTime when the  virtual  cir-\n                cuit was created, whether by the Data Link Con-\n                nection Management Interface  or  by  a  SetRe-\n                quest.')
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitLastTimeChange.setDescription('The value of sysUpTime when last there  was  a\n                change in the virtual circuit state')
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setReference('Draft American National  Standard  T1.617-1991,\n               Section 6.5.19')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitCommittedBurst.setDescription('This variable indicates the maximum amount  of\n                data,  in  bits,  that  the  network  agrees to\n                transfer under normal  conditions,  during  the\n                measurement interval.')
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitExcessBurst.setReference('Draft American National  Standard  T1.617-1991,\n               Section 6.5.19')
if mibBuilder.loadTexts: frCircuitExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitExcessBurst.setDescription('This variable indicates the maximum amount  of\n                uncommitted data bits that the network will at-\n                tempt to deliver over the measurement interval.\n\n                By default, if not configured when creating the\n                entry, the Excess Information Burst Size is set\n                to the value of ifSpeed.')
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitThroughput.setReference('Draft American National  Standard  T1.617-1991,\n               Section 6.5.19')
if mibBuilder.loadTexts: frCircuitThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: frCircuitThroughput.setDescription("Throughput is the average number of 'Frame Re-\n                lay  Information  Field'  bits  transferred per\n                second across a user network interface  in  one\n                direction, measured over the measurement inter-\n                val.\n\n                If the  configured  committed  burst  rate  and\n                throughput  are  both non-zero, the measurement\n                interval\n                T=frCircuitCommittedBurst/frCircuitThroughput.\n\n                If the  configured  committed  burst  rate  and\n                throughput  are  both zero, the measurement in-\n                terval\n                       T=frCircuitExcessBurst/ifSpeed.")
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3), )
if mibBuilder.loadTexts: frErrTable.setStatus('mandatory')
if mibBuilder.loadTexts: frErrTable.setDescription('A table containing information about Errors on the\n            Frame Relay interface.')
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1), ).setIndexNames((0, "RFC1315-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frErrEntry.setDescription('The error information for a single frame relay\n                interface.')
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frErrIfIndex.setDescription('The ifIndex Value of the  corresponding  ifEn-\n                try.')
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setStatus('mandatory')
if mibBuilder.loadTexts: frErrType.setDescription('The type of error that was last seen  on  this\n                interface.')
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setStatus('mandatory')
if mibBuilder.loadTexts: frErrData.setDescription('An octet string containing as much of the  er-\n                ror  packet as possible.  As a minimum, it must\n                contain the Q.922 Address or  as  much  as  was\n                delivered.   It is desirable to include all in-\n                formation up to the PDU.')
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setStatus('mandatory')
if mibBuilder.loadTexts: frErrTime.setDescription('The value of sysUpTime at which the error  was\n                detected.')
frame_relay_globals = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4)).setLabel("frame-relay-globals")
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: frTrapState.setDescription('This variable  indicates  whether  the  system\n                produces the frDLCIStatusChange trap.')
frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32) + (0,1)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"), ("RFC1315-MIB", "frCircuitState"))
if mibBuilder.loadTexts: frDLCIStatusChange.setDescription('This trap indicates that the indicated Virtual\n                Circuit  has changed state.  It has either been\n                created or invalidated, or has toggled  between\n                the active and inactive states.')
mibBuilder.exportSymbols("RFC1315-MIB", Index=Index, frDlcmiAddressLen=frDlcmiAddressLen, frDLCIStatusChange=frDLCIStatusChange, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, frCircuitLastTimeChange=frCircuitLastTimeChange, frCircuitEntry=frCircuitEntry, frame_relay_globals=frame_relay_globals, frTrapState=frTrapState, frDlcmiMulticast=frDlcmiMulticast, frCircuitReceivedOctets=frCircuitReceivedOctets, frDlcmiTable=frDlcmiTable, frDlcmiPollingInterval=frDlcmiPollingInterval, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, frErrData=frErrData, frame_relay=frame_relay, frCircuitCreationTime=frCircuitCreationTime, frDlcmiAddress=frDlcmiAddress, frErrTable=frErrTable, DLCI=DLCI, frDlcmiEntry=frDlcmiEntry, frCircuitState=frCircuitState, frCircuitSentFrames=frCircuitSentFrames, frCircuitIfIndex=frCircuitIfIndex, frCircuitReceivedFrames=frCircuitReceivedFrames, frCircuitExcessBurst=frCircuitExcessBurst, frDlcmiErrorThreshold=frDlcmiErrorThreshold, frErrTime=frErrTime, frErrIfIndex=frErrIfIndex, frErrEntry=frErrEntry, frCircuitTable=frCircuitTable, frCircuitThroughput=frCircuitThroughput, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frCircuitSentOctets=frCircuitSentOctets, frErrType=frErrType, frDlcmiIfIndex=frDlcmiIfIndex, frCircuitReceivedBECNs=frCircuitReceivedBECNs, frCircuitCommittedBurst=frCircuitCommittedBurst, frCircuitDlci=frCircuitDlci, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frDlcmiState=frDlcmiState)
