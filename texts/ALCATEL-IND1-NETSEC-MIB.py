#
# PySNMP MIB module ALCATEL-IND1-NETSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-NETSEC-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:37:12 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1NetSec, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1NetSec")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Gauge32, Unsigned32, ObjectIdentity, Counter32, Bits, Counter64, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter32", "Bits", "Counter64", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
alcatelIND1NETSECMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1))
alcatelIND1NETSECMIB.setRevisions(('2010-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1NETSECMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.',))
if mibBuilder.loadTexts: alcatelIND1NETSECMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1NETSECMIB.setOrganization('Alcatel IND')
if mibBuilder.loadTexts: alcatelIND1NETSECMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n        version of this document is used with the products in question:\n\n                   Alcatel-Lucent, Enterprise Solutions Division\n                  (Formerly Alcatel Internetworking, Incorporated)\n                          26801 West Agoura Road\n                       Agoura Hills, CA  91301-5122\n                         United States Of America\n\n       Telephone:               North America  +1 800 995 2696\n                                Latin America  +1 877 919 9526\n                                Europe         +31 23 556 0100\n                                Asia           +65 394 7933\n                                All Other      +1 818 878 4507\n\n       Electronic Mail:         support@ind.alcatel.com\n       World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n       File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1NETSECMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n        Network Management Protocol (SNMP) Management Information Base (MIB):\n\n            For the Birds Of Prey Product Line\n            Configuration and monitoring of the EtherBreaker feature.\n\n        The right to make changes in specification and other information\n        contained in this document without prior notice is reserved.\n\n\n        No liability shall be assumed for any incidental, indirect, special, or\n        consequential damages whatsoever arising from or related to this\n        document or the information contained herein.\n\n        Vendors, end-users, and other interested parties are granted\n        non-exclusive license to use this specification in connection with\n        management of the products for which it is intended to be used.\n\n                    Copyright (C) 1995-2007 Alcatel-Lucent\n                        ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1NETSECMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 0))
if mibBuilder.loadTexts: alcatelIND1NETSECMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NETSECMIBNotifications.setDescription('Branch For NETSEC MIB Subsystem Notifications.')
alcatelIND1NETSECMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1))
class AlaAnomalyType(TextualConvention, Integer32):
    description = 'Types of anomalies being configured or monitored'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("all", 0), ("arpaddressscan", 1), ("arpflood", 2), ("reserved", 3), ("arpfailure", 4), ("icmpaddressscan", 5), ("icmpflood", 6), ("icmpunreachable", 7), ("tcpportscan", 8), ("tcpaddressscan", 9), ("synflood", 10), ("synfailure", 11), ("synackscan", 12), ("finscan", 13), ("finackdiff", 14), ("rstcount", 15))

class AlaPacketType(TextualConvention, Integer32):
    description = 'Types of packets being monitored'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("arpreply", 1), ("arprequest", 2), ("icmpechoreply", 3), ("icmpechorequest", 4), ("icmpdnr", 5), ("tcpsynonly", 6), ("tcpsynack", 7), ("tcpsynnack", 8), ("tcpfinack", 9), ("tcpfinnack", 10), ("tcprst", 11))

class AlaNetsecStatus(TextualConvention, Integer32):
    description = 'State of polar variables.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("default", 0), ("enable", 1), ("disable", 2))

alaNetSecPortRangeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1))
alaNetSecPortRangeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1), )
if mibBuilder.loadTexts: alaNetSecPortRangeGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupTable.setDescription('Table for collecting port-range and monitoring-group associations.\n                  A port belongs to at most one monitoring-group.')
alaNetSecPortRangeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupStartIfId"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupEndIfId"))
if mibBuilder.loadTexts: alaNetSecPortRangeGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupEntry.setDescription('Each entry is identified by a unique port-range.')
alaNetSecPortRangeGroupStartIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortRangeGroupStartIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupStartIfId.setDescription('Starting interface index of a port-range')
alaNetSecPortRangeGroupEndIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortRangeGroupEndIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupEndIfId.setDescription('Ending interface index of a port-range')
alaNetSecPortRangeGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecPortRangeGroupName.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupName.setDescription('Name of monitoring-group with which this port-range is associated.')
alaNetSecPortRangeGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecPortRangeGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupRowStatus.setDescription('identifies state of this entry. CREATEANDGO will only work, if the name of alaNetSecPortRangeGroupName is part of the create request')
alaNetSecMonitoringGroupConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2))
alaNetSecMonitoringGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaNetSecMonitoringGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupTable.setDescription("Table for collecting monitoring-groups' anomaly configurations")
alaNetSecMonitoringGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupName"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomaly"))
if mibBuilder.loadTexts: alaNetSecMonitoringGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupEntry.setDescription("Each entry identifies configuration of a monitoring-group's anomaly-type's parameter")
alaNetSecMonitoringGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaNetSecMonitoringGroupName.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupName.setDescription('name of the monitoring-group')
alaNetSecMonitoringGroupAnomaly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 2), AlaAnomalyType())
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomaly.setDescription("monitoring-group's anomaly-type")
alaNetSecMonitoringGroupAnomalyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 3), AlaNetsecStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyState.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyState.setDescription('State of detecting indexed anomaly.')
alaNetSecMonitoringGroupAnomalyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 4), AlaNetsecStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyLog.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyLog.setDescription('State of logging upon detecting anomaly.')
alaNetSecMonitoringGroupAnomalyTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 5), AlaNetsecStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyTrap.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyTrap.setDescription('State of sending traps upon detecting anomaly.')
alaNetSecMonitoringGroupAnomalyQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 6), AlaNetsecStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyQuarantine.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyQuarantine.setDescription('State of Quarantining anomalous port upon detecting anomaly.')
alaNetSecMonitoringGroupAnomalyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyCount.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyCount.setDescription('Count of packets that must be seen during monitoring period\n                   to initiate anomaly detection check.\n                   Default value varies as below with anomaly:\n                   Anomaly                      Count\n                   -------                      -----\n                   ARP address scan             50\n                   ARP flood                    90\n                   ARP poisoning                 6\n                   ARP Failure                   6\n                   ICMP address scan            30\n                   ICMP Flood                   90\n                   ICMP Unreachable             20\n                   TCP port Scan                20\n                   TCP address scan             30\n                   SYN flood                    90\n                   SYN Failure                  10\n                   SYN-ACK Scan                  2\n                   FIN Scan                      6\n                   FIN-ACK Diff                  5\n                   RST Count                    50')
alaNetSecMonitoringGroupAnomalySensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalySensitivity.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalySensitivity.setDescription('Sensitivity of Anomaly Check to deviation from expected behavior.')
alaNetSecMonitoringGroupAnomalyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyPeriod.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupAnomalyPeriod.setDescription('Time in seconds to monitor packets before checking for anomaly.')
alaNetSecMonitoringGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaNetSecMonitoringGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupRowStatus.setDescription('CREATEANDGO will only work if, besides RowStatus,  at least one of State, Log, Trap, Quarantine, Count, Sensitivity or Period is part of the request.')
alaNetSecPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3))
alaNetSecPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaNetSecPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsTable.setDescription('Table for reporting port specific statistics')
alaNetSecPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsIfId"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsPacket"))
if mibBuilder.loadTexts: alaNetSecPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsEntry.setDescription('Stats are collected on a <port,packet-type,packet-direction,total/last> basis')
alaNetSecPortStatsIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortStatsIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsIfId.setDescription('Interface Index of the port')
alaNetSecPortStatsPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 2), AlaPacketType())
if mibBuilder.loadTexts: alaNetSecPortStatsPacket.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsPacket.setDescription('Packet type')
alaNetSecPortStatsLastIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortStatsLastIngress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsLastIngress.setDescription('Count of Indexed Ingress packets observed during last 5 seconds')
alaNetSecPortStatsLastEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortStatsLastEgress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsLastEgress.setDescription('Count of Indexed Egress packets observed during last 5 seconds')
alaNetSecPortStatsTotalIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortStatsTotalIngress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsTotalIngress.setDescription('Count of Indexed Ingress packets observed since monitoring was enabled, Counter will loop back from zero upon reaching the maximum')
alaNetSecPortStatsTotalEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortStatsTotalEgress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsTotalEgress.setDescription('Count of Indexed Egress packets observed since monitoring was enabled. Counter will loop back from zero upon reaching the maximum')
alaNetSecPortAnomalyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4))
alaNetSecPortAnomalyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsTable.setDescription('Table for reporting Anomaly statistics')
alaNetSecPortAnomalyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsIfId"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsAnomaly"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsPacket"))
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsEntry.setDescription('Stats are collected on a <port,anomaly-type,packet-type,packet-direction,current/last> basis')
alaNetSecPortAnomalyStatsIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsIfId.setDescription('Interface Index of the port')
alaNetSecPortAnomalyStatsAnomaly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 2), AlaAnomalyType())
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsAnomaly.setDescription('Anomaly type')
alaNetSecPortAnomalyStatsPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 3), AlaPacketType())
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsPacket.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsPacket.setDescription('Packet type')
alaNetSecPortAnomalyStatsCurrentIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsCurrentIngress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsCurrentIngress.setDescription('Count of Indexed packets ingress during current monitoring period.')
alaNetSecPortAnomalyStatsCurrentEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsCurrentEgress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsCurrentEgress.setDescription('Count of Indexed packets egress during current monitoring period.')
alaNetSecPortAnomalyStatsLastIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsLastIngress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsLastIngress.setDescription('Count of Indexed packets ingress during last monitoring period.')
alaNetSecPortAnomalyStatsLastEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsLastEgress.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsLastEgress.setDescription('Count of Indexed packets egress during last monitoring period.')
alaNetSecPortAnomalySummary = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5))
alaNetSecPortAnomalySummaryTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryTable.setDescription('Table for reporting Anomaly summaries')
alaNetSecPortAnomalySummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalySummaryIfId"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalySummaryAnomaly"))
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryEntry.setDescription('Summary are reported on a <port,summary-type,anomaly-type> basis')
alaNetSecPortAnomalySummaryIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryIfId.setDescription('Interface Index of port')
alaNetSecPortAnomalySummaryAnomaly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1, 1, 2), AlaAnomalyType())
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryAnomaly.setDescription('Anomaly type')
alaNetSecPortAnomalySummaryObserved = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryObserved.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryObserved.setDescription('Count of observations for indexed anomaly on indexed port since monitoring was enabled.')
alaNetSecPortAnomalySummaryDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryDetected.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryDetected.setDescription('Count of detections for indexed anomaly on indexed port since monitoring was enabled.')
alaNetSecPortOp = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6))
alaNetSecPortOpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaNetSecPortOpTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpTable.setDescription('Table for reporting port anomaly operation parameters')
alaNetSecPortOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpIfId"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpAnomaly"))
if mibBuilder.loadTexts: alaNetSecPortOpEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpEntry.setDescription('Each entry is identified by a unique port, and anomaly-type combination')
alaNetSecPortOpIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaNetSecPortOpIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpIfId.setDescription('interface index of port')
alaNetSecPortOpAnomaly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 2), AlaAnomalyType())
if mibBuilder.loadTexts: alaNetSecPortOpAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpAnomaly.setDescription('anomaly-type')
alaNetSecPortOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 3), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpState.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpState.setDescription('state of anomaly')
alaNetSecPortOpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 4), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpLog.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpLog.setDescription('Logging state of anomaly')
alaNetSecPortOpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 5), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpTrap.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpTrap.setDescription('Trap state of anomaly')
alaNetSecPortOpQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 6), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpQuarantine.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpQuarantine.setDescription('Quarantine state of anomaly')
alaNetSecPortOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpCount.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpCount.setDescription('activation-count being used by netsec on the indexed object')
alaNetSecPortOpSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpSensitivity.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpSensitivity.setDescription('sensitivity being used by netsec on the indexed object')
alaNetSecPortOpPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecPortOpPeriod.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpPeriod.setDescription('monitoring period being used by netsec on the indexed object')
alaNetSecGroupOp = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7))
alaNetSecGroupOpTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaNetSecGroupOpTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpTable.setDescription('Table for reporting group anomaly operation parameters')
alaNetSecGroupOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpName"), (0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpAnomaly"))
if mibBuilder.loadTexts: alaNetSecGroupOpEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpEntry.setDescription('Each entry is identified by a unique group, and anomaly-type combination')
alaNetSecGroupOpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaNetSecGroupOpName.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpName.setDescription('name of the group')
alaNetSecGroupOpAnomaly = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 2), AlaAnomalyType())
if mibBuilder.loadTexts: alaNetSecGroupOpAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpAnomaly.setDescription('anomaly-type')
alaNetSecGroupOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 3), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpState.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpState.setDescription('state of anomaly')
alaNetSecGroupOpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 4), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpLog.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpLog.setDescription('Logging state of anomaly')
alaNetSecGroupOpTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 5), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpTrap.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpTrap.setDescription('Trap state of anomaly')
alaNetSecGroupOpQuarantine = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 6), AlaNetsecStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpQuarantine.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpQuarantine.setDescription('Quarantine state of anomaly')
alaNetSecGroupOpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpCount.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpCount.setDescription('activation-count being used by netsec on the indexed object')
alaNetSecGroupOpSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpSensitivity.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpSensitivity.setDescription('sensitivity being used by netsec on the indexed object')
alaNetSecGroupOpPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupOpPeriod.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpPeriod.setDescription('monitoring period being used by netsec on the indexed object')
alaNetSecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8))
alaNetSecGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaNetSecGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupTable.setDescription('Table of groups configured')
alaNetSecGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupName"))
if mibBuilder.loadTexts: alaNetSecGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupEntry.setDescription('Each entry identifies a configured group')
alaNetSecGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: alaNetSecGroupName.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupName.setDescription('Name of configured group')
alaNetSecGroupMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupMemberPorts.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupMemberPorts.setDescription('Yes if there are ports in this group.')
alaNetSecGroupAnomalyCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 8, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaNetSecGroupAnomalyCfg.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupAnomalyCfg.setDescription("Yes if any of this group's anomaly has a non-default configuration.")
alaNetSecPortTrapsObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 9))
alaNetSecPortTrapAnomaly = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 0, 1)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoIfId"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoAnomaly"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoType"))
if mibBuilder.loadTexts: alaNetSecPortTrapAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapAnomaly.setDescription('Trap for an anomaly detected on a port.')
alaNetSecPortTrapQuarantine = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 0, 2)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoIfId"))
if mibBuilder.loadTexts: alaNetSecPortTrapQuarantine.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapQuarantine.setDescription('Trap for an anomalous port quarantine.')
alaNetSecPortTrapInfoIfId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 9, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaNetSecPortTrapInfoIfId.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapInfoIfId.setDescription('Interface index of port on which anomaly is detected')
alaNetSecPortTrapInfoAnomaly = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 9, 2), AlaAnomalyType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaNetSecPortTrapInfoAnomaly.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapInfoAnomaly.setDescription('Type of anomaly detected on the interface')
alaNetSecPortTrapInfoType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("source", 2), ("target", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alaNetSecPortTrapInfoType.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapInfoType.setDescription('Nature of anomaly. Informs if system attached to interface is source or target of the anomaly.')
alcatelIND1NETSECMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2))
if mibBuilder.loadTexts: alcatelIND1NETSECMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NETSECMIBConformance.setDescription('Branch for NETSEC application conformance information')
alcatelIND1NETSECMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1NETSECMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NETSECMIBGroups.setDescription('Branch for NETSEC application units of conformance')
alcatelIND1NETSECMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1NETSECMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NETSECMIBCompliances.setDescription('Branch for NETSEC application compliance statements')
alcatelIND1NETSECMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalySummaryComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapsComplianceGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupEntryGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupEntryGroup"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapAnomalyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1NETSECMIBCompliance = alcatelIND1NETSECMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1NETSECMIBCompliance.setDescription('Compliance statement for NetSec.')
alaNetSecPortRangeComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortRangeComplianceGroup = alaNetSecPortRangeComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeComplianceGroup.setDescription('Collection of objects for management at port range level')
alaNetSecMonitoringGroupComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecMonitoringGroupComplianceGroup = alaNetSecMonitoringGroupComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupComplianceGroup.setDescription('Collection of objects for management at port group level')
alaNetSecPortTrapsComplianceGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapAnomaly"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapQuarantine"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortTrapsComplianceGroup = alaNetSecPortTrapsComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapsComplianceGroup.setDescription('Traps')
alaNetSecPortStatsComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsLastIngress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsLastEgress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsTotalIngress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortStatsTotalEgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortStatsComplianceGroup = alaNetSecPortStatsComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortStatsComplianceGroup.setDescription('Port Statistics Collection')
alaNetSecPortAnomalyStatsComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsCurrentIngress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsCurrentEgress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsLastIngress"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalyStatsLastEgress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortAnomalyStatsComplianceGroup = alaNetSecPortAnomalyStatsComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalyStatsComplianceGroup.setDescription('Port Anomaly Statistics Collection')
alaNetSecPortAnomalySummaryComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalySummaryObserved"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortAnomalySummaryDetected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortAnomalySummaryComplianceGroup = alaNetSecPortAnomalySummaryComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortAnomalySummaryComplianceGroup.setDescription('Anomaly summary Collection')
alaNetSecPortOpComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 7)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpState"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpLog"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpTrap"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpQuarantine"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpCount"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpSensitivity"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortOpPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortOpComplianceGroup = alaNetSecPortOpComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortOpComplianceGroup.setDescription('Port operation parameter value Collection')
alaNetSecGroupOpComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 8)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpState"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpLog"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpTrap"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpQuarantine"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpCount"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpSensitivity"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupOpPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecGroupOpComplianceGroup = alaNetSecGroupOpComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupOpComplianceGroup.setDescription('Group operation parameter value Collection')
alaNetSecGroupComplianceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 9)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupMemberPorts"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecGroupAnomalyCfg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecGroupComplianceGroup = alaNetSecGroupComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecGroupComplianceGroup.setDescription('Monitoring Group port membership Collection')
alaNetSecMonitoringGroupEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 10)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyState"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyLog"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyTrap"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyQuarantine"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyCount"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalySensitivity"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupAnomalyPeriod"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecMonitoringGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecMonitoringGroupEntryGroup = alaNetSecMonitoringGroupEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecMonitoringGroupEntryGroup.setDescription("Entry identifies configuration of a monitoring-group's anomaly-type's parameter group.")
alaNetSecPortRangeGroupEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 11)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupName"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortRangeGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortRangeGroupEntryGroup = alaNetSecPortRangeGroupEntryGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortRangeGroupEntryGroup.setDescription('Entry is identified by a unique port-range group.')
alaNetSecPortTrapAnomalyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 48, 1, 2, 1, 12)).setObjects(("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoIfId"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoAnomaly"), ("ALCATEL-IND1-NETSEC-MIB", "alaNetSecPortTrapInfoType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaNetSecPortTrapAnomalyGroup = alaNetSecPortTrapAnomalyGroup.setStatus('current')
if mibBuilder.loadTexts: alaNetSecPortTrapAnomalyGroup.setDescription('Trap for an anomaly detected on a port group.')
mibBuilder.exportSymbols("ALCATEL-IND1-NETSEC-MIB", alaNetSecPortStatsLastEgress=alaNetSecPortStatsLastEgress, alaNetSecPortTrapInfoAnomaly=alaNetSecPortTrapInfoAnomaly, alcatelIND1NETSECMIBConformance=alcatelIND1NETSECMIBConformance, alaNetSecMonitoringGroupAnomalyPeriod=alaNetSecMonitoringGroupAnomalyPeriod, alaNetSecPortOpComplianceGroup=alaNetSecPortOpComplianceGroup, alcatelIND1NETSECMIBCompliances=alcatelIND1NETSECMIBCompliances, alaNetSecPortTrapsObj=alaNetSecPortTrapsObj, alcatelIND1NETSECMIB=alcatelIND1NETSECMIB, alaNetSecPortStatsEntry=alaNetSecPortStatsEntry, AlaAnomalyType=AlaAnomalyType, alaNetSecPortRangeGroupTable=alaNetSecPortRangeGroupTable, alaNetSecPortAnomalyStatsComplianceGroup=alaNetSecPortAnomalyStatsComplianceGroup, alaNetSecPortOpPeriod=alaNetSecPortOpPeriod, alaNetSecPortRangeGroupEntry=alaNetSecPortRangeGroupEntry, alaNetSecPortOpLog=alaNetSecPortOpLog, alcatelIND1NETSECMIBGroups=alcatelIND1NETSECMIBGroups, alaNetSecPortAnomalySummaryIfId=alaNetSecPortAnomalySummaryIfId, alaNetSecGroupOpTrap=alaNetSecGroupOpTrap, alaNetSecPortAnomalyStatsCurrentIngress=alaNetSecPortAnomalyStatsCurrentIngress, alaNetSecPortTrapsComplianceGroup=alaNetSecPortTrapsComplianceGroup, alaNetSecGroupOpState=alaNetSecGroupOpState, alaNetSecMonitoringGroupTable=alaNetSecMonitoringGroupTable, alaNetSecPortStatsTotalEgress=alaNetSecPortStatsTotalEgress, alaNetSecPortTrapAnomalyGroup=alaNetSecPortTrapAnomalyGroup, alaNetSecPortAnomalyStatsLastIngress=alaNetSecPortAnomalyStatsLastIngress, alaNetSecPortStatsTotalIngress=alaNetSecPortStatsTotalIngress, alaNetSecGroupOpLog=alaNetSecGroupOpLog, alaNetSecPortOp=alaNetSecPortOp, alaNetSecGroupOpCount=alaNetSecGroupOpCount, alaNetSecPortOpQuarantine=alaNetSecPortOpQuarantine, alaNetSecGroupOpName=alaNetSecGroupOpName, alaNetSecMonitoringGroupAnomalyTrap=alaNetSecMonitoringGroupAnomalyTrap, PYSNMP_MODULE_ID=alcatelIND1NETSECMIB, alaNetSecPortRangeComplianceGroup=alaNetSecPortRangeComplianceGroup, alaNetSecPortOpIfId=alaNetSecPortOpIfId, alaNetSecPortAnomalyStatsIfId=alaNetSecPortAnomalyStatsIfId, alaNetSecMonitoringGroupAnomalyState=alaNetSecMonitoringGroupAnomalyState, alaNetSecPortRangeGroupStartIfId=alaNetSecPortRangeGroupStartIfId, AlaNetsecStatus=AlaNetsecStatus, alaNetSecPortAnomalyStatsTable=alaNetSecPortAnomalyStatsTable, alaNetSecMonitoringGroupAnomaly=alaNetSecMonitoringGroupAnomaly, alaNetSecPortAnomalySummaryEntry=alaNetSecPortAnomalySummaryEntry, alcatelIND1NETSECMIBCompliance=alcatelIND1NETSECMIBCompliance, alaNetSecGroup=alaNetSecGroup, alaNetSecGroupOp=alaNetSecGroupOp, alaNetSecGroupTable=alaNetSecGroupTable, alcatelIND1NETSECMIBObjects=alcatelIND1NETSECMIBObjects, alaNetSecGroupOpSensitivity=alaNetSecGroupOpSensitivity, alaNetSecMonitoringGroupAnomalyCount=alaNetSecMonitoringGroupAnomalyCount, alaNetSecPortStatsTable=alaNetSecPortStatsTable, alaNetSecPortAnomalyStatsPacket=alaNetSecPortAnomalyStatsPacket, alaNetSecMonitoringGroupAnomalySensitivity=alaNetSecMonitoringGroupAnomalySensitivity, alaNetSecGroupOpAnomaly=alaNetSecGroupOpAnomaly, alaNetSecMonitoringGroupConfig=alaNetSecMonitoringGroupConfig, alaNetSecMonitoringGroupEntry=alaNetSecMonitoringGroupEntry, alaNetSecPortAnomalySummaryObserved=alaNetSecPortAnomalySummaryObserved, alaNetSecPortAnomalySummaryDetected=alaNetSecPortAnomalySummaryDetected, alaNetSecGroupEntry=alaNetSecGroupEntry, alaNetSecPortOpCount=alaNetSecPortOpCount, alaNetSecPortStats=alaNetSecPortStats, AlaPacketType=AlaPacketType, alaNetSecPortOpTrap=alaNetSecPortOpTrap, alaNetSecPortAnomalySummaryTable=alaNetSecPortAnomalySummaryTable, alaNetSecPortRangeGroupName=alaNetSecPortRangeGroupName, alaNetSecPortRangeGroupRowStatus=alaNetSecPortRangeGroupRowStatus, alaNetSecPortTrapInfoIfId=alaNetSecPortTrapInfoIfId, alaNetSecGroupMemberPorts=alaNetSecGroupMemberPorts, alaNetSecPortAnomalySummaryComplianceGroup=alaNetSecPortAnomalySummaryComplianceGroup, alaNetSecPortOpSensitivity=alaNetSecPortOpSensitivity, alaNetSecPortOpAnomaly=alaNetSecPortOpAnomaly, alaNetSecPortOpTable=alaNetSecPortOpTable, alaNetSecGroupOpComplianceGroup=alaNetSecGroupOpComplianceGroup, alaNetSecPortRangeGroupEndIfId=alaNetSecPortRangeGroupEndIfId, alaNetSecGroupOpEntry=alaNetSecGroupOpEntry, alaNetSecMonitoringGroupEntryGroup=alaNetSecMonitoringGroupEntryGroup, alaNetSecGroupComplianceGroup=alaNetSecGroupComplianceGroup, alcatelIND1NETSECMIBNotifications=alcatelIND1NETSECMIBNotifications, alaNetSecPortAnomalySummaryAnomaly=alaNetSecPortAnomalySummaryAnomaly, alaNetSecGroupOpPeriod=alaNetSecGroupOpPeriod, alaNetSecGroupAnomalyCfg=alaNetSecGroupAnomalyCfg, alaNetSecGroupName=alaNetSecGroupName, alaNetSecPortStatsComplianceGroup=alaNetSecPortStatsComplianceGroup, alaNetSecMonitoringGroupRowStatus=alaNetSecMonitoringGroupRowStatus, alaNetSecMonitoringGroupAnomalyLog=alaNetSecMonitoringGroupAnomalyLog, alaNetSecPortStatsPacket=alaNetSecPortStatsPacket, alaNetSecMonitoringGroupAnomalyQuarantine=alaNetSecMonitoringGroupAnomalyQuarantine, alaNetSecPortStatsIfId=alaNetSecPortStatsIfId, alaNetSecPortRangeGroupEntryGroup=alaNetSecPortRangeGroupEntryGroup, alaNetSecPortOpEntry=alaNetSecPortOpEntry, alaNetSecGroupOpQuarantine=alaNetSecGroupOpQuarantine, alaNetSecPortTrapAnomaly=alaNetSecPortTrapAnomaly, alaNetSecPortAnomalyStatsEntry=alaNetSecPortAnomalyStatsEntry, alaNetSecMonitoringGroupName=alaNetSecMonitoringGroupName, alaNetSecGroupOpTable=alaNetSecGroupOpTable, alaNetSecPortAnomalyStatsCurrentEgress=alaNetSecPortAnomalyStatsCurrentEgress, alaNetSecPortTrapQuarantine=alaNetSecPortTrapQuarantine, alaNetSecPortStatsLastIngress=alaNetSecPortStatsLastIngress, alaNetSecPortTrapInfoType=alaNetSecPortTrapInfoType, alaNetSecPortAnomalyStats=alaNetSecPortAnomalyStats, alaNetSecPortAnomalySummary=alaNetSecPortAnomalySummary, alaNetSecMonitoringGroupComplianceGroup=alaNetSecMonitoringGroupComplianceGroup, alaNetSecPortAnomalyStatsAnomaly=alaNetSecPortAnomalyStatsAnomaly, alaNetSecPortOpState=alaNetSecPortOpState, alaNetSecPortAnomalyStatsLastEgress=alaNetSecPortAnomalyStatsLastEgress, alaNetSecPortRangeConfig=alaNetSecPortRangeConfig)
