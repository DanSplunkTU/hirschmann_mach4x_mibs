#
# PySNMP MIB module LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/LOG-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 20:52:52 2022
# On host fv-az42-180 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SagemBoolean, IntDateTime, Severity = mibBuilder.importSymbols("EQUIPMENT-MIB", "SagemBoolean", "IntDateTime", "Severity")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, iso, Gauge32, TimeTicks, ObjectIdentity, Unsigned32, MibIdentifier, Bits, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "iso", "Gauge32", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
log = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 105))
if mibBuilder.loadTexts: log.setLastUpdated('0211150000Z')
if mibBuilder.loadTexts: log.setOrganization('SAGEM/DR Tolbiac Centre')
if mibBuilder.loadTexts: log.setContactInfo(' ')
if mibBuilder.loadTexts: log.setDescription('\t\n\tModification: \n\t\t\tDate: 15 11 2002\n\t\t\tDescription: \n\t\t\tsagemDr replace sagem-dr\n\t\t\tNOTIFICATION-TYPE replace TRAP-TYPE\n\t\n\tModification: \n\t\t\tDate: 20 12 1999\n\t\t\tDescription: Modification of comments\n\t\t\t\t\t Modification of trap re-notification\n\t\t\t\t\t quality-threshold-overflow replaced by \n\t\t\t\t\t\tperformance.\n\tNew Object: \n\t\t\tDate: 30 11 1999\n\t\t\tName: lostTrapBool,lostTrapBegin,lostTrapEnd,lostTrap\n\t\t\tDescription: System of re-notification of lost traps,\n\t\t\tName: LodEvent\n\t\t\tDescription: Add of qualityThresholdOverflow (20),\n\t\t\totherThresholdOverflow (21), maintenance (30) \n\t\t\tName: probableCause\n\t\t\tDescription: SIZE (0..20) replaced by SIZE (0..50)\n\t\t\t\n\tCreation:\t\t \n \t\t\tThis MIB module describes alarmes and event log records. \n\t\t\tIt also describes associated trap\n\t')
class LogEvent(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 10, 13, 14, 20, 21, 30))
    namedValues = NamedValues(("clear", 0), ("nonAlarmed", 1), ("minor", 2), ("major", 3), ("critical", 4), ("warning", 5), ("raise", 10), ("event", 13), ("switch", 14), ("perf", 20), ("otherThresholdOverflow", 21), ("maintenance", 30))

logClear = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("setToClear", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logClear.setStatus('current')
if mibBuilder.loadTexts: logClear.setDescription('When a set command is issued on this variable the entire \n\tlog event is cleared.\n\n\tThis command is optional\n    ')
logCapacity = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCapacity.setStatus('current')
if mibBuilder.loadTexts: logCapacity.setDescription('The maximum number of event in the log database')
logLastEvent = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLastEvent.setStatus('current')
if mibBuilder.loadTexts: logLastEvent.setDescription('The index of the last event number that have been logged.\n\tThis is usefull for trap lost detection.')
logNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNumber.setStatus('current')
if mibBuilder.loadTexts: logNumber.setDescription('Number of current log in equipment.')
logTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 105, 5), )
if mibBuilder.loadTexts: logTable.setStatus('current')
if mibBuilder.loadTexts: logTable.setDescription('List of log trap that come from the equipment.')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1), ).setIndexNames((0, "LOG-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('current')
if mibBuilder.loadTexts: logEntry.setDescription('A particular log of the equipment.')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('current')
if mibBuilder.loadTexts: logIndex.setDescription('A unique value which identify a particular log entry.\n\tThe index value cannot exced logCapacity and then returns \n\tto zero when the number of events exceds the capacity of \n\tequipement log table.\n\tIts value is :\n\tlogIndex = <total number of event>%logCapacity.\n\tIt is mandatory for the equipment to respond to get-next in\n\tanti-chronological order (youngest first) no matter to the \n\tindex value.\n\tGet-next(LogEntry.logEntry) is logEntry.logIndex[logLastEvent]')
logDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 2), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDate.setStatus('current')
if mibBuilder.loadTexts: logDate.setDescription('When the event had happened.')
logObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logObject.setStatus('current')
if mibBuilder.loadTexts: logObject.setDescription('A reference to the function/interface who produced the event')
logName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logName.setStatus('current')
if mibBuilder.loadTexts: logName.setDescription('A text string which identifies the particular entry among the\n\tlog entries. ')
logEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 5), LogEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEvent.setStatus('current')
if mibBuilder.loadTexts: logEvent.setDescription('indicates the type of event which had occured')
logPC = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logPC.setStatus('current')
if mibBuilder.loadTexts: logPC.setDescription('Probable cause. A short string which identifies the event type.\n\tFor a failure it is its mnemonique.')
logAI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logAI.setStatus('current')
if mibBuilder.loadTexts: logAI.setDescription('A short string which gives additional information on \n\tthe event')
logEquipStatusV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 5, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logEquipStatusV2.setStatus('current')
if mibBuilder.loadTexts: logEquipStatusV2.setDescription('\n\tlogEquipStatusV2 is the value of equipStatusV2 \n\tstored in logTable each time a trap is sent')
logTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 6), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTrapEnable.setStatus('current')
if mibBuilder.loadTexts: logTrapEnable.setDescription('When set to false the equipment stops to send logTraps. \n\tIt has no effect on event log recording.\n\tIt also has no effects on quality traps and on status trap\n\tused for the manager IONOS-ANM-V1.\n\tThe default value is true.')
lostTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 105, 7))
resendTrapBool = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 7, 1), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resendTrapBool.setStatus('current')
if mibBuilder.loadTexts: resendTrapBool.setDescription('The manager set this variable to receive all the current traps of the \n\tequipment.\n\tThe equipment must use resentLogTrap and resentNetworkAlarmeTrap \n\tto do it(not in P0).')
logTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 105, 0))
logTrap = NotificationType((1, 3, 6, 1, 4, 1, 1038, 105, 0, 1)).setObjects(("LOG-MIB", "logIndex"), ("LOG-MIB", "logDate"), ("LOG-MIB", "logObject"), ("LOG-MIB", "logName"), ("LOG-MIB", "logEvent"), ("LOG-MIB", "logPC"), ("LOG-MIB", "logAI"), ("LOG-MIB", "logEquipStatusV2"))
if mibBuilder.loadTexts: logTrap.setStatus('current')
if mibBuilder.loadTexts: logTrap.setDescription('A trap of this type indicates that a threshold has been \n\tcrossed in the corresponding interface/function. \n\tIt also gives the date and time when the trap was sent, \n\tand the equipment status')
if mibBuilder.loadTexts: logTrap.setReference('')
thresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 1038, 105, 0, 2)).setObjects(("LOG-MIB", "logIndex"), ("LOG-MIB", "logDate"), ("LOG-MIB", "logObject"), ("LOG-MIB", "logName"), ("LOG-MIB", "logEvent"), ("LOG-MIB", "logPC"), ("LOG-MIB", "logAI"), ("LOG-MIB", "logEquipStatusV2"))
if mibBuilder.loadTexts: thresholdTrap.setStatus('current')
if mibBuilder.loadTexts: thresholdTrap.setDescription('A trap of this type indicates that a threshold has been \n\tcrossed in the corresponding interface/function. \n\tIt also gives the date and time when the trap was sent, \n\tand the equipment status')
if mibBuilder.loadTexts: thresholdTrap.setReference('')
logCurrentClear = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("setToClear", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logCurrentClear.setStatus('current')
if mibBuilder.loadTexts: logCurrentClear.setDescription('When a set command is issued on this variable the entire \n\tlog event is cleared.\n\n\tThis command is optional\n    ')
logCurrentCapacity = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentCapacity.setStatus('current')
if mibBuilder.loadTexts: logCurrentCapacity.setDescription('The maximum number of event in the log database\n\tThis variable is optional')
logCurrentLastEvent = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentLastEvent.setStatus('current')
if mibBuilder.loadTexts: logCurrentLastEvent.setDescription('The index of the last current alarm number that have been logged.\n\tThis variable is optional')
logCurrentNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 105, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentNumber.setStatus('current')
if mibBuilder.loadTexts: logCurrentNumber.setDescription('Number of current log in equipment.')
logCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 105, 105), )
if mibBuilder.loadTexts: logCurrentTable.setStatus('current')
if mibBuilder.loadTexts: logCurrentTable.setDescription('List of log trap that come from the equipment.')
logCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1), ).setIndexNames((0, "LOG-MIB", "logCurrentIndex"))
if mibBuilder.loadTexts: logCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: logCurrentEntry.setDescription('A particular log of the equipment.')
logCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: logCurrentIndex.setDescription('A unique value which identify a particular logCurrent entry.\n\tThe index value is comprised between 1 and logCurrentNumber.\n\tThere is no relation between the index Value and the date of the alarm. ')
logCurrentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 2), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentDate.setStatus('current')
if mibBuilder.loadTexts: logCurrentDate.setDescription('When the event had happened.')
logCurrentObject = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentObject.setStatus('current')
if mibBuilder.loadTexts: logCurrentObject.setDescription('A reference to the function/interface who produced the event')
logCurrentName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentName.setStatus('current')
if mibBuilder.loadTexts: logCurrentName.setDescription('A text string which identifies the particular entry among the\n\tlog entries. ')
logCurrentEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 5), LogEvent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentEvent.setStatus('current')
if mibBuilder.loadTexts: logCurrentEvent.setDescription('indicates the type of event which had occured')
logCurrentPC = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentPC.setStatus('current')
if mibBuilder.loadTexts: logCurrentPC.setDescription('Probable cause. A short string which identifies the event type.\n\tFor a failure it is its mnemonique.')
logCurrentAI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentAI.setStatus('current')
if mibBuilder.loadTexts: logCurrentAI.setDescription('A short string which gives additional information on \n\tthe event')
logCurrentStatusV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 105, 105, 1, 8), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCurrentStatusV2.setStatus('current')
if mibBuilder.loadTexts: logCurrentStatusV2.setDescription('\n\tlogEquipStatusV2 is the value of equipStatusV2 \n\tstored in logTable each time a trap is sent')
mibBuilder.exportSymbols("LOG-MIB", logNumber=logNumber, logPC=logPC, logIndex=logIndex, logAI=logAI, resendTrapBool=resendTrapBool, logCurrentObject=logCurrentObject, logDate=logDate, log=log, logObject=logObject, logCurrentAI=logCurrentAI, logCurrentTable=logCurrentTable, logCurrentStatusV2=logCurrentStatusV2, logEntry=logEntry, logCurrentName=logCurrentName, logEquipStatusV2=logEquipStatusV2, logTrap=logTrap, logTrapEnable=logTrapEnable, logTraps=logTraps, logCurrentEvent=logCurrentEvent, lostTrap=lostTrap, logCurrentCapacity=logCurrentCapacity, logCurrentNumber=logCurrentNumber, logCurrentIndex=logCurrentIndex, thresholdTrap=thresholdTrap, logEvent=logEvent, logTable=logTable, LogEvent=LogEvent, logCapacity=logCapacity, logName=logName, logCurrentLastEvent=logCurrentLastEvent, logCurrentPC=logCurrentPC, logCurrentClear=logCurrentClear, logLastEvent=logLastEvent, logCurrentDate=logCurrentDate, logCurrentEntry=logCurrentEntry, PYSNMP_MODULE_ID=log, logClear=logClear)
