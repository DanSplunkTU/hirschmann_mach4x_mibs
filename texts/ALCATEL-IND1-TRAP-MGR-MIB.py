#
# PySNMP MIB module ALCATEL-IND1-TRAP-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nokia/aos7/ALCATEL-IND1-TRAP-MGR-MIB
# Produced by pysmi-1.1.8 at Fri Jan  7 01:18:11 2022
# On host fv-az74-997 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
softentIND1TrapMgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1TrapMgr")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Integer32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Integer32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "Counter32")
DateAndTime, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TextualConvention", "DisplayString")
alcatelIND1TrapMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1))
alcatelIND1TrapMgrMIB.setRevisions(('2010-05-13 00:00', '2007-08-07 00:00', '2014-09-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1TrapMgrMIB.setRevisionsDescriptions(('Fixed the Notifications to use MIB Module OID.0 as Notifications root.', 'The latest version of this MIB Module.', 'Added additional table event action scripting. ',))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIB.setLastUpdated('201005130000Z')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate\n             version of this document is used with the products in question:\n\n                        Alcatel-Lucent, Enterprise Solutions Division\n                       (Formerly Alcatel Internetworking, Incorporated)\n                               26801 West Agoura Road\n                            Agoura Hills, CA  91301-5122\n                              United States Of America\n\n            Telephone:               North America  +1 800 995 2696\n                                     Latin America  +1 877 919 9526\n                                     Europe         +31 23 556 0100\n                                     Asia           +65 394 7933\n                                     All Other      +1 818 878 4507\n\n            Electronic Mail:         support@ind.alcatel.com\n            World Wide Web:          http://alcatel-lucent.com/wps/portal/enterprise\n            File Transfer Protocol:  ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple\n             Network Management Protocol (SNMP) Management Information Base (MIB):\n\n                 For the Birds Of Prey Product Line\n                 Trap Manager Subsystem.\n\n             The right to make changes in specification and other information\n             contained in this document without prior notice is reserved.\n\n             No liability shall be assumed for any incidental, indirect, special, or\n             consequential damages whatsoever arising from or related to this\n             document or the information contained herein.\n\n             Vendors, end-users, and other interested parties are granted\n             non-exclusive license to use this specification in connection with\n             management of the products for which it is intended to be used.\n\n                         Copyright (C) 1995-2007 Alcatel-Lucent\n                             ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1TrapMgrMIBNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 0))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBNotifications.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBNotifications.setDescription('Branch For TrapMgr MIB Subsystem Notifications.')
alcatelIND1TrapMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBObjects.setDescription('Branch For Trap Manager Subsystem Managed Objects.')
alcatelIND1TrapMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBConformance.setDescription('Branch For Trap Manager Subsystem Conformance Information.')
alcatelIND1TrapMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBGroups.setDescription('Branch For Trap Manager Subsystem Units Of Conformance.')
alcatelIND1TrapMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBCompliances.setDescription('Branch For SNMP Agent Subsystem Compliance Statements.')
trapMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1))
trapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: trapConfigTable.setStatus('current')
if mibBuilder.loadTexts: trapConfigTable.setDescription('The trap configuration table.')
trapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "trapIndex"))
if mibBuilder.loadTexts: trapConfigEntry.setStatus('current')
if mibBuilder.loadTexts: trapConfigEntry.setDescription('A trap configuration entry.')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('current')
if mibBuilder.loadTexts: trapIndex.setDescription('Trap identifier.')
trapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapName.setStatus('current')
if mibBuilder.loadTexts: trapName.setDescription('Trap name.')
trapFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFamily.setStatus('current')
if mibBuilder.loadTexts: trapFamily.setDescription('Trap family name.')
trapAbsorbPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAbsorbPeriod.setStatus('current')
if mibBuilder.loadTexts: trapAbsorbPeriod.setDescription('at maximum, one instance of this trap\n                 is sent out within the period.\n                 value 0 : the trap is not absorbed.')
trapStationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2), )
if mibBuilder.loadTexts: trapStationTable.setStatus('current')
if mibBuilder.loadTexts: trapStationTable.setDescription('A list of management stations.')
trapStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "trapStationIP"))
if mibBuilder.loadTexts: trapStationEntry.setStatus('current')
if mibBuilder.loadTexts: trapStationEntry.setDescription('A management station entry.')
trapStationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapStationIP.setStatus('current')
if mibBuilder.loadTexts: trapStationIP.setDescription('The IP address of this management entity.')
trapStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2), Unsigned32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapStationPort.setStatus('current')
if mibBuilder.loadTexts: trapStationPort.setDescription('The UDP port used by this management entity.\n                 This defaults to the SNMP-TRAP port 162.')
trapStationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapStationRowStatus.setStatus('current')
if mibBuilder.loadTexts: trapStationRowStatus.setDescription('Reading or writting values :\n                 - active (1) : traps enabled to the station\n                 - notInService (2) : traps disabled to the station\n                 Only reading values :\n                 - notReady (3) : missing parameters for the station\n                 Only writting values :\n                 - createAndGo (4) : to create an active station\n                 - createAndWait (5) : to create a notInService station\n                 - destroy (6) : to remove a station.')
trapStationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3))).clone('v3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapStationProtocol.setStatus('current')
if mibBuilder.loadTexts: trapStationProtocol.setDescription('The type of protocol used to send the traps\n                 to the station.\n                 The different values are :\n                 v1 : the traps are sent using SNMPv1.\n                 v2 : the traps are sent using SNMPv2.\n                 v3 : the traps are sent using SNMPv3.')
trapStationUser = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapStationUser.setStatus('current')
if mibBuilder.loadTexts: trapStationUser.setDescription('User name used to send the trap to the station.\n                 This name must correspond to an existing user\n                 account name.')
trapStationReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapStationReplay.setStatus('current')
if mibBuilder.loadTexts: trapStationReplay.setDescription('The replay value. The switch is required\n                 to send the last known traps for this station\n                 from the replay value.')
trapStationNextSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapStationNextSeq.setStatus('current')
if mibBuilder.loadTexts: trapStationNextSeq.setDescription('The sequence number of the next trap generated\n                 for this station.')
trapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 3), )
if mibBuilder.loadTexts: trapFilterTable.setStatus('current')
if mibBuilder.loadTexts: trapFilterTable.setDescription('The trap filtering table for each individual trap.')
trapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "trapStationIP"), (0, "ALCATEL-IND1-TRAP-MGR-MIB", "trapIndex"))
if mibBuilder.loadTexts: trapFilterEntry.setStatus('current')
if mibBuilder.loadTexts: trapFilterEntry.setDescription('A trap filter entry.')
trapFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFilterStatus.setStatus('current')
if mibBuilder.loadTexts: trapFilterStatus.setDescription('For the individual filtering :\n                 on :  the filter is activated, the traps identified\n                       by trapFilterId can not be sent to the SNMP\n                       manager identified by trapStationIP.\n                 off : no filter is activated.')
trapAbsorption = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapAbsorption.setStatus('current')
if mibBuilder.loadTexts: trapAbsorption.setDescription('enable : the trap absorption service is enabled\n                 disable : the trap absorption service is disabled.')
trapToWebView = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapToWebView.setStatus('current')
if mibBuilder.loadTexts: trapToWebView.setDescription('enable : the traps are forwarded to WebView\n                 disable : the traps are not forwarded to WebView.')
alaTrapInetStationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6), )
if mibBuilder.loadTexts: alaTrapInetStationTable.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationTable.setDescription('A list of management stations.')
alaTrapInetStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationIPType"), (0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationIP"))
if mibBuilder.loadTexts: alaTrapInetStationEntry.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationEntry.setDescription('A management station entry.')
alaTrapInetStationIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaTrapInetStationIPType.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationIPType.setDescription('The value of alaTrapInetStationIPType indicates the IP\n        address type for alaTrapInetStationIP.')
alaTrapInetStationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaTrapInetStationIP.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationIP.setDescription('The IP address of this management entity. The address type of\n        alaTrapInetStationIP is indicated by alaTrapInetStationIPType.')
alaTrapInetStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 3), Unsigned32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaTrapInetStationPort.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationPort.setDescription('The UDP port used by this management entity.\n                 This defaults to the SNMP-TRAP port 162.')
alaTrapInetStationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaTrapInetStationRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationRowStatus.setDescription('Reading or writting values :\n                 - active (1) : traps enabled to the station\n                 - notInService (2) : traps disabled to the station\n                 Only reading values :\n                 - notReady (3) : missing parameters for the station\n                 Only writting values :\n                 - createAndGo (4) : to create an active station\n                 - createAndWait (5) : to create a notInService station\n                 - destroy (6) : to remove a station.')
alaTrapInetStationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3))).clone('v3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaTrapInetStationProtocol.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationProtocol.setDescription('The type of protocol used to send the traps\n                 to the station.\n                 The different values are :\n                 v1 : the traps are sent using SNMPv1.\n                 v2 : the traps are sent using SNMPv2.\n                 v3 : the traps are sent using SNMPv3.')
alaTrapInetStationUser = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaTrapInetStationUser.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationUser.setDescription('User name used to send the trap to the station.\n                 This name must correspond to an existing user\n                 account name.')
alaTrapInetStationReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaTrapInetStationReplay.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationReplay.setDescription('The replay value. The switch is required\n                 to send the last known traps for this station\n                 from the replay value.')
alaTrapInetStationNextSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaTrapInetStationNextSeq.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetStationNextSeq.setDescription('The sequence number of the next trap generated\n                 for this station.')
alaTrapInetFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 7), )
if mibBuilder.loadTexts: alaTrapInetFilterTable.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetFilterTable.setDescription('The trap filtering table for each individual trap.')
alaTrapInetFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 7, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationIPType"), (0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationIP"), (0, "ALCATEL-IND1-TRAP-MGR-MIB", "trapIndex"))
if mibBuilder.loadTexts: alaTrapInetFilterEntry.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetFilterEntry.setDescription('A trap filter entry.')
alaTrapInetFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaTrapInetFilterStatus.setStatus('current')
if mibBuilder.loadTexts: alaTrapInetFilterStatus.setDescription('For the individual filtering :\n                 on :  the filter is activated, the traps identified\n                       by trapFilterId can not be sent to the SNMP\n                       manager identified by alaTrapInetStationIP.\n                 off : no filter is activated.')
alaDgTrapStationTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8), )
if mibBuilder.loadTexts: alaDgTrapStationTable.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationTable.setDescription('A list of Dying Gasp management stations.')
alaDgTrapStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationIPType"), (0, "ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationIP"))
if mibBuilder.loadTexts: alaDgTrapStationEntry.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationEntry.setDescription('A management station entry for Dying Gasp Trap.')
alaDgTrapStationIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: alaDgTrapStationIPType.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationIPType.setDescription('The IP network address type.')
alaDgTrapStationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: alaDgTrapStationIP.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationIP.setDescription('The IP address of Dying Gasp management entity.')
alaDgTrapStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 3), Unsigned32().clone(162)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDgTrapStationPort.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationPort.setDescription('The UDP port used by this management entity.\n                 This defaults to the SNMP-TRAP port 162.')
alaDgTrapStationProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2), ("v3", 3))).clone('v3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDgTrapStationProtocol.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationProtocol.setDescription('The type of protocol used to send the traps\n                 to the station.\n                 The different values are :\n                 v1 : the traps are sent using SNMPv1.\n                 v2 : the traps are sent using SNMPv2.\n                 v3 : the traps are sent using SNMPv3.')
alaDgTrapStationUser = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDgTrapStationUser.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationUser.setDescription('User name used to send the trap to the station.\n                 This name must correspond to an existing user\n                 account name.')
alaDgTrapStationReplay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDgTrapStationReplay.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationReplay.setDescription('The replay value. The switch is required\n                 to send the last known traps for this station\n                 from the replay value.')
alaDgTrapStationNextSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDgTrapStationNextSeq.setStatus('current')
if mibBuilder.loadTexts: alaDgTrapStationNextSeq.setDescription('The sequence number of the next trap generated\n                 for this station.')
trapAbsorptionTrap = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 0, 1)).setObjects(("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorStamp"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorTrapId"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorCounter"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorTime"))
if mibBuilder.loadTexts: trapAbsorptionTrap.setStatus('current')
if mibBuilder.loadTexts: trapAbsorptionTrap.setDescription('The absorption Trap is sent when a trap has been\n                 absorbed at least once.')
trapNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 3))
trapAbsorStamp = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 3, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAbsorStamp.setStatus('current')
if mibBuilder.loadTexts: trapAbsorStamp.setDescription('The time stamp of the absorbed trap.')
trapAbsorTrapId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAbsorTrapId.setStatus('current')
if mibBuilder.loadTexts: trapAbsorTrapId.setDescription('The trap identifier of the absorbed trap.')
trapAbsorCounter = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 3, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAbsorCounter.setStatus('current')
if mibBuilder.loadTexts: trapAbsorCounter.setDescription('The number of the iterations of the absorbed trap.')
trapAbsorTime = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 1, 3, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAbsorTime.setStatus('current')
if mibBuilder.loadTexts: trapAbsorTime.setDescription('The time stamp of the last iteration.')
alcatelIND1TrapMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-TRAP-MGR-MIB", "trapMgtGroup"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapTrapsGroup"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1TrapMgrMIBCompliance = alcatelIND1TrapMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1TrapMgrMIBCompliance.setDescription('Compliance statement for Trap Manager Subsystem.')
trapMgtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-TRAP-MGR-MIB", "trapIndex"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapName"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapFamily"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorbPeriod"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationIP"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationPort"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationRowStatus"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationProtocol"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationUser"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationReplay"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapStationNextSeq"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapFilterStatus"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorption"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapToWebView"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationPort"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationRowStatus"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationProtocol"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationUser"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationReplay"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetStationNextSeq"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaTrapInetFilterStatus"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationPort"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationProtocol"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationUser"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationReplay"), ("ALCATEL-IND1-TRAP-MGR-MIB", "alaDgTrapStationNextSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapMgtGroup = trapMgtGroup.setStatus('current')
if mibBuilder.loadTexts: trapMgtGroup.setDescription('Collection of objects for Trap Management.')
trapTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorptionTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapTrapsGroup = trapTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: trapTrapsGroup.setDescription('Collection of notifications for Trap Management.')
trapNotifGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 2, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorStamp"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorTrapId"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorCounter"), ("ALCATEL-IND1-TRAP-MGR-MIB", "trapAbsorTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapNotifGroup = trapNotifGroup.setStatus('current')
if mibBuilder.loadTexts: trapNotifGroup.setDescription('Collection of objects\n             for Trap Management notifications.')
mibBuilder.exportSymbols("ALCATEL-IND1-TRAP-MGR-MIB", trapStationIP=trapStationIP, trapStationPort=trapStationPort, alaDgTrapStationIPType=alaDgTrapStationIPType, trapStationUser=trapStationUser, alaTrapInetFilterEntry=alaTrapInetFilterEntry, alaTrapInetStationUser=alaTrapInetStationUser, trapName=trapName, alcatelIND1TrapMgrMIBGroups=alcatelIND1TrapMgrMIBGroups, alaDgTrapStationTable=alaDgTrapStationTable, alaDgTrapStationEntry=alaDgTrapStationEntry, trapIndex=trapIndex, trapNotif=trapNotif, alcatelIND1TrapMgrMIBCompliances=alcatelIND1TrapMgrMIBCompliances, alcatelIND1TrapMgrMIBObjects=alcatelIND1TrapMgrMIBObjects, alaDgTrapStationIP=alaDgTrapStationIP, trapAbsorStamp=trapAbsorStamp, alcatelIND1TrapMgrMIB=alcatelIND1TrapMgrMIB, trapFilterEntry=trapFilterEntry, alaTrapInetStationReplay=alaTrapInetStationReplay, alaDgTrapStationPort=alaDgTrapStationPort, trapStationReplay=trapStationReplay, alaTrapInetFilterStatus=alaTrapInetFilterStatus, trapMgtGroup=trapMgtGroup, trapAbsorTime=trapAbsorTime, alcatelIND1TrapMgrMIBNotifications=alcatelIND1TrapMgrMIBNotifications, trapConfigTable=trapConfigTable, trapStationEntry=trapStationEntry, alcatelIND1TrapMgrMIBConformance=alcatelIND1TrapMgrMIBConformance, trapMgt=trapMgt, trapFilterStatus=trapFilterStatus, trapAbsorptionTrap=trapAbsorptionTrap, alaTrapInetStationNextSeq=alaTrapInetStationNextSeq, alaTrapInetFilterTable=alaTrapInetFilterTable, alaDgTrapStationReplay=alaDgTrapStationReplay, trapStationProtocol=trapStationProtocol, alaDgTrapStationProtocol=alaDgTrapStationProtocol, trapFilterTable=trapFilterTable, alaTrapInetStationProtocol=alaTrapInetStationProtocol, trapAbsorTrapId=trapAbsorTrapId, trapFamily=trapFamily, trapStationTable=trapStationTable, trapAbsorCounter=trapAbsorCounter, alaTrapInetStationIPType=alaTrapInetStationIPType, trapAbsorption=trapAbsorption, trapNotifGroup=trapNotifGroup, trapToWebView=trapToWebView, trapConfigEntry=trapConfigEntry, alaTrapInetStationTable=alaTrapInetStationTable, trapStationNextSeq=trapStationNextSeq, alaTrapInetStationEntry=alaTrapInetStationEntry, alcatelIND1TrapMgrMIBCompliance=alcatelIND1TrapMgrMIBCompliance, alaDgTrapStationNextSeq=alaDgTrapStationNextSeq, trapTrapsGroup=trapTrapsGroup, PYSNMP_MODULE_ID=alcatelIND1TrapMgrMIB, trapStationRowStatus=trapStationRowStatus, trapAbsorbPeriod=trapAbsorbPeriod, alaTrapInetStationIP=alaTrapInetStationIP, alaTrapInetStationRowStatus=alaTrapInetStationRowStatus, alaTrapInetStationPort=alaTrapInetStationPort, alaDgTrapStationUser=alaDgTrapStationUser)
