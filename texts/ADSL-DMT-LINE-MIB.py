#
# PySNMP MIB module ADSL-DMT-LINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/ADSL-DMT-LINE-MIB
# Produced by pysmi-1.1.8 at Tue Jan 11 21:08:07 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
adslLineConfProfileName, adslLCSMib = mibBuilder.importSymbols("ADSL-LINE-MIB", "adslLineConfProfileName", "adslLCSMib")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks, Bits, MibIdentifier, Integer32, Counter32, IpAddress, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "Integer32", "Counter32", "IpAddress", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
adslLineDmtMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2))
if mibBuilder.loadTexts: adslLineDmtMIB.setLastUpdated('9809251000Z')
if mibBuilder.loadTexts: adslLineDmtMIB.setOrganization('ADSL Forum')
if mibBuilder.loadTexts: adslLineDmtMIB.setContactInfo('Kevin Godfrey\n                    Motorola Inc.\n                    Colvilles Road, East Kilbride,\n                    Glasgow, United Kingdom.\n                    Tel: +44 1355 565597\n                    Fax: +44 1355 261790\n                    E-mail: ttz864@email.sps.mot.com')
if mibBuilder.loadTexts: adslLineDmtMIB.setDescription('Naming Conventions:\n        Atuc -- (ATUC) modem at near (Central) end of line\n        Atur -- (ATUR) modem at Remote end of line\n        ES  -- Errored Second.\n        LCS -- Line Code Specific\n        Lof -- Loss of Frame\n        Lol -- Loss of Link\n        Los -- Loss of Signal\n        Lpr -- Loss of Power')
adslLineDmtMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1))
adslLineDmtTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 1), )
if mibBuilder.loadTexts: adslLineDmtTable.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtTable.setDescription('This table extends the adslLineTable and contains common attributes\n        describing both ends of ADSL lines supported by the system.')
adslLineDmtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslLineDmtEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtEntry.setDescription('A set of common attributes describing both ends of an ADSL line\n        supported by the system.  There exist an entry for each ifEntry with\n        an ifType of adsl(94).')
adslLineDmtTrellis = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trellisOn", 1), ("trellisOff", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineDmtTrellis.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtTrellis.setDescription('Reports whether the Trellis coding is used on the DMT\n        line. Use of trellis coding is determined at line\n        initialization with C-MSGS1 and R-MSGS1 exchanges\n        and will not change until the line is re-initialized.')
adslLineDmtEOC = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("transaction", 2), ("streaming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineDmtEOC.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtEOC.setDescription('Reports whether the eoc can support autonomous data streaming\n        mode or only transaction mode. After initialization, unknown\n        is reported until sufficient autonomous eoc messages have been\n        transmitted to determine the true capability of both ATUs.')
adslAtucDmtPhysTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2), )
if mibBuilder.loadTexts: adslAtucDmtPhysTable.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtPhysTable.setDescription('This table extends the adslAtucPhysTable and contains specific\n        physical layer parameters for the ATU-C class devices supported\n        by the system.')
adslAtucDmtPhysEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucDmtPhysEntry.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtPhysEntry.setDescription('A set of physical-layer parameters for an ATU-C class device\n        supported by the system.  There exists an entry for each ifEntry\n        with an ifType of adsl(94).')
adslAtucDmtIssue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("t1413Issue1", 2), ("t1413Issue2", 3), ("t1413Issue3", 4), ("gdmtIssue1", 5), ("etsiIssue1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucDmtIssue.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtIssue.setDescription('Reports the issue number of the relevant standard that the\n        DMT ADSL transceiver at the ATU-C is currently operating to.\n        The issue number will be fixed by the hardware and is\n        transmitted by the ATU-C in C-MSGS1 during initialization.')
adslAtucDmtState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("powerUp", 2), ("configure", 3), ("idle", 4), ("quiet", 5), ("tone", 6), ("activating", 7), ("training", 8), ("analyzing", 9), ("exchange", 10), ("steadyState", 11), ("notResponding", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucDmtState.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtState.setDescription('Reports current state of the ATU-C DMT transceiver.  The\n        current state can change dynamically.  The SNMP agent\n        reports the state after querying the ATU-C state machine.')
adslAtucDmtInterleavePath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("as0", 2), ("as1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucDmtInterleavePath.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtInterleavePath.setDescription('Reports bearer channel of downstream interleaved path.')
adslAtucDmtFastPath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("as0", 2), ("as1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAtucDmtFastPath.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtFastPath.setDescription('Reports bearer channel of downstream fast path.')
adslAturDmtPhysTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3), )
if mibBuilder.loadTexts: adslAturDmtPhysTable.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtPhysTable.setDescription('This table extends the adslAturPhysTable and contains physical\n        layer parameters for the ATU-R class devices supported by the\n        system.')
adslAturDmtPhysEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturDmtPhysEntry.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtPhysEntry.setDescription('A set of physical-layer parameters for an ATU-R class device\n        supported by the system.  There exists an entry for each ifEntry\n        with an ifType of adsl(94).')
adslAturDmtIssue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("t1413Issue1", 2), ("t1413Issue2", 3), ("t1413Issue3", 4), ("gdmtIssue1", 5), ("etsiIssue1", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturDmtIssue.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtIssue.setDescription('Reports the issue number of the relevant standard that\n         the DMT ADSL transceiver at the ATU-R is currently\n         operating to. The issue number will be fixed by the\n         hardware and is transmitted by the ATU-R\n         in R-MSGS1 during initialization.')
adslAturDmtState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("activating", 2), ("training", 3), ("analyzing", 4), ("exchange", 5), ("steadyState", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturDmtState.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtState.setDescription('Reports current state of the ATU-R DMT transceiver.\n        The current state can change dynamically. ATU-R state\n        is reported by the SNMP agent at the ATU-C which infers\n        the state depending on the ATU-C state. When the inference\n        cannot be made, unknown state is returned.')
adslAturDmtInterleavePath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ls0", 2), ("ls1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturDmtInterleavePath.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtInterleavePath.setDescription('Reports bearer channel of upstream interleaved path.')
adslAturDmtFastPath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ls0", 2), ("ls1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslAturDmtFastPath.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtFastPath.setDescription('Reports bearer channel of upstream fast path.')
adslAtucDmtChanTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 4))
adslAturDmtChanTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 5))
adslAtucDmtPerfDataTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 6))
adslAturDmtPerfDataTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 7))
adslAtucDmtIntervalTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 8))
adslAturDmtIntervalTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 9))
adslAtucDmtChanPerfDataTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 10))
adslAturDmtChanPerfDataTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 11))
adslAtucDmtChanIntervalTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 12))
adslAturDmtChanIntervalTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 13))
adslLineDmtConfProfileIndexNext = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 14))
adslLineDmtConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15), )
if mibBuilder.loadTexts: adslLineDmtConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfProfileTable.setDescription('This table extends the adslLineConfProfileTable and contains\n        ADSL DMT line configuration information.')
adslLineDmtConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1), ).setIndexNames((1, "ADSL-LINE-MIB", "adslLineConfProfileName"))
if mibBuilder.loadTexts: adslLineDmtConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfProfileEntry.setDescription('A configuration profile containing ADSL DMT line configuration\n        information.')
adslAtucDmtConfFreqBins = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucDmtConfFreqBins.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtConfFreqBins.setDescription('A string of 32 bits to enable/disable the incoming DMT\n        frequency bins that the ATU-C receiver monitors. Each bit\n        controls one bin with the first bit of the first octet\n        controlling sub-carrier zero (lowest frequency  bin).\n        A bit set to 1 disables reception of the specified sub-\n        carrier frequency bin end a 0 enables reception.')
adslAturDmtConfFreqBins = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32).clone(hexValue="0000000000000000000000000000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturDmtConfFreqBins.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtConfFreqBins.setDescription('A string of 256 bits to enable/disable the incoming DMT frequency\n        bins that the ATU-R receiver should monitor after the next activation.\n        The mechanism to pass adslAturDMTConfFreqBins to the ATU-R is vendor\n        specific.  Each bit controls one bin with the first bit of the first\n        octet controlling sub-carrier zero (lowest frequency bin). A bit set\n        to 1 disables reception of the specified sub-carrier frequency bin end\n        a 0 enables reception.')
adslLineDmtConfMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("echoCancel", 1), ("freqDivMux", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslLineDmtConfMode.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfMode.setDescription('Defines the operational mode of the DMT ADSL transceiver.\n        Configured in the C-MSG1 and C-MSG-RA exchanges.')
adslLineDmtConfTrellis = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslLineDmtConfTrellis.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfTrellis.setDescription('Enables the Trellis coder of the DMT transceiver.  Configured\n        in the C-MSG1 and C-MSG-RA exchanges.')
adslLineDmtConfEOC = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byte", 1), ("streaming", 2))).clone('byte')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslLineDmtConfEOC.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfEOC.setDescription('Defines the embedded operations channel mode for the DMT\n         ADSL line.')
adslAtucDmtConfInterleavePath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("as0", 2), ("as1", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucDmtConfInterleavePath.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtConfInterleavePath.setDescription('Target channel for downstream interleave data path.')
adslAtucDmtConfFastPath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("as0", 2), ("as1", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAtucDmtConfFastPath.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtConfFastPath.setDescription('Target channel for downstream fast data path.')
adslAturDmtConfInterleavePath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ls0", 2), ("ls1", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturDmtConfInterleavePath.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtConfInterleavePath.setDescription('Target channel for upstream interleave data path.')
adslAturDmtConfFastPath = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ls0", 2), ("ls1", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adslAturDmtConfFastPath.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtConfFastPath.setDescription('Target channel for upstream fast data path.')
adslLineDmtAlarmConfProfileIndexNext = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 16))
adslLineDmtAlarmConfProfileTable = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 1, 17))
adslDmtLineMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 2))
adslDmtLineMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 2, 0))
adslLineDmtMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3))
adslLineDmtMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 1))
adslLineDmtMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 2))
adslDMTLineMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 1, 1)).setObjects(("ADSL-DMT-LINE-MIB", "adslLineDmtGroup"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtPhysGroup"), ("ADSL-DMT-LINE-MIB", "adslAturDmtPhysGroup"), ("ADSL-DMT-LINE-MIB", "adslLineDmtConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslDMTLineMibCompliance = adslDMTLineMibCompliance.setStatus('current')
if mibBuilder.loadTexts: adslDMTLineMibCompliance.setDescription('The compliance statement for SNMP entities which have ADSL DMT\n        interfaces.')
adslLineDmtMIBAturCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 1, 2)).setObjects(("ADSL-DMT-LINE-MIB", "adslLineDmtGroup"), ("ADSL-DMT-LINE-MIB", "adslAturDmtPhysGroup"), ("ADSL-DMT-LINE-MIB", "adslLineDmtConfProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineDmtMIBAturCompliance = adslLineDmtMIBAturCompliance.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtMIBAturCompliance.setDescription('The compliance statement for SNMP entities which manage ADSL DMT\n        ATU-R interfaces.')
adslLineDmtGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 2, 1)).setObjects(("ADSL-DMT-LINE-MIB", "adslLineDmtTrellis"), ("ADSL-DMT-LINE-MIB", "adslLineDmtEOC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineDmtGroup = adslLineDmtGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtGroup.setDescription('A collection of managed objects defining the attributes of an ADSL\n        line supportings modems using the DMT line code.')
adslAtucDmtPhysGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 2, 2)).setObjects(("ADSL-DMT-LINE-MIB", "adslAtucDmtIssue"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtState"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtInterleavePath"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtFastPath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAtucDmtPhysGroup = adslAtucDmtPhysGroup.setStatus('current')
if mibBuilder.loadTexts: adslAtucDmtPhysGroup.setDescription('A collection of managed objects defining the physical-layer \n        parameters of an ATU-C using the DMT line code.')
adslAturDmtPhysGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 2, 3)).setObjects(("ADSL-DMT-LINE-MIB", "adslAturDmtIssue"), ("ADSL-DMT-LINE-MIB", "adslAturDmtState"), ("ADSL-DMT-LINE-MIB", "adslAturDmtInterleavePath"), ("ADSL-DMT-LINE-MIB", "adslAturDmtFastPath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslAturDmtPhysGroup = adslAturDmtPhysGroup.setStatus('current')
if mibBuilder.loadTexts: adslAturDmtPhysGroup.setDescription('A collection of managed objects defining the physical-layer\n        parameters of an ATU-R using the DMT line code.')
adslLineDmtConfProfileGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 94, 1, 1, 16, 2, 3, 2, 4)).setObjects(("ADSL-DMT-LINE-MIB", "adslAtucDmtConfFreqBins"), ("ADSL-DMT-LINE-MIB", "adslAturDmtConfFreqBins"), ("ADSL-DMT-LINE-MIB", "adslLineDmtConfMode"), ("ADSL-DMT-LINE-MIB", "adslLineDmtConfTrellis"), ("ADSL-DMT-LINE-MIB", "adslLineDmtConfEOC"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtConfInterleavePath"), ("ADSL-DMT-LINE-MIB", "adslAtucDmtConfFastPath"), ("ADSL-DMT-LINE-MIB", "adslAturDmtConfInterleavePath"), ("ADSL-DMT-LINE-MIB", "adslAturDmtConfFastPath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adslLineDmtConfProfileGroup = adslLineDmtConfProfileGroup.setStatus('current')
if mibBuilder.loadTexts: adslLineDmtConfProfileGroup.setDescription('A collection of managed objects defining the line configuration\n        information associated with one or more ADSL ATU class devices\n\timplementing the DMT line code.')
mibBuilder.exportSymbols("ADSL-DMT-LINE-MIB", adslAtucDmtChanPerfDataTable=adslAtucDmtChanPerfDataTable, adslAturDmtChanIntervalTable=adslAturDmtChanIntervalTable, adslLineDmtAlarmConfProfileTable=adslLineDmtAlarmConfProfileTable, adslLineDmtMIBAturCompliance=adslLineDmtMIBAturCompliance, adslAtucDmtPhysGroup=adslAtucDmtPhysGroup, adslLineDmtMIBObjects=adslLineDmtMIBObjects, adslLineDmtTable=adslLineDmtTable, adslAtucDmtInterleavePath=adslAtucDmtInterleavePath, adslAturDmtPhysTable=adslAturDmtPhysTable, adslAtucDmtPerfDataTable=adslAtucDmtPerfDataTable, adslAturDmtIntervalTable=adslAturDmtIntervalTable, adslLineDmtGroup=adslLineDmtGroup, adslAtucDmtPhysTable=adslAtucDmtPhysTable, adslAtucDmtConfFreqBins=adslAtucDmtConfFreqBins, adslAturDmtFastPath=adslAturDmtFastPath, adslLineDmtConfProfileEntry=adslLineDmtConfProfileEntry, adslDMTLineMibCompliance=adslDMTLineMibCompliance, adslAtucDmtState=adslAtucDmtState, adslAtucDmtChanIntervalTable=adslAtucDmtChanIntervalTable, adslAtucDmtIntervalTable=adslAtucDmtIntervalTable, adslLineDmtMIB=adslLineDmtMIB, adslAtucDmtFastPath=adslAtucDmtFastPath, adslAtucDmtConfInterleavePath=adslAtucDmtConfInterleavePath, adslLineDmtConfProfileGroup=adslLineDmtConfProfileGroup, adslAturDmtChanTable=adslAturDmtChanTable, adslLineDmtMIBConformance=adslLineDmtMIBConformance, adslAturDmtChanPerfDataTable=adslAturDmtChanPerfDataTable, adslLineDmtEOC=adslLineDmtEOC, adslAtucDmtChanTable=adslAtucDmtChanTable, adslAtucDmtIssue=adslAtucDmtIssue, adslAturDmtIssue=adslAturDmtIssue, adslAturDmtPhysEntry=adslAturDmtPhysEntry, adslLineDmtMIBCompliances=adslLineDmtMIBCompliances, adslLineDmtConfMode=adslLineDmtConfMode, adslAturDmtPerfDataTable=adslAturDmtPerfDataTable, adslLineDmtConfEOC=adslLineDmtConfEOC, adslLineDmtAlarmConfProfileIndexNext=adslLineDmtAlarmConfProfileIndexNext, adslLineDmtEntry=adslLineDmtEntry, adslLineDmtConfTrellis=adslLineDmtConfTrellis, adslLineDmtMIBGroups=adslLineDmtMIBGroups, adslAturDmtConfFreqBins=adslAturDmtConfFreqBins, adslDmtLineMIBNotifications=adslDmtLineMIBNotifications, adslAturDmtState=adslAturDmtState, adslAtucDmtConfFastPath=adslAtucDmtConfFastPath, adslAturDmtPhysGroup=adslAturDmtPhysGroup, adslDmtLineMIBNotificationsPrefix=adslDmtLineMIBNotificationsPrefix, adslLineDmtConfProfileIndexNext=adslLineDmtConfProfileIndexNext, adslAturDmtConfInterleavePath=adslAturDmtConfInterleavePath, PYSNMP_MODULE_ID=adslLineDmtMIB, adslLineDmtConfProfileTable=adslLineDmtConfProfileTable, adslAturDmtInterleavePath=adslAturDmtInterleavePath, adslLineDmtTrellis=adslLineDmtTrellis, adslAturDmtConfFastPath=adslAturDmtConfFastPath, adslAtucDmtPhysEntry=adslAtucDmtPhysEntry)
