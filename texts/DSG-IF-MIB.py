#
# PySNMP MIB module DSG-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/DSG-IF-MIB
# Produced by pysmi-1.1.8 at Thu Jan  6 19:59:57 2022
# On host fv-az121-779 platform Linux version 5.11.0-1022-azure by user runner
# Using Python version 3.10.1 (main, Dec 14 2021, 13:12:05) [GCC 9.3.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
Dsid, = mibBuilder.importSymbols("DOCS-IF3-MIB", "Dsid")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddressPrefixLength, InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, iso, ModuleIdentity, Counter64, Gauge32, IpAddress, Bits, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "iso", "ModuleIdentity", "Counter64", "Gauge32", "IpAddress", "Bits", "TimeTicks", "Counter32")
DisplayString, RowStatus, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "MacAddress")
dsgIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3))
dsgIfMIB.setRevisions(('2017-06-15 00:00', '2011-11-17 00:00', '2009-05-29 00:00', '2008-06-26 00:00', '2006-07-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dsgIfMIB.setRevisionsDescriptions(('Revised per DSG-N-17.1740-1 to add Apache License\n            information.', 'This revision is published as part of the CableLabs\n             DOCSIS Set-top Gateway (DSG) Interface\n             Specification CM-SP-DSG-I19.', 'This revision is published as part of the CableLabs\n             DOCSIS Set-top Gateway (DSG) Interface\n             Specification CM-SP-DSG-I14.', 'This revision is published as part of the CableLabs\n            DOCSIS Set-top Gateway (DSG) Interface \n            Specification CM-SP-DSG-I12.', 'Published as part of DOCSIS Set-top \n             Gateway Specification.',))
if mibBuilder.loadTexts: dsgIfMIB.setLastUpdated('201706150000Z')
if mibBuilder.loadTexts: dsgIfMIB.setOrganization('Cable Television Laboratories, Inc')
if mibBuilder.loadTexts: dsgIfMIB.setContactInfo('Postal: Cable Television Laboratories, Inc. \n                     858 Coal Creek Circle \n                     Louisville, Colorado 80027\n                     U.S.A. \n            Phone : +1 303-661-9100 \n            Fax   : +1 303-661-9199 \n            E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: dsgIfMIB.setDescription("Licensed under the Apache License, Version 2.0 (the 'License');\n            you may not use this file except in compliance with the License.\n            You may obtain a copy of the License at:\n \n                http://www.apache.org/licenses/LICENSE-2.0\n \n            Unless required by applicable law or agreed to in writing, software\n            distributed under the License is distributed on an 'AS IS' BASIS,\n            WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or \n            implied.\n\n            See the License for the specific language governing permissions and\n            limitations under the License.\n\n            This is the MIB Module for the DOCSIS Set-top Gateway \n            (DSG). The DSG provides a one-way IP datagram transport \n            for Out-Of-Band (OOB) messaging to cable set-top clients.\n            The one-way IP datagram transport is called a DSG Tunnel.\n\n            A DSG Tunnel carrying either a broadcast, unicast or\n            multicast IP datagram stream originating at the DOCSIS\n            Set-top Gateway and carrying Out-Of-Band messages intended\n            for set-top clients. It is carried over one or more\n            downstream DOCSIS channels.\n\n            Multiple DSG tunnels may exist on a single downstream\n            DOCSIS channel.\n            Copyright 1999-2017 Cable Television Laboratories, Inc.\n            All rights reserved.")
dsgIfMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 0))
dsgIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1))
dsgIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 2))
dsgIfClassifier = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1))
dsgIfTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2))
dsgIfTunnelGrpToChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3))
dsgIfDownstreamChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4))
dsgIfDCD = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5))
dsgIfTunnelDsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6))
dsgIfClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dsgIfClassifierTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassifierTable.setDescription('The Classifier Table contains attributes use to classify \n            inbound packets into the tunnel and classifiers for the DSG\n            clients, encoding in the DCD messages on the downstream\n            channels to which the classifiers apply.')
dsgIfClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTunnelIndex"), (0, "DSG-IF-MIB", "dsgIfClassId"))
if mibBuilder.loadTexts: dsgIfClassifierEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassifierEntry.setDescription("An entry in the Classifier Table. Rows are created \n            by an SNMP SET request setting the value of \n            dsgIfClassRowStatus to 'createAndGo'. Each entry is created\n            for a tunnel, index by dsgTunnelIndex.\n\n            Rows are deleted by an SNMP SET request setting the value\n            of dsgIfClassRowStatus to 'destroy'.")
dsgIfClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: dsgIfClassId.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassId.setDescription('The index that provides a unique classifier (in a DSG\n            Agent). This value corresponds to the Classifier ID TLV\n            in the DCD message.')
dsgIfClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassPriority.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassPriority.setDescription('The priority of this classifier.  \n            Default value 0 indicates lowest priority.')
dsgIfClassSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassSrcIpAddrType.setDescription('The type of internet address of dsgIfClassSrcIpAddress. \n            Currently DSG Agents, DSG Client Controllers and DSG eCMs\n            are not required to support IPv6 DSG classifiers. ')
dsgIfClassSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassSrcIpAddr.setDescription('The source IP address to be matched for this classifier.\n            A value 0 for this object indicates a match of any IP\n            address. A value that contains non-zero bits\n            outside the range indicated by dsgIfClassSrcIpPrefixLength\n            is invalid and should be rejected.')
dsgIfClassSrcIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 5), InetAddressPrefixLength().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassSrcIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassSrcIpPrefixLength.setDescription('The length of the CIDR Prefix carried in\n            dsgIfClassSrcIpAddr. In IPv4 addresses, a length of 32 indicates\n            a match of a single host address, and a length between\n            0 and 32 indicates the use of a CIDR Prefix. A length of\n            0 is not allowed. This object is irrelevant and not used\n            when dsgIfClassSrcIpAddr value is 0.')
dsgIfClassDestIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 6), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassDestIpAddressType.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassDestIpAddressType.setDescription('The type of internet address of dsgIfClassDestIpAddress.\n            Currently DSG Agents, DSG Client Controllers and DSG eCMs\n            are not required to support IPv6 DSG classifiers. ')
dsgIfClassDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 7), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassDestIpAddress.setDescription('The destination IP address to be matched for this \n            classifier.')
dsgIfClassDestPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 8), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassDestPortStart.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassDestPortStart.setDescription('This is the inclusive lower bound of the transport-layer\n            source port range that is to be matched.')
dsgIfClassDestPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 9), InetPortNumber().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassDestPortEnd.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassDestPortEnd.setDescription('This is the inclusive higher bound of the transport-layer\n            source port range that is to be matched.')
dsgIfClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassRowStatus.setDescription('The status of the row.  A value of active(1) indicates \n            that this classifier is applied to this tunnel.\n            A value of notInService(2) indicates that matching of\n            the packets are ignored and this classifier parameters\n            will not be included in the DCD message.')
dsgIfClassIncludeInDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClassIncludeInDCD.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassIncludeInDCD.setDescription('Indicates whether or not this DSG Classifier will\n            be sent in DCD messages for use as a Layer-3 and\n            Layer-4 packet filter by the DSG eCM.')
dsgIfTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dsgIfTunnelTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelTable.setDescription('The DSG Tunnel Table contains group(s) of tunnel(s).\n            Each tunnel is associated to the destination MAC address.')
dsgIfTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTunnelIndex"))
if mibBuilder.loadTexts: dsgIfTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelEntry.setDescription("An entry in the DSG Tunnel Table. Rows are created by \n            an SNMP SET request setting the value of\n            dsgIfTunnelRowStatus to 'createAndGo'. \n\n            Each entry associated to a tunnel. A dsgIfTunnelGroupIndex\n            represents a group of tunnels that could be associated to\n            one or more downstream. Each dsgIfTunnelIndex represents\n            a tunnel.\n\n            Rows are deleted by an SNMP SET request setting the \n            value of dsgIfTunnelRowStatus to 'destroy'.")
dsgIfTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelIndex.setDescription('The index into the DSG Tunnel table that represent\n            a tunnel.')
dsgIfTunnelGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGroupIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGroupIndex.setDescription('This index represents a group of tunnels that could be \n            associated to one or more downstream which mapped\n            to dsgIfTunnelGrpIndex.')
dsgIfTunnelClientIdListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelClientIdListIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelClientIdListIndex.setDescription('This index represents a group of client id(s) \n            which mapped to dsgIfClientIdListIndex.')
dsgIfTunnelMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelMacAddress.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelMacAddress.setDescription('The DSG tunnel destination MAC address.')
dsgIfTunnelServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelServiceClassName.setReference(' CM-SP-RFIv2.0-I12-071206 Appendix C.2.2.3.4;\n               CM-SP-MULPIv3.0-I07-080215 Annex C.2.2.3.4;\n               CM-SP-OSSIv2.0-I10-070803 Annex J;\n               CM-SP-OSSIv3.0-I06-080215 Annex Q.7')
if mibBuilder.loadTexts: dsgIfTunnelServiceClassName.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelServiceClassName.setDescription('For DOCSIS 2.0 the Service Class Name is associated\n            to the docsQosServiceClassName in the DOCS-QOS-MIB. \n            For DOCSIS 3.0 the Service Class Name is associated\n            to the docsQosServiceClassName in the DOCS-QOS3-MIB.\n            Creation of a Service Class MUST be configured through  \n            the docsQosServiceClassTable.  Only partial of the\n            docsQosServiceClassTable objects are applicable to the\n            DSG service class thus some are ignored.\n\n            If the referenced parameter is not present in the\n            corresponding DOCSIS QOS Parameter Set, the default\n            value of this object is a zero length string.')
dsgIfTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelRowStatus.setDescription('The status of the row. A value of notInService(2)\n            indicates that this tunnel is disabled and no OOB traffic\n            will be forwarded to DSG clients and this tunnel parameters\n            will not be included in the DCD message.')
dsgIfTunnelGrpToChannelTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dsgIfTunnelGrpToChannelTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpToChannelTable.setDescription('The DSG Tunnel Group to Channel Table associates a group\n            of tunnels to one or more downstream channel.')
dsgIfTunnelGrpToChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTunnelGrpIndex"), (0, "DSG-IF-MIB", "dsgIfTunnelGrpChannelIndex"))
if mibBuilder.loadTexts: dsgIfTunnelGrpToChannelEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpToChannelEntry.setDescription("An entry in the DSG Tunnel Table. Rows are created by \n            an SNMP SET request setting the value of \n            dsgIfTunnelGrpRowStatus to 'createAndGo'.\n \n            Rows are deleted by an SNMP SET request setting the \n            value of dsgIfTunnelRowStatus to 'destroy'.")
dsgIfTunnelGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfTunnelGrpIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpIndex.setDescription('The index into this table.')
dsgIfTunnelGrpChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dsgIfTunnelGrpChannelIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpChannelIndex.setDescription('The index into this table.')
dsgIfTunnelGrpDsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGrpDsIfIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpDsIfIndex.setDescription('The downstream ifIndex that will be associated to\n            this group of tunnel(s).')
dsgIfTunnelGrpRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGrpRulePriority.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpRulePriority.setDescription('The DSG rule priority determines the order of which \n            channel and its associated UCIDs should be applied by \n            the DSG client. The default value is 0, which is the lowest\n            priority.')
dsgIfTunnelGrpUcidList = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGrpUcidList.setStatus('deprecated')
if mibBuilder.loadTexts: dsgIfTunnelGrpUcidList.setDescription('The list of Upstream Channel ID (UCID) values (octets)\n            for which the DSG rule applies. One octet represents one\n            UCID value (0-255). A DSG client matches this \n            parameter if its UCID value is included in the list. The \n            default value of zero length string indicates that this \n            DSG Rule applies to all DSG clients.')
dsgIfTunnelGrpVendorParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGrpVendorParamId.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpVendorParamId.setDescription('The index of vendor parameter, dsgIfVendorParamId in the\n            dsgIfVendorParamTable describing the vendor specific DSG\n            parameters. If no associated entry in dsgIfVendorParamTable\n            exists, this value is 0.')
dsgIfTunnelGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 3, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTunnelGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelGrpRowStatus.setDescription('The status of this row. The value of notInService(2)\n            indicates that this tunnel group is disabled and no OOB\n            traffic on all the associated tunnel(s) will be forwarded\n            to DSG clients and all parameters will not be included in\n            the DCD message.')
dsgIfDownstreamTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1), )
if mibBuilder.loadTexts: dsgIfDownstreamTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownstreamTable.setDescription('The DSG Downstream Table contains the associated timers,\n            vendor specific parameters index and the channel list\n            index to a specific downstream.')
dsgIfDownstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dsgIfDownstreamEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownstreamEntry.setDescription('An entry in the DSG Downstream Table. \n            An entry in this table exists for each ifEntry with\n            an ifType of docsCableDownstream(128).')
dsgIfDownTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsgIfDownTimerIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownTimerIndex.setDescription('The index into the timer table, dsgIfTimerTable providing\n            the timers used by the DSG client(s).\n            The default value 0 indicates there is no associated \n            timers that need to be sent in the DCD message.')
dsgIfDownVendorParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsgIfDownVendorParamId.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownVendorParamId.setDescription('The index of vendor parameter, dsgIfVendorParamId in the\n            dsgIfVendorParamTable describing the vendor specific DSG\n            parameters. If no associated entry in dsgIfVendorParamTable\n            exists, this value is 0.')
dsgIfDownChannelListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsgIfDownChannelListIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownChannelListIndex.setDescription('The index of a the downstream frequency channel lists,\n            dsgIfChannelListIndex in the dsgIfChannelListTable \n            providing the list of downstream frequencies that\n            contain DSG tunnels.')
dsgIfDownEnableDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 4, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsgIfDownEnableDCD.setStatus('current')
if mibBuilder.loadTexts: dsgIfDownEnableDCD.setDescription('Used to enable or disable DCD messages to be sent on this\n            downstream channel. The value is always true(1) for those\n            downstreams that contains one or many DSG Tunnels.')
dsgIfClientIdTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1), )
if mibBuilder.loadTexts: dsgIfClientIdTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdTable.setDescription('The Client Identification Table contains the client \n            identification type and value.  It also contains the\n            vendor specific parameter identification.  There could\n            be multiple client ids associated to a tunnel, grouped\n            by the dsgIfClientIdListIndex.')
dsgIfClientIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfClientIdListIndex"), (0, "DSG-IF-MIB", "dsgIfClientIdIndex"))
if mibBuilder.loadTexts: dsgIfClientIdEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdEntry.setDescription("An entry in the Client Id Table. Rows are created \n            by an SNMP SET request setting the value of \n            dsgIfClientRowStatus to 'createAndGo'. \n\n            Rows are deleted by an SNMP SET request setting the \n            value of dsgIfClientIdRowStatus to 'destroy'.")
dsgIfClientIdListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfClientIdListIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdListIndex.setDescription('The index to this table.')
dsgIfClientIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dsgIfClientIdIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdIndex.setDescription('The index to each entry of the Client Id.')
dsgIfClientIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("macAddress", 2), ("caSystemId", 3), ("applicationId", 4))).clone('broadcast')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClientIdType.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdType.setDescription('The Client Identification type.  A DSG client id of type\n            broadcast(1) received by all DSG client(s).  A DSG client\n            id of type macAddress(2) is received by the DSG client that\n            has been assigned with this MAC address where the first 3\n            bytes is the Organization Unique Identifier (OUI). A DSG\n            client id of type caSystemId(3) is received by the DSG\n            client that has been assigned a CA_system_ID.  A DSG client\n            id of type applicationId(4) is received by the DSG client\n            that has been assigned an application ID.')
dsgIfClientIdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6).clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClientIdValue.setReference('DOCSIS Set-top Gateway (DSG) Interface')
if mibBuilder.loadTexts: dsgIfClientIdValue.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientIdValue.setDescription("The Client Identification Value. The content depends on\n            the value of the dsgIfClientIdType. \n            For dsgIfClientIdType of a type broadcast(1), this object \n            will have a 16-bit value whether or not it is a length 0 or\n            length 2 broadcast ID. If the value is 0, then the encoded\n            TLV in the DCD would be the original, zero length,\n            broadcast ID. If the value is specified in Table 5-2, then\n            the TLV in the DCD would be a length 2 broadcast ID\n            followed by the value.\n            For dsgIfClientIdType of a type macAddress(2), this object\n            is a well known MAC address. \n            For dsgIfClientIdType of a type caSystemId(3), this object\n            is a CA System ID. \n            For dsgIfClientIdType of a type applicationId(4), this \n            object is an application ID.\n            Client IDs representing types broadcast(1), caSystemId(3) \n            or applicationId(4) are encoded in DCD messages as Unsigned\n            integers and configured in this object as 6 octet string \n            with the 2 LSB for the client ID value, e.g., an \n            applicationId 2048 (0x0800) is encoded as '000000000800'h.")
dsgIfClientVendorParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClientVendorParamId.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientVendorParamId.setDescription('The index of the vendor parameter id, dsgIfVendorParamId\n            in the dsgIfVendorParamTable describing the vendor specific\n            DSG parameters. If no associated entry in\n            dsgIfVendorParamTable exists, this value is 0.')
dsgIfClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfClientRowStatus.setDescription('The status of the row.')
dsgIfVendorParamTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2), )
if mibBuilder.loadTexts: dsgIfVendorParamTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorParamTable.setDescription('The DSG Vendor Parameter Table allows vendors to send\n            specific parameters to the DSG clients within a DSG\n            rule or within the DSG Configuration block in a\n            DCD message.')
dsgIfVendorParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfVendorParamId"), (0, "DSG-IF-MIB", "dsgIfVendorIndex"))
if mibBuilder.loadTexts: dsgIfVendorParamEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorParamEntry.setDescription("An entry in the DSG Vendor Parameter Table. Rows are \n            created by an SNMP SET request setting the value of \n            dsgIfVendorRowStatus to 'createAndGo'. Each entry\n            represents one or more vendor's specific parameters.\n            Rows are deleted by an SNMP SET  request setting the \n            value of dsgIfVendorRowStatus to 'destroy'.\n\n            There are limits to the amount of vendor specific \n            information that can be carried in a DSG Rule or \n            DSG Configuration block. An SNMP SET request which \n            would result in these limits being exceeded should be\n            rejected.")
dsgIfVendorParamId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfVendorParamId.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorParamId.setDescription('The index of the table.')
dsgIfVendorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dsgIfVendorIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorIndex.setDescription('The Vendor Specific Index.')
dsgIfVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfVendorOUI.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorOUI.setDescription('The Vendor assigned Organization Unique Id (OUI).')
dsgIfVendorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfVendorValue.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorValue.setDescription('The Vendor Specific Parameter Value.')
dsgIfVendorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfVendorRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfVendorRowStatus.setDescription('The status of the row.')
dsgIfChannelListTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3), )
if mibBuilder.loadTexts: dsgIfChannelListTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelListTable.setDescription('The DSG Channel List Table contains list of one or\n            multiple downstream frequencies that are carrying DSG\n            tunnel(s).')
dsgIfChannelListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfChannelListIndex"), (0, "DSG-IF-MIB", "dsgIfChannelIndex"))
if mibBuilder.loadTexts: dsgIfChannelListEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelListEntry.setDescription("An entry in the DSG Channel List Table. Rows are \n            created by an SNMP SET request setting the value of \n            dsgIfChannelRowStatus to 'createAndGo'.\n\n            Rows are deleted by an SNMP SET  request setting the value\n            of dsgIfChannelRowStatus to 'destroy'.")
dsgIfChannelListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfChannelListIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelListIndex.setDescription('The index to this table.')
dsgIfChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: dsgIfChannelIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelIndex.setDescription('The index for each downstream frequency that\n            contains the DSG tunnel(s).')
dsgIfChannelDsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfChannelDsFreq.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelDsFreq.setDescription('The DOCSIS downstream center frequency. The receive \n            frequency MUST be a multiple of 62500Hz.')
dsgIfChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfChannelRowStatus.setDescription('The status of the row.')
dsgIfTimerTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4), )
if mibBuilder.loadTexts: dsgIfTimerTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerTable.setDescription('The DSG Timer Table contains timers that are sent to\n            the DSG client(s) via the DCD message.')
dsgIfTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTimerIndex"))
if mibBuilder.loadTexts: dsgIfTimerEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerEntry.setDescription("An entry in the DSG Timer Table. Rows are created \n            by an SNMP SET request setting the value of \n            dsgIfTimerRowStatus to 'createAndGo'. \n\n            Rows are deleted by an SNMP SET request setting the value \n            of dsgIfTimerRowStatus to 'destroy'.")
dsgIfTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dsgIfTimerIndex.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerIndex.setDescription('The index to this table.')
dsgIfTimerTdsg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTimerTdsg1.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerTdsg1.setDescription('Initialization Timeout.  This is the timeout period \n            for the DSG packets during initialization of the DSG\n            client. The default value is 2 seconds.')
dsgIfTimerTdsg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(600)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTimerTdsg2.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerTdsg2.setDescription('Operational Timeout.  This is the timeout period for \n            the DSG packets during normal operation of the DSG client.\n            Default value is 600 seconds.')
dsgIfTimerTdsg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTimerTdsg3.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerTdsg3.setDescription('Two-way retry timer. This is the retry timer that\n            determines when the DSG client attempts to reconnect\n            with the DSG Agent and established two-way connectivity.\n            Default value is 300 seconds. The value 0 indicates that\n            the client will continuously retry two-way operation.')
dsgIfTimerTdsg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1800)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTimerTdsg4.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerTdsg4.setDescription('One-way retry timer.  The retry timer that determines\n            when the client attempts to rescan for a DOCSIS\n            downstream channel that contains DSG packets after a\n            dsgIfTimerTdsg1 or dsgIfTimerTdsg2 timeout. \n            Default value is 1800 seconds. The value 0 indicates that\n            the client will immediately begin scanning upon \n           dsgIfTimerTdsg1 or dsgIfTimerTdsg2 timeout.')
dsgIfTimerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 5, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dsgIfTimerRowStatus.setStatus('current')
if mibBuilder.loadTexts: dsgIfTimerRowStatus.setDescription('The status of the row.')
dsgIfTunnelDsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: dsgIfTunnelDsStatsTable.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelDsStatsTable.setDescription('The IF Tunnel Downstream Stats Table contains \n            the packet and byte counters for the tunnel. It also \n            contains the DSID used by the tunnel traffic.')
dsgIfTunnelDsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "DSG-IF-MIB", "dsgIfTunnelIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dsgIfTunnelDsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelDsStatsEntry.setDescription('An entry in the DSG IF Tunnel Downstream Stats Table. \n            An entry in this table exists for each dsgIfTunnelIndex\n            and an ifIndex of docsCableDownstream(128).')
dsgIfTunnelDsStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6, 1, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: dsgIfTunnelDsStatsPkts.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelDsStatsPkts.setDescription('This attribute indicates the count of the number of\n             packets transmitted in this tunnel')
dsgIfTunnelDsStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6, 1, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: dsgIfTunnelDsStatsOctets.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelDsStatsOctets.setDescription('This attribute indicates the count of the number of\n             octets transmitted in this tunnel ')
dsgIfTunnelDsStatsDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 1, 6, 1, 1, 3), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsgIfTunnelDsStatsDsid.setStatus('current')
if mibBuilder.loadTexts: dsgIfTunnelDsStatsDsid.setDescription('When operating with Multicast DSID Forwarding (MDF)\n            enabled, this object contains the DSID value with which the \n            CMTS labels the DSG Tunnel traffic. If no DSID has been         \n            created for this tunnel then this object returns 0. \n            When MDF is disabled this object returns 0. Pre-3.0 DOCSIS \n            devices are not required to instantiate this object.')
dsgIfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4))
dsgIfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 1))
dsgIfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 2))
dsgIfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 2, 1)).setObjects(("DSG-IF-MIB", "dsgIfClassifierGroup"), ("DSG-IF-MIB", "dsgIfBaseGroup"), ("DSG-IF-MIB", "dsgIfDCDGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsgIfBasicCompliance = dsgIfBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: dsgIfBasicCompliance.setDescription('The compliance statement for DOCSIS Set-top Gateway \n            systems.')
dsgIfClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 1, 1)).setObjects(("DSG-IF-MIB", "dsgIfClassPriority"), ("DSG-IF-MIB", "dsgIfClassSrcIpAddrType"), ("DSG-IF-MIB", "dsgIfClassSrcIpAddr"), ("DSG-IF-MIB", "dsgIfClassSrcIpPrefixLength"), ("DSG-IF-MIB", "dsgIfClassDestIpAddressType"), ("DSG-IF-MIB", "dsgIfClassDestIpAddress"), ("DSG-IF-MIB", "dsgIfClassDestPortStart"), ("DSG-IF-MIB", "dsgIfClassDestPortEnd"), ("DSG-IF-MIB", "dsgIfClassRowStatus"), ("DSG-IF-MIB", "dsgIfClassIncludeInDCD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsgIfClassifierGroup = dsgIfClassifierGroup.setStatus('current')
if mibBuilder.loadTexts: dsgIfClassifierGroup.setDescription('A collection of objects providing the classifier\n            configuration.')
dsgIfBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 1, 2)).setObjects(("DSG-IF-MIB", "dsgIfTunnelGroupIndex"), ("DSG-IF-MIB", "dsgIfTunnelClientIdListIndex"), ("DSG-IF-MIB", "dsgIfTunnelMacAddress"), ("DSG-IF-MIB", "dsgIfTunnelServiceClassName"), ("DSG-IF-MIB", "dsgIfTunnelRowStatus"), ("DSG-IF-MIB", "dsgIfTunnelGrpDsIfIndex"), ("DSG-IF-MIB", "dsgIfTunnelGrpRulePriority"), ("DSG-IF-MIB", "dsgIfTunnelGrpVendorParamId"), ("DSG-IF-MIB", "dsgIfTunnelGrpRowStatus"), ("DSG-IF-MIB", "dsgIfDownTimerIndex"), ("DSG-IF-MIB", "dsgIfDownVendorParamId"), ("DSG-IF-MIB", "dsgIfDownChannelListIndex"), ("DSG-IF-MIB", "dsgIfDownEnableDCD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsgIfBaseGroup = dsgIfBaseGroup.setStatus('current')
if mibBuilder.loadTexts: dsgIfBaseGroup.setDescription('A collection of objects providing DSG Tunnel and Channel\n            configuration.')
dsgIfDCDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 1, 3)).setObjects(("DSG-IF-MIB", "dsgIfClientIdType"), ("DSG-IF-MIB", "dsgIfClientIdValue"), ("DSG-IF-MIB", "dsgIfClientVendorParamId"), ("DSG-IF-MIB", "dsgIfClientRowStatus"), ("DSG-IF-MIB", "dsgIfVendorOUI"), ("DSG-IF-MIB", "dsgIfVendorValue"), ("DSG-IF-MIB", "dsgIfVendorRowStatus"), ("DSG-IF-MIB", "dsgIfChannelDsFreq"), ("DSG-IF-MIB", "dsgIfChannelRowStatus"), ("DSG-IF-MIB", "dsgIfTimerTdsg1"), ("DSG-IF-MIB", "dsgIfTimerTdsg2"), ("DSG-IF-MIB", "dsgIfTimerTdsg3"), ("DSG-IF-MIB", "dsgIfTimerTdsg4"), ("DSG-IF-MIB", "dsgIfTimerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsgIfDCDGroup = dsgIfDCDGroup.setStatus('current')
if mibBuilder.loadTexts: dsgIfDCDGroup.setDescription('A collection of objects providing Timers configuration.')
dsgIfDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 3, 4, 1, 4)).setObjects(("DSG-IF-MIB", "dsgIfTunnelGrpUcidList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsgIfDeprecatedGroup = dsgIfDeprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: dsgIfDeprecatedGroup.setDescription('A collection deprecated objects no longer required by this \n         Specification.')
mibBuilder.exportSymbols("DSG-IF-MIB", dsgIfTunnelDsStatsDsid=dsgIfTunnelDsStatsDsid, dsgIfMIBNotifications=dsgIfMIBNotifications, dsgIfClassSrcIpAddr=dsgIfClassSrcIpAddr, dsgIfDownstreamChannel=dsgIfDownstreamChannel, dsgIfTunnelGroupIndex=dsgIfTunnelGroupIndex, dsgIfTunnelGrpToChannelTable=dsgIfTunnelGrpToChannelTable, dsgIfTunnel=dsgIfTunnel, dsgIfMIBConformance=dsgIfMIBConformance, dsgIfTimerRowStatus=dsgIfTimerRowStatus, dsgIfClientIdType=dsgIfClientIdType, dsgIfTunnelDsStatsOctets=dsgIfTunnelDsStatsOctets, dsgIfClassIncludeInDCD=dsgIfClassIncludeInDCD, dsgIfTimerTdsg1=dsgIfTimerTdsg1, dsgIfVendorIndex=dsgIfVendorIndex, dsgIfTunnelTable=dsgIfTunnelTable, dsgIfTunnelDsStats=dsgIfTunnelDsStats, dsgIfDownstreamTable=dsgIfDownstreamTable, dsgIfTunnelGrpRulePriority=dsgIfTunnelGrpRulePriority, dsgIfDownVendorParamId=dsgIfDownVendorParamId, dsgIfDCDGroup=dsgIfDCDGroup, dsgIfTunnelEntry=dsgIfTunnelEntry, dsgIfTunnelGrpVendorParamId=dsgIfTunnelGrpVendorParamId, dsgIfTunnelDsStatsTable=dsgIfTunnelDsStatsTable, dsgIfTimerTable=dsgIfTimerTable, dsgIfClassRowStatus=dsgIfClassRowStatus, dsgIfTunnelGrpDsIfIndex=dsgIfTunnelGrpDsIfIndex, dsgIfTimerIndex=dsgIfTimerIndex, dsgIfDeprecatedGroup=dsgIfDeprecatedGroup, dsgIfClientVendorParamId=dsgIfClientVendorParamId, dsgIfClassifier=dsgIfClassifier, dsgIfTunnelGrpRowStatus=dsgIfTunnelGrpRowStatus, dsgIfChannelListEntry=dsgIfChannelListEntry, dsgIfClientIdValue=dsgIfClientIdValue, dsgIfBaseGroup=dsgIfBaseGroup, dsgIfDownTimerIndex=dsgIfDownTimerIndex, dsgIfClientIdListIndex=dsgIfClientIdListIndex, dsgIfChannelListTable=dsgIfChannelListTable, dsgIfVendorParamEntry=dsgIfVendorParamEntry, dsgIfClientIdIndex=dsgIfClientIdIndex, dsgIfTunnelRowStatus=dsgIfTunnelRowStatus, dsgIfVendorOUI=dsgIfVendorOUI, dsgIfTunnelGrpIndex=dsgIfTunnelGrpIndex, dsgIfChannelListIndex=dsgIfChannelListIndex, dsgIfGroups=dsgIfGroups, dsgIfClassifierTable=dsgIfClassifierTable, dsgIfConformance=dsgIfConformance, dsgIfTimerTdsg3=dsgIfTimerTdsg3, dsgIfTunnelServiceClassName=dsgIfTunnelServiceClassName, dsgIfClassifierGroup=dsgIfClassifierGroup, dsgIfTunnelGrpToChannel=dsgIfTunnelGrpToChannel, dsgIfClassPriority=dsgIfClassPriority, dsgIfTunnelGrpToChannelEntry=dsgIfTunnelGrpToChannelEntry, dsgIfTunnelGrpChannelIndex=dsgIfTunnelGrpChannelIndex, dsgIfDownEnableDCD=dsgIfDownEnableDCD, dsgIfClassSrcIpAddrType=dsgIfClassSrcIpAddrType, dsgIfClientIdTable=dsgIfClientIdTable, dsgIfClientIdEntry=dsgIfClientIdEntry, dsgIfTunnelMacAddress=dsgIfTunnelMacAddress, dsgIfTimerEntry=dsgIfTimerEntry, dsgIfClassifierEntry=dsgIfClassifierEntry, dsgIfMIB=dsgIfMIB, dsgIfDownChannelListIndex=dsgIfDownChannelListIndex, dsgIfTunnelDsStatsPkts=dsgIfTunnelDsStatsPkts, dsgIfTimerTdsg2=dsgIfTimerTdsg2, dsgIfClassId=dsgIfClassId, dsgIfClassDestIpAddressType=dsgIfClassDestIpAddressType, dsgIfTimerTdsg4=dsgIfTimerTdsg4, dsgIfTunnelGrpUcidList=dsgIfTunnelGrpUcidList, dsgIfClassDestPortStart=dsgIfClassDestPortStart, dsgIfTunnelClientIdListIndex=dsgIfTunnelClientIdListIndex, dsgIfTunnelIndex=dsgIfTunnelIndex, dsgIfVendorParamId=dsgIfVendorParamId, dsgIfMIBObjects=dsgIfMIBObjects, dsgIfClassSrcIpPrefixLength=dsgIfClassSrcIpPrefixLength, dsgIfClassDestPortEnd=dsgIfClassDestPortEnd, dsgIfClientRowStatus=dsgIfClientRowStatus, PYSNMP_MODULE_ID=dsgIfMIB, dsgIfDCD=dsgIfDCD, dsgIfVendorValue=dsgIfVendorValue, dsgIfVendorParamTable=dsgIfVendorParamTable, dsgIfTunnelDsStatsEntry=dsgIfTunnelDsStatsEntry, dsgIfChannelDsFreq=dsgIfChannelDsFreq, dsgIfDownstreamEntry=dsgIfDownstreamEntry, dsgIfClassDestIpAddress=dsgIfClassDestIpAddress, dsgIfCompliances=dsgIfCompliances, dsgIfVendorRowStatus=dsgIfVendorRowStatus, dsgIfBasicCompliance=dsgIfBasicCompliance, dsgIfChannelIndex=dsgIfChannelIndex, dsgIfChannelRowStatus=dsgIfChannelRowStatus)
