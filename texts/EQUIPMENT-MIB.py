#
# PySNMP MIB module EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/sagemcom/EQUIPMENT-MIB
# Produced by pysmi-1.1.3 at Sat Nov 20 17:15:38 2021
# On host fv-az121-977 platform Linux version 5.11.0-1021-azure by user runner
# Using Python version 3.10.0 (default, Oct 18 2021, 13:54:29) [GCC 9.3.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
sagemDr, = mibBuilder.importSymbols("SAGEM-DR-MIB", "sagemDr")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Unsigned32, MibIdentifier, Gauge32, Integer32, Bits, IpAddress, NotificationType, Counter64, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Unsigned32", "MibIdentifier", "Gauge32", "Integer32", "Bits", "IpAddress", "NotificationType", "Counter64", "iso", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
equip = ModuleIdentity((1, 3, 6, 1, 4, 1, 1038, 107))
equip.setRevisions(('1998-08-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: equip.setRevisionsDescriptions(('\n\tCreation : this MIB module describes equipment level operation such as\n\tdate and time set, restart, reset, community and trap  \n\tmanagement.\n\t',))
if mibBuilder.loadTexts: equip.setLastUpdated('0211150000Z')
if mibBuilder.loadTexts: equip.setOrganization('SAGEM/DR Tolbiac Centre')
if mibBuilder.loadTexts: equip.setContactInfo(' ')
if mibBuilder.loadTexts: equip.setDescription('  \n\tModification: \n\t\t\tDate: 15 11 2002\n\t\t\tDescription: \n\t\t\tsagemDr replace sagem-dr\n\t\t\tNOTIFICATION-TYPE replace TRAP-TYPE\n\t\t\t\t\t\t\n\tModification:\n\t\t\tDate: 14 06 2002\n\t\t\tDescription: Modification of Imports\n\t\t\t\tDisplayString is imported from SNMPv2-TC instead of RFC1213\t\t\t\t\n\n\tModification:\n\t\t\tDate: 20 12 1999\n\t\t\tDescription: Modification of comments\n\t\t\t\tModification of bugs\t\t\t\t\n \n\tModification: \n\t\t\tDate: 19 11 1999\n\t\t\tName: sagem-dr, SagemBoolean\n\t\t\tDescription: Definition of OID sagem-dr instead of sat      \n\t\t\t\tDefinition of data SagemBoolean instead of Boolean \n\t\n\t\t\tName: communityString\n\t\t\tDescription: SIZE(0..20) replaced by SIZE (0..50)\n\n\n\tNew Object: \n\t\t\tDate: 19 11 1999\n\t\t\n\t\t\tName: All *Manager* are new objects\n\t\t\tDescription: Manager list that recieves the traps.\n\n\t\t\tName: equipCptModif\n\t \t\tDescription: Incremental counter used to manage \n\t\t\t\tthe modifications\ton the equipment.\n\n\t \t\tName: communityAcces\n\t \t\tDescription: new names used\n\t\t\t\tiONNOS-ANM-Supervisor instead of Set ...\t\n\n\t\t\tName: trapCommunity\n\t\t\tDescription:SIZE(0..20) replaced by SIZE (0..50)\n\n\t\t\tName: equipLoad\n\t \t\tDescription: Object is simplified to an OID \n   \n\t\t\tName: equipLoadDiagnostic\n\t \t\tDescription: A string to help in case of problem  \n\n\t\t\tName: transferedItemTable,transferedItem,\n\t\t\t\tTransferedItem,transferedItemIndex\n\t\t\t\ttransferedItemType,transferedItemVersion\n\t\t\t\ttransferedItemComments\n\t \t\tDescription:\n\t\t\tThese object are used to manage the download \n\t\t\tand upload of some part of the data; the data\n\t\t\tcan be a part of a program, a complete program,\n\t\t\tor a config.\n\t\t\tThe transferedItemType is reused in equipLocalFile\n\n\t \t\tName: equipStatusV2\n\t\t\tDescription: used by IONOS ANM V2      \n\n\t')
class SagemBoolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class IntDateTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Severity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("nonAlarmed", 1), ("minor", 2), ("major", 3), ("critical", 4), ("warning", 5), ("invNonAlarmed", 6), ("invMinor", 7), ("invMajor", 8), ("invCritical", 9), ("invWarning", 10))

equipDateTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 1), IntDateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipDateTime.setStatus('current')
if mibBuilder.loadTexts: equipDateTime.setDescription('The value of this field is the date and time of the equipment.\n\tIt is the number of seconds since 1st January 1970.')
equipLastModif = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 2), IntDateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipLastModif.setStatus('current')
if mibBuilder.loadTexts: equipLastModif.setDescription('The date and time when the equipment was last modified.')
equipWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipWarmStart.setStatus('current')
if mibBuilder.loadTexts: equipWarmStart.setDescription("The equipment make a hot start if this field is set to `true'.\n\tThis operation can only be done by the iONOSANMsupervisor\n\tor dIRECTACCESSsupervisor. \n\tThe value returns to `false' after the restart.")
equipClearConf = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipClearConf.setStatus('current')
if mibBuilder.loadTexts: equipClearConf.setDescription("The equipment resets all its parameters, including those \n\tstored in non-volatile media storage, if this field is set \n\tto `true'.\n\tThis command does not apply to mib-2 parameters, like @ip, \n\trouting table, etc ...\n\tThis operation can only be done by the iONOSANMsupervisor\n\tor dIRECTACCESSsupervisor. \n\tThe value returns to `false' after the reset.\n\tThis operation is optionnal.")
communityNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityNumber.setStatus('current')
if mibBuilder.loadTexts: communityNumber.setDescription('Number of community in equipment.')
communityTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 107, 6), )
if mibBuilder.loadTexts: communityTable.setStatus('current')
if mibBuilder.loadTexts: communityTable.setDescription('List of community in equipment.')
communityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 107, 6, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "communityIndex"))
if mibBuilder.loadTexts: communityEntry.setStatus('current')
if mibBuilder.loadTexts: communityEntry.setDescription('A particular community of the equipment.')
communityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: communityIndex.setStatus('current')
if mibBuilder.loadTexts: communityIndex.setDescription('A unique value which identify a particular\n\tcommunity.')
communityString = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityString.setStatus('current')
if mibBuilder.loadTexts: communityString.setDescription("A unique textual string that can be used by a SNMP manager as\n\tcommunity string. It can be also used as password for other\n\tconfiguration like http, not only snmp.\n\tThe table must have at least two entries associated with \n\tthe iONOSANMsupervisor access right (this entry is created by \n\tequipement at startup with value `secret') and \n\tdIRECTACCESSsupervisor access right (this entry is \t\n\tcreated by equipement\tat startup  with value 'supervisor') . \n\tAccording to equipment implementation, it is possible to \n\tcreate other entries associed with lower rights that PDU \n\tcommunity string can afford (actualy equal if \n\tIONOSANMsupervisor status is granted).\n\tIf the other access rights are created at startup by the equipment,\n\t its must use the following values : 'private' for \n\t'iONOSANMoperator, 'public' for 'iONOSANMobserver', \n\t 'operator' for dIRECTACCESSoperator, 'observer' for \n\tdIRECTACCESSobserver, and 'client' for the others.\n\t\n\tAll community string can be modified only by \n\tIONOSANMsupervisor.\n\tA dIRECTACCESS community string can be modified by \n\tdIRECTACCESSsupervisor.\n\t\n\tThe reading of a community string gives *** for all \n\taccess rights .\n\t\n\tAn entry may be discarded by setting its community string to \n\tvoid string. This should not be used by the administrator or \n\the could discard himself ")
communityAcces = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("iONOSANMobserver", 1), ("iONOSANMoperator", 2), ("iONOSANMsupervisor", 3), ("dIRECTACCESSobserver", 4), ("dIRECTACCESSoperator", 5), ("dIRECTACCESSsupervisor", 6), ("iONOSANMclientobserver", 7), ("iONOSANMclientoperator", 8), ("dIRECTACCESSclientobserver", 9), ("dIRECTACCESSclientoperator", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: communityAcces.setStatus('current')
if mibBuilder.loadTexts: communityAcces.setDescription('\n\tiONOSANMsupervisor(3) access :\n\t\tallows all operations including community string\n\t\t(community string = password)\n\tiONOSANMoperator(2) access :\n\t\tallows all set operations except write community\n\t   \tstring read or write and also some special operations.\n\tiONOSANMobserver (1) access : \n\t\tallows only get and get_next requests.\n\tdIRECTACCESSsupervisor(6) access : \n\t\tallows all operations EXcluding IONOS ANM community string\n\tdIRECTACCESSoperator(5) access :\n\t\tallows all set operations except write community\n\t   \tstring read or write and also some special operations.\n\tdIRECTACCESSobserver (4) access :\n\t\tallows only get and get_next requests.\t\t\n      iONOSANMclientoperator(8) access :                      \n\t\tallows only set some special operations \n      iONOSANMclientobserver(7) access :\n\t\tallows only get and get_next requests for special operations \n      dIRECTACCESSclientoperator(10) access :                      \n\t\tallows only set some special operations \n\tdIRECTACCESSclientobserver(9) access :\n\t\tallows only get and get_next requests for special operations \n      ')
trapNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNumber.setStatus('current')
if mibBuilder.loadTexts: trapNumber.setDescription('Number of trap receivers description in equipment.')
trapTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 107, 8), )
if mibBuilder.loadTexts: trapTable.setStatus('current')
if mibBuilder.loadTexts: trapTable.setDescription('List of trap receivers in equipment.')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 107, 8, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "trapIndex"))
if mibBuilder.loadTexts: trapEntry.setStatus('current')
if mibBuilder.loadTexts: trapEntry.setDescription('A particular trap of the equipment.')
trapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapIndex.setStatus('current')
if mibBuilder.loadTexts: trapIndex.setDescription('A unique value which identify a particular\n\ttrap receiver.\n\tThe value of index is a constant assigned to an entry at\n\tequipment design time. ')
trapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestination.setStatus('current')
if mibBuilder.loadTexts: trapDestination.setDescription('The ip address to which the equipment will send the traps. \n\tNote that the value must be unique along this table.\n\tAn entry may be discarded by setting the IP address to 0.0.0.0\n\t')
trapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunity.setStatus('current')
if mibBuilder.loadTexts: trapCommunity.setDescription('The community string to use when a trap is sent to \n\tthis address. ')
equipLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 107, 9))
equipLocalFile = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLocalFile.setStatus('current')
if mibBuilder.loadTexts: equipLocalFile.setDescription('The file path suitable for the equipment.')
equipServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipServerAddress.setStatus('current')
if mibBuilder.loadTexts: equipServerAddress.setDescription("The ip adress of tftp serveur from which is read/write \n\tthe file `equipRemoteFile'.")
equipRemoteFile = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipRemoteFile.setStatus('current')
if mibBuilder.loadTexts: equipRemoteFile.setDescription('The file path to be loaded on/from the equipement.')
equipDirection = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("download", 0), ("upload", 1), ("backupDownload", 2), ("switching", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipDirection.setStatus('current')
if mibBuilder.loadTexts: equipDirection.setDescription("This field selects the direction of data stream.\n\tWhen it is set to `backupDownload', only the transfert is done.\n\tWhen it is set to `download' the transfert is done and then the \n\tinformation transfert is switched in the operational state.\n\tWhen it is set to `switching', there is no transfert; \n\tthere is only  a switching. ")
equipLoadProceed = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 5), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipLoadProceed.setStatus('current')
if mibBuilder.loadTexts: equipLoadProceed.setDescription("\n\tThis entry is use to start (set to `true') loading a file \n\ton/from a equipment which has a tftp client.\n\tThe value of the field remains to `true' until load is \n\tcompleted or has been aborted.\n\tThis operation can only be done by the iONOSANMsupervisor\n\tor dIRECTACCESSsupervisor.\n\tIt may be possible to abort the loading by setting it \n\tto false.\n\tAfter the switching of a new configuration, the equipment\n\tmust increase the value of the variable 'equipCptModif' \n\t")
equipLoadDiagnostic = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipLoadDiagnostic.setStatus('current')
if mibBuilder.loadTexts: equipLoadDiagnostic.setDescription('A string used to help in case of trouble.')
equipLoadProtocole = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ftp", 1), ("tftp", 2), ("http", 3), ("telnet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipLoadProtocole.setStatus('current')
if mibBuilder.loadTexts: equipLoadProtocole.setDescription('Protocole used by the equipment for the download')
transferedItemTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 107, 30), )
if mibBuilder.loadTexts: transferedItemTable.setStatus('current')
if mibBuilder.loadTexts: transferedItemTable.setDescription('List of uploaded or downloaded Item from the \n\tequipment.')
transferedItemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 107, 30, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "transferedItemIndex"))
if mibBuilder.loadTexts: transferedItemEntry.setStatus('current')
if mibBuilder.loadTexts: transferedItemEntry.setDescription('A particular Item transferd from/to the equipment.')
transferedItemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferedItemIndex.setStatus('current')
if mibBuilder.loadTexts: transferedItemIndex.setDescription('')
transferedItemType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 30, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferedItemType.setStatus('current')
if mibBuilder.loadTexts: transferedItemType.setDescription('used to know what kind of data to transferate,\n\tmainly programName or config')
transferedItemVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 30, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferedItemVersion.setStatus('current')
if mibBuilder.loadTexts: transferedItemVersion.setDescription('for a program, return the software version;\n\tfor a config return the associated software version')
transferedItemComment = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 30, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferedItemComment.setStatus('current')
if mibBuilder.loadTexts: transferedItemComment.setDescription('give additional information about the tranfered data')
equipStatus = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 10), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipStatus.setStatus('current')
if mibBuilder.loadTexts: equipStatus.setDescription("This field summerizes the status of all equipment objects \n\t(port, card, ...)\n\tThis variable is polled by IONOS ANM V1\n\tThe 'equipmentStatusTrap' is sent after a GET on this variable.\n\tequipStatus and equipStatusTrap are only used with V1. \n\t")
equipStatusV2 = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 11), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipStatusV2.setStatus('current')
if mibBuilder.loadTexts: equipStatusV2.setDescription('Replace equipStatus for the v2. For the v1, equipStatus \n\tin EQUIPMENT-MIB send a trap after been polled; \n\tFor the v2, equipStatus is polled.')
equipCptModif = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipCptModif.setStatus('current')
if mibBuilder.loadTexts: equipCptModif.setDescription('The counter for all equipments modifications. It represents\n        the sum of the 7 other counters')
cptModif = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 107, 14))
cptSNC = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptSNC.setStatus('current')
if mibBuilder.loadTexts: cptSNC.setDescription('The counter version for the SNC modifications.')
cptCnx = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptCnx.setStatus('current')
if mibBuilder.loadTexts: cptCnx.setDescription('The counter version for the Connexion modifications.')
cptMSP = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptMSP.setStatus('current')
if mibBuilder.loadTexts: cptMSP.setDescription('The counter version for the MSP modifications.')
cptMsSpring = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptMsSpring.setStatus('current')
if mibBuilder.loadTexts: cptMsSpring.setDescription('The counter version for the MS-SPRING modifications.')
cptSynchro = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptSynchro.setStatus('current')
if mibBuilder.loadTexts: cptSynchro.setDescription('The counter version for the Synchro modifications.')
cptMngt = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptMngt.setStatus('current')
if mibBuilder.loadTexts: cptMngt.setDescription('The counter version for the MNGT modifications (mngt list, password, trap, ...).')
cptNet = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cptNet.setStatus('current')
if mibBuilder.loadTexts: cptNet.setDescription('The counter version for the Network modifications.')
equipManagerNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 107, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipManagerNumber.setStatus('current')
if mibBuilder.loadTexts: equipManagerNumber.setDescription('Number of manager = number of IP addresses in the table')
equipManagerTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 107, 21), )
if mibBuilder.loadTexts: equipManagerTable.setStatus('current')
if mibBuilder.loadTexts: equipManagerTable.setDescription('Table containing Ip Addresses and maximum authorized level')
equipManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "equipManagerIndex"))
if mibBuilder.loadTexts: equipManagerEntry.setStatus('current')
if mibBuilder.loadTexts: equipManagerEntry.setDescription('Entry containing IP addresses of managers allowed in R/W.')
equipManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipManagerIndex.setStatus('current')
if mibBuilder.loadTexts: equipManagerIndex.setDescription("Index of equipManagerTable\n\tThere's only 10 values in this table")
equipManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerAddress.setStatus('current')
if mibBuilder.loadTexts: equipManagerAddress.setDescription('The IP address of one of the allowed managers.\n   \tIf the table contains only address values which are equal\n  \t to 0.0.0.0, no access filter are done.\n   \tWrite the IP address 0.0.0.0 to remove a manager.\n\tThis operation can only be done by the iONOSANMsupervisor.\n\t')
equipManagerADM = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1, 3), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerADM.setStatus('current')
if mibBuilder.loadTexts: equipManagerADM.setDescription("If 'true', this variable indicates that the manager defined by \n\tits address can have  the Supervisor rigth as maximum level\n\tThe value 'false' is set by the equipment when another level \n\tis choosen")
equipManagerOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1, 4), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerOPR.setStatus('current')
if mibBuilder.loadTexts: equipManagerOPR.setDescription("If 'true', this variable indicates that the manager defined by \n\tits address can have  the Operator rigth as maximum level\n\tThe value 'false' is set by the equipment when another level \n\tis choosen")
equipManagerOBS = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 107, 21, 1, 5), SagemBoolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: equipManagerOBS.setStatus('current')
if mibBuilder.loadTexts: equipManagerOBS.setDescription("If 'true', this variable indicates that the manager defined by \n\tits address can have the Observer rigth as maximum level\n\tThe value 'false' is set by the equipment when another level \n\tis choosen")
equipTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 107, 0))
equipStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 1038, 107, 0, 1)).setObjects(("EQUIPMENT-MIB", "equipStatus"))
if mibBuilder.loadTexts: equipStatusTrap.setStatus('current')
if mibBuilder.loadTexts: equipStatusTrap.setDescription('This trap indicates the alarm status of the equipment.\n\t\t\t\t\t\tOnly sent with IONOS ANM V1')
if mibBuilder.loadTexts: equipStatusTrap.setReference('')
mibBuilder.exportSymbols("EQUIPMENT-MIB", transferedItemType=transferedItemType, IntDateTime=IntDateTime, transferedItemEntry=transferedItemEntry, equip=equip, equipCptModif=equipCptModif, equipManagerIndex=equipManagerIndex, cptMSP=cptMSP, equipManagerOPR=equipManagerOPR, equipManagerTable=equipManagerTable, communityIndex=communityIndex, cptCnx=cptCnx, equipClearConf=equipClearConf, equipDateTime=equipDateTime, trapTable=trapTable, trapDestination=trapDestination, communityAcces=communityAcces, equipStatus=equipStatus, SagemBoolean=SagemBoolean, equipServerAddress=equipServerAddress, cptSNC=cptSNC, trapCommunity=trapCommunity, equipManagerNumber=equipManagerNumber, equipRemoteFile=equipRemoteFile, transferedItemIndex=transferedItemIndex, cptSynchro=cptSynchro, equipStatusTrap=equipStatusTrap, equipLastModif=equipLastModif, communityString=communityString, equipManagerADM=equipManagerADM, equipTraps=equipTraps, Severity=Severity, equipManagerOBS=equipManagerOBS, equipLocalFile=equipLocalFile, communityEntry=communityEntry, PYSNMP_MODULE_ID=equip, equipWarmStart=equipWarmStart, equipLoad=equipLoad, equipManagerEntry=equipManagerEntry, equipLoadProtocole=equipLoadProtocole, equipLoadDiagnostic=equipLoadDiagnostic, cptNet=cptNet, transferedItemComment=transferedItemComment, transferedItemVersion=transferedItemVersion, communityTable=communityTable, equipLoadProceed=equipLoadProceed, transferedItemTable=transferedItemTable, trapEntry=trapEntry, cptMsSpring=cptMsSpring, trapIndex=trapIndex, equipStatusV2=equipStatusV2, cptModif=cptModif, communityNumber=communityNumber, equipDirection=equipDirection, trapNumber=trapNumber, equipManagerAddress=equipManagerAddress, cptMngt=cptMngt)
